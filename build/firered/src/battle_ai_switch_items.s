@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.type	 ShouldSwitchIfPerishSong,function
	.thumb_func
ShouldSwitchIfPerishSong:
	push	{lr}
	ldr	r1, .L6
	ldr	r0, .L6+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r0, .L6+0x8
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xf]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.L3	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, .L6+0xc
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x92
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gBattleStruct
.L3:
	mov	r0, #0x0
.L5:
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 ShouldSwitchIfPerishSong,.Lfe1-ShouldSwitchIfPerishSong
	.align	2, 0
	.type	 ShouldSwitchIfWonderGuard,function
	.thumb_func
ShouldSwitchIfWonderGuard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L35
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L9	@cond_branch
	b	.L10
.L36:
	.align	2, 0
.L35:
	.word	gBattleTypeFlags
.L34:
	ldr	r0, .L37
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, .L37+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x92
	strb	r6, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L32
.L38:
	.align	2, 0
.L37:
	.word	gActiveBattler
	.word	gBattleStruct
.L9:
	ldr	r4, .L39
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x19
	beq	.LCB132
	b	.L10	@long jump
.LCB132:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r6, #0x0
	add	r7, r4, #0
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r4, r0, r7
	mov	r0, #0x20
	add	r0, r0, r4
	mov	r8, r0
.L14:
	lsl	r1, r6, #0x1
	ldr	r0, .L39+0x4
	ldrb	r0, [r0]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r0, r7, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldrh	r1, [r4]
	mov	r3, r8
	ldrb	r2, [r3]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L10	@cond_branch
.L13:
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L14	@cond_branch
	mov	r6, #0x0
	ldr	r0, .L39+0x8
	mov	r9, r0
.L21:
	mov	r0, #0x64
	mov	r5, r6
	mul	r5, r5, r0
	mov	r3, r9
	add	r4, r5, r3
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L20	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L20	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L39+0xc
	cmp	r0, r1
	beq	.L20	@cond_branch
	ldr	r1, .L39+0x10
	ldr	r0, .L39+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	beq	.L20	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r4, #0x0
	mov	r8, r5
	ldr	r1, .L39
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r5, r0, r1
	add	r7, r5, #0
	add	r7, r7, #0x20
.L27:
	add	r1, r4, #0
	add	r1, r1, #0xd
	mov	r0, r8
	add	r0, r0, r9
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L26	@cond_branch
	ldrh	r1, [r5]
	ldrb	r2, [r7]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L26	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.LCB289
	b	.L34	@long jump
.LCB289:
.L26:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L27	@cond_branch
.L20:
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L21	@cond_branch
.L10:
	mov	r0, #0x0
.L32:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L40:
	.align	2, 0
.L39:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gEnemyParty
	.word	0x19d
	.word	gBattlerPartyIndexes
.Lfe2:
	.size	 ShouldSwitchIfWonderGuard,.Lfe2-ShouldSwitchIfWonderGuard
	.align	2, 0
	.type	 FindMonThatAbsorbsOpponentsMove,function
	.thumb_func
FindMonThatAbsorbsOpponentsMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x1
	bl	HasSuperEffectiveMoveAgainstOpponents
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L44	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB347
	b	.L70	@long jump
.LCB347:
.L44:
	ldr	r1, .L72
	ldr	r5, .L72+0x4
	ldrb	r3, [r5]
	lsl	r0, r3, #0x1
	add	r4, r0, r1
	ldrh	r1, [r4]
	cmp	r1, #0
	bne	.LCB358
	b	.L70	@long jump
.LCB358:
	ldr	r0, .L72+0x8
	cmp	r1, r0
	bne	.LCB363
	b	.L70	@long jump
.LCB363:
	ldr	r2, .L72+0xc
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.LCB374
	b	.L70	@long jump
.LCB374:
	ldr	r0, .L72+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L47	@cond_branch
	mov	r8, r3
	mov	r0, r8
	bl	GetBattlerPosition
	mov	r4, #0x2
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L72+0x14
	ldrb	r1, [r1]
	ldr	r2, .L72+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L48	@cond_branch
	ldrb	r7, [r5]
	b	.L50
.L73:
	.align	2, 0
.L72:
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	0xffff
	.word	gBattleMoves
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L48:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	b	.L50
.L47:
	add	r7, r3, #0
	mov	r8, r7
.L50:
	ldr	r3, .L74
	ldr	r1, .L74+0x4
	ldr	r2, .L74+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x2]
	add	r1, r2, #0
	cmp	r0, #0xa
	bne	.L51	@cond_branch
	mov	r0, #0x12
	b	.L71
.L75:
	.align	2, 0
.L74:
	.word	gBattleMoves
	.word	gLastLandedMoves
	.word	gActiveBattler
.L51:
	cmp	r0, #0xb
	bne	.L53	@cond_branch
	mov	r2, #0xb
	mov	sl, r2
	b	.L52
.L53:
	cmp	r0, #0xd
	beq	.LCB476
	b	.L70	@long jump
.LCB476:
	mov	r0, #0xa
.L71:
	mov	sl, r0
.L52:
	ldr	r2, .L76
	ldrb	r1, [r1]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, sl
	bne	.L57	@cond_branch
	b	.L70
.L77:
	.align	2, 0
.L76:
	.word	gBattleMons
.L69:
	ldr	r0, .L78
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, .L78+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x92
	strb	r6, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L68
.L79:
	.align	2, 0
.L78:
	.word	gActiveBattler
	.word	gBattleStruct
.L57:
	mov	r6, #0x0
	ldr	r2, .L80
	mov	r9, r2
.L61:
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L80+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L60	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L60	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L80+0x8
	cmp	r0, r1
	beq	.L60	@cond_branch
	ldr	r1, .L80+0xc
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	beq	.L60	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	beq	.L60	@cond_branch
	ldr	r0, .L80+0x10
	ldr	r1, [r0]
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r6, r0
	beq	.L60	@cond_branch
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r6, r0
	beq	.L60	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L64	@cond_branch
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0, #0x17]
	b	.L65
.L81:
	.align	2, 0
.L80:
	.word	gSpeciesInfo
	.word	gEnemyParty
	.word	0x19d
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
.L64:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0, #0x16]
.L65:
	cmp	sl, r0
	bne	.L60	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L69	@cond_branch
.L60:
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L61	@cond_branch
.L70:
	mov	r0, #0x0
.L68:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 FindMonThatAbsorbsOpponentsMove,.Lfe3-FindMonThatAbsorbsOpponentsMove
	.align	2, 0
	.type	 ShouldSwitchIfNaturalCure,function
	.thumb_func
ShouldSwitchIfNaturalCure:
	push	{r4, r5, lr}
	ldr	r3, .L96
	ldr	r5, .L96+0x4
	ldrb	r4, [r5]
	mov	r0, #0x58
	mov	r2, r4
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L93	@cond_branch
	add	r1, r2, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1e
	bne	.L93	@cond_branch
	ldrh	r0, [r1, #0x2c]
	ldrh	r1, [r1, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bcc	.L93	@cond_branch
	ldr	r1, .L96+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L86	@cond_branch
	ldr	r0, .L96+0xc
	cmp	r1, r0
	bne	.L85	@cond_branch
.L86:
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L85	@cond_branch
	ldrb	r0, [r5]
	b	.L94
.L97:
	.align	2, 0
.L96:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gLastLandedMoves
	.word	0xffff
.L85:
	ldr	r2, .L98
	ldr	r1, .L98+0x4
	ldr	r4, .L98+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L87	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L87	@cond_branch
	ldrb	r0, [r4]
	b	.L94
.L99:
	.align	2, 0
.L98:
	.word	gBattleMoves
	.word	gLastLandedMoves
	.word	gActiveBattler
.L87:
	mov	r0, #0x8
	mov	r1, #0x1
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L95	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x1
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L95	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L91	@cond_branch
.L93:
	mov	r0, #0x0
	b	.L92
.L91:
	ldr	r0, .L100
	ldrb	r0, [r0]
.L94:
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, .L100+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x92
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
.L95:
	mov	r0, #0x1
.L92:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L101:
	.align	2, 0
.L100:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe4:
	.size	 ShouldSwitchIfNaturalCure,.Lfe4-ShouldSwitchIfNaturalCure
	.align	2, 0
	.type	 HasSuperEffectiveMoveAgainstOpponents,function
	.thumb_func
HasSuperEffectiveMoveAgainstOpponents:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L127
	ldrb	r1, [r0]
	ldr	r2, .L127+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L103	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L127+0x8
	mov	r7, #0x58
	mov	r0, r3
	mul	r0, r0, r7
	add	r5, r0, r6
	mov	r0, #0x20
	add	r0, r0, r5
	mov	r9, r0
.L107:
	lsl	r1, r4, #0x1
	ldr	r0, .L127+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r7
	add	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L106	@cond_branch
	ldrh	r1, [r5]
	mov	r3, r9
	ldrb	r2, [r3]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L106	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	bne	.L126	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L126	@cond_branch
.L106:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L107	@cond_branch
.L103:
	ldr	r0, .L127+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L113	@cond_branch
	b	.L114
.L128:
	.align	2, 0
.L127:
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattleTypeFlags
.L125:
.L126:
	mov	r0, #0x1
	b	.L124
.L113:
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L129
	ldrb	r1, [r0]
	ldr	r2, .L129+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L114	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L129+0x8
	mov	r7, #0x58
	mov	r0, r3
	mul	r0, r0, r7
	add	r5, r0, r6
	mov	r3, #0x20
	add	r3, r3, r5
	mov	r9, r3
.L118:
	lsl	r1, r4, #0x1
	ldr	r0, .L129+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r7
	add	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L117	@cond_branch
	ldrh	r1, [r5]
	mov	r3, r9
	ldrb	r2, [r3]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L117	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	bne	.L125	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L126	@cond_branch
.L117:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L118	@cond_branch
.L114:
	mov	r0, #0x0
.L124:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L130:
	.align	2, 0
.L129:
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gActiveBattler
.Lfe5:
	.size	 HasSuperEffectiveMoveAgainstOpponents,.Lfe5-HasSuperEffectiveMoveAgainstOpponents
	.align	2, 0
	.type	 AreStatsRaised,function
	.thumb_func
AreStatsRaised:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r1, .L139
	ldr	r0, .L139+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x18
	add	r2, r0, r1
	mov	r3, #0x7
.L135:
	ldrb	r1, [r2]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x6
	ble	.L134	@cond_branch
	sub	r1, r1, #0x6
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L134:
	add	r2, r2, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L135	@cond_branch
	mov	r0, #0x0
	cmp	r4, #0x3
	bls	.L138	@cond_branch
	mov	r0, #0x1
.L138:
	pop	{r4}
	pop	{r1}
	bx	r1
.L140:
	.align	2, 0
.L139:
	.word	gBattleMons
	.word	gActiveBattler
.Lfe6:
	.size	 AreStatsRaised,.Lfe6-AreStatsRaised
	.align	2, 0
	.type	 FindMonWithFlagsAndSuperEffective,function
	.thumb_func
FindMonWithFlagsAndSuperEffective:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	ldr	r1, .L169
	ldr	r5, .L169+0x4
	ldrb	r3, [r5]
	lsl	r0, r3, #0x1
	add	r4, r0, r1
	ldrh	r1, [r4]
	cmp	r1, #0
	bne	.LCB1129
	b	.L168	@long jump
.LCB1129:
	ldr	r0, .L169+0x8
	cmp	r1, r0
	bne	.LCB1134
	b	.L168	@long jump
.LCB1134:
	ldr	r0, .L169+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.LCB1141
	b	.L168	@long jump
.LCB1141:
	ldr	r2, .L169+0x10
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.LCB1152
	b	.L168	@long jump
.LCB1152:
	ldr	r0, .L169+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L145	@cond_branch
	mov	r9, r3
	mov	r0, r9
	bl	GetBattlerPosition
	mov	r4, #0x2
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L169+0x18
	ldrb	r1, [r1]
	ldr	r2, .L169+0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L146	@cond_branch
	ldrb	r5, [r5]
	mov	sl, r5
	b	.L148
.L170:
	.align	2, 0
.L169:
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	0xffff
	.word	gLastHitBy
	.word	gBattleMoves
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L146:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	b	.L148
.L167:
	ldr	r0, .L171
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, .L171+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x92
	strb	r7, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L166
.L172:
	.align	2, 0
.L171:
	.word	gActiveBattler
	.word	gBattleStruct
.L145:
	mov	r9, r3
	mov	sl, r9
.L148:
	mov	r7, #0x0
.L152:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L173
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.LCB1266
	b	.L151	@long jump
.LCB1266:
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	bne	.LCB1272
	b	.L151	@long jump
.LCB1272:
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L173+0x4
	cmp	r0, r1
	bne	.LCB1279
	b	.L151	@long jump
.LCB1279:
	ldr	r1, .L173+0x8
	mov	r2, r9
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r7, r0
	beq	.L151	@cond_branch
	mov	r2, sl
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r7, r0
	beq	.L151	@cond_branch
	ldr	r0, .L173+0xc
	ldr	r1, [r0]
	mov	r2, r9
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r7, r0
	beq	.L151	@cond_branch
	mov	r2, sl
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r7, r0
	beq	.L151	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L155	@cond_branch
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L173+0x10
	add	r0, r0, r1
	ldrb	r2, [r0, #0x17]
	b	.L156
.L174:
	.align	2, 0
.L173:
	.word	gEnemyParty
	.word	0x19d
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gSpeciesInfo
.L155:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r2, .L175
	add	r0, r0, r2
	ldrb	r2, [r0, #0x16]
.L156:
	ldr	r1, .L175+0x4
	ldr	r5, .L175+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	add	r1, r4, #0
	bl	AI_TypeCalc
	ldr	r1, [sp]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L151	@cond_branch
	ldr	r1, .L175+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r9, r0
	mov	r4, #0x0
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	mov	r8, r1
	ldr	r1, .L175+0x10
	mov	r0, #0x58
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r5, r0, r1
	add	r6, r5, #0
	add	r6, r6, #0x20
.L161:
	ldr	r0, .L175+0x14
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r0, r8
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L160	@cond_branch
	ldrh	r1, [r5]
	ldrb	r2, [r6]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L160	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp, #0x4]
	bl	__modsi3
	cmp	r0, #0
	bne	.LCB1426
	b	.L167	@long jump
.LCB1426:
.L160:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L161	@cond_branch
.L151:
	add	r7, r7, #0x1
	cmp	r7, #0x5
	bgt	.LCB1440
	b	.L152	@long jump
.LCB1440:
.L168:
	mov	r0, #0x0
.L166:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L176:
	.align	2, 0
.L175:
	.word	gSpeciesInfo
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	gLastHitBy
	.word	gBattleMons
	.word	gEnemyParty
.Lfe7:
	.size	 FindMonWithFlagsAndSuperEffective,.Lfe7-FindMonWithFlagsAndSuperEffective
	.align	2, 0
	.type	 ShouldSwitch,function
	.thumb_func
ShouldSwitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r6, .L202
	ldr	r4, .L202+0x4
	ldrb	r2, [r4]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r6, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L202+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1483
	b	.L199	@long jump
.LCB1483:
	ldr	r0, .L202+0xc
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB1492
	b	.L199	@long jump
.LCB1492:
	str	r1, [sp]
	mov	r0, #0xc
	add	r1, r2, #0
	mov	r2, #0x17
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1503
	b	.L199	@long jump
.LCB1503:
	ldrb	r1, [r4]
	str	r0, [sp]
	mov	r0, #0xc
	mov	r2, #0x47
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1515
	b	.L199	@long jump
.LCB1515:
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0x2a
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L180	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r1, r0, r6
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.LCB1536
	b	.L199	@long jump
.LCB1536:
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.LCB1543
	b	.L199	@long jump
.LCB1543:
.L180:
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L202+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L183	@cond_branch
	ldr	r4, .L202+0x4
	ldrb	r7, [r4]
	add	r0, r7, #0
	bl	GetBattlerPosition
	mov	r5, #0x2
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L202+0x14
	ldrb	r1, [r1]
	ldr	r2, .L202+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L184	@cond_branch
	ldrb	r6, [r4]
	b	.L186
.L203:
	.align	2, 0
.L202:
	.word	gBattleMons
	.word	gActiveBattler
	.word	0x400e000
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L184:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L186
.L183:
	ldr	r0, .L204
	ldrb	r6, [r0]
	add	r7, r6, #0
.L186:
	mov	r5, #0x0
.L190:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L204+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L189	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L189	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L204+0x8
	cmp	r0, r1
	beq	.L189	@cond_branch
	ldr	r1, .L204+0xc
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L189	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L189	@cond_branch
	ldr	r0, .L204+0x10
	ldr	r1, [r0]
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L189	@cond_branch
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L189	@cond_branch
	mov	r0, #0x1
	add	r8, r8, r0
.L189:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L190	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	beq	.L199	@cond_branch
	bl	ShouldSwitchIfPerishSong
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L200	@cond_branch
	bl	ShouldSwitchIfWonderGuard
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L200	@cond_branch
	bl	FindMonThatAbsorbsOpponentsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L200	@cond_branch
	bl	ShouldSwitchIfNaturalCure
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L200	@cond_branch
	mov	r0, #0x0
	bl	HasSuperEffectiveMoveAgainstOpponents
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L199	@cond_branch
	bl	AreStatsRaised
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L199	@cond_branch
	mov	r0, #0x8
	mov	r1, #0x2
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L200	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x3
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L199	@cond_branch
.L200:
	mov	r0, #0x1
	b	.L201
.L205:
	.align	2, 0
.L204:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	0x19d
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
.L199:
	mov	r0, #0x0
.L201:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 ShouldSwitch,.Lfe8-ShouldSwitch
	.align	2, 0
	.globl	AI_TrySwitchOrUseItem
	.type	 AI_TrySwitchOrUseItem,function
	.thumb_func
AI_TrySwitchOrUseItem:
	push	{r4, r5, r6, lr}
	ldr	r5, .L221
	ldr	r0, [r5]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1770
	b	.L207	@long jump
.LCB1770:
	bl	ShouldSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L208	@cond_branch
	ldr	r0, .L221+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, .L221+0x8
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x92
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bne	.L209	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bne	.L210	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L211	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	b	.L212
.L222:
	.align	2, 0
.L221:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gBattleStruct
.L211:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L212:
	mov	r4, #0x0
.L216:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L223
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L215	@cond_branch
	ldr	r1, .L223+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L215	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L215	@cond_branch
	ldr	r0, .L223+0x8
	ldr	r1, [r0]
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L215	@cond_branch
	add	r0, r5, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L210	@cond_branch
.L215:
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L216	@cond_branch
.L210:
	ldr	r0, .L223+0xc
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, .L223+0x8
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x92
	strb	r4, [r0]
.L209:
	ldr	r4, .L223+0xc
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldrb	r2, [r4]
	ldr	r1, .L223+0x8
	ldr	r1, [r1]
	add	r2, r2, r1
	add	r2, r2, #0x5c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	add	r0, r0, r1
	add	r0, r0, #0x92
	ldrb	r0, [r0]
	strb	r0, [r2]
	b	.L206
.L224:
	.align	2, 0
.L223:
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gActiveBattler
.L208:
	bl	ShouldUseItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L206	@cond_branch
.L207:
	ldr	r0, .L225
	ldrb	r0, [r0]
	mov	r2, #0x1
	eor	r2, r2, r0
	lsl	r2, r2, #0x8
	mov	r0, #0x1
	mov	r1, #0x0
	bl	BtlController_EmitTwoReturnValues
.L206:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L226:
	.align	2, 0
.L225:
	.word	gActiveBattler
.Lfe9:
	.size	 AI_TrySwitchOrUseItem,.Lfe9-AI_TrySwitchOrUseItem
	.align	2, 0
	.type	 ModulateByTypeEffectiveness,function
	.thumb_func
ModulateByTypeEffectiveness:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r6, r3, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	mov	r7, #0x0
	ldr	r0, .L237
	mov	sl, r0
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L229	@cond_branch
	mov	r5, sl
.L230:
	ldrb	r0, [r5]
	cmp	r0, #0xfe
	beq	.L232	@cond_branch
	ldr	r1, [sp]
	cmp	r0, r1
	bne	.L232	@cond_branch
	ldrb	r4, [r5, #0x1]
	cmp	r4, r9
	bne	.L234	@cond_branch
	ldrb	r1, [r6]
	ldrb	r0, [r5, #0x2]
	mul	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	strb	r0, [r6]
.L234:
	cmp	r4, r8
	bne	.L232	@cond_branch
	cmp	r9, r8
	beq	.L232	@cond_branch
	ldrb	r1, [r6]
	ldrb	r0, [r5, #0x2]
	mul	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	strb	r0, [r6]
.L232:
	add	r5, r5, #0x3
	add	r7, r7, #0x3
	mov	r1, sl
	add	r0, r7, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L230	@cond_branch
.L229:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L238:
	.align	2, 0
.L237:
	.word	gTypeEffectiveness
.Lfe10:
	.size	 ModulateByTypeEffectiveness,.Lfe10-ModulateByTypeEffectiveness
	.align	2, 0
	.globl	GetMostSuitableMonToSwitchInto
	.type	 GetMostSuitableMonToSwitchInto,function
	.thumb_func
GetMostSuitableMonToSwitchInto:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	ldr	r4, .L285
	ldrb	r2, [r4]
	ldr	r0, .L285+0x4
	ldr	r0, [r0]
	add	r0, r2, r0
	add	r1, r0, #0
	add	r1, r1, #0x5c
	ldrb	r0, [r1]
	cmp	r0, #0x6
	beq	.LCB2085
	b	.L281	@long jump
.LCB2085:
	ldr	r0, .L285+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L241	@cond_branch
	str	r2, [sp, #0xc]
	add	r0, r2, #0
	bl	GetBattlerPosition
	mov	r5, #0x2
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L285+0xc
	ldrb	r1, [r1]
	ldr	r2, .L285+0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L242	@cond_branch
	ldrb	r4, [r4]
	str	r4, [sp, #0x10]
	b	.L243
.L286:
	.align	2, 0
.L285:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L242:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
.L243:
	bl	Random
	mov	r3, #0x2
	and	r0, r0, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L287
	ldrb	r1, [r0]
	ldr	r2, .L287+0x4
	mov	r4, sl
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L245	@cond_branch
	eor	r4, r4, r3
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	b	.L245
.L288:
	.align	2, 0
.L287:
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L241:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldrb	r4, [r4]
	str	r4, [sp, #0x10]
	str	r4, [sp, #0xc]
.L245:
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, sp
	str	r1, [sp, #0x14]
.L248:
	mov	r2, #0x0
	str	r2, [sp, #0x4]
	mov	r4, #0x6
	str	r4, [sp, #0x8]
	mov	r7, #0x0
	ldr	r0, .L289
	mov	r8, r0
.L252:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L289+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0
	beq	.L253	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L253	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L253	@cond_branch
	ldr	r1, .L289+0x8
	ldr	r4, [sp, #0xc]
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r7
	beq	.L253	@cond_branch
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r7
	beq	.L253	@cond_branch
	ldr	r0, .L289+0xc
	ldr	r1, [r0]
	add	r0, r4, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r7, r0
	beq	.L253	@cond_branch
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r7, r0
	beq	.L253	@cond_branch
	ldr	r1, .L289+0x10
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x6]
	ldrb	r6, [r0, #0x7]
	mov	r0, #0xa
	ldr	r4, [sp, #0x14]
	strb	r0, [r4]
	mov	r0, #0x58
	mov	r4, sl
	mul	r4, r4, r0
	ldr	r0, .L289+0x14
	add	r4, r4, r0
	add	r0, r4, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	add	r1, r5, #0
	add	r2, r6, #0
	mov	r3, sp
	bl	ModulateByTypeEffectiveness
	add	r4, r4, #0x22
	ldrb	r0, [r4]
	add	r1, r5, #0
	add	r2, r6, #0
	mov	r3, sp
	bl	ModulateByTypeEffectiveness
	ldr	r2, [sp, #0x4]
	ldr	r1, [sp, #0x14]
	ldrb	r1, [r1]
	cmp	r2, r1
	bcs	.L251	@cond_branch
	ldr	r2, [sp, #0x14]
	ldrb	r2, [r2]
	str	r2, [sp, #0x4]
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	b	.L251
.L290:
	.align	2, 0
.L289:
	.word	gBitTable
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gSpeciesInfo
	.word	gBattleMons
.L253:
	mov	r4, r8
	ldr	r0, [r4]
	mov	r1, r9
	orr	r1, r1, r0
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L251:
	mov	r2, #0x4
	add	r8, r8, r2
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L252	@cond_branch
	ldr	r4, [sp, #0x8]
	cmp	r4, #0x6
	beq	.L257	@cond_branch
	mov	r7, #0x0
	mov	r0, #0x64
	mov	r5, r4
	mul	r5, r5, r0
	ldr	r6, .L291
.L261:
	add	r1, r7, #0
	add	r1, r1, #0xd
	add	r0, r5, r6
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.L260	@cond_branch
	ldr	r0, .L291+0x4
	ldrb	r1, [r0]
	add	r0, r4, #0
	mov	r2, sl
	bl	TypeCalc
	mov	r1, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L259	@cond_branch
.L260:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L261	@cond_branch
.L259:
	cmp	r7, #0x4
	beq	.LCB2389
	b	.L283	@long jump
.LCB2389:
	ldr	r1, [sp, #0x8]
	lsl	r0, r1, #0x2
	ldr	r2, .L291+0x8
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r4, r9
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	b	.L284
.L292:
	.align	2, 0
.L291:
	.word	gEnemyParty
	.word	gActiveBattler
	.word	gBitTable
.L257:
	mov	r0, #0x3f
.L284:
	mov	r9, r0
	mov	r1, r9
	cmp	r1, #0x3f
	beq	.LCB2419
	b	.L248	@long jump
.LCB2419:
	ldr	r0, .L293
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L293+0x4
	ldr	r0, [r0]
	strb	r1, [r0, #0x13]
	ldr	r0, .L293+0x8
	mov	r2, #0x1
	strb	r2, [r0, #0xe]
	ldr	r0, .L293+0xc
	strb	r1, [r0]
	ldr	r0, .L293+0x10
	strb	r2, [r0]
	mov	r2, #0x0
	str	r2, [sp, #0x4]
	mov	r4, #0x6
	str	r4, [sp, #0x8]
	mov	r7, #0x0
.L270:
	mov	r0, #0x64
	mov	r6, r7
	mul	r6, r6, r0
	ldr	r0, .L293+0x14
	add	r4, r6, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	add	r1, r7, #0x1
	str	r1, [sp, #0x18]
	cmp	r0, #0
	beq	.L269	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L269	@cond_branch
	ldr	r1, .L293+0x18
	ldr	r2, [sp, #0xc]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r7
	beq	.L269	@cond_branch
	ldr	r4, [sp, #0x10]
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r7
	beq	.L269	@cond_branch
	ldr	r0, .L293+0x4
	ldr	r1, [r0]
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r7, r0
	beq	.L269	@cond_branch
	add	r0, r4, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r7, r0
	beq	.L269	@cond_branch
	mov	r5, #0x0
	mov	r9, r6
	ldr	r0, .L293+0x1c
	mov	r8, r0
	ldr	r6, .L293+0x20
.L276:
	add	r1, r5, #0
	add	r1, r1, #0xd
	ldr	r0, .L293+0x14
	add	r0, r0, r9
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x0
	mov	r1, r8
	str	r0, [r1]
	cmp	r4, #0
	beq	.L277	@cond_branch
	ldr	r0, .L293+0x24
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x1
	beq	.L277	@cond_branch
	ldrb	r0, [r6]
	mov	r1, sl
	bl	AI_CalcDmg
	ldrb	r1, [r6]
	add	r0, r4, #0
	mov	r2, sl
	bl	TypeCalc
.L277:
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r4, [sp, #0x4]
	cmp	r4, r0
	bge	.L275	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
.L275:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L276	@cond_branch
.L269:
	ldr	r7, [sp, #0x18]
	cmp	r7, #0x5
	ble	.L270	@cond_branch
.L283:
	ldr	r0, [sp, #0x8]
.L281:
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L294:
	.align	2, 0
.L293:
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gCritMultiplier
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
	.word	gBattleMoveDamage
	.word	gActiveBattler
	.word	gBattleMoves
.Lfe11:
	.size	 GetMostSuitableMonToSwitchInto,.Lfe11-GetMostSuitableMonToSwitchInto
	.align	2, 0
	.type	 GetAI_ItemType,function
	.thumb_func
GetAI_ItemType:
	push	{r4, lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bne	.L296	@cond_branch
	mov	r0, #0x1
	b	.L307
.L296:
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L298	@cond_branch
	mov	r0, #0x2
	b	.L307
.L298:
	ldrb	r4, [r2, #0x3]
	mov	r3, #0x3f
	add	r0, r3, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L300	@cond_branch
	mov	r0, #0x3
	b	.L307
.L300:
	ldrb	r1, [r2]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L303	@cond_branch
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0
	bne	.L303	@cond_branch
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	beq	.L302	@cond_branch
.L303:
	mov	r0, #0x4
	b	.L307
.L302:
	mov	r0, #0x80
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L305	@cond_branch
	mov	r0, #0x6
	b	.L307
.L305:
	mov	r0, #0x5
.L307:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 GetAI_ItemType,.Lfe12-GetAI_ItemType
	.align	2, 0
	.type	 ShouldUseItem,function
	.thumb_func
ShouldUseItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	sl, r0
	mov	r7, #0x0
	mov	r1, #0x0
	mov	r8, r1
.L312:
	mov	r0, #0x64
	mov	r1, r8
	mul	r1, r1, r0
	ldr	r0, .L362
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L311	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L311	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L362+0x4
	cmp	r0, r1
	beq	.L311	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
.L311:
	mov	r2, #0x1
	add	r8, r8, r2
	mov	r0, r8
	cmp	r0, #0x5
	ble	.L312	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
.L318:
	ldr	r1, .L362+0x8
	mov	r2, r8
	cmp	r2, #0
	beq	.L319	@cond_branch
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x2c
	ldrb	r0, [r0]
	sub	r0, r0, r2
	add	r0, r0, #0x1
	cmp	sl, r0
	ble	.LCB2751
	b	.L317	@long jump
.LCB2751:
.L319:
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	mov	r2, r8
	lsl	r1, r2, #0x1
	add	r0, r0, #0x24
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r9, r0
	str	r1, [sp]
	cmp	r0, #0
	bne	.LCB2764
	b	.L317	@long jump
.LCB2764:
	ldr	r1, .L362+0xc
	sub	r0, r0, #0xd
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.LCB2771
	b	.L317	@long jump
.LCB2771:
	mov	r0, r9
	cmp	r0, #0xaf
	bne	.L322	@cond_branch
	ldr	r0, .L362+0x10
	ldr	r0, [r0]
	ldr	r1, .L362+0x14
	add	r5, r0, r1
	b	.L323
.L363:
	.align	2, 0
.L362:
	.word	gEnemyParty
	.word	0x19d
	.word	gBattleResources
	.word	gItemEffectTable
	.word	gSaveBlock1Ptr
	.word	0x311c
.L322:
	add	r5, r1, #0
.L323:
	mov	r2, r9
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r5, #0
	bl	GetAI_ItemType
	ldr	r4, .L364
	ldrb	r1, [r4]
	lsr	r1, r1, #0x1
	ldr	r3, .L364+0x4
	ldr	r2, [r3]
	add	r1, r1, r2
	add	r1, r1, #0xc4
	strb	r0, [r1]
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc4
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x5
	bls	.LCB2824
	b	.L324	@long jump
.LCB2824:
	lsl	r0, r0, #0x2
	ldr	r1, .L364+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L365:
	.align	2, 0
.L364:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	.L352
	.align	2, 0
	.align	2, 0
.L352:
	.word	.L325
	.word	.L328
	.word	.L333
	.word	.L341
	.word	.L349
	.word	.L360
.L325:
	ldr	r2, .L366
	ldr	r0, .L366+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2c]
	ldrh	r0, [r0, #0x28]
	lsr	r1, r1, #0x2
	cmp	r0, r1
	bcc	.LCB2859
	b	.L324	@long jump
.LCB2859:
	cmp	r0, #0
	bne	.LCB2861
	b	.L324	@long jump
.LCB2861:
.L361:
	mov	r7, #0x1
	b	.L356
.L367:
	.align	2, 0
.L366:
	.word	gBattleMons
	.word	gActiveBattler
.L328:
	mov	r0, r9
	mov	r1, #0x4
	mov	r2, #0x4
	bl	GetItemEffectParamOffset
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.LCB2882
	b	.L324	@long jump
.LCB2882:
	ldr	r2, .L368
	ldr	r0, .L368+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrh	r2, [r1, #0x28]
	cmp	r2, #0
	bne	.LCB2893
	b	.L324	@long jump
.LCB2893:
	ldrh	r3, [r1, #0x2c]
	lsr	r0, r3, #0x2
	cmp	r2, r0
	bcc	.L361	@cond_branch
	add	r0, r2, #0
	sub	r0, r3, r0
	add	r1, r5, r4
	ldrb	r1, [r1]
	cmp	r0, r1
	bgt	.LCB2906
	b	.L324	@long jump
.LCB2906:
	b	.L361
.L369:
	.align	2, 0
.L368:
	.word	gBattleMons
	.word	gActiveBattler
.L333:
	ldr	r3, .L370
	ldrb	r0, [r3]
	lsr	r0, r0, #0x1
	ldr	r2, .L370+0x4
	ldr	r1, [r2]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x20
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L334	@cond_branch
	ldr	r1, .L370+0x8
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L334	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L334:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x10
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L335	@cond_branch
	ldr	r1, .L370+0x8
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L336	@cond_branch
	mov	r0, #0x80
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L335	@cond_branch
.L336:
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L335:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x8
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L337	@cond_branch
	ldr	r1, .L370+0x8
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L337	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L337:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x4
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L338	@cond_branch
	ldr	r1, .L370+0x8
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L338	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L338:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x2
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L339	@cond_branch
	ldr	r1, .L370+0x8
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L339	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L339:
	ldrb	r1, [r5, #0x3]
	mov	r4, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3105
	b	.L324	@long jump
.LCB3105:
	ldr	r1, .L370+0x8
	ldrb	r3, [r3]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3117
	b	.L324	@long jump
.LCB3117:
	lsr	r1, r3, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	b	.L361
.L371:
	.align	2, 0
.L370:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons
.L341:
	ldr	r4, .L372
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r3, .L372+0x4
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L372+0x8
	ldrb	r2, [r4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0
	beq	.L324	@cond_branch
	ldrb	r1, [r5]
	mov	r6, #0xf
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L343	@cond_branch
	lsr	r2, r2, #0x1
	ldr	r0, [r3]
	add	r2, r2, r0
	add	r2, r2, #0xc6
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L343:
	ldrb	r1, [r5, #0x1]
	mov	r7, #0xf0
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L344	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
.L344:
	ldrb	r1, [r5, #0x1]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L345	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L345:
	ldrb	r1, [r5, #0x2]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L346	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L346:
	ldrb	r1, [r5, #0x2]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L347	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
.L347:
	ldrb	r1, [r5]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3264
	b	.L361	@long jump
.LCB3264:
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L361
.L373:
	.align	2, 0
.L372:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gDisableStructs
.L349:
	ldr	r4, .L374
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L374+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0
	beq	.L324	@cond_branch
	ldr	r0, .L374+0x8
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.LCB3314
	b	.L361	@long jump
.LCB3314:
.L324:
	cmp	r7, #0
	beq	.L317	@cond_branch
.L356:
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	ldr	r0, .L374
	ldrb	r0, [r0]
	lsr	r0, r0, #0x1
	ldr	r1, .L374+0xc
	ldr	r1, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc0
	mov	r1, r9
	strb	r1, [r0]
	ldr	r0, .L374+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x24
	ldr	r2, [sp]
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r7, #0
	b	.L357
.L375:
	.align	2, 0
.L374:
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gSideTimers
	.word	gBattleStruct
	.word	gBattleResources
.L317:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x3
	bgt	.LCB3366
	b	.L318	@long jump
.LCB3366:
.L360:
	mov	r0, #0x0
.L357:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 ShouldUseItem,.Lfe13-ShouldUseItem
.text
	.align	2, 0 @ Don't pad with nop

