@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sCirclingFingerSpriteTemplate,object
	.size	 sCirclingFingerSpriteTemplate,24
sCirclingFingerSpriteTemplate:
	.short	0x2750
	.short	0x2750
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCirclingFinger
	.align	2, 0
	.type	 sAnim_BouncingMusicNote,object
sAnim_BouncingMusicNote:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_BouncingMusicNote,8
	.align	2, 0
	.type	 sAnims_BouncingMusicNote,object
sAnims_BouncingMusicNote:
	.word	sAnim_BouncingMusicNote
	.size	 sAnims_BouncingMusicNote,4
	.align	2, 0
	.type	 sBouncingMusicNoteSpriteTemplate,object
	.size	 sBouncingMusicNoteSpriteTemplate,24
sBouncingMusicNoteSpriteTemplate:
	.short	0x2758
	.short	0x2758
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBouncingMusicNote
	.align	2, 0
	.type	 sVibrateBattlerBackSpriteTemplate,object
	.size	 sVibrateBattlerBackSpriteTemplate,24
sVibrateBattlerBackSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimVibrateBattlerBack
	.align	2, 0
	.type	 sMovingClampSpriteTemplate,object
	.size	 sMovingClampSpriteTemplate,24
sMovingClampSpriteTemplate:
	.short	0x27a1
	.short	0x27a1
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_Bite
	.word	AnimMovingClamp
	.align	2, 0
	.type	 sAnim_SmallExplosion,object
sAnim_SmallExplosion:
	.short	0x0
	.byte	0x9
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_SmallExplosion,20
	.align	2, 0
	.type	 sAnims_SmallExplosion,object
sAnims_SmallExplosion:
	.word	sAnim_SmallExplosion
	.size	 sAnims_SmallExplosion,4
	.align	2, 0
	.type	 sAffineAnim_SmallExplosion,object
sAffineAnim_SmallExplosion:
	.short	0x50
	.short	0x50
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x9
	.short	0x9
	.byte	0x0
	.byte	0x12
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_SmallExplosion,24
	.align	2, 0
	.type	 sAffineAnims_SmallExplosion,object
sAffineAnims_SmallExplosion:
	.word	sAffineAnim_SmallExplosion
	.size	 sAffineAnims_SmallExplosion,4
	.align	2, 0
	.type	 sSmallExplosionSpriteTemplate,object
	.size	 sSmallExplosionSpriteTemplate,24
sSmallExplosionSpriteTemplate:
	.short	0x2717
	.short	0x2717
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sAnims_SmallExplosion
	.word	0x0
	.word	sAffineAnims_SmallExplosion
	.word	AnimSpriteOnMonPos
	.align	2, 0
	.type	 sKinesisZapEnergyAnimCmds,object
sKinesisZapEnergyAnimCmds:
	.short	0x0
	.byte	0x43
	.space	1
	.short	0x8
	.byte	0x43
	.space	1
	.short	0x10
	.byte	0x43
	.space	1
	.short	0x18
	.byte	0x43
	.space	1
	.short	0x20
	.byte	0x43
	.space	1
	.short	0x28
	.byte	0x43
	.space	1
	.short	0x30
	.byte	0x43
	.space	1
	.short	-0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sKinesisZapEnergyAnimCmds,36
	.align	2, 0
	.type	 sKinesisZapEnergyAnimTable,object
sKinesisZapEnergyAnimTable:
	.word	sKinesisZapEnergyAnimCmds
	.size	 sKinesisZapEnergyAnimTable,4
	.globl	gKinesisZapEnergySpriteTemplate
	.align	2, 0
	.type	 gKinesisZapEnergySpriteTemplate,object
	.size	 gKinesisZapEnergySpriteTemplate,24
gKinesisZapEnergySpriteTemplate:
	.short	0x275b
	.short	0x275b
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	sKinesisZapEnergyAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimKinesisZapEnergy
	.align	2, 0
	.type	 sSwordsDanceBladeAffineAnimCmds,object
sSwordsDanceBladeAffineAnimCmds:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x14
	.short	0x0
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x20
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSwordsDanceBladeAffineAnimCmds,32
	.align	2, 0
	.type	 sSwordsDanceBladeAffineAnimTable,object
sSwordsDanceBladeAffineAnimTable:
	.word	sSwordsDanceBladeAffineAnimCmds
	.size	 sSwordsDanceBladeAffineAnimTable,4
	.globl	gSwordsDanceBladeSpriteTemplate
	.align	2, 0
	.type	 gSwordsDanceBladeSpriteTemplate,object
	.size	 gSwordsDanceBladeSpriteTemplate,24
gSwordsDanceBladeSpriteTemplate:
	.short	0x2715
	.short	0x2715
	.word	gOamData_AffineNormal_ObjBlend_32x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSwordsDanceBladeAffineAnimTable
	.word	AnimSwordsDanceBlade
	.globl	gSonicBoomSpriteTemplate
	.align	2, 0
	.type	 gSonicBoomSpriteTemplate,object
	.size	 gSonicBoomSpriteTemplate,24
gSonicBoomSpriteTemplate:
	.short	0x2713
	.short	0x2713
	.word	gOamData_AffineDouble_ObjBlend_32x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSonicBoomProjectile
	.globl	gAirWaveProjectileSpriteTemplate
	.align	2, 0
	.type	 gAirWaveProjectileSpriteTemplate,object
	.size	 gAirWaveProjectileSpriteTemplate,24
gAirWaveProjectileSpriteTemplate:
	.short	0x2713
	.short	0x2713
	.word	gOamData_AffineOff_ObjBlend_32x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimAirWaveProjectile
	.align	2, 0
	.type	 sGrowingRingAffineAnimCmds,object
sGrowingRingAffineAnimCmds:
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7
	.short	0x7
	.byte	0x0
	.byte	0xc8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sGrowingRingAffineAnimCmds,24
	.align	2, 0
	.type	 sWaterPulseRingAffineAnimCmds,object
sWaterPulseRingAffineAnimCmds:
	.short	0x5
	.short	0x5
	.byte	0x0
	.byte	0xa
	.space	2
	.short	-0xa
	.short	-0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0xa
	.short	0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	-0xa
	.short	-0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0xa
	.short	0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	-0xa
	.short	-0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0xa
	.short	0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 sWaterPulseRingAffineAnimCmds,64
	.globl	gGrowingRingAffineAnimTable
	.align	2, 0
	.type	 gGrowingRingAffineAnimTable,object
gGrowingRingAffineAnimTable:
	.word	sGrowingRingAffineAnimCmds
	.size	 gGrowingRingAffineAnimTable,4
	.align	2, 0
	.type	 sWaterPulseRingAffineAnimTable,object
sWaterPulseRingAffineAnimTable:
	.word	sWaterPulseRingAffineAnimCmds
	.size	 sWaterPulseRingAffineAnimTable,4
	.globl	gSupersonicRingSpriteTemplate
	.align	2, 0
	.type	 gSupersonicRingSpriteTemplate,object
	.size	 gSupersonicRingSpriteTemplate,24
gSupersonicRingSpriteTemplate:
	.short	0x27b3
	.short	0x27b3
	.word	gOamData_AffineDouble_ObjNormal_16x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gGrowingRingAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gScreechRingSpriteTemplate
	.align	2, 0
	.type	 gScreechRingSpriteTemplate,object
	.size	 gScreechRingSpriteTemplate,24
gScreechRingSpriteTemplate:
	.short	0x27b4
	.short	0x27b4
	.word	gOamData_AffineDouble_ObjNormal_16x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gGrowingRingAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gMetalSoundSpriteTemplate
	.align	2, 0
	.type	 gMetalSoundSpriteTemplate,object
	.size	 gMetalSoundSpriteTemplate,24
gMetalSoundSpriteTemplate:
	.short	0x2814
	.short	0x2814
	.word	gOamData_AffineDouble_ObjNormal_32x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gGrowingRingAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gWaterPulseRingSpriteTemplate
	.align	2, 0
	.type	 gWaterPulseRingSpriteTemplate,object
	.size	 gWaterPulseRingSpriteTemplate,24
gWaterPulseRingSpriteTemplate:
	.short	0x2830
	.short	0x2830
	.word	gOamData_AffineDouble_ObjNormal_16x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sWaterPulseRingAffineAnimTable
	.word	AnimWaterPulseRing
	.globl	gEggThrowSpriteTemplate
	.align	2, 0
	.type	 gEggThrowSpriteTemplate,object
	.size	 gEggThrowSpriteTemplate,24
gEggThrowSpriteTemplate:
	.short	0x27bf
	.short	0x27bf
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimThrowProjectile
	.align	2, 0
	.type	 sVoidLinesSpriteTemplate,object
	.size	 sVoidLinesSpriteTemplate,24
sVoidLinesSpriteTemplate:
	.short	0x27c2
	.short	0x27c2
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimVoidLines
	.align	2, 0
	.type	 sCoinAnimCmds,object
sCoinAnimCmds:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sCoinAnimCmds,8
	.align	2, 0
	.type	 sCoinAnimTable,object
sCoinAnimTable:
	.word	sCoinAnimCmds
	.size	 sCoinAnimTable,4
	.align	2, 0
	.type	 sFallingCoinAffineAnimCmds,object
sFallingCoinAffineAnimCmds:
	.short	0x0
	.short	0x0
	.byte	0xa
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sFallingCoinAffineAnimCmds,16
	.align	2, 0
	.type	 sFallingCoinAffineAnimTable,object
sFallingCoinAffineAnimTable:
	.word	sFallingCoinAffineAnimCmds
	.size	 sFallingCoinAffineAnimTable,4
	.globl	gCoinThrowSpriteTemplate
	.align	2, 0
	.type	 gCoinThrowSpriteTemplate,object
	.size	 gCoinThrowSpriteTemplate,24
gCoinThrowSpriteTemplate:
	.short	0x2774
	.short	0x2774
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	sCoinAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCoinThrow
	.globl	gFallingCoinSpriteTemplate
	.align	2, 0
	.type	 gFallingCoinSpriteTemplate,object
	.size	 gFallingCoinSpriteTemplate,24
gFallingCoinSpriteTemplate:
	.short	0x2774
	.short	0x2774
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	sCoinAnimTable
	.word	0x0
	.word	sFallingCoinAffineAnimTable
	.word	AnimFallingCoin
	.align	2, 0
	.type	 sBulletSeedAffineAnimCmds,object
sBulletSeedAffineAnimCmds:
	.short	0x0
	.short	0x0
	.byte	0x14
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sBulletSeedAffineAnimCmds,16
	.align	2, 0
	.type	 sBulletSeedAffineAnimTable,object
sBulletSeedAffineAnimTable:
	.word	sBulletSeedAffineAnimCmds
	.size	 sBulletSeedAffineAnimTable,4
	.globl	gBulletSeedSpriteTemplate
	.align	2, 0
	.type	 gBulletSeedSpriteTemplate,object
	.size	 gBulletSeedSpriteTemplate,24
gBulletSeedSpriteTemplate:
	.short	0x2716
	.short	0x2716
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sBulletSeedAffineAnimTable
	.word	AnimBulletSeed
	.align	2, 0
	.type	 sRazorWindTornadoAffineAnimCmds,object
sRazorWindTornadoAffineAnimCmds:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x0
	.byte	0x0
	.byte	0x28
	.space	2
	.short	0x7fff
	.space	6
	.size	 sRazorWindTornadoAffineAnimCmds,24
	.align	2, 0
	.type	 sRazorWindTornadoAffineAnimTable,object
sRazorWindTornadoAffineAnimTable:
	.word	sRazorWindTornadoAffineAnimCmds
	.size	 sRazorWindTornadoAffineAnimTable,4
	.globl	gRazorWindTornadoSpriteTemplate
	.align	2, 0
	.type	 gRazorWindTornadoSpriteTemplate,object
	.size	 gRazorWindTornadoSpriteTemplate,24
gRazorWindTornadoSpriteTemplate:
	.short	0x2719
	.short	0x2719
	.word	gOamData_AffineNormal_ObjNormal_32x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sRazorWindTornadoAffineAnimTable
	.word	AnimRazorWindTornado
	.align	2, 0
	.type	 sViceGripAnimCmds1,object
sViceGripAnimCmds1:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x14
	.space	1
	.short	-0x1
	.space	2
	.size	 sViceGripAnimCmds1,16
	.align	2, 0
	.type	 sViceGripAnimCmds2,object
sViceGripAnimCmds2:
	.short	0x0
	.byte	0xc3
	.space	1
	.short	0x10
	.byte	0xc3
	.space	1
	.short	0x20
	.byte	0xd4
	.space	1
	.short	-0x1
	.space	2
	.size	 sViceGripAnimCmds2,16
	.align	2, 0
	.type	 sViceGripAnimTable,object
sViceGripAnimTable:
	.word	sViceGripAnimCmds1
	.word	sViceGripAnimCmds2
	.size	 sViceGripAnimTable,8
	.globl	gViceGripSpriteTemplate
	.align	2, 0
	.type	 gViceGripSpriteTemplate,object
	.size	 gViceGripSpriteTemplate,24
gViceGripSpriteTemplate:
	.short	0x279a
	.short	0x279a
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	sViceGripAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimViceGripPincer
	.align	2, 0
	.type	 sGuillotineAnimCmds1,object
sGuillotineAnimCmds1:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sGuillotineAnimCmds1,16
	.align	2, 0
	.type	 sGuillotineAnimCmds2,object
sGuillotineAnimCmds2:
	.short	0x0
	.byte	0xc2
	.space	1
	.short	0x10
	.byte	0xc2
	.space	1
	.short	0x20
	.byte	0xc1
	.space	1
	.short	-0x1
	.space	2
	.size	 sGuillotineAnimCmds2,16
	.align	2, 0
	.type	 sGuillotineAnimTable,object
sGuillotineAnimTable:
	.word	sGuillotineAnimCmds1
	.word	sGuillotineAnimCmds2
	.size	 sGuillotineAnimTable,8
	.globl	gGuillotineSpriteTemplate
	.align	2, 0
	.type	 gGuillotineSpriteTemplate,object
	.size	 gGuillotineSpriteTemplate,24
gGuillotineSpriteTemplate:
	.short	0x279a
	.short	0x279a
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	sGuillotineAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGuillotinePincer
	.align	2, 0
	.type	 sSplashEffectAffineAnimCmds,object
sSplashEffectAffineAnimCmds:
	.short	-0x6
	.short	0x4
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0xa
	.short	-0xa
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x4
	.short	0x6
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSplashEffectAffineAnimCmds,32
	.align	2, 0
	.type	 sGrowAndShrinkAffineAnimCmds,object
sGrowAndShrinkAffineAnimCmds:
	.short	-0x4
	.short	-0x5
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x18
	.space	2
	.short	0x4
	.short	0x5
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x7fff
	.space	6
	.size	 sGrowAndShrinkAffineAnimCmds,32
	.align	2, 0
	.type	 sBreathPuffAnimCmds1,object
sBreathPuffAnimCmds1:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x4
	.byte	0x68
	.space	1
	.short	0x8
	.byte	0x44
	.space	1
	.short	0xc
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 sBreathPuffAnimCmds1,20
	.align	2, 0
	.type	 sBreathPuffAnimCmds2,object
sBreathPuffAnimCmds2:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x4
	.byte	0x28
	.space	1
	.short	0x8
	.byte	0x4
	.space	1
	.short	0xc
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sBreathPuffAnimCmds2,20
	.align	2, 0
	.type	 sBreathPuffAnimTable,object
sBreathPuffAnimTable:
	.word	sBreathPuffAnimCmds1
	.word	sBreathPuffAnimCmds2
	.size	 sBreathPuffAnimTable,8
	.globl	gBreathPuffSpriteTemplate
	.align	2, 0
	.type	 gBreathPuffSpriteTemplate,object
	.size	 gBreathPuffSpriteTemplate,24
gBreathPuffSpriteTemplate:
	.short	0x2766
	.short	0x2766
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sBreathPuffAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBreathPuff
	.align	2, 0
	.type	 sAngerMarkAffineAnimCmds,object
sAngerMarkAffineAnimCmds:
	.short	0xb
	.short	0xb
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0xb
	.short	-0xb
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAngerMarkAffineAnimCmds,24
	.align	2, 0
	.type	 sAngerMarkAffineAnimTable,object
sAngerMarkAffineAnimTable:
	.word	sAngerMarkAffineAnimCmds
	.size	 sAngerMarkAffineAnimTable,4
	.globl	gAngerMarkSpriteTemplate
	.align	2, 0
	.type	 gAngerMarkSpriteTemplate,object
	.size	 gAngerMarkSpriteTemplate,24
gAngerMarkSpriteTemplate:
	.short	0x2767
	.short	0x2767
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAngerMarkAffineAnimTable
	.word	AnimAngerMark
	.align	2, 0
	.type	 sThrashMoveMonAffineAnimCmds,object
sThrashMoveMonAffineAnimCmds:
	.short	-0xa
	.short	0x9
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0x14
	.short	-0x14
	.byte	0x0
	.byte	0x7
	.space	2
	.short	-0x14
	.short	0x14
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0xa
	.short	-0x9
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	0x7fff
	.space	6
	.size	 sThrashMoveMonAffineAnimCmds,48
	.globl	gPencilSpriteTemplate
	.align	2, 0
	.type	 gPencilSpriteTemplate,object
	.size	 gPencilSpriteTemplate,24
gPencilSpriteTemplate:
	.short	0x2712
	.short	0x2712
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPencil
	.globl	gSnoreZSpriteTemplate
	.align	2, 0
	.type	 gSnoreZSpriteTemplate,object
	.size	 gSnoreZSpriteTemplate,24
gSnoreZSpriteTemplate:
	.short	0x27d5
	.short	0x27d5
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimTravelDiagonally
	.align	2, 0
	.type	 sExplosionAnimCmds,object
sExplosionAnimCmds:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sExplosionAnimCmds,20
	.align	2, 0
	.type	 sExplosionAnimTable,object
sExplosionAnimTable:
	.word	sExplosionAnimCmds
	.size	 sExplosionAnimTable,4
	.globl	gExplosionSpriteTemplate
	.align	2, 0
	.type	 gExplosionSpriteTemplate,object
	.size	 gExplosionSpriteTemplate,24
gExplosionSpriteTemplate:
	.short	0x27d6
	.short	0x27d6
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sExplosionAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.align	2, 0
	.type	 sSoftBoiledEggAffineAnimCmds1,object
sSoftBoiledEggAffineAnimCmds1:
	.short	0x0
	.short	0x0
	.byte	0xf8
	.byte	0x2
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x8
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf8
	.byte	0x2
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSoftBoiledEggAffineAnimCmds1,32
	.align	2, 0
	.type	 sSoftBoiledEggAffineAnimCmds2,object
sSoftBoiledEggAffineAnimCmds2:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSoftBoiledEggAffineAnimCmds2,16
	.align	2, 0
	.type	 sSoftBoiledEggAffineAnimCmds3,object
sSoftBoiledEggAffineAnimCmds3:
	.short	-0x8
	.short	0x4
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x10
	.short	-0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x10
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffd
	.short	0x1
	.space	4
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSoftBoiledEggAffineAnimCmds3,64
	.align	2, 0
	.type	 sSoftBoiledEggAffineAnimTable,object
sSoftBoiledEggAffineAnimTable:
	.word	sSoftBoiledEggAffineAnimCmds1
	.word	sSoftBoiledEggAffineAnimCmds2
	.word	sSoftBoiledEggAffineAnimCmds3
	.size	 sSoftBoiledEggAffineAnimTable,12
	.globl	gSoftBoiledEggSpriteTemplate
	.align	2, 0
	.type	 gSoftBoiledEggSpriteTemplate,object
	.size	 gSoftBoiledEggSpriteTemplate,24
gSoftBoiledEggSpriteTemplate:
	.short	0x27da
	.short	0x27da
	.word	gOamData_AffineDouble_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSoftBoiledEggAffineAnimTable
	.word	AnimSoftBoiledEgg
	.align	2, 0
	.type	 sThinRingExpandingAffineAnimCmds1,object
sThinRingExpandingAffineAnimCmds1:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 sThinRingExpandingAffineAnimCmds1,24
	.align	2, 0
	.type	 sThinRingExpandingAffineAnimCmds2,object
sThinRingExpandingAffineAnimCmds2:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 sThinRingExpandingAffineAnimCmds2,24
	.align	2, 0
	.type	 sHyperVoiceRingAffineAnimCmds,object
sHyperVoiceRingAffineAnimCmds:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xb
	.short	0xb
	.byte	0x0
	.byte	0x2d
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 sHyperVoiceRingAffineAnimCmds,24
	.align	2, 0
	.type	 sThinRingExpandingAffineAnimTable,object
sThinRingExpandingAffineAnimTable:
	.word	sThinRingExpandingAffineAnimCmds1
	.word	sThinRingExpandingAffineAnimCmds2
	.size	 sThinRingExpandingAffineAnimTable,8
	.align	2, 0
	.type	 sHyperVoiceRingAffineAnimTable,object
sHyperVoiceRingAffineAnimTable:
	.word	sHyperVoiceRingAffineAnimCmds
	.size	 sHyperVoiceRingAffineAnimTable,4
	.globl	gThinRingExpandingSpriteTemplate
	.align	2, 0
	.type	 gThinRingExpandingSpriteTemplate,object
	.size	 gThinRingExpandingSpriteTemplate,24
gThinRingExpandingSpriteTemplate:
	.short	0x27db
	.short	0x27db
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sThinRingExpandingAffineAnimTable
	.word	AnimSpriteOnMonPos
	.align	2, 0
	.type	 sThinRingShrinkingAffineAnimCmds,object
sThinRingShrinkingAffineAnimCmds:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x10
	.short	-0x10
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 sThinRingShrinkingAffineAnimCmds,24
	.align	2, 0
	.type	 sThinRingShrinkingAffineAnimTable,object
sThinRingShrinkingAffineAnimTable:
	.word	sThinRingShrinkingAffineAnimCmds
	.size	 sThinRingShrinkingAffineAnimTable,4
	.globl	gThinRingShrinkingSpriteTemplate
	.align	2, 0
	.type	 gThinRingShrinkingSpriteTemplate,object
	.size	 gThinRingShrinkingSpriteTemplate,24
gThinRingShrinkingSpriteTemplate:
	.short	0x27db
	.short	0x27db
	.word	gOamData_AffineDouble_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sThinRingShrinkingAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	gBlendThinRingExpandingSpriteTemplate
	.align	2, 0
	.type	 gBlendThinRingExpandingSpriteTemplate,object
	.size	 gBlendThinRingExpandingSpriteTemplate,24
gBlendThinRingExpandingSpriteTemplate:
	.short	0x27db
	.short	0x27db
	.word	gOamData_AffineDouble_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sThinRingExpandingAffineAnimTable
	.word	AnimBlendThinRing
	.globl	gHyperVoiceRingSpriteTemplate
	.align	2, 0
	.type	 gHyperVoiceRingSpriteTemplate,object
	.size	 gHyperVoiceRingSpriteTemplate,24
gHyperVoiceRingSpriteTemplate:
	.short	0x27db
	.short	0x27db
	.word	gOamData_AffineDouble_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sHyperVoiceRingAffineAnimTable
	.word	AnimHyperVoiceRing
	.globl	gUproarRingSpriteTemplate
	.align	2, 0
	.type	 gUproarRingSpriteTemplate,object
	.size	 gUproarRingSpriteTemplate,24
gUproarRingSpriteTemplate:
	.short	0x27db
	.short	0x27db
	.word	gOamData_AffineDouble_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sThinRingExpandingAffineAnimTable
	.word	AnimUproarRing
	.align	2, 0
	.type	 sStretchAttackerAffineAnimCmds,object
sStretchAttackerAffineAnimCmds:
	.short	0x60
	.short	-0xd
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sStretchAttackerAffineAnimCmds,16
	.align	2, 0
	.type	 sSpeedDustAnimCmds,object
sSpeedDustAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x4
	.byte	0x3
	.space	1
	.short	0x8
	.byte	0x3
	.space	1
	.short	0x4
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpeedDustAnimCmds,24
	.align	2, 0
	.type	 sSpeedDustAnimTable,object
sSpeedDustAnimTable:
	.word	sSpeedDustAnimCmds
	.size	 sSpeedDustAnimTable,4
	.globl	gSpeedDustSpriteTemplate
	.align	2, 0
	.type	 gSpeedDustSpriteTemplate,object
	.size	 gSpeedDustSpriteTemplate,24
gSpeedDustSpriteTemplate:
	.short	0x27df
	.short	0x27df
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sSpeedDustAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpeedDust
	.type	 sSpeedDustPosTable,object
sSpeedDustPosTable:
	.byte	0x1e
	.byte	0x1c
	.byte	-0x14
	.byte	0x18
	.byte	0x10
	.byte	0x1a
	.byte	-0xa
	.byte	0x1c
	.size	 sSpeedDustPosTable,8
	.align	2, 0
	.type	 sBellAnimCmds,object
sBellAnimCmds:
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0xf
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x46
	.space	1
	.short	0x20
	.byte	0x4f
	.space	1
	.short	0x10
	.byte	0x46
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0xf
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 sBellAnimCmds,56
	.align	2, 0
	.type	 sBellAnimTable,object
sBellAnimTable:
	.word	sBellAnimCmds
	.size	 sBellAnimTable,4
	.globl	gBellSpriteTemplate
	.align	2, 0
	.type	 gBellSpriteTemplate,object
	.size	 gBellSpriteTemplate,24
gBellSpriteTemplate:
	.short	0x27dd
	.short	0x27dd
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sBellAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	gMusicNotePaletteTagsTable
	.align	1, 0
	.type	 gMusicNotePaletteTagsTable,object
	.size	 gMusicNotePaletteTagsTable,6
gMusicNotePaletteTagsTable:
	.short	0x27de
	.short	0x270f
	.short	0x270e
	.globl	gHealBellMusicNoteSpriteTemplate
	.align	2, 0
	.type	 gHealBellMusicNoteSpriteTemplate,object
	.size	 gHealBellMusicNoteSpriteTemplate,24
gHealBellMusicNoteSpriteTemplate:
	.short	0x27de
	.short	0x27de
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimHealBellMusicNote
	.globl	gMagentaHeartSpriteTemplate
	.align	2, 0
	.type	 gMagentaHeartSpriteTemplate,object
	.size	 gMagentaHeartSpriteTemplate,24
gMagentaHeartSpriteTemplate:
	.short	0x27e2
	.short	0x27e2
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMagentaHeart
	.align	2, 0
	.type	 sAffineAnims_StretchBattlerUp,object
sAffineAnims_StretchBattlerUp:
	.short	0xa
	.short	-0xd
	.byte	0x0
	.byte	0xa
	.space	2
	.short	-0xa
	.short	0xd
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnims_StretchBattlerUp,24
	.globl	gRedHeartProjectileSpriteTemplate
	.align	2, 0
	.type	 gRedHeartProjectileSpriteTemplate,object
	.size	 gRedHeartProjectileSpriteTemplate,24
gRedHeartProjectileSpriteTemplate:
	.short	0x27e8
	.short	0x27e8
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRedHeartProjectile
	.globl	gRedHeartBurstSpriteTemplate
	.align	2, 0
	.type	 gRedHeartBurstSpriteTemplate,object
	.size	 gRedHeartBurstSpriteTemplate,24
gRedHeartBurstSpriteTemplate:
	.short	0x27e8
	.short	0x27e8
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimParticleBurst
	.globl	gRedHeartRisingSpriteTemplate
	.align	2, 0
	.type	 gRedHeartRisingSpriteTemplate,object
	.size	 gRedHeartRisingSpriteTemplate,24
gRedHeartRisingSpriteTemplate:
	.short	0x27e8
	.short	0x27e8
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRedHeartRising
	.align	2, 0
	.type	 sHiddenPowerOrbAffineAnimCmds,object
sHiddenPowerOrbAffineAnimCmds:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sHiddenPowerOrbAffineAnimCmds,24
	.align	2, 0
	.type	 sHiddenPowerOrbAffineAnimTable,object
sHiddenPowerOrbAffineAnimTable:
	.word	sHiddenPowerOrbAffineAnimCmds
	.size	 sHiddenPowerOrbAffineAnimTable,4
	.globl	gHiddenPowerOrbSpriteTemplate
	.align	2, 0
	.type	 gHiddenPowerOrbSpriteTemplate,object
	.size	 gHiddenPowerOrbSpriteTemplate,24
gHiddenPowerOrbSpriteTemplate:
	.short	0x27e9
	.short	0x27e9
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sHiddenPowerOrbAffineAnimTable
	.word	AnimOrbitFast
	.globl	gHiddenPowerOrbScatterSpriteTemplate
	.align	2, 0
	.type	 gHiddenPowerOrbScatterSpriteTemplate,object
	.size	 gHiddenPowerOrbScatterSpriteTemplate,24
gHiddenPowerOrbScatterSpriteTemplate:
	.short	0x27e9
	.short	0x27e9
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sHiddenPowerOrbAffineAnimTable
	.word	AnimOrbitScatter
	.align	2, 0
	.type	 sSpitUpOrbAffineAnimCmds,object
sSpitUpOrbAffineAnimCmds:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sSpitUpOrbAffineAnimCmds,24
	.align	2, 0
	.type	 sSpitUpOrbAffineAnimTable,object
sSpitUpOrbAffineAnimTable:
	.word	sSpitUpOrbAffineAnimCmds
	.size	 sSpitUpOrbAffineAnimTable,4
	.globl	gSpitUpOrbSpriteTemplate
	.align	2, 0
	.type	 gSpitUpOrbSpriteTemplate,object
	.size	 gSpitUpOrbSpriteTemplate,24
gSpitUpOrbSpriteTemplate:
	.short	0x27fd
	.short	0x27fd
	.word	gOamData_AffineDouble_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSpitUpOrbAffineAnimTable
	.word	AnimSpitUpOrb
	.align	2, 0
	.type	 sEyeSparkleAnimCmds,object
sEyeSparkleAnimCmds:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x4
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0x4
	.space	1
	.short	0x4
	.byte	0x4
	.space	1
	.short	0x0
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sEyeSparkleAnimCmds,24
	.align	2, 0
	.type	 sEyeSparkleAnimTable,object
sEyeSparkleAnimTable:
	.word	sEyeSparkleAnimCmds
	.size	 sEyeSparkleAnimTable,4
	.globl	gEyeSparkleSpriteTemplate
	.align	2, 0
	.type	 gEyeSparkleSpriteTemplate,object
	.size	 gEyeSparkleSpriteTemplate,24
gEyeSparkleSpriteTemplate:
	.short	0x27ea
	.short	0x27ea
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sEyeSparkleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimEyeSparkle
	.align	2, 0
	.type	 sAngelSpriteAnimCmds,object
sAngelSpriteAnimCmds:
	.short	0x0
	.byte	0x18
	.space	1
	.short	-0x1
	.space	2
	.size	 sAngelSpriteAnimCmds,8
	.align	2, 0
	.type	 sAngelSpriteAnimTable,object
sAngelSpriteAnimTable:
	.word	sAngelSpriteAnimCmds
	.size	 sAngelSpriteAnimTable,4
	.globl	gAngelSpriteTemplate
	.align	2, 0
	.type	 gAngelSpriteTemplate,object
	.size	 gAngelSpriteTemplate,24
gAngelSpriteTemplate:
	.short	0x27ec
	.short	0x27ec
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAngelSpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimAngel
	.globl	gPinkHeartSpriteTemplate
	.align	2, 0
	.type	 gPinkHeartSpriteTemplate,object
	.size	 gPinkHeartSpriteTemplate,24
gPinkHeartSpriteTemplate:
	.short	0x27eb
	.short	0x27eb
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPinkHeart
	.align	2, 0
	.type	 sDevilAnimCmds1,object
sDevilAnimCmds1:
	.short	0x0
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sDevilAnimCmds1,8
	.align	2, 0
	.type	 sDevilAnimCmds2,object
sDevilAnimCmds2:
	.short	0x10
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sDevilAnimCmds2,8
	.align	2, 0
	.type	 sDevilAnimTable,object
sDevilAnimTable:
	.word	sDevilAnimCmds1
	.word	sDevilAnimCmds2
	.size	 sDevilAnimTable,8
	.globl	gDevilSpriteTemplate
	.align	2, 0
	.type	 gDevilSpriteTemplate,object
	.size	 gDevilSpriteTemplate,24
gDevilSpriteTemplate:
	.short	0x27ed
	.short	0x27ed
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sDevilAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDevil
	.align	2, 0
	.type	 sAnim_FurySwipes,object
sAnim_FurySwipes:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_FurySwipes,20
	.align	2, 0
	.type	 sAnim_FurySwipes_Flipped,object
sAnim_FurySwipes_Flipped:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	0x30
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_FurySwipes_Flipped,20
	.align	2, 0
	.type	 sAnims_FurySwipes,object
sAnims_FurySwipes:
	.word	sAnim_FurySwipes
	.word	sAnim_FurySwipes_Flipped
	.size	 sAnims_FurySwipes,8
	.globl	gFurySwipesSpriteTemplate
	.align	2, 0
	.type	 gFurySwipesSpriteTemplate,object
	.size	 gFurySwipesSpriteTemplate,24
gFurySwipesSpriteTemplate:
	.short	0x27ee
	.short	0x27ee
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_FurySwipes
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFurySwipes
	.align	2, 0
	.type	 sMovementWavesAnimCmds1,object
sMovementWavesAnimCmds1:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x10
	.byte	0x8
	.space	1
	.short	0x20
	.byte	0x8
	.space	1
	.short	0x10
	.byte	0x8
	.space	1
	.short	-0x1
	.space	2
	.size	 sMovementWavesAnimCmds1,20
	.align	2, 0
	.type	 sMovementWavesAnimCmds2,object
sMovementWavesAnimCmds2:
	.short	0x10
	.byte	0x48
	.space	1
	.short	0x20
	.byte	0x48
	.space	1
	.short	0x10
	.byte	0x48
	.space	1
	.short	0x0
	.byte	0x48
	.space	1
	.short	-0x1
	.space	2
	.size	 sMovementWavesAnimCmds2,20
	.align	2, 0
	.type	 sMovementWavesAnimTable,object
sMovementWavesAnimTable:
	.word	sMovementWavesAnimCmds1
	.word	sMovementWavesAnimCmds2
	.size	 sMovementWavesAnimTable,8
	.globl	gMovementWavesSpriteTemplate
	.align	2, 0
	.type	 gMovementWavesSpriteTemplate,object
	.size	 gMovementWavesSpriteTemplate,24
gMovementWavesSpriteTemplate:
	.short	0x27e7
	.short	0x27e7
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sMovementWavesAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovementWaves
	.align	2, 0
	.type	 sUproarAffineAnimCmds,object
sUproarAffineAnimCmds:
	.short	-0xc
	.short	0x8
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x14
	.short	-0x14
	.byte	0x0
	.byte	0x4
	.space	2
	.short	-0x8
	.short	0xc
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x7fff
	.space	6
	.size	 sUproarAffineAnimCmds,32
	.globl	gJaggedMusicNoteSpriteTemplate
	.align	2, 0
	.type	 gJaggedMusicNoteSpriteTemplate,object
	.size	 gJaggedMusicNoteSpriteTemplate,24
gJaggedMusicNoteSpriteTemplate:
	.short	0x27f1
	.short	0x27f1
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimJaggedMusicNote
	.align	2, 0
	.type	 sPerishSongMusicNoteAffineAnimCmds1,object
sPerishSongMusicNoteAffineAnimCmds1:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7fff
	.space	6
	.size	 sPerishSongMusicNoteAffineAnimCmds1,16
	.align	2, 0
	.type	 sPerishSongMusicNoteAffineAnimCmds2,object
sPerishSongMusicNoteAffineAnimCmds2:
	.short	0x0
	.short	0x0
	.byte	0xf8
	.byte	0x10
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 sPerishSongMusicNoteAffineAnimCmds2,16
	.align	2, 0
	.type	 sPerishSongMusicNoteAffineAnimCmds3,object
sPerishSongMusicNoteAffineAnimCmds3:
	.short	0x0
	.short	0x0
	.byte	0x8
	.byte	0x10
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 sPerishSongMusicNoteAffineAnimCmds3,16
	.align	2, 0
	.type	 sPerishSongMusicNoteAffineAnimTable,object
sPerishSongMusicNoteAffineAnimTable:
	.word	sPerishSongMusicNoteAffineAnimCmds1
	.word	sPerishSongMusicNoteAffineAnimCmds2
	.word	sPerishSongMusicNoteAffineAnimCmds3
	.size	 sPerishSongMusicNoteAffineAnimTable,12
	.globl	gPerishSongMusicNoteSpriteTemplate
	.align	2, 0
	.type	 gPerishSongMusicNoteSpriteTemplate,object
	.size	 gPerishSongMusicNoteSpriteTemplate,24
gPerishSongMusicNoteSpriteTemplate:
	.short	0x27de
	.short	0x27de
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gMusicNotesAnimTable
	.word	0x0
	.word	sPerishSongMusicNoteAffineAnimTable
	.word	AnimPerishSongMusicNote
	.globl	gPerishSongMusicNote2SpriteTemplate
	.align	2, 0
	.type	 gPerishSongMusicNote2SpriteTemplate,object
	.size	 gPerishSongMusicNote2SpriteTemplate,24
gPerishSongMusicNote2SpriteTemplate:
	.short	0x27de
	.short	0x27de
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gMusicNotesAnimTable
	.word	0x0
	.word	sPerishSongMusicNoteAffineAnimTable
	.word	AnimPerishSongMusicNote2
	.align	2, 0
	.type	 sGuardRingAffineAnimCmds1,object
sGuardRingAffineAnimCmds1:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sGuardRingAffineAnimCmds1,16
	.align	2, 0
	.type	 sGuardRingAffineAnimCmds2,object
sGuardRingAffineAnimCmds2:
	.short	0x200
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sGuardRingAffineAnimCmds2,16
	.align	2, 0
	.type	 sGuardRingAffineAnimTable,object
sGuardRingAffineAnimTable:
	.word	sGuardRingAffineAnimCmds1
	.word	sGuardRingAffineAnimCmds2
	.size	 sGuardRingAffineAnimTable,8
	.globl	gGuardRingSpriteTemplate
	.align	2, 0
	.type	 gGuardRingSpriteTemplate,object
	.size	 gGuardRingSpriteTemplate,24
gGuardRingSpriteTemplate:
	.short	0x2804
	.short	0x2804
	.word	gOamData_AffineDouble_ObjBlend_64x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sGuardRingAffineAnimTable
	.word	AnimGuardRing
.text
	.align	2, 0
	.type	 AnimCirclingFinger,function
	.thumb_func
AnimCirclingFinger:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r5, .L5
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x36]
	ldr	r1, .L5+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L5+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteInEllipse
.Lfe1:
	.size	 AnimCirclingFinger,.Lfe1-AnimCirclingFinger
	.align	2, 0
	.type	 AnimBouncingMusicNote,function
	.thumb_func
AnimBouncingMusicNote:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L11
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L8	@cond_branch
	ldr	r0, .L11+0x4
	b	.L10
.L12:
	.align	2, 0
.L11:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L8:
	ldr	r0, .L13
.L10:
	ldrb	r0, [r0]
	add	r1, r4, #0
	bl	SetSpriteNextToMonHead
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	strh	r0, [r4, #0x30]
	ldr	r0, .L13+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gBattleAnimTarget
	.word	AnimBouncingMusicNote_Step
.Lfe2:
	.size	 AnimBouncingMusicNote,.Lfe2-AnimBouncingMusicNote
	.align	2, 0
	.type	 AnimBouncingMusicNote_Step,function
	.thumb_func
AnimBouncingMusicNote_Step:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	beq	.L19	@cond_branch
	cmp	r0, #0x1
	bgt	.L25	@cond_branch
	cmp	r0, #0
	beq	.L17	@cond_branch
	b	.L16
.L25:
	cmp	r0, #0x2
	beq	.L21	@cond_branch
	b	.L16
.L17:
	ldrh	r0, [r1, #0x26]
	sub	r0, r0, #0x3
	strh	r0, [r1, #0x26]
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L16	@cond_branch
	b	.L26
.L19:
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x3
	strh	r0, [r1, #0x26]
	ldrh	r0, [r1, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L16	@cond_branch
.L26:
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	b	.L16
.L21:
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L16	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L16:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 AnimBouncingMusicNote_Step,.Lfe3-AnimBouncingMusicNote_Step
	.align	2, 0
	.type	 AnimVibrateBattlerBack_Step,function
	.thumb_func
AnimVibrateBattlerBack_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r3, .L29
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x30]
	mov	r0, #0x2e
	ldrsh	r2, [r4, r0]
	cmp	r2, #0
	bne	.L28	@cond_branch
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r2, [r0, #0x24]
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L28:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	gSprites
.Lfe4:
	.size	 AnimVibrateBattlerBack_Step,.Lfe4-AnimVibrateBattlerBack_Step
	.align	2, 0
	.type	 AnimVibrateBattlerBack,function
	.thumb_func
AnimVibrateBattlerBack:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r4, .L34
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L34+0x4
	ldr	r0, .L34+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r6, [r0]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L32	@cond_branch
	ldr	r0, .L34+0xc
	ldrh	r1, [r5, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r5, #0x20]
	add	r1, r0, #0
	b	.L33
.L35:
	.align	2, 0
.L34:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L32:
	ldr	r1, .L36
	ldrh	r0, [r1]
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	strh	r0, [r5, #0x20]
.L33:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	strh	r6, [r5, #0x32]
	ldr	r0, .L36+0x4
	str	r0, [r5, #0x1c]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	gBattleAnimArgs
	.word	AnimVibrateBattlerBack_Step
.Lfe5:
	.size	 AnimVibrateBattlerBack,.Lfe5-AnimVibrateBattlerBack
	.align	2, 0
	.type	 AnimMovingClamp,function
	.thumb_func
AnimMovingClamp:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r1, .L39
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x38]
	ldr	r0, .L39+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L39+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	AnimMovingClamp_Step
.Lfe6:
	.size	 AnimMovingClamp,.Lfe6-AnimMovingClamp
	.align	2, 0
	.type	 AnimMovingClamp_Step,function
	.thumb_func
AnimMovingClamp_Step:
	push	{lr}
	ldrh	r1, [r0, #0x30]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x20]
	strh	r1, [r0, #0x32]
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0xf
	strh	r1, [r0, #0x36]
	ldr	r1, .L42
	str	r1, [r0, #0x1c]
	ldr	r1, .L42+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	StartAnimLinearTranslation
	.word	AnimMovingClamp_End
.Lfe7:
	.size	 AnimMovingClamp_Step,.Lfe7-AnimMovingClamp_Step
	.align	2, 0
	.type	 AnimMovingClamp_End,function
	.thumb_func
AnimMovingClamp_End:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x38]
	mov	r3, #0x38
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L45	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
	b	.L46
.L45:
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x38]
.L46:
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 AnimMovingClamp_End,.Lfe8-AnimMovingClamp_End
	.align	2, 0
	.globl	AnimTask_Withdraw
	.type	 AnimTask_Withdraw,function
	.thumb_func
AnimTask_Withdraw:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L48
	ldr	r0, .L48+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r1, .L48+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L48+0xc
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	AnimTask_Withdraw_Step
.Lfe9:
	.size	 AnimTask_Withdraw,.Lfe9-AnimTask_Withdraw
	.align	2, 0
	.type	 AnimTask_Withdraw_Step,function
	.thumb_func
AnimTask_Withdraw_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L64
	ldr	r0, .L64+0x4
	ldrb	r0, [r0]
	add	r1, r0, r1
	ldrb	r4, [r1]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldr	r1, .L64+0x8
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r6, r2, #0
	b	.L52
.L65:
	.align	2, 0
.L64:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gTasks
.L51:
	ldr	r2, .L66
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r3, [r0, #0x8]
	add	r6, r1, #0
.L52:
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldr	r1, .L66
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L53	@cond_branch
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0xb0
	strh	r0, [r1, #0x8]
	ldr	r1, .L66+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	add	r1, r1, #0x1
	b	.L62
.L67:
	.align	2, 0
.L66:
	.word	gTasks
	.word	gSprites
.L53:
	cmp	r0, #0x1
	bne	.L55	@cond_branch
	ldrh	r0, [r1, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	bne	.L50	@cond_branch
	mov	r0, #0x2
	b	.L63
.L55:
	ldrh	r0, [r1, #0x8]
	sub	r0, r0, #0xb0
	strh	r0, [r1, #0x8]
	ldr	r1, .L68
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x1
.L62:
	strh	r1, [r0, #0x26]
	add	r0, r4, #0
	bl	SetBattlerSpriteYOffsetFromRotation
	ldr	r0, .L68+0x4
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0x8
	ldrsh	r2, [r1, r3]
	mov	r0, #0xf2
	lsl	r0, r0, #0x4
	cmp	r2, r0
	beq	.L59	@cond_branch
	cmp	r2, #0
	bne	.L50	@cond_branch
.L59:
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x2
	bne	.L60	@cond_branch
	add	r0, r4, #0
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L50
.L69:
	.align	2, 0
.L68:
	.word	gSprites
	.word	gTasks
.L60:
	add	r0, r2, #0x1
.L63:
	strh	r0, [r1, #0xa]
.L50:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 AnimTask_Withdraw_Step,.Lfe10-AnimTask_Withdraw_Step
	.align	2, 0
	.type	 AnimKinesisZapEnergy,function
	.thumb_func
AnimKinesisZapEnergy:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L77
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L71	@cond_branch
	ldr	r0, .L77+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r4, #0x20]
	add	r5, r0, #0
	b	.L72
.L78:
	.align	2, 0
.L77:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L71:
	ldr	r1, .L79
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	add	r5, r1, #0
.L72:
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L79+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L73	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3f
	ldrb	r0, [r3]
	mov	r1, #0x1
	add	r2, r0, #0
	orr	r2, r2, r1
	strb	r2, [r3]
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L75	@cond_branch
	mov	r0, #0x2
	orr	r2, r2, r0
	strb	r2, [r3]
	b	.L75
.L80:
	.align	2, 0
.L79:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L73:
	mov	r2, #0x4
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L75	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
.L75:
	ldr	r0, .L81
	str	r0, [r4, #0x1c]
	ldr	r1, .L81+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe11:
	.size	 AnimKinesisZapEnergy,.Lfe11-AnimKinesisZapEnergy
	.align	2, 0
	.type	 AnimSwordsDanceBlade,function
	.thumb_func
AnimSwordsDanceBlade:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L84
	str	r0, [r4, #0x1c]
	ldr	r1, .L84+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L85:
	.align	2, 0
.L84:
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	AnimSwordsDanceBlade_Step
.Lfe12:
	.size	 AnimSwordsDanceBlade,.Lfe12-AnimSwordsDanceBlade
	.align	2, 0
	.type	 AnimSwordsDanceBlade_Step,function
	.thumb_func
AnimSwordsDanceBlade_Step:
	push	{lr}
	mov	r1, #0x6
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x20]
	strh	r1, [r0, #0x32]
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x36]
	ldr	r1, .L87
	str	r1, [r0, #0x1c]
	ldr	r1, .L87+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe13:
	.size	 AnimSwordsDanceBlade_Step,.Lfe13-AnimSwordsDanceBlade_Step
	.align	2, 0
	.type	 AnimSonicBoomProjectile,function
	.thumb_func
AnimSonicBoomProjectile:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L90	@cond_branch
	ldr	r1, .L94
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	b	.L91
.L95:
	.align	2, 0
.L94:
	.word	gBattleAnimArgs
.L90:
	ldr	r0, .L96
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L91	@cond_branch
	ldr	r1, .L96+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r1, #0x6]
.L91:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r4, .L96+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r6, .L96+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r6, #0x6]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r7, r0, #0
	ldrh	r1, [r5, #0x20]
	mov	r2, r8
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x22]
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x10
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	mov	r1, #0xf0
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L93	@cond_branch
	ldr	r2, .L96+0xc
	add	r0, r4, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L93:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r4, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r0, r8
	strh	r0, [r5, #0x32]
	strh	r7, [r5, #0x36]
	ldr	r0, .L96+0x10
	str	r0, [r5, #0x1c]
	ldr	r1, .L96+0x14
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	-0x6000
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe14:
	.size	 AnimSonicBoomProjectile,.Lfe14-AnimSonicBoomProjectile
	.align	2, 0
	.type	 AnimAirWaveProjectile_Step2,function
	.thumb_func
AnimAirWaveProjectile_Step2:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r3, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L99	@cond_branch
	ldr	r2, .L100
	mov	r0, #0x3c
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0xa]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xa]
	add	r0, r3, #0
	bl	DestroySprite
.L99:
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gTasks
.Lfe15:
	.size	 AnimAirWaveProjectile_Step2,.Lfe15-AnimAirWaveProjectile_Step2
	.align	2, 0
	.type	 AnimAirWaveProjectile_Step1,function
	.thumb_func
AnimAirWaveProjectile_Step1:
	push	{r4, lr}
	add	r2, r0, #0
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L113
	add	r4, r0, r1
	mov	r3, #0x2e
	ldrsh	r1, [r2, r3]
	mov	r3, #0x12
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	ble	.L103	@cond_branch
	ldrh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x38]
	add	r0, r0, r1
	strh	r0, [r2, #0x38]
	ldrh	r0, [r2, #0x36]
	ldrh	r3, [r2, #0x3a]
	add	r0, r0, r3
	b	.L110
.L114:
	.align	2, 0
.L113:
	.word	gTasks
.L103:
	ldrh	r0, [r2, #0x38]
	ldrh	r1, [r2, #0x34]
	sub	r0, r0, r1
	strh	r0, [r2, #0x38]
	ldrh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x36]
	sub	r0, r0, r1
.L110:
	strh	r0, [r2, #0x3a]
	ldrh	r0, [r2, #0x38]
	ldrh	r1, [r2, #0x30]
	add	r3, r0, r1
	strh	r3, [r2, #0x30]
	ldrh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	ldrh	r1, [r4, #0x16]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L105	@cond_branch
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x18
	neg	r0, r0
	b	.L111
.L105:
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x18
.L111:
	strh	r0, [r2, #0x24]
	ldrh	r1, [r4, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L107	@cond_branch
	ldrh	r0, [r2, #0x32]
	lsr	r0, r0, #0x8
	neg	r0, r0
	b	.L112
.L107:
	ldrh	r0, [r2, #0x32]
	lsr	r0, r0, #0x8
.L112:
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r2, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L109	@cond_branch
	mov	r0, #0x1e
	strh	r0, [r2, #0x2e]
	ldr	r0, .L115
	str	r0, [r2, #0x1c]
.L109:
	pop	{r4}
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	AnimAirWaveProjectile_Step2
.Lfe16:
	.size	 AnimAirWaveProjectile_Step1,.Lfe16-AnimAirWaveProjectile_Step1
	.align	2, 0
	.type	 AnimAirWaveProjectile,function
	.thumb_func
AnimAirWaveProjectile:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	mov	r0, #0x3c
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L131
	add	r6, r0, r1
	ldrh	r2, [r6, #0x16]
	mov	r1, #0x2
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	ldrh	r3, [r7, #0x30]
	add	r2, r0, r3
	strh	r2, [r7, #0x30]
	ldrh	r0, [r6, #0x18]
	and	r1, r1, r0
	ldrh	r0, [r7, #0x32]
	add	r1, r1, r0
	strh	r1, [r7, #0x32]
	ldrh	r1, [r6, #0x16]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L118	@cond_branch
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x18
	neg	r0, r0
	b	.L127
.L132:
	.align	2, 0
.L131:
	.word	gTasks
.L118:
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x18
.L127:
	strh	r0, [r7, #0x24]
	ldrh	r1, [r6, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L120	@cond_branch
	ldrh	r0, [r7, #0x32]
	lsr	r0, r0, #0x8
	neg	r0, r0
	b	.L128
.L120:
	ldrh	r0, [r7, #0x32]
	lsr	r0, r0, #0x8
.L128:
	strh	r0, [r7, #0x26]
	ldrh	r0, [r7, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r7, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L122	@cond_branch
	mov	r4, #0x0
	mov	r0, #0x8
	strh	r0, [r7, #0x2e]
	mov	r0, #0x4
	strh	r0, [r6, #0x12]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	Q_8_8_inv
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r7, #0x24]
	ldrh	r1, [r7, #0x20]
	add	r2, r0, r1
	strh	r2, [r7, #0x20]
	ldrh	r0, [r7, #0x26]
	ldrh	r3, [r7, #0x22]
	add	r0, r0, r3
	strh	r0, [r7, #0x22]
	strh	r4, [r7, #0x26]
	strh	r4, [r7, #0x24]
	ldrh	r3, [r6, #0x1e]
	mov	r0, #0x1e
	ldrsh	r1, [r6, r0]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r1, r0
	blt	.L123	@cond_branch
	sub	r0, r3, r2
	b	.L129
.L123:
	sub	r0, r2, r3
.L129:
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x10
	ldrh	r3, [r6, #0x20]
	mov	r0, #0x20
	ldrsh	r1, [r6, r0]
	ldrh	r2, [r7, #0x22]
	mov	r6, #0x22
	ldrsh	r0, [r7, r6]
	cmp	r1, r0
	blt	.L125	@cond_branch
	sub	r0, r3, r2
	b	.L130
.L125:
	sub	r0, r2, r3
.L130:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r0, #0x0
	strh	r0, [r7, #0x32]
	strh	r0, [r7, #0x30]
	strh	r0, [r7, #0x3a]
	strh	r0, [r7, #0x38]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r1, r5, #0
	bl	Q_8_8_mul
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r6, #0xe0
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	bl	Q_8_8_inv
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Q_8_8_mul
	strh	r0, [r7, #0x34]
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	add	r1, r5, #0
	bl	Q_8_8_mul
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r0, r6, #0
	bl	Q_8_8_inv
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Q_8_8_mul
	strh	r0, [r7, #0x36]
	ldr	r0, .L133
	str	r0, [r7, #0x1c]
.L122:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L134:
	.align	2, 0
.L133:
	.word	AnimAirWaveProjectile_Step1
.Lfe17:
	.size	 AnimAirWaveProjectile,.Lfe17-AnimAirWaveProjectile
	.align	2, 0
	.type	 AirCutterProjectile_Step2,function
	.thumb_func
AirCutterProjectile_Step2:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L137
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L136	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L136:
	pop	{r0}
	bx	r0
.L138:
	.align	2, 0
.L137:
	.word	gTasks
.Lfe18:
	.size	 AirCutterProjectile_Step2,.Lfe18-AirCutterProjectile_Step2
	.align	2, 0
	.type	 AirCutterProjectile_Step1,function
	.thumb_func
AirCutterProjectile_Step1:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L147
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	sub	r1, r0, #0x1
	strh	r1, [r5, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L140	@cond_branch
	ldr	r0, .L147+0x4
	mov	r2, #0x1a
	ldrsh	r1, [r5, r2]
	mov	r3, #0x1c
	ldrsh	r2, [r5, r3]
	ldrb	r3, [r5, #0xc]
	ldrb	r4, [r5, #0xa]
	sub	r3, r3, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	lsl	r0, r0, #0x4
	add	r0, r0, ip
	lsl	r0, r0, #0x2
	ldr	r1, .L147+0x8
	add	r6, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L142	@cond_branch
	cmp	r0, #0x2
	beq	.L143	@cond_branch
	b	.L141
.L148:
	.align	2, 0
.L147:
	.word	gTasks
	.word	gAirWaveProjectileSpriteTemplate
	.word	gSprites
.L142:
	ldrb	r2, [r6, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x18
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x57
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r6, #0x3]
	b	.L141
.L143:
	ldrb	r0, [r6, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r6, #0x3]
.L141:
	ldr	r3, .L149
	lsl	r2, r7, #0x2
	add	r2, r2, r7
	lsl	r2, r2, #0x3
	add	r4, r2, r3
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x14]
	sub	r0, r0, r1
	strh	r0, [r6, #0x2e]
	strh	r7, [r6, #0x3c]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	add	r0, r0, #0xd
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	add	r3, r3, #0x8
	add	r0, r0, r3
	mov	r2, ip
	strh	r2, [r0]
	ldrh	r0, [r4, #0xe]
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r0, #0x3f
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x93
	bl	PlaySE12WithPanning
	mov	r3, #0xa
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x2
	ble	.L140	@cond_branch
	ldr	r0, .L149+0x4
	str	r0, [r4]
.L140:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	gTasks
	.word	AirCutterProjectile_Step2
.Lfe19:
	.size	 AirCutterProjectile_Step1,.Lfe19-AirCutterProjectile_Step1
	.align	2, 0
	.globl	AnimTask_AirCutterProjectile
	.type	 AnimTask_AirCutterProjectile,function
	.thumb_func
AnimTask_AirCutterProjectile:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x0
	mov	r9, r0
	mov	r5, #0x0
	mov	r0, sp
	mov	r1, r9
	strh	r1, [r0]
	mov	r4, sp
	add	r4, r4, #0x2
	strh	r1, [r4]
	bl	IsContest
	lsl	r0, r0, #0x18
	mov	sl, r4
	cmp	r0, #0
	beq	.L152	@cond_branch
	ldr	r1, .L175
	lsl	r2, r7, #0x2
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x2
	strh	r1, [r0, #0x10]
	ldr	r3, .L175+0x4
	ldrh	r0, [r3]
	neg	r0, r0
	strh	r0, [r3]
	ldrh	r1, [r3, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	mov	r8, r2
	cmp	r0, #0
	beq	.L153	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strh	r0, [r3, #0x4]
	b	.L155
.L176:
	.align	2, 0
.L175:
	.word	gTasks
	.word	gBattleAnimArgs
.L153:
	mov	r0, #0x1
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	b	.L155
.L152:
	ldr	r1, .L177
	ldr	r0, .L177+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	lsl	r2, r7, #0x2
	mov	r8, r2
	cmp	r0, #0
	bne	.L155	@cond_branch
	ldr	r1, .L177+0x8
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r3, [r0, #0x10]
	ldr	r2, .L177+0xc
	ldrh	r0, [r2]
	neg	r0, r0
	strh	r0, [r2]
	ldrh	r0, [r2, #0x2]
	neg	r0, r0
	strh	r0, [r2, #0x2]
	ldrh	r1, [r2, #0x4]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L157	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	b	.L172
.L178:
	.align	2, 0
.L177:
	.word	gBattlerPositions
	.word	gBattleAnimTarget
	.word	gTasks
	.word	gBattleAnimArgs
.L157:
	mov	r0, #0x1
	orr	r0, r0, r1
.L172:
	strh	r0, [r2, #0x4]
.L155:
	ldr	r5, .L179
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	ldr	r1, .L179+0x4
	mov	r3, r8
	add	r4, r3, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1a]
	add	r6, r0, #0
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1c]
	mov	r9, r0
	ldr	r0, .L179+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L159	@cond_branch
	ldr	r4, .L179+0xc
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L159	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, sp
	mov	r3, sl
	bl	SetAverageBattlerPositions
	b	.L160
.L180:
	.align	2, 0
.L179:
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	gBattleTypeFlags
	.word	gBattleAnimTarget
.L159:
	mov	r5, sp
	ldr	r4, .L181
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sl
	strh	r0, [r1]
.L160:
	mov	r4, sp
	ldr	r0, .L181+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, sp
	ldr	r3, .L181+0x8
	ldrh	r0, [r3]
	ldrh	r2, [r2]
	add	r0, r0, r2
	strh	r0, [r1, #0x1e]
	strh	r0, [r4]
	ldrh	r0, [r3, #0x2]
	mov	r3, sl
	ldrh	r3, [r3]
	add	r0, r0, r3
	strh	r0, [r1, #0x20]
	mov	r1, sl
	strh	r0, [r1]
	mov	r0, sp
	ldrh	r2, [r0]
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	add	r1, r6, #0
	cmp	r0, r1
	blt	.L161	@cond_branch
	sub	r0, r2, r1
	b	.L173
.L182:
	.align	2, 0
.L181:
	.word	gBattleAnimTarget
	.word	gTasks
	.word	gBattleAnimArgs
.L161:
	sub	r0, r1, r2
.L173:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r0, #0x10
	asr	r4, r4, #0x10
	ldr	r5, .L183
	ldrh	r1, [r5, #0x4]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	Q_8_8_inv
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Q_8_8_mul
	ldr	r2, .L183+0x4
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r6, r1, r2
	strh	r0, [r6, #0x12]
	mov	r1, #0x12
	ldrsh	r0, [r6, r1]
	mov	r1, #0x80
	bl	Q_8_8_mul
	strh	r0, [r6, #0x14]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r6, #0x16]
	mov	r2, sl
	ldrh	r1, [r2]
	mov	r3, #0x0
	ldrsh	r0, [r2, r3]
	mov	r4, r9
	cmp	r0, r4
	blt	.L163	@cond_branch
	sub	r4, r1, r4
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r1, #0x12
	ldrsh	r0, [r6, r1]
	bl	Q_8_8_inv
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Q_8_8_mul
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r0
	strh	r1, [r6, #0x18]
	b	.L164
.L184:
	.align	2, 0
.L183:
	.word	gBattleAnimArgs
	.word	gTasks
.L163:
	sub	r4, r4, r1
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r2, #0x12
	ldrsh	r0, [r6, r2]
	bl	Q_8_8_inv
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Q_8_8_mul
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r6, #0x18]
.L164:
	ldr	r1, .L185
	mov	r3, r8
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r4, .L185+0x4
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0xe]
	ldrh	r1, [r4, #0x8]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L165	@cond_branch
	mov	r0, #0x80
	eor	r0, r0, r1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3f
	ble	.L169	@cond_branch
	ldr	r0, .L185+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L185+0xc
	add	r1, r2, #0
	ldrh	r4, [r4, #0x8]
	add	r1, r1, r4
	add	r0, r0, r1
	b	.L174
.L186:
	.align	2, 0
.L185:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	0xffc0
.L165:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3f
	ble	.L169	@cond_branch
	ldr	r0, .L187
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L187+0x4
	add	r1, r3, #0
	ldrh	r4, [r4, #0x8]
	add	r1, r1, r4
	add	r0, r0, r1
	b	.L174
.L188:
	.align	2, 0
.L187:
	.word	gBattleAnimTarget
	.word	0xffc0
.L169:
	ldr	r0, .L189
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x8]
	sub	r0, r0, r1
.L174:
	strh	r0, [r5, #0xc]
	ldr	r0, .L189+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x2
	bgt	.L171	@cond_branch
	mov	r0, #0x3
	strh	r0, [r1, #0xc]
.L171:
	ldr	r0, .L189+0x8
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L190:
	.align	2, 0
.L189:
	.word	gBattleAnimTarget
	.word	gTasks
	.word	AirCutterProjectile_Step1
.Lfe20:
	.size	 AnimTask_AirCutterProjectile,.Lfe20-AnimTask_AirCutterProjectile
	.align	2, 0
	.type	 AnimVoidLines,function
	.thumb_func
AnimVoidLines:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L192
	ldrh	r0, [r0, #0x2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldr	r0, .L192+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L193:
	.align	2, 0
.L192:
	.word	sVoidLinesSpriteTemplate
	.word	AnimVoidLines_Step
.Lfe21:
	.size	 AnimVoidLines,.Lfe21-AnimVoidLines
	.align	2, 0
	.type	 AnimVoidLines_Step,function
	.thumb_func
AnimVoidLines_Step:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L195	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r5, [r4, #0x2e]
	ldr	r1, .L202
	add	r0, r5, #0
	add	r0, r0, #0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r7, [r0]
	add	r6, r1, #0
	add	r1, r5, #0
	add	r1, r1, #0x9
	lsl	r0, r5, #0x1
	add	r0, r0, r6
	add	r2, r0, #0
	add	r2, r2, #0x10
	mov	r3, #0x7
	lsl	r1, r1, #0x1
	add	r1, r1, r6
.L199:
	ldrh	r0, [r1]
	strh	r0, [r2]
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L199	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0xf
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r7, [r0]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x18
	bne	.L195	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L195:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L203:
	.align	2, 0
.L202:
	.word	gPlttBufferFaded
.Lfe22:
	.size	 AnimVoidLines_Step,.Lfe22-AnimVoidLines_Step
	.align	2, 0
	.type	 AnimCoinThrow,function
	.thumb_func
AnimCoinThrow:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r4, .L206
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L206+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L206+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L205	@cond_branch
	ldrh	r0, [r4, #0x4]
	neg	r0, r0
	strh	r0, [r4, #0x4]
.L205:
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	ldrh	r1, [r5, #0x20]
	lsr	r6, r0, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x22]
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x10
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x2e]
	strh	r6, [r5, #0x32]
	strh	r7, [r5, #0x36]
	ldr	r0, .L206+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L206+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L207:
	.align	2, 0
.L206:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	InitAnimLinearTranslationWithSpeedAndPos
	.word	DestroyAnimSprite
.Lfe23:
	.size	 AnimCoinThrow,.Lfe23-AnimCoinThrow
	.align	2, 0
	.type	 AnimFallingCoin,function
	.thumb_func
AnimFallingCoin:
	ldr	r1, .L209
	strh	r1, [r0, #0x32]
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	ldr	r1, .L209+0x4
	str	r1, [r0, #0x1c]
	bx	lr
.L210:
	.align	2, 0
.L209:
	.word	0xfff0
	.word	AnimFallingCoin_Step
.Lfe24:
	.size	 AnimFallingCoin,.Lfe24-AnimFallingCoin
	.align	2, 0
	.type	 AnimFallingCoin_Step,function
	.thumb_func
AnimFallingCoin_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldr	r0, .L215
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L212	@cond_branch
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
.L212:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x5
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7e
	ble	.L213	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L213	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L213:
	pop	{r4}
	pop	{r0}
	bx	r0
.L216:
	.align	2, 0
.L215:
	.word	gBattleAnimAttacker
.Lfe25:
	.size	 AnimFallingCoin_Step,.Lfe25-AnimFallingCoin_Step
	.align	2, 0
	.type	 AnimBulletSeed,function
	.thumb_func
AnimBulletSeed:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x14
	strh	r0, [r4, #0x2e]
	ldr	r5, .L218
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L218+0x4
	str	r0, [r4, #0x1c]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L218+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L219:
	.align	2, 0
.L218:
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	AnimBulletSeed_Step1
.Lfe26:
	.size	 AnimBulletSeed,.Lfe26-AnimBulletSeed
	.align	2, 0
	.type	 AnimBulletSeed_Step1,function
	.thumb_func
AnimBulletSeed_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x9f
	bl	PlaySE12WithPanning
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x26]
	strh	r1, [r4, #0x24]
	mov	r2, #0x0
	mov	r1, #0x7
	add	r0, r4, #0
	add	r0, r0, #0x3c
.L224:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L224	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x7
	and	r0, r0, r1
	ldr	r2, .L226
	add	r1, r2, #0
	sub	r1, r1, r0
	strh	r1, [r4, #0x3a]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa0
	bl	__umodsi3
	add	r0, r0, #0xa0
	strh	r0, [r4, #0x3c]
	ldr	r0, .L226+0x4
	str	r0, [r4, #0x1c]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L227:
	.align	2, 0
.L226:
	.word	0xfff4
	.word	AnimBulletSeed_Step2
.Lfe27:
	.size	 AnimBulletSeed_Step1,.Lfe27-AnimBulletSeed_Step1
	.align	2, 0
	.type	 AnimBulletSeed_Step2,function
	.thumb_func
AnimBulletSeed_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x3c]
	ldrh	r2, [r4, #0x2e]
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x18
	strh	r2, [r4, #0x24]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L229	@cond_branch
	neg	r0, r2
	strh	r0, [r4, #0x24]
.L229:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r2, #0x3a
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7e
	ble	.L230	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L230	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L230:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 AnimBulletSeed_Step2,.Lfe28-AnimBulletSeed_Step2
	.align	2, 0
	.type	 AnimRazorWindTornado,function
	.thumb_func
AnimRazorWindTornado:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L234
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L233	@cond_branch
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x10
	strh	r0, [r4, #0x22]
.L233:
	ldr	r1, .L234+0x4
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0xc]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x36]
	ldr	r0, .L234+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L234+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L235:
	.align	2, 0
.L234:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	TranslateSpriteInCircle
	.word	DestroyAnimSprite
.Lfe29:
	.size	 AnimRazorWindTornado,.Lfe29-AnimRazorWindTornado
	.align	2, 0
	.type	 AnimViceGripPincer,function
	.thumb_func
AnimViceGripPincer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	mov	r7, #0x20
	ldr	r4, .L238
	mov	r0, #0x10
	mov	r8, r0
	ldr	r6, .L238+0x4
	ldr	r0, .L238+0x8
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L237	@cond_branch
	add	r7, r4, #0
	mov	r4, #0x20
	mov	r8, r6
	mov	r6, #0x10
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L237:
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	ldr	r4, .L238+0xc
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r8
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L238+0x10
	str	r0, [r5, #0x1c]
	ldr	r1, .L238+0x14
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L239:
	.align	2, 0
.L238:
	.word	0xffe0
	.word	0xfff0
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	AnimViceGripPincer_Step
.Lfe30:
	.size	 AnimViceGripPincer,.Lfe30-AnimViceGripPincer
	.align	2, 0
	.type	 AnimViceGripPincer_Step,function
	.thumb_func
AnimViceGripPincer_Step:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L241	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L241:
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 AnimViceGripPincer_Step,.Lfe31-AnimViceGripPincer_Step
	.align	2, 0
	.type	 AnimGuillotinePincer,function
	.thumb_func
AnimGuillotinePincer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r0, #0
	mov	r0, #0x20
	mov	r8, r0
	ldr	r4, .L244
	mov	r2, #0x10
	mov	r9, r2
	ldr	r6, .L244+0x4
	ldr	r7, .L244+0x8
	ldrh	r1, [r7]
	mov	r2, #0x0
	ldrsh	r0, [r7, r2]
	cmp	r0, #0
	beq	.L243	@cond_branch
	mov	r8, r4
	mov	r4, #0x20
	mov	r9, r6
	mov	r6, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	StartSpriteAnim
.L243:
	mov	r0, r8
	lsl	r1, r0, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r5, #0x20]
	add	r1, r1, r2
	strh	r1, [r5, #0x20]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	strh	r1, [r5, #0x30]
	ldr	r4, .L244+0xc
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r9
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r7]
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x3a]
	ldr	r0, .L244+0x10
	str	r0, [r5, #0x1c]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L245:
	.align	2, 0
.L244:
	.word	0xffe0
	.word	0xfff0
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimGuillotinePincer_Step1
.Lfe32:
	.size	 AnimGuillotinePincer,.Lfe32-AnimGuillotinePincer
	.align	2, 0
	.type	 AnimGuillotinePincer_Step1,function
	.thumb_func
AnimGuillotinePincer_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L247	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L247	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	SeekSpriteAnim
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x2
	strh	r0, [r4, #0x24]
	ldr	r0, .L248
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3a]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	eor	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x36]
	strh	r2, [r4, #0x34]
	ldr	r0, .L248+0x4
	str	r0, [r4, #0x1c]
.L247:
	pop	{r4}
	pop	{r0}
	bx	r0
.L249:
	.align	2, 0
.L248:
	.word	0xfffe
	.word	AnimGuillotinePincer_Step2
.Lfe33:
	.size	 AnimGuillotinePincer_Step1,.Lfe33-AnimGuillotinePincer_Step1
	.align	2, 0
	.type	 AnimGuillotinePincer_Step2,function
	.thumb_func
AnimGuillotinePincer_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L251	@cond_branch
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	neg	r0, r0
	strh	r0, [r4, #0x26]
.L251:
	ldrh	r0, [r4, #0x34]
	mov	r1, #0x1
	eor	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L252	@cond_branch
	strh	r1, [r4, #0x26]
	strh	r1, [r4, #0x24]
	strh	r1, [r4, #0x36]
	strh	r1, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L253
	str	r0, [r4, #0x1c]
.L252:
	pop	{r4}
	pop	{r0}
	bx	r0
.L254:
	.align	2, 0
.L253:
	.word	AnimGuillotinePincer_Step3
.Lfe34:
	.size	 AnimGuillotinePincer_Step2,.Lfe34-AnimGuillotinePincer_Step2
	.align	2, 0
	.type	 AnimGuillotinePincer_Step3,function
	.thumb_func
AnimGuillotinePincer_Step3:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L256	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L256:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 AnimGuillotinePincer_Step3,.Lfe35-AnimGuillotinePincer_Step3
	.align	2, 0
	.globl	AnimTask_GrowAndGrayscale
	.type	 AnimTask_GrowAndGrayscale,function
	.thumb_func
AnimTask_GrowAndGrayscale:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	PrepareBattlerSpriteForRotScale
	add	r0, r4, #0
	mov	r1, #0xd0
	mov	r2, #0xd0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldr	r1, .L258
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	mov	r1, #0x0
	bl	SetGreyscaleOrOriginalPalette
	ldr	r1, .L258+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x50
	strh	r1, [r0, #0x8]
	ldr	r1, .L258+0x8
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L259:
	.align	2, 0
.L258:
	.word	gSprites
	.word	gTasks
	.word	AnimTask_GrowAndGrayscale_Step
.Lfe36:
	.size	 AnimTask_GrowAndGrayscale,.Lfe36-AnimTask_GrowAndGrayscale
	.align	2, 0
	.type	 AnimTask_GrowAndGrayscale_Step,function
	.thumb_func
AnimTask_GrowAndGrayscale_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L262
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L261	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L262+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	mov	r1, #0x1
	bl	SetGreyscaleOrOriginalPalette
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L261:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L263:
	.align	2, 0
.L262:
	.word	gTasks
	.word	gSprites
.Lfe37:
	.size	 AnimTask_GrowAndGrayscale_Step,.Lfe37-AnimTask_GrowAndGrayscale_Step
	.align	2, 0
	.globl	AnimTask_Minimize
	.type	 AnimTask_Minimize,function
	.thumb_func
AnimTask_Minimize:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L265
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x8]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0xc]
	strh	r5, [r4, #0xe]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	strh	r5, [r4, #0x12]
	strh	r5, [r4, #0x14]
	ldr	r0, .L265+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x16]
	ldr	r0, .L265+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	AnimTask_Minimize_Step1
.Lfe38:
	.size	 AnimTask_Minimize,.Lfe38-AnimTask_Minimize
	.align	2, 0
	.type	 AnimTask_Minimize_Step1,function
	.thumb_func
AnimTask_Minimize_Step1:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L287
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bls	.LCB3081
	b	.L268	@long jump
.LCB3081:
	lsl	r0, r0, #0x2
	ldr	r1, .L287+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L288:
	.align	2, 0
.L287:
	.word	gTasks
	.word	.L283
	.align	2, 0
	.align	2, 0
.L283:
	.word	.L269
	.word	.L273
	.word	.L277
	.word	.L278
	.word	.L280
	.word	.L282
.L269:
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L271	@cond_branch
	cmp	r0, #0x3
	beq	.L271	@cond_branch
	cmp	r0, #0x6
	bne	.L270	@cond_branch
.L271:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	CreateMinimizeSprite
.L270:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x28
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x10
	ldrsh	r2, [r4, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromYScale
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x20
	bne	.L268	@cond_branch
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	b	.L285
.L273:
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L268	@cond_branch
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	cmp	r1, #0x3
	bne	.L275	@cond_branch
	strh	r0, [r4, #0xc]
	strh	r1, [r4, #0xa]
	b	.L268
.L275:
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	strh	r2, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromYScale
	mov	r0, #0x2
	strh	r0, [r4, #0xa]
	b	.L268
.L277:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L268
.L278:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x20
	ble	.L268	@cond_branch
	b	.L286
.L280:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x50
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x10
	ldrsh	r2, [r4, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromYScale
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x20
	bne	.L268	@cond_branch
.L286:
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
.L285:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L268
.L282:
	ldrb	r0, [r4, #0x8]
	bl	ResetSpriteRotScale
	ldr	r2, .L289
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x26]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L268:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L290:
	.align	2, 0
.L289:
	.word	gSprites
.Lfe39:
	.size	 AnimTask_Minimize_Step1,.Lfe39-AnimTask_Minimize_Step1
	.align	2, 0
	.type	 CreateMinimizeSprite,function
	.thumb_func
CreateMinimizeSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, #0x0
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	cmp	r4, #0
	blt	.L292	@cond_branch
	bl	AllocOamMatrix
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xff
	bne	.L293	@cond_branch
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L295
	add	r0, r0, r1
	bl	DestroySpriteWithActiveSheet
	b	.L292
.L296:
	.align	2, 0
.L295:
	.word	gSprites
.L293:
	ldr	r5, .L297
	lsl	r3, r4, #0x4
	add	r3, r3, r4
	lsl	r3, r3, #0x2
	add	r4, r3, r5
	ldrb	r1, [r4, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x3
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1f
	and	r6, r6, r0
	lsl	r2, r6, #0x1
	ldrb	r1, [r4, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x3]
	ldrb	r0, [r7, #0x16]
	ldrb	r1, [r7, #0xe]
	sub	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrh	r0, [r7, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r7, #0xe]
	ldrh	r0, [r7, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x14]
	mov	r0, #0x10
	strh	r0, [r4, #0x2e]
	mov	r0, r9
	strh	r0, [r4, #0x30]
	mov	r0, #0x6
	strh	r0, [r4, #0x32]
	add	r5, r5, #0x1c
	add	r3, r3, r5
	ldr	r0, .L297+0x4
	str	r0, [r3]
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x10
	ldrsh	r2, [r7, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x1]
	mov	r3, #0x4
	neg	r3, r3
	and	r3, r3, r0
	mov	r0, #0x1
	orr	r3, r3, r0
	strb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
.L292:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L298:
	.align	2, 0
.L297:
	.word	gSprites
	.word	ClonedMinizeSprite_Step
.Lfe40:
	.size	 CreateMinimizeSprite,.Lfe40-CreateMinimizeSprite
	.align	2, 0
	.type	 ClonedMinizeSprite_Step,function
	.thumb_func
ClonedMinizeSprite_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L300	@cond_branch
	ldr	r3, .L301
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	add	r0, r4, #0
	bl	DestroySpriteWithActiveSheet
.L300:
	pop	{r4}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	gTasks
.Lfe41:
	.size	 ClonedMinizeSprite_Step,.Lfe41-ClonedMinizeSprite_Step
	.align	2, 0
	.globl	AnimTask_Splash
	.type	 AnimTask_Splash,function
	.thumb_func
AnimTask_Splash:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L306
	add	r4, r0, r1
	ldr	r5, .L306+0x4
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L304	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L305
.L307:
	.align	2, 0
.L306:
	.word	gTasks
	.word	gBattleAnimArgs
.L304:
	ldrb	r0, [r5]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	strh	r1, [r4, #0x8]
	strh	r2, [r4, #0xa]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0xc]
	strh	r2, [r4, #0xe]
	strh	r2, [r4, #0x10]
	ldr	r2, .L308
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L308+0x4
	str	r0, [r4]
.L305:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	sSplashEffectAffineAnimCmds
	.word	AnimTask_Splash_Step
.Lfe42:
	.size	 AnimTask_Splash,.Lfe42-AnimTask_Splash
	.align	2, 0
	.type	 AnimTask_Splash_Step,function
	.thumb_func
AnimTask_Splash_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L326
	add	r4, r0, r1
	mov	r0, #0xa
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L314	@cond_branch
	cmp	r5, #0x1
	bgt	.L325	@cond_branch
	cmp	r5, #0
	beq	.L312	@cond_branch
	b	.L311
.L327:
	.align	2, 0
.L326:
	.word	gTasks
.L325:
	cmp	r5, #0x2
	beq	.L316	@cond_branch
	cmp	r5, #0x3
	beq	.L319	@cond_branch
	b	.L311
.L312:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	ldrh	r2, [r4, #0x10]
	add	r2, r2, #0x3
	strh	r2, [r4, #0x10]
	ldr	r3, .L328
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x26]
	add	r1, r1, r2
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L311	@cond_branch
	strh	r5, [r4, #0xe]
	b	.L317
.L329:
	.align	2, 0
.L328:
	.word	gSprites
.L314:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	ldr	r2, .L330
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	ldrh	r2, [r0, #0x26]
	add	r1, r1, r2
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L311	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	b	.L317
.L331:
	.align	2, 0
.L330:
	.word	gSprites
.L316:
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L317	@cond_branch
	ldr	r2, .L332
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x2
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x10]
	b	.L311
.L333:
	.align	2, 0
.L332:
	.word	gSprites
.L317:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L311
.L319:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L311	@cond_branch
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L321	@cond_branch
	ldr	r2, .L334
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L311
.L335:
	.align	2, 0
.L334:
	.word	gSprites
.L321:
	ldrb	r1, [r4, #0x8]
	ldr	r2, .L336
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	strh	r5, [r4, #0xa]
.L311:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L337:
	.align	2, 0
.L336:
	.word	sSplashEffectAffineAnimCmds
.Lfe43:
	.size	 AnimTask_Splash_Step,.Lfe43-AnimTask_Splash_Step
	.align	2, 0
	.globl	AnimTask_GrowAndShrink
	.type	 AnimTask_GrowAndShrink,function
	.thumb_func
AnimTask_GrowAndShrink:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L339
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L339+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L339+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L340:
	.align	2, 0
.L339:
	.word	gTasks
	.word	sGrowAndShrinkAffineAnimCmds
	.word	AnimTask_GrowAndShrink_Step
.Lfe44:
	.size	 AnimTask_GrowAndShrink,.Lfe44-AnimTask_GrowAndShrink
	.align	2, 0
	.type	 AnimTask_GrowAndShrink_Step,function
	.thumb_func
AnimTask_GrowAndShrink_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L343
	add	r0, r0, r1
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L342	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L342:
	pop	{r4}
	pop	{r0}
	bx	r0
.L344:
	.align	2, 0
.L343:
	.word	gTasks
.Lfe45:
	.size	 AnimTask_GrowAndShrink_Step,.Lfe45-AnimTask_GrowAndShrink_Step
	.align	2, 0
	.type	 AnimBreathPuff,function
	.thumb_func
AnimBreathPuff:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L349
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L346	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	strh	r0, [r4, #0x20]
	mov	r0, #0x40
	b	.L348
.L350:
	.align	2, 0
.L349:
	.word	gBattleAnimAttacker
.L346:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x20]
	ldr	r0, .L351
.L348:
	strh	r0, [r4, #0x30]
	ldr	r0, .L351+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	strh	r0, [r4, #0x22]
	mov	r0, #0x34
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x32]
	strh	r1, [r4, #0x34]
	strh	r1, [r4, #0x36]
	ldr	r1, .L351+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L351+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L352:
	.align	2, 0
.L351:
	.word	0xffc0
	.word	gBattleAnimAttacker
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinearFixedPoint
.Lfe46:
	.size	 AnimBreathPuff,.Lfe46-AnimBreathPuff
	.align	2, 0
	.type	 AnimAngerMark,function
	.thumb_func
AnimAngerMark:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r0, .L359
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L354	@cond_branch
	ldr	r0, .L359+0x4
	b	.L358
.L360:
	.align	2, 0
.L359:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L354:
	ldr	r0, .L361
.L358:
	ldrb	r5, [r0]
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L356	@cond_branch
	ldr	r1, .L361+0x4
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L356:
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L361+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x4]
	add	r0, r0, r4
	strh	r0, [r6, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	bgt	.L357	@cond_branch
	mov	r0, #0x8
	strh	r0, [r6, #0x22]
.L357:
	ldr	r1, .L361+0x8
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L361+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L362:
	.align	2, 0
.L361:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe47:
	.size	 AnimAngerMark,.Lfe47-AnimAngerMark
	.align	2, 0
	.globl	AnimTask_ThrashMoveMonHorizontal
	.type	 AnimTask_ThrashMoveMonHorizontal,function
	.thumb_func
AnimTask_ThrashMoveMonHorizontal:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L364
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	strh	r1, [r4, #0x8]
	strh	r0, [r4, #0xa]
	ldr	r2, .L364+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L364+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L365:
	.align	2, 0
.L364:
	.word	gTasks
	.word	sThrashMoveMonAffineAnimCmds
	.word	AnimTask_ThrashMoveMonHorizontal_Step
.Lfe48:
	.size	 AnimTask_ThrashMoveMonHorizontal,.Lfe48-AnimTask_ThrashMoveMonHorizontal
	.align	2, 0
	.type	 AnimTask_ThrashMoveMonHorizontal_Step,function
	.thumb_func
AnimTask_ThrashMoveMonHorizontal_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L368
	add	r0, r0, r1
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L367	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L367:
	pop	{r4}
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gTasks
.Lfe49:
	.size	 AnimTask_ThrashMoveMonHorizontal_Step,.Lfe49-AnimTask_ThrashMoveMonHorizontal_Step
	.align	2, 0
	.globl	AnimTask_ThrashMoveMonVertical
	.type	 AnimTask_ThrashMoveMonVertical,function
	.thumb_func
AnimTask_ThrashMoveMonVertical:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L372
	add	r4, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	strh	r0, [r4, #0x8]
	strh	r2, [r4, #0xa]
	mov	r0, #0x4
	strh	r0, [r4, #0xc]
	mov	r0, #0x7
	strh	r0, [r4, #0xe]
	mov	r0, #0x3
	strh	r0, [r4, #0x10]
	ldr	r3, .L372+0x4
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x20]
	strh	r0, [r4, #0x12]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x22]
	strh	r0, [r4, #0x14]
	strh	r2, [r4, #0x16]
	strh	r2, [r4, #0x18]
	mov	r0, #0x2
	strh	r0, [r4, #0x1a]
	ldr	r0, .L372+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L371	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0xc]
.L371:
	ldr	r0, .L372+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L373:
	.align	2, 0
.L372:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimAttacker
	.word	AnimTask_ThrashMoveMonVertical_Step
.Lfe50:
	.size	 AnimTask_ThrashMoveMonVertical,.Lfe50-AnimTask_ThrashMoveMonVertical
	.align	2, 0
	.type	 AnimTask_ThrashMoveMonVertical_Step,function
	.thumb_func
AnimTask_ThrashMoveMonVertical_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L392
	add	r3, r0, r1
	ldrh	r0, [r3, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L375	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x16]
	ldrh	r0, [r3, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x18]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L376	@cond_branch
	ldr	r2, .L392+0x4
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x1a]
	ldrh	r2, [r0, #0x22]
	add	r1, r1, r2
	b	.L391
.L393:
	.align	2, 0
.L392:
	.word	gTasks
	.word	gSprites
.L376:
	ldr	r2, .L394
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	ldrh	r2, [r3, #0x1a]
	sub	r1, r1, r2
.L391:
	strh	r1, [r0, #0x22]
.L375:
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	beq	.L381	@cond_branch
	cmp	r0, #0x1
	bgt	.L390	@cond_branch
	cmp	r0, #0
	beq	.L379	@cond_branch
	b	.L378
.L395:
	.align	2, 0
.L394:
	.word	gSprites
.L390:
	cmp	r0, #0x2
	beq	.L383	@cond_branch
	b	.L378
.L379:
	ldr	r2, .L396
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0xc]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L378	@cond_branch
	mov	r0, #0xe
	strh	r0, [r3, #0xe]
	mov	r0, #0x1
	strh	r0, [r3, #0xa]
	b	.L378
.L397:
	.align	2, 0
.L396:
	.word	gSprites
.L381:
	ldr	r2, .L398
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	ldrh	r2, [r3, #0xc]
	sub	r1, r1, r2
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L378	@cond_branch
	mov	r0, #0x7
	strh	r0, [r3, #0xe]
	mov	r0, #0x2
	strh	r0, [r3, #0xa]
	b	.L378
.L399:
	.align	2, 0
.L398:
	.word	gSprites
.L383:
	ldr	r2, .L400
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0xc]
	ldrh	r5, [r0, #0x20]
	add	r1, r1, r5
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L378	@cond_branch
	ldrh	r0, [r3, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L385	@cond_branch
	mov	r0, #0x7
	strh	r0, [r3, #0xe]
	strh	r1, [r3, #0xa]
	b	.L378
.L401:
	.align	2, 0
.L400:
	.word	gSprites
.L385:
	ldrh	r1, [r3, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L387	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	ldrh	r2, [r3, #0x1a]
	sub	r1, r1, r2
	strh	r1, [r0, #0x22]
.L387:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L378:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 AnimTask_ThrashMoveMonVertical_Step,.Lfe51-AnimTask_ThrashMoveMonVertical_Step
	.align	2, 0
	.globl	AnimTask_SketchDrawMon
	.type	 AnimTask_SketchDrawMon,function
	.thumb_func
AnimTask_SketchDrawMon:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L412
	add	r5, r1, r0
	ldr	r4, .L412+0x4
	ldrb	r0, [r4]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	mov	r1, #0x0
	strh	r0, [r5, #0x8]
	mov	r0, #0x4
	strh	r0, [r5, #0xa]
	strh	r1, [r5, #0xc]
	strh	r1, [r5, #0xe]
	strh	r1, [r5, #0x10]
	strh	r1, [r5, #0x12]
	ldrb	r0, [r4]
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L403	@cond_branch
	ldr	r0, .L412+0x8
	ldrh	r0, [r0]
	strh	r0, [r5, #0x14]
	ldr	r0, .L412+0xc
	b	.L411
.L413:
	.align	2, 0
.L412:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gBattle_BG1_X
	.word	0x4000014
.L403:
	ldr	r0, .L414
	ldrh	r0, [r0]
	strh	r0, [r5, #0x14]
	ldr	r0, .L414+0x4
.L411:
	str	r0, [sp]
	ldrh	r0, [r5, #0x8]
	add	r1, r0, #0
	sub	r1, r1, #0x40
	lsl	r2, r1, #0x10
	lsl	r0, r0, #0x10
	cmp	r2, r0
	bgt	.L406	@cond_branch
	ldr	r4, .L414+0x8
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r4, r0
.L408:
	asr	r3, r2, #0x10
	cmp	r3, #0
	blt	.L407	@cond_branch
	lsl	r1, r3, #0x1
	add	r2, r1, r4
	ldrh	r0, [r5, #0x14]
	add	r0, r0, #0xf0
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r5, #0x14]
	add	r0, r0, #0xf0
	strh	r0, [r1]
.L407:
	add	r0, r3, #0x1
	lsl	r2, r0, #0x10
	asr	r1, r2, #0x10
	mov	r3, #0x8
	ldrsh	r0, [r5, r3]
	cmp	r1, r0
	ble	.L408	@cond_branch
.L406:
	ldr	r0, .L414+0xc
	str	r0, [sp, #0x4]
	mov	r1, sp
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strb	r2, [r0, #0x9]
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	ldr	r0, .L414+0x10
	str	r0, [r5]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L415:
	.align	2, 0
.L414:
	.word	gBattle_BG2_X
	.word	0x4000018
	.word	gScanlineEffectRegBuffers
	.word	-0x5d9fffff
	.word	AnimTask_SketchDrawMon_Step
.Lfe52:
	.size	 AnimTask_SketchDrawMon,.Lfe52-AnimTask_SketchDrawMon
	.align	2, 0
	.type	 AnimTask_SketchDrawMon_Step,function
	.thumb_func
AnimTask_SketchDrawMon_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L435
	add	r3, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L418	@cond_branch
	cmp	r0, #0x1
	beq	.L420	@cond_branch
	b	.L417
.L436:
	.align	2, 0
.L435:
	.word	gTasks
.L418:
	ldrh	r0, [r3, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L417	@cond_branch
	ldrh	r0, [r3, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x10]
	b	.L417
.L420:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L417	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
	ldrh	r1, [r3, #0xe]
	mov	r0, #0x3
	and	r0, r0, r1
	strh	r0, [r3, #0xc]
	ldrh	r0, [r3, #0x8]
	sub	r0, r0, r1
	strh	r0, [r3, #0x12]
	mov	r2, #0xc
	ldrsh	r1, [r3, r2]
	cmp	r1, #0x1
	beq	.L424	@cond_branch
	cmp	r1, #0x1
	ble	.L422	@cond_branch
	cmp	r1, #0x2
	beq	.L425	@cond_branch
	cmp	r1, #0x3
	beq	.L426	@cond_branch
	b	.L422
.L424:
	sub	r0, r0, #0x2
	b	.L434
.L425:
.L426:
	add	r0, r0, #0x1
.L434:
	strh	r0, [r3, #0x12]
.L422:
	mov	r1, #0x12
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	blt	.L430	@cond_branch
	ldr	r2, .L437
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r3, #0x14]
	strh	r1, [r0]
	mov	r1, #0x12
	ldrsh	r0, [r3, r1]
	lsl	r0, r0, #0x1
	mov	r1, #0xf0
	lsl	r1, r1, #0x3
	add	r2, r2, r1
	add	r0, r0, r2
	ldrh	r1, [r3, #0x14]
	strh	r1, [r0]
.L430:
	ldrh	r0, [r3, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x26
	ldrsh	r1, [r3, r2]
	cmp	r0, r1
	blt	.L417	@cond_branch
	ldr	r1, .L437+0x4
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L417:
	pop	{r4}
	pop	{r0}
	bx	r0
.L438:
	.align	2, 0
.L437:
	.word	gScanlineEffectRegBuffers
	.word	gScanlineEffect
.Lfe53:
	.size	 AnimTask_SketchDrawMon_Step,.Lfe53-AnimTask_SketchDrawMon_Step
	.align	2, 0
	.type	 AnimPencil,function
	.thumb_func
AnimPencil:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L440
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x32]
	mov	r0, #0x10
	strh	r0, [r4, #0x34]
	strh	r5, [r4, #0x36]
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x2
	strh	r0, [r4, #0x38]
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x3a]
	ldr	r0, .L440+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L441:
	.align	2, 0
.L440:
	.word	gBattleAnimTarget
	.word	AnimPencil_Step
.Lfe54:
	.size	 AnimPencil,.Lfe54-AnimPencil
	.align	2, 0
	.type	 AnimPencil_Step,function
	.thumb_func
AnimPencil_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L447	@cond_branch
	cmp	r1, #0x1
	bgt	.L459	@cond_branch
	cmp	r1, #0
	beq	.L444	@cond_branch
	b	.L443
.L459:
	cmp	r1, #0x2
	beq	.L454	@cond_branch
	b	.L443
.L444:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L445	@cond_branch
	strh	r1, [r4, #0x32]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L445:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L443	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r2]
	b	.L460
.L447:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L448	@cond_branch
	ldrh	r2, [r4, #0x32]
	mov	r3, #0x32
	ldrsh	r1, [r4, r3]
	mov	r3, #0x38
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	bge	.L448	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	add	r0, r2, #0x1
	strh	r0, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L448	@cond_branch
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xc6
	bl	PlaySE12WithPanning
.L448:
	ldrh	r0, [r4, #0x34]
	ldrh	r2, [r4, #0x36]
	add	r1, r0, r2
	strh	r1, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0x1f
	ble	.L450	@cond_branch
	mov	r0, #0x40
	b	.L461
.L450:
	mov	r0, #0x20
	neg	r0, r0
	cmp	r2, r0
	bgt	.L451	@cond_branch
	mov	r2, #0x40
	neg	r2, r2
	add	r0, r2, #0
.L461:
	sub	r0, r0, r1
	strh	r0, [r4, #0x36]
	mov	r3, #0x34
	ldrsh	r0, [r4, r3]
	neg	r0, r0
	strh	r0, [r4, #0x34]
.L451:
	ldrh	r0, [r4, #0x36]
	mov	r2, #0x0
	strh	r0, [r4, #0x24]
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	mov	r3, #0x32
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	bne	.L443	@cond_branch
	strh	r2, [r4, #0x30]
	strh	r2, [r4, #0x32]
.L460:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L443
.L454:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L455	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L455:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L443	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L443:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 AnimPencil_Step,.Lfe55-AnimPencil_Step
	.align	2, 0
	.type	 AnimBlendThinRing,function
	.thumb_func
AnimBlendThinRing:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	mov	r5, #0x0
	mov	r0, sp
	strh	r5, [r0]
	mov	r1, sp
	add	r1, r1, #0x2
	strh	r5, [r1]
	ldr	r0, .L472
	mov	r3, #0x4
	ldrsh	r2, [r0, r3]
	add	r7, r1, #0
	add	r1, r0, #0
	cmp	r2, #0
	bne	.L463	@cond_branch
	ldr	r0, .L472+0x4
	b	.L470
.L473:
	.align	2, 0
.L472:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L463:
	ldr	r0, .L474
.L470:
	ldrb	r5, [r0]
	ldrb	r1, [r1, #0x6]
	mov	r0, #0x1
	add	r4, r0, #0
	eor	r4, r4, r1
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L465	@cond_branch
	mov	r1, #0x2
	add	r0, r5, #0
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L465	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, sp
	add	r3, r7, #0
	bl	SetAverageBattlerPositions
	cmp	r4, #0
	bne	.L466	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	b	.L471
.L475:
	.align	2, 0
.L474:
	.word	gBattleAnimTarget
.L466:
	add	r0, r5, #0
	mov	r1, #0x2
.L471:
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L468	@cond_branch
	ldr	r2, .L476
	mov	r0, sp
	ldrh	r1, [r0]
	sub	r1, r1, r4
	ldrh	r0, [r2]
	sub	r1, r1, r0
	sub	r0, r0, r1
	strh	r0, [r2]
	b	.L465
.L477:
	.align	2, 0
.L476:
	.word	gBattleAnimArgs
.L468:
	ldr	r1, .L478
	mov	r0, sp
	ldrh	r0, [r0]
	sub	r0, r0, r4
	strh	r0, [r1]
.L465:
	ldr	r1, .L478+0x4
	str	r1, [r6, #0x1c]
	add	r0, r6, #0
	bl	_call_via_r1
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	gBattleAnimArgs
	.word	AnimSpriteOnMonPos
.Lfe56:
	.size	 AnimBlendThinRing,.Lfe56-AnimBlendThinRing
	.align	2, 0
	.type	 AnimHyperVoiceRing_WaitEnd,function
	.thumb_func
AnimHyperVoiceRing_WaitEnd:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L481	@cond_branch
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L481:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 AnimHyperVoiceRing_WaitEnd,.Lfe57-AnimHyperVoiceRing_WaitEnd
	.align	2, 0
	.type	 AnimHyperVoiceRing,function
	.thumb_func
AnimHyperVoiceRing:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	mov	r6, #0x0
	mov	r0, sp
	strh	r6, [r0]
	mov	r1, sp
	add	r1, r1, #0x2
	strh	r6, [r1]
	ldr	r0, .L503
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L483	@cond_branch
	ldr	r0, .L503+0x4
	ldrb	r7, [r0]
	ldr	r0, .L503+0x8
	b	.L499
.L504:
	.align	2, 0
.L503:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L483:
	ldr	r0, .L505
	ldrb	r7, [r0]
	ldr	r0, .L505+0x4
.L499:
	ldrb	r0, [r0]
	mov	r8, r0
	ldr	r0, .L505+0x8
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	cmp	r0, #0
	bne	.L485	@cond_branch
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	b	.L486
.L506:
	.align	2, 0
.L505:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L485:
	mov	r2, #0x2
	mov	sl, r2
	mov	r3, #0x3
	str	r3, [sp, #0x4]
.L486:
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L487	@cond_branch
	add	r0, r7, #0
	mov	r1, sl
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r1, .L507
	lsr	r0, r0, #0x18
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r0, #0x2
	mov	r4, r8
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L488	@cond_branch
	ldr	r2, .L507+0x4
	ldr	r0, .L507+0x8
	add	r0, r4, r0
	b	.L500
.L508:
	.align	2, 0
.L507:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	gBattlerSpriteIds
.L488:
	ldr	r2, .L509
	ldr	r0, .L509+0x4
	add	r0, r0, r8
	b	.L500
.L510:
	.align	2, 0
.L509:
	.word	gSprites
	.word	gBattlerSpriteIds
.L487:
	add	r0, r7, #0
	mov	r1, sl
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L511
	ldrh	r1, [r1]
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L491	@cond_branch
	mov	r0, #0x2
	add	r4, r7, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L491	@cond_branch
	ldr	r3, .L511+0x4
	ldr	r2, .L511+0x8
	add	r0, r7, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r6, r0, r3
	add	r2, r4, r2
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r3
	mov	r0, #0x20
	ldrsh	r1, [r6, r0]
	mov	r3, #0x20
	ldrsh	r0, [r2, r3]
	cmp	r1, r0
	bge	.L492	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	b	.L501
.L512:
	.align	2, 0
.L511:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	gBattlerSpriteIds
.L492:
	add	r0, r6, #0
	b	.L502
.L491:
	ldr	r2, .L513
	ldr	r0, .L513+0x4
	add	r0, r7, r0
.L500:
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
.L502:
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
.L501:
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	add	r0, r7, #0
	ldr	r1, [sp, #0x4]
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L513+0x8
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L495	@cond_branch
	mov	r1, #0x2
	mov	r0, r8
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L495	@cond_branch
	ldrb	r1, [r4, #0xc]
	mov	r0, r8
	mov	r2, sp
	mov	r3, sp
	add	r3, r3, #0x2
	bl	SetAverageBattlerPositions
	b	.L496
.L514:
	.align	2, 0
.L513:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimArgs
.L495:
	mov	r4, sp
	mov	r0, r8
	mov	r1, sl
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, r8
	ldr	r1, [sp, #0x4]
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	strh	r0, [r2, #0x2]
.L496:
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L497	@cond_branch
	mov	r3, sp
	mov	r2, sp
	ldr	r1, .L515
	ldrh	r0, [r1, #0x6]
	ldrh	r2, [r2]
	add	r0, r0, r2
	strh	r0, [r3]
	add	r2, r1, #0
	b	.L498
.L516:
	.align	2, 0
.L515:
	.word	gBattleAnimArgs
.L497:
	mov	r3, sp
	mov	r0, sp
	ldr	r2, .L517
	ldrh	r0, [r0]
	ldrh	r1, [r2, #0x6]
	sub	r0, r0, r1
	strh	r0, [r3]
.L498:
	ldrh	r1, [r2, #0x8]
	mov	r3, sp
	ldrh	r3, [r3, #0x2]
	add	r1, r1, r3
	mov	r0, sp
	strh	r1, [r0, #0x2]
	mov	r3, r9
	strh	r3, [r5, #0x30]
	strh	r3, [r5, #0x20]
	strh	r6, [r5, #0x34]
	strh	r6, [r5, #0x22]
	ldrh	r0, [r0]
	strh	r0, [r5, #0x32]
	strh	r1, [r5, #0x36]
	ldrh	r0, [r2]
	strh	r0, [r5, #0x2e]
	add	r0, r5, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L517+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	gBattleAnimArgs
	.word	AnimHyperVoiceRing_WaitEnd
.Lfe58:
	.size	 AnimHyperVoiceRing,.Lfe58-AnimHyperVoiceRing
	.align	2, 0
	.type	 AnimUproarRing,function
	.thumb_func
AnimUproarRing:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L521
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L520	@cond_branch
	lsl	r0, r0, #0x14
	ldr	r1, .L521+0x4
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	ldr	r1, .L521+0x8
	ldrb	r2, [r1, #0xa]
	ldrh	r3, [r1, #0x8]
	mov	r1, #0xf
	bl	BlendPalette
.L520:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r1, .L521+0xc
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L522:
	.align	2, 0
.L521:
	.word	0x27db
	.word	0x1010000
	.word	gBattleAnimArgs
	.word	AnimSpriteOnMonPos
.Lfe59:
	.size	 AnimUproarRing,.Lfe59-AnimUproarRing
	.align	2, 0
	.type	 AnimSoftBoiledEgg,function
	.thumb_func
AnimSoftBoiledEgg:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L526
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0xa0
	cmp	r0, #0
	beq	.L524	@cond_branch
	ldr	r1, .L526+0x4
.L524:
	mov	r0, #0xe0
	lsl	r0, r0, #0x2
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	ldr	r0, .L526+0x8
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x3c]
	ldr	r0, .L526+0xc
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L527:
	.align	2, 0
.L526:
	.word	gBattleAnimAttacker
	.word	0xff60
	.word	gBattleAnimArgs
	.word	AnimSoftBoiledEgg_Step1
.Lfe60:
	.size	 AnimSoftBoiledEgg,.Lfe60-AnimSoftBoiledEgg
	.align	2, 0
	.type	 AnimSoftBoiledEgg_Step1,function
	.thumb_func
AnimSoftBoiledEgg_Step1:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x2e]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	sub	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	sub	r2, r2, #0x20
	strh	r2, [r4, #0x2e]
	ldr	r0, .L532
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0xa0
	cmp	r0, #0
	beq	.L529	@cond_branch
	ldr	r1, .L532+0x4
.L529:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x26]
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L531	@cond_branch
	ldrh	r2, [r4, #0x22]
	add	r0, r1, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x24]
	strh	r5, [r4, #0x2e]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r0, .L532+0x8
	str	r0, [r4, #0x1c]
.L531:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L533:
	.align	2, 0
.L532:
	.word	gBattleAnimAttacker
	.word	0xff60
	.word	AnimSoftBoiledEgg_Step2
.Lfe61:
	.size	 AnimSoftBoiledEgg_Step1,.Lfe61-AnimSoftBoiledEgg_Step1
	.align	2, 0
	.type	 AnimSoftBoiledEgg_Step2,function
	.thumb_func
AnimSoftBoiledEgg_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L535	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	ldr	r0, .L536
	str	r0, [r4, #0x1c]
.L535:
	pop	{r4}
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	AnimSoftBoiledEgg_Step3
.Lfe62:
	.size	 AnimSoftBoiledEgg_Step2,.Lfe62-AnimSoftBoiledEgg_Step2
	.align	2, 0
	.type	 AnimSoftBoiledEgg_Step3,function
	.thumb_func
AnimSoftBoiledEgg_Step3:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L539	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L540	@cond_branch
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r3, .L543
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L543+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	ldr	r0, .L543+0x8
	b	.L542
.L544:
	.align	2, 0
.L543:
	.word	0x3ff
	.word	-0x400
	.word	AnimSoftBoiledEgg_Step3_Callback1
.L540:
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r3, .L545
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L545+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	ldr	r0, .L545+0x8
.L542:
	str	r0, [r4, #0x1c]
.L539:
	pop	{r4}
	pop	{r0}
	bx	r0
.L546:
	.align	2, 0
.L545:
	.word	0x3ff
	.word	-0x400
	.word	AnimSoftBoiledEgg_Step4
.Lfe63:
	.size	 AnimSoftBoiledEgg_Step3,.Lfe63-AnimSoftBoiledEgg_Step3
	.align	2, 0
	.type	 AnimSoftBoiledEgg_Step3_Callback1,function
	.thumb_func
AnimSoftBoiledEgg_Step3_Callback1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L548	@cond_branch
	mov	r0, #0x10
	strh	r0, [r4, #0x2e]
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L549
	str	r0, [r4, #0x1c]
.L548:
	pop	{r4}
	pop	{r0}
	bx	r0
.L550:
	.align	2, 0
.L549:
	.word	AnimSoftBoiledEgg_Step3_Callback2
.Lfe64:
	.size	 AnimSoftBoiledEgg_Step3_Callback1,.Lfe64-AnimSoftBoiledEgg_Step3_Callback1
	.align	2, 0
	.type	 AnimSoftBoiledEgg_Step3_Callback2,function
	.thumb_func
AnimSoftBoiledEgg_Step3_Callback2:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L552	@cond_branch
	ldrh	r1, [r4, #0x2e]
	sub	r1, r1, #0x1
	strh	r1, [r4, #0x2e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L552	@cond_branch
	ldr	r0, .L554
	str	r0, [r4, #0x1c]
.L552:
	pop	{r4}
	pop	{r0}
	bx	r0
.L555:
	.align	2, 0
.L554:
	.word	AnimSoftBoiledEgg_Step4
.Lfe65:
	.size	 AnimSoftBoiledEgg_Step3_Callback2,.Lfe65-AnimSoftBoiledEgg_Step3_Callback2
	.align	2, 0
	.type	 AnimSoftBoiledEgg_Step4,function
	.thumb_func
AnimSoftBoiledEgg_Step4:
	push	{lr}
	add	r3, r0, #0
	ldr	r0, .L561
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L561+0x4
	cmp	r1, r0
	bne	.L557	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r1, #0x3c
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L558	@cond_branch
	ldr	r0, .L561+0x8
	b	.L560
.L562:
	.align	2, 0
.L561:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	AnimSoftBoiledEgg_Step4_Callback
.L558:
	ldr	r0, .L563
.L560:
	str	r0, [r3, #0x1c]
.L557:
	pop	{r0}
	bx	r0
.L564:
	.align	2, 0
.L563:
	.word	DestroyAnimSprite
.Lfe66:
	.size	 AnimSoftBoiledEgg_Step4,.Lfe66-AnimSoftBoiledEgg_Step4
	.align	2, 0
	.type	 AnimSoftBoiledEgg_Step4_Callback,function
	.thumb_func
AnimSoftBoiledEgg_Step4_Callback:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 AnimSoftBoiledEgg_Step4_Callback,.Lfe67-AnimSoftBoiledEgg_Step4_Callback
	.align	2, 0
	.globl	AnimTask_AttackerStretchAndDisappear
	.type	 AnimTask_AttackerStretchAndDisappear,function
	.thumb_func
AnimTask_AttackerStretchAndDisappear:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L567
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x8]
	ldr	r2, .L567+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L567+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L568:
	.align	2, 0
.L567:
	.word	gTasks
	.word	sStretchAttackerAffineAnimCmds
	.word	AnimTask_AttackerStretchAndDisappear_Step
.Lfe68:
	.size	 AnimTask_AttackerStretchAndDisappear,.Lfe68-AnimTask_AttackerStretchAndDisappear
	.align	2, 0
	.type	 AnimTask_AttackerStretchAndDisappear_Step,function
	.thumb_func
AnimTask_AttackerStretchAndDisappear_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L571
	add	r4, r0, r1
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.L570	@cond_branch
	ldr	r2, .L571+0x4
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L570:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L572:
	.align	2, 0
.L571:
	.word	gTasks
	.word	gSprites
.Lfe69:
	.size	 AnimTask_AttackerStretchAndDisappear_Step,.Lfe69-AnimTask_AttackerStretchAndDisappear_Step
	.align	2, 0
	.globl	AnimTask_ExtremeSpeedImpact
	.type	 AnimTask_ExtremeSpeedImpact,function
	.thumb_func
AnimTask_ExtremeSpeedImpact:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L577
	add	r4, r1, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r0, #0x3
	strh	r0, [r4, #0x20]
	ldr	r0, .L577+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L574	@cond_branch
	ldr	r0, .L577+0x8
	strh	r0, [r4, #0x22]
	mov	r0, #0x8
	b	.L576
.L578:
	.align	2, 0
.L577:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	0xffff
.L574:
	mov	r0, #0x1
	strh	r0, [r4, #0x22]
	ldr	r0, .L579
.L576:
	strh	r0, [r4, #0x24]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L579+0x4
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L580:
	.align	2, 0
.L579:
	.word	0xfff8
	.word	AnimTask_ExtremeSpeedImpact_Step
.Lfe70:
	.size	 AnimTask_ExtremeSpeedImpact,.Lfe70-AnimTask_ExtremeSpeedImpact
	.align	2, 0
	.type	 AnimTask_ExtremeSpeedImpact_Step,function
	.thumb_func
AnimTask_ExtremeSpeedImpact_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L599
	add	r3, r0, r1
	mov	r0, #0x8
	ldrsh	r4, [r3, r0]
	cmp	r4, #0x1
	beq	.L584	@cond_branch
	cmp	r4, #0x1
	bgt	.L597	@cond_branch
	cmp	r4, #0
	beq	.L583	@cond_branch
	b	.L582
.L600:
	.align	2, 0
.L599:
	.word	gTasks
.L597:
	cmp	r4, #0x2
	beq	.L590	@cond_branch
	cmp	r4, #0x3
	beq	.L593	@cond_branch
	b	.L582
.L583:
	ldr	r2, .L601
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x24]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	strh	r4, [r3, #0xa]
	strh	r4, [r3, #0xc]
	strh	r4, [r3, #0xe]
	b	.L591
.L602:
	.align	2, 0
.L601:
	.word	gSprites
.L584:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L582	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
	ldrh	r0, [r3, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	and	r0, r0, r4
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L586	@cond_branch
	ldr	r2, .L603
	mov	r4, #0x26
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	add	r1, r1, #0x6
	b	.L598
.L604:
	.align	2, 0
.L603:
	.word	gSprites
.L586:
	ldr	r2, .L605
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	sub	r1, r1, #0x6
.L598:
	strh	r1, [r0, #0x24]
	ldrh	r0, [r3, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L582	@cond_branch
	ldrh	r1, [r3, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L591	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x24]
	sub	r0, r0, #0x6
	strh	r0, [r1, #0x24]
	b	.L591
.L606:
	.align	2, 0
.L605:
	.word	gSprites
.L590:
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x20]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L591	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x8]
	b	.L582
.L591:
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	b	.L582
.L593:
	ldr	r2, .L607
	mov	r4, #0x26
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x22]
	ldrh	r4, [r0, #0x24]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L582	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L582:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L608:
	.align	2, 0
.L607:
	.word	gSprites
.Lfe71:
	.size	 AnimTask_ExtremeSpeedImpact_Step,.Lfe71-AnimTask_ExtremeSpeedImpact_Step
	.align	2, 0
	.globl	AnimTask_ExtremeSpeedMonReappear
	.type	 AnimTask_ExtremeSpeedMonReappear,function
	.thumb_func
AnimTask_ExtremeSpeedMonReappear:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L610
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	mov	r0, #0xe
	strh	r0, [r4, #0x22]
	mov	r0, #0x2
	strh	r0, [r4, #0x24]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L610+0x4
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L611:
	.align	2, 0
.L610:
	.word	gTasks
	.word	AnimTask_ExtremeSpeedMonReappear_Step
.Lfe72:
	.size	 AnimTask_ExtremeSpeedMonReappear,.Lfe72-AnimTask_ExtremeSpeedMonReappear
	.align	2, 0
	.type	 AnimTask_ExtremeSpeedMonReappear_Step,function
	.thumb_func
AnimTask_ExtremeSpeedMonReappear_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L620
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r2, [r4, r0]
	cmp	r2, #0
	bne	.L613	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	ble	.L613	@cond_branch
	strh	r2, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L614	@cond_branch
	ldr	r3, .L620+0x4
	mov	r6, #0x26
	ldrsh	r1, [r4, r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	b	.L619
.L621:
	.align	2, 0
.L620:
	.word	gTasks
	.word	gSprites
.L614:
	ldr	r3, .L622
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
.L619:
	strb	r1, [r0]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0x22
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	blt	.L613	@cond_branch
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0x24
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	bge	.L617	@cond_branch
	strh	r2, [r4, #0xa]
	strh	r2, [r4, #0xc]
	strh	r2, [r4, #0xe]
	b	.L613
.L623:
	.align	2, 0
.L622:
	.word	gSprites
.L617:
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L613:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 AnimTask_ExtremeSpeedMonReappear_Step,.Lfe73-AnimTask_ExtremeSpeedMonReappear_Step
	.align	2, 0
	.globl	AnimTask_SpeedDust
	.type	 AnimTask_SpeedDust,function
	.thumb_func
AnimTask_SpeedDust:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L625
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	mov	r1, #0x4
	strh	r1, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	strh	r0, [r4, #0x10]
	strh	r0, [r4, #0x12]
	strh	r0, [r4, #0x14]
	strh	r0, [r4, #0x16]
	strh	r0, [r4, #0x18]
	strh	r0, [r4, #0x22]
	ldr	r5, .L625+0x4
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L625+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L626:
	.align	2, 0
.L625:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	AnimTask_SpeedDust_Step
.Lfe74:
	.size	 AnimTask_SpeedDust,.Lfe74-AnimTask_SpeedDust
	.align	2, 0
	.type	 AnimTask_SpeedDust_Step,function
	.thumb_func
AnimTask_SpeedDust_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L650
	add	r4, r0, r1
	mov	r0, #0x18
	ldrsh	r2, [r4, r0]
	cmp	r2, #0x1
	beq	.L634	@cond_branch
	cmp	r2, #0x1
	bgt	.L639	@cond_branch
	cmp	r2, #0
	beq	.L629	@cond_branch
	b	.L628
.L651:
	.align	2, 0
.L650:
	.word	gTasks
.L639:
	cmp	r2, #0x2
	beq	.L636	@cond_branch
	b	.L628
.L629:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L628	@cond_branch
	strh	r2, [r4, #0x10]
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	mov	r1, #0x1
	and	r0, r0, r1
	strh	r0, [r4, #0x12]
	ldrh	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L628	@cond_branch
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L632	@cond_branch
	strh	r2, [r4, #0x14]
	mov	r0, #0x1
	strh	r0, [r4, #0x18]
	b	.L628
.L632:
	mov	r0, #0x2
	strh	r0, [r4, #0x18]
	b	.L628
.L634:
	mov	r1, #0x0
	strh	r1, [r4, #0x12]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L628	@cond_branch
	strh	r2, [r4, #0x16]
	strh	r1, [r4, #0x18]
	b	.L628
.L636:
	mov	r0, #0x1
	strh	r0, [r4, #0x12]
.L628:
	mov	r2, #0x8
	ldrsh	r5, [r4, r2]
	cmp	r5, #0
	beq	.L641	@cond_branch
	cmp	r5, #0x1
	beq	.L646	@cond_branch
	b	.L640
.L641:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L640	@cond_branch
	strh	r5, [r4, #0xa]
	ldr	r0, .L652
	mov	r3, #0x24
	ldrsh	r1, [r4, r3]
	mov	r3, #0x26
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L640	@cond_branch
	ldr	r0, .L652+0x4
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	strh	r6, [r1, #0x2e]
	mov	r0, #0xd
	strh	r0, [r1, #0x30]
	ldr	r2, .L652+0x8
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	strh	r0, [r1, #0x24]
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	strh	r0, [r1, #0x26]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L640	@cond_branch
	strh	r5, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L640	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L640
.L653:
	.align	2, 0
.L652:
	.word	gSpeedDustSpriteTemplate
	.word	gSprites
	.word	sSpeedDustPosTable
.L646:
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L640	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L640:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 AnimTask_SpeedDust_Step,.Lfe75-AnimTask_SpeedDust_Step
	.align	2, 0
	.type	 AnimSpeedDust,function
	.thumb_func
AnimSpeedDust:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r4, .L656
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x3e
	add	r1, r1, r3
	mov	ip, r1
	mov	r2, #0x1
	ldrb	r1, [r0, #0x12]
	and	r1, r1, r2
	lsl	r1, r1, #0x2
	mov	r0, ip
	ldrb	r2, [r0]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L655	@cond_branch
	mov	r0, #0x30
	ldrsh	r1, [r3, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x2e
	ldrsh	r2, [r3, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r1, r1, r0
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r3, #0
	bl	DestroySprite
.L655:
	pop	{r4}
	pop	{r0}
	bx	r0
.L657:
	.align	2, 0
.L656:
	.word	gTasks
.Lfe76:
	.size	 AnimSpeedDust,.Lfe76-AnimSpeedDust
	.align	2, 0
	.globl	AnimTask_LoadMusicNotesPals
	.type	 AnimTask_LoadMusicNotesPals,function
	.thumb_func
AnimTask_LoadMusicNotesPals:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L669
	bl	IndexOfSpritePaletteTag
	mov	r1, sp
	strb	r0, [r1]
	mov	r4, #0x1
	ldr	r0, .L669+0x4
	add	r5, r0, #0
.L662:
	sub	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	AllocSpritePalette
	mov	r2, sp
	add	r1, r2, r4
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L662	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	add	r1, r0, #0
	ldr	r0, .L669+0x8
	ldr	r0, [r0]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	str	r1, [r0]
	ldr	r0, .L669+0xc
	bl	LZDecompressWram
	mov	r4, #0x0
.L667:
	ldr	r5, .L669+0x8
	ldr	r0, [r5]
	mov	r1, #0xbe
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r4, #0x6
	ldr	r0, [r0]
	add	r0, r0, r1
	mov	r2, sp
	add	r1, r2, r4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L667	@cond_branch
	ldr	r0, [r5]
	mov	r4, #0xbe
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0x0
	str	r1, [r0]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L670:
	.align	2, 0
.L669:
	.word	0x27de
	.word	0x2710
	.word	gMonSpritesGfxPtr
	.word	gBattleAnimSpritePal_MusicNotes2
.Lfe77:
	.size	 AnimTask_LoadMusicNotesPals,.Lfe77-AnimTask_LoadMusicNotesPals
	.align	2, 0
	.globl	AnimTask_FreeMusicNotesPals
	.type	 AnimTask_FreeMusicNotesPals,function
	.thumb_func
AnimTask_FreeMusicNotesPals:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L677
	mov	r4, #0x2
.L675:
	ldrh	r0, [r5]
	bl	FreeSpritePaletteByTag
	add	r5, r5, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L675	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L678:
	.align	2, 0
.L677:
	.word	gMusicNotePaletteTagsTable
.Lfe78:
	.size	 AnimTask_FreeMusicNotesPals,.Lfe78-AnimTask_FreeMusicNotesPals
	.align	2, 0
	.type	 SetMusicNotePalette,function
	.thumb_func
SetMusicNotePalette:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r3, r2, #0x18
	mov	r0, #0x1
	and	r3, r3, r0
	neg	r0, r3
	orr	r0, r0, r3
	asr	r0, r0, #0x1f
	mov	r3, #0x20
	and	r0, r0, r3
	ldrh	r4, [r5, #0x4]
	lsl	r3, r4, #0x16
	lsr	r3, r3, #0x16
	lsr	r1, r1, #0x16
	add	r0, r0, r1
	add	r3, r3, r0
	ldr	r1, .L682
	add	r0, r1, #0
	and	r3, r3, r0
	ldr	r0, .L682+0x4
	and	r0, r0, r4
	orr	r0, r0, r3
	strh	r0, [r5, #0x4]
	ldr	r0, .L682+0x8
	lsr	r2, r2, #0x19
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	ldrh	r0, [r2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x4
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xf
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L683:
	.align	2, 0
.L682:
	.word	0x3ff
	.word	-0x400
	.word	gMusicNotePaletteTagsTable
.Lfe79:
	.size	 SetMusicNotePalette,.Lfe79-SetMusicNotePalette
	.align	2, 0
	.type	 AnimHealBellMusicNote,function
	.thumb_func
AnimHealBellMusicNote:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r6, .L686
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L685	@cond_branch
	ldr	r1, .L686+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L685:
	ldr	r4, .L686+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x2e]
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r5, #0x36]
	ldr	r0, .L686+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L686+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldrb	r1, [r4, #0xa]
	ldrb	r2, [r4, #0xc]
	add	r0, r5, #0
	bl	SetMusicNotePalette
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L687:
	.align	2, 0
.L686:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe80:
	.size	 AnimHealBellMusicNote,.Lfe80-AnimHealBellMusicNote
	.align	2, 0
	.type	 AnimMagentaHeart,function
	.thumb_func
AnimMagentaHeart:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L689	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
.L689:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x32]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x7
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	sub	r2, r2, #0x80
	strh	r2, [r4, #0x32]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3c
	bne	.L690	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L690:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 AnimMagentaHeart,.Lfe81-AnimMagentaHeart
	.align	2, 0
	.globl	AnimTask_FakeOut
	.type	 AnimTask_FakeOut,function
	.thumb_func
AnimTask_FakeOut:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	mov	r6, #0xf0
	cmp	r0, #0
	beq	.L692	@cond_branch
	mov	r6, #0x98
.L692:
	mov	r5, #0x0
	ldr	r1, .L694
	strh	r6, [r1]
	ldr	r4, .L694+0x4
	mov	r0, #0xa0
	strh	r0, [r4]
	ldrh	r1, [r1]
	mov	r0, #0x40
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r1, .L694+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L694+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0xc8
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r1, .L694+0x10
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	strh	r6, [r0, #0xa]
	ldr	r1, .L694+0x14
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L695:
	.align	2, 0
.L694:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f1f
	.word	0x3f3f
	.word	gTasks
	.word	AnimTask_FakeOut_Step1
.Lfe82:
	.size	 AnimTask_FakeOut,.Lfe82-AnimTask_FakeOut
	.align	2, 0
	.type	 AnimTask_FakeOut_Step1,function
	.thumb_func
AnimTask_FakeOut_Step1:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L699
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r1, r2
	ldrh	r0, [r3, #0x8]
	add	r4, r0, #0
	add	r4, r4, #0xd
	strh	r4, [r3, #0x8]
	ldrh	r0, [r3, #0xa]
	add	r2, r0, #0
	sub	r2, r2, #0xd
	strh	r2, [r3, #0xa]
	lsl	r1, r4, #0x10
	lsl	r0, r2, #0x10
	cmp	r1, r0
	blt	.L697	@cond_branch
	ldr	r0, .L699+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L699+0x8
	str	r0, [r3]
	b	.L698
.L700:
	.align	2, 0
.L699:
	.word	gTasks
	.word	gBattle_WIN0H
	.word	AnimTask_FakeOut_Step2
.L697:
	ldr	r1, .L701
	lsl	r0, r4, #0x8
	orr	r2, r2, r0
	strh	r2, [r1]
.L698:
	pop	{r4}
	pop	{r0}
	bx	r0
.L702:
	.align	2, 0
.L701:
	.word	gBattle_WIN0H
.Lfe83:
	.size	 AnimTask_FakeOut_Step1,.Lfe83-AnimTask_FakeOut_Step1
	.align	2, 0
	.type	 AnimTask_FakeOut_Step2,function
	.thumb_func
AnimTask_FakeOut_Step2:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L707
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L704	@cond_branch
	mov	r0, #0x88
	strh	r0, [r1, #0x1e]
	mov	r0, #0x50
	mov	r1, #0x88
	bl	SetGpuReg
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	ldr	r2, .L707+0x4
	mov	r1, #0x10
	bl	BlendPalettes
	b	.L705
.L708:
	.align	2, 0
.L707:
	.word	gTasks
	.word	0x7fff
.L704:
	cmp	r0, #0x4
	ble	.L705	@cond_branch
	ldr	r0, .L709
	strh	r4, [r0]
	ldr	r0, .L709+0x4
	strh	r4, [r0]
	ldr	r4, .L709+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L705:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L710:
	.align	2, 0
.L709:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe84:
	.size	 AnimTask_FakeOut_Step2,.Lfe84-AnimTask_FakeOut_Step2
	.align	2, 0
	.globl	AnimTask_StretchTargetUp
	.type	 AnimTask_StretchTargetUp,function
	.thumb_func
AnimTask_StretchTargetUp:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L715
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L712	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L715+0x4
	add	r0, r5, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r1, .L715+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x4
	strh	r1, [r0, #0x24]
	b	.L713
.L716:
	.align	2, 0
.L715:
	.word	gTasks
	.word	sAffineAnims_StretchBattlerUp
	.word	gSprites
.L712:
	ldr	r1, .L717
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	add	r0, r5, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L713	@cond_branch
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L713:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L718:
	.align	2, 0
.L717:
	.word	gSprites
.Lfe85:
	.size	 AnimTask_StretchTargetUp,.Lfe85-AnimTask_StretchTargetUp
	.align	2, 0
	.globl	AnimTask_StretchAttackerUp
	.type	 AnimTask_StretchAttackerUp,function
	.thumb_func
AnimTask_StretchAttackerUp:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L723
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L720	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L723+0x4
	add	r0, r5, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r1, .L723+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x4
	strh	r1, [r0, #0x24]
	b	.L721
.L724:
	.align	2, 0
.L723:
	.word	gTasks
	.word	sAffineAnims_StretchBattlerUp
	.word	gSprites
.L720:
	ldr	r1, .L725
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	add	r0, r5, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L721	@cond_branch
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L721:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L726:
	.align	2, 0
.L725:
	.word	gSprites
.Lfe86:
	.size	 AnimTask_StretchAttackerUp,.Lfe86-AnimTask_StretchAttackerUp
	.align	2, 0
	.type	 AnimRedHeartProjectile,function
	.thumb_func
AnimRedHeartProjectile:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x5f
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r5, .L728
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r0, .L728+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L729:
	.align	2, 0
.L728:
	.word	gBattleAnimTarget
	.word	AnimRedHeartProjectile_Step
.Lfe87:
	.size	 AnimRedHeartProjectile,.Lfe87-AnimRedHeartProjectile
	.align	2, 0
	.type	 AnimRedHeartProjectile_Step,function
	.thumb_func
AnimRedHeartProjectile_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L731	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	Sin
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x4
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L732
.L731:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L732:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 AnimRedHeartProjectile_Step,.Lfe88-AnimRedHeartProjectile_Step
	.align	2, 0
	.globl	AnimParticleBurst
	.type	 AnimParticleBurst,function
	.thumb_func
AnimParticleBurst:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L734	@cond_branch
	ldr	r1, .L738
	ldrh	r0, [r1]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x32]
	add	r0, r2, #0x1
	strh	r0, [r4, #0x2e]
	b	.L735
.L739:
	.align	2, 0
.L738:
	.word	gBattleAnimArgs
.L734:
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	cmp	r0, #0x64
	ble	.L736	@cond_branch
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L736:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x78
	ble	.L735	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L735:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 AnimParticleBurst,.Lfe89-AnimParticleBurst
	.align	2, 0
	.type	 AnimRedHeartRising,function
	.thumb_func
AnimRedHeartRising:
	push	{lr}
	ldr	r2, .L741
	ldrh	r1, [r2]
	strh	r1, [r0, #0x20]
	mov	r1, #0xa0
	strh	r1, [r0, #0x22]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x30]
	ldr	r1, .L741+0x4
	str	r1, [r0, #0x1c]
	ldr	r1, .L741+0x8
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L742:
	.align	2, 0
.L741:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	AnimRedHeartRising_Step
.Lfe90:
	.size	 AnimRedHeartRising,.Lfe90-AnimRedHeartRising
	.align	2, 0
	.type	 AnimRedHeartRising_Step,function
	.thumb_func
AnimRedHeartRising_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r4, #0x26]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r1, #0x4
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r5, r0, #0x10
	cmp	r5, #0x48
	bgt	.L744	@cond_branch
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	cmp	r5, #0x40
	bgt	.L744	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L744:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 AnimRedHeartRising_Step,.Lfe91-AnimRedHeartRising_Step
	.align	2, 0
	.globl	AnimTask_HeartsBackground
	.type	 AnimTask_HeartsBackground,function
	.thumb_func
AnimTask_HeartsBackground:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L749
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x3
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L747	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L747:
	ldr	r0, .L749+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r4, .L749+0x8
	strh	r1, [r4]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L749+0xc
	bl	AnimLoadCompressedBgTilemap
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L749+0x10
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L749+0x14
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L748	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
.L748:
	ldr	r0, .L749+0x18
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L749+0x1c
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L750:
	.align	2, 0
.L749:
	.word	0x3f42
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattleAnimBg_AttractTilemap
	.word	gBattleAnimBg_AttractGfx
	.word	gBattleAnimBg_AttractPal
	.word	gTasks
	.word	AnimTask_HeartsBackground_Step
.Lfe92:
	.size	 AnimTask_HeartsBackground,.Lfe92-AnimTask_HeartsBackground
	.align	2, 0
	.type	 AnimTask_HeartsBackground_Step,function
	.thumb_func
AnimTask_HeartsBackground_Step:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L766
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB7924
	b	.L752	@long jump
.LCB7924:
	lsl	r0, r0, #0x2
	ldr	r1, .L766+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L767:
	.align	2, 0
.L766:
	.word	gTasks
	.word	.L764
	.align	2, 0
	.align	2, 0
.L764:
	.word	.L753
	.word	.L756
	.word	.L758
	.word	.L761
	.word	.L762
.L753:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L752	@cond_branch
	strh	r5, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L752	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r5, [r4, #0x1e]
	b	.L752
.L756:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8d
	bne	.L752	@cond_branch
	mov	r0, #0x10
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	b	.L752
.L758:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L752	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	sub	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x1e
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	bne	.L752	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r1, [r4, #0x1e]
	b	.L752
.L761:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	InitBattleAnimBg
	ldr	r1, .L768
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	b	.L752
.L769:
	.align	2, 0
.L768:
	.word	gTasks
.L762:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L763	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L763:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L752:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe93:
	.size	 AnimTask_HeartsBackground_Step,.Lfe93-AnimTask_HeartsBackground_Step
	.align	2, 0
	.globl	AnimTask_ScaryFace
	.type	 AnimTask_ScaryFace,function
	.thumb_func
AnimTask_ScaryFace:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L777
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L771	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L771:
	ldr	r0, .L777+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r4, .L777+0x8
	strh	r1, [r4]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L772	@cond_branch
	ldr	r0, .L777+0xc
	ldr	r1, [sp, #0x4]
	bl	LZDecompressVram
	b	.L773
.L778:
	.align	2, 0
.L777:
	.word	0x3f42
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattleAnimBgTilemap_ScaryFaceContest
.L772:
	ldr	r0, .L779
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L774	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L779+0x4
	bl	AnimLoadCompressedBgTilemap
	b	.L773
.L780:
	.align	2, 0
.L779:
	.word	gBattleAnimTarget
	.word	gBattleAnimBgTilemap_ScaryFacePlayer
.L774:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L781
	bl	AnimLoadCompressedBgTilemap
.L773:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L781+0x4
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L781+0x8
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L776	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
.L776:
	ldr	r0, .L781+0xc
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L781+0x10
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L782:
	.align	2, 0
.L781:
	.word	gBattleAnimBgTilemap_ScaryFaceOpponent
	.word	gBattleAnim_ScaryFaceGfx
	.word	gBattleAnim_ScaryFacePal
	.word	gTasks
	.word	AnimTask_ScaryFace_Step
.Lfe94:
	.size	 AnimTask_ScaryFace,.Lfe94-AnimTask_ScaryFace
	.align	2, 0
	.type	 AnimTask_ScaryFace_Step,function
	.thumb_func
AnimTask_ScaryFace_Step:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L798
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB8286
	b	.L784	@long jump
.LCB8286:
	lsl	r0, r0, #0x2
	ldr	r1, .L798+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L799:
	.align	2, 0
.L798:
	.word	gTasks
	.word	.L796
	.align	2, 0
	.align	2, 0
.L796:
	.word	.L785
	.word	.L788
	.word	.L790
	.word	.L793
	.word	.L794
.L785:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L784	@cond_branch
	strh	r5, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xe
	bne	.L784	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r5, [r4, #0x1e]
	b	.L784
.L788:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L784	@cond_branch
	mov	r0, #0xe
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	b	.L784
.L790:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L784	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	sub	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x1e
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	bne	.L784	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r1, [r4, #0x1e]
	b	.L784
.L793:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, #0x1
	bl	InitBattleAnimBg
	mov	r0, #0x2
	bl	InitBattleAnimBg
	ldr	r0, .L800
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
.L794:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L795	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L795:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L784:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L801:
	.align	2, 0
.L800:
	.word	gTasks
.Lfe95:
	.size	 AnimTask_ScaryFace_Step,.Lfe95-AnimTask_ScaryFace_Step
	.align	2, 0
	.type	 AnimOrbitFast,function
	.thumb_func
AnimOrbitFast:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L803
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L803+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x3c]
	ldr	r1, .L803+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L804:
	.align	2, 0
.L803:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimOrbitFast_Step
.Lfe96:
	.size	 AnimOrbitFast,.Lfe96-AnimOrbitFast
	.align	2, 0
	.type	 AnimOrbitFast_Step,function
	.thumb_func
AnimOrbitFast_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L806	@cond_branch
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	b	.L816
.L806:
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
.L816:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	ldrh	r1, [r4, #0x34]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x9
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	mov	r3, #0x38
	ldrsh	r2, [r4, r3]
	cmp	r2, #0
	beq	.L811	@cond_branch
	cmp	r2, #0x1
	bne	.L808	@cond_branch
	ldr	r1, .L817
	add	r0, r1, #0
	ldrh	r2, [r4, #0x32]
	add	r0, r0, r2
	strh	r0, [r4, #0x32]
	ldr	r3, .L817+0x4
	add	r0, r3, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L808	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x38]
	b	.L805
.L818:
	.align	2, 0
.L817:
	.word	-0x400
	.word	-0x100
.L811:
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r0, r3, #0
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x2e
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bne	.L808	@cond_branch
	strh	r2, [r4, #0x36]
	mov	r0, #0x1
	strh	r0, [r4, #0x38]
.L808:
	ldr	r0, .L819
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L819+0x4
	cmp	r1, r0
	bne	.L805	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L805:
	pop	{r4}
	pop	{r0}
	bx	r0
.L820:
	.align	2, 0
.L819:
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe97:
	.size	 AnimOrbitFast_Step,.Lfe97-AnimOrbitFast_Step
	.align	2, 0
	.type	 AnimOrbitScatter,function
	.thumb_func
AnimOrbitScatter:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L822
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L822+0x4
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	strh	r0, [r5, #0x2e]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0x7
	bl	Cos
	strh	r0, [r5, #0x30]
	ldr	r0, .L822+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L823:
	.align	2, 0
.L822:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimOrbitScatter_Step
.Lfe98:
	.size	 AnimOrbitScatter,.Lfe98-AnimOrbitScatter
	.align	2, 0
	.type	 AnimOrbitScatter_Step,function
	.thumb_func
AnimOrbitScatter_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	ldrh	r3, [r2, #0x26]
	add	r0, r0, r3
	strh	r0, [r2, #0x26]
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	mov	r3, #0x24
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	add	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L826	@cond_branch
	mov	r0, #0x22
	ldrsh	r1, [r2, r0]
	mov	r3, #0x26
	ldrsh	r0, [r2, r3]
	add	r1, r1, r0
	cmp	r1, #0xa0
	bgt	.L826	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bge	.L825	@cond_branch
.L826:
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L825:
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 AnimOrbitScatter_Step,.Lfe99-AnimOrbitScatter_Step
	.align	2, 0
	.type	 AnimSpitUpOrb_Step,function
	.thumb_func
AnimSpitUpOrb_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	ldrh	r3, [r2, #0x26]
	add	r0, r0, r3
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x34]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	blt	.L828	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L828:
	pop	{r0}
	bx	r0
.Lfe100:
	.size	 AnimSpitUpOrb_Step,.Lfe100-AnimSpitUpOrb_Step
	.align	2, 0
	.type	 AnimSpitUpOrb,function
	.thumb_func
AnimSpitUpOrb:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L830
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L830+0x4
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	strh	r0, [r5, #0x2e]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0x7
	bl	Cos
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x32]
	ldr	r0, .L830+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L831:
	.align	2, 0
.L830:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimSpitUpOrb_Step
.Lfe101:
	.size	 AnimSpitUpOrb,.Lfe101-AnimSpitUpOrb
	.align	2, 0
	.type	 AnimEyeSparkle_Step,function
	.thumb_func
AnimEyeSparkle_Step:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L833	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L833:
	pop	{r0}
	bx	r0
.Lfe102:
	.size	 AnimEyeSparkle_Step,.Lfe102-AnimEyeSparkle_Step
	.align	2, 0
	.type	 AnimEyeSparkle,function
	.thumb_func
AnimEyeSparkle:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L835
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L836:
	.align	2, 0
.L835:
	.word	AnimEyeSparkle_Step
.Lfe103:
	.size	 AnimEyeSparkle,.Lfe103-AnimEyeSparkle
	.align	2, 0
	.type	 AnimAngel,function
	.thumb_func
AnimAngel:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L838	@cond_branch
	ldr	r0, .L842
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
.L838:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r5, r0, #0x1
	mov	r0, #0xff
	and	r5, r5, r0
	add	r0, r5, #0
	mov	r1, #0x50
	bl	Sin
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4f
	bgt	.L839	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x50
	bl	Cos
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	add	r1, r1, r0
	strh	r1, [r4, #0x26]
.L839:
	mov	r0, #0x2e
	ldrsh	r2, [r4, r0]
	cmp	r2, #0x5a
	ble	.L840	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
.L840:
	cmp	r2, #0x64
	ble	.L841	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L841:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L843:
	.align	2, 0
.L842:
	.word	gBattleAnimArgs
.Lfe104:
	.size	 AnimAngel,.Lfe104-AnimAngel
	.align	2, 0
	.type	 AnimPinkHeart_Step,function
	.thumb_func
AnimPinkHeart_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x14
	ble	.L845	@cond_branch
	add	r1, r0, #0
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L845:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1e
	ble	.L846	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L846:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe105:
	.size	 AnimPinkHeart_Step,.Lfe105-AnimPinkHeart_Step
	.align	2, 0
	.type	 AnimPinkHeart,function
	.thumb_func
AnimPinkHeart:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L848	@cond_branch
	ldr	r1, .L851
	ldrh	r0, [r1]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x32]
	add	r0, r2, #0x1
	strh	r0, [r4, #0x2e]
	b	.L849
.L852:
	.align	2, 0
.L851:
	.word	gBattleAnimArgs
.L848:
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	mov	r5, #0x0
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	add	r2, r0, #0
	strh	r2, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	cmp	r0, #0x46
	ble	.L849	@cond_branch
	ldr	r0, .L853
	str	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r1, [r4, #0x22]
	add	r0, r2, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x24]
	strh	r5, [r4, #0x26]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xb4
	bl	__umodsi3
	strh	r0, [r4, #0x34]
.L849:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L854:
	.align	2, 0
.L853:
	.word	AnimPinkHeart_Step
.Lfe106:
	.size	 AnimPinkHeart,.Lfe106-AnimPinkHeart
	.align	2, 0
	.type	 AnimDevil,function
	.thumb_func
AnimDevil:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L856	@cond_branch
	ldr	r1, .L866
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r0, .L866+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	sub	r0, r0, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r0, #0x1
	strh	r0, [r4, #0x32]
.L856:
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r0, r0, r2
	strh	r0, [r4, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x2
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L857	@cond_branch
	add	r0, r0, #0xff
.L857:
	asr	r0, r0, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r1, r0
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L858	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
.L858:
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L859	@cond_branch
	add	r0, r0, #0x3
.L859:
	asr	r0, r0, #0x2
	mov	r1, #0x1e
	sub	r1, r1, r0
	add	r0, r2, #0
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L860	@cond_branch
	add	r0, r0, #0x7
.L860:
	asr	r0, r0, #0x3
	mov	r1, #0xa
	sub	r1, r1, r0
	add	r0, r2, #0
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x80
	ble	.L861	@cond_branch
	ldrh	r1, [r4, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L861	@cond_branch
	ldr	r0, .L866+0x8
	strh	r0, [r4, #0x32]
.L861:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L862	@cond_branch
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bge	.L862	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x32]
.L862:
	ldrh	r0, [r4, #0x34]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x34]
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x46
	bls	.L863	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L864
.L867:
	.align	2, 0
.L866:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	0xffff
.L863:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L864:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5a
	ble	.L865	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L865:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe107:
	.size	 AnimDevil,.Lfe107-AnimDevil
	.align	2, 0
	.type	 AnimFurySwipes,function
	.thumb_func
AnimFurySwipes:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L869	@cond_branch
	ldr	r1, .L872
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrb	r1, [r1, #0x4]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L870
.L873:
	.align	2, 0
.L872:
	.word	gBattleAnimArgs
.L869:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L870	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L870:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe108:
	.size	 AnimFurySwipes,.Lfe108-AnimFurySwipes
	.align	2, 0
	.type	 AnimMovementWaves,function
	.thumb_func
AnimMovementWaves:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r1, .L883
	mov	r2, #0x4
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L875	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimSprite
	b	.L876
.L884:
	.align	2, 0
.L883:
	.word	gBattleAnimArgs
.L875:
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L877	@cond_branch
	ldr	r4, .L885
	b	.L881
.L886:
	.align	2, 0
.L885:
	.word	gBattleAnimAttacker
.L877:
	ldr	r4, .L887
.L881:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r0, .L887+0x4
	mov	r2, #0x2
	ldrsh	r1, [r0, r2]
	add	r2, r0, #0
	cmp	r1, #0
	bne	.L879	@cond_branch
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x20
	b	.L882
.L888:
	.align	2, 0
.L887:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L879:
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x20
.L882:
	strh	r0, [r5, #0x20]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r5, #0x2e]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r5, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L889
	str	r0, [r5, #0x1c]
.L876:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L890:
	.align	2, 0
.L889:
	.word	AnimMovementWaves_Step
.Lfe109:
	.size	 AnimMovementWaves,.Lfe109-AnimMovementWaves
	.align	2, 0
	.type	 AnimMovementWaves_Step,function
	.thumb_func
AnimMovementWaves_Step:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L892	@cond_branch
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L893	@cond_branch
	ldrh	r1, [r2, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r2, #0
	bl	StartSpriteAnim
	b	.L892
.L893:
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L892:
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 AnimMovementWaves_Step,.Lfe110-AnimMovementWaves_Step
	.align	2, 0
	.globl	AnimTask_UproarDistortion
	.type	 AnimTask_UproarDistortion,function
	.thumb_func
AnimTask_UproarDistortion:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L896
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L896+0x4
	add	r4, r4, r0
	ldr	r2, .L896+0x8
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L896+0xc
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L897:
	.align	2, 0
.L896:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	sUproarAffineAnimCmds
	.word	AnimTask_UproarDistortion_Step
.Lfe111:
	.size	 AnimTask_UproarDistortion,.Lfe111-AnimTask_UproarDistortion
	.align	2, 0
	.type	 AnimTask_UproarDistortion_Step,function
	.thumb_func
AnimTask_UproarDistortion_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L900
	add	r0, r0, r1
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L899	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L899:
	pop	{r4}
	pop	{r0}
	bx	r0
.L901:
	.align	2, 0
.L900:
	.word	gTasks
.Lfe112:
	.size	 AnimTask_UproarDistortion_Step,.Lfe112-AnimTask_UproarDistortion_Step
	.align	2, 0
	.type	 AnimJaggedMusicNote,function
	.thumb_func
AnimJaggedMusicNote:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r0, .L909
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L903	@cond_branch
	ldr	r0, .L909+0x4
	b	.L908
.L910:
	.align	2, 0
.L909:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L903:
	ldr	r0, .L911
.L908:
	ldrb	r6, [r0]
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L905	@cond_branch
	ldr	r1, .L911+0x4
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L905:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r7, .L911+0x4
	lsr	r0, r0, #0x18
	ldrh	r3, [r7, #0x2]
	add	r0, r0, r3
	mov	r4, #0x0
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r7, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	strh	r4, [r5, #0x2e]
	ldrh	r1, [r5, #0x20]
	lsl	r1, r1, #0x3
	strh	r1, [r5, #0x30]
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x32]
	mov	r2, #0x2
	ldrsh	r0, [r7, r2]
	lsl	r0, r0, #0x3
	cmp	r0, #0
	bge	.L906	@cond_branch
	add	r0, r0, #0x7
.L906:
	asr	r0, r0, #0x3
	strh	r0, [r5, #0x34]
	mov	r3, #0x4
	ldrsh	r0, [r7, r3]
	lsl	r0, r0, #0x3
	cmp	r0, #0
	bge	.L907	@cond_branch
	add	r0, r0, #0x7
.L907:
	asr	r0, r0, #0x3
	strh	r0, [r5, #0x36]
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	mov	r3, #0x6
	ldrsh	r0, [r7, r3]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r3, .L911+0x8
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L911+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	ldr	r0, .L911+0x10
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L912:
	.align	2, 0
.L911:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0x3ff
	.word	-0x400
	.word	AnimJaggedMusicNote_Step
.Lfe113:
	.size	 AnimJaggedMusicNote,.Lfe113-AnimJaggedMusicNote
	.align	2, 0
	.type	 AnimJaggedMusicNote_Step,function
	.thumb_func
AnimJaggedMusicNote_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x30]
	add	r0, r0, r1
	strh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x36]
	ldrh	r3, [r2, #0x32]
	add	r1, r1, r3
	strh	r1, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x13
	strh	r1, [r2, #0x22]
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L914	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L914:
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 AnimJaggedMusicNote_Step,.Lfe114-AnimJaggedMusicNote_Step
	.align	2, 0
	.type	 AnimPerishSongMusicNote2,function
	.thumb_func
AnimPerishSongMusicNote2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L916	@cond_branch
	ldr	r0, .L919
	ldrh	r1, [r0]
	mov	r0, #0x78
	sub	r0, r0, r1
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L916:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L917	@cond_branch
	ldrb	r0, [r4, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	mov	r1, #0x0
	bl	SetGreyscaleOrOriginalPalette
.L917:
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x50
	cmp	r1, r0
	bne	.L918	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L918:
	pop	{r4}
	pop	{r0}
	bx	r0
.L920:
	.align	2, 0
.L919:
	.word	gBattleAnimArgs
.Lfe115:
	.size	 AnimPerishSongMusicNote2,.Lfe115-AnimPerishSongMusicNote2
	.align	2, 0
	.type	 AnimPerishSongMusicNote,function
	.thumb_func
AnimPerishSongMusicNote:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L922	@cond_branch
	mov	r5, #0x78
	strh	r5, [r6, #0x20]
	ldr	r4, .L924
	mov	r2, #0x0
	ldrsh	r0, [r4, r2]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	sub	r0, r0, #0xf
	strh	r0, [r6, #0x22]
	ldrb	r1, [r4, #0x2]
	add	r0, r6, #0
	bl	StartSpriteAnim
	strh	r5, [r6, #0x38]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r6, #0x34]
.L922:
	ldrh	r0, [r6, #0x2e]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r6, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r6, #0x30]
	mov	r2, #0x2e
	ldrsh	r0, [r6, r2]
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	ldrh	r0, [r6, #0x34]
	add	r4, r4, r0
	mov	r2, #0xff
	ldrh	r0, [r6, #0x3a]
	add	r0, r0, #0xa
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r6, #0x3a]
	and	r4, r4, r2
	add	r0, r4, #0
	mov	r1, #0x64
	bl	Cos
	strh	r0, [r6, #0x24]
	add	r0, r4, #0
	mov	r1, #0xa
	bl	Sin
	add	r4, r0, #0
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	mov	r1, #0x4
	bl	Cos
	ldrh	r2, [r6, #0x30]
	add	r4, r4, r2
	add	r0, r0, r4
	strh	r0, [r6, #0x26]
	mov	r0, #0x2e
	ldrsh	r1, [r6, r0]
	mov	r2, #0x38
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	ble	.L923	@cond_branch
	ldr	r0, .L924+0x4
	str	r0, [r6, #0x1c]
	strh	r5, [r6, #0x2e]
	add	r0, r6, #0
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	mov	r0, #0x5
	strh	r0, [r6, #0x32]
	strh	r5, [r6, #0x36]
	strh	r5, [r6, #0x34]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L923:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L925:
	.align	2, 0
.L924:
	.word	gBattleAnimArgs
	.word	AnimPerishSongMusicNote_Step1
.Lfe116:
	.size	 AnimPerishSongMusicNote,.Lfe116-AnimPerishSongMusicNote
	.align	2, 0
	.type	 AnimPerishSongMusicNote_Step1,function
	.thumb_func
AnimPerishSongMusicNote_Step1:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	ble	.L927	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, .L928
	str	r0, [r1, #0x1c]
.L927:
	pop	{r0}
	bx	r0
.L929:
	.align	2, 0
.L928:
	.word	AnimPerishSongMusicNote_Step2
.Lfe117:
	.size	 AnimPerishSongMusicNote_Step1,.Lfe117-AnimPerishSongMusicNote_Step1
	.align	2, 0
	.type	 AnimPerishSongMusicNote_Step2,function
	.thumb_func
AnimPerishSongMusicNote_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x32]
	ldrh	r2, [r4, #0x34]
	add	r0, r1, r2
	strh	r0, [r4, #0x34]
	strh	r0, [r4, #0x26]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x30
	ble	.L931	@cond_branch
	lsl	r0, r1, #0x10
	cmp	r0, #0
	ble	.L931	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r1, r0, #0x5
	strh	r1, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
.L931:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3
	ble	.L932	@cond_branch
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L932:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bne	.L933	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L933:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe118:
	.size	 AnimPerishSongMusicNote_Step2,.Lfe118-AnimPerishSongMusicNote_Step2
	.align	2, 0
	.type	 AnimGuardRing,function
	.thumb_func
AnimGuardRing:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L937
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L935	@cond_branch
	ldr	r4, .L937+0x4
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L935	@cond_branch
	ldrb	r0, [r4]
	add	r2, r5, #0
	add	r2, r2, #0x20
	add	r3, r5, #0
	add	r3, r3, #0x22
	mov	r1, #0x0
	bl	SetAverageBattlerPositions
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x22]
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L936
.L938:
	.align	2, 0
.L937:
	.word	gBattleTypeFlags
	.word	gBattleAnimAttacker
.L935:
	ldr	r4, .L939
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x28
	strh	r0, [r5, #0x22]
.L936:
	mov	r0, #0xd
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	sub	r0, r0, #0x48
	strh	r0, [r5, #0x36]
	ldr	r0, .L939+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L939+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L940:
	.align	2, 0
.L939:
	.word	gBattleAnimAttacker
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe119:
	.size	 AnimGuardRing,.Lfe119-AnimGuardRing
	.align	2, 0
	.globl	AnimTask_IsFuryCutterHitRight
	.type	 AnimTask_IsFuryCutterHitRight,function
	.thumb_func
AnimTask_IsFuryCutterHitRight:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L942
	ldr	r1, .L942+0x4
	ldr	r1, [r1]
	ldrb	r2, [r1, #0x10]
	mov	r1, #0x1
	and	r1, r1, r2
	strh	r1, [r3, #0xe]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L943:
	.align	2, 0
.L942:
	.word	gBattleAnimArgs
	.word	gAnimDisableStructPtr
.Lfe120:
	.size	 AnimTask_IsFuryCutterHitRight,.Lfe120-AnimTask_IsFuryCutterHitRight
	.align	2, 0
	.globl	AnimTask_GetFuryCutterHitCount
	.type	 AnimTask_GetFuryCutterHitCount,function
	.thumb_func
AnimTask_GetFuryCutterHitCount:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L945
	ldr	r1, .L945+0x4
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x10]
	strh	r1, [r2, #0xe]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L946:
	.align	2, 0
.L945:
	.word	gBattleAnimArgs
	.word	gAnimDisableStructPtr
.Lfe121:
	.size	 AnimTask_GetFuryCutterHitCount,.Lfe121-AnimTask_GetFuryCutterHitCount
.text
	.align	2, 0 @ Don't pad with nop

