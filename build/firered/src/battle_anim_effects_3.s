@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sScratchAnimCmds,object
sScratchAnimCmds:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sScratchAnimCmds,24
	.align	2, 0
	.type	 sScratchAnimTable,object
sScratchAnimTable:
	.word	sScratchAnimCmds
	.size	 sScratchAnimTable,4
	.globl	gScratchSpriteTemplate
	.align	2, 0
	.type	 gScratchSpriteTemplate,object
	.size	 gScratchSpriteTemplate,24
gScratchSpriteTemplate:
	.short	0x2799
	.short	0x2799
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	sScratchAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	gBlackSmokeSpriteTemplate
	.align	2, 0
	.type	 gBlackSmokeSpriteTemplate,object
	.size	 gBlackSmokeSpriteTemplate,24
gBlackSmokeSpriteTemplate:
	.short	0x2720
	.short	0x2720
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBlackSmoke
	.globl	gBlackBallSpriteTemplate
	.align	2, 0
	.type	 gBlackBallSpriteTemplate,object
	.size	 gBlackBallSpriteTemplate,24
gBlackBallSpriteTemplate:
	.short	0x2721
	.short	0x2721
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimThrowProjectile
	.align	2, 0
	.type	 sOpeningEyeAnimCmds,object
sOpeningEyeAnimCmds:
	.short	0x0
	.byte	0x28
	.space	1
	.short	0x10
	.byte	0x8
	.space	1
	.short	0x20
	.byte	0x28
	.space	1
	.short	-0x1
	.space	2
	.size	 sOpeningEyeAnimCmds,16
	.align	2, 0
	.type	 sOpeningEyeAnimTable,object
sOpeningEyeAnimTable:
	.word	sOpeningEyeAnimCmds
	.size	 sOpeningEyeAnimTable,4
	.globl	gOpeningEyeSpriteTemplate
	.align	2, 0
	.type	 gOpeningEyeSpriteTemplate,object
	.size	 gOpeningEyeSpriteTemplate,24
gOpeningEyeSpriteTemplate:
	.short	0x27ce
	.short	0x27ce
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sOpeningEyeAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	gWhiteHaloSpriteTemplate
	.align	2, 0
	.type	 gWhiteHaloSpriteTemplate,object
	.size	 gWhiteHaloSpriteTemplate,24
gWhiteHaloSpriteTemplate:
	.short	0x27cf
	.short	0x27cf
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWhiteHalo
	.globl	gTealAlertSpriteTemplate
	.align	2, 0
	.type	 gTealAlertSpriteTemplate,object
	.size	 gTealAlertSpriteTemplate,24
gTealAlertSpriteTemplate:
	.short	0x27cd
	.short	0x27cd
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimTealAlert
	.align	2, 0
	.type	 sMeanLookEyeAffineAnimCmds1,object
sMeanLookEyeAffineAnimCmds1:
	.short	0x180
	.short	0x180
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x20
	.short	0x18
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x18
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sMeanLookEyeAffineAnimCmds1,32
	.align	2, 0
	.type	 sMeanLookEyeAffineAnimCmds2,object
sMeanLookEyeAffineAnimCmds2:
	.short	0x30
	.short	0x30
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 sMeanLookEyeAffineAnimCmds2,24
	.align	2, 0
	.type	 sMeanLookEyeAffineAnimTable,object
sMeanLookEyeAffineAnimTable:
	.word	sMeanLookEyeAffineAnimCmds1
	.word	sMeanLookEyeAffineAnimCmds2
	.size	 sMeanLookEyeAffineAnimTable,8
	.globl	gMeanLookEyeSpriteTemplate
	.align	2, 0
	.type	 gMeanLookEyeSpriteTemplate,object
	.size	 gMeanLookEyeSpriteTemplate,24
gMeanLookEyeSpriteTemplate:
	.short	0x27cb
	.short	0x27cb
	.word	gOamData_AffineDouble_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sMeanLookEyeAffineAnimTable
	.word	AnimMeanLookEye
	.globl	gSpikesSpriteTemplate
	.align	2, 0
	.type	 gSpikesSpriteTemplate,object
	.size	 gSpikesSpriteTemplate,24
gSpikesSpriteTemplate:
	.short	0x27a8
	.short	0x27a8
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpikes
	.align	2, 0
	.type	 sLeerAnimCmds,object
sLeerAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sLeerAnimCmds,24
	.align	2, 0
	.type	 sLeerAnimTable,object
sLeerAnimTable:
	.word	sLeerAnimCmds
	.size	 sLeerAnimTable,4
	.globl	gLeerSpriteTemplate
	.align	2, 0
	.type	 gLeerSpriteTemplate,object
	.size	 gLeerSpriteTemplate,24
gLeerSpriteTemplate:
	.short	0x272b
	.short	0x272b
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sLeerAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLeer
	.align	2, 0
	.type	 sLetterZAnimCmds,object
sLetterZAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sLetterZAnimCmds,8
	.align	2, 0
	.type	 sLetterZAnimTable,object
sLetterZAnimTable:
	.word	sLetterZAnimCmds
	.size	 sLetterZAnimTable,4
	.align	2, 0
	.type	 sLetterZAffineAnimCmds,object
sLetterZAffineAnimCmds:
	.short	-0x7
	.short	-0x7
	.byte	0xfd
	.byte	0x10
	.space	2
	.short	0x7
	.short	0x7
	.byte	0x3
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sLetterZAffineAnimCmds,24
	.align	2, 0
	.type	 sLetterZAffineAnimTable,object
sLetterZAffineAnimTable:
	.word	sLetterZAffineAnimCmds
	.size	 sLetterZAffineAnimTable,4
	.globl	gLetterZSpriteTemplate
	.align	2, 0
	.type	 gLetterZSpriteTemplate,object
	.size	 gLetterZSpriteTemplate,24
gLetterZSpriteTemplate:
	.short	0x27f4
	.short	0x27f4
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sLetterZAnimTable
	.word	0x0
	.word	sLetterZAffineAnimTable
	.word	AnimLetterZ
	.align	2, 0
	.type	 sFangAnimCmds,object
sFangAnimCmds:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x10
	.byte	0x10
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sFangAnimCmds,20
	.align	2, 0
	.type	 sFangAnimTable,object
sFangAnimTable:
	.word	sFangAnimCmds
	.size	 sFangAnimTable,4
	.align	2, 0
	.type	 sFangAffineAnimCmds,object
sFangAffineAnimCmds:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x20
	.short	-0x20
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sFangAffineAnimCmds,24
	.align	2, 0
	.type	 sFangAffineAnimTable,object
sFangAffineAnimTable:
	.word	sFangAffineAnimCmds
	.size	 sFangAffineAnimTable,4
	.globl	gFangSpriteTemplate
	.align	2, 0
	.type	 gFangSpriteTemplate,object
	.size	 gFangSpriteTemplate,24
gFangSpriteTemplate:
	.short	0x27d0
	.short	0x27d0
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	sFangAnimTable
	.word	0x0
	.word	sFangAffineAnimTable
	.word	AnimFang
	.align	2, 0
	.type	 sSpotlightAffineAnimCmds1,object
sSpotlightAffineAnimCmds1:
	.short	0x0
	.short	0x180
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x10
	.short	0x0
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSpotlightAffineAnimCmds1,24
	.align	2, 0
	.type	 sSpotlightAffineAnimCmds2,object
sSpotlightAffineAnimCmds2:
	.short	0x140
	.short	0x180
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x10
	.short	0x0
	.byte	0x0
	.byte	0x13
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSpotlightAffineAnimCmds2,24
	.align	2, 0
	.type	 sSpotlightAffineAnimTable,object
sSpotlightAffineAnimTable:
	.word	sSpotlightAffineAnimCmds1
	.word	sSpotlightAffineAnimCmds2
	.size	 sSpotlightAffineAnimTable,8
	.globl	gSpotlightSpriteTemplate
	.align	2, 0
	.type	 gSpotlightSpriteTemplate,object
	.size	 gSpotlightSpriteTemplate,24
gSpotlightSpriteTemplate:
	.short	0x27f3
	.short	0x27f3
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSpotlightAffineAnimTable
	.word	AnimSpotlight
	.globl	gClappingHandSpriteTemplate
	.align	2, 0
	.type	 gClappingHandSpriteTemplate,object
	.size	 gClappingHandSpriteTemplate,24
gClappingHandSpriteTemplate:
	.short	0x2807
	.short	0x2807
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimClappingHand
	.globl	gClappingHand2SpriteTemplate
	.align	2, 0
	.type	 gClappingHand2SpriteTemplate,object
	.size	 gClappingHand2SpriteTemplate,24
gClappingHand2SpriteTemplate:
	.short	0x2807
	.short	0x2807
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimClappingHand2
	.align	2, 0
	.type	 sRapidSpinAnimCmds,object
sRapidSpinAnimCmds:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x8
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sRapidSpinAnimCmds,16
	.align	2, 0
	.type	 sRapidSpinAnimTable,object
sRapidSpinAnimTable:
	.word	sRapidSpinAnimCmds
	.size	 sRapidSpinAnimTable,4
	.globl	gRapidSpinSpriteTemplate
	.align	2, 0
	.type	 gRapidSpinSpriteTemplate,object
	.size	 gRapidSpinSpriteTemplate,24
gRapidSpinSpriteTemplate:
	.short	0x27f5
	.short	0x27f5
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	sRapidSpinAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRapidSpin
	.align	2, 0
	.type	 sAffineAnims_Torment,object
sAffineAnims_Torment:
	.short	-0xc
	.short	0x8
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x14
	.short	-0x14
	.byte	0x0
	.byte	0x4
	.space	2
	.short	-0x8
	.short	0xc
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnims_Torment,32
	.align	2, 0
	.type	 sTriAttackTriangleAnimCmds,object
sTriAttackTriangleAnimCmds:
	.short	0x0
	.byte	0x8
	.space	1
	.short	-0x1
	.space	2
	.size	 sTriAttackTriangleAnimCmds,8
	.align	2, 0
	.type	 sTriAttackTriangleAnimTable,object
sTriAttackTriangleAnimTable:
	.word	sTriAttackTriangleAnimCmds
	.size	 sTriAttackTriangleAnimTable,4
	.align	2, 0
	.type	 sTriAttackTriangleAffineAnimCmds,object
sTriAttackTriangleAffineAnimCmds:
	.short	0x0
	.short	0x0
	.byte	0x5
	.byte	0x28
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xa
	.byte	0xa
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf
	.byte	0xa
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x14
	.byte	0x28
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sTriAttackTriangleAffineAnimCmds,40
	.align	2, 0
	.type	 sTriAttackTriangleAffineAnimTable,object
sTriAttackTriangleAffineAnimTable:
	.word	sTriAttackTriangleAffineAnimCmds
	.size	 sTriAttackTriangleAffineAnimTable,4
	.globl	gTriAttackTriangleSpriteTemplate
	.align	2, 0
	.type	 gTriAttackTriangleSpriteTemplate,object
	.size	 gTriAttackTriangleSpriteTemplate,24
gTriAttackTriangleSpriteTemplate:
	.short	0x27f6
	.short	0x27f6
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	sTriAttackTriangleAnimTable
	.word	0x0
	.word	sTriAttackTriangleAffineAnimTable
	.word	AnimTriAttackTriangle
	.align	2, 0
	.type	 sEclipsingOrbAnimCmds,object
sEclipsingOrbAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x43
	.space	1
	.short	0x10
	.byte	0x43
	.space	1
	.short	0x0
	.byte	0x43
	.space	1
	.short	-0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sEclipsingOrbAnimCmds,36
	.align	2, 0
	.type	 sEclipsingOrbAnimTable,object
sEclipsingOrbAnimTable:
	.word	sEclipsingOrbAnimCmds
	.size	 sEclipsingOrbAnimTable,4
	.globl	gEclipsingOrbSpriteTemplate
	.align	2, 0
	.type	 gEclipsingOrbSpriteTemplate,object
	.size	 gEclipsingOrbSpriteTemplate,24
gEclipsingOrbSpriteTemplate:
	.short	0x27fa
	.short	0x27fa
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sEclipsingOrbAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.align	2, 0
	.type	 DefenseCurlDeformMonAffineAnimCmds,object
DefenseCurlDeformMonAffineAnimCmds:
	.short	-0xc
	.short	0x14
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0xc
	.short	-0x14
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	0x7fff
	.space	6
	.size	 DefenseCurlDeformMonAffineAnimCmds,32
	.globl	gBatonPassPokeballSpriteTemplate
	.align	2, 0
	.type	 gBatonPassPokeballSpriteTemplate,object
	.size	 gBatonPassPokeballSpriteTemplate,24
gBatonPassPokeballSpriteTemplate:
	.short	0x27f2
	.short	0x27f2
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBatonPassPokeball
	.globl	gWishStarSpriteTemplate
	.align	2, 0
	.type	 gWishStarSpriteTemplate,object
	.size	 gWishStarSpriteTemplate,24
gWishStarSpriteTemplate:
	.short	0x27f9
	.short	0x27f9
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWishStar
	.globl	gMiniTwinklingStarSpriteTemplate
	.align	2, 0
	.type	 gMiniTwinklingStarSpriteTemplate,object
	.size	 gMiniTwinklingStarSpriteTemplate,24
gMiniTwinklingStarSpriteTemplate:
	.short	0x27f9
	.short	0x27f9
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMiniTwinklingStar
	.align	2, 0
	.type	 sStockpileDeformMonAffineAnimCmds,object
sStockpileDeformMonAffineAnimCmds:
	.short	0x8
	.short	-0x8
	.byte	0x0
	.byte	0xc
	.space	2
	.short	-0x10
	.short	0x10
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x8
	.short	-0x8
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x7ffd
	.short	0x1
	.space	4
	.short	0x7fff
	.space	6
	.size	 sStockpileDeformMonAffineAnimCmds,40
	.align	2, 0
	.type	 sSpitUpDeformMonAffineAnimCmds,object
sSpitUpDeformMonAffineAnimCmds:
	.short	0x0
	.short	0x6
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x0
	.short	-0x12
	.byte	0x0
	.byte	0x6
	.space	2
	.short	-0x12
	.short	-0x12
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0xd
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSpitUpDeformMonAffineAnimCmds,56
	.globl	gSwallowBlueOrbSpriteTemplate
	.align	2, 0
	.type	 gSwallowBlueOrbSpriteTemplate,object
	.size	 gSwallowBlueOrbSpriteTemplate,24
gSwallowBlueOrbSpriteTemplate:
	.short	0x27fc
	.short	0x27fc
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSwallowBlueOrb
	.align	2, 0
	.type	 sSwallowDeformMonAffineAnimCmds,object
sSwallowDeformMonAffineAnimCmds:
	.short	0x0
	.short	0x6
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x7
	.short	-0x1e
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x14
	.space	2
	.short	-0x2
	.short	0x3
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSwallowDeformMonAffineAnimCmds,48
	.type	 sMorningSunLightBeamCoordsTable,object
sMorningSunLightBeamCoordsTable:
	.byte	-0x18
	.byte	0x18
	.byte	-0x4
	.byte	0x0
	.size	 sMorningSunLightBeamCoordsTable,4
	.align	2, 0
	.type	 sGreenStarAnimCmds1,object
sGreenStarAnimCmds1:
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x4
	.byte	0x6
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sGreenStarAnimCmds1,12
	.align	2, 0
	.type	 sGreenStarAnimCmds2,object
sGreenStarAnimCmds2:
	.short	0x8
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 sGreenStarAnimCmds2,8
	.align	2, 0
	.type	 sGreenStarAnimCmds3,object
sGreenStarAnimCmds3:
	.short	0xc
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 sGreenStarAnimCmds3,8
	.align	2, 0
	.type	 sGreenStarAnimTable,object
sGreenStarAnimTable:
	.word	sGreenStarAnimCmds1
	.word	sGreenStarAnimCmds2
	.word	sGreenStarAnimCmds3
	.size	 sGreenStarAnimTable,12
	.globl	gGreenStarSpriteTemplate
	.align	2, 0
	.type	 gGreenStarSpriteTemplate,object
	.size	 gGreenStarSpriteTemplate,24
gGreenStarSpriteTemplate:
	.short	0x2801
	.short	0x2801
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sGreenStarAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGreenStar
	.type	 sDoomDesireLightBeamCoordTable,object
sDoomDesireLightBeamCoordTable:
	.byte	0x78
	.byte	0x50
	.byte	0x28
	.byte	0x0
	.size	 sDoomDesireLightBeamCoordTable,4
	.type	 sDoomDesireLightBeamDelayTable,object
sDoomDesireLightBeamDelayTable:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x32
	.size	 sDoomDesireLightBeamDelayTable,5
	.align	2, 0
	.type	 sStrongFrustrationAffineAnimCmds,object
sStrongFrustrationAffineAnimCmds:
	.short	0x0
	.short	-0xf
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0x0
	.short	0xf
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	0x7fff
	.space	6
	.size	 sStrongFrustrationAffineAnimCmds,32
	.globl	gWeakFrustrationAngerMarkSpriteTemplate
	.align	2, 0
	.type	 gWeakFrustrationAngerMarkSpriteTemplate,object
	.size	 gWeakFrustrationAngerMarkSpriteTemplate,24
gWeakFrustrationAngerMarkSpriteTemplate:
	.short	0x2767
	.short	0x2767
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWeakFrustrationAngerMark
	.align	2, 0
	.type	 sSweetScentPetalAnimCmds1,object
sSweetScentPetalAnimCmds1:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x1
	.byte	0x8
	.space	1
	.short	0x2
	.byte	0x8
	.space	1
	.short	0x3
	.byte	0x8
	.space	1
	.short	0x3
	.byte	0x88
	.space	1
	.short	0x2
	.byte	0x88
	.space	1
	.short	0x0
	.byte	0x88
	.space	1
	.short	0x1
	.byte	0x88
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSweetScentPetalAnimCmds1,36
	.align	2, 0
	.type	 sSweetScentPetalAnimCmds2,object
sSweetScentPetalAnimCmds2:
	.short	0x0
	.byte	0x48
	.space	1
	.short	0x1
	.byte	0x48
	.space	1
	.short	0x2
	.byte	0x48
	.space	1
	.short	0x3
	.byte	0x48
	.space	1
	.short	0x3
	.byte	0xc8
	.space	1
	.short	0x2
	.byte	0xc8
	.space	1
	.short	0x0
	.byte	0xc8
	.space	1
	.short	0x1
	.byte	0xc8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSweetScentPetalAnimCmds2,36
	.align	2, 0
	.type	 sSweetScentPetalAnimCmds3,object
sSweetScentPetalAnimCmds3:
	.short	0x0
	.byte	0x8
	.space	1
	.short	-0x1
	.space	2
	.size	 sSweetScentPetalAnimCmds3,8
	.align	2, 0
	.type	 sSweetScentPetalAnimCmdTable,object
sSweetScentPetalAnimCmdTable:
	.word	sSweetScentPetalAnimCmds1
	.word	sSweetScentPetalAnimCmds2
	.word	sSweetScentPetalAnimCmds3
	.size	 sSweetScentPetalAnimCmdTable,12
	.globl	gSweetScentPetalSpriteTemplate
	.align	2, 0
	.type	 gSweetScentPetalSpriteTemplate,object
	.size	 gSweetScentPetalSpriteTemplate,24
gSweetScentPetalSpriteTemplate:
	.short	0x27fe
	.short	0x27fe
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sSweetScentPetalAnimCmdTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSweetScentPetal
	.align	1, 0
	.type	 sUnusedPalette,object
sUnusedPalette:
	.short	0x180c
	.short	0x1610
	.short	0x1313
	.short	0x1015
	.short	0xc17
	.short	0x716
	.short	0x413
	.short	0x110
	.short	0xb
	.short	0x106
	.short	0x404
	.short	0x701
	.short	0xc00
	.short	0x1102
	.short	0x1304
	.short	0x1608
	.size	 sUnusedPalette,32
	.align	2, 0
	.type	 sPainSplitAnimCmds,object
sPainSplitAnimCmds:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x9
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sPainSplitAnimCmds,16
	.align	2, 0
	.type	 sPainSplitAnimCmdTable,object
sPainSplitAnimCmdTable:
	.word	sPainSplitAnimCmds
	.size	 sPainSplitAnimCmdTable,4
	.globl	gPainSplitProjectileSpriteTemplate
	.align	2, 0
	.type	 gPainSplitProjectileSpriteTemplate,object
	.size	 gPainSplitProjectileSpriteTemplate,24
gPainSplitProjectileSpriteTemplate:
	.short	0x27ff
	.short	0x27ff
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sPainSplitAnimCmdTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPainSplitProjectile
	.globl	gFlatterConfettiSpriteTemplate
	.align	2, 0
	.type	 gFlatterConfettiSpriteTemplate,object
	.size	 gFlatterConfettiSpriteTemplate,24
gFlatterConfettiSpriteTemplate:
	.short	0x2800
	.short	0x2800
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFlatterConfetti
	.globl	gFlatterSpotlightSpriteTemplate
	.align	2, 0
	.type	 gFlatterSpotlightSpriteTemplate,object
	.size	 gFlatterSpotlightSpriteTemplate,24
gFlatterSpotlightSpriteTemplate:
	.short	0x27f3
	.short	0x27f3
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSpotlightAffineAnimTable
	.word	AnimFlatterSpotlight
	.globl	gReversalOrbSpriteTemplate
	.align	2, 0
	.type	 gReversalOrbSpriteTemplate,object
	.size	 gReversalOrbSpriteTemplate,24
gReversalOrbSpriteTemplate:
	.short	0x27fc
	.short	0x27fc
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimReversalOrb
	.align	2, 0
	.type	 sDeepInhaleAffineAnimCmds,object
sDeepInhaleAffineAnimCmds:
	.short	0x10
	.short	0x0
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x0
	.short	-0x3
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x4
	.short	0x0
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x18
	.space	2
	.short	-0x5
	.short	0x3
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7fff
	.space	6
	.size	 sDeepInhaleAffineAnimCmds,48
	.align	2, 0
	.type	 sYawnCloudAffineAnimCmds1,object
sYawnCloudAffineAnimCmds1:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sYawnCloudAffineAnimCmds1,32
	.align	2, 0
	.type	 sYawnCloudAffineAnimCmds2,object
sYawnCloudAffineAnimCmds2:
	.short	0xc0
	.short	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sYawnCloudAffineAnimCmds2,32
	.align	2, 0
	.type	 sYawnCloudAffineAnimCmds3,object
sYawnCloudAffineAnimCmds3:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sYawnCloudAffineAnimCmds3,32
	.align	2, 0
	.type	 sYawnCloudAffineAnimTable,object
sYawnCloudAffineAnimTable:
	.word	sYawnCloudAffineAnimCmds1
	.word	sYawnCloudAffineAnimCmds2
	.word	sYawnCloudAffineAnimCmds3
	.size	 sYawnCloudAffineAnimTable,12
	.globl	gYawnCloudSpriteTemplate
	.align	2, 0
	.type	 gYawnCloudSpriteTemplate,object
	.size	 gYawnCloudSpriteTemplate,24
gYawnCloudSpriteTemplate:
	.short	0x2802
	.short	0x2802
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sYawnCloudAffineAnimTable
	.word	AnimYawnCloud
	.align	2, 0
	.type	 sSmokeBallEscapeCloudAffineAnimCmds1,object
sSmokeBallEscapeCloudAffineAnimCmds1:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x4
	.short	-0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x4
	.short	0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSmokeBallEscapeCloudAffineAnimCmds1,32
	.align	2, 0
	.type	 sSmokeBallEscapeCloudAffineAnimCmds2,object
sSmokeBallEscapeCloudAffineAnimCmds2:
	.short	0xc0
	.short	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	-0x4
	.short	-0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSmokeBallEscapeCloudAffineAnimCmds2,32
	.align	2, 0
	.type	 sSmokeBallEscapeCloudAffineAnimCmds3,object
sSmokeBallEscapeCloudAffineAnimCmds3:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	-0x4
	.short	-0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSmokeBallEscapeCloudAffineAnimCmds3,32
	.align	2, 0
	.type	 sSmokeBallEscapeCloudAffineAnimCmds4,object
sSmokeBallEscapeCloudAffineAnimCmds4:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0xa
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	-0x8
	.short	-0xa
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSmokeBallEscapeCloudAffineAnimCmds4,32
	.align	2, 0
	.type	 sSmokeBallEscapeCloudAffineAnimTable,object
sSmokeBallEscapeCloudAffineAnimTable:
	.word	sSmokeBallEscapeCloudAffineAnimCmds1
	.word	sSmokeBallEscapeCloudAffineAnimCmds2
	.word	sSmokeBallEscapeCloudAffineAnimCmds3
	.word	sSmokeBallEscapeCloudAffineAnimCmds4
	.size	 sSmokeBallEscapeCloudAffineAnimTable,16
	.globl	gSmokeBallEscapeCloudSpriteTemplate
	.align	2, 0
	.type	 gSmokeBallEscapeCloudSpriteTemplate,object
	.size	 gSmokeBallEscapeCloudSpriteTemplate,24
gSmokeBallEscapeCloudSpriteTemplate:
	.short	0x2802
	.short	0x2802
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSmokeBallEscapeCloudAffineAnimTable
	.word	AnimSmokeBallEscapeCloud
	.align	2, 0
	.type	 sFacadeSquishAffineAnimCmds,object
sFacadeSquishAffineAnimCmds:
	.short	-0x10
	.short	0x10
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x10
	.short	-0x10
	.byte	0x0
	.byte	0xc
	.space	2
	.short	-0x10
	.short	0x10
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 sFacadeSquishAffineAnimCmds,32
	.globl	gFacadeSweatDropSpriteTemplate
	.align	2, 0
	.type	 gFacadeSweatDropSpriteTemplate,object
	.size	 gFacadeSweatDropSpriteTemplate,24
gFacadeSweatDropSpriteTemplate:
	.short	0x2803
	.short	0x2803
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFacadeSweatDrop
	.align	1, 0
	.type	 sFacadeBlendColors,object
sFacadeBlendColors:
	.short	0x73c
	.short	0x16bc
	.short	0x225b
	.short	0x2ddb
	.short	0x3d5a
	.short	0x48fa
	.short	0x5479
	.short	0x6419
	.short	0x5c19
	.short	0x5019
	.short	0x4019
	.short	0x3419
	.short	0x281a
	.short	0x181a
	.short	0xc1a
	.short	0x1b
	.short	0x3b
	.short	0xbb
	.short	0x13b
	.short	0x19b
	.short	0x21c
	.short	0x27c
	.short	0x2fc
	.short	0x37d
	.size	 sFacadeBlendColors,48
	.align	2, 0
	.type	 sRoarNoiseLineAnimCmds1,object
sRoarNoiseLineAnimCmds1:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sRoarNoiseLineAnimCmds1,12
	.align	2, 0
	.type	 sRoarNoiseLineAnimCmds2,object
sRoarNoiseLineAnimCmds2:
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sRoarNoiseLineAnimCmds2,12
	.align	2, 0
	.type	 sRoarNoiseLineAnimTable,object
sRoarNoiseLineAnimTable:
	.word	sRoarNoiseLineAnimCmds1
	.word	sRoarNoiseLineAnimCmds2
	.size	 sRoarNoiseLineAnimTable,8
	.globl	gRoarNoiseLineSpriteTemplate
	.align	2, 0
	.type	 gRoarNoiseLineSpriteTemplate,object
	.size	 gRoarNoiseLineSpriteTemplate,24
gRoarNoiseLineSpriteTemplate:
	.short	0x2745
	.short	0x2745
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sRoarNoiseLineAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRoarNoiseLine
	.globl	gGlareEyeDotSpriteTemplate
	.align	2, 0
	.type	 gGlareEyeDotSpriteTemplate,object
	.size	 gGlareEyeDotSpriteTemplate,24
gGlareEyeDotSpriteTemplate:
	.short	0x2808
	.short	0x2808
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGlareEyeDot
	.globl	gAssistPawprintSpriteTemplate
	.align	2, 0
	.type	 gAssistPawprintSpriteTemplate,object
	.size	 gAssistPawprintSpriteTemplate,24
gAssistPawprintSpriteTemplate:
	.short	0x280c
	.short	0x280c
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimAssistPawprint
	.align	2, 0
	.type	 sBarrageBallAffineAnimCmds1,object
sBarrageBallAffineAnimCmds1:
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 sBarrageBallAffineAnimCmds1,16
	.align	2, 0
	.type	 sBarrageBallAffineAnimCmds2,object
sBarrageBallAffineAnimCmds2:
	.short	0x100
	.short	0x100
	.byte	0xc0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 sBarrageBallAffineAnimCmds2,24
	.align	2, 0
	.type	 sBarrageBallAffineAnimTable,object
sBarrageBallAffineAnimTable:
	.word	sBarrageBallAffineAnimCmds1
	.word	sBarrageBallAffineAnimCmds2
	.size	 sBarrageBallAffineAnimTable,8
	.globl	gBarrageBallSpriteTemplate
	.align	2, 0
	.type	 gBarrageBallSpriteTemplate,object
	.size	 gBarrageBallSpriteTemplate,24
gBarrageBallSpriteTemplate:
	.short	0x280e
	.short	0x280e
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sBarrageBallAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gSmellingSaltsHandSpriteTemplate
	.align	2, 0
	.type	 gSmellingSaltsHandSpriteTemplate,object
	.size	 gSmellingSaltsHandSpriteTemplate,24
gSmellingSaltsHandSpriteTemplate:
	.short	0x2807
	.short	0x2807
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSmellingSaltsHand
	.align	2, 0
	.type	 sSmellingSaltsSquishAffineAnimCmds,object
sSmellingSaltsSquishAffineAnimCmds:
	.short	0x0
	.short	-0x10
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	0x10
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSmellingSaltsSquishAffineAnimCmds,24
	.globl	gSmellingSaltExclamationSpriteTemplate
	.align	2, 0
	.type	 gSmellingSaltExclamationSpriteTemplate,object
	.size	 gSmellingSaltExclamationSpriteTemplate,24
gSmellingSaltExclamationSpriteTemplate:
	.short	0x280f
	.short	0x280f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSmellingSaltExclamation
	.globl	gHelpingHandClapSpriteTemplate
	.align	2, 0
	.type	 gHelpingHandClapSpriteTemplate,object
	.size	 gHelpingHandClapSpriteTemplate,24
gHelpingHandClapSpriteTemplate:
	.short	0x2807
	.short	0x2807
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimHelpingHandClap
	.globl	gForesightMagnifyingGlassSpriteTemplate
	.align	2, 0
	.type	 gForesightMagnifyingGlassSpriteTemplate,object
	.size	 gForesightMagnifyingGlassSpriteTemplate,24
gForesightMagnifyingGlassSpriteTemplate:
	.short	0x2812
	.short	0x2812
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimForesightMagnifyingGlass
	.globl	gMeteorMashStarSpriteTemplate
	.align	2, 0
	.type	 gMeteorMashStarSpriteTemplate,object
	.size	 gMeteorMashStarSpriteTemplate,24
gMeteorMashStarSpriteTemplate:
	.short	0x27f9
	.short	0x27f9
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMeteorMashStar
	.align	2, 0
	.type	 sUnusedStarBurstSpriteTemplate,object
	.size	 sUnusedStarBurstSpriteTemplate,24
sUnusedStarBurstSpriteTemplate:
	.short	0x27f9
	.short	0x27f9
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimParticleBurst
	.globl	gBlockXSpriteTemplate
	.align	2, 0
	.type	 gBlockXSpriteTemplate,object
	.size	 gBlockXSpriteTemplate,24
gBlockXSpriteTemplate:
	.short	0x280a
	.short	0x280a
	.word	gOamData_AffineOff_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBlockX
	.align	2, 0
	.type	 sUnusedItemBagStealSpriteTemplate,object
	.size	 sUnusedItemBagStealSpriteTemplate,24
sUnusedItemBagStealSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimUnusedItemBagSteal
	.align	2, 0
	.type	 sKnockOffStrikeAnimCmds,object
sKnockOffStrikeAnimCmds:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sKnockOffStrikeAnimCmds,12
	.align	2, 0
	.type	 sKnockOffStrikeAnimTable,object
sKnockOffStrikeAnimTable:
	.word	sKnockOffStrikeAnimCmds
	.size	 sKnockOffStrikeAnimTable,4
	.align	2, 0
	.type	 sKnockOffStrikeAffineanimCmds1,object
sKnockOffStrikeAffineanimCmds1:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sKnockOffStrikeAffineanimCmds1,24
	.align	2, 0
	.type	 sKnockOffStrikeAffineanimCmds2,object
sKnockOffStrikeAffineanimCmds2:
	.short	-0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sKnockOffStrikeAffineanimCmds2,24
	.align	2, 0
	.type	 sKnockOffStrikeAffineAnimTable,object
sKnockOffStrikeAffineAnimTable:
	.word	sKnockOffStrikeAffineanimCmds1
	.word	sKnockOffStrikeAffineanimCmds2
	.size	 sKnockOffStrikeAffineAnimTable,8
	.globl	gKnockOffStrikeSpriteTemplate
	.align	2, 0
	.type	 gKnockOffStrikeSpriteTemplate,object
	.size	 gKnockOffStrikeSpriteTemplate,24
gKnockOffStrikeSpriteTemplate:
	.short	0x2825
	.short	0x2825
	.word	gOamData_AffineNormal_ObjNormal_64x64
	.word	sKnockOffStrikeAnimTable
	.word	0x0
	.word	sKnockOffStrikeAffineAnimTable
	.word	AnimKnockOffStrike
	.align	2, 0
	.type	 sRecycleSpriteAffineAnimCmds,object
sRecycleSpriteAffineAnimCmds:
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0x40
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sRecycleSpriteAffineAnimCmds,16
	.align	2, 0
	.type	 sRecycleSpriteAffineAnimTable,object
sRecycleSpriteAffineAnimTable:
	.word	sRecycleSpriteAffineAnimCmds
	.size	 sRecycleSpriteAffineAnimTable,4
	.globl	gRecycleSpriteTemplate
	.align	2, 0
	.type	 gRecycleSpriteTemplate,object
	.size	 gRecycleSpriteTemplate,24
gRecycleSpriteTemplate:
	.short	0x2826
	.short	0x2826
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sRecycleSpriteAffineAnimTable
	.word	AnimRecycle
	.align	2, 0
	.type	 sSlackOffSquishAffineAnimCmds,object
sSlackOffSquishAffineAnimCmds:
	.short	0x0
	.short	0x10
	.byte	0x0
	.byte	0x4
	.space	2
	.short	-0x2
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x0
	.short	0x4
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x18
	.space	2
	.short	0x1
	.short	-0x5
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSlackOffSquishAffineAnimCmds,48
.text
	.align	2, 0
	.type	 AnimBlackSmoke,function
	.thumb_func
AnimBlackSmoke:
	push	{lr}
	add	r2, r0, #0
	ldr	r1, .L8
	ldrh	r0, [r1]
	ldrh	r3, [r2, #0x20]
	add	r0, r0, r3
	strh	r0, [r2, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r3, [r2, #0x22]
	add	r0, r0, r3
	strh	r0, [r2, #0x22]
	mov	r3, #0x6
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L5	@cond_branch
	ldrh	r0, [r1, #0x4]
	b	.L7
.L9:
	.align	2, 0
.L8:
	.word	gBattleAnimArgs
.L5:
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
.L7:
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r2, #0x30]
	ldr	r0, .L10
	str	r0, [r2, #0x1c]
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	AnimBlackSmoke_Step
.Lfe1:
	.size	 AnimBlackSmoke,.Lfe1-AnimBlackSmoke
	.align	2, 0
	.type	 AnimBlackSmoke_Step,function
	.thumb_func
AnimBlackSmoke_Step:
	push	{lr}
	add	r3, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	ble	.L13	@cond_branch
	ldrh	r1, [r3, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r3, #0x24]
	ldrh	r0, [r3, #0x2e]
	add	r1, r1, r0
	strh	r1, [r3, #0x32]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	b	.L14
.L13:
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L14:
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimBlackSmoke_Step,.Lfe2-AnimBlackSmoke_Step
	.align	2, 0
	.globl	AnimTask_SmokescreenImpact
	.type	 AnimTask_SmokescreenImpact,function
	.thumb_func
AnimTask_SmokescreenImpact:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L16
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x8
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	add	r4, r4, r0
	asr	r4, r4, #0x10
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x8
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	add	r1, r1, r0
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	SmokescreenImpact
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gBattleAnimTarget
.Lfe3:
	.size	 AnimTask_SmokescreenImpact,.Lfe3-AnimTask_SmokescreenImpact
	.align	2, 0
	.type	 AnimWhiteHalo,function
	.thumb_func
AnimWhiteHalo:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x5a
	strh	r0, [r4, #0x2e]
	ldr	r0, .L19
	str	r0, [r4, #0x1c]
	mov	r0, #0x7
	strh	r0, [r4, #0x30]
	ldr	r1, .L19+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	WaitAnimForDuration
	.word	AnimWhiteHalo_Step1
.Lfe4:
	.size	 AnimWhiteHalo,.Lfe4-AnimWhiteHalo
	.align	2, 0
	.type	 AnimWhiteHalo_Step1,function
	.thumb_func
AnimWhiteHalo_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L22	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L23
	str	r0, [r4, #0x1c]
.L22:
	pop	{r4}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	AnimWhiteHalo_Step2
.Lfe5:
	.size	 AnimWhiteHalo_Step1,.Lfe5-AnimWhiteHalo_Step1
	.align	2, 0
	.type	 AnimWhiteHalo_Step2,function
	.thumb_func
AnimWhiteHalo_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimWhiteHalo_Step2,.Lfe6-AnimWhiteHalo_Step2
	.align	2, 0
	.type	 AnimTealAlert,function
	.thumb_func
AnimTealAlert:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	ldr	r4, .L28
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, r7
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r5, #0x22]
	sub	r1, r1, r6
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x17
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L27	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L27:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r4, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldr	r0, .L28+0x4
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0x2e]
	strh	r7, [r5, #0x32]
	strh	r6, [r5, #0x36]
	ldr	r0, .L28+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L28+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe7:
	.size	 AnimTealAlert,.Lfe7-AnimTealAlert
	.align	2, 0
	.type	 AnimMeanLookEye,function
	.thumb_func
AnimMeanLookEye:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x4
	strh	r0, [r4, #0x2e]
	ldr	r0, .L31
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	AnimMeanLookEye_Step1
.Lfe8:
	.size	 AnimMeanLookEye,.Lfe8-AnimMeanLookEye
	.align	2, 0
	.type	 AnimMeanLookEye_Step1,function
	.thumb_func
AnimMeanLookEye_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L34	@cond_branch
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	b	.L39
.L34:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
.L39:
	strh	r0, [r4, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xf
	beq	.L37	@cond_branch
	cmp	r0, #0x4
	bne	.L36	@cond_branch
.L37:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x30]
.L36:
	ldrh	r0, [r4, #0x32]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x46
	ble	.L38	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	sub	r2, r2, #0x12
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L40
	str	r0, [r4, #0x1c]
.L38:
	pop	{r4}
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	AnimMeanLookEye_Step2
.Lfe9:
	.size	 AnimMeanLookEye_Step1,.Lfe9-AnimMeanLookEye_Step1
	.align	2, 0
	.type	 AnimMeanLookEye_Step2,function
	.thumb_func
AnimMeanLookEye_Step2:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x32]
	add	r1, r0, #0x1
	strh	r1, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	ble	.L43	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r3, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldr	r0, .L45
	str	r0, [r3, #0x1c]
.L43:
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	AnimMeanLookEye_Step3
.Lfe10:
	.size	 AnimMeanLookEye_Step2,.Lfe10-AnimMeanLookEye_Step2
	.align	2, 0
	.type	 AnimMeanLookEye_Step3,function
	.thumb_func
AnimMeanLookEye_Step3:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	bhi	.L56	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L61
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L62:
	.align	2, 0
.L61:
	.word	.L57
	.align	2, 0
	.align	2, 0
.L57:
	.word	.L50
	.word	.L50
	.word	.L52
	.word	.L52
	.word	.L54
	.word	.L54
	.word	.L56
.L50:
	mov	r1, #0x0
	mov	r0, #0x1
	strh	r0, [r4, #0x24]
	strh	r1, [r4, #0x26]
	b	.L48
.L52:
	ldr	r0, .L63
	strh	r0, [r4, #0x24]
	mov	r0, #0x0
	b	.L60
.L64:
	.align	2, 0
.L63:
	.word	0xffff
.L54:
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	mov	r0, #0x1
	b	.L60
.L56:
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	ldr	r0, .L65
.L60:
	strh	r0, [r4, #0x26]
.L48:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L58	@cond_branch
	strh	r2, [r4, #0x34]
.L58:
	ldrh	r0, [r4, #0x36]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L59	@cond_branch
	mov	r0, #0x10
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L65+0x4
	str	r0, [r4, #0x1c]
.L59:
	pop	{r4}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	0xffff
	.word	AnimMeanLookEye_Step4
.Lfe11:
	.size	 AnimMeanLookEye_Step3,.Lfe11-AnimMeanLookEye_Step3
	.align	2, 0
	.type	 AnimMeanLookEye_Step4,function
	.thumb_func
AnimMeanLookEye_Step4:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r0, [r4, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L68	@cond_branch
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
.L68:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L69	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L69:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L70	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L70:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 AnimMeanLookEye_Step4,.Lfe12-AnimMeanLookEye_Step4
	.align	2, 0
	.globl	AnimTask_SetPsychicBackground
	.type	 AnimTask_SetPsychicBackground,function
	.thumb_func
AnimTask_SetPsychicBackground:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L72
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L72+0x4
	str	r0, [r1]
	ldr	r1, .L72+0x8
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	bx	lr
.L73:
	.align	2, 0
.L72:
	.word	gTasks
	.word	SetPsychicBackground_Step
	.word	gAnimVisualTaskCount
.Lfe13:
	.size	 AnimTask_SetPsychicBackground,.Lfe13-AnimTask_SetPsychicBackground
	.align	2, 0
	.type	 SetPsychicBackground_Step,function
	.thumb_func
SetPsychicBackground_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	GetBattleBgPaletteNum
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r7, .L82
	lsl	r5, r4, #0x2
	add	r1, r5, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r7
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L75	@cond_branch
	ldr	r0, .L82+0x4
	lsl	r2, r6, #0x4
	add	r1, r2, #0
	add	r1, r1, #0xb
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r3, [r1]
	mov	r8, r3
	mov	r3, #0xa
	mov	r9, r7
	add	r7, r5, #0
	mov	ip, r0
	add	r5, r2, #0
	lsl	r0, r6, #0x5
	add	r0, r0, ip
	add	r2, r0, #0
	add	r2, r2, #0x14
.L79:
	ldrh	r0, [r2]
	strh	r0, [r1]
	sub	r2, r2, #0x2
	sub	r1, r1, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bgt	.L79	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	mov	r1, #0x0
	mov	r2, r8
	strh	r2, [r0]
	add	r0, r7, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	strh	r1, [r0, #0x12]
.L75:
	ldr	r0, .L82+0x8
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L82+0xc
	cmp	r1, r0
	bne	.L81	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
.L81:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gTasks
	.word	gPlttBufferFaded
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe14:
	.size	 SetPsychicBackground_Step,.Lfe14-SetPsychicBackground_Step
	.align	2, 0
	.globl	AnimTask_FadeScreenToWhite
	.type	 AnimTask_FadeScreenToWhite,function
	.thumb_func
AnimTask_FadeScreenToWhite:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L85
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L85+0x4
	str	r0, [r1]
	ldr	r1, .L85+0x8
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	bx	lr
.L86:
	.align	2, 0
.L85:
	.word	gTasks
	.word	FadeScreenToWhite_Step
	.word	gAnimVisualTaskCount
.Lfe15:
	.size	 AnimTask_FadeScreenToWhite,.Lfe15-AnimTask_FadeScreenToWhite
	.align	2, 0
	.type	 FadeScreenToWhite_Step,function
	.thumb_func
FadeScreenToWhite_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	GetBattleBgPaletteNum
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r5, .L100
	mov	r0, r8
	lsl	r3, r0, #0x2
	add	r1, r3, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L88	@cond_branch
	ldr	r0, .L100+0x4
	lsl	r2, r7, #0x4
	add	r1, r2, #0
	add	r1, r1, #0xb
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r6, [r1]
	mov	r4, #0xa
	mov	sl, r3
	mov	r9, r0
	add	r5, r2, #0
	ldr	r2, .L100+0x8
	mov	ip, r2
	lsl	r0, r7, #0x5
	add	r0, r0, r9
	add	r3, r0, #0
	add	r3, r3, #0x14
.L92:
	ldrh	r0, [r3]
	strh	r0, [r1]
	sub	r3, r3, #0x2
	sub	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bgt	.L92	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	strh	r6, [r0]
	add	r1, r5, #0
	add	r1, r1, #0xb
	lsl	r1, r1, #0x1
	add	r1, r1, ip
	ldrh	r6, [r1]
	mov	r4, #0xa
	lsl	r0, r7, #0x5
	add	r0, r0, ip
	add	r2, r0, #0
	add	r2, r2, #0x14
.L97:
	ldrh	r0, [r2]
	strh	r0, [r1]
	sub	r2, r2, #0x2
	sub	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bgt	.L97	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	mov	r1, #0x0
	strh	r6, [r0]
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r2, .L100
	add	r0, r0, r2
	strh	r1, [r0, #0x12]
.L88:
	ldr	r0, .L100+0xc
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L100+0x10
	cmp	r1, r0
	bne	.L99	@cond_branch
	mov	r0, r8
	bl	DestroyTask
.L99:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gTasks
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe16:
	.size	 FadeScreenToWhite_Step,.Lfe16-FadeScreenToWhite_Step
	.align	2, 0
	.type	 AnimSpikes,function
	.thumb_func
AnimSpikes:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L104
	ldrb	r0, [r0]
	mov	r5, sp
	add	r5, r5, #0x2
	mov	r1, #0x0
	mov	r2, sp
	add	r3, r5, #0
	bl	SetAverageBattlerPositions
	ldr	r0, .L104+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L103	@cond_branch
	ldr	r1, .L104+0x8
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L103:
	ldr	r1, .L104+0x8
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x2e]
	mov	r2, sp
	ldrh	r0, [r1, #0x4]
	ldrh	r2, [r2]
	add	r0, r0, r2
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0x6]
	ldrh	r5, [r5]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	ldr	r0, .L104+0xc
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L104+0x10
	str	r0, [r4, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L105:
	.align	2, 0
.L104:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0xffce
	.word	AnimSpikes_Step1
.Lfe17:
	.size	 AnimSpikes,.Lfe17-AnimSpikes
	.align	2, 0
	.type	 AnimSpikes_Step1,function
	.thumb_func
AnimSpikes_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L107	@cond_branch
	mov	r1, #0x0
	mov	r0, #0x1e
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	ldr	r0, .L108
	str	r0, [r4, #0x1c]
	ldr	r1, .L108+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
.L107:
	pop	{r4}
	pop	{r0}
	bx	r0
.L109:
	.align	2, 0
.L108:
	.word	WaitAnimForDuration
	.word	AnimSpikes_Step2
.Lfe18:
	.size	 AnimSpikes_Step1,.Lfe18-AnimSpikes_Step1
	.align	2, 0
	.type	 AnimSpikes_Step2,function
	.thumb_func
AnimSpikes_Step2:
	push	{lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x30]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L111	@cond_branch
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
.L111:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	bne	.L112	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L112:
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimSpikes_Step2,.Lfe19-AnimSpikes_Step2
	.align	2, 0
	.type	 AnimLeer,function
	.thumb_func
AnimLeer:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r5, .L114
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L114+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L114+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L115:
	.align	2, 0
.L114:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe20:
	.size	 AnimLeer,.Lfe20-AnimLeer
	.align	2, 0
	.type	 AnimLetterZ,function
	.thumb_func
AnimLetterZ:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L117	@cond_branch
	add	r0, r4, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r5, .L125
	mov	r2, #0x0
	ldrsh	r1, [r5, r2]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L118	@cond_branch
	ldr	r0, .L125+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L119	@cond_branch
	ldrh	r0, [r5, #0x4]
	b	.L123
.L126:
	.align	2, 0
.L125:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L119:
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	neg	r0, r0
	strh	r0, [r4, #0x30]
	mov	r2, #0x6
	ldrsh	r0, [r5, r2]
	neg	r0, r0
	b	.L124
.L118:
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	neg	r0, r0
.L123:
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x6]
.L124:
	strh	r0, [r4, #0x32]
.L117:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r3, #0xff
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r4, #0x34]
	add	r1, r1, r2
	strh	r1, [r4, #0x34]
	ldrh	r1, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r1, r1, r2
	strh	r1, [r4, #0x36]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	strh	r1, [r4, #0x24]
	and	r0, r0, r3
	mov	r1, #0x5
	bl	Sin
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xf0
	bls	.L122	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L122:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 AnimLetterZ,.Lfe21-AnimLetterZ
	.align	2, 0
	.type	 AnimFang,function
	.thumb_func
AnimFang:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L128	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L128:
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 AnimFang,.Lfe22-AnimFang
	.align	2, 0
	.globl	AnimTask_IsTargetPlayerSide
	.type	 AnimTask_IsTargetPlayerSide,function
	.thumb_func
AnimTask_IsTargetPlayerSide:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L133
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L130	@cond_branch
	ldr	r1, .L133+0x4
	mov	r0, #0x0
	b	.L132
.L134:
	.align	2, 0
.L133:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L130:
	ldr	r1, .L135
	mov	r0, #0x1
.L132:
	strh	r0, [r1, #0xe]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	gBattleAnimArgs
.Lfe23:
	.size	 AnimTask_IsTargetPlayerSide,.Lfe23-AnimTask_IsTargetPlayerSide
	.align	2, 0
	.globl	AnimTask_IsHealingMove
	.type	 AnimTask_IsHealingMove,function
	.thumb_func
AnimTask_IsHealingMove:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L141
	ldr	r0, [r0]
	cmp	r0, #0
	ble	.L138	@cond_branch
	ldr	r1, .L141+0x4
	mov	r0, #0x0
	b	.L140
.L142:
	.align	2, 0
.L141:
	.word	gAnimMoveDmg
	.word	gBattleAnimArgs
.L138:
	ldr	r1, .L143
	mov	r0, #0x1
.L140:
	strh	r0, [r1, #0xe]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L144:
	.align	2, 0
.L143:
	.word	gBattleAnimArgs
.Lfe24:
	.size	 AnimTask_IsHealingMove,.Lfe24-AnimTask_IsHealingMove
	.align	2, 0
	.type	 AnimSpotlight,function
	.thumb_func
AnimSpotlight:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r1, .L146
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r0, .L146+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r4, .L146+0x8
	strh	r1, [r4]
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x44
	bl	SetGpuReg
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldrb	r1, [r5, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r5, #0x1]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L146+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L147:
	.align	2, 0
.L146:
	.word	0x1f3f
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	AnimSpotlight_Step1
.Lfe25:
	.size	 AnimSpotlight,.Lfe25-AnimSpotlight
	.align	2, 0
	.type	 AnimSpotlight_Step1,function
	.thumb_func
AnimSpotlight_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bhi	.L149	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L163
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L164:
	.align	2, 0
.L163:
	.word	.L160
	.align	2, 0
	.align	2, 0
.L160:
	.word	.L150
	.word	.L153
	.word	.L155
	.word	.L153
	.word	.L157
	.word	.L158
.L150:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L149	@cond_branch
	b	.L162
.L153:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x75
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L149	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	b	.L162
.L155:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x75
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x29
	bne	.L149	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	b	.L162
.L157:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
.L162:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L149
.L158:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L149	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L165
	str	r0, [r4, #0x1c]
.L149:
	pop	{r4}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	AnimSpotlight_Step2
.Lfe26:
	.size	 AnimSpotlight_Step1,.Lfe26-AnimSpotlight_Step1
	.align	2, 0
	.type	 AnimSpotlight_Step2,function
	.thumb_func
AnimSpotlight_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L168
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	0x3f3f
.Lfe27:
	.size	 AnimSpotlight_Step2,.Lfe27-AnimSpotlight_Step2
	.align	2, 0
	.type	 AnimClappingHand,function
	.thumb_func
AnimClappingHand:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L176
	mov	r1, #0x6
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L171	@cond_branch
	ldr	r4, .L176+0x4
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L171:
	ldrh	r0, [r6]
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	mov	r3, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r6, #0x2]
	ldrh	r4, [r5, #0x22]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r4, .L176+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L176+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L172	@cond_branch
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldr	r0, .L176+0x10
	strh	r0, [r5, #0x24]
	mov	r0, #0x2
	b	.L175
.L177:
	.align	2, 0
.L176:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	0x3ff
	.word	-0x400
	.word	0xfff4
.L172:
	mov	r0, #0xc
	strh	r0, [r5, #0x24]
	ldr	r0, .L178
.L175:
	strh	r0, [r5, #0x30]
	ldr	r1, .L178+0x4
	ldrh	r0, [r1, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r2, #0x34
	ldrsh	r0, [r5, r2]
	cmp	r0, #0xff
	beq	.L174	@cond_branch
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x34]
.L174:
	ldr	r0, .L178+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L179:
	.align	2, 0
.L178:
	.word	0xfffe
	.word	gBattleAnimArgs
	.word	AnimClappingHand_Step
.Lfe28:
	.size	 AnimClappingHand,.Lfe28-AnimClappingHand
	.align	2, 0
	.type	 AnimClappingHand_Step,function
	.thumb_func
AnimClappingHand_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L181	@cond_branch
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L184	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0x32]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L184	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xd7
	bl	PlaySE1WithPanning
	b	.L184
.L181:
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x30]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L186	@cond_branch
	neg	r0, r0
.L186:
	cmp	r0, #0xc
	bne	.L184	@cond_branch
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	sub	r0, r2, #0x1
	strh	r0, [r4, #0x32]
.L184:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L187	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L187:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 AnimClappingHand_Step,.Lfe29-AnimClappingHand_Step
	.align	2, 0
	.type	 AnimClappingHand2,function
	.thumb_func
AnimClappingHand2:
	push	{lr}
	ldrb	r2, [r0, #0x1]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r1, #0xff
	strh	r1, [r0, #0x34]
	bl	AnimClappingHand
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 AnimClappingHand2,.Lfe30-AnimClappingHand2
	.align	2, 0
	.globl	AnimTask_CreateSpotlight
	.type	 AnimTask_CreateSpotlight,function
	.thumb_func
AnimTask_CreateSpotlight:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	ldr	r1, .L192
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L192+0x4
	ldr	r2, .L192+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L192+0xc
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r0, .L192+0x10
	ldrh	r1, [r0]
	mov	r0, #0x42
	bl	SetGpuReg
	ldr	r0, .L192+0x14
	ldrh	r1, [r0]
	mov	r0, #0x46
	bl	SetGpuReg
	b	.L191
.L193:
	.align	2, 0
.L192:
	.word	0x1f3f
	.word	gBattle_WIN1H
	.word	0x98f0
	.word	gBattle_WIN1V
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
.L190:
	ldr	r1, .L194
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L194+0x4
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r4, .L194+0x8
	ldr	r1, .L194+0xc
	add	r0, r1, #0
	strh	r0, [r4]
	mov	r0, #0x42
	mov	r1, #0xf0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x46
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	mov	r0, #0x0
	bl	SetGpuRegBits
.L191:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	0x1f3f
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
	.word	0x78a0
.Lfe31:
	.size	 AnimTask_CreateSpotlight,.Lfe31-AnimTask_CreateSpotlight
	.align	2, 0
	.globl	AnimTask_RemoveSpotlight
	.type	 AnimTask_RemoveSpotlight,function
	.thumb_func
AnimTask_RemoveSpotlight:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L198
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, .L198+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L198+0x8
	strh	r1, [r0]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L197	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	mov	r0, #0x0
	bl	ClearGpuRegBits
.L197:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L199:
	.align	2, 0
.L198:
	.word	0x3f3f
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe32:
	.size	 AnimTask_RemoveSpotlight,.Lfe32-AnimTask_RemoveSpotlight
	.align	2, 0
	.type	 AnimRapidSpin,function
	.thumb_func
AnimRapidSpin:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L205
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L201	@cond_branch
	ldr	r4, .L205+0x4
	b	.L204
.L206:
	.align	2, 0
.L205:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L201:
	ldr	r4, .L207
.L204:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x2]
	add	r0, r0, r6
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r2, .L207+0x4
	ldrh	r0, [r2, #0x4]
	strh	r0, [r5, #0x26]
	mov	r3, #0x0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r4, [r2, #0x6]
	mov	r6, #0x6
	ldrsh	r1, [r2, r6]
	cmp	r0, r1
	ble	.L203	@cond_branch
	mov	r3, #0x1
.L203:
	strh	r3, [r5, #0x2e]
	mov	r0, #0x0
	strh	r0, [r5, #0x30]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r2, #0xa]
	strh	r0, [r5, #0x34]
	strh	r4, [r5, #0x36]
	ldr	r0, .L207+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L208:
	.align	2, 0
.L207:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimRapidSpin_Step
.Lfe33:
	.size	 AnimRapidSpin,.Lfe33-AnimRapidSpin
	.align	2, 0
	.type	 AnimRapidSpin_Step,function
	.thumb_func
AnimRapidSpin_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x30]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r2, #0x30]
	ldr	r1, .L214
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x34]
	ldrh	r3, [r2, #0x26]
	add	r1, r0, r3
	strh	r1, [r2, #0x26]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L210	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x36
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	bge	.L212	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
	b	.L212
.L215:
	.align	2, 0
.L214:
	.word	gSineTable
.L210:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x36
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	ble	.L212	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L212:
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 AnimRapidSpin_Step,.Lfe34-AnimRapidSpin_Step
	.align	2, 0
	.globl	AnimTask_RapinSpinMonElevation
	.type	 AnimTask_RapinSpinMonElevation,function
	.thumb_func
AnimTask_RapinSpinMonElevation:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L233
	add	r5, r1, r0
	ldr	r0, .L233+0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L217	@cond_branch
	ldr	r4, .L233+0x8
	b	.L230
.L234:
	.align	2, 0
.L233:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L217:
	ldr	r4, .L235
.L230:
	ldrb	r0, [r4]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r6, #0
	add	r1, r0, #0
	add	r1, r1, #0x24
	mov	r2, #0x0
	strh	r1, [r5, #0x8]
	strh	r1, [r5, #0xa]
	sub	r0, r0, #0x21
	strh	r0, [r5, #0xc]
	cmp	r0, #0
	bge	.L219	@cond_branch
	strh	r2, [r5, #0xc]
.L219:
	ldrh	r0, [r5, #0x8]
	strh	r0, [r5, #0xe]
	mov	r0, #0x8
	strh	r0, [r5, #0x10]
	ldr	r1, .L235+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x12]
	strh	r2, [r5, #0x14]
	strh	r2, [r5, #0x16]
	cmp	r7, #0x1
	bne	.L220	@cond_branch
	ldr	r0, .L235+0x8
	b	.L231
.L236:
	.align	2, 0
.L235:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gBattle_BG1_X
.L220:
	ldr	r0, .L237
.L231:
	ldrh	r2, [r0]
	strh	r2, [r5, #0x18]
	add	r3, r2, #0
	add	r3, r3, #0xf0
	strh	r3, [r5, #0x1a]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x1c]
	mov	r4, #0x4
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bne	.L222	@cond_branch
	strh	r3, [r5, #0x1e]
	ldrh	r3, [r5, #0x18]
	b	.L223
.L238:
	.align	2, 0
.L237:
	.word	gBattle_BG2_X
.L222:
	strh	r2, [r5, #0x1e]
	ldrh	r3, [r5, #0x1a]
.L223:
	mov	r0, #0x0
	strh	r0, [r5, #0x26]
	ldrh	r1, [r5, #0xc]
	lsl	r2, r1, #0x10
	asr	r1, r2, #0x10
	mov	r6, #0xe
	ldrsh	r0, [r5, r6]
	cmp	r1, r0
	bgt	.L225	@cond_branch
	ldr	r4, .L239
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	ip, r0
.L226:
	asr	r2, r2, #0x10
	lsl	r1, r2, #0x1
	add	r0, r1, r4
	strh	r3, [r0]
	add	r1, r1, ip
	strh	r3, [r1]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	asr	r1, r2, #0x10
	mov	r6, #0xe
	ldrsh	r0, [r5, r6]
	cmp	r1, r0
	ble	.L226	@cond_branch
.L225:
	cmp	r7, #0x1
	bne	.L228	@cond_branch
	ldr	r0, .L239+0x4
	b	.L232
.L240:
	.align	2, 0
.L239:
	.word	gScanlineEffectRegBuffers
	.word	0x4000014
.L228:
	ldr	r0, .L241
.L232:
	str	r0, [sp]
	ldr	r0, .L241+0x4
	str	r0, [sp, #0x4]
	mov	r1, sp
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strb	r2, [r0, #0x9]
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	ldr	r0, .L241+0x8
	str	r0, [r5]
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L242:
	.align	2, 0
.L241:
	.word	0x4000018
	.word	-0x5d9fffff
	.word	RapinSpinMonElevation_Step
.Lfe35:
	.size	 AnimTask_RapinSpinMonElevation,.Lfe35-AnimTask_RapinSpinMonElevation
	.align	2, 0
	.type	 RapinSpinMonElevation_Step,function
	.thumb_func
RapinSpinMonElevation_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L263
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r4, #0xc]
	mov	r3, #0xc
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bge	.L244	@cond_branch
	strh	r2, [r4, #0x8]
.L244:
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L245	@cond_branch
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r4, #0xc]
	mov	r3, #0xc
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bge	.L247	@cond_branch
	strh	r2, [r4, #0xa]
	mov	r0, #0x1
	strh	r0, [r4, #0x26]
	b	.L247
.L264:
	.align	2, 0
.L263:
	.word	gTasks
.L245:
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x10]
.L247:
	ldrh	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L248	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x14]
	mov	r1, #0x0
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L249	@cond_branch
	mov	r1, #0x1
.L249:
	strh	r1, [r4, #0x16]
	cmp	r1, #0
	beq	.L250	@cond_branch
	ldrh	r0, [r4, #0x18]
	b	.L262
.L250:
	ldrh	r0, [r4, #0x1a]
.L262:
	strh	r0, [r4, #0x20]
.L248:
	ldrh	r1, [r4, #0x8]
	lsl	r3, r1, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bge	.L253	@cond_branch
	ldr	r5, .L265
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r5, r0
.L254:
	asr	r3, r3, #0x10
	lsl	r1, r3, #0x1
	add	r2, r1, r5
	ldrh	r0, [r4, #0x20]
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r4, #0x20]
	strh	r0, [r1]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	blt	.L254	@cond_branch
.L253:
	ldrh	r1, [r4, #0xa]
	lsl	r3, r1, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bgt	.L257	@cond_branch
	ldr	r5, .L265
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r5, r0
.L258:
	asr	r3, r3, #0x10
	lsl	r1, r3, #0x1
	add	r2, r1, r5
	ldrh	r0, [r4, #0x1e]
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r4, #0x1e]
	strh	r0, [r1]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	ble	.L258	@cond_branch
.L257:
	mov	r3, #0x26
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L260	@cond_branch
	mov	r1, #0x1c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L261	@cond_branch
	ldr	r1, .L265+0x4
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
.L261:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L260:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	gScanlineEffectRegBuffers
	.word	gScanlineEffect
.Lfe36:
	.size	 RapinSpinMonElevation_Step,.Lfe36-RapinSpinMonElevation_Step
	.align	2, 0
	.globl	AnimTask_TormentAttacker
	.type	 AnimTask_TormentAttacker,function
	.thumb_func
AnimTask_TormentAttacker:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L268
	add	r4, r4, r0
	mov	r5, #0x0
	strh	r5, [r4, #0x8]
	strh	r5, [r4, #0xa]
	ldr	r6, .L268+0x4
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xc]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xe]
	mov	r0, #0x20
	strh	r0, [r4, #0x10]
	ldr	r0, .L268+0x8
	strh	r0, [r4, #0x12]
	strh	r5, [r4, #0x14]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L268+0xc
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L269:
	.align	2, 0
.L268:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	0xffec
	.word	TormentAttacker_Step
.Lfe37:
	.size	 AnimTask_TormentAttacker,.Lfe37-AnimTask_TormentAttacker
	.align	2, 0
	.type	 TormentAttacker_Step,function
	.thumb_func
TormentAttacker_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L302
	add	r6, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x5
	bls	.LCB2648
	b	.L271	@long jump
.LCB2648:
	lsl	r0, r0, #0x2
	ldr	r1, .L302+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L303:
	.align	2, 0
.L302:
	.word	gTasks
	.word	.L299
	.align	2, 0
	.align	2, 0
.L299:
	.word	.L272
	.word	.L277
	.word	.L283
	.word	.L286
	.word	.L289
	.word	.L297
.L272:
	mov	r0, #0xc
	ldrsh	r2, [r6, r0]
	ldrh	r1, [r6, #0xa]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L273	@cond_branch
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	sub	r0, r2, r0
	b	.L301
.L273:
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	add	r0, r2, r0
.L301:
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldrh	r2, [r6, #0x12]
	ldrh	r0, [r6, #0xe]
	add	r2, r2, r0
	ldr	r0, .L304
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldrb	r4, [r6, #0xa]
	mov	r3, #0x6
	sub	r3, r3, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xb3
	bl	PlaySE12WithPanning
	cmp	r4, #0x40
	beq	.L275	@cond_branch
	ldr	r5, .L304+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r3, r1, r5
	ldrh	r0, [r6, #0xa]
	mov	r2, #0x1
	and	r2, r2, r0
	add	r3, r3, #0x3f
	ldrb	r4, [r3]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r4
	orr	r0, r0, r2
	strb	r0, [r3]
	add	r5, r5, #0x1c
	add	r1, r1, r5
	ldr	r0, .L304+0x8
	str	r0, [r1]
.L275:
	ldrh	r1, [r6, #0xa]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L276	@cond_branch
	ldrh	r0, [r6, #0x10]
	sub	r0, r0, #0x6
	strh	r0, [r6, #0x10]
	ldrh	r0, [r6, #0x12]
	sub	r0, r0, #0x6
	strh	r0, [r6, #0x12]
.L276:
	ldrh	r1, [r6, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L304+0xc
	add	r0, r6, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	strh	r4, [r6, #0x8]
	b	.L271
.L305:
	.align	2, 0
.L304:
	.word	gThoughtBubbleSpriteTemplate
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	sAffineAnims_Torment
.L277:
	add	r0, r6, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L271	@cond_branch
	mov	r2, #0xa
	ldrsh	r1, [r6, r2]
	cmp	r1, #0x6
	bne	.L279	@cond_branch
	mov	r0, #0x8
	strh	r0, [r6, #0x14]
	mov	r0, #0x3
	strh	r0, [r6, #0x8]
	b	.L271
.L279:
	cmp	r1, #0x2
	bgt	.L281	@cond_branch
	mov	r0, #0xa
.L281:
	strh	r0, [r6, #0x14]
	mov	r0, #0x2
	strh	r0, [r6, #0x8]
	b	.L271
.L283:
	ldrh	r0, [r6, #0x14]
	mov	r2, #0x14
	ldrsh	r1, [r6, r2]
	cmp	r1, #0
	beq	.L284	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r6, #0x14]
	b	.L271
.L284:
	strh	r1, [r6, #0x8]
	b	.L271
.L286:
	ldrh	r1, [r6, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	beq	.L287	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r6, #0x14]
	b	.L271
.L287:
	mov	r0, #0x4
	strh	r0, [r6, #0x8]
	b	.L271
.L289:
	mov	r5, #0x0
	mov	r7, #0x0
	ldr	r3, .L306
	mov	r0, #0x1c
	add	r0, r0, r3
	mov	r8, r0
.L293:
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r4, r0, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x14
	add	r0, r4, r0
	ldr	r1, [r0]
	ldr	r0, .L306+0x4
	cmp	r1, r0
	bne	.L292	@cond_branch
	add	r0, r4, r3
	strh	r2, [r0, #0x2e]
	mov	r1, #0x6
	strh	r1, [r0, #0x30]
	mov	r1, #0x2
	str	r2, [sp]
	str	r3, [sp, #0x4]
	bl	StartSpriteAnim
	mov	r0, r8
	add	r1, r4, r0
	ldr	r0, .L306+0x8
	str	r0, [r1]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r2, [sp]
	ldr	r3, [sp, #0x4]
	cmp	r7, #0x6
	beq	.L291	@cond_branch
.L292:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3f
	bls	.L293	@cond_branch
.L291:
	strh	r7, [r6, #0x14]
	mov	r0, #0x5
	strh	r0, [r6, #0x8]
	b	.L271
.L307:
	.align	2, 0
.L306:
	.word	gSprites
	.word	gThoughtBubbleSpriteTemplate
	.word	TormentAttacker_Callback
.L297:
	mov	r1, #0x14
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L271	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L271:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 TormentAttacker_Step,.Lfe38-TormentAttacker_Step
	.align	2, 0
	.type	 TormentAttacker_Callback,function
	.thumb_func
TormentAttacker_Callback:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L309	@cond_branch
	ldr	r3, .L310
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x2e
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L309:
	pop	{r4}
	pop	{r0}
	bx	r0
.L311:
	.align	2, 0
.L310:
	.word	gTasks
.Lfe39:
	.size	 TormentAttacker_Callback,.Lfe39-TormentAttacker_Callback
	.align	2, 0
	.type	 AnimTriAttackTriangle,function
	.thumb_func
AnimTriAttackTriangle:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L313	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
.L313:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x27
	bgt	.L314	@cond_branch
	ldrh	r0, [r5, #0x2e]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L315	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	b	.L319
.L315:
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
.L319:
	strb	r0, [r2]
.L314:
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x1e
	ble	.L317	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L317:
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x3d
	bne	.L318	@cond_branch
	ldr	r1, .L320
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldrh	r0, [r5, #0x24]
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x26]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	strh	r1, [r5, #0x24]
	strh	r1, [r5, #0x26]
	mov	r0, #0x14
	strh	r0, [r5, #0x2e]
	ldr	r4, .L320+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L320+0x8
	str	r0, [r5, #0x1c]
.L318:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L321:
	.align	2, 0
.L320:
	.word	DestroyAnimSprite
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
.Lfe40:
	.size	 AnimTriAttackTriangle,.Lfe40-AnimTriAttackTriangle
	.align	2, 0
	.globl	AnimTask_DefenseCurlDeformMon
	.type	 AnimTask_DefenseCurlDeformMon,function
	.thumb_func
AnimTask_DefenseCurlDeformMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L329
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L324	@cond_branch
	cmp	r0, #0x1
	beq	.L325	@cond_branch
	b	.L323
.L330:
	.align	2, 0
.L329:
	.word	gTasks
.L324:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L331
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L323
.L332:
	.align	2, 0
.L331:
	.word	DefenseCurlDeformMonAffineAnimCmds
.L325:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L323	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L323:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 AnimTask_DefenseCurlDeformMon,.Lfe41-AnimTask_DefenseCurlDeformMon
	.align	2, 0
	.type	 AnimBatonPassPokeball,function
	.thumb_func
AnimBatonPassPokeball:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L336	@cond_branch
	cmp	r0, #0x1
	bgt	.L344	@cond_branch
	cmp	r0, #0
	beq	.L335	@cond_branch
	b	.L334
.L344:
	cmp	r0, #0x2
	beq	.L338	@cond_branch
	cmp	r0, #0x3
	beq	.L340	@cond_branch
	b	.L334
.L335:
	ldr	r4, .L346
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	add	r0, r6, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	strh	r0, [r5, #0x32]
	b	.L345
.L347:
	.align	2, 0
.L346:
	.word	gBattleAnimAttacker
.L336:
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x60
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	sub	r0, r0, #0x1a
	strh	r0, [r5, #0x32]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	mov	r0, #0x32
	ldrsh	r2, [r5, r0]
	add	r0, r6, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L338	@cond_branch
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
.L338:
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x60
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x30
	strh	r0, [r5, #0x32]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	mov	r0, #0x32
	ldrsh	r2, [r5, r0]
	add	r0, r6, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L334	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x34]
	ldr	r1, .L348
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r6, #0
	bl	ResetSpriteRotScale
.L345:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L334
.L349:
	.align	2, 0
.L348:
	.word	gSprites
.L340:
	ldrh	r0, [r5, #0x26]
	sub	r0, r0, #0x6
	strh	r0, [r5, #0x26]
	mov	r1, #0x22
	ldrsh	r0, [r5, r1]
	mov	r2, #0x26
	ldrsh	r1, [r5, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L334	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L334:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 AnimBatonPassPokeball,.Lfe42-AnimBatonPassPokeball
	.align	2, 0
	.type	 AnimWishStar,function
	.thumb_func
AnimWishStar:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L354
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L351	@cond_branch
	ldr	r0, .L354+0x4
	b	.L353
.L355:
	.align	2, 0
.L354:
	.word	gBattleAnimAttacker
	.word	0xfff0
.L351:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L353:
	strh	r0, [r4, #0x20]
	mov	r0, #0x0
	strh	r0, [r4, #0x22]
	ldr	r0, .L356
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L357:
	.align	2, 0
.L356:
	.word	AnimWishStar_Step
.Lfe43:
	.size	 AnimWishStar,.Lfe43-AnimWishStar
	.align	2, 0
	.type	 AnimWishStar_Step,function
	.thumb_func
AnimWishStar_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x48
	strh	r0, [r4, #0x2e]
	ldr	r0, .L364
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L359	@cond_branch
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	b	.L363
.L365:
	.align	2, 0
.L364:
	.word	gBattleAnimAttacker
.L359:
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	neg	r0, r0
.L363:
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x10
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r5, r0, r1
	strh	r5, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L361	@cond_branch
	ldr	r0, .L366
	ldrh	r1, [r4, #0x24]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r4, #0x22]
	add	r2, r2, r5
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	add	r3, r4, #0
	add	r3, r3, #0x43
	ldrb	r3, [r3]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSpriteAndAnimate
.L361:
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	add	r0, r0, #0x20
	mov	r1, #0x98
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bls	.L362	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L362:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L367:
	.align	2, 0
.L366:
	.word	gMiniTwinklingStarSpriteTemplate
.Lfe44:
	.size	 AnimWishStar_Step,.Lfe44-AnimWishStar_Step
	.align	2, 0
	.type	 AnimMiniTwinklingStar,function
	.thumb_func
AnimMiniTwinklingStar:
	push	{r4, lr}
	add	r4, r0, #0
	bl	Random
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L369	@cond_branch
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x4
	b	.L372
.L369:
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x5
.L372:
	ldr	r3, .L373
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L373+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	bl	Random
	mov	r1, #0x7
	and	r0, r0, r1
	add	r1, r0, #0
	cmp	r1, #0x3
	ble	.L371	@cond_branch
	neg	r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L371:
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L373+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L374:
	.align	2, 0
.L373:
	.word	0x3ff
	.word	-0x400
	.word	AnimMiniTwinklingStar_Step
.Lfe45:
	.size	 AnimMiniTwinklingStar,.Lfe45-AnimMiniTwinklingStar
	.align	2, 0
	.type	 AnimMiniTwinklingStar_Step,function
	.thumb_func
AnimMiniTwinklingStar_Step:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	bgt	.L376	@cond_branch
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L378	@cond_branch
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	mov	r0, #0x0
	b	.L382
.L376:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x2
	bne	.L379	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L379:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x3
	bne	.L380	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L383
	strh	r0, [r3, #0x30]
.L380:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
.L382:
	strh	r0, [r3, #0x30]
.L378:
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x3c
	ble	.L381	@cond_branch
	add	r0, r3, #0
	bl	DestroySprite
.L381:
	pop	{r0}
	bx	r0
.L384:
	.align	2, 0
.L383:
	.word	0xffff
.Lfe46:
	.size	 AnimMiniTwinklingStar_Step,.Lfe46-AnimMiniTwinklingStar_Step
	.align	2, 0
	.globl	AnimTask_StockpileDeformMon
	.type	 AnimTask_StockpileDeformMon,function
	.thumb_func
AnimTask_StockpileDeformMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L389
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L386	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L389+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L387
.L390:
	.align	2, 0
.L389:
	.word	gTasks
	.word	sStockpileDeformMonAffineAnimCmds
.L386:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L387	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L387:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 AnimTask_StockpileDeformMon,.Lfe47-AnimTask_StockpileDeformMon
	.align	2, 0
	.globl	AnimTask_SpitUpDeformMon
	.type	 AnimTask_SpitUpDeformMon,function
	.thumb_func
AnimTask_SpitUpDeformMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L395
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L392	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L395+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L393
.L396:
	.align	2, 0
.L395:
	.word	gTasks
	.word	sSpitUpDeformMonAffineAnimCmds
.L392:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L393	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L393:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 AnimTask_SpitUpDeformMon,.Lfe48-AnimTask_SpitUpDeformMon
	.align	2, 0
	.type	 AnimSwallowBlueOrb,function
	.thumb_func
AnimSwallowBlueOrb:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L399	@cond_branch
	cmp	r0, #0x1
	beq	.L400	@cond_branch
	b	.L398
.L399:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x90
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x30]
	ldr	r0, .L404
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L398
.L405:
	.align	2, 0
.L404:
	.word	gBattleAnimAttacker
.L400:
	ldrh	r2, [r4, #0x30]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, r1
	strh	r0, [r4, #0x26]
	sub	r2, r2, #0x60
	strh	r2, [r4, #0x30]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	ble	.L398	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L398:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 AnimSwallowBlueOrb,.Lfe49-AnimSwallowBlueOrb
	.align	2, 0
	.globl	AnimTask_SwallowDeformMon
	.type	 AnimTask_SwallowDeformMon,function
	.thumb_func
AnimTask_SwallowDeformMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L410
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L407	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L410+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L408
.L411:
	.align	2, 0
.L410:
	.word	gTasks
	.word	sSwallowDeformMonAffineAnimCmds
.L407:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L408	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L408:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 AnimTask_SwallowDeformMon,.Lfe50-AnimTask_SwallowDeformMon
	.align	2, 0
	.globl	AnimTask_TransformMon
	.type	 AnimTask_TransformMon,function
	.thumb_func
AnimTask_TransformMon:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L436
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r3, r1, #0
	cmp	r0, #0x4
	bls	.LCB3901
	b	.L413	@long jump
.LCB3901:
	lsl	r0, r0, #0x2
	ldr	r1, .L436+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L437:
	.align	2, 0
.L436:
	.word	gTasks
	.word	.L432
	.align	2, 0
	.align	2, 0
.L432:
	.word	.L414
	.word	.L417
	.word	.L420
	.word	.L423
	.word	.L426
.L414:
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L438
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L415	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	b	.L416
.L439:
	.align	2, 0
.L438:
	.word	gBattleAnimAttacker
.L415:
	mov	r0, #0x2
	mov	r1, #0x2
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L416:
	ldr	r0, .L440
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L440+0x4
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1c]
	b	.L434
.L441:
	.align	2, 0
.L440:
	.word	gTasks
	.word	gBattleAnimArgs
.L417:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r5, r0, r3
	ldrh	r0, [r5, #0xc]
	add	r1, r0, #0x1
	strh	r1, [r5, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bgt	.LCB3981
	b	.L413	@long jump
.LCB3981:
	mov	r0, #0x0
	strh	r0, [r5, #0xc]
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	ldrh	r4, [r5, #0xa]
	lsl	r1, r4, #0x4
	orr	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x4c
	bl	SetGpuReg
	cmp	r4, #0xf
	beq	.LCB3997
	b	.L413	@long jump
.LCB3997:
	b	.L435
.L420:
	ldr	r6, .L442
	ldrb	r0, [r6]
	ldr	r1, .L442+0x4
	ldrb	r1, [r1]
	lsl	r4, r5, #0x2
	add	r2, r4, r5
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	ldrb	r2, [r2, #0x1c]
	bl	HandleSpeciesGfxDataChange
	ldrb	r1, [r6]
	mov	r0, sp
	bl	GetBattleAnimBgDataByPriorityRank
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L421	@cond_branch
	mov	r1, #0x0
	b	.L422
.L443:
	.align	2, 0
.L442:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L421:
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
.L422:
	ldr	r0, .L444
	ldr	r2, [r0]
	lsl	r0, r1, #0x2
	add	r2, r2, #0x4
	add	r2, r2, r0
	ldr	r1, .L444+0x4
	ldr	r0, .L444+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0xb
	ldr	r0, [r2]
	add	r0, r0, r1
	ldr	r1, [sp]
	ldr	r2, .L444+0xc
	bl	CpuSet
	ldr	r1, [sp]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r0, sp
	ldrh	r3, [r0, #0xa]
	mov	r0, #0x1
	bl	LoadBgTiles
	ldr	r0, .L444+0x10
	add	r1, r4, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L434:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L413
.L445:
	.align	2, 0
.L444:
	.word	gMonSpritesGfxPtr
	.word	gBattleMonForms
	.word	gBattleAnimAttacker
	.word	0x4000200
	.word	gTasks
.L423:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r5, r0, r3
	ldrh	r0, [r5, #0xc]
	add	r1, r0, #0x1
	strh	r1, [r5, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L413	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0xc]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	ldrh	r4, [r5, #0xa]
	lsl	r1, r4, #0x4
	orr	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x4c
	bl	SetGpuReg
	cmp	r4, #0
	bne	.L413	@cond_branch
.L435:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L413
.L426:
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L446
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L427	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	b	.L428
.L447:
	.align	2, 0
.L446:
	.word	gBattleAnimAttacker
.L427:
	mov	r0, #0x2
	mov	r1, #0x2
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L428:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L429	@cond_branch
	ldr	r4, .L448
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L429	@cond_branch
	ldr	r0, .L448+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x1c
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L429	@cond_branch
	ldrb	r0, [r4]
	ldr	r1, .L448+0x8
	ldr	r1, [r1]
	ldr	r2, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1, #0x2]
	bl	SetBattlerShadowSpriteCallback
.L429:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L413:
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L449:
	.align	2, 0
.L448:
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	gBattleSpritesDataPtr
.Lfe51:
	.size	 AnimTask_TransformMon,.Lfe51-AnimTask_TransformMon
	.align	2, 0
	.globl	AnimTask_IsMonInvisible
	.type	 AnimTask_IsMonInvisible,function
	.thumb_func
AnimTask_IsMonInvisible:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L451
	ldr	r3, .L451+0x4
	ldr	r2, .L451+0x8
	ldr	r1, .L451+0xc
	ldrb	r1, [r1]
	add	r1, r1, r2
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	add	r1, r1, #0x3e
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	strh	r1, [r4, #0xe]
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L452:
	.align	2, 0
.L451:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe52:
	.size	 AnimTask_IsMonInvisible,.Lfe52-AnimTask_IsMonInvisible
	.align	2, 0
	.globl	AnimTask_CastformGfxChange
	.type	 AnimTask_CastformGfxChange,function
	.thumb_func
AnimTask_CastformGfxChange:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L454
	ldrb	r0, [r0]
	ldr	r1, .L454+0x4
	ldrb	r1, [r1]
	mov	r2, #0x1
	bl	HandleSpeciesGfxDataChange
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L455:
	.align	2, 0
.L454:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.Lfe53:
	.size	 AnimTask_CastformGfxChange,.Lfe53-AnimTask_CastformGfxChange
	.align	2, 0
	.globl	AnimTask_MorningSunLightBeam
	.type	 AnimTask_MorningSunLightBeam,function
	.thumb_func
AnimTask_MorningSunLightBeam:
	push	{r4, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L482
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB4307
	b	.L457	@long jump
.LCB4307:
	lsl	r0, r0, #0x2
	ldr	r1, .L482+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L483:
	.align	2, 0
.L482:
	.word	gTasks
	.word	.L477
	.align	2, 0
	.align	2, 0
.L477:
	.word	.L458
	.word	.L464
	.word	.L468
	.word	.L473
	.word	.L475
.L458:
	ldr	r1, .L484
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L459	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L459:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L484+0x4
	bl	AnimLoadCompressedBgTilemap
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L484+0x8
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L484+0xc
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L460	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
	ldr	r1, .L484+0x10
	ldr	r3, .L484+0x14
	b	.L479
.L485:
	.align	2, 0
.L484:
	.word	0x3f42
	.word	gBattleAnim_MorningSunTilemap
	.word	gBattleAnim_MorningSunGfx
	.word	gBattleAnim_MorningSunPal
	.word	gBattle_BG1_X
	.word	0xffc8
.L460:
	ldr	r0, .L486
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L462	@cond_branch
	ldr	r1, .L486+0x4
	ldr	r2, .L486+0x8
	add	r0, r2, #0
	b	.L480
.L487:
	.align	2, 0
.L486:
	.word	gBattleAnimAttacker
	.word	gBattle_BG1_X
	.word	0xff79
.L462:
	ldr	r1, .L488
	ldr	r3, .L488+0x4
.L479:
	add	r0, r3, #0
.L480:
	strh	r0, [r1]
	ldr	r1, .L488+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L488+0xc
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L488
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1c]
	ldr	r0, .L488+0x8
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	b	.L481
.L489:
	.align	2, 0
.L488:
	.word	gBattle_BG1_X
	.word	0xfff6
	.word	gBattle_BG1_Y
	.word	gTasks
.L464:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x10]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB4485
	b	.L457	@long jump
.LCB4485:
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L466	@cond_branch
	mov	r0, #0xc
	strh	r0, [r4, #0xa]
.L466:
	ldrh	r0, [r4, #0xa]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xc
	bne	.L457	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L457
.L468:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L469	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
.L469:
	ldrh	r0, [r4, #0xa]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L457	@cond_branch
	ldr	r2, .L490
	ldr	r1, .L490+0x4
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L471	@cond_branch
	strh	r0, [r4, #0x8]
	b	.L457
.L491:
	.align	2, 0
.L490:
	.word	gBattle_BG1_X
	.word	sMorningSunLightBeamCoordsTable
.L471:
	mov	r0, #0x3
	strh	r0, [r4, #0x8]
	b	.L457
.L473:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L457	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0xe]
	mov	r0, #0x1
.L481:
	strh	r0, [r1, #0x8]
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xdd
	bl	PlaySE12WithPanning
	b	.L457
.L475:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	InitBattleAnimBg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L476	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L476:
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	ldr	r0, .L492
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L492+0x4
	strh	r1, [r0]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L457:
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.Lfe54:
	.size	 AnimTask_MorningSunLightBeam,.Lfe54-AnimTask_MorningSunLightBeam
	.align	2, 0
	.type	 AnimGreenStar,function
	.thumb_func
AnimGreenStar:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r7, r0, #0
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xfc
	lsl	r1, r1, #0xe
	and	r1, r1, r0
	lsr	r5, r1, #0x10
	add	r1, r5, #0
	cmp	r1, #0x1f
	ble	.L495	@cond_branch
	mov	r0, #0x20
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L495:
	ldr	r4, .L496
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r5
	strh	r0, [r7, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	strh	r0, [r7, #0x22]
	ldr	r1, .L496+0x4
	ldrh	r0, [r1]
	strh	r0, [r7, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r7, #0x32]
	ldr	r4, .L496+0x8
	mov	r0, #0x20
	ldrsh	r1, [r7, r0]
	mov	r0, #0x22
	ldrsh	r2, [r7, r0]
	add	r5, r7, #0
	add	r5, r5, #0x43
	ldrb	r3, [r5]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	bl	CreateSprite
	mov	r9, r0
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, #0x20
	ldrsh	r1, [r7, r0]
	mov	r0, #0x22
	ldrsh	r2, [r7, r0]
	ldrb	r3, [r5]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	bl	CreateSprite
	mov	r8, r0
	mov	r1, r8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r0, r9
	lsl	r2, r0, #0x4
	add	r2, r2, r9
	lsl	r2, r2, #0x2
	ldr	r1, .L496+0xc
	mov	sl, r1
	add	r5, r2, r1
	add	r0, r5, #0
	mov	r1, #0x1
	str	r2, [sp]
	bl	StartSpriteAnim
	mov	r0, r8
	lsl	r6, r0, #0x4
	add	r6, r6, r8
	lsl	r6, r6, #0x2
	mov	r1, sl
	add	r4, r6, r1
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	ldr	r1, .L496+0x4
	ldrh	r0, [r1]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r1]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x32]
	ldr	r0, .L496+0x10
	strh	r0, [r5, #0x3c]
	mov	r0, #0x1
	neg	r0, r0
	strh	r0, [r4, #0x3c]
	add	r5, r5, #0x3e
	ldrb	r0, [r5]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r5]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	orr	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x1c
	add	sl, sl, r0
	ldr	r2, [sp]
	add	r2, r2, sl
	ldr	r0, .L496+0x14
	str	r0, [r2]
	add	r6, r6, sl
	str	r0, [r6]
	mov	r1, r9
	strh	r1, [r7, #0x3a]
	mov	r0, r8
	strh	r0, [r7, #0x3c]
	ldr	r0, .L496+0x18
	str	r0, [r7, #0x1c]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gGreenStarSpriteTemplate
	.word	gSprites
	.word	0xffff
	.word	AnimGreenStar_Callback
	.word	AnimGreenStar_Step1
.Lfe55:
	.size	 AnimGreenStar,.Lfe55-AnimGreenStar
	.align	2, 0
	.type	 AnimGreenStar_Step1,function
	.thumb_func
AnimGreenStar_Step1:
	push	{lr}
	add	r3, r0, #0
	ldrh	r2, [r3, #0x32]
	ldrh	r0, [r3, #0x34]
	add	r2, r2, r0
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r3, #0x26]
	sub	r1, r1, r0
	strh	r1, [r3, #0x26]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r3, #0x34]
	mov	r2, #0x36
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	bne	.L499	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x8
	neg	r1, r1
	cmp	r0, r1
	bge	.L499	@cond_branch
	ldr	r2, .L502
	mov	r0, #0x3a
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldrh	r0, [r3, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x36]
.L499:
	mov	r1, #0x36
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	bne	.L500	@cond_branch
	mov	r2, #0x26
	ldrsh	r1, [r3, r2]
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bge	.L500	@cond_branch
	ldr	r2, .L502
	mov	r0, #0x3c
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldrh	r0, [r3, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x36]
.L500:
	ldrh	r0, [r3, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L501	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L502+0x4
	str	r0, [r3, #0x1c]
.L501:
	pop	{r0}
	bx	r0
.L503:
	.align	2, 0
.L502:
	.word	gSprites
	.word	AnimGreenStar_Step2
.Lfe56:
	.size	 AnimGreenStar_Step1,.Lfe56-AnimGreenStar_Step1
	.align	2, 0
	.type	 AnimGreenStar_Step2,function
	.thumb_func
AnimGreenStar_Step2:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L506
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r6, r5, #0
	add	r6, r6, #0x1c
	add	r0, r3, r6
	ldr	r2, [r0]
	ldr	r0, .L506+0x4
	cmp	r2, r0
	bne	.L505	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldr	r0, [r1]
	cmp	r0, r2
	bne	.L505	@cond_branch
	add	r0, r3, r5
	bl	DestroySprite
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L505:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L507:
	.align	2, 0
.L506:
	.word	gSprites
	.word	SpriteCallbackDummy
.Lfe57:
	.size	 AnimGreenStar_Step2,.Lfe57-AnimGreenStar_Step2
	.align	2, 0
	.type	 AnimGreenStar_Callback,function
	.thumb_func
AnimGreenStar_Callback:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L509	@cond_branch
	ldrh	r2, [r3, #0x32]
	ldrh	r1, [r3, #0x34]
	add	r2, r2, r1
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r3, #0x26]
	sub	r0, r0, r1
	strh	r0, [r3, #0x26]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r3, #0x34]
	ldrh	r0, [r3, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L509	@cond_branch
	mov	r1, ip
	ldrb	r0, [r1]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldr	r0, .L511
	str	r0, [r3, #0x1c]
.L509:
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	SpriteCallbackDummy
.Lfe58:
	.size	 AnimGreenStar_Callback,.Lfe58-AnimGreenStar_Callback
	.align	2, 0
	.globl	AnimTask_DoomDesireLightBeam
	.type	 AnimTask_DoomDesireLightBeam,function
	.thumb_func
AnimTask_DoomDesireLightBeam:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L548
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r4, r1, #0
	cmp	r0, #0x5
	bls	.LCB5089
	b	.L514	@long jump
.LCB5089:
	lsl	r0, r0, #0x2
	ldr	r1, .L548+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L549:
	.align	2, 0
.L548:
	.word	gTasks
	.word	.L542
	.align	2, 0
	.align	2, 0
.L542:
	.word	.L515
	.word	.L527
	.word	.L532
	.word	.L535
	.word	.L537
	.word	.L540
.L515:
	ldr	r1, .L550
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L550+0x4
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L516	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L516:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L550+0x8
	bl	AnimLoadCompressedBgTilemap
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L550+0xc
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L550+0x10
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L517	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
	ldr	r1, .L550+0x14
	ldr	r3, .L550+0x18
	add	r0, r3, #0
	b	.L544
.L551:
	.align	2, 0
.L550:
	.word	0x3f42
	.word	0xd03
	.word	gBattleAnim_MorningSunTilemap
	.word	gBattleAnim_MorningSunGfx
	.word	gBattleAnim_MorningSunPal
	.word	gBattle_BG1_X
	.word	0xffc8
.L517:
	ldr	r0, .L552
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L519	@cond_branch
	ldr	r1, .L552+0x4
	cmp	r4, #0x1
	bne	.L520	@cond_branch
	ldr	r2, .L552+0x8
	add	r0, r2, #0
	strh	r0, [r1]
.L520:
	cmp	r4, #0x3
	bne	.L521	@cond_branch
	ldr	r3, .L552+0xc
	add	r0, r3, #0
	strh	r0, [r1]
.L521:
	cmp	r4, #0
	bne	.L522	@cond_branch
	mov	r0, #0xe
	strh	r0, [r1]
.L522:
	cmp	r4, #0x2
	bne	.L524	@cond_branch
	ldr	r1, .L552+0x4
	ldr	r2, .L552+0x10
	b	.L545
.L553:
	.align	2, 0
.L552:
	.word	gBattleAnimTarget
	.word	gBattle_BG1_X
	.word	0xff65
	.word	0xff8d
	.word	0xffec
.L519:
	cmp	r4, #0x1
	bne	.L525	@cond_branch
	ldr	r1, .L554
	ldr	r3, .L554+0x4
	add	r0, r3, #0
	strh	r0, [r1]
.L525:
	cmp	r4, #0
	bne	.L524	@cond_branch
	ldr	r1, .L554
	ldr	r2, .L554+0x8
.L545:
	add	r0, r2, #0
.L544:
	strh	r0, [r1]
.L524:
	ldr	r1, .L554+0xc
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L554+0x10
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L554
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1c]
	ldr	r0, .L554+0xc
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1e]
	b	.L530
.L555:
	.align	2, 0
.L554:
	.word	gBattle_BG1_X
	.word	0xff79
	.word	0xfff6
	.word	gBattle_BG1_Y
	.word	gTasks
.L527:
	ldr	r1, .L556
	lsl	r4, r6, #0x2
	add	r0, r4, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r0, #0x0
	strh	r0, [r5, #0xe]
	ldr	r0, .L556+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L528	@cond_branch
	ldr	r2, .L556+0x8
	ldr	r1, .L556+0xc
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrh	r5, [r5, #0x1c]
	add	r0, r0, r5
	b	.L546
.L557:
	.align	2, 0
.L556:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gBattle_BG1_X
	.word	sDoomDesireLightBeamCoordTable
.L528:
	ldr	r2, .L558
	ldr	r1, .L558+0x4
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	ldrh	r0, [r5, #0x1c]
	sub	r0, r0, r1
.L546:
	strh	r0, [r2]
	ldr	r0, .L558+0x8
	add	r1, r4, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L530	@cond_branch
	strh	r0, [r1, #0x8]
	b	.L514
.L559:
	.align	2, 0
.L558:
	.word	gBattle_BG1_X
	.word	sDoomDesireLightBeamCoordTable
	.word	gTasks
.L530:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L514
.L532:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bgt	.L533	@cond_branch
	mov	r0, #0x5
	strh	r0, [r4, #0xa]
.L533:
	ldrh	r1, [r4, #0xa]
	lsl	r1, r1, #0x8
	mov	r0, #0x3
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bne	.L514	@cond_branch
	b	.L547
.L535:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrh	r1, [r4, #0xe]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xe]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldr	r2, .L560
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r1, r0
	ble	.L514	@cond_branch
.L547:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L514
.L561:
	.align	2, 0
.L560:
	.word	sDoomDesireLightBeamDelayTable
.L537:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xd
	ble	.L538	@cond_branch
	mov	r0, #0xd
	strh	r0, [r4, #0xa]
.L538:
	ldrh	r1, [r4, #0xa]
	lsl	r1, r1, #0x8
	mov	r0, #0x3
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xd
	bne	.L514	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L514
.L540:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	InitBattleAnimBg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L541	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L541:
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	ldr	r0, .L562
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L562+0x4
	strh	r1, [r0]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L514:
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L563:
	.align	2, 0
.L562:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.Lfe59:
	.size	 AnimTask_DoomDesireLightBeam,.Lfe59-AnimTask_DoomDesireLightBeam
	.align	2, 0
	.globl	AnimTask_StrongFrustrationGrowAndShrink
	.type	 AnimTask_StrongFrustrationGrowAndShrink,function
	.thumb_func
AnimTask_StrongFrustrationGrowAndShrink:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L568
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L565	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L568+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L566
.L569:
	.align	2, 0
.L568:
	.word	gTasks
	.word	sStrongFrustrationAffineAnimCmds
.L565:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L566	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L566:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 AnimTask_StrongFrustrationGrowAndShrink,.Lfe60-AnimTask_StrongFrustrationGrowAndShrink
	.align	2, 0
	.type	 AnimWeakFrustrationAngerMark,function
	.thumb_func
AnimWeakFrustrationAngerMark:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	bne	.L571	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L572
.L571:
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	cmp	r1, #0x14
	ble	.L572	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0xa0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x80
	strh	r0, [r4, #0x32]
	ldr	r0, .L578
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L574	@cond_branch
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	b	.L577
.L579:
	.align	2, 0
.L578:
	.word	gBattleAnimAttacker
.L574:
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
.L577:
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	ble	.L572	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L572:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 AnimWeakFrustrationAngerMark,.Lfe61-AnimWeakFrustrationAngerMark
	.align	2, 0
	.globl	AnimTask_RockMonBackAndForth
	.type	 AnimTask_RockMonBackAndForth,function
	.thumb_func
AnimTask_RockMonBackAndForth:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L588
	add	r4, r0, r1
	ldr	r5, .L588+0x4
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L581	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L580
.L589:
	.align	2, 0
.L588:
	.word	gTasks
	.word	gBattleAnimArgs
.L581:
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bge	.L582	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x4]
.L582:
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x2
	ble	.L583	@cond_branch
	mov	r0, #0x2
	strh	r0, [r5, #0x4]
.L583:
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	mov	r0, #0x4
	ldrsh	r1, [r5, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x8
	sub	r0, r0, r1
	strh	r0, [r4, #0xe]
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x7
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrh	r0, [r5, #0x4]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x12]
	ldrh	r0, [r5, #0x2]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	ldrb	r0, [r5]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L584	@cond_branch
	ldr	r0, .L590
	b	.L587
.L591:
	.align	2, 0
.L590:
	.word	gBattleAnimAttacker
.L584:
	ldr	r0, .L592
.L587:
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L586	@cond_branch
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x10]
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x12]
.L586:
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r0, .L592+0x4
	str	r0, [r4]
.L580:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L593:
	.align	2, 0
.L592:
	.word	gBattleAnimTarget
	.word	AnimTask_RockMonBackAndForth_Step
.Lfe62:
	.size	 AnimTask_RockMonBackAndForth,.Lfe62-AnimTask_RockMonBackAndForth
	.align	2, 0
	.type	 AnimTask_RockMonBackAndForth_Step,function
	.thumb_func
AnimTask_RockMonBackAndForth_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L608
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r6, [r4, r0]
	cmp	r6, #0x1
	beq	.L598	@cond_branch
	cmp	r6, #0x1
	bgt	.L607	@cond_branch
	cmp	r6, #0
	beq	.L596	@cond_branch
	b	.L595
.L609:
	.align	2, 0
.L608:
	.word	gTasks
.L607:
	cmp	r6, #0x2
	beq	.L600	@cond_branch
	cmp	r6, #0x3
	bne	.LCB5827
	b	.L604	@long jump
.LCB5827:
	b	.L595
.L596:
	ldr	r2, .L610
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r0, [r4, #0xc]
	ldrh	r1, [r4, #0x10]
	sub	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xc]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L595	@cond_branch
	strh	r6, [r4, #0xa]
	b	.L602
.L611:
	.align	2, 0
.L610:
	.word	gSprites
.L598:
	ldr	r2, .L612
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r4, #0x12]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0xc]
	add	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xc]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	cmp	r1, r0
	blt	.L595	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L602
.L613:
	.align	2, 0
.L612:
	.word	gSprites
.L600:
	ldr	r2, .L614
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	mov	r5, #0x0
	strh	r1, [r0, #0x24]
	ldrh	r0, [r4, #0xc]
	ldrh	r1, [r4, #0x10]
	sub	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xc]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L595	@cond_branch
	ldrh	r1, [r4, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L602	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0x8]
	b	.L595
.L615:
	.align	2, 0
.L614:
	.word	gSprites
.L602:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L595
.L604:
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L595:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 AnimTask_RockMonBackAndForth_Step,.Lfe63-AnimTask_RockMonBackAndForth_Step
	.align	2, 0
	.type	 AnimSweetScentPetal,function
	.thumb_func
AnimSweetScentPetal:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L620
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L617	@cond_branch
	strh	r0, [r4, #0x20]
	ldr	r1, .L620+0x4
	ldrh	r0, [r1]
	b	.L619
.L621:
	.align	2, 0
.L620:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L617:
	mov	r0, #0xf0
	strh	r0, [r4, #0x20]
	ldr	r1, .L622
	ldrh	r0, [r1]
	sub	r0, r0, #0x1e
.L619:
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldrb	r1, [r1, #0x2]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L622+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L623:
	.align	2, 0
.L622:
	.word	gBattleAnimArgs
	.word	AnimSweetScentPetal_Step
.Lfe64:
	.size	 AnimSweetScentPetal,.Lfe64-AnimSweetScentPetal
	.align	2, 0
	.type	 AnimSweetScentPetal_Step,function
	.thumb_func
AnimSweetScentPetal_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x3
	strh	r0, [r4, #0x2e]
	ldr	r0, .L630
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L625	@cond_branch
	ldrh	r1, [r4, #0x20]
	add	r1, r1, #0x5
	strh	r1, [r4, #0x20]
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0xf0
	ble	.L626	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L626:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0xff
	and	r0, r0, r1
	mov	r1, #0x10
	bl	Sin
	b	.L629
.L631:
	.align	2, 0
.L630:
	.word	gBattleAnimAttacker
.L625:
	ldrh	r1, [r4, #0x20]
	sub	r1, r1, #0x5
	strh	r1, [r4, #0x20]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bge	.L628	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L628:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0xff
	and	r0, r0, r1
	mov	r1, #0x10
	bl	Cos
.L629:
	strh	r0, [r4, #0x26]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 AnimSweetScentPetal_Step,.Lfe65-AnimSweetScentPetal_Step
	.align	2, 0
	.globl	AnimTask_FlailMovement
	.type	 AnimTask_FlailMovement,function
	.thumb_func
AnimTask_FlailMovement:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L633
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r0, #0x20
	strh	r0, [r4, #0x20]
	mov	r0, #0x40
	strh	r0, [r4, #0x22]
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x24]
	ldr	r0, .L633+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r0, .L633+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L634:
	.align	2, 0
.L633:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_FlailMovement_Step
.Lfe66:
	.size	 AnimTask_FlailMovement,.Lfe66-AnimTask_FlailMovement
	.align	2, 0
	.type	 AnimTask_FlailMovement_Step,function
	.thumb_func
AnimTask_FlailMovement_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L657
	add	r7, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	mov	r8, r0
	cmp	r0, #0x1
	beq	.L641	@cond_branch
	cmp	r0, #0x1
	bgt	.L648	@cond_branch
	cmp	r0, #0
	beq	.L637	@cond_branch
	b	.L636
.L658:
	.align	2, 0
.L657:
	.word	gTasks
.L648:
	mov	r2, r8
	cmp	r2, #0x2
	beq	.L645	@cond_branch
	b	.L636
.L637:
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	add	r0, r3, #0
	ldrh	r1, [r7, #0xc]
	add	r2, r0, r1
	strh	r2, [r7, #0xc]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	ldrh	r3, [r7, #0x24]
	mov	r8, r3
	mov	r3, #0x24
	ldrsh	r1, [r7, r3]
	cmp	r0, r1
	blt	.L636	@cond_branch
	mov	r0, r8
	sub	r5, r0, r2
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r6, r1, #0
	lsl	r6, r6, #0x1
	add	r0, r5, #0
	add	r1, r6, #0
	bl	__divsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	add	r1, r6, #0
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r1, #0x1
	and	r4, r4, r1
	cmp	r4, #0
	bne	.L639	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, r8
	sub	r0, r2, r0
	b	.L655
.L639:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, r8
	sub	r0, r0, r3
	strh	r0, [r7, #0xc]
	b	.L636
.L641:
	ldr	r1, .L659
	add	r0, r1, #0
	ldrh	r2, [r7, #0xc]
	add	r1, r0, r2
	strh	r1, [r7, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r7, r3]
	mov	r2, #0x24
	ldrsh	r6, [r7, r2]
	cmn	r0, r6
	bgt	.L636	@cond_branch
	ldrh	r3, [r7, #0x24]
	mov	r9, r3
	mov	r0, r9
	sub	r4, r0, r1
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r6, r6, #0x1
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__divsi3
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, r8
	and	r1, r1, r5
	lsl	r0, r1, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L643	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r2, r9
	sub	r0, r0, r2
.L655:
	strh	r0, [r7, #0xc]
	strh	r1, [r7, #0x8]
	b	.L636
.L660:
	.align	2, 0
.L659:
	.word	-0x200
.L643:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r3, r9
	sub	r0, r3, r0
	strh	r0, [r7, #0xc]
	b	.L636
.L645:
	ldrh	r0, [r7, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L635
.L636:
	ldrh	r0, [r7, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r7, #0xc]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r7, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldr	r2, .L661
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	mov	r2, #0xc
	ldrsh	r0, [r7, r2]
	cmp	r0, #0
	bge	.L656	@cond_branch
	add	r0, r0, #0x3f
.L656:
	asr	r0, r0, #0x6
	neg	r0, r0
	strh	r0, [r1, #0x24]
	ldrh	r0, [r7, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r7, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L635	@cond_branch
	ldrh	r1, [r7, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r7, r3]
	cmp	r0, #0
	beq	.L652	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r7, #0x20]
	ldrh	r0, [r7, #0x24]
	ldrh	r1, [r7, #0x22]
	sub	r0, r0, r1
	strh	r0, [r7, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bgt	.L635	@cond_branch
	mov	r0, #0x10
	strh	r0, [r7, #0x24]
	b	.L635
.L662:
	.align	2, 0
.L661:
	.word	gSprites
.L652:
	mov	r0, #0x2
	strh	r0, [r7, #0x8]
.L635:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 AnimTask_FlailMovement_Step,.Lfe67-AnimTask_FlailMovement_Step
	.align	2, 0
	.type	 AnimPainSplitProjectile,function
	.thumb_func
AnimPainSplitProjectile:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L664	@cond_branch
	ldr	r6, .L669
	mov	r2, #0x4
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	bne	.L665	@cond_branch
	ldr	r4, .L669+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L665:
	ldrh	r0, [r6]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrh	r1, [r6, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r0, r1, r2
	strh	r0, [r5, #0x22]
	mov	r0, #0x80
	strh	r0, [r5, #0x30]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	strh	r0, [r5, #0x32]
	strh	r1, [r5, #0x34]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L666
.L670:
	.align	2, 0
.L669:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L664:
	ldrh	r1, [r5, #0x30]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r5, #0x24]
	ldrh	r0, [r5, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r5, #0x26]
	add	r0, r0, r2
	strh	r0, [r5, #0x26]
	mov	r2, #0x36
	ldrsh	r0, [r5, r2]
	add	r4, r1, #0
	cmp	r0, #0
	bne	.L667	@cond_branch
	mov	r0, #0x26
	ldrsh	r1, [r5, r0]
	mov	r2, #0x34
	ldrsh	r0, [r5, r2]
	cmn	r1, r0
	ble	.L667	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5, #0x36]
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	neg	r0, r0
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x32]
.L667:
	add	r0, r4, #0
	add	r0, r0, #0xc0
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x80
	strh	r0, [r5, #0x32]
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L666	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L666:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 AnimPainSplitProjectile,.Lfe68-AnimPainSplitProjectile
	.align	2, 0
	.globl	AnimTask_PainSplitMovement
	.type	 AnimTask_PainSplitMovement,function
	.thumb_func
AnimTask_PainSplitMovement:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	ldr	r1, .L691
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L672	@cond_branch
	ldr	r0, .L691+0x4
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	mov	r8, r0
	cmp	r1, #0
	bne	.L673	@cond_branch
	ldr	r0, .L691+0x8
	b	.L689
.L692:
	.align	2, 0
.L691:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L673:
	ldr	r0, .L693
.L689:
	ldrb	r0, [r0]
	strh	r0, [r2, #0x1e]
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L693+0x4
	lsl	r4, r7, #0x2
	add	r0, r4, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	strh	r5, [r6, #0x1c]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r2, r8
	mov	r3, #0x2
	ldrsh	r0, [r2, r3]
	cmp	r0, #0x1
	beq	.L677	@cond_branch
	cmp	r0, #0x1
	bgt	.L685	@cond_branch
	cmp	r0, #0
	beq	.L676	@cond_branch
	lsl	r2, r5, #0x4
	b	.L675
.L694:
	.align	2, 0
.L693:
	.word	gBattleAnimTarget
	.word	gTasks
.L685:
	cmp	r0, #0x2
	beq	.L680	@cond_branch
	lsl	r2, r5, #0x4
	b	.L675
.L676:
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r5, #0
	mov	r1, #0xe0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	add	r0, r5, #0
	bl	SetBattlerSpriteYOffsetFromYScale
	lsl	r2, r5, #0x4
	b	.L675
.L677:
	mov	r2, #0x98
	lsl	r2, r2, #0x1
	mov	r3, #0xf0
	lsl	r3, r3, #0x4
	b	.L690
.L680:
	mov	r2, #0x98
	lsl	r2, r2, #0x1
	mov	r3, #0xf1
	lsl	r3, r3, #0x8
.L690:
	add	r0, r5, #0
	mov	r1, #0xd0
	bl	SetSpriteRotScale
	add	r0, r5, #0
	bl	SetBattlerSpriteYOffsetFromYScale
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L682	@cond_branch
	ldrb	r0, [r6, #0x1e]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsl	r2, r5, #0x4
	cmp	r0, #0
	bne	.L675	@cond_branch
.L682:
	ldr	r0, .L695
	lsl	r2, r5, #0x4
	add	r1, r2, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x10
	strh	r0, [r1, #0x26]
.L675:
	ldr	r1, .L695
	add	r0, r2, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x2
	strh	r1, [r0, #0x24]
	ldr	r0, .L695+0x4
	add	r1, r4, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L686
.L696:
	.align	2, 0
.L695:
	.word	gSprites
	.word	gTasks
.L672:
	ldrb	r5, [r2, #0x1c]
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strh	r0, [r2, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L687	@cond_branch
	strh	r4, [r2, #0xc]
	ldr	r0, .L697
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x24]
	neg	r0, r0
	strh	r0, [r1, #0x24]
.L687:
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xd
	bne	.L686	@cond_branch
	add	r0, r5, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L697
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r4, [r0, #0x24]
	strh	r4, [r0, #0x26]
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L686:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L698:
	.align	2, 0
.L697:
	.word	gSprites
.Lfe69:
	.size	 AnimTask_PainSplitMovement,.Lfe69-AnimTask_PainSplitMovement
	.align	2, 0
	.type	 AnimFlatterConfetti,function
	.thumb_func
AnimFlatterConfetti:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xc
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, r0
	ldr	r3, .L709
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L709+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	bl	Random
	ldr	r5, .L709+0x8
	and	r5, r5, r0
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L700	@cond_branch
	mov	r2, #0xbc
	lsl	r2, r2, #0x3
	add	r0, r5, r2
	b	.L706
.L710:
	.align	2, 0
.L709:
	.word	0x3ff
	.word	-0x400
	.word	0x1ff
.L700:
	mov	r3, #0xbc
	lsl	r3, r3, #0x3
	add	r0, r3, #0
	sub	r0, r0, r5
.L706:
	strh	r0, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L702	@cond_branch
	mov	r2, #0x90
	lsl	r2, r2, #0x3
	add	r0, r1, r2
	b	.L707
.L702:
	mov	r3, #0x90
	lsl	r3, r3, #0x3
	add	r0, r3, #0
	sub	r0, r0, r1
.L707:
	strh	r0, [r4, #0x30]
	ldr	r0, .L711
	ldrh	r0, [r0]
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L704	@cond_branch
	ldr	r0, .L711+0x4
	b	.L708
.L712:
	.align	2, 0
.L711:
	.word	gBattleAnimArgs
	.word	0xfff8
.L704:
	mov	r0, #0xf8
.L708:
	strh	r0, [r4, #0x20]
	mov	r0, #0x68
	strh	r0, [r4, #0x22]
	ldr	r0, .L713
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L714:
	.align	2, 0
.L713:
	.word	AnimFlatterConfetti_Step
.Lfe70:
	.size	 AnimFlatterConfetti,.Lfe70-AnimFlatterConfetti
	.align	2, 0
	.type	 AnimFlatterConfetti_Step,function
	.thumb_func
AnimFlatterConfetti_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L716	@cond_branch
	ldrh	r3, [r4, #0x2e]
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	b	.L720
.L716:
	ldrh	r3, [r4, #0x2e]
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
.L720:
	strh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x30]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, r1
	strh	r0, [r4, #0x26]
	add	r0, r3, #0
	sub	r0, r0, #0x16
	strh	r0, [r4, #0x2e]
	add	r1, r2, #0
	sub	r1, r1, #0x30
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L718	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
.L718:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L719	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L719:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 AnimFlatterConfetti_Step,.Lfe71-AnimFlatterConfetti_Step
	.align	2, 0
	.type	 AnimFlatterSpotlight,function
	.thumb_func
AnimFlatterSpotlight:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r1, .L722
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r0, .L722+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r4, .L722+0x8
	strh	r1, [r4]
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L722+0xc
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0x2e]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldrb	r1, [r5, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r5, #0x1]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L722+0x10
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L723:
	.align	2, 0
.L722:
	.word	0x1f3f
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattleAnimArgs
	.word	AnimFlatterSpotlight_Step
.Lfe72:
	.size	 AnimFlatterSpotlight,.Lfe72-AnimFlatterSpotlight
	.align	2, 0
	.type	 AnimFlatterSpotlight_Step,function
	.thumb_func
AnimFlatterSpotlight_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L728	@cond_branch
	cmp	r0, #0x1
	bgt	.L735	@cond_branch
	cmp	r0, #0
	beq	.L726	@cond_branch
	b	.L725
.L735:
	cmp	r0, #0x2
	beq	.L730	@cond_branch
	cmp	r0, #0x3
	beq	.L732	@cond_branch
	b	.L725
.L726:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L725	@cond_branch
	b	.L736
.L728:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L725	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	b	.L736
.L730:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L725	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L736:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	b	.L725
.L732:
	ldr	r1, .L737
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L725:
	pop	{r4}
	pop	{r0}
	bx	r0
.L738:
	.align	2, 0
.L737:
	.word	0x3f3f
.Lfe73:
	.size	 AnimFlatterSpotlight_Step,.Lfe73-AnimFlatterSpotlight_Step
	.align	2, 0
	.type	 AnimReversalOrb,function
	.thumb_func
AnimReversalOrb:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L740
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r1, .L740+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldr	r1, .L740+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L741:
	.align	2, 0
.L740:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimReversalOrb_Step
.Lfe74:
	.size	 AnimReversalOrb,.Lfe74-AnimReversalOrb
	.align	2, 0
	.type	 AnimReversalOrb_Step,function
	.thumb_func
AnimReversalOrb_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	ldrh	r1, [r4, #0x34]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x9
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	lsl	r1, r0, #0x10
	cmp	r0, #0x3f
	bls	.L744	@cond_branch
	asr	r0, r1, #0x10
	cmp	r0, #0xc3
	ble	.L743	@cond_branch
.L744:
	ldr	r0, .L752
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	sub	r0, r0, #0x1
	b	.L751
.L753:
	.align	2, 0
.L752:
	.word	gBattleAnimAttacker
.L743:
	ldr	r0, .L754
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x1
.L751:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r3, #0x38
	ldrsh	r2, [r4, r3]
	cmp	r2, #0
	bne	.L746	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	add	r0, r1, #0
	ldrh	r3, [r4, #0x32]
	add	r0, r0, r3
	strh	r0, [r4, #0x32]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r3, [r4, #0x34]
	add	r0, r0, r3
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x2e
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bne	.L748	@cond_branch
	strh	r2, [r4, #0x36]
	mov	r0, #0x1
	strh	r0, [r4, #0x38]
	b	.L748
.L755:
	.align	2, 0
.L754:
	.word	gBattleAnimAttacker
.L746:
	cmp	r2, #0x1
	bne	.L748	@cond_branch
	ldr	r1, .L756
	add	r0, r1, #0
	ldrh	r2, [r4, #0x32]
	add	r0, r0, r2
	strh	r0, [r4, #0x32]
	ldr	r3, .L756+0x4
	add	r0, r3, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L748	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L748:
	pop	{r4}
	pop	{r0}
	bx	r0
.L757:
	.align	2, 0
.L756:
	.word	-0x400
	.word	-0x100
.Lfe75:
	.size	 AnimReversalOrb_Step,.Lfe75-AnimReversalOrb_Step
	.align	2, 0
	.globl	AnimTask_RolePlaySilhouette
	.type	 AnimTask_RolePlaySilhouette,function
	.thumb_func
AnimTask_RolePlaySilhouette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x18]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r0, .L772
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L759	@cond_branch
	mov	r0, #0x0
	str	r0, [sp, #0x1c]
	ldr	r6, .L772+0x4
	ldr	r4, .L772+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r7, .L772+0xc
	add	r0, r0, r7
	mov	r1, #0x0
	bl	GetMonData
	mov	sl, r0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r7
	mov	r1, #0x1
	bl	GetMonData
	mov	r9, r0
	ldr	r0, .L772+0x10
	ldr	r0, [r0]
	ldrb	r2, [r4]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L760	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L761	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r7
	b	.L769
.L773:
	.align	2, 0
.L772:
	.word	gBattleAnimAttacker
	.word	gBattlerPartyIndexes
	.word	gBattleAnimTarget
	.word	gPlayerParty
	.word	gBattleSpritesDataPtr
.L761:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	ldr	r1, .L774
	add	r0, r0, r1
.L769:
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	b	.L763
.L775:
	.align	2, 0
.L774:
	.word	gEnemyParty
.L760:
	ldrh	r6, [r1, #0x2]
.L763:
	mov	r1, #0x14
	mov	r8, r1
	b	.L770
.L759:
	mov	r2, #0x1
	str	r2, [sp, #0x1c]
	ldr	r6, .L776
	ldr	r4, .L776+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r7, .L776+0x8
	add	r0, r0, r7
	mov	r1, #0x0
	bl	GetMonData
	mov	sl, r0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r7
	mov	r1, #0x1
	bl	GetMonData
	mov	r9, r0
	ldr	r0, .L776+0xc
	ldr	r0, [r0]
	ldrb	r2, [r4]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L765	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L766	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	ldr	r1, .L776+0x10
	add	r0, r0, r1
	b	.L771
.L777:
	.align	2, 0
.L776:
	.word	gBattlerPartyIndexes
	.word	gBattleAnimTarget
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
	.word	gPlayerParty
.L766:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r7
.L771:
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	b	.L768
.L765:
	ldrh	r6, [r1, #0x2]
.L768:
	ldr	r3, .L778
	mov	r8, r3
.L770:
	ldr	r0, .L778+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r5, .L778+0x4
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	mov	r2, r8
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r4, r4, r1
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0x5
	str	r0, [sp, #0x4]
	mov	r3, sl
	str	r3, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	ldr	r0, .L778+0x8
	ldrb	r0, [r0]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	str	r0, [sp, #0x14]
	add	r0, r6, #0
	ldr	r1, [sp, #0x1c]
	mov	r2, #0x0
	add	r3, r4, #0
	bl	CreateAdditionalMonSpriteForMoveAnim
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L778+0xc
	lsl	r5, r6, #0x4
	add	r5, r5, r6
	lsl	r5, r5, #0x2
	add	r5, r5, r0
	mov	r0, #0x3
	and	r7, r7, r0
	lsl	r7, r7, #0x2
	mov	r8, r7
	ldrb	r0, [r5, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r1, r4, #0
	and	r1, r1, r0
	mov	r2, r8
	orr	r1, r1, r2
	strb	r1, [r5, #0x5]
	ldrb	r2, [r5, #0x1]
	add	r0, r4, #0
	and	r0, r0, r2
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r5, #0x1]
	ldr	r0, .L778+0x10
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r2, r3, #0
	orr	r1, r1, r2
	mov	r2, #0x20
	bl	FillPalette
	ldrb	r0, [r5, #0x5]
	and	r4, r4, r0
	mov	r0, r8
	orr	r4, r4, r0
	strb	r4, [r5, #0x5]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, .L778+0x14
	ldr	r1, [sp, #0x18]
	lsl	r4, r1, #0x2
	add	r4, r4, r1
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r4, #0xa]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r6, [r4, #0x8]
	ldr	r0, .L778+0x18
	str	r0, [r4]
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L779:
	.align	2, 0
.L778:
	.word	0xffec
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gSprites
	.word	0x7fff
	.word	gTasks
	.word	AnimTask_RolePlaySilhouette_Step1
.Lfe76:
	.size	 AnimTask_RolePlaySilhouette,.Lfe76-AnimTask_RolePlaySilhouette
	.align	2, 0
	.type	 AnimTask_RolePlaySilhouette_Step1,function
	.thumb_func
AnimTask_RolePlaySilhouette_Step1:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L783
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L781	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xa
	bne	.L781	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	strh	r0, [r4, #0x1e]
	ldr	r0, .L783+0x4
	str	r0, [r4]
.L781:
	pop	{r4}
	pop	{r0}
	bx	r0
.L784:
	.align	2, 0
.L783:
	.word	gTasks
	.word	AnimTask_RolePlaySilhouette_Step2
.Lfe77:
	.size	 AnimTask_RolePlaySilhouette_Step1,.Lfe77-AnimTask_RolePlaySilhouette_Step1
	.align	2, 0
	.type	 AnimTask_RolePlaySilhouette_Step2,function
	.thumb_func
AnimTask_RolePlaySilhouette_Step2:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L787
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrb	r2, [r5, #0x8]
	ldrh	r0, [r5, #0x1c]
	sub	r0, r0, #0x10
	mov	r4, #0x0
	strh	r0, [r5, #0x1c]
	ldrh	r0, [r5, #0x1e]
	add	r0, r0, #0x80
	strh	r0, [r5, #0x1e]
	ldr	r1, .L787+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	ldrb	r2, [r6, #0x1]
	lsl	r1, r2, #0x1e
	lsr	r1, r1, #0x1e
	mov	r0, #0x2
	orr	r1, r1, r0
	sub	r0, r0, #0x6
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r6, #0x1]
	mov	r0, #0x1c
	ldrsh	r2, [r5, r0]
	mov	r0, #0x1e
	ldrsh	r3, [r5, r0]
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	TrySetSpriteRotScale
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L786	@cond_branch
	add	r0, r6, #0
	bl	TryResetSpriteAffineState
	add	r0, r6, #0
	bl	DestroySpriteAndFreeResources_
	ldr	r0, .L787+0x8
	str	r0, [r5]
.L786:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L788:
	.align	2, 0
.L787:
	.word	gTasks
	.word	gSprites
	.word	DestroyAnimVisualTaskAndDisableBlend
.Lfe78:
	.size	 AnimTask_RolePlaySilhouette_Step2,.Lfe78-AnimTask_RolePlaySilhouette_Step2
	.align	2, 0
	.globl	AnimTask_AcidArmor
	.type	 AnimTask_AcidArmor,function
	.thumb_func
AnimTask_AcidArmor:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L803
	add	r4, r1, r0
	ldr	r0, .L803+0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L790	@cond_branch
	ldr	r0, .L803+0x8
	b	.L801
.L804:
	.align	2, 0
.L803:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L790:
	ldr	r0, .L805
.L801:
	ldrb	r5, [r0]
	mov	r6, #0x0
	strh	r6, [r4, #0x8]
	strh	r6, [r4, #0xa]
	strh	r6, [r4, #0xc]
	mov	r0, #0x10
	strh	r0, [r4, #0xe]
	strh	r6, [r4, #0x10]
	strh	r5, [r4, #0x12]
	mov	r0, #0x20
	strh	r0, [r4, #0x14]
	strh	r6, [r4, #0x16]
	mov	r0, #0x18
	strh	r0, [r4, #0x18]
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L792	@cond_branch
	mov	r1, #0x18
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x18]
.L792:
	add	r0, r5, #0
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x22
	strh	r0, [r4, #0x22]
	cmp	r0, #0
	bge	.L793	@cond_branch
	strh	r6, [r4, #0x22]
.L793:
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x42
	strh	r0, [r4, #0x24]
	ldr	r0, .L805+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	add	r0, r5, #0
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L794	@cond_branch
	ldr	r0, .L805+0x8
	str	r0, [sp]
	ldr	r1, .L805+0xc
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, .L805+0x10
	ldrh	r5, [r0]
	ldr	r0, .L805+0x14
	b	.L802
.L806:
	.align	2, 0
.L805:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0x4000014
	.word	0x3f42
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L794:
	ldr	r0, .L807
	str	r0, [sp]
	ldr	r1, .L807+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, .L807+0x8
	ldrh	r5, [r0]
	ldr	r0, .L807+0xc
.L802:
	ldrh	r3, [r0]
	mov	r7, #0x0
	mov	r2, #0x0
	ldr	r6, .L807+0x10
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	ip, r0
.L799:
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	lsl	r1, r2, #0x1
	add	r0, r1, r6
	strh	r5, [r0]
	add	r1, r1, ip
	strh	r5, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x1
	add	r1, r0, r6
	strh	r3, [r1]
	add	r0, r0, ip
	strh	r3, [r0]
	lsl	r0, r7, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	add	r2, r2, #0x2
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsr	r7, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L799	@cond_branch
	ldr	r0, .L807+0x14
	str	r0, [sp, #0x4]
	mov	r1, sp
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strb	r2, [r0, #0x9]
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	ldr	r0, .L807+0x18
	str	r0, [r4]
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L808:
	.align	2, 0
.L807:
	.word	0x4000018
	.word	0x3f44
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gScanlineEffectRegBuffers
	.word	-0x599fffff
	.word	AnimTask_AcidArmor_Step
.Lfe79:
	.size	 AnimTask_AcidArmor,.Lfe79-AnimTask_AcidArmor
	.align	2, 0
	.type	 AnimTask_AcidArmor_Step,function
	.thumb_func
AnimTask_AcidArmor_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L839
	add	r6, r0, r1
	ldrb	r0, [r6, #0x12]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L810	@cond_branch
	ldr	r0, .L839+0x4
	ldrh	r0, [r0]
	str	r0, [sp, #0x4]
	ldr	r0, .L839+0x8
	b	.L837
.L840:
	.align	2, 0
.L839:
	.word	gTasks
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L810:
	ldr	r0, .L841
	ldrh	r0, [r0]
	str	r0, [sp, #0x4]
	ldr	r0, .L841+0x4
.L837:
	ldrh	r0, [r0]
	str	r0, [sp, #0x8]
	mov	r1, #0x8
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.LCB8176
	b	.L827	@long jump
.LCB8176:
	cmp	r0, #0x1
	bgt	.L836	@cond_branch
	cmp	r0, #0
	beq	.L813	@cond_branch
	b	.L812
.L842:
	.align	2, 0
.L841:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L836:
	cmp	r0, #0x2
	bne	.LCB8192
	b	.L829	@long jump
.LCB8192:
	cmp	r0, #0x3
	bne	.LCB8194
	b	.L833	@long jump
.LCB8194:
	b	.L812
.L813:
	mov	r2, #0x24
	ldrsh	r0, [r6, r2]
	lsl	r0, r0, #0x11
	lsr	r5, r0, #0x10
	mov	r3, #0x0
	str	r3, [sp]
	mov	r9, r3
	mov	r4, #0x0
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r6, #0xa]
	ldrh	r7, [r6, #0xa]
	mov	r8, r7
	mov	r0, #0x14
	ldrsh	r1, [r6, r0]
	mov	r0, #0xfc
	lsl	r0, r0, #0x3
	bl	__divsi3
	strh	r0, [r6, #0x1a]
	mov	r1, #0x16
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x1
	mov	r2, #0x1a
	ldrsh	r1, [r6, r2]
	bl	__divsi3
	neg	r0, r0
	strh	r0, [r6, #0x1c]
	ldrh	r0, [r6, #0x16]
	strh	r0, [r6, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x15
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	strh	r7, [r6, #0x20]
	ldrh	r2, [r6, #0x24]
	lsl	r3, r2, #0x10
	mov	ip, r3
	asr	r1, r3, #0x10
	mov	r3, #0x22
	ldrsh	r0, [r6, r3]
	cmp	r1, r0
	ble	.L815	@cond_branch
	ldr	r0, .L843
	mov	sl, r0
	ldr	r1, [sp, #0x4]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp, #0x10]
	ldr	r2, [sp, #0x8]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp, #0xc]
.L816:
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r2, r5, #0x1
	lsl	r2, r2, #0x1
	mov	r3, sl
	ldrb	r1, [r3, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	ldr	r0, .L843+0x4
	add	r2, r2, r0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r1, r9
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	sub	r0, r4, r0
	ldr	r3, [sp, #0xc]
	add	r0, r3, r0
	strh	r0, [r2]
	lsl	r3, r5, #0x1
	mov	r0, sl
	ldrb	r1, [r0, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r3, r3, r0
	ldr	r1, .L843+0x4
	add	r3, r3, r1
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x10
	ldr	r2, [sp, #0x10]
	add	r1, r2, r1
	mov	r7, r8
	lsl	r2, r7, #0x10
	asr	r2, r2, #0x10
	lsl	r0, r2, #0x1
	ldr	r7, .L843+0x8
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x15
	add	r1, r1, r0
	strh	r1, [r3]
	add	r2, r2, #0xa
	mov	r8, r2
	mov	r0, #0xff
	mov	r1, r8
	and	r1, r1, r0
	mov	r8, r1
	ldrh	r0, [r6, #0x1c]
	ldrh	r2, [r6, #0x1e]
	add	r0, r0, r2
	strh	r0, [r6, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x15
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	strh	r7, [r6, #0x20]
	add	r4, r4, #0x1
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	sub	r5, r5, #0x2
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r3, [sp]
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r6, #0x14]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	str	r2, [sp]
	asr	r0, r0, #0x15
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldr	r0, .L843+0xc
	add	r0, r0, ip
	lsr	r2, r0, #0x10
	lsl	r3, r2, #0x10
	mov	ip, r3
	asr	r1, r3, #0x10
	mov	r3, #0x22
	ldrsh	r0, [r6, r3]
	cmp	r1, r0
	bgt	.L816	@cond_branch
.L815:
	lsl	r1, r2, #0x11
	cmp	r1, #0
	blt	.L819	@cond_branch
	ldr	r4, .L843+0x4
	ldr	r7, [sp, #0x4]
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	add	r3, r0, #0
	add	r3, r3, #0xf0
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r5, r4, r0
.L820:
	asr	r2, r1, #0x10
	lsl	r1, r2, #0x1
	add	r0, r1, r4
	strh	r3, [r0]
	add	r1, r1, r5
	strh	r3, [r1]
	sub	r2, r2, #0x2
	lsl	r1, r2, #0x10
	cmp	r1, #0
	bge	.L820	@cond_branch
.L819:
	ldrh	r0, [r6, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3f
	ble	.L822	@cond_branch
	mov	r0, #0x40
	strh	r0, [r6, #0x14]
	ldrh	r0, [r6, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L823	@cond_branch
	ldrh	r0, [r6, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	b	.L824
.L844:
	.align	2, 0
.L843:
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	gSineTable
	.word	-0x10000
.L823:
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x10]
.L824:
	ldrh	r1, [r6, #0x10]
	lsl	r1, r1, #0x8
	ldrh	r0, [r6, #0xe]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xe
	ldrsh	r1, [r6, r2]
	cmp	r1, #0
	bne	.L812	@cond_branch
	mov	r3, #0x10
	ldrsh	r0, [r6, r3]
	cmp	r0, #0x10
	bne	.L812	@cond_branch
	strh	r1, [r6, #0xc]
	strh	r1, [r6, #0xe]
	b	.L838
.L822:
	ldrh	r0, [r6, #0x18]
	ldrh	r7, [r6, #0x16]
	add	r0, r0, r7
	strh	r0, [r6, #0x16]
	b	.L812
.L827:
	ldrh	r0, [r6, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L812	@cond_branch
	ldr	r1, .L845
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	mov	r0, #0x0
	strh	r0, [r6, #0xc]
	b	.L838
.L846:
	.align	2, 0
.L845:
	.word	gScanlineEffect
.L829:
	ldrh	r0, [r6, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L830	@cond_branch
	ldrh	r0, [r6, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	b	.L831
.L830:
	ldrh	r0, [r6, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r6, #0x10]
.L831:
	ldrh	r1, [r6, #0x10]
	lsl	r1, r1, #0x8
	ldrh	r0, [r6, #0xe]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xe
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x10
	bne	.L812	@cond_branch
	mov	r2, #0x10
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	bne	.L812	@cond_branch
	strh	r0, [r6, #0xc]
	strh	r0, [r6, #0xe]
.L838:
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L812
.L833:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L812:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 AnimTask_AcidArmor_Step,.Lfe80-AnimTask_AcidArmor_Step
	.align	2, 0
	.globl	AnimTask_DeepInhale
	.type	 AnimTask_DeepInhale,function
	.thumb_func
AnimTask_DeepInhale:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L848
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L848+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	ldr	r2, .L848+0x8
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L848+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L849:
	.align	2, 0
.L848:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	sDeepInhaleAffineAnimCmds
	.word	AnimTask_DeepInhale_Step
.Lfe81:
	.size	 AnimTask_DeepInhale,.Lfe81-AnimTask_DeepInhale
	.align	2, 0
	.type	 AnimTask_DeepInhale_Step,function
	.thumb_func
AnimTask_DeepInhale_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r2, .L857
	add	r3, r0, r2
	ldrh	r0, [r3, #0x8]
	add	r1, r0, #0x1
	mov	r5, #0x0
	strh	r1, [r3, #0x8]
	sub	r0, r0, #0x14
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r6, r2, #0
	cmp	r0, #0x16
	bhi	.L851	@cond_branch
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L855	@cond_branch
	strh	r5, [r3, #0xa]
	ldrh	r0, [r3, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	mov	r5, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L851	@cond_branch
	ldr	r2, .L857+0x4
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L857+0x8
	strh	r1, [r0, #0x24]
	b	.L855
.L858:
	.align	2, 0
.L857:
	.word	gTasks
	.word	gSprites
	.word	0xffff
.L851:
	ldr	r2, .L859
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x24]
.L855:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L856	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L856:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L860:
	.align	2, 0
.L859:
	.word	gSprites
.Lfe82:
	.size	 AnimTask_DeepInhale_Step,.Lfe82-AnimTask_DeepInhale_Step
	.align	2, 0
	.type	 InitYawnCloudPosition,function
	.thumb_func
InitYawnCloudPosition:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	add	r5, r2, #0
	add	r0, r3, #0
	ldr	r4, [sp, #0x14]
	ldr	r6, [sp, #0x18]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r2, r8
	strh	r1, [r2, #0x20]
	strh	r5, [r2, #0x22]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r1, #0x4
	mov	r3, r8
	strh	r2, [r3, #0x36]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	lsl	r2, r5, #0x4
	strh	r2, [r3, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	add	r1, r6, #0
	bl	__divsi3
	mov	r1, r8
	strh	r0, [r1, #0x3a]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	sub	r4, r4, r5
	lsl	r4, r4, #0x4
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__divsi3
	mov	r2, r8
	strh	r0, [r2, #0x3c]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 InitYawnCloudPosition,.Lfe83-InitYawnCloudPosition
	.align	2, 0
	.type	 UpdateYawnCloudPosition,function
	.thumb_func
UpdateYawnCloudPosition:
	ldrh	r1, [r0, #0x3a]
	ldrh	r2, [r0, #0x36]
	add	r1, r1, r2
	strh	r1, [r0, #0x36]
	ldrh	r2, [r0, #0x3c]
	ldrh	r3, [r0, #0x38]
	add	r2, r2, r3
	strh	r2, [r0, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r0, #0x20]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x14
	strh	r2, [r0, #0x22]
	bx	lr
.Lfe84:
	.size	 UpdateYawnCloudPosition,.Lfe84-UpdateYawnCloudPosition
	.align	2, 0
	.type	 AnimYawnCloud,function
	.thumb_func
AnimYawnCloud:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldrh	r6, [r4, #0x20]
	ldrh	r5, [r4, #0x22]
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L864
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	mov	r0, #0x20
	ldrsh	r1, [r4, r0]
	mov	r0, #0x22
	ldrsh	r2, [r4, r0]
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	str	r5, [sp]
	mov	r0, #0x40
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	add	r3, r6, #0
	bl	InitYawnCloudPosition
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L864+0x4
	str	r0, [r4, #0x1c]
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L865:
	.align	2, 0
.L864:
	.word	gBattleAnimArgs
	.word	AnimYawnCloud_Step
.Lfe85:
	.size	 AnimYawnCloud,.Lfe85-AnimYawnCloud
	.align	2, 0
	.type	 AnimYawnCloud_Step,function
	.thumb_func
AnimYawnCloud_Step:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	mov	r0, #0x2e
	ldrsh	r4, [r5, r0]
	lsl	r4, r4, #0x3
	mov	r0, #0xff
	and	r4, r4, r0
	add	r0, r5, #0
	bl	UpdateYawnCloudPosition
	add	r0, r4, #0
	mov	r1, #0x8
	bl	Sin
	strh	r0, [r5, #0x26]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x3a
	ble	.L867	@cond_branch
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L867	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x30]
	ldrh	r1, [r5, #0x32]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x32]
	mov	r0, #0x1
	and	r1, r1, r0
	add	r3, r5, #0
	add	r3, r3, #0x3e
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	sub	r0, r0, #0x6
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x3
	ble	.L867	@cond_branch
	add	r0, r5, #0
	bl	DestroySpriteAndMatrix
.L867:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 AnimYawnCloud_Step,.Lfe86-AnimYawnCloud_Step
	.align	2, 0
	.type	 AnimSmokeBallEscapeCloud,function
	.thumb_func
AnimSmokeBallEscapeCloud:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L872
	ldrh	r0, [r6, #0x6]
	strh	r0, [r5, #0x2e]
	ldrb	r1, [r6]
	add	r0, r5, #0
	bl	StartSpriteAffineAnim
	ldr	r0, .L872+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L871	@cond_branch
	ldrh	r0, [r6, #0x2]
	neg	r0, r0
	strh	r0, [r6, #0x2]
.L871:
	ldr	r4, .L872+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x4]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	ldr	r0, .L872+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L873:
	.align	2, 0
.L872:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	DestroyAnimSpriteAfterTimer
.Lfe87:
	.size	 AnimSmokeBallEscapeCloud,.Lfe87-AnimSmokeBallEscapeCloud
	.align	2, 0
	.type	 AnimTask_SlideMonForFocusBand_Step2,function
	.thumb_func
AnimTask_SlideMonForFocusBand_Step2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r7, #0x0
	ldr	r2, .L886
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	mov	r1, #0x14
	ldrsh	r0, [r3, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r8, r2
	cmp	r0, #0
	beq	.L875	@cond_branch
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L875	@cond_branch
	mov	r2, #0x1a
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	bne	.L876	@cond_branch
	ldrh	r0, [r3, #0x10]
	strh	r0, [r3, #0x1a]
	neg	r0, r0
	strh	r0, [r3, #0x10]
	b	.L877
.L887:
	.align	2, 0
.L886:
	.word	gTasks
.L876:
	strh	r7, [r3, #0x1a]
.L877:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	mov	r2, r8
	add	r1, r0, r2
	mov	r2, #0x1c
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L878	@cond_branch
	ldrh	r0, [r1, #0x12]
	strh	r0, [r1, #0x1c]
	neg	r0, r0
	strh	r0, [r1, #0x12]
	b	.L879
.L878:
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
.L879:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0xa]
.L875:
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	ldrh	r6, [r4, #0x16]
	ldrh	r7, [r4, #0x18]
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	ip, r2
	cmp	r0, #0
	beq	.L880	@cond_branch
	ldr	r3, .L888
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	lsr	r2, r6, #0x8
	ldrh	r0, [r4, #0x1a]
	sub	r0, r0, r2
	strh	r0, [r1, #0x24]
	add	r2, r3, #0
	b	.L881
.L889:
	.align	2, 0
.L888:
	.word	gSprites
.L880:
	ldr	r2, .L890
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	lsr	r1, r6, #0x8
	ldrh	r4, [r4, #0x1a]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
.L881:
	mov	r1, ip
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L882	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsr	r2, r7, #0x8
	ldrh	r0, [r4, #0x1c]
	sub	r0, r0, r2
	b	.L885
.L891:
	.align	2, 0
.L890:
	.word	gSprites
.L882:
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsr	r0, r7, #0x8
	ldrh	r4, [r4, #0x1c]
	add	r0, r0, r4
.L885:
	strh	r0, [r1, #0x26]
	mov	r2, ip
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bgt	.L884	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r1, .L892
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L884:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L893:
	.align	2, 0
.L892:
	.word	gAnimVisualTaskCount
.Lfe88:
	.size	 AnimTask_SlideMonForFocusBand_Step2,.Lfe88-AnimTask_SlideMonForFocusBand_Step2
	.align	2, 0
	.type	 AnimTask_SlideMonForFocusBand_Step1,function
	.thumb_func
AnimTask_SlideMonForFocusBand_Step1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r7, #0x0
	ldr	r2, .L906
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	mov	r1, #0x14
	ldrsh	r0, [r3, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r8, r2
	cmp	r0, #0
	beq	.L895	@cond_branch
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L895	@cond_branch
	mov	r2, #0x1a
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	bne	.L896	@cond_branch
	ldrh	r0, [r3, #0x10]
	strh	r0, [r3, #0x1a]
	neg	r0, r0
	strh	r0, [r3, #0x10]
	b	.L897
.L907:
	.align	2, 0
.L906:
	.word	gTasks
.L896:
	strh	r7, [r3, #0x1a]
.L897:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	mov	r2, r8
	add	r1, r0, r2
	mov	r2, #0x1c
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L898	@cond_branch
	ldrh	r0, [r1, #0x12]
	strh	r0, [r1, #0x1c]
	neg	r0, r0
	strh	r0, [r1, #0x12]
	b	.L899
.L898:
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
.L899:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0xa]
.L895:
	lsl	r3, r6, #0x2
	add	r0, r3, r6
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	ldrh	r2, [r4, #0xc]
	ldr	r1, .L908
	add	r0, r1, #0
	and	r0, r0, r2
	ldrh	r2, [r4, #0x16]
	add	r0, r0, r2
	lsl	r5, r0, #0x10
	lsr	r0, r5, #0x10
	mov	r9, r0
	ldrh	r0, [r4, #0xe]
	and	r1, r1, r0
	ldrh	r2, [r4, #0x18]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	ip, r3
	cmp	r0, #0
	beq	.L900	@cond_branch
	ldr	r3, .L908+0x4
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	lsr	r2, r5, #0x18
	ldrh	r0, [r4, #0x1a]
	sub	r0, r0, r2
	strh	r0, [r1, #0x24]
	add	r2, r3, #0
	b	.L901
.L909:
	.align	2, 0
.L908:
	.word	0x7fff
	.word	gSprites
.L900:
	ldr	r2, .L910
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	lsr	r1, r5, #0x18
	ldrh	r4, [r4, #0x1a]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
.L901:
	mov	r1, ip
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L902	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsr	r2, r7, #0x8
	ldrh	r0, [r4, #0x1c]
	sub	r0, r0, r2
	b	.L905
.L911:
	.align	2, 0
.L910:
	.word	gSprites
.L902:
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsr	r0, r7, #0x8
	ldrh	r4, [r4, #0x1c]
	add	r0, r0, r4
.L905:
	strh	r0, [r1, #0x26]
	mov	r2, ip
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r2, r0, r1
	mov	r0, r9
	strh	r0, [r2, #0x16]
	strh	r7, [r2, #0x18]
	mov	r1, #0x8
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bgt	.L904	@cond_branch
	mov	r0, #0x1e
	strh	r0, [r2, #0x8]
	mov	r0, #0x0
	strh	r0, [r2, #0x22]
	ldr	r0, .L912
	str	r0, [r2]
.L904:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L913:
	.align	2, 0
.L912:
	.word	AnimTask_SlideMonForFocusBand_Step2
.Lfe89:
	.size	 AnimTask_SlideMonForFocusBand_Step1,.Lfe89-AnimTask_SlideMonForFocusBand_Step1
	.align	2, 0
	.globl	AnimTask_SlideMonForFocusBand
	.type	 AnimTask_SlideMonForFocusBand,function
	.thumb_func
AnimTask_SlideMonForFocusBand:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L924
	mov	r8, r0
	lsl	r7, r6, #0x2
	add	r0, r7, r6
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	ldr	r1, .L924+0x4
	ldr	r2, .L924+0x8
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x26]
	ldr	r5, .L924+0xc
	ldrh	r0, [r5]
	strh	r0, [r4, #0x24]
	ldrh	r0, [r5]
	strh	r0, [r4, #0x8]
	ldrh	r0, [r5, #0xc]
	strh	r0, [r4, #0x22]
	mov	r3, #0x6
	ldrsh	r0, [r5, r3]
	cmp	r0, #0
	beq	.L915	@cond_branch
	ldrh	r0, [r4, #0x14]
	ldr	r3, .L924+0x10
	add	r1, r3, #0
	orr	r0, r0, r1
	strh	r0, [r4, #0x14]
.L915:
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L916	@cond_branch
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0xc]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0xe]
	mov	r3, r8
	add	r4, r7, #0
	b	.L917
.L925:
	.align	2, 0
.L924:
	.word	gTasks
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	-0x8000
.L916:
	mov	r7, #0x2
	ldrsh	r0, [r5, r7]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L918	@cond_branch
	ldrh	r1, [r5, #0x2]
	ldr	r0, .L926
	and	r0, r0, r1
	b	.L922
.L927:
	.align	2, 0
.L926:
	.word	0x7fff
.L918:
	ldrh	r0, [r5, #0x2]
	ldr	r2, .L928
	add	r1, r2, #0
	orr	r0, r0, r1
.L922:
	strh	r0, [r4, #0xc]
	ldr	r0, .L928+0x4
	mov	r3, #0x4
	ldrsh	r1, [r0, r3]
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	and	r1, r1, r2
	add	r5, r0, #0
	cmp	r1, #0
	beq	.L920	@cond_branch
	ldr	r3, .L928+0x8
	lsl	r4, r6, #0x2
	add	r1, r4, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldrh	r2, [r5, #0x4]
	ldr	r0, .L928+0xc
	and	r0, r0, r2
	b	.L923
.L929:
	.align	2, 0
.L928:
	.word	-0x8000
	.word	gBattleAnimArgs
	.word	gTasks
	.word	0x7fff
.L920:
	ldr	r3, .L930
	lsl	r4, r6, #0x2
	add	r1, r4, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldrh	r2, [r5, #0x4]
	ldr	r7, .L930+0x4
	add	r0, r7, #0
	orr	r0, r0, r2
.L923:
	strh	r0, [r1, #0xe]
.L917:
	add	r0, r4, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x18]
	strh	r1, [r0, #0x16]
	ldrh	r1, [r5, #0x8]
	strh	r1, [r0, #0x10]
	ldrh	r1, [r5, #0xa]
	strh	r1, [r0, #0x12]
	ldr	r1, .L930+0x8
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L931:
	.align	2, 0
.L930:
	.word	gTasks
	.word	-0x8000
	.word	AnimTask_SlideMonForFocusBand_Step1
.Lfe90:
	.size	 AnimTask_SlideMonForFocusBand,.Lfe90-AnimTask_SlideMonForFocusBand
	.align	2, 0
	.globl	AnimTask_SquishAndSweatDroplets
	.type	 AnimTask_SquishAndSweatDroplets,function
	.thumb_func
AnimTask_SquishAndSweatDroplets:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L937
	add	r5, r0, r1
	ldr	r4, .L937+0x4
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L933	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L933:
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	strh	r0, [r5, #0xa]
	strh	r0, [r5, #0xc]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0xe]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L934	@cond_branch
	ldr	r0, .L937+0x8
	b	.L936
.L938:
	.align	2, 0
.L937:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L934:
	ldr	r0, .L939
.L936:
	ldrb	r4, [r0]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x10]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x12]
	add	r0, r4, #0
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	ldr	r0, .L939+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r5, #0x26]
	ldr	r2, .L939+0x8
	add	r0, r5, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L939+0xc
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L940:
	.align	2, 0
.L939:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	sFacadeSquishAffineAnimCmds
	.word	AnimTask_SquishAndSweatDroplets_Step
.Lfe91:
	.size	 AnimTask_SquishAndSweatDroplets,.Lfe91-AnimTask_SquishAndSweatDroplets
	.align	2, 0
	.type	 AnimTask_SquishAndSweatDroplets_Step,function
	.thumb_func
AnimTask_SquishAndSweatDroplets_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L953
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L943	@cond_branch
	cmp	r0, #0x1
	beq	.L949	@cond_branch
	b	.L942
.L954:
	.align	2, 0
.L953:
	.word	gTasks
.L943:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L944	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	CreateSweatDroplets
.L944:
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x12
	bne	.L945	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	CreateSweatDroplets
.L945:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L942	@cond_branch
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L947	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L942
.L947:
	strh	r1, [r4, #0xa]
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L955
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	b	.L942
.L956:
	.align	2, 0
.L955:
	.word	sFacadeSquishAffineAnimCmds
.L949:
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L942	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L942:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe92:
	.size	 AnimTask_SquishAndSweatDroplets_Step,.Lfe92-AnimTask_SquishAndSweatDroplets_Step
	.align	2, 0
	.type	 CreateSweatDroplets,function
	.thumb_func
CreateSweatDroplets:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r2, .L968
	add	r4, r0, r2
	cmp	r1, #0
	bne	.L958	@cond_branch
	mov	r1, #0x12
	mov	r3, #0xec
	b	.L959
.L969:
	.align	2, 0
.L968:
	.word	gTasks
.L958:
	mov	r1, #0x1e
	mov	r3, #0x14
.L959:
	mov	r2, sp
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, r1
	sub	r0, r0, #0x4
	strh	r0, [r2, #0x2]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, r1
	add	r0, r0, #0x4
	strh	r0, [r2, #0x6]
	add	r2, sp, #0x8
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x12]
	add	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x12]
	add	r0, r0, r1
	add	r0, r0, #0x6
	strh	r0, [r2, #0x2]
	mov	r5, #0x0
	mov	r8, r2
	ldr	r7, .L970
.L963:
	lsl	r0, r5, #0x1
	add	r0, r0, sp
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r0, #0x1
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r3, #0x0
	ldrsh	r2, [r0, r3]
	ldrb	r3, [r4, #0x14]
	sub	r3, r3, #0x5
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L970+0x4
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x40
	beq	.L962	@cond_branch
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	mov	r0, #0x2
	cmp	r5, #0x1
	bhi	.L965	@cond_branch
	mov	r2, #0x2
	neg	r2, r2
	add	r0, r2, #0
.L965:
	strh	r0, [r1, #0x30]
	ldr	r0, .L970+0x8
	strh	r0, [r1, #0x32]
	strh	r6, [r1, #0x34]
	mov	r0, #0x2
	strh	r0, [r1, #0x36]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
.L962:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L963	@cond_branch
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L971:
	.align	2, 0
.L970:
	.word	gSprites
	.word	gFacadeSweatDropSpriteTemplate
	.word	0xffff
.Lfe93:
	.size	 CreateSweatDroplets,.Lfe93-CreateSweatDroplets
	.align	2, 0
	.type	 AnimFacadeSweatDrop,function
	.thumb_func
AnimFacadeSweatDrop:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L973	@cond_branch
	ldr	r3, .L974
	mov	r0, #0x36
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x34
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L973:
	pop	{r4}
	pop	{r0}
	bx	r0
.L975:
	.align	2, 0
.L974:
	.word	gTasks
.Lfe94:
	.size	 AnimFacadeSweatDrop,.Lfe94-AnimFacadeSweatDrop
	.align	2, 0
	.globl	AnimTask_FacadeColorBlend
	.type	 AnimTask_FacadeColorBlend,function
	.thumb_func
AnimTask_FacadeColorBlend:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L977
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r1, .L977+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0xa]
	ldrb	r0, [r1]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L977+0x8
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x5]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r2, #0
	add	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldr	r0, .L977+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L978:
	.align	2, 0
.L977:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gSprites
	.word	AnimTask_FacadeColorBlend_Step
.Lfe95:
	.size	 AnimTask_FacadeColorBlend,.Lfe95-AnimTask_FacadeColorBlend
	.align	2, 0
	.type	 AnimTask_FacadeColorBlend_Step,function
	.thumb_func
AnimTask_FacadeColorBlend_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L983
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L980	@cond_branch
	ldrh	r0, [r4, #0xc]
	ldr	r2, .L983+0x4
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r3, [r1]
	mov	r1, #0x10
	mov	r2, #0x8
	bl	BlendPalette
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x17
	ble	.L981	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
.L981:
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L982
.L984:
	.align	2, 0
.L983:
	.word	gTasks
	.word	sFacadeBlendColors
.L980:
	ldrh	r0, [r4, #0xc]
	mov	r1, #0x10
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlendPalette
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L982:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 AnimTask_FacadeColorBlend_Step,.Lfe96-AnimTask_FacadeColorBlend_Step
	.align	2, 0
	.globl	AnimTask_StatusClearedEffect
	.type	 AnimTask_StatusClearedEffect,function
	.thumb_func
AnimTask_StatusClearedEffect:
	push	{lr}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0xd0
	lsl	r2, r2, #0x1
	ldr	r1, .L986
	ldrb	r3, [r1]
	ldr	r1, .L986+0x4
	ldrb	r1, [r1]
	str	r1, [sp]
	mov	r1, #0xa
	str	r1, [sp, #0x4]
	mov	r1, #0x2
	str	r1, [sp, #0x8]
	mov	r1, #0x1e
	str	r1, [sp, #0xc]
	ldr	r1, .L986+0x8
	str	r1, [sp, #0x10]
	ldr	r1, .L986+0xc
	str	r1, [sp, #0x14]
	ldr	r1, .L986+0x10
	str	r1, [sp, #0x18]
	mov	r1, #0x0
	bl	StartMonScrollingBgMask
	add	sp, sp, #0x1c
	pop	{r0}
	bx	r0
.L987:
	.align	2, 0
.L986:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gCureBubblesGfx
	.word	gCureBubblesTilemap
	.word	gCureBubblesPal
.Lfe97:
	.size	 AnimTask_StatusClearedEffect,.Lfe97-AnimTask_StatusClearedEffect
	.align	2, 0
	.type	 AnimRoarNoiseLine,function
	.thumb_func
AnimRoarNoiseLine:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L995
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L989	@cond_branch
	ldr	r1, .L995+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
.L989:
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L995+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L990	@cond_branch
	mov	r0, #0xa0
	lsl	r0, r0, #0x2
	strh	r0, [r5, #0x2e]
	ldr	r0, .L995+0x8
	strh	r0, [r5, #0x30]
	b	.L991
.L996:
	.align	2, 0
.L995:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0xfd80
.L990:
	cmp	r0, #0x1
	bne	.L992	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0xa0
	lsl	r0, r0, #0x2
	strh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x30]
	b	.L991
.L992:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0xa0
	lsl	r0, r0, #0x2
	strh	r0, [r5, #0x2e]
.L991:
	ldr	r0, .L997
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L994	@cond_branch
	ldrh	r0, [r5, #0x2e]
	neg	r0, r0
	strh	r0, [r5, #0x2e]
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L994:
	ldr	r0, .L997+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L998:
	.align	2, 0
.L997:
	.word	gBattleAnimAttacker
	.word	AnimRoarNoiseLine_Step
.Lfe98:
	.size	 AnimRoarNoiseLine,.Lfe98-AnimRoarNoiseLine
	.align	2, 0
	.type	 AnimRoarNoiseLine_Step,function
	.thumb_func
AnimRoarNoiseLine_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x3a]
	add	r0, r0, r1
	strh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x30]
	ldrh	r3, [r2, #0x3c]
	add	r1, r1, r3
	strh	r1, [r2, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r2, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r2, #0x26]
	ldrh	r0, [r2, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xe
	bne	.L1000	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L1000:
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 AnimRoarNoiseLine_Step,.Lfe99-AnimRoarNoiseLine_Step
	.align	2, 0
	.globl	AnimTask_GlareEyeDots
	.type	 AnimTask_GlareEyeDots,function
	.thumb_func
AnimTask_GlareEyeDots:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1008
	add	r6, r1, r0
	mov	r1, #0x0
	mov	r0, #0xc
	strh	r0, [r6, #0x12]
	mov	r0, #0x3
	strh	r0, [r6, #0x14]
	strh	r1, [r6, #0x16]
	ldr	r5, .L1008+0x4
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1002	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1003	@cond_branch
	add	r0, r0, #0x3
.L1003:
	asr	r0, r0, #0x2
	add	r0, r4, r0
	b	.L1007
.L1009:
	.align	2, 0
.L1008:
	.word	gTasks
	.word	gBattleAnimAttacker
.L1002:
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1005	@cond_branch
	add	r0, r0, #0x3
.L1005:
	asr	r0, r0, #0x2
	sub	r0, r4, r0
.L1007:
	strh	r0, [r6, #0x1e]
	ldr	r5, .L1010
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1006	@cond_branch
	add	r0, r0, #0x3
.L1006:
	asr	r0, r0, #0x2
	sub	r0, r4, r0
	strh	r0, [r6, #0x20]
	ldr	r4, .L1010+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x24]
	ldr	r0, .L1010+0x8
	str	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1011:
	.align	2, 0
.L1010:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	AnimTask_GlareEyeDots_Step
.Lfe100:
	.size	 AnimTask_GlareEyeDots,.Lfe100-AnimTask_GlareEyeDots
	.align	2, 0
	.type	 AnimTask_GlareEyeDots_Step,function
	.thumb_func
AnimTask_GlareEyeDots_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L1035
	add	r5, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	cmp	r1, #0
	beq	.L1014	@cond_branch
	cmp	r1, #0x1
	bne	.LCB10510
	b	.L1029	@long jump
.LCB10510:
	b	.L1013
.L1036:
	.align	2, 0
.L1035:
	.word	gTasks
.L1014:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L1013	@cond_branch
	strh	r1, [r5, #0xa]
	mov	r1, #0x1e
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	mov	r3, #0x22
	ldrsh	r2, [r5, r3]
	mov	r4, #0x24
	ldrsh	r3, [r5, r4]
	ldrb	r4, [r5, #0x12]
	str	r4, [sp]
	ldrb	r4, [r5, #0xc]
	str	r4, [sp, #0x4]
	add	r4, sp, #0x10
	str	r4, [sp, #0x8]
	add	r4, r4, #0x2
	str	r4, [sp, #0xc]
	bl	GetGlareEyeDotCoords
	mov	r6, #0x0
	mov	r8, r4
	ldr	r4, .L1037
.L1019:
	add	r0, sp, #0x10
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r3, r8
	mov	r0, #0x0
	ldrsh	r2, [r3, r0]
	ldr	r0, .L1037+0x4
	mov	r3, #0x23
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x40
	beq	.L1018	@cond_branch
	mov	r1, #0x16
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L1021	@cond_branch
	cmp	r6, #0
	bne	.L1022	@cond_branch
	lsl	r2, r3, #0x4
	add	r1, r2, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r5, #0x14]
	neg	r0, r0
	strh	r0, [r1, #0x26]
	strh	r0, [r1, #0x24]
	b	.L1033
.L1038:
	.align	2, 0
.L1037:
	.word	gSprites
	.word	gGlareEyeDotSpriteTemplate
.L1022:
	lsl	r2, r3, #0x4
	add	r1, r2, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r5, #0x14]
	strh	r0, [r1, #0x26]
	ldrh	r0, [r5, #0x14]
	strh	r0, [r1, #0x24]
	b	.L1033
.L1021:
	cmp	r6, #0
	bne	.L1025	@cond_branch
	lsl	r2, r3, #0x4
	add	r1, r2, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r5, #0x14]
	neg	r0, r0
	strh	r0, [r1, #0x24]
	ldrh	r0, [r5, #0x14]
	b	.L1034
.L1025:
	lsl	r2, r3, #0x4
	add	r1, r2, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r5, #0x14]
	strh	r0, [r1, #0x24]
	ldrh	r0, [r5, #0x14]
	neg	r0, r0
.L1034:
	strh	r0, [r1, #0x26]
.L1033:
	ldr	r1, .L1039
	add	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	strh	r7, [r0, #0x30]
	mov	r1, #0xa
	strh	r1, [r0, #0x32]
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
.L1018:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x1
	bls	.L1019	@cond_branch
	ldrh	r2, [r5, #0xc]
	mov	r3, #0xc
	ldrsh	r1, [r5, r3]
	mov	r4, #0x12
	ldrsh	r0, [r5, r4]
	cmp	r1, r0
	bne	.L1028	@cond_branch
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
.L1028:
	add	r0, r2, #0x1
	strh	r0, [r5, #0xc]
	b	.L1013
.L1040:
	.align	2, 0
.L1039:
	.word	gSprites
.L1029:
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L1013	@cond_branch
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L1013:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 AnimTask_GlareEyeDots_Step,.Lfe101-AnimTask_GlareEyeDots_Step
	.align	2, 0
	.type	 GetGlareEyeDotCoords,function
	.thumb_func
GetGlareEyeDotCoords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	ldr	r6, [sp, #0x30]
	mov	r9, r6
	ldr	r6, [sp, #0x34]
	mov	sl, r6
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	ip, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r7, r2, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	str	r3, [sp, #0x4]
	lsl	r4, r4, #0x18
	lsr	r6, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r8, r5
	cmp	r5, #0
	bne	.L1042	@cond_branch
	mov	r2, r9
	strh	r0, [r2]
	mov	r6, sl
	strh	r1, [r6]
	b	.L1041
.L1042:
	cmp	r5, r6
	bcc	.L1043	@cond_branch
	mov	r0, r9
	strh	r2, [r0]
	mov	r1, sl
	strh	r3, [r1]
	b	.L1041
.L1043:
	sub	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r2, ip
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	lsl	r5, r1, #0x8
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	add	r1, r6, #0
	bl	__divsi3
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r5, r5, r0
	ldr	r2, [sp]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	lsl	r4, r1, #0x8
	ldr	r2, [sp, #0x4]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	add	r1, r6, #0
	bl	__divsi3
	mov	r6, r8
	mul	r6, r6, r0
	add	r0, r6, #0
	add	r4, r4, r0
	asr	r5, r5, #0x8
	mov	r0, r9
	strh	r5, [r0]
	asr	r4, r4, #0x8
	mov	r1, sl
	strh	r4, [r1]
.L1041:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe102:
	.size	 GetGlareEyeDotCoords,.Lfe102-GetGlareEyeDotCoords
	.align	2, 0
	.type	 AnimGlareEyeDot,function
	.thumb_func
AnimGlareEyeDot:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x24
	ble	.L1045	@cond_branch
	ldr	r3, .L1046
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L1045:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1047:
	.align	2, 0
.L1046:
	.word	gTasks
.Lfe103:
	.size	 AnimGlareEyeDot,.Lfe103-AnimGlareEyeDot
	.align	2, 0
	.type	 AnimAssistPawprint,function
	.thumb_func
AnimAssistPawprint:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L1049
	ldrh	r0, [r1]
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x36]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x2e]
	ldr	r1, .L1049+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1049+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1050:
	.align	2, 0
.L1049:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	InitAndRunAnimFastLinearTranslation
.Lfe104:
	.size	 AnimAssistPawprint,.Lfe104-AnimAssistPawprint
	.align	2, 0
	.globl	AnimTask_BarrageBall
	.type	 AnimTask_BarrageBall,function
	.thumb_func
AnimTask_BarrageBall:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	ldr	r1, .L1056
	add	r7, r0, r1
	ldr	r0, .L1056+0x4
	mov	sl, r0
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x1e]
	mov	r1, sl
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x20]
	ldr	r0, .L1056+0x8
	mov	r8, r0
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x22]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1052	@cond_branch
	add	r0, r0, #0x3
.L1052:
	asr	r0, r0, #0x2
	add	r0, r4, r0
	strh	r0, [r7, #0x24]
	ldr	r4, .L1056+0xc
	mov	r0, #0x1e
	ldrsh	r5, [r7, r0]
	mov	r1, #0x20
	ldrsh	r6, [r7, r1]
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	sub	r3, r3, #0x5
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x26]
	cmp	r0, #0x40
	beq	.L1053	@cond_branch
	ldr	r4, .L1056+0x10
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x10
	strh	r1, [r0, #0x2e]
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r7, #0x22]
	strh	r1, [r0, #0x32]
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r7, #0x24]
	strh	r1, [r0, #0x36]
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L1056+0x14
	strh	r1, [r0, #0x38]
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	InitAnimArcTranslation
	mov	r1, sl
	ldrb	r0, [r1]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1054	@cond_branch
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L1054:
	ldr	r0, .L1056+0x18
	str	r0, [r7]
	b	.L1055
.L1057:
	.align	2, 0
.L1056:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBarrageBallSpriteTemplate
	.word	gSprites
	.word	0xffe0
	.word	AnimTask_BarrageBall_Step
.L1053:
	mov	r0, r9
	bl	DestroyAnimVisualTask
.L1055:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe105:
	.size	 AnimTask_BarrageBall,.Lfe105-AnimTask_BarrageBall
	.align	2, 0
	.type	 AnimTask_BarrageBall_Step,function
	.thumb_func
AnimTask_BarrageBall_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L1073
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L1063	@cond_branch
	cmp	r1, #0x1
	bgt	.L1071	@cond_branch
	cmp	r1, #0
	beq	.L1060	@cond_branch
	b	.L1059
.L1074:
	.align	2, 0
.L1073:
	.word	gTasks
.L1071:
	cmp	r1, #0x2
	beq	.L1065	@cond_branch
	cmp	r1, #0x3
	beq	.L1068	@cond_branch
	b	.L1059
.L1060:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1059	@cond_branch
	strh	r1, [r4, #0xa]
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1075
	add	r0, r0, r1
	bl	TranslateAnimHorizontalArc
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L1059	@cond_branch
	b	.L1072
.L1076:
	.align	2, 0
.L1075:
	.word	gSprites
.L1063:
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1077
	add	r0, r0, r1
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1059	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	b	.L1072
.L1078:
	.align	2, 0
.L1077:
	.word	gSprites
.L1065:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1059	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r2, [r4, #0xc]
	add	r2, r2, #0x1
	strh	r2, [r4, #0xc]
	ldr	r5, .L1079
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r0, #0x1
	and	r2, r2, r0
	add	r1, r1, #0x3e
	lsl	r2, r2, #0x2
	ldrb	r3, [r1]
	sub	r0, r0, #0x6
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1]
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L1059	@cond_branch
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
.L1072:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1059
.L1080:
	.align	2, 0
.L1079:
	.word	gSprites
.L1068:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L1059:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 AnimTask_BarrageBall_Step,.Lfe106-AnimTask_BarrageBall_Step
	.align	2, 0
	.type	 AnimSmellingSaltsHand,function
	.thumb_func
AnimSmellingSaltsHand:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r0, .L1090
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r6, r0, #0
	cmp	r1, #0
	bne	.L1082	@cond_branch
	ldr	r0, .L1090+0x4
	b	.L1088
.L1091:
	.align	2, 0
.L1090:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1082:
	ldr	r0, .L1092
.L1088:
	ldrb	r5, [r0]
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r3, .L1092+0x4
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L1092+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	add	r1, r6, #0
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x3a]
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	mov	r1, #0x1
	cmp	r0, #0
	bne	.L1084	@cond_branch
	mov	r3, #0x1
	neg	r3, r3
	add	r1, r3, #0
.L1084:
	strh	r1, [r4, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L1086	@cond_branch
	ldrb	r2, [r4, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x47
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
	add	r0, r5, #0
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	b	.L1089
.L1093:
	.align	2, 0
.L1092:
	.word	gBattleAnimTarget
	.word	0x3ff
	.word	-0x400
.L1086:
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
.L1089:
	strh	r0, [r4, #0x20]
	ldr	r0, .L1094
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1095:
	.align	2, 0
.L1094:
	.word	AnimSmellingSaltsHand_Step
.Lfe107:
	.size	 AnimSmellingSaltsHand,.Lfe107-AnimSmellingSaltsHand
	.align	2, 0
	.type	 AnimSmellingSaltsHand_Step,function
	.thumb_func
AnimSmellingSaltsHand_Step:
	push	{lr}
	add	r2, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r2, r0]
	cmp	r1, #0x1
	beq	.L1101	@cond_branch
	cmp	r1, #0x1
	bgt	.L1111	@cond_branch
	cmp	r1, #0
	beq	.L1098	@cond_branch
	b	.L1097
.L1111:
	cmp	r1, #0x2
	beq	.L1103	@cond_branch
	cmp	r1, #0x3
	beq	.L1105	@cond_branch
	b	.L1097
.L1098:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1097	@cond_branch
	strh	r1, [r2, #0x30]
	ldrh	r0, [r2, #0x3c]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	bne	.L1097	@cond_branch
	b	.L1112
.L1101:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	bne	.L1097	@cond_branch
	b	.L1113
.L1103:
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	lsl	r1, r1, #0x2
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L1097	@cond_branch
.L1113:
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
.L1112:
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	b	.L1097
.L1105:
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	bne	.L1097	@cond_branch
	ldrh	r0, [r2, #0x3a]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x3a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1107	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	b	.L1097
.L1107:
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L1097:
	pop	{r0}
	bx	r0
.Lfe108:
	.size	 AnimSmellingSaltsHand_Step,.Lfe108-AnimSmellingSaltsHand_Step
	.align	2, 0
	.globl	AnimTask_SmellingSaltsSquish
	.type	 AnimTask_SmellingSaltsSquish,function
	.thumb_func
AnimTask_SmellingSaltsSquish:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r2, .L1117
	mov	r3, #0x0
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L1115	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimVisualTask
	b	.L1116
.L1118:
	.align	2, 0
.L1117:
	.word	gBattleAnimArgs
.L1115:
	ldr	r0, .L1119
	lsl	r4, r1, #0x2
	add	r4, r4, r1
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r2, #0x2]
	strh	r0, [r4, #0x8]
	ldrb	r0, [r2]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	ldr	r2, .L1119+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L1119+0x8
	str	r0, [r4]
.L1116:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1120:
	.align	2, 0
.L1119:
	.word	gTasks
	.word	sSmellingSaltsSquishAffineAnimCmds
	.word	AnimTask_SmellingSaltsSquish_Step
.Lfe109:
	.size	 AnimTask_SmellingSaltsSquish,.Lfe109-AnimTask_SmellingSaltsSquish
	.align	2, 0
	.type	 AnimTask_SmellingSaltsSquish_Step,function
	.thumb_func
AnimTask_SmellingSaltsSquish_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1129
	add	r4, r0, r1
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1122	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1123	@cond_branch
	ldr	r2, .L1129+0x4
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	b	.L1128
.L1130:
	.align	2, 0
.L1129:
	.word	gTasks
	.word	gSprites
.L1123:
	ldr	r2, .L1131
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L1131+0x4
.L1128:
	strh	r1, [r0, #0x24]
.L1122:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L1125	@cond_branch
	ldr	r2, .L1131
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x24]
	ldrh	r0, [r4, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1126	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1131+0x8
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1131+0xc
	bl	PrepareAffineAnimInTaskData
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0xc]
	b	.L1125
.L1132:
	.align	2, 0
.L1131:
	.word	gSprites
	.word	0xfffe
	.word	gTasks
	.word	sSmellingSaltsSquishAffineAnimCmds
.L1126:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L1125:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 AnimTask_SmellingSaltsSquish_Step,.Lfe110-AnimTask_SmellingSaltsSquish_Step
	.align	2, 0
	.type	 AnimSmellingSaltExclamation,function
	.thumb_func
AnimSmellingSaltExclamation:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1138
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1134	@cond_branch
	ldr	r4, .L1138+0x4
	b	.L1137
.L1139:
	.align	2, 0
.L1138:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1134:
	ldr	r4, .L1140
.L1137:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x22]
	mov	r1, #0x22
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x7
	bgt	.L1136	@cond_branch
	mov	r0, #0x8
	strh	r0, [r5, #0x22]
.L1136:
	mov	r2, #0x0
	strh	r2, [r5, #0x2e]
	ldr	r1, .L1140+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x30]
	strh	r2, [r5, #0x32]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x34]
	ldr	r0, .L1140+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1141:
	.align	2, 0
.L1140:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimSmellingSaltExclamation_Step
.Lfe111:
	.size	 AnimSmellingSaltExclamation,.Lfe111-AnimSmellingSaltExclamation
	.align	2, 0
	.type	 AnimSmellingSaltExclamation_Step,function
	.thumb_func
AnimSmellingSaltExclamation_Step:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x30
	ldrsh	r1, [r3, r2]
	cmp	r0, r1
	blt	.L1143	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	ldrh	r1, [r3, #0x32]
	add	r1, r1, #0x1
	mov	r0, #0x1
	and	r1, r1, r0
	strh	r1, [r3, #0x32]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r0]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	mov	r2, #0x32
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L1143	@cond_branch
	ldrh	r0, [r3, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1143	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L1143:
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 AnimSmellingSaltExclamation_Step,.Lfe112-AnimSmellingSaltExclamation_Step
	.align	2, 0
	.type	 AnimHelpingHandClap,function
	.thumb_func
AnimHelpingHandClap:
	push	{lr}
	add	r3, r0, #0
	ldr	r0, .L1149
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1146	@cond_branch
	ldrb	r2, [r3, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x47
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x3]
	mov	r0, #0x64
	strh	r0, [r3, #0x20]
	mov	r0, #0x1
	b	.L1148
.L1150:
	.align	2, 0
.L1149:
	.word	gBattleAnimArgs
.L1146:
	mov	r0, #0x8c
	strh	r0, [r3, #0x20]
	ldr	r0, .L1151
.L1148:
	strh	r0, [r3, #0x3c]
	mov	r0, #0x38
	strh	r0, [r3, #0x22]
	ldr	r0, .L1151+0x4
	str	r0, [r3, #0x1c]
	pop	{r0}
	bx	r0
.L1152:
	.align	2, 0
.L1151:
	.word	0xffff
	.word	AnimHelpingHandClap_Step
.Lfe113:
	.size	 AnimHelpingHandClap,.Lfe113-AnimHelpingHandClap
	.align	2, 0
	.type	 AnimHelpingHandClap_Step,function
	.thumb_func
AnimHelpingHandClap_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x8
	bls	.LCB11884
	b	.L1154	@long jump
.LCB11884:
	lsl	r0, r0, #0x2
	ldr	r1, .L1179
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1180:
	.align	2, 0
.L1179:
	.word	.L1175
	.align	2, 0
	.align	2, 0
.L1175:
	.word	.L1155
	.word	.L1158
	.word	.L1160
	.word	.L1162
	.word	.L1164
	.word	.L1166
	.word	.L1169
	.word	.L1171
	.word	.L1173
.L1155:
	mov	r3, #0x3c
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	ldrh	r1, [r4, #0x22]
	sub	r1, r1, r0
	strh	r1, [r4, #0x22]
	ldrh	r2, [r4, #0x30]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1156	@cond_branch
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
.L1156:
	add	r0, r2, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	beq	.LCB11929
	b	.L1154	@long jump
.LCB11929:
	b	.L1177
.L1158:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	beq	.LCB11941
	b	.L1154	@long jump
.LCB11941:
	b	.L1177
.L1160:
	ldrh	r2, [r4, #0x30]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x30]
	mov	r3, #0x3c
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r3, .L1181
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	ldrh	r1, [r4, #0x3c]
	mul	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0xc
	beq	.LCB11973
	b	.L1154	@long jump
.LCB11973:
	b	.L1177
.L1182:
	.align	2, 0
.L1181:
	.word	gSineTable
.L1162:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	beq	.LCB11991
	b	.L1154	@long jump
.LCB11991:
	b	.L1177
.L1164:
	ldrh	r2, [r4, #0x30]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x30]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r3, .L1183
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	ldrh	r1, [r4, #0x3c]
	mul	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0xc
	bne	.L1154	@cond_branch
	b	.L1178
.L1184:
	.align	2, 0
.L1183:
	.word	gSineTable
.L1166:
	ldrh	r2, [r4, #0x30]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x30]
	mov	r3, #0x3c
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r3, .L1185
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	ldrh	r1, [r4, #0x3c]
	mul	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0xf
	bne	.L1167	@cond_branch
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r3, .L1185+0x4
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L1185+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
.L1167:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x12
	bne	.L1154	@cond_branch
	b	.L1177
.L1186:
	.align	2, 0
.L1185:
	.word	gSineTable
	.word	0x3ff
	.word	-0x400
.L1169:
	mov	r3, #0x3c
	ldrsh	r0, [r4, r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	strh	r1, [r4, #0x20]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L1154	@cond_branch
	b	.L1177
.L1171:
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	ldrh	r3, [r4, #0x20]
	add	r0, r0, r3
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1154	@cond_branch
.L1177:
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
.L1178:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L1154
.L1173:
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L1154	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1154:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 AnimHelpingHandClap_Step,.Lfe114-AnimHelpingHandClap_Step
	.align	2, 0
	.globl	AnimTask_HelpingHandAttackerMovement
	.type	 AnimTask_HelpingHandAttackerMovement,function
	.thumb_func
AnimTask_HelpingHandAttackerMovement:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1195
	add	r6, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x26]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x1
	bne	.L1188	@cond_branch
	ldr	r5, .L1195+0x4
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r1, [r5]
	mov	r0, #0x2
	eor	r0, r0, r1
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	ble	.L1189	@cond_branch
	strh	r7, [r6, #0x24]
	b	.L1191
.L1196:
	.align	2, 0
.L1195:
	.word	gTasks
	.word	gBattleAnimAttacker
.L1189:
	ldr	r0, .L1197
	b	.L1194
.L1198:
	.align	2, 0
.L1197:
	.word	0xffff
.L1188:
	ldr	r0, .L1199
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1192	@cond_branch
	ldr	r0, .L1199+0x4
	b	.L1194
.L1200:
	.align	2, 0
.L1199:
	.word	gBattleAnimAttacker
	.word	0xffff
.L1192:
	mov	r0, #0x1
.L1194:
	strh	r0, [r6, #0x24]
.L1191:
	ldr	r0, .L1201
	str	r0, [r6]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1202:
	.align	2, 0
.L1201:
	.word	AnimTask_HelpingHandAttackerMovement_Step
.Lfe115:
	.size	 AnimTask_HelpingHandAttackerMovement,.Lfe115-AnimTask_HelpingHandAttackerMovement
	.align	2, 0
	.type	 AnimTask_HelpingHandAttackerMovement_Step,function
	.thumb_func
AnimTask_HelpingHandAttackerMovement_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1229
	add	r3, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x8
	bls	.LCB12284
	b	.L1204	@long jump
.LCB12284:
	lsl	r0, r0, #0x2
	ldr	r1, .L1229+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1230:
	.align	2, 0
.L1229:
	.word	gTasks
	.word	.L1224
	.align	2, 0
	.align	2, 0
.L1224:
	.word	.L1205
	.word	.L1207
	.word	.L1209
	.word	.L1211
	.word	.L1215
	.word	.L1217
	.word	.L1219
	.word	.L1221
	.word	.L1223
.L1205:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xd
	beq	.LCB12311
	b	.L1204	@long jump
.LCB12311:
	b	.L1226
.L1207:
	ldr	r2, .L1231
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	ldrh	r0, [r1, #0x24]
	sub	r0, r0, r2
	strh	r0, [r1, #0x24]
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	beq	.LCB12335
	b	.L1204	@long jump
.LCB12335:
	b	.L1226
.L1232:
	.align	2, 0
.L1231:
	.word	gSprites
.L1209:
	ldr	r2, .L1233
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x24
	ldrsh	r2, [r3, r0]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
	strh	r0, [r1, #0x24]
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L1204	@cond_branch
	b	.L1226
.L1234:
	.align	2, 0
.L1233:
	.word	gSprites
.L1211:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L1204	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
	ldrh	r1, [r3, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	bne	.L1227	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0x8]
	b	.L1204
.L1215:
	ldr	r2, .L1235
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x24]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L1204	@cond_branch
	b	.L1226
.L1236:
	.align	2, 0
.L1235:
	.word	gSprites
.L1217:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L1204	@cond_branch
	b	.L1226
.L1219:
	ldr	r2, .L1237
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x24
	ldrsh	r2, [r3, r0]
	lsl	r2, r2, #0x2
	ldrh	r0, [r1, #0x24]
	sub	r0, r0, r2
	b	.L1228
.L1238:
	.align	2, 0
.L1237:
	.word	gSprites
.L1221:
	ldr	r2, .L1239
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	lsl	r0, r0, #0x2
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
.L1228:
	strh	r0, [r1, #0x24]
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L1204	@cond_branch
.L1226:
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
.L1227:
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	b	.L1204
.L1240:
	.align	2, 0
.L1239:
	.word	gSprites
.L1223:
	ldr	r2, .L1241
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1204:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1242:
	.align	2, 0
.L1241:
	.word	gSprites
.Lfe116:
	.size	 AnimTask_HelpingHandAttackerMovement_Step,.Lfe116-AnimTask_HelpingHandAttackerMovement_Step
	.align	2, 0
	.type	 AnimForesightMagnifyingGlass,function
	.thumb_func
AnimForesightMagnifyingGlass:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1248
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1244	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L1248+0x4
	b	.L1247
.L1249:
	.align	2, 0
.L1248:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1244:
	ldr	r0, .L1250
.L1247:
	ldrb	r0, [r0]
	strh	r0, [r4, #0x3c]
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1246	@cond_branch
	ldrb	r0, [r4, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r4, #0x3]
.L1246:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSpriteBGPriority
	mov	r2, #0x3
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
	ldrb	r0, [r4, #0x1]
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	ldr	r0, .L1250+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1251:
	.align	2, 0
.L1250:
	.word	gBattleAnimTarget
	.word	AnimForesightMagnifyingGlass_Step
.Lfe117:
	.size	 AnimForesightMagnifyingGlass,.Lfe117-AnimForesightMagnifyingGlass
	.align	2, 0
	.type	 AnimForesightMagnifyingGlass_Step,function
	.thumb_func
AnimForesightMagnifyingGlass_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB12627
	b	.L1253	@long jump
.LCB12627:
	lsl	r0, r0, #0x2
	ldr	r1, .L1289
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1290:
	.align	2, 0
.L1289:
	.word	.L1282
	.align	2, 0
	.align	2, 0
.L1282:
	.word	.L1254
	.word	.L1268
	.word	.L1275
	.word	.L1277
	.word	.L1281
.L1254:
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x5
	bhi	.L1256	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1291
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1292:
	.align	2, 0
.L1291:
	.word	.L1263
	.align	2, 0
	.align	2, 0
.L1263:
	.word	.L1258
	.word	.L1259
	.word	.L1260
	.word	.L1261
	.word	.L1258
	.word	.L1262
.L1256:
	mov	r0, #0x0
	strh	r0, [r4, #0x3a]
.L1258:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	b	.L1284
.L1259:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x4
	b	.L1285
.L1260:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	b	.L1284
.L1261:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
.L1284:
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x4
.L1285:
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	b	.L1255
.L1262:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
.L1255:
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x4
	bne	.L1264	@cond_branch
	mov	r0, #0x18
	b	.L1286
.L1264:
	cmp	r0, #0x5
	bne	.L1266	@cond_branch
	mov	r0, #0x6
	b	.L1286
.L1266:
	mov	r0, #0xc
.L1286:
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	strh	r1, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	b	.L1287
.L1268:
	add	r0, r4, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1253	@cond_branch
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	beq	.L1272	@cond_branch
	cmp	r0, #0x5
	beq	.L1273	@cond_branch
	ldrh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x26]
	strh	r1, [r4, #0x24]
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	b	.L1288
.L1272:
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x26]
	strh	r1, [r4, #0x24]
	strh	r1, [r4, #0x38]
.L1288:
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	b	.L1253
.L1273:
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	mov	r1, #0x10
	strh	r1, [r4, #0x30]
	strh	r0, [r4, #0x32]
	mov	r0, #0x3
	strh	r0, [r4, #0x38]
	b	.L1253
.L1275:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L1253	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	b	.L1253
.L1277:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1278	@cond_branch
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	b	.L1279
.L1278:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
.L1279:
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x30]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x20
	bne	.L1253	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L1287:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	b	.L1253
.L1281:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1253:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe118:
	.size	 AnimForesightMagnifyingGlass_Step,.Lfe118-AnimForesightMagnifyingGlass_Step
	.align	2, 0
	.type	 AnimMeteorMashStar_Step,function
	.thumb_func
AnimMeteorMashStar_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	mul	r0, r0, r1
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	add	r5, r0, #0
	strh	r5, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	mul	r0, r0, r1
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	add	r3, r0, #0
	strh	r3, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1294	@cond_branch
	ldr	r0, .L1296
	ldrh	r1, [r4, #0x20]
	add	r1, r1, r5
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r4, #0x22]
	add	r2, r2, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0x5
	bl	CreateSprite
.L1294:
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L1295	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1295:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1297:
	.align	2, 0
.L1296:
	.word	gMiniTwinklingStarSpriteTemplate
.Lfe119:
	.size	 AnimMeteorMashStar_Step,.Lfe119-AnimMeteorMashStar_Step
	.align	2, 0
	.type	 AnimMeteorMashStar,function
	.thumb_func
AnimMeteorMashStar:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L1302
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1299	@cond_branch
	ldr	r2, .L1302+0x4
	ldrh	r1, [r5, #0x20]
	ldrh	r0, [r2]
	sub	r0, r1, r0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r2, #0x4]
	sub	r1, r1, r0
	b	.L1301
.L1303:
	.align	2, 0
.L1302:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L1299:
	ldr	r2, .L1304
	ldrh	r1, [r5, #0x20]
	ldrh	r0, [r2]
	add	r0, r1, r0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r2, #0x4]
	add	r1, r1, r0
.L1301:
	strh	r1, [r5, #0x32]
	add	r3, r2, #0
	ldrh	r1, [r5, #0x22]
	ldrh	r2, [r3, #0x2]
	add	r2, r1, r2
	strh	r2, [r5, #0x30]
	ldrh	r0, [r3, #0x6]
	add	r1, r1, r0
	strh	r1, [r5, #0x34]
	ldrh	r0, [r3, #0x8]
	strh	r0, [r5, #0x36]
	ldrh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x20]
	strh	r2, [r5, #0x22]
	ldr	r0, .L1304+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1305:
	.align	2, 0
.L1304:
	.word	gBattleAnimArgs
	.word	AnimMeteorMashStar_Step
.Lfe120:
	.size	 AnimMeteorMashStar,.Lfe120-AnimMeteorMashStar
	.align	2, 0
	.globl	AnimTask_MonToSubstitute
	.type	 AnimTask_MonToSubstitute,function
	.thumb_func
AnimTask_MonToSubstitute:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r2, r5, #0
	ldr	r0, .L1318
	mov	r9, r0
	lsl	r7, r6, #0x2
	add	r0, r7, r6
	lsl	r0, r0, #0x3
	mov	r8, r0
	mov	r4, r8
	add	r4, r4, r9
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1307	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	b	.L1317
.L1319:
	.align	2, 0
.L1318:
	.word	gTasks
.L1307:
	cmp	r0, #0x1
	bne	.L1309	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x60
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0xd
	strh	r0, [r4, #0xc]
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	mov	r0, #0xc
	ldrsh	r2, [r4, r0]
	add	r0, r5, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L1308	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	add	r0, r5, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L1320
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1317:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1308
.L1321:
	.align	2, 0
.L1320:
	.word	gSprites
.L1309:
	ldr	r0, .L1322
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	LoadBattleMonGfxAndAnimate
	add	r3, r7, #0
	mov	r4, r9
	mov	r1, #0xf
	mov	r2, r8
	add	r0, r4, r2
	add	r0, r0, #0x26
	mov	r2, #0x0
.L1315:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L1315	@cond_branch
	add	r0, r3, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L1322+0x4
	str	r1, [r0]
.L1308:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1323:
	.align	2, 0
.L1322:
	.word	gBattleAnimAttacker
	.word	AnimTask_MonToSubstituteDoll
.Lfe121:
	.size	 AnimTask_MonToSubstitute,.Lfe121-AnimTask_MonToSubstitute
	.align	2, 0
	.type	 AnimTask_MonToSubstituteDoll,function
	.thumb_func
AnimTask_MonToSubstituteDoll:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L1341
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L1327	@cond_branch
	cmp	r5, #0x1
	bgt	.L1339	@cond_branch
	cmp	r5, #0
	beq	.L1326	@cond_branch
	b	.L1325
.L1342:
	.align	2, 0
.L1341:
	.word	gTasks
.L1339:
	cmp	r5, #0x2
	beq	.L1331	@cond_branch
	cmp	r5, #0x3
	beq	.L1334	@cond_branch
	b	.L1325
.L1326:
	ldr	r0, .L1343
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L1343+0x4
	strh	r0, [r1, #0x26]
	mov	r0, #0xc8
	strh	r0, [r1, #0x24]
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	sub	r0, r0, #0xcd
	and	r0, r0, r2
	strb	r0, [r1]
	strh	r5, [r4, #0x1c]
	b	.L1340
.L1344:
	.align	2, 0
.L1343:
	.word	gSprites
	.word	0xff38
.L1327:
	ldrh	r1, [r4, #0x1c]
	add	r1, r1, #0x70
	mov	r5, #0x0
	strh	r1, [r4, #0x1c]
	ldr	r2, .L1345
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r3, [r2, #0x26]
	add	r1, r1, r3
	strh	r1, [r2, #0x26]
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	blt	.L1328	@cond_branch
	strh	r5, [r2, #0x24]
.L1328:
	mov	r1, #0x26
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	ble	.L1329	@cond_branch
	strh	r5, [r2, #0x26]
.L1329:
	mov	r3, #0x26
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L1325	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x76
	bl	PlaySE12WithPanning
	ldr	r1, .L1345+0x4
	add	r0, r1, #0
	ldrh	r2, [r4, #0x1c]
	add	r0, r0, r2
	strh	r0, [r4, #0x1c]
	b	.L1340
.L1346:
	.align	2, 0
.L1345:
	.word	gSprites
	.word	-0x800
.L1331:
	ldrh	r0, [r4, #0x1c]
	sub	r0, r0, #0x70
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1332	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
.L1332:
	ldr	r0, .L1347
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r4, #0x1c]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x18
	ldrh	r0, [r1, #0x26]
	sub	r0, r0, r2
	strh	r0, [r1, #0x26]
	mov	r3, #0x1c
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L1325	@cond_branch
.L1340:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1325
.L1348:
	.align	2, 0
.L1347:
	.word	gSprites
.L1334:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x70
	strh	r0, [r4, #0x1c]
	ldr	r2, .L1349
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r1, #0x26]
	add	r0, r0, r2
	strh	r0, [r1, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L1335	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x26]
.L1335:
	mov	r3, #0x26
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L1325	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x76
	bl	PlaySE12WithPanning
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L1325:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1350:
	.align	2, 0
.L1349:
	.word	gSprites
.Lfe122:
	.size	 AnimTask_MonToSubstituteDoll,.Lfe122-AnimTask_MonToSubstituteDoll
	.align	2, 0
	.type	 AnimBlockX,function
	.thumb_func
AnimBlockX:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L1354
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1352	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSpriteSubpriority
	sub	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldr	r4, .L1354+0x4
	b	.L1353
.L1355:
	.align	2, 0
.L1354:
	.word	gBattleAnimTarget
	.word	0xff70
.L1352:
	ldrb	r0, [r4]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldr	r4, .L1356
.L1353:
	ldr	r0, .L1356+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	strh	r4, [r5, #0x26]
	ldr	r0, .L1356+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1357:
	.align	2, 0
.L1356:
	.word	0xffa0
	.word	gBattleAnimTarget
	.word	AnimBlockX_Step
.Lfe123:
	.size	 AnimBlockX,.Lfe123-AnimBlockX
	.align	2, 0
	.type	 AnimBlockX_Step,function
	.thumb_func
AnimBlockX_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB13565
	b	.L1359	@long jump
.LCB13565:
	lsl	r0, r0, #0x2
	ldr	r1, .L1374
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1375:
	.align	2, 0
.L1374:
	.word	.L1371
	.align	2, 0
	.align	2, 0
.L1371:
	.word	.L1360
	.word	.L1362
	.word	.L1364
	.word	.L1366
	.word	.L1368
.L1360:
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0xa
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L1359	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xc6
	bl	PlaySE12WithPanning
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	b	.L1373
.L1362:
	ldrh	r1, [r4, #0x30]
	add	r1, r1, #0x4
	mov	r5, #0x0
	strh	r1, [r4, #0x30]
	ldr	r2, .L1376
	mov	r3, #0x30
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	neg	r0, r0
	strh	r0, [r4, #0x26]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L1359	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xc6
	bl	PlaySE12WithPanning
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x26]
	b	.L1373
.L1377:
	.align	2, 0
.L1376:
	.word	gSineTable
.L1364:
	ldrh	r1, [r4, #0x30]
	add	r1, r1, #0x6
	mov	r3, #0x0
	strh	r1, [r4, #0x30]
	ldr	r2, .L1378
	mov	r5, #0x30
	ldrsh	r0, [r4, r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	neg	r0, r0
	strh	r0, [r4, #0x26]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L1359	@cond_branch
	strh	r3, [r4, #0x30]
	strh	r3, [r4, #0x26]
	b	.L1373
.L1379:
	.align	2, 0
.L1378:
	.word	gSineTable
.L1366:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L1359	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xb9
	bl	PlaySE12WithPanning
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
.L1373:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L1359
.L1368:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L1359	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x32]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x32]
	mov	r0, #0x1
	and	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	sub	r0, r0, #0x6
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7
	bne	.L1359	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1359:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe124:
	.size	 AnimBlockX_Step,.Lfe124-AnimBlockX_Step
	.align	2, 0
	.globl	AnimTask_OdorSleuthMovement
	.type	 AnimTask_OdorSleuthMovement,function
	.thumb_func
AnimTask_OdorSleuthMovement:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x1
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	str	r1, [sp]
	asr	r6, r0, #0x10
	cmp	r6, #0
	blt	.L1385	@cond_branch
	mov	r0, #0x1
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r9, r1
	asr	r1, r0, #0x10
	cmp	r1, #0
	bge	.L1382	@cond_branch
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L1386
	add	r0, r0, r1
	bl	DestroySpriteWithActiveSheet
.L1385:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	b	.L1380
.L1387:
	.align	2, 0
.L1386:
	.word	gSprites
.L1382:
	ldr	r4, .L1388
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r0, r4
	ldrh	r0, [r5, #0x24]
	add	r0, r0, #0x18
	mov	r1, #0x0
	strh	r0, [r5, #0x24]
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r6, r0, r4
	ldrh	r0, [r6, #0x24]
	sub	r0, r0, #0x18
	strh	r0, [r6, #0x24]
	strh	r1, [r5, #0x2e]
	strh	r1, [r6, #0x2e]
	strh	r1, [r5, #0x30]
	strh	r1, [r6, #0x30]
	strh	r1, [r5, #0x32]
	strh	r1, [r6, #0x32]
	mov	r0, #0x10
	strh	r0, [r5, #0x34]
	ldr	r0, .L1388+0x4
	strh	r0, [r6, #0x34]
	strh	r1, [r5, #0x36]
	mov	r0, #0x80
	strh	r0, [r6, #0x36]
	mov	r0, #0x18
	strh	r0, [r5, #0x38]
	strh	r0, [r6, #0x38]
	strh	r7, [r5, #0x3a]
	strh	r7, [r6, #0x3a]
	strh	r1, [r5, #0x3c]
	strh	r1, [r6, #0x3c]
	ldr	r2, .L1388+0x8
	lsl	r3, r7, #0x2
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	ldr	r0, .L1388+0xc
	ldr	r1, [r0]
	ldr	r0, .L1388+0x10
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	mov	ip, r4
	mov	sl, r2
	mov	r8, r3
	cmp	r0, #0
	bne	.L1383	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r2, r6, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L1384
.L1389:
	.align	2, 0
.L1388:
	.word	gSprites
	.word	0xfff0
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimTarget
.L1383:
	add	r1, r5, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
.L1384:
	mov	r1, r9
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	mov	r0, ip
	add	r4, r2, r0
	ldrb	r1, [r4, #0x1]
	mov	r3, #0xd
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldr	r1, [sp]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, ip
	add	r4, r1, r0
	ldrb	r0, [r4, #0x1]
	and	r3, r3, r0
	strb	r3, [r4, #0x1]
	mov	r3, ip
	add	r3, r3, #0x1c
	add	r2, r2, r3
	ldr	r0, .L1390
	str	r0, [r2]
	add	r1, r1, r3
	str	r0, [r1]
	mov	r1, r8
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldr	r1, .L1390+0x4
	str	r1, [r0]
.L1380:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1391:
	.align	2, 0
.L1390:
	.word	MoveOdorSleuthClone
	.word	AnimTask_OdorSleuthMovementWaitFinish
.Lfe125:
	.size	 AnimTask_OdorSleuthMovement,.Lfe125-AnimTask_OdorSleuthMovement
	.align	2, 0
	.type	 AnimTask_OdorSleuthMovementWaitFinish,function
	.thumb_func
AnimTask_OdorSleuthMovementWaitFinish:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1394
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1393	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L1393:
	pop	{r0}
	bx	r0
.L1395:
	.align	2, 0
.L1394:
	.word	gTasks
.Lfe126:
	.size	 AnimTask_OdorSleuthMovementWaitFinish,.Lfe126-AnimTask_OdorSleuthMovementWaitFinish
	.align	2, 0
	.type	 MoveOdorSleuthClone,function
	.thumb_func
MoveOdorSleuthClone:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1397	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldr	r0, .L1407
	ldr	r1, [r0]
	ldr	r0, .L1407+0x4
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1397	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1d
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L1397:
	ldrh	r0, [r4, #0x34]
	ldrh	r1, [r4, #0x36]
	add	r0, r0, r1
	mov	r5, #0x0
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x36]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1400	@cond_branch
	cmp	r0, #0x1
	beq	.L1402	@cond_branch
	b	.L1399
.L1408:
	.align	2, 0
.L1407:
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimTarget
.L1400:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	bne	.L1399	@cond_branch
	strh	r5, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L1399
.L1402:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L1399	@cond_branch
	strh	r5, [r4, #0x32]
	ldrh	r0, [r4, #0x38]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1399	@cond_branch
	ldr	r3, .L1409
	mov	r2, #0x3c
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySpriteWithActiveSheet
.L1399:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1410:
	.align	2, 0
.L1409:
	.word	gTasks
.Lfe127:
	.size	 MoveOdorSleuthClone,.Lfe127-MoveOdorSleuthClone
	.align	2, 0
	.globl	AnimTask_GetReturnPowerLevel
	.type	 AnimTask_GetReturnPowerLevel,function
	.thumb_func
AnimTask_GetReturnPowerLevel:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r3, .L1416
	mov	r2, #0x0
	strh	r2, [r3, #0xe]
	ldr	r1, .L1416+0x4
	ldrb	r0, [r1]
	ldrb	r1, [r1]
	add	r0, r1, #0
	sub	r0, r0, #0x3d
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r1, #0
	cmp	r0, #0x1e
	bhi	.L1413	@cond_branch
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
.L1413:
	add	r0, r2, #0
	sub	r0, r0, #0x5c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6c
	bhi	.L1414	@cond_branch
	mov	r0, #0x2
	strh	r0, [r3, #0xe]
.L1414:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xc8
	bls	.L1415	@cond_branch
	mov	r0, #0x3
	strh	r0, [r3, #0xe]
.L1415:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L1417:
	.align	2, 0
.L1416:
	.word	gBattleAnimArgs
	.word	gAnimFriendship
.Lfe128:
	.size	 AnimTask_GetReturnPowerLevel,.Lfe128-AnimTask_GetReturnPowerLevel
	.align	2, 0
	.globl	AnimTask_SnatchOpposingMonMove
	.type	 AnimTask_SnatchOpposingMonMove,function
	.thumb_func
AnimTask_SnatchOpposingMonMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L1455
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x4
	bls	.LCB14202
	b	.L1419	@long jump
.LCB14202:
	lsl	r0, r0, #0x2
	ldr	r1, .L1455+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1456:
	.align	2, 0
.L1455:
	.word	gTasks
	.word	.L1450
	.align	2, 0
	.align	2, 0
.L1450:
	.word	.L1420
	.word	.L1424
	.word	.L1432
	.word	.L1441
	.word	.L1444
.L1420:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1457
	mov	r2, r8
	lsl	r4, r2, #0x2
	add	r0, r4, r2
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	mov	r3, #0x80
	lsl	r3, r3, #0x4
	add	r0, r3, #0
	ldrh	r1, [r6, #0xa]
	add	r0, r0, r1
	strh	r0, [r6, #0xa]
	ldr	r0, .L1457+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r9, r4
	cmp	r0, #0
	bne	.L1421	@cond_branch
	ldr	r2, .L1457+0x8
	lsl	r3, r7, #0x4
	add	r1, r3, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r6, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r4, [r1, #0x24]
	add	r0, r0, r4
	strh	r0, [r1, #0x24]
	b	.L1422
.L1458:
	.align	2, 0
.L1457:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
.L1421:
	ldr	r3, .L1459
	lsl	r4, r7, #0x4
	add	r2, r4, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r6, #0xa]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r2, r3, #0
	add	r3, r4, #0
.L1422:
	ldr	r1, .L1459+0x4
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrb	r0, [r4, #0xa]
	strh	r0, [r4, #0xa]
	add	r1, r3, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x24]
	ldrh	r1, [r1, #0x20]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	add	r0, r0, r1
	mov	r1, #0x98
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.LCB14323
	b	.L1419	@long jump
.LCB14323:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1419
.L1460:
	.align	2, 0
.L1459:
	.word	gSprites
	.word	gTasks
.L1424:
	ldr	r4, .L1461
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1425	@cond_branch
	ldr	r7, .L1461+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L1461+0x8
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	mov	sl, r0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x1
	bl	GetMonData
	mov	r9, r0
	ldr	r0, .L1461+0xc
	ldr	r0, [r0]
	ldrb	r2, [r4]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L1426	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	b	.L1427
.L1462:
	.align	2, 0
.L1461:
	.word	gBattleAnimAttacker
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleSpritesDataPtr
.L1426:
	ldrh	r5, [r1, #0x2]
.L1427:
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L1463
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r7, #0x0
	mov	r6, #0x88
	lsl	r6, r6, #0x1
	b	.L1428
.L1464:
	.align	2, 0
.L1463:
	.word	gSprites
.L1425:
	ldr	r7, .L1465
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L1465+0x4
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	mov	sl, r0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x1
	bl	GetMonData
	mov	r9, r0
	ldr	r0, .L1465+0x8
	ldr	r0, [r0]
	ldrb	r2, [r4]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L1429	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	b	.L1430
.L1466:
	.align	2, 0
.L1465:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
.L1429:
	ldrh	r5, [r1, #0x2]
.L1430:
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L1467
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r7, #0x1
	ldr	r6, .L1467+0x4
.L1428:
	ldr	r0, .L1467+0x8
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r6, #0x10
	asr	r3, r3, #0x10
	str	r0, [sp]
	str	r4, [sp, #0x4]
	mov	r2, sl
	str	r2, [sp, #0x8]
	mov	r4, r9
	str	r4, [sp, #0xc]
	ldr	r4, .L1467+0xc
	ldrb	r0, [r4]
	str	r0, [sp, #0x10]
	mov	r0, #0x0
	str	r0, [sp, #0x14]
	add	r0, r5, #0
	add	r1, r7, #0
	mov	r2, #0x0
	bl	CreateAdditionalMonSpriteForMoveAnim
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1467+0x10
	ldr	r1, [r0]
	ldrb	r0, [r4]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L1431	@cond_branch
	ldr	r1, .L1467
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r2, #0
	orr	r0, r0, r1
	ldr	r3, .L1467+0x14
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
.L1431:
	ldr	r0, .L1467+0x18
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r5, [r1, #0x26]
	b	.L1452
.L1468:
	.align	2, 0
.L1467:
	.word	gSprites
	.word	0xffe0
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleSpritesDataPtr
	.word	0x7fff
	.word	gTasks
.L1432:
	ldr	r1, .L1469
	mov	r0, r8
	lsl	r4, r0, #0x2
	add	r0, r4, r0
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r0, [r6, #0x26]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	add	r0, r1, #0
	ldrh	r2, [r6, #0xa]
	add	r0, r0, r2
	strh	r0, [r6, #0xa]
	ldr	r0, .L1469+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r9, r4
	cmp	r0, #0
	bne	.L1433	@cond_branch
	ldr	r3, .L1469+0x8
	lsl	r4, r5, #0x4
	add	r2, r4, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r6, #0xa]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r2, r3, #0
	add	r3, r4, #0
	b	.L1434
.L1470:
	.align	2, 0
.L1469:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
.L1433:
	ldr	r2, .L1471
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r6, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r4, [r1, #0x24]
	add	r0, r0, r4
	strh	r0, [r1, #0x24]
.L1434:
	ldr	r1, .L1471+0x4
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrb	r0, [r6, #0xa]
	strh	r0, [r6, #0xa]
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x24]
	ldrh	r1, [r1, #0x20]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r1, #0x24
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L1435	@cond_branch
	ldr	r0, .L1471+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1436	@cond_branch
	lsl	r4, r5, #0x10
	asr	r4, r4, #0x10
	ldr	r0, .L1471+0xc
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bge	.L1435	@cond_branch
	b	.L1454
.L1472:
	.align	2, 0
.L1471:
	.word	gSprites
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L1436:
	lsl	r4, r5, #0x10
	asr	r4, r4, #0x10
	ldr	r0, .L1473
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	ble	.L1435	@cond_branch
.L1454:
	ldrh	r0, [r6, #0x24]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x24]
	ldr	r1, .L1473+0x4
	ldr	r0, .L1473+0x8
	strh	r0, [r1, #0xe]
.L1435:
	lsl	r0, r5, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0xe
	add	r0, r0, r2
	mov	r1, #0x98
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.LCB14769
	b	.L1419	@long jump
.LCB14769:
	ldr	r0, .L1473+0xc
	mov	r1, r9
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
	b	.L1452
.L1474:
	.align	2, 0
.L1473:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0xffff
	.word	gTasks
.L1441:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1475
	mov	r3, r8
	lsl	r4, r3, #0x2
	add	r0, r4, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x26]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r5, .L1475+0x4
	add	r0, r0, r5
	bl	DestroySpriteAndFreeResources_
	ldr	r0, .L1475+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r9, r4
	cmp	r0, #0
	bne	.L1442	@cond_branch
	lsl	r1, r7, #0x4
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1, #0x20]
	neg	r0, r0
	sub	r0, r0, #0x20
	strh	r0, [r1, #0x24]
	b	.L1443
.L1476:
	.align	2, 0
.L1475:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimAttacker
.L1442:
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r2, [r0, #0x20]
	mov	r4, #0x88
	lsl	r4, r4, #0x1
	add	r1, r4, #0
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
.L1443:
	ldr	r0, .L1477
	mov	r1, r9
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L1452:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L1419
.L1478:
	.align	2, 0
.L1477:
	.word	gTasks
.L1444:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1479
	mov	r0, r8
	lsl	r4, r0, #0x2
	add	r0, r4, r0
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	add	r0, r1, #0
	ldrh	r3, [r2, #0xa]
	add	r0, r0, r3
	strh	r0, [r2, #0xa]
	ldr	r0, .L1479+0x4
	mov	sl, r0
	ldrb	r0, [r0]
	str	r2, [sp, #0x18]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r9, r4
	ldr	r2, [sp, #0x18]
	cmp	r0, #0
	bne	.L1445	@cond_branch
	ldr	r1, .L1479+0x8
	lsl	r5, r7, #0x4
	add	r0, r5, r7
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	ldrh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r6, #0x24]
	add	r0, r0, r1
	strh	r0, [r6, #0x24]
	mov	r2, #0x24
	ldrsh	r4, [r6, r2]
	mov	r3, #0x20
	ldrsh	r0, [r6, r3]
	add	r4, r4, r0
	mov	r1, sl
	ldrb	r0, [r1]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r5, #0
	cmp	r4, r0
	blt	.L1447	@cond_branch
	mov	r2, #0x0
	strh	r2, [r6, #0x24]
	b	.L1447
.L1480:
	.align	2, 0
.L1479:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
.L1445:
	ldr	r1, .L1481
	lsl	r5, r7, #0x4
	add	r0, r5, r7
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	ldrh	r1, [r2, #0xa]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r6, #0x24]
	sub	r0, r0, r1
	strh	r0, [r6, #0x24]
	mov	r3, #0x24
	ldrsh	r4, [r6, r3]
	mov	r1, #0x20
	ldrsh	r0, [r6, r1]
	add	r4, r4, r0
	mov	r2, sl
	ldrb	r0, [r2]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r5, #0
	cmp	r4, r0
	bgt	.L1447	@cond_branch
	mov	r4, #0x0
	strh	r4, [r6, #0x24]
.L1447:
	ldr	r1, .L1481+0x4
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xa]
	strh	r1, [r0, #0xa]
	ldr	r1, .L1481
	add	r0, r3, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1419	@cond_branch
	mov	r0, r8
	bl	DestroyAnimVisualTask
.L1419:
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1482:
	.align	2, 0
.L1481:
	.word	gSprites
	.word	gTasks
.Lfe129:
	.size	 AnimTask_SnatchOpposingMonMove,.Lfe129-AnimTask_SnatchOpposingMonMove
	.align	2, 0
	.type	 AnimUnusedItemBagSteal,function
	.thumb_func
AnimUnusedItemBagSteal:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1485	@cond_branch
	cmp	r0, #0x1
	beq	.L1489	@cond_branch
	b	.L1484
.L1485:
	ldr	r0, .L1496
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1486	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x73
	bl	PlaySE12WithPanning
	ldr	r0, .L1496+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	strh	r0, [r4, #0x22]
	ldr	r0, .L1496+0x8
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L1496+0xc
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1484	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L1496+0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	b	.L1484
.L1497:
	.align	2, 0
.L1496:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	0xffe0
	.word	gBattleAnimAttacker
	.word	gSprites
.L1486:
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1484
.L1489:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x30]
	add	r0, r2, #0x5
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7f
	ble	.L1490	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	add	r0, r2, #0
	sub	r0, r0, #0x7a
	strh	r0, [r4, #0x30]
.L1490:
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldr	r0, .L1498
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1491	@cond_branch
	ldrh	r2, [r4, #0x32]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	add	r1, r2, #0
	b	.L1492
.L1499:
	.align	2, 0
.L1498:
	.word	gBattleAnimAttacker
.L1491:
	ldrh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r4, #0x24]
	add	r0, r0, r2
	strh	r0, [r4, #0x24]
.L1492:
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x2
	bne	.L1484	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1484:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe130:
	.size	 AnimUnusedItemBagSteal,.Lfe130-AnimUnusedItemBagSteal
	.align	2, 0
	.globl	AnimTask_SnatchPartnerMove
	.type	 AnimTask_SnatchPartnerMove,function
	.thumb_func
AnimTask_SnatchPartnerMove:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1520
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x26
	ldrsh	r0, [r0, r2]
	add	r3, r1, #0
	cmp	r0, #0x4
	bls	.LCB15223
	b	.L1516	@long jump
.LCB15223:
	lsl	r0, r0, #0x2
	ldr	r1, .L1520+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1521:
	.align	2, 0
.L1520:
	.word	gTasks
	.word	.L1517
	.align	2, 0
	.align	2, 0
.L1517:
	.word	.L1502
	.word	.L1504
	.word	.L1509
	.word	.L1510
	.word	.L1516
.L1502:
	ldr	r0, .L1522
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r0, .L1522+0x4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	ldr	r1, .L1522+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r0, #0x6
	strh	r0, [r1, #0x8]
	cmp	r5, r2
	ble	.L1503	@cond_branch
	neg	r0, r0
	strh	r0, [r1, #0x8]
.L1503:
	strh	r5, [r1, #0xa]
	strh	r2, [r1, #0xc]
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x26]
	b	.L1501
.L1523:
	.align	2, 0
.L1522:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gTasks
.L1504:
	ldr	r1, .L1524
	ldr	r0, .L1524+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r1, .L1524+0x8
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r3
	ldrh	r0, [r2, #0x8]
	ldrh	r3, [r1, #0x24]
	add	r0, r0, r3
	strh	r0, [r1, #0x24]
	mov	r3, #0x8
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L1505	@cond_branch
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0x24
	ldrsh	r1, [r1, r3]
	add	r0, r0, r1
	mov	r3, #0xc
	ldrsh	r1, [r2, r3]
	b	.L1518
.L1525:
	.align	2, 0
.L1524:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gSprites
.L1505:
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0x24
	ldrsh	r1, [r1, r3]
	add	r0, r0, r1
	mov	r3, #0xc
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	bgt	.L1501	@cond_branch
	b	.L1519
.L1509:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	mov	r2, #0x8
	ldrsh	r1, [r0, r2]
	neg	r1, r1
	strh	r1, [r0, #0x8]
	ldrh	r1, [r0, #0x26]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x26]
	b	.L1501
.L1510:
	ldr	r1, .L1526
	ldr	r0, .L1526+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r1, .L1526+0x8
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r3
	ldrh	r0, [r2, #0x8]
	ldrh	r3, [r1, #0x24]
	add	r0, r0, r3
	strh	r0, [r1, #0x24]
	mov	r3, #0x8
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bge	.L1511	@cond_branch
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0x24
	ldrsh	r1, [r1, r3]
	add	r0, r0, r1
	mov	r3, #0xa
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	bgt	.L1501	@cond_branch
	b	.L1519
.L1527:
	.align	2, 0
.L1526:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gSprites
.L1511:
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0x24
	ldrsh	r1, [r1, r3]
	add	r0, r0, r1
	mov	r3, #0xa
	ldrsh	r1, [r2, r3]
.L1518:
	cmp	r0, r1
	blt	.L1501	@cond_branch
.L1519:
	ldrh	r0, [r2, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x26]
	b	.L1501
.L1516:
	ldr	r1, .L1528
	ldr	r0, .L1528+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r1, .L1528+0x8
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1501:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1529:
	.align	2, 0
.L1528:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gSprites
.Lfe131:
	.size	 AnimTask_SnatchPartnerMove,.Lfe131-AnimTask_SnatchPartnerMove
	.align	2, 0
	.globl	AnimTask_TeeterDanceMovement
	.type	 AnimTask_TeeterDanceMovement,function
	.thumb_func
AnimTask_TeeterDanceMovement:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1533
	add	r4, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0xe]
	ldr	r0, .L1533+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L1531	@cond_branch
	mov	r1, #0x1
.L1531:
	strh	r1, [r4, #0x10]
	ldr	r2, .L1533+0x8
	mov	r0, #0xe
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x22]
	strh	r0, [r4, #0x14]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	strh	r0, [r4, #0x12]
	strh	r5, [r4, #0x1a]
	strh	r5, [r4, #0x1e]
	mov	r0, #0x1
	strh	r0, [r4, #0x1c]
	strh	r5, [r4, #0x20]
	ldr	r0, .L1533+0xc
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1534:
	.align	2, 0
.L1533:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	AnimTask_TeeterDanceMovement_Step
.Lfe132:
	.size	 AnimTask_TeeterDanceMovement,.Lfe132-AnimTask_TeeterDanceMovement
	.align	2, 0
	.type	 AnimTask_TeeterDanceMovement_Step,function
	.thumb_func
AnimTask_TeeterDanceMovement_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L1546
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L1539	@cond_branch
	cmp	r0, #0x1
	bgt	.L1544	@cond_branch
	cmp	r0, #0
	beq	.L1537	@cond_branch
	b	.L1536
.L1547:
	.align	2, 0
.L1546:
	.word	gTasks
.L1544:
	cmp	r0, #0x2
	beq	.L1541	@cond_branch
	b	.L1536
.L1537:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x8
	mov	r2, #0xff
	and	r0, r0, r2
	strh	r0, [r4, #0x1e]
	ldr	r5, .L1548
	mov	r6, #0xe
	ldrsh	r0, [r4, r6]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r3, .L1548+0x4
	mov	r6, #0x1e
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x15
	strh	r0, [r1, #0x24]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x2
	and	r0, r0, r2
	strh	r0, [r4, #0x1a]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	mov	r6, #0x1a
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	ldrh	r1, [r4, #0x10]
	mul	r0, r0, r1
	ldrh	r1, [r4, #0x12]
	add	r0, r0, r1
	strh	r0, [r2, #0x20]
	mov	r6, #0x1a
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bne	.L1536	@cond_branch
	mov	r0, #0xe
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r4, #0x12]
	strh	r1, [r0, #0x20]
	b	.L1545
.L1549:
	.align	2, 0
.L1548:
	.word	gSprites
	.word	gSineTable
.L1539:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x1e]
	ldr	r3, .L1550
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, .L1550+0x4
	mov	r5, #0x1e
	ldrsh	r0, [r4, r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x15
	strh	r0, [r1, #0x24]
	mov	r6, #0x1e
	ldrsh	r2, [r4, r6]
	cmp	r2, #0
	bne	.L1536	@cond_branch
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r2, [r1, #0x24]
.L1545:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1536
.L1551:
	.align	2, 0
.L1550:
	.word	gSprites
	.word	gSineTable
.L1541:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L1536:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe133:
	.size	 AnimTask_TeeterDanceMovement_Step,.Lfe133-AnimTask_TeeterDanceMovement_Step
	.align	2, 0
	.type	 AnimKnockOffStrike_Step,function
	.thumb_func
AnimKnockOffStrike_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1556
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldrh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1555	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1555:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1557:
	.align	2, 0
.L1556:
	.word	gBattleAnimTarget
.Lfe134:
	.size	 AnimKnockOffStrike_Step,.Lfe134-AnimKnockOffStrike_Step
	.align	2, 0
	.type	 AnimKnockOffStrike,function
	.thumb_func
AnimKnockOffStrike:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1561
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1559	@cond_branch
	ldr	r2, .L1561+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L1561+0x8
	strh	r0, [r4, #0x2e]
	mov	r0, #0xc0
	strh	r0, [r4, #0x30]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L1560
.L1562:
	.align	2, 0
.L1561:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0xfff5
.L1559:
	mov	r0, #0xb
	strh	r0, [r4, #0x2e]
	mov	r0, #0xc0
	strh	r0, [r4, #0x30]
	ldr	r1, .L1563
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
.L1560:
	ldr	r0, .L1563+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1564:
	.align	2, 0
.L1563:
	.word	gBattleAnimArgs
	.word	AnimKnockOffStrike_Step
.Lfe135:
	.size	 AnimKnockOffStrike,.Lfe135-AnimKnockOffStrike
	.align	2, 0
	.type	 AnimRecycle,function
	.thumb_func
AnimRecycle:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L1567
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bgt	.L1566	@cond_branch
	mov	r0, #0x10
	strh	r0, [r5, #0x22]
.L1566:
	mov	r0, #0x0
	strh	r0, [r5, #0x3a]
	mov	r1, #0x10
	strh	r1, [r5, #0x3c]
	ldr	r0, .L1567+0x4
	str	r0, [r5, #0x1c]
	lsl	r1, r1, #0x8
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1568:
	.align	2, 0
.L1567:
	.word	gBattleAnimAttacker
	.word	AnimRecycle_Step
.Lfe136:
	.size	 AnimRecycle,.Lfe136-AnimRecycle
	.align	2, 0
	.type	 AnimRecycle_Step,function
	.thumb_func
AnimRecycle_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L1578	@cond_branch
	cmp	r1, #0x1
	bgt	.L1590	@cond_branch
	cmp	r1, #0
	beq	.L1571	@cond_branch
	b	.L1570
.L1590:
	cmp	r1, #0x2
	beq	.L1580	@cond_branch
	cmp	r1, #0x3
	beq	.L1587	@cond_branch
	b	.L1570
.L1571:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1570	@cond_branch
	strh	r1, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1573	@cond_branch
	ldrh	r2, [r4, #0x3a]
	mov	r3, #0x3a
	ldrsh	r0, [r4, r3]
	cmp	r0, #0xf
	bgt	.L1575	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0x3a]
	b	.L1575
.L1573:
	ldrh	r2, [r4, #0x3c]
	mov	r3, #0x3c
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L1575	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r4, #0x3c]
.L1575:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1570	@cond_branch
	b	.L1591
.L1578:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L1570	@cond_branch
	strh	r1, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	b	.L1591
.L1580:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1570	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1582	@cond_branch
	ldrh	r2, [r4, #0x3a]
	mov	r3, #0x3a
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L1584	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r4, #0x3a]
	b	.L1584
.L1582:
	ldrh	r2, [r4, #0x3c]
	mov	r3, #0x3c
	ldrsh	r0, [r4, r3]
	cmp	r0, #0xf
	bgt	.L1584	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0x3c]
.L1584:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L1570	@cond_branch
.L1591:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	b	.L1570
.L1587:
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L1570:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe137:
	.size	 AnimRecycle_Step,.Lfe137-AnimRecycle_Step
	.align	2, 0
	.globl	AnimTask_GetWeather
	.type	 AnimTask_GetWeather,function
	.thumb_func
AnimTask_GetWeather:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L1601
	mov	r0, #0x0
	strh	r0, [r2, #0xe]
	ldr	r0, .L1601+0x4
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1593	@cond_branch
	mov	r0, #0x1
	b	.L1600
.L1602:
	.align	2, 0
.L1601:
	.word	gBattleAnimArgs
	.word	gWeatherMoveAnim
.L1593:
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1595	@cond_branch
	mov	r0, #0x2
	b	.L1600
.L1595:
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1597	@cond_branch
	mov	r0, #0x3
	b	.L1600
.L1597:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1594	@cond_branch
	mov	r0, #0x4
.L1600:
	strh	r0, [r2, #0xe]
.L1594:
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.Lfe138:
	.size	 AnimTask_GetWeather,.Lfe138-AnimTask_GetWeather
	.align	2, 0
	.globl	AnimTask_SlackOffSquish
	.type	 AnimTask_SlackOffSquish,function
	.thumb_func
AnimTask_SlackOffSquish:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1604
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L1604+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	ldr	r2, .L1604+0x8
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L1604+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1605:
	.align	2, 0
.L1604:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	sSlackOffSquishAffineAnimCmds
	.word	AnimTask_SlackOffSquish_Step
.Lfe139:
	.size	 AnimTask_SlackOffSquish,.Lfe139-AnimTask_SlackOffSquish
	.align	2, 0
	.type	 AnimTask_SlackOffSquish_Step,function
	.thumb_func
AnimTask_SlackOffSquish_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r2, .L1613
	add	r3, r0, r2
	ldrh	r0, [r3, #0x8]
	add	r1, r0, #0x1
	mov	r5, #0x0
	strh	r1, [r3, #0x8]
	sub	r0, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r6, r2, #0
	cmp	r0, #0x16
	bhi	.L1607	@cond_branch
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L1611	@cond_branch
	strh	r5, [r3, #0xa]
	ldrh	r0, [r3, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	mov	r5, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1609	@cond_branch
	ldr	r2, .L1613+0x4
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L1613+0x8
	strh	r1, [r0, #0x24]
	b	.L1611
.L1614:
	.align	2, 0
.L1613:
	.word	gTasks
	.word	gSprites
	.word	0xffff
.L1609:
.L1607:
	ldr	r2, .L1615
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x24]
.L1611:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1612	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1612:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1616:
	.align	2, 0
.L1615:
	.word	gSprites
.Lfe140:
	.size	 AnimTask_SlackOffSquish_Step,.Lfe140-AnimTask_SlackOffSquish_Step
.text
	.align	2, 0 @ Don't pad with nop

