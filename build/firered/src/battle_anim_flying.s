@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gEllipticalGustSpriteTemplate
	.section .rodata
	.align	2, 0
	.type	 gEllipticalGustSpriteTemplate,object
	.size	 gEllipticalGustSpriteTemplate,24
gEllipticalGustSpriteTemplate:
	.short	0x2719
	.short	0x2719
	.word	gOamData_AffineOff_ObjNormal_32x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimEllipticalGust
	.align	2, 0
	.type	 sAffineAnim_GustToTarget,object
sAffineAnim_GustToTarget:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xa
	.short	0x0
	.byte	0x0
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_GustToTarget,24
	.align	2, 0
	.type	 sAffineAnims_GustToTarget,object
sAffineAnims_GustToTarget:
	.word	sAffineAnim_GustToTarget
	.size	 sAffineAnims_GustToTarget,4
	.globl	gGustToTargetSpriteTemplate
	.align	2, 0
	.type	 gGustToTargetSpriteTemplate,object
	.size	 gGustToTargetSpriteTemplate,24
gGustToTargetSpriteTemplate:
	.short	0x2719
	.short	0x2719
	.word	gOamData_AffineNormal_ObjNormal_32x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_GustToTarget
	.word	AnimGustToTarget
	.align	2, 0
	.type	 sAffineAnim_AirWaveCrescent,object
sAffineAnim_AirWaveCrescent:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x43
	.space	1
	.short	0x0
	.byte	0x83
	.space	1
	.short	0x0
	.byte	0xc3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAffineAnim_AirWaveCrescent,20
	.align	2, 0
	.type	 sAffineAnims_AirWaveCrescent,object
sAffineAnims_AirWaveCrescent:
	.word	sAffineAnim_AirWaveCrescent
	.size	 sAffineAnims_AirWaveCrescent,4
	.globl	gAirWaveCrescentSpriteTemplate
	.align	2, 0
	.type	 gAirWaveCrescentSpriteTemplate,object
	.size	 gAirWaveCrescentSpriteTemplate,24
gAirWaveCrescentSpriteTemplate:
	.short	0x27aa
	.short	0x27aa
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	sAffineAnims_AirWaveCrescent
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimAirWaveCrescent
	.align	2, 0
	.type	 sAffineAnim_FlyBallUp,object
sAffineAnim_FlyBallUp:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x28
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x10
	.short	0x20
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlyBallUp,40
	.align	2, 0
	.type	 sAffineAnims_FlyBallUp,object
sAffineAnims_FlyBallUp:
	.word	sAffineAnim_FlyBallUp
	.size	 sAffineAnims_FlyBallUp,4
	.align	2, 0
	.type	 sAffineAnim_FlyBallAttack_0,object
sAffineAnim_FlyBallAttack_0:
	.short	0x0
	.short	0x0
	.byte	0x32
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlyBallAttack_0,16
	.align	2, 0
	.type	 sAffineAnim_FlyBallAttack_1,object
sAffineAnim_FlyBallAttack_1:
	.short	0x0
	.short	0x0
	.byte	0xd8
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlyBallAttack_1,16
	.align	2, 0
	.type	 sAffineAnims_FlyBallAttack,object
sAffineAnims_FlyBallAttack:
	.word	sAffineAnim_FlyBallAttack_0
	.word	sAffineAnim_FlyBallAttack_1
	.size	 sAffineAnims_FlyBallAttack,8
	.globl	gFlyBallUpSpriteTemplate
	.align	2, 0
	.type	 gFlyBallUpSpriteTemplate,object
	.size	 gFlyBallUpSpriteTemplate,24
gFlyBallUpSpriteTemplate:
	.short	0x27ac
	.short	0x27ac
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_FlyBallUp
	.word	AnimFlyBallUp
	.globl	gFlyBallAttackSpriteTemplate
	.align	2, 0
	.type	 gFlyBallAttackSpriteTemplate,object
	.size	 gFlyBallAttackSpriteTemplate,24
gFlyBallAttackSpriteTemplate:
	.short	0x27ac
	.short	0x27ac
	.word	gOamData_AffineNormal_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_FlyBallAttack
	.word	AnimFlyBallAttack
	.align	2, 0
	.type	 sAnim_FallingFeather_0,object
sAnim_FallingFeather_0:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_FallingFeather_0,8
	.align	2, 0
	.type	 sAnim_FallingFeather_1,object
sAnim_FallingFeather_1:
	.short	0x10
	.byte	0x40
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_FallingFeather_1,8
	.align	2, 0
	.type	 sAnims_FallingFeather,object
sAnims_FallingFeather:
	.word	sAnim_FallingFeather_0
	.word	sAnim_FallingFeather_1
	.size	 sAnims_FallingFeather,8
	.globl	gFallingFeatherSpriteTemplate
	.align	2, 0
	.type	 gFallingFeatherSpriteTemplate,object
	.size	 gFallingFeatherSpriteTemplate,24
gFallingFeatherSpriteTemplate:
	.short	0x281e
	.short	0x281e
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sAnims_FallingFeather
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFallingFeather
	.align	1, 0
	.type	 sUnusedPal,object
sUnusedPal:
	.short	0x464d
	.short	0x7e52
	.short	0x7f17
	.short	0x7f7b
	.short	0x7fbd
	.short	0x7fdd
	.short	0x7fff
	.short	0x7fdd
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x7f59
	.short	0x7f39
	.short	0x7f9c
	.size	 sUnusedPal,32
	.align	2, 0
	.type	 sUnusedBubbleThrowSpriteTemplate,object
	.size	 sUnusedBubbleThrowSpriteTemplate,24
sUnusedBubbleThrowSpriteTemplate:
	.short	0x27ab
	.short	0x27ab
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimUnusedBubbleThrow
	.align	2, 0
	.type	 sUnusedFeatherSpriteTemplate,object
	.size	 sUnusedFeatherSpriteTemplate,24
sUnusedFeatherSpriteTemplate:
	.short	0x281e
	.short	0x281e
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sAnims_FallingFeather
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimUnusedFeather
	.align	2, 0
	.type	 sAnim_WhirlwindLines,object
sAnim_WhirlwindLines:
	.short	0x0
	.byte	0x1
	.space	1
	.short	0x8
	.byte	0x1
	.space	1
	.short	0x10
	.byte	0x1
	.space	1
	.short	0x8
	.byte	0x41
	.space	1
	.short	0x0
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_WhirlwindLines,24
	.align	2, 0
	.type	 sAnims_WhirlwindLines,object
sAnims_WhirlwindLines:
	.word	sAnim_WhirlwindLines
	.size	 sAnims_WhirlwindLines,4
	.globl	gWhirlwindLineSpriteTemplate
	.align	2, 0
	.type	 gWhirlwindLineSpriteTemplate,object
	.size	 gWhirlwindLineSpriteTemplate,24
gWhirlwindLineSpriteTemplate:
	.short	0x27b2
	.short	0x27b2
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	sAnims_WhirlwindLines
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWhirlwindLine
	.align	2, 0
	.type	 sAffineAnim_BounceBallShrink,object
sAffineAnim_BounceBallShrink:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x28
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x14
	.short	0x0
	.byte	0x0
	.byte	0x7
	.space	2
	.short	-0x14
	.short	-0x14
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_BounceBallShrink,48
	.align	2, 0
	.type	 sAffineAnims_BounceBallShrink,object
sAffineAnims_BounceBallShrink:
	.word	sAffineAnim_BounceBallShrink
	.size	 sAffineAnims_BounceBallShrink,4
	.globl	gBounceBallShrinkSpriteTemplate
	.align	2, 0
	.type	 gBounceBallShrinkSpriteTemplate,object
	.size	 gBounceBallShrinkSpriteTemplate,24
gBounceBallShrinkSpriteTemplate:
	.short	0x27ac
	.short	0x27ac
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_BounceBallShrink
	.word	AnimBounceBallShrink
	.align	2, 0
	.type	 sAffineAnim_BounceBallLand,object
sAffineAnim_BounceBallLand:
	.short	0xa0
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_BounceBallLand,16
	.align	2, 0
	.type	 sAffineAnims_BounceBallLand,object
sAffineAnims_BounceBallLand:
	.word	sAffineAnim_BounceBallLand
	.size	 sAffineAnims_BounceBallLand,4
	.globl	gBounceBallLandSpriteTemplate
	.align	2, 0
	.type	 gBounceBallLandSpriteTemplate,object
	.size	 gBounceBallLandSpriteTemplate,24
gBounceBallLandSpriteTemplate:
	.short	0x27ac
	.short	0x27ac
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_BounceBallLand
	.word	AnimBounceBallLand
	.align	2, 0
	.type	 sAffineAnim_DiveBall,object
sAffineAnim_DiveBall:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x28
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x10
	.short	0x20
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_DiveBall,40
	.align	2, 0
	.type	 sAffineAnims_DiveBall,object
sAffineAnims_DiveBall:
	.word	sAffineAnim_DiveBall
	.size	 sAffineAnims_DiveBall,4
	.globl	gDiveBallSpriteTemplate
	.align	2, 0
	.type	 gDiveBallSpriteTemplate,object
	.size	 gDiveBallSpriteTemplate,24
gDiveBallSpriteTemplate:
	.short	0x27ac
	.short	0x27ac
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_DiveBall
	.word	AnimDiveBall
	.align	2, 0
	.type	 sAnim_Unused,object
sAnim_Unused:
	.short	0x100
	.short	0x0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x20
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0xb
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAnim_Unused,32
	.align	2, 0
	.type	 sAnims_Unused,object
sAnims_Unused:
	.word	sAnim_Unused
	.size	 sAnims_Unused,4
	.globl	gDiveWaterSplashSpriteTemplate
	.align	2, 0
	.type	 gDiveWaterSplashSpriteTemplate,object
	.size	 gDiveWaterSplashSpriteTemplate,24
gDiveWaterSplashSpriteTemplate:
	.short	0x2820
	.short	0x2820
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDiveWaterSplash
	.globl	gSprayWaterDropletSpriteTemplate
	.align	2, 0
	.type	 gSprayWaterDropletSpriteTemplate,object
	.size	 gSprayWaterDropletSpriteTemplate,24
gSprayWaterDropletSpriteTemplate:
	.short	0x2821
	.short	0x2821
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSprayWaterDroplet
	.align	2, 0
	.type	 sUnusedFlashingLightSpriteTemplate,object
	.size	 sUnusedFlashingLightSpriteTemplate,24
sUnusedFlashingLightSpriteTemplate:
	.short	0x27e4
	.short	0x27e4
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimUnusedFlashingLight
	.globl	gSkyAttackBirdSpriteTemplate
	.align	2, 0
	.type	 gSkyAttackBirdSpriteTemplate,object
	.size	 gSkyAttackBirdSpriteTemplate,24
gSkyAttackBirdSpriteTemplate:
	.short	0x282c
	.short	0x282c
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSkyAttackBird
.text
	.align	2, 0
	.type	 AnimEllipticalGust,function
	.thumb_func
AnimEllipticalGust:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x14
	strh	r0, [r4, #0x22]
	mov	r0, #0xbf
	strh	r0, [r4, #0x30]
	ldr	r1, .L5
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	AnimEllipticalGust_Step
.Lfe1:
	.size	 AnimEllipticalGust,.Lfe1-AnimEllipticalGust
	.align	2, 0
	.type	 AnimEllipticalGust_Step,function
	.thumb_func
AnimEllipticalGust_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x47
	bne	.L8	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L8:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimEllipticalGust_Step,.Lfe2-AnimEllipticalGust_Step
	.align	2, 0
	.globl	AnimTask_AnimateGustTornadoPalette
	.type	 AnimTask_AnimateGustTornadoPalette,function
	.thumb_func
AnimTask_AnimateGustTornadoPalette:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L10
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldr	r1, .L10+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x8]
	ldrh	r0, [r1]
	strh	r0, [r4, #0xa]
	ldr	r0, .L10+0x8
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xc]
	ldr	r0, .L10+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	0x2719
	.word	AnimTask_AnimateGustTornadoPalette_Step
.Lfe3:
	.size	 AnimTask_AnimateGustTornadoPalette,.Lfe3-AnimTask_AnimateGustTornadoPalette
	.align	2, 0
	.type	 AnimTask_AnimateGustTornadoPalette_Step,function
	.thumb_func
AnimTask_AnimateGustTornadoPalette_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L20
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r3, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r4, #0xa
	ldrsh	r1, [r3, r4]
	add	r7, r2, #0
	cmp	r0, r1
	bne	.L13	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x1c]
	ldrb	r0, [r3, #0xc]
	ldr	r2, .L20+0x4
	lsl	r0, r0, #0x4
	mov	r3, #0x84
	lsl	r3, r3, #0x1
	add	r1, r0, r3
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r6, [r1]
	mov	r4, #0x7
	mov	ip, r0
	ldr	r0, .L20+0x8
	add	r0, r0, ip
	lsl	r0, r0, #0x1
	add	r3, r0, r2
.L14:
	ldrh	r0, [r3]
	strh	r0, [r1]
	sub	r3, r3, #0x2
	sub	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bgt	.L14	@cond_branch
	ldr	r0, .L20+0xc
	add	r0, r0, ip
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	strh	r6, [r0]
.L13:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	ldrh	r1, [r0, #0x8]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bne	.L19	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L19:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gTasks
	.word	gPlttBufferFaded
	.word	0x107
	.word	0x101
.Lfe4:
	.size	 AnimTask_AnimateGustTornadoPalette_Step,.Lfe4-AnimTask_AnimateGustTornadoPalette_Step
	.align	2, 0
	.type	 AnimGustToTarget,function
	.thumb_func
AnimGustToTarget:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L24
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L23	@cond_branch
	ldr	r1, .L24+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L23:
	ldr	r4, .L24+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldrh	r0, [r6, #0x20]
	strh	r0, [r6, #0x30]
	ldr	r5, .L24+0x8
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrh	r0, [r6, #0x22]
	strh	r0, [r6, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x6]
	add	r0, r0, r4
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	bl	InitAnimLinearTranslation
	ldr	r0, .L24+0xc
	str	r0, [r6, #0x1c]
	ldr	r1, .L24+0x10
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	AnimGustToTarget_Step
.Lfe5:
	.size	 AnimGustToTarget,.Lfe5-AnimGustToTarget
	.align	2, 0
	.type	 AnimGustToTarget_Step,function
	.thumb_func
AnimGustToTarget_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L27	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L27:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimGustToTarget_Step,.Lfe6-AnimGustToTarget_Step
	.align	2, 0
	.type	 AnimAirWaveCrescent,function
	.thumb_func
AnimAirWaveCrescent:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L33
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L29	@cond_branch
	ldr	r1, .L33+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r1, #0x6]
.L29:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L30	@cond_branch
	ldr	r0, .L33+0x4
	ldrh	r1, [r0, #0x2]
	neg	r1, r1
	strh	r1, [r0, #0x2]
	ldrh	r1, [r0, #0x6]
	neg	r1, r1
	strh	r1, [r0, #0x6]
.L30:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r2, .L33+0x4
	ldrh	r1, [r2]
	ldrh	r3, [r5, #0x20]
	add	r1, r1, r3
	strh	r1, [r5, #0x20]
	lsr	r0, r0, #0x18
	ldrh	r1, [r2, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r3, #0xc
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L31	@cond_branch
	ldr	r4, .L33+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	b	.L32
.L34:
	.align	2, 0
.L33:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L31:
	ldr	r0, .L35
	ldrb	r0, [r0]
	add	r2, r5, #0
	add	r2, r2, #0x32
	add	r3, r5, #0
	add	r3, r3, #0x36
	mov	r1, #0x1
	bl	SetAverageBattlerPositions
.L32:
	ldr	r4, .L35+0x4
	ldrh	r0, [r4, #0x4]
	ldrh	r1, [r5, #0x32]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r4, #0x6]
	ldrh	r3, [r5, #0x36]
	add	r0, r0, r3
	strh	r0, [r5, #0x36]
	ldr	r0, .L35+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L35+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldrb	r1, [r4, #0xa]
	add	r0, r5, #0
	bl	SeekSpriteAnim
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe7:
	.size	 AnimAirWaveCrescent,.Lfe7-AnimAirWaveCrescent
	.align	2, 0
	.type	 AnimFlyBallUp,function
	.thumb_func
AnimFlyBallUp:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r1, .L38
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L38+0x4
	str	r0, [r4, #0x1c]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L38+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gBattleAnimArgs
	.word	AnimFlyBallUp_Step
	.word	gSprites
.Lfe8:
	.size	 AnimFlyBallUp,.Lfe8-AnimFlyBallUp
	.align	2, 0
	.type	 AnimFlyBallUp_Step,function
	.thumb_func
AnimFlyBallUp_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L41	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x2e]
	b	.L42
.L41:
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r2, #0x26]
	sub	r1, r1, r0
	strh	r1, [r2, #0x26]
.L42:
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L43	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L43:
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 AnimFlyBallUp_Step,.Lfe9-AnimFlyBallUp_Step
	.align	2, 0
	.type	 AnimFlyBallAttack,function
	.thumb_func
AnimFlyBallAttack:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L47
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L45	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	ldr	r0, .L47+0x4
	strh	r0, [r5, #0x22]
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L46
.L48:
	.align	2, 0
.L47:
	.word	gBattleAnimAttacker
	.word	0xffe0
.L45:
	ldr	r0, .L49
	strh	r0, [r5, #0x20]
	strh	r0, [r5, #0x22]
.L46:
	ldr	r0, .L49+0x4
	ldrh	r0, [r0]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	ldr	r4, .L49+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimLinearTranslation
	ldr	r0, .L49+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	0xffe0
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimFlyBallAttack_Step
.Lfe10:
	.size	 AnimFlyBallAttack,.Lfe10-AnimFlyBallAttack
	.align	2, 0
	.type	 AnimFlyBallAttack_Step,function
	.thumb_func
AnimFlyBallAttack_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	AnimTranslateLinear
	ldrh	r1, [r4, #0x34]
	lsr	r0, r1, #0x8
	cmp	r0, #0xc8
	bls	.L52	@cond_branch
	ldrh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
.L52:
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	add	r0, r0, #0x20
	mov	r1, #0x98
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L54	@cond_branch
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	cmp	r0, #0xa0
	ble	.L53	@cond_branch
.L54:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L55
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L53:
	pop	{r4}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gSprites
.Lfe11:
	.size	 AnimFlyBallAttack_Step,.Lfe11-AnimFlyBallAttack_Step
	.align	2, 0
	.globl	DestroyAnimSpriteAfterTimer
	.type	 DestroyAnimSpriteAfterTimer,function
	.thumb_func
DestroyAnimSpriteAfterTimer:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L58	@cond_branch
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L59	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
.L59:
	add	r0, r4, #0
	bl	DestroySprite
	ldr	r1, .L60
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L58:
	pop	{r4}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gAnimVisualTaskCount
.Lfe12:
	.size	 DestroyAnimSpriteAfterTimer,.Lfe12-DestroyAnimSpriteAfterTimer
	.align	2, 0
	.type	 AnimFallingFeather,function
	.thumb_func
AnimFallingFeather:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r5, r7, #0
	add	r5, r5, #0x2e
	ldr	r0, .L76
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L63	@cond_branch
	ldr	r0, .L76+0x4
	b	.L74
.L77:
	.align	2, 0
.L76:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L63:
	ldr	r0, .L78
.L74:
	ldrb	r6, [r0]
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L65	@cond_branch
	ldr	r1, .L78+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
.L65:
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L78+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r7, #0x20]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	lsr	r0, r0, #0x18
	add	r1, r0, r1
	strh	r1, [r7, #0x22]
	lsl	r1, r1, #0x8
	strh	r1, [r5, #0x8]
	ldrh	r1, [r4, #0xc]
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrh	r2, [r5, #0xe]
	mov	r1, #0x1
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r5, #0xe]
	ldrb	r0, [r5]
	mov	r2, #0x4
	mov	r8, r2
	mov	r1, r8
	orr	r0, r0, r1
	strb	r0, [r5]
	ldrh	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x4]
	strh	r1, [r5, #0x2]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xa]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x4]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x6]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r5, #0xc]
	sub	r1, r1, #0x40
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0x7f
	bhi	.L66	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L67	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r7, #0x5]
	b	.L68
.L79:
	.align	2, 0
.L78:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L67:
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
.L68:
	ldrb	r1, [r5, #0xe]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r1
	strb	r0, [r5, #0xe]
	mov	r2, #0x4
	ldrsh	r0, [r5, r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L70	@cond_branch
	add	r3, r7, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r7, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	b	.L75
.L66:
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
	ldrb	r0, [r5, #0xe]
	mov	r4, #0x1
	orr	r0, r0, r4
	strb	r0, [r5, #0xe]
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L70	@cond_branch
	add	r3, r7, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r4
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r7, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r2, r8
	orr	r0, r0, r2
.L75:
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
.L70:
	ldrh	r1, [r5, #0x2]
	lsr	r1, r1, #0x6
	lsl	r1, r1, #0x4
	ldrb	r2, [r5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5]
	ldr	r3, .L80
	ldrh	r0, [r5, #0x2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldrb	r0, [r5, #0xc]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r7, #0x24]
	ldrb	r2, [r7, #0x3]
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1b
	mov	r1, #0x24
	ldrsh	r0, [r7, r1]
	neg	r0, r0
	asr	r0, r0, #0x1
	ldrb	r5, [r5, #0xa]
	add	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	ldrh	r4, [r1]
	ldr	r1, .L80+0x4
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	add	r0, r0, #0x40
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r2, #0x6]
	strh	r0, [r2]
	strh	r4, [r2, #0x2]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r2, #0x4]
	ldr	r0, .L80+0x8
	str	r0, [r7, #0x1c]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	gSineTable
	.word	gOamMatrices
	.word	AnimFallingFeather_Step
.Lfe13:
	.size	 AnimFallingFeather,.Lfe13-AnimFallingFeather
	.align	2, 0
	.type	 AnimFallingFeather_Step,function
	.thumb_func
AnimFallingFeather_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r0, #0
	mov	r6, #0x0
	add	r4, r5, #0
	add	r4, r4, #0x2e
	ldrb	r2, [r4]
	mov	r7, #0x1
	mov	r0, #0x1
	mov	r9, r0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L83	@cond_branch
	ldrb	r0, [r4, #0x1]
	add	r1, r0, #0
	add	r1, r1, #0xff
	strb	r1, [r4, #0x1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1117
	b	.L85	@long jump
.LCB1117:
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r4]
	strb	r6, [r4, #0x1]
	b	.L85
.L83:
	ldrh	r0, [r4, #0x2]
	lsr	r1, r0, #0x6
	mov	ip, r0
	cmp	r1, #0x1
	bne	.LCB1135
	b	.L100	@long jump
.LCB1135:
	cmp	r1, #0x1
	bgt	.L141	@cond_branch
	cmp	r1, #0
	beq	.L87	@cond_branch
	b	.L86
.L141:
	cmp	r1, #0x2
	bne	.LCB1144
	b	.L113	@long jump
.LCB1144:
	cmp	r1, #0x3
	bne	.LCB1146
	b	.L126	@long jump
.LCB1146:
	b	.L86
.L87:
	lsl	r1, r2, #0x18
	lsr	r0, r1, #0x1c
	cmp	r0, #0x1
	bne	.L88	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	orr	r0, r0, r7
	strb	r0, [r4]
	strb	r6, [r4, #0x1]
	b	.L89
.L88:
	lsr	r0, r1, #0x1c
	cmp	r0, #0x3
	bne	.L90	@cond_branch
	lsl	r0, r2, #0x1e
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r0, r0, r1
	and	r0, r0, r7
	lsl	r0, r0, #0x1
	mov	r1, #0x3
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	orr	r1, r1, r7
	strb	r1, [r4]
	strb	r6, [r4, #0x1]
	b	.L89
.L90:
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L89	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r6, #0x1
	eor	r1, r1, r6
	and	r1, r1, r7
	mov	r0, #0x2
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r5, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
	ldrb	r1, [r4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L93	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L95	@cond_branch
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L145
.L95:
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L145
.L94:
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L98	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0xc
	b	.L146
.L98:
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0xc
.L146:
	strb	r0, [r1]
.L145:
	ldrb	r2, [r4, #0xe]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	eor	r0, r0, r6
	and	r0, r0, r7
	mov	r1, r8
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0xe]
.L93:
	ldrb	r1, [r4]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	ip, r1
.L89:
	ldrb	r1, [r4]
	mov	r0, #0xf
	and	r0, r0, r1
	strb	r0, [r4]
	b	.L86
.L100:
	lsl	r1, r2, #0x18
	lsr	r0, r1, #0x1c
	cmp	r0, #0
	bne	.L101	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	b	.L147
.L101:
	lsr	r0, r1, #0x1c
	cmp	r0, #0x2
	bne	.L103	@cond_branch
	add	r0, r2, #0
.L147:
	orr	r0, r0, r7
	strb	r0, [r4]
	strb	r6, [r4, #0x1]
	b	.L102
.L103:
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L102	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r6, #0x1
	eor	r1, r1, r6
	and	r1, r1, r7
	mov	r0, #0x2
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r5, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
	ldrb	r1, [r4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L106	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L107	@cond_branch
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L108	@cond_branch
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L148
.L108:
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L148
.L107:
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L111	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0xc
	b	.L149
.L111:
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0xc
.L149:
	strb	r0, [r1]
.L148:
	ldrb	r2, [r4, #0xe]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	eor	r0, r0, r6
	and	r0, r0, r7
	mov	r1, r8
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0xe]
.L106:
	ldrb	r1, [r4]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	ip, r1
.L102:
	ldrb	r0, [r4]
	mov	r1, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	b	.L150
.L113:
	lsl	r1, r2, #0x18
	lsr	r0, r1, #0x1c
	cmp	r0, #0x3
	bne	.L114	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	b	.L151
.L114:
	lsr	r0, r1, #0x1c
	cmp	r0, #0x1
	bne	.L116	@cond_branch
	add	r0, r2, #0
.L151:
	orr	r0, r0, r7
	strb	r0, [r4]
	strb	r6, [r4, #0x1]
	b	.L115
.L116:
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L115	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r6, #0x1
	eor	r1, r1, r6
	and	r1, r1, r7
	mov	r0, #0x2
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r5, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
	ldrb	r1, [r4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L119	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L120	@cond_branch
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L121	@cond_branch
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L152
.L121:
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L152
.L120:
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L124	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0xc
	b	.L153
.L124:
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0xc
.L153:
	strb	r0, [r1]
.L152:
	ldrb	r2, [r4, #0xe]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	eor	r0, r0, r6
	and	r0, r0, r7
	mov	r1, r8
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0xe]
.L119:
	ldrb	r1, [r4]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	ip, r1
.L115:
	ldrb	r0, [r4]
	mov	r1, #0xf
	and	r1, r1, r0
	mov	r0, #0x20
	b	.L150
.L126:
	lsl	r1, r2, #0x18
	lsr	r0, r1, #0x1c
	cmp	r0, #0x2
	bne	.L127	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r4]
	b	.L128
.L127:
	lsr	r0, r1, #0x1c
	cmp	r0, #0
	bne	.L129	@cond_branch
	lsl	r0, r2, #0x1e
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r0, r0, r1
	and	r0, r0, r7
	lsl	r0, r0, #0x1
	mov	r1, #0x3
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	orr	r1, r1, r7
	strb	r1, [r4]
	strb	r6, [r4, #0x1]
	b	.L128
.L129:
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L128	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r6, #0x1
	eor	r1, r1, r6
	and	r1, r1, r7
	mov	r0, #0x2
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r5, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
	ldrb	r1, [r4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L132	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L133	@cond_branch
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L134	@cond_branch
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L154
.L134:
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L154
.L133:
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L137	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0xc
	b	.L155
.L137:
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0xc
.L155:
	strb	r0, [r1]
.L154:
	ldrb	r2, [r4, #0xe]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	eor	r0, r0, r6
	and	r0, r0, r7
	mov	r1, r8
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0xe]
.L132:
	ldrb	r1, [r4]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	ip, r1
.L128:
	ldrb	r0, [r4]
	mov	r1, #0xf
	and	r1, r1, r0
	mov	r0, #0x30
.L150:
	orr	r1, r1, r0
	strb	r1, [r4]
.L86:
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1e
	lsr	r1, r1, #0x1f
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r3, .L156
	mov	r2, ip
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r5, #0x24]
	ldrb	r2, [r5, #0x3]
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1b
	mov	r1, #0x24
	ldrsh	r0, [r5, r1]
	neg	r0, r0
	asr	r0, r0, #0x1
	ldrb	r1, [r4, #0xa]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	ldrh	r6, [r1]
	ldr	r1, .L156+0x4
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	add	r0, r0, #0x40
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r2, #0x6]
	strh	r0, [r2]
	strh	r6, [r2, #0x2]
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r2, #0x4]
	ldrh	r0, [r4, #0x6]
	ldrh	r2, [r4, #0x8]
	add	r0, r0, r2
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L142	@cond_branch
	ldrh	r0, [r4, #0x4]
	sub	r1, r1, #0x1
	and	r1, r1, r0
	ldrh	r0, [r4, #0x2]
	sub	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2]
	b	.L143
.L157:
	.align	2, 0
.L156:
	.word	gSineTable
	.word	gOamMatrices
.L142:
	ldrh	r0, [r4, #0x4]
	ldr	r1, .L158
	and	r1, r1, r0
	ldrh	r2, [r4, #0x2]
	add	r1, r1, r2
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r4, #0x2]
.L143:
	mov	r0, #0x22
	ldrsh	r1, [r5, r0]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	add	r1, r1, r0
	ldrh	r0, [r4, #0xe]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	blt	.L85	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L158+0x4
	str	r0, [r5, #0x1c]
.L85:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	0x7fff
	.word	DestroyAnimSpriteAfterTimer
.Lfe14:
	.size	 AnimFallingFeather_Step,.Lfe14-AnimFallingFeather_Step
	.align	2, 0
	.type	 AnimUnusedBubbleThrow,function
	.thumb_func
AnimUnusedBubbleThrow:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, .L161
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	ldr	r5, .L161+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r0, .L161+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	TranslateAnimSpriteToTargetMonLocation
.Lfe15:
	.size	 AnimUnusedBubbleThrow,.Lfe15-AnimUnusedBubbleThrow
	.align	2, 0
	.type	 AnimUnusedFeather,function
	.thumb_func
AnimUnusedFeather:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r5, .L173
	ldrh	r0, [r5]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x34]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L164	@cond_branch
	ldr	r0, .L173+0x4
	ldr	r1, .L173+0x8
	ldrb	r2, [r1]
	add	r0, r2, r0
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L165	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x6]
	add	r0, r0, r5
	b	.L172
.L174:
	.align	2, 0
.L173:
	.word	gBattleAnimArgs
	.word	gBattlerPositions
	.word	gBattleAnimTarget
.L165:
	add	r0, r2, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x28
.L172:
	strh	r0, [r4, #0x3c]
	ldr	r0, .L175
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L167	@cond_branch
	ldr	r0, .L175+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	b	.L169
.L176:
	.align	2, 0
.L175:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L167:
	ldr	r0, .L177
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	b	.L169
.L178:
	.align	2, 0
.L177:
	.word	gBattleAnimTarget
.L164:
	ldr	r0, .L179
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x6]
	add	r0, r0, r5
	strh	r0, [r4, #0x3c]
.L169:
	ldr	r5, .L179+0x4
	ldrh	r3, [r4, #0x30]
	mov	r1, #0xff
	and	r1, r1, r3
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	mov	r2, #0x0
	strh	r0, [r4, #0x36]
	add	r1, r1, #0x40
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r4, #0x38]
	strh	r2, [r4, #0x3a]
	strh	r2, [r4, #0x26]
	strh	r2, [r4, #0x24]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r6, r0, #0x1b
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x18
	strh	r3, [r4, #0x30]
	bl	Random
	lsl	r0, r0, #0x10
	asr	r7, r0, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L170	@cond_branch
	ldrh	r1, [r4, #0x30]
	mov	r0, #0xff
	sub	r0, r0, r1
	strh	r0, [r4, #0x30]
.L170:
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	ldr	r3, .L179+0x8
	lsl	r2, r6, #0x3
	add	r2, r2, r3
	add	r1, r1, #0x40
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r1, [r1]
	strh	r1, [r2, #0x6]
	strh	r1, [r2]
	strh	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r2, #0x4]
	add	r3, r4, #0
	add	r3, r3, #0x3f
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
	mov	r0, #0x1
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L171	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x2a
	mov	r1, #0x1
	mov	r0, #0x1
	strb	r0, [r2]
	ldrb	r0, [r3]
	orr	r0, r0, r1
	strb	r0, [r3]
.L171:
	ldr	r0, .L179+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L180:
	.align	2, 0
.L179:
	.word	gBattleAnimTarget
	.word	gSineTable
	.word	gOamMatrices
	.word	AnimUnusedFeather_Step
.Lfe16:
	.size	 AnimUnusedFeather,.Lfe16-AnimUnusedFeather
	.align	2, 0
	.type	 AnimUnusedFeather_Step,function
	.thumb_func
AnimUnusedFeather_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	add	r5, r4, #0
	add	r5, r5, #0x2e
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	mov	r1, #0x0
	mov	r8, r1
	mov	r7, #0x0
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L181	@cond_branch
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	mul	r0, r0, r1
	asr	r6, r0, #0x8
	strh	r6, [r4, #0x24]
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	mul	r0, r0, r1
	asr	r3, r0, #0x8
	strh	r3, [r4, #0x26]
	ldrh	r2, [r4, #0x34]
	mov	r1, #0xff
	add	r0, r1, #0
	and	r0, r0, r2
	ldrh	r2, [r4, #0x3a]
	add	r0, r0, r2
	strh	r0, [r4, #0x3a]
	ldrh	r2, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	and	r1, r1, r2
	cmp	r0, r1
	blt	.L181	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, r6
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, r3
	strh	r0, [r4, #0x22]
	strh	r7, [r4, #0x24]
	strh	r7, [r4, #0x26]
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x10
	bl	memcpy
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x10
	bl	memset
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x8
	strh	r0, [r5, #0x8]
	mov	r0, sp
	ldrh	r0, [r0, #0x6]
	lsr	r1, r0, #0x8
	strh	r1, [r5, #0x6]
	strh	r7, [r5, #0x2]
	mov	r0, sp
	ldrh	r0, [r0, #0x2]
	strh	r0, [r5, #0xa]
	add	r0, r4, #0
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L184	@cond_branch
	mov	r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L185	@cond_branch
	ldr	r0, .L191
	b	.L190
.L192:
	.align	2, 0
.L191:
	.word	0x8001
.L185:
	ldr	r0, .L193
	b	.L190
.L194:
	.align	2, 0
.L193:
	.word	0x8002
.L184:
	mov	r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L188	@cond_branch
	mov	r0, #0x1
	b	.L190
.L188:
	mov	r0, #0x2
.L190:
	strh	r0, [r5, #0x4]
	mov	r0, sp
	ldrh	r0, [r0, #0x4]
	lsr	r0, r0, #0x8
	strb	r0, [r5, #0xc]
	sub	r0, r0, #0x2
	strb	r0, [r5, #0xd]
	mov	r0, sp
	ldrh	r1, [r0, #0xe]
	lsl	r1, r1, #0x1
	ldrh	r2, [r5, #0xe]
	mov	r0, #0x1
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0xe]
	ldr	r0, .L195
	str	r0, [r4, #0x1c]
.L181:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L196:
	.align	2, 0
.L195:
	.word	AnimFallingFeather_Step
.Lfe17:
	.size	 AnimUnusedFeather_Step,.Lfe17-AnimUnusedFeather_Step
	.align	2, 0
	.type	 AnimWhirlwindLine,function
	.thumb_func
AnimWhirlwindLine:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L203
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L198	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	b	.L199
.L204:
	.align	2, 0
.L203:
	.word	gBattleAnimArgs
.L198:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
.L199:
	ldr	r4, .L205
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L202	@cond_branch
	ldr	r0, .L205+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L201	@cond_branch
.L202:
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L200	@cond_branch
	ldr	r0, .L205+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L200	@cond_branch
.L201:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x8
	strh	r0, [r5, #0x20]
.L200:
	ldr	r4, .L205
	ldrb	r1, [r4, #0x8]
	add	r0, r5, #0
	bl	SeekSpriteAnim
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x20
	strh	r0, [r5, #0x20]
	ldr	r0, .L205+0xc
	strh	r0, [r5, #0x30]
	ldrh	r1, [r4, #0x8]
	mov	r0, #0xc
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r2, #0
	ldrh	r2, [r5, #0x24]
	add	r0, r0, r2
	strh	r0, [r5, #0x24]
	strh	r1, [r5, #0x2e]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x3c]
	ldr	r0, .L205+0x10
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L206:
	.align	2, 0
.L205:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	0xccc
	.word	AnimWhirlwindLine_Step
.Lfe18:
	.size	 AnimWhirlwindLine,.Lfe18-AnimWhirlwindLine
	.align	2, 0
	.type	 AnimWhirlwindLine_Step,function
	.thumb_func
AnimWhirlwindLine_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L208	@cond_branch
	strh	r1, [r4, #0x2e]
	strh	r1, [r4, #0x24]
	add	r0, r4, #0
	bl	StartSpriteAnim
.L208:
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L209	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L209:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimWhirlwindLine_Step,.Lfe19-AnimWhirlwindLine_Step
	.align	2, 0
	.globl	AnimTask_DrillPeckHitSplats
	.type	 AnimTask_DrillPeckHitSplats,function
	.thumb_func
AnimTask_DrillPeckHitSplats:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L213
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r7, r0, r1
	ldrh	r0, [r7, #0x8]
	mov	r1, #0x1f
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L211	@cond_branch
	ldr	r1, .L213+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	mov	r5, #0xd
	neg	r5, r5
	add	r1, r5, #0
	bl	Sin
	ldr	r4, .L213+0x8
	strh	r0, [r4]
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	add	r1, r5, #0
	bl	Cos
	strh	r0, [r4, #0x2]
	mov	r0, #0x1
	strh	r0, [r4, #0x4]
	mov	r0, #0x3
	strh	r0, [r4, #0x6]
	ldr	r0, .L213+0xc
	mov	r8, r0
	ldr	r5, .L213+0x10
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, #0x3
	bl	CreateSpriteAndAnimate
.L211:
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x8
	strh	r0, [r7, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L212	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L212:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	gTasks
	.word	gAnimVisualTaskCount
	.word	gBattleAnimArgs
	.word	gFlashingHitSplatSpriteTemplate
	.word	gBattleAnimTarget
.Lfe20:
	.size	 AnimTask_DrillPeckHitSplats,.Lfe20-AnimTask_DrillPeckHitSplats
	.align	2, 0
	.type	 AnimBounceBallShrink,function
	.thumb_func
AnimBounceBallShrink:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L217	@cond_branch
	cmp	r0, #0x1
	beq	.L218	@cond_branch
	b	.L216
.L217:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L222
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L216
.L223:
	.align	2, 0
.L222:
	.word	gSprites
.L218:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L216	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L216:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 AnimBounceBallShrink,.Lfe21-AnimBounceBallShrink
	.align	2, 0
	.type	 AnimBounceBallLand,function
	.thumb_func
AnimBounceBallLand:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L227	@cond_branch
	cmp	r0, #0x1
	bgt	.L233	@cond_branch
	cmp	r0, #0
	beq	.L226	@cond_branch
	b	.L225
.L233:
	cmp	r0, #0x2
	beq	.L229	@cond_branch
	b	.L225
.L226:
	ldr	r0, .L235
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	neg	r0, r0
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x26]
	b	.L234
.L236:
	.align	2, 0
.L235:
	.word	gBattleAnimTarget
.L227:
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0xa
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L225	@cond_branch
.L234:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L225
.L229:
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, #0xa
	strh	r0, [r4, #0x26]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L225	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L237
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L225:
	pop	{r4}
	pop	{r0}
	bx	r0
.L238:
	.align	2, 0
.L237:
	.word	gSprites
.Lfe22:
	.size	 AnimBounceBallLand,.Lfe22-AnimBounceBallLand
	.align	2, 0
	.type	 AnimDiveBall,function
	.thumb_func
AnimDiveBall:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r1, .L240
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L240+0x4
	str	r0, [r4, #0x1c]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L240+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L241:
	.align	2, 0
.L240:
	.word	gBattleAnimArgs
	.word	AnimDiveBall_Step1
	.word	gSprites
.Lfe23:
	.size	 AnimDiveBall,.Lfe23-AnimDiveBall
	.align	2, 0
	.type	 AnimDiveBall_Step1,function
	.thumb_func
AnimDiveBall_Step1:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L243	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x2e]
	b	.L244
.L243:
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	ble	.L245	@cond_branch
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r2, #0x26]
	sub	r1, r1, r0
	strh	r1, [r2, #0x26]
	b	.L244
.L245:
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r2, #0x34]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L244	@cond_branch
	ldr	r0, .L248
	str	r0, [r2, #0x1c]
.L244:
	pop	{r0}
	bx	r0
.L249:
	.align	2, 0
.L248:
	.word	AnimDiveBall_Step2
.Lfe24:
	.size	 AnimDiveBall_Step1,.Lfe24-AnimDiveBall_Step1
	.align	2, 0
	.type	 AnimDiveBall_Step2,function
	.thumb_func
AnimDiveBall_Step2:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r2, #0x26]
	add	r0, r0, r1
	strh	r0, [r2, #0x26]
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	ble	.L251	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L251:
	mov	r1, #0x26
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	ble	.L252	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L252:
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 AnimDiveBall_Step2,.Lfe25-AnimDiveBall_Step2
	.align	2, 0
	.type	 AnimDiveWaterSplash,function
	.thumb_func
AnimDiveWaterSplash:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L255	@cond_branch
	cmp	r0, #0x1
	beq	.L258	@cond_branch
	b	.L254
.L255:
	ldr	r0, .L267
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L256	@cond_branch
	ldr	r4, .L267+0x4
	b	.L265
.L268:
	.align	2, 0
.L267:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L256:
	ldr	r4, .L269
.L265:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	strh	r3, [r5, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	TrySetSpriteRotScale
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L254
.L270:
	.align	2, 0
.L269:
	.word	gBattleAnimTarget
.L258:
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xb
	bgt	.L259	@cond_branch
	ldrh	r0, [r5, #0x30]
	sub	r0, r0, #0x28
	b	.L266
.L259:
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x28
.L266:
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r5, #0x32]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x30
	ldrsh	r3, [r5, r0]
	str	r1, [sp]
	add	r0, r5, #0
	bl	TrySetSpriteRotScale
	ldrb	r1, [r5, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0xf4
	lsl	r0, r0, #0x6
	ldr	r2, .L271
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	add	r1, r0, #0x1
	cmp	r1, #0x80
	ble	.L261	@cond_branch
	mov	r1, #0x80
.L261:
	mov	r0, #0x40
	sub	r0, r0, r1
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r1, r0, #0x1
	strh	r1, [r5, #0x26]
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x18
	bne	.L254	@cond_branch
	add	r0, r5, #0
	bl	TryResetSpriteAffineState
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L254:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	gOamMatrices
.Lfe26:
	.size	 AnimDiveWaterSplash,.Lfe26-AnimDiveWaterSplash
	.align	2, 0
	.type	 AnimSprayWaterDroplet,function
	.thumb_func
AnimSprayWaterDroplet:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	Random
	ldr	r4, .L284
	and	r4, r4, r0
	bl	Random
	mov	r1, #0x7f
	and	r1, r1, r0
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L274	@cond_branch
	mov	r2, #0xb8
	lsl	r2, r2, #0x2
	add	r0, r4, r2
	b	.L281
.L285:
	.align	2, 0
.L284:
	.word	0x1ff
.L274:
	mov	r2, #0xb8
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	sub	r0, r0, r4
.L281:
	strh	r0, [r5, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L276	@cond_branch
	mov	r2, #0xe0
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	add	r0, r1, r0
	b	.L282
.L276:
	mov	r2, #0xe0
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	sub	r0, r0, r1
.L282:
	strh	r0, [r5, #0x30]
	ldr	r2, .L286
	ldrh	r0, [r2]
	strh	r0, [r5, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L278	@cond_branch
	ldrb	r0, [r5, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
.L278:
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L279	@cond_branch
	ldr	r4, .L286+0x4
	b	.L283
.L287:
	.align	2, 0
.L286:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L279:
	ldr	r4, .L288
.L283:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	strh	r0, [r5, #0x22]
	ldr	r0, .L288+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L289:
	.align	2, 0
.L288:
	.word	gBattleAnimTarget
	.word	AnimSprayWaterDroplet_Step
.Lfe27:
	.size	 AnimSprayWaterDroplet,.Lfe27-AnimSprayWaterDroplet
	.align	2, 0
	.type	 AnimSprayWaterDroplet_Step,function
	.thumb_func
AnimSprayWaterDroplet_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L291	@cond_branch
	ldrh	r3, [r4, #0x2e]
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	b	.L295
.L291:
	ldrh	r3, [r4, #0x2e]
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
.L295:
	strh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x30]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, r1
	strh	r0, [r4, #0x26]
	strh	r3, [r4, #0x2e]
	add	r0, r2, #0
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x30]
	lsl	r0, r3, #0x10
	cmp	r0, #0
	bge	.L293	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
.L293:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L294	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L294:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 AnimSprayWaterDroplet_Step,.Lfe28-AnimSprayWaterDroplet_Step
	.align	2, 0
	.type	 AnimUnusedFlashingLight,function
	.thumb_func
AnimUnusedFlashingLight:
	mov	r1, #0x0
	strh	r1, [r0, #0x3a]
	mov	r1, #0x40
	strh	r1, [r0, #0x3c]
	ldr	r1, .L297
	str	r1, [r0, #0x1c]
	bx	lr
.L298:
	.align	2, 0
.L297:
	.word	AnimUnusedFlashingLight_Step
.Lfe29:
	.size	 AnimUnusedFlashingLight,.Lfe29-AnimUnusedFlashingLight
	.align	2, 0
	.type	 AnimUnusedFlashingLight_Step,function
	.thumb_func
AnimUnusedFlashingLight_Step:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	cmp	r1, #0
	beq	.L301	@cond_branch
	cmp	r1, #0x1
	beq	.L304	@cond_branch
	b	.L300
.L301:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L300	@cond_branch
	strh	r1, [r3, #0x30]
	mov	r1, #0x3e
	add	r1, r1, r3
	mov	ip, r1
	ldrb	r2, [r1]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L300	@cond_branch
	ldrb	r1, [r1]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L300	@cond_branch
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	b	.L300
.L304:
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L300:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 AnimUnusedFlashingLight_Step,.Lfe30-AnimUnusedFlashingLight_Step
	.align	2, 0
	.type	 AnimSkyAttackBird,function
	.thumb_func
AnimSkyAttackBird:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x4
	mov	r8, r0
	ldrh	r4, [r0, #0x20]
	ldrh	r5, [r0, #0x22]
	ldr	r6, .L308
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	strh	r0, [r1, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r2, r8
	strh	r6, [r2, #0x22]
	ldrh	r0, [r2, #0x20]
	mov	r9, r0
	mov	r1, r9
	lsl	r0, r1, #0x4
	strh	r0, [r2, #0x36]
	lsl	r0, r6, #0x4
	strh	r0, [r2, #0x38]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	sub	r0, r4, r0
	lsl	r0, r0, #0x4
	mov	r1, #0xc
	bl	__divsi3
	mov	r2, r8
	strh	r0, [r2, #0x3a]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	sub	r0, r5, r0
	lsl	r0, r0, #0x4
	mov	r1, #0xc
	bl	__divsi3
	mov	r2, r8
	strh	r0, [r2, #0x3c]
	mov	r0, r9
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	sub	r5, r5, r6
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r0, r4, #0
	add	r1, r5, #0
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r0, [sp]
	mov	r0, r8
	mov	r1, #0x1
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldr	r0, .L308+0x4
	mov	r2, r8
	str	r0, [r2, #0x1c]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	gBattleAnimAttacker
	.word	AnimSkyAttackBird_Step
.Lfe31:
	.size	 AnimSkyAttackBird,.Lfe31-AnimSkyAttackBird
	.align	2, 0
	.type	 AnimSkyAttackBird_Step,function
	.thumb_func
AnimSkyAttackBird_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x36]
	add	r0, r0, r1
	strh	r0, [r2, #0x36]
	ldrh	r1, [r2, #0x3c]
	ldrh	r3, [r2, #0x38]
	add	r1, r1, r3
	strh	r1, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r3, r1, #0x14
	strh	r3, [r2, #0x22]
	add	r0, r0, #0x2d
	lsl	r0, r0, #0x10
	mov	r1, #0xa5
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L312	@cond_branch
	add	r1, r3, #0
	cmp	r1, #0x9d
	bgt	.L312	@cond_branch
	mov	r0, #0x2d
	neg	r0, r0
	cmp	r1, r0
	bge	.L311	@cond_branch
.L312:
	add	r0, r2, #0
	bl	DestroySpriteAndMatrix
.L311:
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 AnimSkyAttackBird_Step,.Lfe32-AnimSkyAttackBird_Step
	.align	2, 0
	.type	 AnimTask_SetAttackerVisibility,function
	.thumb_func
AnimTask_SetAttackerVisibility:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L317
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L314	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L317+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	b	.L316
.L318:
	.align	2, 0
.L317:
	.word	gBattleAnimArgs
	.word	gSprites
.L314:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L319
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
.L316:
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L320:
	.align	2, 0
.L319:
	.word	gSprites
.Lfe33:
	.size	 AnimTask_SetAttackerVisibility,.Lfe33-AnimTask_SetAttackerVisibility
.text
	.align	2, 0 @ Don't pad with nop

