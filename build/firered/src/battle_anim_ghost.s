@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sAffineAnim_ConfuseRayBallBounce,object
sAffineAnim_ConfuseRayBallBounce:
	.short	0x1e
	.short	0x1e
	.byte	0xa
	.byte	0x5
	.space	2
	.short	-0x1e
	.short	-0x1e
	.byte	0xa
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_ConfuseRayBallBounce,24
	.align	2, 0
	.type	 sAffineAnims_ConfuseRayBallBounce,object
sAffineAnims_ConfuseRayBallBounce:
	.word	sAffineAnim_ConfuseRayBallBounce
	.size	 sAffineAnims_ConfuseRayBallBounce,4
	.globl	gConfuseRayBallBounceSpriteTemplate
	.align	2, 0
	.type	 gConfuseRayBallBounceSpriteTemplate,object
	.size	 gConfuseRayBallBounceSpriteTemplate,24
gConfuseRayBallBounceSpriteTemplate:
	.short	0x271d
	.short	0x271d
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_ConfuseRayBallBounce
	.word	AnimConfuseRayBallBounce
	.globl	gConfuseRayBallSpiralSpriteTemplate
	.align	2, 0
	.type	 gConfuseRayBallSpiralSpriteTemplate,object
	.size	 gConfuseRayBallSpiralSpriteTemplate,24
gConfuseRayBallSpiralSpriteTemplate:
	.short	0x271d
	.short	0x271d
	.word	gOamData_AffineOff_ObjBlend_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimConfuseRayBallSpiral
	.align	2, 0
	.type	 sAffineAnim_ShadowBall,object
sAffineAnim_ShadowBall:
	.short	0x0
	.short	0x0
	.byte	0xa
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_ShadowBall,16
	.align	2, 0
	.type	 sAffineAnims_ShadowBall,object
sAffineAnims_ShadowBall:
	.word	sAffineAnim_ShadowBall
	.size	 sAffineAnims_ShadowBall,4
	.globl	gShadowBallSpriteTemplate
	.align	2, 0
	.type	 gShadowBallSpriteTemplate,object
	.size	 gShadowBallSpriteTemplate,24
gShadowBallSpriteTemplate:
	.short	0x27c0
	.short	0x27c0
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_ShadowBall
	.word	AnimShadowBall
	.globl	sAnim_Lick
	.align	2, 0
	.type	 sAnim_Lick,object
sAnim_Lick:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x8
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x18
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Lick,24
	.align	2, 0
	.type	 sAnims_Lick,object
sAnims_Lick:
	.word	sAnim_Lick
	.size	 sAnims_Lick,4
	.globl	gLickSpriteTemplate
	.align	2, 0
	.type	 gLickSpriteTemplate,object
	.size	 gLickSpriteTemplate,24
gLickSpriteTemplate:
	.short	0x27c1
	.short	0x27c1
	.word	gOamData_AffineOff_ObjNormal_16x32
	.word	sAnims_Lick
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLick
	.align	2, 0
	.type	 sAffineAnim_Unused,object
sAffineAnim_Unused:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Unused,16
	.align	2, 0
	.type	 sAffineAnims_Unused,object
sAffineAnims_Unused:
	.word	sAffineAnim_Unused
	.size	 sAffineAnims_Unused,4
	.globl	gDestinyBondWhiteShadowSpriteTemplate
	.align	2, 0
	.type	 gDestinyBondWhiteShadowSpriteTemplate,object
	.size	 gDestinyBondWhiteShadowSpriteTemplate,24
gDestinyBondWhiteShadowSpriteTemplate:
	.short	0x27cc
	.short	0x27cc
	.word	gOamData_AffineOff_ObjBlend_64x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDestinyBondWhiteShadow
	.globl	gCurseNailSpriteTemplate
	.align	2, 0
	.type	 gCurseNailSpriteTemplate,object
	.size	 gCurseNailSpriteTemplate,24
gCurseNailSpriteTemplate:
	.short	0x27d7
	.short	0x27d7
	.word	gOamData_AffineOff_ObjBlend_32x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCurseNail
	.globl	gCurseGhostSpriteTemplate
	.align	2, 0
	.type	 gCurseGhostSpriteTemplate,object
	.size	 gCurseGhostSpriteTemplate,24
gCurseGhostSpriteTemplate:
	.short	0x27d8
	.short	0x27d8
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGhostStatusSprite
	.globl	gNightmareDevilSpriteTemplate
	.align	2, 0
	.type	 gNightmareDevilSpriteTemplate,object
	.size	 gNightmareDevilSpriteTemplate,24
gNightmareDevilSpriteTemplate:
	.short	0x27ed
	.short	0x27ed
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGhostStatusSprite
	.align	2, 0
	.type	 sAnim_GrudgeFlame,object
sAnim_GrudgeFlame:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x18
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_GrudgeFlame,20
	.align	2, 0
	.type	 sAnims_GrudgeFlame,object
sAnims_GrudgeFlame:
	.word	sAnim_GrudgeFlame
	.size	 sAnims_GrudgeFlame,4
	.globl	gGrudgeFlameSpriteTemplate
	.align	2, 0
	.type	 gGrudgeFlameSpriteTemplate,object
	.size	 gGrudgeFlameSpriteTemplate,24
gGrudgeFlameSpriteTemplate:
	.short	0x280d
	.short	0x280d
	.word	gOamData_AffineOff_ObjBlend_16x32
	.word	sAnims_GrudgeFlame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGrudgeFlame
	.align	2, 0
	.type	 sMonMoveCircularSpriteTemplate,object
	.size	 sMonMoveCircularSpriteTemplate,24
sMonMoveCircularSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMonMoveCircular
.text
	.align	2, 0
	.type	 AnimConfuseRayBallBounce,function
	.thumb_func
AnimConfuseRayBallBounce:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L5
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r5, .L5+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslationWithSpeed
	ldr	r0, .L5+0x8
	str	r0, [r4, #0x1c]
	mov	r0, #0x10
	strh	r0, [r4, #0x3a]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x3a]
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimConfuseRayBallBounce_Step1
.Lfe1:
	.size	 AnimConfuseRayBallBounce,.Lfe1-AnimConfuseRayBallBounce
	.align	2, 0
	.type	 AnimConfuseRayBallBounce_Step1,function
	.thumb_func
AnimConfuseRayBallBounce_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateConfuseRayBallBlend
	add	r0, r4, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L8	@cond_branch
	ldr	r0, .L11
	str	r0, [r4, #0x1c]
	b	.L7
.L12:
	.align	2, 0
.L11:
	.word	AnimConfuseRayBallBounce_Step2
.L8:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xf
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x38]
	add	r0, r2, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x38]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0
	beq	.L9	@cond_branch
	cmp	r2, #0xc4
	ble	.L7	@cond_branch
.L9:
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L7	@cond_branch
	ldr	r0, .L13
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r0, #0xbd
	bl	PlaySE12WithPanning
.L7:
	pop	{r4}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gAnimCustomPanning
.Lfe2:
	.size	 AnimConfuseRayBallBounce_Step1,.Lfe2-AnimConfuseRayBallBounce_Step1
	.align	2, 0
	.type	 AnimConfuseRayBallBounce_Step2,function
	.thumb_func
AnimConfuseRayBallBounce_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	AnimTranslateLinear
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xf
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x38]
	add	r0, r2, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x38]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0
	beq	.L17	@cond_branch
	cmp	r2, #0xc4
	ble	.L16	@cond_branch
.L17:
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L16	@cond_branch
	mov	r0, #0xbd
	bl	PlaySE
.L16:
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L18	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L20
	str	r0, [r4, #0x1c]
	b	.L19
.L21:
	.align	2, 0
.L20:
	.word	DestroyAnimSpriteAndDisableBlend
.L18:
	add	r0, r4, #0
	bl	UpdateConfuseRayBallBlend
.L19:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 AnimConfuseRayBallBounce_Step2,.Lfe3-AnimConfuseRayBallBounce_Step2
	.align	2, 0
	.type	 UpdateConfuseRayBallBlend,function
	.thumb_func
UpdateConfuseRayBallBlend:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x3a]
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xff
	ble	.L23	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	ldr	r1, .L33
	cmp	r0, r1
	bne	.L22	@cond_branch
	mov	r0, #0x0
	b	.L31
.L34:
	.align	2, 0
.L33:
	.word	0x10d0000
.L23:
	ldrh	r1, [r4, #0x3c]
	add	r3, r1, #0x1
	strh	r3, [r4, #0x3c]
	mov	r0, #0xff
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L22	@cond_branch
	ldr	r1, .L35
	and	r1, r1, r3
	strh	r1, [r4, #0x3c]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L26	@cond_branch
	add	r0, r2, #0x1
	b	.L32
.L36:
	.align	2, 0
.L35:
	.word	-0x100
.L26:
	sub	r0, r2, #0x1
.L32:
	strh	r0, [r4, #0x3a]
	ldrh	r0, [r4, #0x3a]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L29	@cond_branch
	cmp	r0, #0x10
	bne	.L28	@cond_branch
.L29:
	ldrh	r0, [r4, #0x3c]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r2, #0
	eor	r0, r0, r1
	strh	r0, [r4, #0x3c]
.L28:
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L22	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L31:
	strh	r0, [r4, #0x3a]
.L22:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 UpdateConfuseRayBallBlend,.Lfe4-UpdateConfuseRayBallBlend
	.align	2, 0
	.type	 AnimConfuseRayBallSpiral,function
	.thumb_func
AnimConfuseRayBallSpiral:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r1, .L38
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	AnimConfuseRayBallSpiral_Step
.Lfe5:
	.size	 AnimConfuseRayBallSpiral,.Lfe5-AnimConfuseRayBallSpiral
	.align	2, 0
	.type	 AnimConfuseRayBallSpiral_Step,function
	.thumb_func
AnimConfuseRayBallSpiral_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x41
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x82
	bhi	.L41	@cond_branch
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x8
	b	.L44
.L41:
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
.L44:
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x13
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x50
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3d
	bne	.L43	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L43:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimConfuseRayBallSpiral_Step,.Lfe6-AnimConfuseRayBallSpiral_Step
	.align	2, 0
	.globl	AnimTask_NightShadeClone
	.type	 AnimTask_NightShadeClone,function
	.thumb_func
AnimTask_NightShadeClone:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	PrepareBattlerSpriteForRotScale
	add	r0, r4, #0
	mov	r1, #0x80
	mov	r2, #0x80
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldr	r1, .L46
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L46+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x0
	mov	r1, #0x80
	strh	r1, [r0, #0x8]
	ldr	r1, .L46+0x8
	ldrh	r1, [r1]
	strh	r1, [r0, #0xa]
	strh	r2, [r0, #0xc]
	mov	r1, #0x10
	strh	r1, [r0, #0xe]
	ldr	r1, .L46+0xc
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gSprites
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_NightShadeClone_Step1
.Lfe7:
	.size	 AnimTask_NightShadeClone,.Lfe7-AnimTask_NightShadeClone
	.align	2, 0
	.type	 AnimTask_NightShadeClone_Step1,function
	.thumb_func
AnimTask_NightShadeClone_Step1:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L51
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L48	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0xc]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x9
	bne	.L48	@cond_branch
	ldr	r0, .L51+0x4
	str	r0, [r4]
.L48:
	pop	{r4}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gTasks
	.word	AnimTask_NightShadeClone_Step2
.Lfe8:
	.size	 AnimTask_NightShadeClone_Step1,.Lfe8-AnimTask_NightShadeClone_Step1
	.align	2, 0
	.type	 AnimTask_NightShadeClone_Step2,function
	.thumb_func
AnimTask_NightShadeClone_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L57
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L54	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xa]
	b	.L53
.L58:
	.align	2, 0
.L57:
	.word	gTasks
.L54:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	bgt	.L55	@cond_branch
	mov	r0, #0x8
	ldrsh	r2, [r4, r0]
	add	r0, r1, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	b	.L53
.L55:
	add	r0, r1, #0
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
.L53:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 AnimTask_NightShadeClone_Step2,.Lfe9-AnimTask_NightShadeClone_Step2
	.align	2, 0
	.type	 AnimShadowBall,function
	.thumb_func
AnimShadowBall:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldrh	r5, [r4, #0x20]
	ldrh	r6, [r4, #0x22]
	ldr	r0, .L60
	mov	r8, r0
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	mov	r9, r1
	strh	r0, [r4, #0x20]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	mov	r1, r9
	strh	r1, [r4, #0x2e]
	ldr	r2, .L60+0x4
	ldrh	r1, [r2]
	strh	r1, [r4, #0x30]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r4, #0x32]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r4, #0x34]
	ldrh	r1, [r4, #0x20]
	lsl	r1, r1, #0x4
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x38]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	sub	r5, r5, r0
	lsl	r5, r5, #0x4
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r1, r1, #0x1
	add	r0, r5, #0
	str	r2, [sp]
	bl	__divsi3
	strh	r0, [r4, #0x3a]
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	sub	r6, r6, r0
	lsl	r6, r6, #0x4
	ldr	r2, [sp]
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r1, r1, #0x1
	add	r0, r6, #0
	bl	__divsi3
	strh	r0, [r4, #0x3c]
	ldr	r0, .L60+0x8
	str	r0, [r4, #0x1c]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimShadowBall_Step
.Lfe10:
	.size	 AnimShadowBall,.Lfe10-AnimShadowBall
	.align	2, 0
	.type	 AnimShadowBall_Step,function
	.thumb_func
AnimShadowBall_Step:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L66	@cond_branch
	cmp	r0, #0x1
	bgt	.L73	@cond_branch
	cmp	r0, #0
	beq	.L64	@cond_branch
	b	.L63
.L73:
	cmp	r0, #0x2
	beq	.L68	@cond_branch
	cmp	r0, #0x3
	beq	.L70	@cond_branch
	b	.L63
.L64:
	ldrh	r0, [r5, #0x3a]
	ldrh	r2, [r5, #0x36]
	add	r0, r0, r2
	strh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x3c]
	ldrh	r2, [r5, #0x38]
	add	r1, r1, r2
	strh	r1, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r5, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r5, #0x22]
	ldrh	r0, [r5, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L63	@cond_branch
	b	.L74
.L66:
	ldrh	r0, [r5, #0x32]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L63	@cond_branch
	ldr	r4, .L75
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x30]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x36]
	ldrh	r0, [r5, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x38]
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r2, #0x34
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r5, #0x3a]
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	mov	r2, #0x22
	ldrsh	r1, [r5, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r2, #0x34
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r5, #0x3c]
	b	.L74
.L76:
	.align	2, 0
.L75:
	.word	gBattleAnimTarget
.L68:
	ldrh	r0, [r5, #0x3a]
	ldrh	r1, [r5, #0x36]
	add	r0, r0, r1
	strh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x3c]
	ldrh	r2, [r5, #0x38]
	add	r1, r1, r2
	strh	r1, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r5, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r5, #0x22]
	ldrh	r0, [r5, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L63	@cond_branch
	ldr	r4, .L77
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L74:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L63
.L78:
	.align	2, 0
.L77:
	.word	gBattleAnimTarget
.L70:
	add	r0, r5, #0
	bl	DestroySpriteAndMatrix
.L63:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 AnimShadowBall_Step,.Lfe11-AnimShadowBall_Step
	.align	2, 0
	.type	 AnimLick,function
	.thumb_func
AnimLick:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L80
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	AnimLick_Step
.Lfe12:
	.size	 AnimLick,.Lfe12-AnimLick
	.align	2, 0
	.type	 AnimLick_Step,function
	.thumb_func
AnimLick_Step:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r5, #0x0
	mov	r6, #0x0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L83	@cond_branch
	add	r1, r3, #0
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x4
	and	r0, r0, r2
	add	r4, r1, #0
	cmp	r0, #0
	bne	.L84	@cond_branch
	mov	r0, #0x4
	orr	r0, r0, r2
	strb	r0, [r4]
.L84:
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L87	@cond_branch
	cmp	r0, #0x1
	beq	.L89	@cond_branch
	mov	r6, #0x1
	b	.L85
.L87:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x2
	bne	.L85	@cond_branch
	b	.L97
.L89:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x4
	bne	.L85	@cond_branch
	mov	r5, #0x1
.L85:
	cmp	r5, #0
	beq	.L92	@cond_branch
.L97:
	ldrb	r2, [r4]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r3, #0x32]
	strh	r1, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L83	@cond_branch
	strh	r1, [r3, #0x32]
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	b	.L83
.L92:
	cmp	r6, #0
	beq	.L95	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
	b	.L83
.L95:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
.L83:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 AnimLick_Step,.Lfe13-AnimLick_Step
	.align	2, 0
	.globl	AnimTask_NightmareClone
	.type	 AnimTask_NightmareClone,function
	.thumb_func
AnimTask_NightmareClone:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L103
	add	r5, r0, r1
	mov	r0, #0x1
	bl	CloneBattlerSpriteWithBlend
	mov	r6, #0x0
	mov	r1, #0x0
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L99	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L98
.L104:
	.align	2, 0
.L103:
	.word	gTasks
.L99:
	strh	r1, [r5, #0xa]
	mov	r0, #0xf
	strh	r0, [r5, #0xc]
	mov	r0, #0x2
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r5, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r5, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r4, .L105
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x50
	strh	r1, [r0, #0x2e]
	ldr	r0, .L105+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L100	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L105+0x8
	strh	r1, [r0, #0x30]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x70
	b	.L102
.L106:
	.align	2, 0
.L105:
	.word	gSprites
	.word	gBattleAnimTarget
	.word	0xff70
.L100:
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x90
	strh	r1, [r0, #0x30]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L107
.L102:
	strh	r1, [r0, #0x32]
	ldr	r4, .L107+0x4
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r2, #0x0
	strh	r2, [r0, #0x34]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x36]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L107+0x8
	bl	StoreSpriteCallbackInData6
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L107+0xc
	str	r1, [r0]
	ldr	r0, .L107+0x10
	str	r0, [r5]
.L98:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	0xff90
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	TranslateSpriteLinearFixedPoint
	.word	AnimTask_NightmareClone_Step
.Lfe14:
	.size	 AnimTask_NightmareClone,.Lfe14-AnimTask_NightmareClone
	.align	2, 0
	.type	 AnimTask_NightmareClone_Step,function
	.thumb_func
AnimTask_NightmareClone_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L124
	add	r4, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L118	@cond_branch
	cmp	r0, #0x1
	bgt	.L123	@cond_branch
	cmp	r0, #0
	beq	.L111	@cond_branch
	b	.L110
.L125:
	.align	2, 0
.L124:
	.word	gTasks
.L123:
	cmp	r0, #0x2
	beq	.L120	@cond_branch
	b	.L110
.L111:
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x3
	and	r0, r0, r1
	strh	r0, [r4, #0x12]
	cmp	r0, #0x1
	bne	.L112	@cond_branch
	ldrh	r1, [r4, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L112	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xc]
.L112:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3
	bne	.L114	@cond_branch
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L114	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
.L114:
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r1, [r4, #0xc]
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	cmp	r1, r0
	bne	.L110	@cond_branch
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x50
	ble	.L110	@cond_branch
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L126
	add	r0, r0, r1
	bl	DestroySpriteWithActiveSheet
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	b	.L110
.L127:
	.align	2, 0
.L126:
	.word	gSprites
.L118:
	ldrh	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L110	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	b	.L110
.L120:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L110:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 AnimTask_NightmareClone_Step,.Lfe15-AnimTask_NightmareClone_Step
	.align	2, 0
	.globl	AnimTask_SpiteTargetShadow
	.type	 AnimTask_SpiteTargetShadow,function
	.thumb_func
AnimTask_SpiteTargetShadow:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r2, .L129
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x26]
	ldr	r2, .L129+0x4
	str	r2, [r1]
	bl	_call_via_r2
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	gTasks
	.word	AnimTask_SpiteTargetShadow_Step1
.Lfe16:
	.size	 AnimTask_SpiteTargetShadow,.Lfe16-AnimTask_SpiteTargetShadow
	.align	2, 0
	.type	 AnimTask_SpiteTargetShadow_Step1,function
	.thumb_func
AnimTask_SpiteTargetShadow_Step1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L156
	add	r5, r0, r1
	ldr	r0, .L156+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x26
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x4
	bls	.LCB1380
	b	.L152	@long jump
.LCB1380:
	lsl	r0, r0, #0x2
	ldr	r1, .L156+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L157:
	.align	2, 0
.L156:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	.L153
	.align	2, 0
	.align	2, 0
.L153:
	.word	.L133
	.word	.L141
	.word	.L142
	.word	.L146
	.word	.L149
.L133:
	ldr	r7, .L158
	add	r0, r7, #0
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	mov	r8, r2
	strh	r0, [r5, #0x24]
	cmp	r0, #0xff
	beq	.L154	@cond_branch
	cmp	r0, #0xf
	beq	.L154	@cond_branch
	mov	r0, #0x1
	bl	CloneBattlerSpriteWithBlend
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L137	@cond_branch
	add	r0, r7, #0
	bl	FreeSpritePaletteByTag
.L154:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L132
.L159:
	.align	2, 0
.L158:
	.word	0x2771
.L137:
	ldr	r4, .L160
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r2, [r5, #0x24]
	lsl	r2, r2, #0x4
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r2, #0x8
	ldrsh	r0, [r5, r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r0, .L160+0x4
	ldr	r1, [r0]
	ldr	r0, .L160+0x8
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1f
	add	r2, r2, #0x3e
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r2, r8
	strh	r2, [r5, #0xa]
	strh	r2, [r5, #0xc]
	mov	r0, #0x10
	strh	r0, [r5, #0xe]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r0, #0x22
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x10]
	cmp	r6, #0x1
	bne	.L139	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	b	.L140
.L161:
	.align	2, 0
.L160:
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimTarget
.L139:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
.L140:
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L152
.L141:
	mov	r1, #0x24
	ldrsh	r0, [r5, r1]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x24]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x1
	ldr	r1, .L162
	add	r0, r0, r1
	mov	r2, #0x24
	ldrsh	r1, [r5, r2]
	lsl	r1, r1, #0x1
	ldr	r2, .L162+0x4
	add	r1, r1, r2
	ldr	r2, .L162+0x8
	bl	CpuSet
	ldrh	r0, [r5, #0x10]
	ldr	r3, .L162+0xc
	mov	r1, #0x10
	mov	r2, #0xa
	bl	BlendPalette
	b	.L152
.L163:
	.align	2, 0
.L162:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
	.word	0x3c0d
.L142:
	ldr	r2, .L164
	mov	r0, #0x22
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	sub	r1, r1, #0x20
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	cmp	r1, #0
	bge	.L143	@cond_branch
	mov	r2, #0x0
.L143:
	cmp	r6, #0x1
	bne	.L144	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x4
	str	r2, [sp, #0x4]
	str	r6, [sp, #0x8]
	b	.L155
.L165:
	.align	2, 0
.L164:
	.word	gSprites
.L144:
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x8
	str	r2, [sp, #0x4]
	mov	r2, #0x1
	str	r2, [sp, #0x8]
.L155:
	mov	r2, #0x2
	mov	r3, #0x6
	bl	ScanlineEffect_InitWave
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x1c]
	b	.L152
.L146:
	cmp	r6, #0x1
	bne	.L147	@cond_branch
	ldr	r1, .L166
	mov	r0, #0x50
	bl	SetGpuReg
	b	.L148
.L167:
	.align	2, 0
.L166:
	.word	0x3f42
.L147:
	ldr	r1, .L168
	mov	r0, #0x50
	bl	SetGpuReg
.L148:
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L152
.L169:
	.align	2, 0
.L168:
	.word	0x3f44
.L149:
	cmp	r6, #0x1
	bne	.L150	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L151
.L150:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L151:
	ldr	r0, .L170
	str	r0, [r5]
.L152:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
.L132:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L171:
	.align	2, 0
.L170:
	.word	AnimTask_SpiteTargetShadow_Step2
.Lfe17:
	.size	 AnimTask_SpiteTargetShadow_Step1,.Lfe17-AnimTask_SpiteTargetShadow_Step1
	.align	2, 0
	.type	 AnimTask_SpiteTargetShadow_Step2,function
	.thumb_func
AnimTask_SpiteTargetShadow_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L176
	add	r4, r0, r1
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x1
	and	r0, r0, r1
	strh	r0, [r4, #0x12]
	cmp	r0, #0
	bne	.L173	@cond_branch
	ldr	r1, .L176+0x4
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x12
	bl	__divsi3
	strh	r0, [r4, #0xc]
.L173:
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bne	.L174	@cond_branch
	ldr	r1, .L176+0x4
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x12
	bl	__divsi3
	mov	r1, #0x10
	sub	r1, r1, r0
	strh	r1, [r4, #0xe]
.L174:
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x80
	bne	.L175	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	ldr	r1, .L176+0x8
	str	r1, [r4]
	add	r0, r5, #0
	bl	_call_via_r1
.L175:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	gTasks
	.word	gSineTable
	.word	AnimTask_SpiteTargetShadow_Step3
.Lfe18:
	.size	 AnimTask_SpiteTargetShadow_Step2,.Lfe18-AnimTask_SpiteTargetShadow_Step2
	.align	2, 0
	.type	 AnimTask_SpiteTargetShadow_Step3,function
	.thumb_func
AnimTask_SpiteTargetShadow_Step3:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L191
	add	r4, r0, r1
	ldr	r0, .L191+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L183	@cond_branch
	cmp	r0, #0x1
	bgt	.L189	@cond_branch
	cmp	r0, #0
	beq	.L180	@cond_branch
	b	.L179
.L192:
	.align	2, 0
.L191:
	.word	gTasks
	.word	gBattleAnimTarget
.L189:
	cmp	r0, #0x2
	beq	.L184	@cond_branch
	b	.L179
.L180:
	ldr	r1, .L193
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	cmp	r6, #0x1
	bne	.L181	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	b	.L190
.L194:
	.align	2, 0
.L193:
	.word	gScanlineEffect
.L181:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
.L190:
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L179
.L183:
	ldrh	r0, [r4, #0x10]
	ldr	r3, .L195
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalette
	b	.L179
.L196:
	.align	2, 0
.L195:
	.word	0x3c0d
.L184:
	ldr	r3, .L197
	mov	r0, #0x24
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	bl	DestroySpriteWithActiveSheet
	ldr	r0, .L197+0x4
	bl	FreeSpritePaletteByTag
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	cmp	r6, #0x1
	bne	.L185	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L186
.L198:
	.align	2, 0
.L197:
	.word	gSprites
	.word	0x2771
.L185:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L186:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L179:
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimTask_SpiteTargetShadow_Step3,.Lfe19-AnimTask_SpiteTargetShadow_Step3
	.align	2, 0
	.type	 AnimDestinyBondWhiteShadow,function
	.thumb_func
AnimDestinyBondWhiteShadow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r7, r0, #0
	ldr	r0, .L203
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L200	@cond_branch
	ldr	r4, .L203+0x4
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r2, #0xe0
	lsl	r2, r2, #0xd
	add	r0, r0, r2
	lsr	r5, r0, #0x10
	ldr	r4, .L203+0x8
	b	.L202
.L204:
	.align	2, 0
.L203:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L200:
	ldr	r4, .L205
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r2, #0xe0
	lsl	r2, r2, #0xd
	add	r0, r0, r2
	lsr	r5, r0, #0x10
	ldr	r4, .L205+0x4
.L202:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0xe0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r8, r5
	mov	r2, r9
	sub	r4, r2, r5
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r6, #0x4
	strh	r0, [r7, #0x2e]
	lsl	r0, r5, #0x4
	strh	r0, [r7, #0x30]
	mov	r1, sl
	sub	r0, r1, r6
	lsl	r0, r0, #0x4
	ldr	r5, .L205+0x8
	mov	r2, #0x2
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r7, #0x32]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0xc
	mov	r0, #0x2
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	__divsi3
	strh	r0, [r7, #0x34]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r7, #0x36]
	mov	r1, sl
	strh	r1, [r7, #0x38]
	mov	r2, r9
	strh	r2, [r7, #0x3a]
	mov	r1, #0x36
	ldrsh	r0, [r7, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r7, #0x3c]
	ldrb	r1, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
	strh	r6, [r7, #0x20]
	mov	r2, r8
	strh	r2, [r7, #0x22]
	ldr	r0, .L205+0xc
	str	r0, [r7, #0x1c]
	add	r2, r7, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L206:
	.align	2, 0
.L205:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimDestinyBondWhiteShadow_Step
.Lfe20:
	.size	 AnimDestinyBondWhiteShadow,.Lfe20-AnimDestinyBondWhiteShadow
	.align	2, 0
	.type	 AnimDestinyBondWhiteShadow_Step,function
	.thumb_func
AnimDestinyBondWhiteShadow_Step:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r3, [r2, #0x36]
	mov	r1, #0x36
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L208	@cond_branch
	ldrh	r0, [r2, #0x32]
	ldrh	r4, [r2, #0x2e]
	add	r0, r0, r4
	strh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x34]
	ldrh	r4, [r2, #0x30]
	add	r1, r1, r4
	strh	r1, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r2, #0x22]
	sub	r0, r3, #0x1
	strh	r0, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L208	@cond_branch
	strh	r0, [r2, #0x2e]
.L208:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 AnimDestinyBondWhiteShadow_Step,.Lfe21-AnimDestinyBondWhiteShadow_Step
	.align	2, 0
	.globl	AnimTask_DestinyBondWhiteShadow
	.type	 AnimTask_DestinyBondWhiteShadow,function
	.thumb_func
AnimTask_DestinyBondWhiteShadow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L221
	add	r1, r1, r0
	str	r1, [sp]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x0
	ldr	r1, [sp]
	strh	r0, [r1, #0x12]
	strh	r0, [r1, #0x14]
	strh	r0, [r1, #0x16]
	strh	r0, [r1, #0x18]
	mov	r0, #0x10
	strh	r0, [r1, #0x1a]
	ldr	r2, .L221+0x4
	ldrh	r0, [r2]
	strh	r0, [r1, #0x1c]
	ldr	r4, .L221+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2261
	b	.L211	@long jump
.LCB2261:
	mov	r4, #0x0
.L215:
	lsl	r1, r4, #0x10
	asr	r3, r1, #0x10
	ldr	r0, .L221+0x8
	ldrb	r2, [r0]
	str	r1, [sp, #0x10]
	cmp	r3, r2
	beq	.L214	@cond_branch
	mov	r0, #0x2
	eor	r2, r2, r0
	cmp	r3, r2
	beq	.L214	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L214	@cond_branch
	ldr	r6, [sp, #0x4]
	ldr	r3, [sp, #0x8]
	lsl	r0, r3, #0x10
	asr	r7, r0, #0x10
	ldr	r0, .L221+0xc
	add	r1, r6, #0
	add	r2, r7, #0
	mov	r3, #0x37
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x40
	beq	.L214	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r0, r8
	lsl	r5, r0, #0x4
	add	r5, r5, r8
	lsl	r5, r5, #0x2
	ldr	r1, .L221+0x10
	add	r4, r5, r1
	lsl	r0, r6, #0x4
	strh	r0, [r4, #0x2e]
	lsl	r0, r7, #0x4
	strh	r0, [r4, #0x30]
	mov	r2, sl
	sub	r0, r2, r6
	lsl	r0, r0, #0x4
	ldr	r3, .L221+0x4
	mov	r2, #0x2
	ldrsh	r1, [r3, r2]
	bl	__divsi3
	strh	r0, [r4, #0x32]
	mov	r3, r9
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r7
	lsl	r0, r0, #0x4
	ldr	r2, .L221+0x4
	mov	r3, #0x2
	ldrsh	r1, [r2, r3]
	bl	__divsi3
	strh	r0, [r4, #0x34]
	ldr	r1, .L221+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x36]
	mov	r2, sl
	strh	r2, [r4, #0x38]
	mov	r3, r9
	strh	r3, [r4, #0x3a]
	ldr	r0, .L221+0x14
	add	r5, r5, r0
	ldr	r0, .L221+0x18
	str	r0, [r5]
	ldr	r2, [sp]
	mov	r3, #0x20
	ldrsh	r1, [r2, r3]
	add	r1, r1, #0xd
	lsl	r1, r1, #0x1
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r0, r1
	mov	r1, r8
	strh	r1, [r0]
	ldrh	r0, [r2, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x20]
.L214:
	ldr	r2, [sp, #0x10]
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r2, r3
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L215	@cond_branch
	b	.L219
.L222:
	.align	2, 0
.L221:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gDestinyBondWhiteShadowSpriteTemplate
	.word	gSprites
	.word	gSprites+0x1c
	.word	AnimDestinyBondWhiteShadow_Step
.L211:
	ldr	r0, .L223
	ldr	r7, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	str	r1, [sp, #0xc]
	add	r1, r7, #0
	ldr	r2, [sp, #0xc]
	mov	r3, #0x37
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x40
	beq	.L219	@cond_branch
	mov	r3, #0x30
	mov	sl, r3
	mov	r0, #0x28
	mov	r9, r0
	ldr	r6, .L223+0x4
	mov	r1, r8
	lsl	r5, r1, #0x4
	add	r5, r5, r8
	lsl	r5, r5, #0x2
	add	r4, r5, r6
	lsl	r0, r7, #0x4
	strh	r0, [r4, #0x2e]
	ldr	r2, [sp, #0xc]
	lsl	r0, r2, #0x4
	strh	r0, [r4, #0x30]
	sub	r0, r3, r7
	lsl	r0, r0, #0x4
	ldr	r3, .L223+0x8
	mov	r2, #0x2
	ldrsh	r1, [r3, r2]
	bl	__divsi3
	strh	r0, [r4, #0x32]
	mov	r3, r9
	ldr	r1, [sp, #0xc]
	sub	r0, r3, r1
	lsl	r0, r0, #0x4
	ldr	r2, .L223+0x8
	mov	r3, #0x2
	ldrsh	r1, [r2, r3]
	bl	__divsi3
	strh	r0, [r4, #0x34]
	ldr	r1, .L223+0x8
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x36]
	mov	r2, sl
	strh	r2, [r4, #0x38]
	mov	r3, r9
	strh	r3, [r4, #0x3a]
	add	r6, r6, #0x1c
	add	r5, r5, r6
	ldr	r0, .L223+0xc
	str	r0, [r5]
	mov	r1, r8
	ldr	r0, [sp]
	strh	r1, [r0, #0x22]
	mov	r0, #0x1
	ldr	r2, [sp]
	strh	r0, [r2, #0x20]
.L219:
	ldr	r0, .L223+0x10
	ldr	r3, [sp]
	str	r0, [r3]
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L224:
	.align	2, 0
.L223:
	.word	gDestinyBondWhiteShadowSpriteTemplate
	.word	gSprites
	.word	gBattleAnimArgs
	.word	AnimDestinyBondWhiteShadow_Step
	.word	AnimTask_DestinyBondWhiteShadow_Step
.Lfe22:
	.size	 AnimTask_DestinyBondWhiteShadow,.Lfe22-AnimTask_DestinyBondWhiteShadow
	.align	2, 0
	.type	 AnimTask_DestinyBondWhiteShadow_Step,function
	.thumb_func
AnimTask_DestinyBondWhiteShadow_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L258
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L238	@cond_branch
	cmp	r1, #0x1
	bgt	.L255	@cond_branch
	cmp	r1, #0
	beq	.L227	@cond_branch
	b	.L226
.L259:
	.align	2, 0
.L258:
	.word	gTasks
.L255:
	cmp	r1, #0x2
	bne	.LCB2540
	b	.L250	@long jump
.LCB2540:
	cmp	r1, #0x3
	bne	.LCB2542
	b	.L252	@long jump
.LCB2542:
	b	.L226
.L227:
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L228	@cond_branch
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L228	@cond_branch
	strh	r1, [r4, #0x12]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L230	@cond_branch
	ldrh	r1, [r4, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L232	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x18]
	b	.L232
.L230:
	ldrh	r1, [r4, #0x1a]
	mov	r2, #0x1a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L232	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
.L232:
	ldrh	r1, [r4, #0x1a]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x18]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x17
	ble	.L228	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x16]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
.L228:
	ldrh	r1, [r4, #0x1c]
	mov	r2, #0x1c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L235	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1c]
	b	.L226
.L235:
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L226	@cond_branch
	b	.L256
.L238:
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L226	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x12]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L240	@cond_branch
	ldrh	r1, [r4, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L242	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x18]
	b	.L242
.L240:
	ldrh	r1, [r4, #0x1a]
	mov	r2, #0x1a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L242	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
.L242:
	ldrh	r1, [r4, #0x1a]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x18]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r1, [r4, #0x18]
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	cmp	r1, r0
	bne	.L226	@cond_branch
	mov	r5, #0x0
	b	.L257
.L248:
	add	r1, r5, #0
	add	r1, r1, #0xd
	lsl	r1, r1, #0x1
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L260
	add	r0, r0, r1
	bl	DestroySprite
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L257:
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	cmp	r5, r0
	blt	.L248	@cond_branch
	b	.L256
.L261:
	.align	2, 0
.L260:
	.word	gSprites
.L250:
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L226	@cond_branch
.L256:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L226
.L252:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L226:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 AnimTask_DestinyBondWhiteShadow_Step,.Lfe23-AnimTask_DestinyBondWhiteShadow_Step
	.align	2, 0
	.globl	AnimTask_CurseStretchingBlackBg
	.type	 AnimTask_CurseStretchingBlackBg,function
	.thumb_func
AnimTask_CurseStretchingBlackBg:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L266
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L266+0x4
	strh	r1, [r0]
	ldr	r1, .L266+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L266+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0xc8
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, .L266+0x10
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L264	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L263	@cond_branch
.L264:
	mov	r6, #0x28
	b	.L265
.L267:
	.align	2, 0
.L266:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f1f
	.word	gBattleAnimAttacker
.L263:
	mov	r6, #0xc8
.L265:
	ldr	r1, .L268
	lsl	r3, r6, #0x10
	asr	r2, r3, #0x10
	lsl	r0, r2, #0x8
	orr	r0, r0, r2
	strh	r0, [r1]
	ldr	r1, .L268+0x4
	mov	r5, #0x28
	ldr	r0, .L268+0x8
	strh	r0, [r1]
	lsr	r3, r3, #0x10
	mov	r1, #0xf0
	sub	r1, r1, r2
	mov	r4, #0x48
	ldr	r2, .L268+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	strh	r3, [r0, #0xa]
	strh	r1, [r0, #0xc]
	strh	r5, [r0, #0xe]
	strh	r4, [r0, #0x10]
	strh	r6, [r0, #0x12]
	strh	r5, [r0, #0x14]
	ldr	r1, .L268+0x10
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L269:
	.align	2, 0
.L268:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x2828
	.word	gTasks
	.word	AnimTask_CurseStretchingBlackBg_Step1
.Lfe24:
	.size	 AnimTask_CurseStretchingBlackBg,.Lfe24-AnimTask_CurseStretchingBlackBg
	.align	2, 0
	.type	 AnimTask_CurseStretchingBlackBg_Step1,function
	.thumb_func
AnimTask_CurseStretchingBlackBg_Step1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L273
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r1, [r4, #0x8]
	add	r0, r1, #0x1
	strh	r0, [r4, #0x8]
	ldrh	r5, [r4, #0xa]
	ldrh	r7, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	mov	sl, r0
	ldrh	r2, [r4, #0x10]
	str	r2, [sp, #0xc]
	ldrh	r0, [r4, #0x12]
	ldrh	r2, [r4, #0x14]
	mov	r8, r2
	lsl	r1, r1, #0x10
	asr	r6, r1, #0x10
	cmp	r6, #0xf
	ble	.LCB2884
	b	.L271	@long jump
.LCB2884:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	str	r0, [sp, #0x10]
	str	r1, [sp, #0x14]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L273+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L273+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r5, r1, #0
	add	r4, r0, #0
	add	r0, r6, #0
	bl	__floatsidf
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r1, r5, #0
	add	r0, r4, #0
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	bl	__subdf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L273+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L273+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	bl	__adddf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	add	r5, r1, #0
	add	r4, r0, #0
	mov	r2, sl
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L273+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L273+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	add	r1, r5, #0
	add	r0, r4, #0
	bl	__subdf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r1, [sp, #0xc]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L273+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L273+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	add	r1, r5, #0
	add	r0, r4, #0
	bl	__adddf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	b	.L272
.L274:
	.align	2, 0
.L273:
	.word	gTasks
	.long 0x3fb00000, 0x0	@ double 6.25000000000000000000e-2
.L271:
	mov	r2, #0x0
	mov	r9, r2
	mov	r7, #0xf0
	mov	r6, #0x0
	mov	r5, #0x70
	str	r6, [sp]
	str	r6, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r6, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L275
	str	r0, [r4]
.L272:
	ldr	r1, .L275+0x4
	mov	r2, r9
	lsl	r0, r2, #0x8
	orr	r7, r7, r0
	strh	r7, [r1]
	ldr	r1, .L275+0x8
	lsl	r0, r6, #0x8
	orr	r5, r5, r0
	strh	r5, [r1]
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	AnimTask_CurseStretchingBlackBg_Step2
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
.Lfe25:
	.size	 AnimTask_CurseStretchingBlackBg_Step1,.Lfe25-AnimTask_CurseStretchingBlackBg_Step1
	.align	2, 0
	.type	 AnimTask_CurseStretchingBlackBg_Step2,function
	.thumb_func
AnimTask_CurseStretchingBlackBg_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L279
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L278	@cond_branch
	ldr	r0, .L279+0x4
	strh	r1, [r0]
	ldr	r0, .L279+0x8
	strh	r1, [r0]
	ldr	r4, .L279+0xc
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L278:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	gPaletteFade
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe26:
	.size	 AnimTask_CurseStretchingBlackBg_Step2,.Lfe26-AnimTask_CurseStretchingBlackBg_Step2
	.align	2, 0
	.type	 AnimCurseNail,function
	.thumb_func
AnimCurseNail:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L284
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L282	@cond_branch
	mov	r2, #0x18
	ldr	r3, .L284+0x4
	ldrb	r0, [r4, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r4, #0x3]
	b	.L283
.L285:
	.align	2, 0
.L284:
	.word	gBattleAnimAttacker
	.word	0xfffe
.L282:
	ldr	r2, .L286
	mov	r3, #0x2
.L283:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	strh	r3, [r4, #0x30]
	mov	r0, #0x3c
	strh	r0, [r4, #0x2e]
	ldr	r0, .L286+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	0xffe8
	.word	AnimCurseNail_Step1
.Lfe27:
	.size	 AnimCurseNail,.Lfe27-AnimCurseNail
	.align	2, 0
	.type	 AnimCurseNail_Step1,function
	.thumb_func
AnimCurseNail_Step1:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L289	@cond_branch
	sub	r0, r1, #0x1
	b	.L294
.L289:
	ldrh	r0, [r3, #0x30]
	ldrh	r4, [r3, #0x24]
	add	r1, r0, r4
	strh	r1, [r3, #0x24]
	add	r0, r1, #0x7
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xe
	bls	.L290	@cond_branch
	ldrh	r0, [r3, #0x20]
	add	r0, r0, r1
	strh	r0, [r3, #0x20]
	mov	r0, #0x0
	strh	r0, [r3, #0x24]
	ldrh	r2, [r3, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x8
	ldr	r4, .L295
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L295+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L292	@cond_branch
	mov	r0, #0x1e
	strh	r0, [r3, #0x2e]
	ldr	r0, .L295+0x8
	str	r0, [r3, #0x1c]
	ldr	r1, .L295+0xc
	add	r0, r3, #0
	bl	StoreSpriteCallbackInData6
	b	.L290
.L296:
	.align	2, 0
.L295:
	.word	0x3ff
	.word	-0x400
	.word	WaitAnimForDuration
	.word	AnimCurseNail_Step2
.L292:
	mov	r0, #0x28
.L294:
	strh	r0, [r3, #0x2e]
.L290:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 AnimCurseNail_Step1,.Lfe28-AnimCurseNail_Step1
	.align	2, 0
	.type	 AnimCurseNail_Step2,function
	.thumb_func
AnimCurseNail_Step2:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r5, [r4, r0]
	cmp	r5, #0
	bne	.L298	@cond_branch
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x32]
	b	.L299
.L298:
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bgt	.L300	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L299
.L300:
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L299	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L303
	str	r0, [r4, #0x1c]
.L299:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	AnimCurseNail_End
.Lfe29:
	.size	 AnimCurseNail_Step2,.Lfe29-AnimCurseNail_Step2
	.align	2, 0
	.type	 AnimCurseNail_End,function
	.thumb_func
AnimCurseNail_End:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L306
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L306+0x4
	strh	r1, [r0]
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L307:
	.align	2, 0
.L306:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
.Lfe30:
	.size	 AnimCurseNail_End,.Lfe30-AnimCurseNail_End
	.align	2, 0
	.type	 AnimGhostStatusSprite,function
	.thumb_func
AnimGhostStatusSprite:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	mov	r1, #0xc
	bl	Sin
	strh	r0, [r5, #0x24]
	ldr	r0, .L316
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L309	@cond_branch
	ldrh	r0, [r5, #0x24]
	neg	r0, r0
	strh	r0, [r5, #0x24]
.L309:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x6
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x2e]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r5, #0x30]
	add	r0, r0, r1
	strh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L310	@cond_branch
	ldr	r0, .L316+0x4
	strh	r0, [r5, #0x3a]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r5, #0x3a]
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L311
.L317:
	.align	2, 0
.L316:
	.word	gBattleAnimAttacker
	.word	0x50b
.L310:
	cmp	r0, #0x1e
	ble	.L311	@cond_branch
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x3a]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x10
	mov	r6, #0xff
	and	r6, r6, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r7, r0, #0x10
	cmp	r7, #0x10
	bls	.L313	@cond_branch
	mov	r7, #0x10
.L313:
	sub	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r0, #0
	bge	.L314	@cond_branch
	mov	r6, #0x0
.L314:
	lsl	r4, r7, #0x8
	orr	r4, r4, r6
	lsl	r1, r4, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r4, [r5, #0x3a]
	cmp	r7, #0x10
	bne	.L311	@cond_branch
	cmp	r6, #0
	bne	.L311	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L318
	str	r0, [r5, #0x1c]
.L311:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L319:
	.align	2, 0
.L318:
	.word	AnimGhostStatusSprite_End
.Lfe31:
	.size	 AnimGhostStatusSprite,.Lfe31-AnimGhostStatusSprite
	.align	2, 0
	.type	 AnimGhostStatusSprite_End,function
	.thumb_func
AnimGhostStatusSprite_End:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 AnimGhostStatusSprite_End,.Lfe32-AnimGhostStatusSprite_End
	.align	2, 0
	.globl	AnimTask_GrudgeFlames
	.type	 AnimTask_GrudgeFlames,function
	.thumb_func
AnimTask_GrudgeFlames:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L322
	add	r4, r4, r0
	mov	r6, #0x0
	strh	r6, [r4, #0x8]
	mov	r0, #0x10
	mov	r8, r0
	mov	r0, r8
	strh	r0, [r4, #0xa]
	ldr	r5, .L322+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1a]
	ldrb	r0, [r5]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1c]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	lsr	r0, r0, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	add	r1, r1, #0x8
	strh	r1, [r4, #0x1e]
	strh	r6, [r4, #0x16]
	ldrb	r0, [r5]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x12]
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x14]
	strh	r6, [r4, #0xe]
	mov	r0, r8
	strh	r0, [r4, #0x10]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r6, [r4, #0x18]
	ldr	r0, .L322+0x8
	str	r0, [r4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	AnimTask_GrudgeFlames_Step
.Lfe33:
	.size	 AnimTask_GrudgeFlames,.Lfe33-AnimTask_GrudgeFlames
	.align	2, 0
	.type	 AnimTask_GrudgeFlames_Step,function
	.thumb_func
AnimTask_GrudgeFlames_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L355
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bls	.LCB3647
	b	.L325	@long jump
.LCB3647:
	lsl	r0, r0, #0x2
	ldr	r1, .L355+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L356:
	.align	2, 0
.L355:
	.word	gTasks
	.word	.L351
	.align	2, 0
	.align	2, 0
.L351:
	.word	.L326
	.word	.L334
	.word	.L340
	.word	.L342
	.word	.L348
	.word	.L350
.L326:
	mov	r6, #0x0
.L330:
	mov	r2, #0x1a
	ldrsh	r1, [r4, r2]
	mov	r0, #0x1c
	ldrsh	r2, [r4, r0]
	ldrb	r3, [r4, #0x14]
	ldr	r0, .L357
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L329	@cond_branch
	ldr	r1, .L357+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	strh	r7, [r5, #0x2e]
	ldr	r0, .L357+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L332	@cond_branch
	mov	r1, #0x1
.L332:
	strh	r1, [r5, #0x30]
	mov	r0, #0x2a
	mul	r0, r0, r6
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r4, #0x1e]
	strh	r0, [r5, #0x34]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
.L329:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x5
	bls	.L330	@cond_branch
	b	.L353
.L358:
	.align	2, 0
.L357:
	.word	gGrudgeFlameSpriteTemplate
	.word	gSprites
	.word	gBattleAnimAttacker
.L334:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L335	@cond_branch
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xd
	bgt	.L337	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L337
.L335:
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x4
	ble	.L337	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x10]
.L337:
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	ldrh	r2, [r4, #0xe]
	ldrh	r1, [r4, #0x10]
	cmp	r0, #0xe
	bne	.L347	@cond_branch
	cmp	r1, #0x4
	bne	.L347	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L354
.L340:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L325	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L353
.L342:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L343	@cond_branch
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L345	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L345
.L343:
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L345	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x10]
.L345:
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	ldrh	r2, [r4, #0xe]
	ldrh	r1, [r4, #0x10]
	cmp	r0, #0
	bne	.L347	@cond_branch
	cmp	r1, #0x10
	bne	.L347	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x18]
.L354:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L347:
	lsl	r1, r1, #0x8
	orr	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L325
.L348:
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L325	@cond_branch
.L353:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L325
.L350:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L325:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 AnimTask_GrudgeFlames_Step,.Lfe34-AnimTask_GrudgeFlames_Step
	.align	2, 0
	.type	 AnimGrudgeFlame,function
	.thumb_func
AnimGrudgeFlame:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L360	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x2
	b	.L365
.L360:
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x2
.L365:
	strh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x32]
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x41
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7e
	bhi	.L362	@cond_branch
	ldr	r2, .L367
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x12]
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	b	.L366
.L368:
	.align	2, 0
.L367:
	.word	gTasks
.L362:
	ldr	r2, .L369
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x3
	ldrb	r1, [r0, #0x12]
	and	r1, r1, r2
.L366:
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	mov	r1, #0x7
	bl	Sin
	strh	r0, [r4, #0x26]
	ldr	r2, .L369
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	mov	r2, #0x18
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L364	@cond_branch
	ldrh	r0, [r1, #0x16]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x16]
	add	r0, r4, #0
	bl	DestroySprite
.L364:
	pop	{r4}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	gTasks
.Lfe35:
	.size	 AnimGrudgeFlame,.Lfe35-AnimGrudgeFlame
	.align	2, 0
	.globl	AnimTask_GhostGetOut
	.type	 AnimTask_GhostGetOut,function
	.thumb_func
AnimTask_GhostGetOut:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r2, .L372
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x26]
	ldr	r2, .L372+0x4
	str	r2, [r1]
	bl	_call_via_r2
	pop	{r0}
	bx	r0
.L373:
	.align	2, 0
.L372:
	.word	gTasks
	.word	AnimTask_GhostGetOut_Step1
.Lfe36:
	.size	 AnimTask_GhostGetOut,.Lfe36-AnimTask_GhostGetOut
	.align	2, 0
	.type	 AnimTask_GhostGetOut_Step1,function
	.thumb_func
AnimTask_GhostGetOut_Step1:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L399
	add	r6, r1, r0
	ldr	r0, .L399+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, #0x26
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x7
	bls	.LCB4074
	b	.L375	@long jump
.LCB4074:
	lsl	r0, r0, #0x2
	ldr	r1, .L399+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L400:
	.align	2, 0
.L399:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	.L395
	.align	2, 0
	.align	2, 0
.L395:
	.word	.L376
	.word	.L377
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L385
	.word	.L388
	.word	.L392
.L376:
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x2
	bl	SetAnimBgAttribute
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x0
	strh	r0, [r6, #0xa]
	strh	r0, [r6, #0xc]
	mov	r0, #0x10
	strh	r0, [r6, #0xe]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x10]
	ldr	r3, .L401
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x5]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	strh	r0, [r6, #0x12]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r0, r0, #0x4
	strh	r0, [r6, #0x14]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r2, [r0, #0x1]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r0, #0x10
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r0, #0x80
	strh	r0, [r6, #0x16]
	b	.L375
.L402:
	.align	2, 0
.L401:
	.word	gSprites
.L377:
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	mov	r5, #0x1
	and	r5, r5, r0
	cmp	r5, #0
	beq	.LCB4178
	b	.L374	@long jump
.LCB4178:
	ldrh	r0, [r6, #0x14]
	ldrb	r2, [r6, #0xc]
	ldr	r4, .L403
	mov	r1, #0x10
	add	r3, r4, #0
	bl	BlendPalette
	ldrh	r0, [r6, #0x16]
	ldrb	r2, [r6, #0xc]
	mov	r1, #0x10
	add	r3, r4, #0
	bl	BlendPalette
	ldrh	r1, [r6, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r6, r2]
	cmp	r0, #0xb
	bgt	.L379	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r6, #0xc]
	b	.L374
.L404:
	.align	2, 0
.L403:
	.word	0x66e0
.L379:
	strh	r5, [r6, #0xa]
	strh	r5, [r6, #0xc]
	ldr	r1, .L405
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L375
.L406:
	.align	2, 0
.L405:
	.word	0x3f44
.L380:
	mov	r0, #0x2
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	ldr	r0, .L407
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r4, .L407+0x4
	strh	r1, [r4]
	mov	r0, #0x18
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x1a
	bl	SetGpuReg
	add	r0, sp, #0xc
	mov	r1, #0x2
	bl	GetBattleAnimBgData
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L407+0x8
	add	r2, sp, #0xc
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L407+0xc
	add	r1, sp, #0xc
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L375
.L408:
	.align	2, 0
.L407:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattleAnim_ScaryFaceGfx
	.word	gBattleAnim_ScaryFacePal
.L381:
	add	r0, sp, #0xc
	mov	r1, #0x2
	bl	GetBattleAnimBgData
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	add	r1, r0, #0
	ldr	r5, .L409
	ldr	r0, [r5]
	mov	r4, #0xbe
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	str	r1, [r0]
	ldr	r0, .L409+0x4
	bl	LZDecompressWram
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x8]
	ldr	r1, [r5]
	add	r1, r1, r4
	ldr	r1, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r3, #0x0
	bl	RelocateBattleBgPal
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x9]
	ldr	r1, [r5]
	add	r1, r1, r4
	ldr	r1, [r1]
	mov	r2, #0x20
	str	r2, [sp]
	str	r2, [sp, #0x4]
	mov	r2, #0x11
	str	r2, [sp, #0x8]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0x0
	str	r1, [r0]
	b	.L375
.L410:
	.align	2, 0
.L409:
	.word	gMonSpritesGfxPtr
	.word	gBattleAnimBgTilemap_ScaryFacePlayer
.L382:
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4366
	b	.L374	@long jump
.LCB4366:
	ldrh	r1, [r6, #0xc]
	add	r1, r1, #0x1
	strh	r1, [r6, #0xc]
	ldrh	r0, [r6, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xe
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L374	@cond_branch
	strh	r0, [r6, #0xa]
	strh	r0, [r6, #0xc]
	mov	r0, #0x10
	strh	r0, [r6, #0xe]
	ldr	r1, .L411
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x2
	bl	SetAnimBgAttribute
	b	.L375
.L412:
	.align	2, 0
.L411:
	.word	0x3f42
.L385:
	cmp	r4, #0x1
	bne	.L386	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	b	.L397
.L386:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
.L397:
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L375
.L388:
	ldr	r2, .L413
	mov	r0, #0x10
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	sub	r1, r1, #0x20
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	cmp	r1, #0
	bge	.L389	@cond_branch
	mov	r2, #0x0
.L389:
	cmp	r4, #0x1
	bne	.L390	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x4
	str	r2, [sp, #0x4]
	str	r4, [sp, #0x8]
	b	.L398
.L414:
	.align	2, 0
.L413:
	.word	gSprites
.L390:
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x8
	str	r2, [sp, #0x4]
	mov	r2, #0x1
	str	r2, [sp, #0x8]
	mov	r2, #0x4
.L398:
	mov	r3, #0x8
	bl	ScanlineEffect_InitWave
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x1c]
	b	.L375
.L392:
	ldrh	r0, [r6, #0x16]
	ldr	r3, .L415
	mov	r1, #0x10
	mov	r2, #0xc
	bl	BlendPalette
	cmp	r4, #0x1
	bne	.L393	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L394
.L416:
	.align	2, 0
.L415:
	.word	0x77ff
.L393:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L394:
	ldr	r0, .L417
	str	r0, [r6]
	mov	r0, #0x0
	strh	r0, [r6, #0x26]
.L375:
	ldrh	r0, [r6, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x26]
.L374:
	add	sp, sp, #0x1c
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L418:
	.align	2, 0
.L417:
	.word	AnimTask_GhostGetOut_Step2
.Lfe37:
	.size	 AnimTask_GhostGetOut_Step1,.Lfe37-AnimTask_GhostGetOut_Step1
	.align	2, 0
	.type	 AnimTask_GhostGetOut_Step2,function
	.thumb_func
AnimTask_GhostGetOut_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L423
	add	r4, r0, r1
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x1
	and	r0, r0, r1
	strh	r0, [r4, #0x18]
	cmp	r0, #0
	bne	.L420	@cond_branch
	ldr	r1, .L423+0x4
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x12
	bl	__divsi3
	strh	r0, [r4, #0xc]
.L420:
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bne	.L421	@cond_branch
	ldr	r1, .L423+0x4
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x12
	bl	__divsi3
	mov	r1, #0x10
	sub	r1, r1, r0
	strh	r1, [r4, #0xe]
.L421:
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x80
	bne	.L422	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	ldr	r1, .L423+0x8
	str	r1, [r4]
	add	r0, r5, #0
	bl	_call_via_r1
.L422:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L424:
	.align	2, 0
.L423:
	.word	gTasks
	.word	gSineTable
	.word	AnimTask_GhostGetOut_Step3
.Lfe38:
	.size	 AnimTask_GhostGetOut_Step2,.Lfe38-AnimTask_GhostGetOut_Step2
	.align	2, 0
	.type	 AnimTask_GhostGetOut_Step3,function
	.thumb_func
AnimTask_GhostGetOut_Step3:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L437
	add	r6, r0, r1
	mov	r1, #0x26
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x5
	bls	.LCB4663
	b	.L426	@long jump
.LCB4663:
	lsl	r0, r0, #0x2
	ldr	r1, .L437+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L438:
	.align	2, 0
.L437:
	.word	gTasks
	.word	.L435
	.align	2, 0
	.align	2, 0
.L435:
	.word	.L427
	.word	.L428
	.word	.L429
	.word	.L431
	.word	.L432
	.word	.L434
.L427:
	ldr	r1, .L439
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	ldrh	r0, [r6, #0x16]
	ldr	r3, .L439+0x4
	mov	r1, #0x10
	mov	r2, #0xc
	bl	BlendPalette
	b	.L426
.L440:
	.align	2, 0
.L439:
	.word	gScanlineEffect
	.word	0x66e0
.L428:
	ldr	r1, .L441
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	mov	r1, #0x0
	mov	r0, #0x10
	strh	r0, [r6, #0xc]
	strh	r1, [r6, #0xe]
	b	.L426
.L442:
	.align	2, 0
.L441:
	.word	0x3f44
.L429:
	ldrh	r1, [r6, #0xc]
	sub	r1, r1, #0x1
	strh	r1, [r6, #0xc]
	ldrh	r0, [r6, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xe
	ldrsh	r0, [r6, r2]
	cmp	r0, #0xf
	ble	.L425	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x2
	bl	SetAnimBgAttribute
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x2
	bl	SetAnimBgAttribute
	b	.L426
.L431:
	mov	r0, #0x2
	bl	InitBattleAnimBg
	mov	r0, #0x0
	mov	r1, #0x90
	mov	r2, #0x20
	bl	FillPalette
	mov	r0, #0x2
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0xc
	strh	r0, [r6, #0xa]
	b	.L426
.L432:
	ldrh	r0, [r6, #0x14]
	ldrb	r2, [r6, #0xa]
	ldr	r4, .L443
	mov	r1, #0x10
	add	r3, r4, #0
	bl	BlendPalette
	ldrh	r0, [r6, #0x16]
	ldrb	r2, [r6, #0xa]
	mov	r1, #0x10
	add	r3, r4, #0
	bl	BlendPalette
	ldrh	r0, [r6, #0xa]
	mov	r2, #0xa
	ldrsh	r1, [r6, r2]
	cmp	r1, #0
	beq	.L433	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	b	.L425
.L444:
	.align	2, 0
.L443:
	.word	0x66e0
.L433:
	strh	r1, [r6, #0xa]
	ldr	r1, .L445
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L426
.L446:
	.align	2, 0
.L445:
	.word	0x3f44
.L434:
	ldr	r5, .L447
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r0, #0x3
	ldrb	r2, [r6, #0x12]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r4, [r1, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r4
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	and	r3, r3, r1
	strb	r3, [r0, #0x1]
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L426:
	ldrh	r0, [r6, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x26]
.L425:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L448:
	.align	2, 0
.L447:
	.word	gSprites
.Lfe39:
	.size	 AnimTask_GhostGetOut_Step3,.Lfe39-AnimTask_GhostGetOut_Step3
	.align	2, 0
	.type	 AnimMonMoveCircular,function
	.thumb_func
AnimMonMoveCircular:
	add	r3, r0, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r3]
	ldr	r2, .L450
	ldr	r1, .L450+0x4
	ldrb	r1, [r1]
	add	r1, r1, r2
	ldrb	r1, [r1]
	strh	r1, [r0, #0x38]
	mov	r1, #0x80
	strh	r1, [r0, #0x2e]
	mov	r1, #0xa
	strh	r1, [r0, #0x30]
	ldr	r2, .L450+0x8
	ldrh	r1, [r2]
	strh	r1, [r0, #0x32]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x34]
	ldr	r1, .L450+0xc
	str	r1, [r0, #0x1c]
	ldr	r2, .L450+0x10
	mov	r3, #0x38
	ldrsh	r1, [r0, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	bx	lr
.L451:
	.align	2, 0
.L450:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimMonMoveCircular_Step
	.word	gSprites
.Lfe40:
	.size	 AnimMonMoveCircular,.Lfe40-AnimMonMoveCircular
	.align	2, 0
	.type	 AnimMonMoveCircular_Step,function
	.thumb_func
AnimMonMoveCircular_Step:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x34]
	mov	r1, #0x34
	ldrsh	r3, [r5, r1]
	cmp	r3, #0
	beq	.L453	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Sin
	ldr	r4, .L456
	mov	r1, #0x38
	ldrsh	r2, [r5, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Cos
	mov	r1, #0x38
	ldrsh	r2, [r5, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x26]
	ldrh	r0, [r5, #0x32]
	ldrh	r2, [r5, #0x2e]
	add	r1, r0, r2
	strh	r1, [r5, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L455	@cond_branch
	ldr	r2, .L456+0x4
	add	r0, r1, r2
	strh	r0, [r5, #0x2e]
	b	.L455
.L457:
	.align	2, 0
.L456:
	.word	gSprites
	.word	-0x100
.L453:
	ldr	r2, .L458
	mov	r0, #0x38
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x24]
	mov	r0, #0x38
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
	mov	r0, #0x38
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	ldr	r0, .L458+0x4
	str	r0, [r5, #0x1c]
.L455:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L459:
	.align	2, 0
.L458:
	.word	gSprites
	.word	DestroySpriteAndMatrix
.Lfe41:
	.size	 AnimMonMoveCircular_Step,.Lfe41-AnimMonMoveCircular_Step
.text
	.align	2, 0 @ Don't pad with nop

