@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gHorizontalLungeSpriteTemplate
	.section .rodata
	.align	2, 0
	.type	 gHorizontalLungeSpriteTemplate,object
	.size	 gHorizontalLungeSpriteTemplate,24
gHorizontalLungeSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	DoHorizontalLunge
	.globl	gVerticalDipSpriteTemplate
	.align	2, 0
	.type	 gVerticalDipSpriteTemplate,object
	.size	 gVerticalDipSpriteTemplate,24
gVerticalDipSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	DoVerticalDip
	.globl	gSlideMonToOriginalPosSpriteTemplate
	.align	2, 0
	.type	 gSlideMonToOriginalPosSpriteTemplate,object
	.size	 gSlideMonToOriginalPosSpriteTemplate,24
gSlideMonToOriginalPosSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SlideMonToOriginalPos
	.globl	gSlideMonToOffsetSpriteTemplate
	.align	2, 0
	.type	 gSlideMonToOffsetSpriteTemplate,object
	.size	 gSlideMonToOffsetSpriteTemplate,24
gSlideMonToOffsetSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SlideMonToOffset
	.globl	gSlideMonToOffsetAndBackSpriteTemplate
	.align	2, 0
	.type	 gSlideMonToOffsetAndBackSpriteTemplate,object
	.size	 gSlideMonToOffsetAndBackSpriteTemplate,24
gSlideMonToOffsetAndBackSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SlideMonToOffsetAndBack
.text
	.align	2, 0
	.globl	AnimTask_ShakeMon
	.type	 AnimTask_ShakeMon,function
	.thumb_func
AnimTask_ShakeMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L4
	ldrb	r0, [r4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L3	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L2
.L5:
	.align	2, 0
.L4:
	.word	gBattleAnimArgs
.L3:
	ldr	r1, .L6
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r4, #0x2]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x26]
	ldr	r1, .L6+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0x8]
	ldrh	r1, [r4, #0x6]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r4, #0x8]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r4, #0x8]
	strh	r1, [r0, #0xe]
	ldrh	r1, [r4, #0x2]
	strh	r1, [r0, #0x10]
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x12]
	ldr	r1, .L6+0x8
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
.L2:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	gSprites
	.word	gTasks
	.word	AnimTask_ShakeMon_Step
.Lfe1:
	.size	 AnimTask_ShakeMon,.Lfe1-AnimTask_ShakeMon
	.align	2, 0
	.type	 AnimTask_ShakeMon_Step,function
	.thumb_func
AnimTask_ShakeMon_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L17
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r0, [r3, #0xe]
	mov	r2, #0xe
	ldrsh	r5, [r3, r2]
	add	r7, r1, #0
	cmp	r5, #0
	bne	.L9	@cond_branch
	ldr	r2, .L17+0x4
	mov	r6, #0x8
	ldrsh	r1, [r3, r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	mov	r6, #0x24
	ldrsh	r0, [r1, r6]
	add	r6, r2, #0
	cmp	r0, #0
	bne	.L10	@cond_branch
	ldrh	r0, [r3, #0x10]
	strh	r0, [r1, #0x24]
	b	.L11
.L18:
	.align	2, 0
.L17:
	.word	gTasks
	.word	gSprites
.L10:
	strh	r5, [r1, #0x24]
.L11:
	lsl	r2, r4, #0x2
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r3, r0, r7
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r6
	mov	r5, #0x26
	ldrsh	r0, [r1, r5]
	cmp	r0, #0
	bne	.L12	@cond_branch
	ldrh	r0, [r3, #0x12]
	b	.L16
.L12:
	mov	r0, #0x0
.L16:
	strh	r0, [r1, #0x26]
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r7
	ldrh	r0, [r2, #0xc]
	strh	r0, [r2, #0xe]
	ldrh	r0, [r2, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L15	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r3, [r0, #0x24]
	mov	r5, #0x8
	ldrsh	r1, [r2, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r3, [r0, #0x26]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L15
.L9:
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
.L15:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimTask_ShakeMon_Step,.Lfe2-AnimTask_ShakeMon_Step
	.align	2, 0
	.globl	AnimTask_ShakeMon2
	.type	 AnimTask_ShakeMon2,function
	.thumb_func
AnimTask_ShakeMon2:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L37
	ldrh	r0, [r2]
	mov	r3, #0x0
	ldrsh	r1, [r2, r3]
	cmp	r1, #0x3
	bgt	.L20	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	bne	.L22	@cond_branch
	b	.L34
.L38:
	.align	2, 0
.L37:
	.word	gBattleAnimArgs
.L20:
	cmp	r1, #0x8
	beq	.L23	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x5
	beq	.L26	@cond_branch
	cmp	r0, #0x5
	bgt	.L30	@cond_branch
	cmp	r0, #0x4
	beq	.L25	@cond_branch
	b	.L28
.L30:
	cmp	r0, #0x6
	beq	.L27	@cond_branch
	b	.L28
.L25:
	mov	r0, #0x0
	b	.L35
.L26:
	mov	r0, #0x2
	b	.L35
.L27:
	mov	r0, #0x1
	b	.L35
.L28:
	mov	r0, #0x3
.L35:
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L31	@cond_branch
	mov	r6, #0x1
.L31:
	ldr	r0, .L39
	add	r0, r4, r0
	b	.L36
.L40:
	.align	2, 0
.L39:
	.word	gBattlerSpriteIds
.L23:
	ldr	r1, .L41
	ldr	r0, .L41+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
.L36:
	ldrb	r3, [r0]
.L22:
	cmp	r6, #0
	beq	.L33	@cond_branch
.L34:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L19
.L42:
	.align	2, 0
.L41:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L33:
	ldr	r1, .L43
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r2, .L43+0x4
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0x26]
	ldr	r1, .L43+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r3, [r0, #0x8]
	ldrh	r1, [r2, #0x6]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r2, #0x8]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r2, #0x8]
	strh	r1, [r0, #0xe]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x10]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0x12]
	ldr	r1, .L43+0xc
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
.L19:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gSprites
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_ShakeMon2Step
.Lfe3:
	.size	 AnimTask_ShakeMon2,.Lfe3-AnimTask_ShakeMon2
	.align	2, 0
	.type	 AnimTask_ShakeMon2Step,function
	.thumb_func
AnimTask_ShakeMon2Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L53
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r2, [r3, #0xe]
	mov	r4, #0xe
	ldrsh	r0, [r3, r4]
	mov	ip, r1
	cmp	r0, #0
	bne	.L46	@cond_branch
	ldr	r2, .L53+0x4
	mov	r7, #0x8
	ldrsh	r1, [r3, r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r0, #0x24
	ldrsh	r1, [r4, r0]
	ldrh	r5, [r3, #0x10]
	mov	r7, #0x10
	ldrsh	r0, [r3, r7]
	add	r7, r2, #0
	cmp	r1, r0
	bne	.L47	@cond_branch
	neg	r0, r5
	strh	r0, [r4, #0x24]
	b	.L48
.L54:
	.align	2, 0
.L53:
	.word	gTasks
	.word	gSprites
.L47:
	strh	r5, [r4, #0x24]
.L48:
	lsl	r3, r6, #0x2
	add	r1, r3, r6
	lsl	r1, r1, #0x3
	add	r1, r1, ip
	mov	r0, #0x8
	ldrsh	r2, [r1, r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r7
	mov	r0, #0x26
	ldrsh	r2, [r4, r0]
	mov	r8, r2
	ldrh	r5, [r1, #0x12]
	mov	r2, #0x12
	ldrsh	r0, [r1, r2]
	cmp	r8, r0
	bne	.L49	@cond_branch
	neg	r0, r5
	strh	r0, [r4, #0x26]
	b	.L50
.L49:
	strh	r5, [r4, #0x26]
.L50:
	add	r0, r3, r6
	lsl	r0, r0, #0x3
	mov	r4, ip
	add	r3, r0, r4
	ldrh	r0, [r3, #0xc]
	strh	r0, [r3, #0xe]
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bne	.L52	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x24]
	mov	r4, #0x8
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L52
.L46:
	sub	r0, r2, #0x1
	strh	r0, [r3, #0xe]
.L52:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 AnimTask_ShakeMon2Step,.Lfe4-AnimTask_ShakeMon2Step
	.align	2, 0
	.globl	AnimTask_ShakeMonInPlace
	.type	 AnimTask_ShakeMonInPlace,function
	.thumb_func
AnimTask_ShakeMonInPlace:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L57
	ldrb	r0, [r4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	bne	.L56	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L55
.L58:
	.align	2, 0
.L57:
	.word	gBattleAnimArgs
.L56:
	ldr	r0, .L59
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r4, #0x2]
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
	mov	r2, #0x0
	strh	r0, [r1, #0x24]
	ldrh	r0, [r4, #0x4]
	ldrh	r6, [r1, #0x26]
	add	r0, r0, r6
	strh	r0, [r1, #0x26]
	ldr	r0, .L59+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r3, [r1, #0x8]
	strh	r2, [r1, #0xa]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0xe]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r1, #0x10]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	mov	r6, #0x4
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x1
	strh	r0, [r1, #0x14]
	ldr	r2, .L59+0x8
	str	r2, [r1]
	add	r0, r5, #0
	bl	_call_via_r2
.L55:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	gSprites
	.word	gTasks
	.word	AnimTask_ShakeMonInPlace_Step
.Lfe5:
	.size	 AnimTask_ShakeMonInPlace,.Lfe5-AnimTask_ShakeMonInPlace
	.align	2, 0
	.type	 AnimTask_ShakeMonInPlace_Step,function
	.thumb_func
AnimTask_ShakeMonInPlace_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L69
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.LCB578
	b	.L62	@long jump
.LCB578:
	ldrh	r1, [r4, #0xa]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L63	@cond_branch
	ldr	r2, .L69+0x4
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r3, [r0, #0x24]
	add	r1, r1, r3
	strh	r1, [r0, #0x24]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x14]
	ldrh	r3, [r0, #0x26]
	add	r1, r1, r3
	strh	r1, [r0, #0x26]
	add	r3, r2, #0
	b	.L64
.L70:
	.align	2, 0
.L69:
	.word	gTasks
	.word	gSprites
.L63:
	ldr	r3, .L71
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r4, #0x12]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x26]
	ldrh	r2, [r4, #0x14]
	sub	r1, r1, r2
	strh	r1, [r0, #0x26]
.L64:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r6
	ldrh	r0, [r4, #0x10]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r4, #0xa]
	add	r2, r0, #0x1
	strh	r2, [r4, #0xa]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0xc
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	blt	.L68	@cond_branch
	mov	r0, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L66	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	lsr	r2, r0, #0x1f
	add	r0, r0, r2
	asr	r0, r0, #0x1
	ldrh	r6, [r1, #0x24]
	add	r0, r0, r6
	strh	r0, [r1, #0x24]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	lsr	r2, r0, #0x1f
	add	r0, r0, r2
	asr	r0, r0, #0x1
	ldrh	r3, [r1, #0x26]
	add	r0, r0, r3
	strh	r0, [r1, #0x26]
	b	.L67
.L72:
	.align	2, 0
.L71:
	.word	gSprites
.L66:
	mov	r6, #0x8
	ldrsh	r0, [r4, r6]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	mov	r0, #0x12
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	mov	r3, #0x14
	ldrsh	r1, [r4, r3]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	ldrh	r0, [r2, #0x26]
	sub	r0, r0, r1
	strh	r0, [r2, #0x26]
.L67:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L68
.L62:
	sub	r0, r2, #0x1
	strh	r0, [r4, #0xe]
.L68:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimTask_ShakeMonInPlace_Step,.Lfe6-AnimTask_ShakeMonInPlace_Step
	.align	2, 0
	.globl	AnimTask_ShakeAndSinkMon
	.type	 AnimTask_ShakeAndSinkMon,function
	.thumb_func
AnimTask_ShakeAndSinkMon:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L74
	ldrb	r0, [r5]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L74+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r5, #0x2]
	strh	r2, [r1, #0x24]
	ldr	r2, .L74+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r0, [r1, #0x8]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r1, #0xa]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r1, #0xc]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r1, #0xe]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r1, #0x10]
	ldr	r2, .L74+0xc
	str	r2, [r1]
	add	r0, r4, #0
	bl	_call_via_r2
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	gTasks
	.word	AnimTask_ShakeAndSinkMon_Step
.Lfe7:
	.size	 AnimTask_ShakeAndSinkMon,.Lfe7-AnimTask_ShakeAndSinkMon
	.align	2, 0
	.type	 AnimTask_ShakeAndSinkMon_Step,function
	.thumb_func
AnimTask_ShakeAndSinkMon_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L80
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrb	r5, [r3, #0x8]
	ldrh	r4, [r3, #0xa]
	ldrh	r1, [r3, #0x18]
	add	r0, r1, #0x1
	strh	r0, [r3, #0x18]
	mov	r7, #0xc
	ldrsh	r0, [r3, r7]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	ip, r2
	ldr	r7, .L80+0x4
	cmp	r0, r1
	bne	.L77	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x18]
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrh	r3, [r1, #0x24]
	mov	r0, #0x24
	ldrsh	r2, [r1, r0]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	cmp	r2, r0
	bne	.L78	@cond_branch
	neg	r0, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L78:
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r3
	strh	r0, [r1, #0x24]
.L77:
	lsl	r2, r6, #0x2
	add	r2, r2, r6
	lsl	r2, r2, #0x3
	add	r2, r2, ip
	strh	r4, [r2, #0xa]
	ldrh	r1, [r2, #0xe]
	ldrh	r0, [r2, #0x1a]
	add	r1, r1, r0
	strh	r1, [r2, #0x1a]
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r0, #0x26]
	ldrh	r0, [r2, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L79	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L79:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	gTasks
	.word	gSprites
.Lfe8:
	.size	 AnimTask_ShakeAndSinkMon_Step,.Lfe8-AnimTask_ShakeAndSinkMon_Step
	.align	2, 0
	.globl	AnimTask_TranslateMonElliptical
	.type	 AnimTask_TranslateMonElliptical,function
	.thumb_func
AnimTask_TranslateMonElliptical:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x1
	ldr	r4, .L89
	ldrb	r0, [r4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	ble	.L83	@cond_branch
	mov	r0, #0x5
	strh	r0, [r4, #0x8]
.L83:
	mov	r1, #0x0
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	add	r3, r4, #0
	ldr	r2, .L89+0x4
	mov	ip, r2
	lsl	r4, r5, #0x2
	ldr	r2, .L89+0x8
	mov	r8, r2
	cmp	r1, r0
	bge	.L85	@cond_branch
	add	r2, r0, #0
.L87:
	lsl	r0, r6, #0x19
	lsr	r6, r0, #0x18
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	blt	.L87	@cond_branch
.L85:
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	strh	r7, [r0, #0x8]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r0, #0xe]
	strh	r6, [r0, #0x10]
	mov	r1, r8
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_TranslateMonElliptical_Step
.Lfe9:
	.size	 AnimTask_TranslateMonElliptical,.Lfe9-AnimTask_TranslateMonElliptical
	.align	2, 0
	.type	 AnimTask_TranslateMonElliptical_Step,function
	.thumb_func
AnimTask_TranslateMonElliptical_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L94
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrb	r4, [r5, #0x8]
	mov	r1, #0x12
	ldrsh	r0, [r5, r1]
	mov	r2, #0xa
	ldrsh	r1, [r5, r2]
	bl	Sin
	ldr	r2, .L94+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r4, r1, r2
	strh	r0, [r4, #0x24]
	mov	r1, #0x12
	ldrsh	r0, [r5, r1]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r5, #0xc]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r5, #0x10]
	ldrh	r1, [r5, #0x12]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x12]
	cmp	r0, #0
	bne	.L92	@cond_branch
	ldrh	r0, [r5, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0xe]
.L92:
	mov	r2, #0xe
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	bne	.L93	@cond_branch
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L93:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gTasks
	.word	gSprites
.Lfe10:
	.size	 AnimTask_TranslateMonElliptical_Step,.Lfe10-AnimTask_TranslateMonElliptical_Step
	.align	2, 0
	.globl	AnimTask_TranslateMonEllipticalRespectSide
	.type	 AnimTask_TranslateMonEllipticalRespectSide,function
	.thumb_func
AnimTask_TranslateMonEllipticalRespectSide:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L98
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L97	@cond_branch
	ldr	r1, .L98+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L97:
	add	r0, r4, #0
	bl	AnimTask_TranslateMonElliptical
	pop	{r4}
	pop	{r0}
	bx	r0
.L99:
	.align	2, 0
.L98:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe11:
	.size	 AnimTask_TranslateMonEllipticalRespectSide,.Lfe11-AnimTask_TranslateMonEllipticalRespectSide
	.align	2, 0
	.type	 DoHorizontalLunge,function
	.thumb_func
DoHorizontalLunge:
	push	{r4, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L104
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L101	@cond_branch
	ldr	r1, .L104+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	b	.L103
.L105:
	.align	2, 0
.L104:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L101:
	ldr	r1, .L106
	ldrh	r0, [r1, #0x2]
.L103:
	strh	r0, [r4, #0x30]
	ldrh	r2, [r1]
	mov	r0, #0x0
	strh	r2, [r4, #0x2e]
	strh	r0, [r4, #0x32]
	ldr	r1, .L106+0x4
	ldr	r0, .L106+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	strh	r2, [r4, #0x36]
	ldr	r1, .L106+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L106+0x10
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	gBattleAnimArgs
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	ReverseHorizontalLungeDirection
	.word	TranslateSpriteLinearById
.Lfe12:
	.size	 DoHorizontalLunge,.Lfe12-DoHorizontalLunge
	.align	2, 0
	.type	 ReverseHorizontalLungeDirection,function
	.thumb_func
ReverseHorizontalLungeDirection:
	push	{lr}
	ldrh	r1, [r0, #0x36]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x30]
	neg	r1, r1
	strh	r1, [r0, #0x30]
	ldr	r1, .L109
	str	r1, [r0, #0x1c]
	ldr	r1, .L109+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L110:
	.align	2, 0
.L109:
	.word	TranslateSpriteLinearById
	.word	DestroyAnimSprite
.Lfe13:
	.size	 ReverseHorizontalLungeDirection,.Lfe13-ReverseHorizontalLungeDirection
	.align	2, 0
	.type	 DoVerticalDip,function
	.thumb_func
DoVerticalDip:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r5, .L112
	ldrb	r0, [r5, #0x4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r5]
	mov	r1, #0x0
	strh	r2, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	ldrh	r1, [r5, #0x2]
	strh	r1, [r4, #0x32]
	strh	r0, [r4, #0x34]
	strh	r2, [r4, #0x36]
	ldr	r1, .L112+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L112+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gBattleAnimArgs
	.word	ReverseVerticalDipDirection
	.word	TranslateSpriteLinearById
.Lfe14:
	.size	 DoVerticalDip,.Lfe14-DoVerticalDip
	.align	2, 0
	.type	 ReverseVerticalDipDirection,function
	.thumb_func
ReverseVerticalDipDirection:
	push	{lr}
	ldrh	r1, [r0, #0x36]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x32]
	neg	r1, r1
	strh	r1, [r0, #0x32]
	ldr	r1, .L115
	str	r1, [r0, #0x1c]
	ldr	r1, .L115+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	TranslateSpriteLinearById
	.word	DestroyAnimSprite
.Lfe15:
	.size	 ReverseVerticalDipDirection,.Lfe15-ReverseVerticalDipDirection
	.align	2, 0
	.type	 SlideMonToOriginalPos,function
	.thumb_func
SlideMonToOriginalPos:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r0, .L124
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L118	@cond_branch
	ldr	r1, .L124+0x4
	ldr	r0, .L124+0x8
	b	.L123
.L125:
	.align	2, 0
.L124:
	.word	gBattleAnimArgs
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L118:
	ldr	r1, .L126
	ldr	r0, .L126+0x4
.L123:
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r7, [r0]
	ldr	r5, .L126+0x8
	ldrh	r0, [r5, #0x4]
	mov	r3, #0x0
	strh	r0, [r6, #0x2e]
	ldr	r0, .L126+0xc
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r6, #0x30]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r6, #0x32]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r6, #0x34]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	str	r3, [sp]
	bl	InitSpriteDataForLinearTranslation
	ldr	r3, [sp]
	strh	r3, [r6, #0x34]
	strh	r3, [r6, #0x36]
	ldrh	r0, [r4, #0x24]
	strh	r0, [r6, #0x38]
	ldrh	r0, [r4, #0x26]
	strh	r0, [r6, #0x3a]
	add	r2, r6, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L120	@cond_branch
	strh	r3, [r6, #0x32]
	b	.L121
.L127:
	.align	2, 0
.L126:
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gSprites
.L120:
	cmp	r0, #0x2
	bne	.L121	@cond_branch
	strh	r3, [r6, #0x30]
.L121:
	ldr	r0, .L128
	ldrh	r1, [r0, #0x2]
	lsl	r0, r7, #0x8
	orr	r0, r0, r1
	strh	r0, [r6, #0x3c]
	ldr	r0, .L128+0x4
	str	r0, [r6, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	gBattleAnimArgs
	.word	SlideMonToOriginalPos_Step
.Lfe16:
	.size	 SlideMonToOriginalPos,.Lfe16-SlideMonToOriginalPos
	.align	2, 0
	.type	 SlideMonToOriginalPos_Step,function
	.thumb_func
SlideMonToOriginalPos_Step:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x3c]
	lsl	r1, r0, #0x18
	lsr	r4, r1, #0x18
	add	r5, r4, #0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L136
	add	r3, r1, r0
	ldrh	r0, [r2, #0x2e]
	mov	r6, #0x2e
	ldrsh	r1, [r2, r6]
	cmp	r1, #0
	bne	.L131	@cond_branch
	cmp	r4, #0x1
	bhi	.L132	@cond_branch
	strh	r1, [r3, #0x24]
.L132:
	cmp	r5, #0x2
	beq	.L134	@cond_branch
	cmp	r5, #0
	bne	.L133	@cond_branch
.L134:
	strh	r1, [r3, #0x26]
.L133:
	add	r0, r2, #0
	bl	DestroyAnimSprite
	b	.L135
.L137:
	.align	2, 0
.L136:
	.word	gSprites
.L131:
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x30]
	ldrh	r0, [r2, #0x34]
	add	r1, r1, r0
	strh	r1, [r2, #0x34]
	ldrh	r0, [r2, #0x32]
	ldrh	r4, [r2, #0x36]
	add	r0, r0, r4
	strh	r0, [r2, #0x36]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r6, [r2, #0x38]
	add	r1, r1, r6
	strh	r1, [r3, #0x24]
	ldrh	r0, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r2, #0x3a]
	add	r0, r0, r2
	strh	r0, [r3, #0x26]
.L135:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 SlideMonToOriginalPos_Step,.Lfe17-SlideMonToOriginalPos_Step
	.align	2, 0
	.type	 SlideMonToOffset,function
	.thumb_func
SlideMonToOffset:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L144
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L139	@cond_branch
	ldr	r0, .L144+0x4
	b	.L143
.L145:
	.align	2, 0
.L144:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L139:
	ldr	r0, .L146
.L143:
	ldrb	r2, [r0]
	ldr	r0, .L146+0x4
	add	r0, r2, r0
	ldrb	r6, [r0]
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L141	@cond_branch
	ldr	r1, .L146+0x8
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	mov	r2, #0x6
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L141	@cond_branch
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L141:
	ldr	r2, .L146+0x8
	ldrh	r0, [r2, #0x8]
	mov	r4, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L146+0xc
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r2, #0x2]
	ldrh	r3, [r1, #0x20]
	add	r0, r0, r3
	strh	r0, [r5, #0x32]
	ldrh	r0, [r1, #0x22]
	strh	r0, [r5, #0x34]
	ldrh	r0, [r2, #0x4]
	ldrh	r1, [r1, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitSpriteDataForLinearTranslation
	strh	r4, [r5, #0x34]
	strh	r4, [r5, #0x36]
	strh	r6, [r5, #0x38]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L146+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L146+0x14
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L147:
	.align	2, 0
.L146:
	.word	gBattleAnimTarget
	.word	gBattlerSpriteIds
	.word	gBattleAnimArgs
	.word	gSprites
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinearByIdFixedPoint
.Lfe18:
	.size	 SlideMonToOffset,.Lfe18-SlideMonToOffset
	.align	2, 0
	.type	 SlideMonToOffsetAndBack,function
	.thumb_func
SlideMonToOffsetAndBack:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r2, r6, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L156
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L149	@cond_branch
	ldr	r0, .L156+0x4
	b	.L155
.L157:
	.align	2, 0
.L156:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L149:
	ldr	r0, .L158
.L155:
	ldrb	r1, [r0]
	ldr	r0, .L158+0x4
	add	r0, r1, r0
	ldrb	r7, [r0]
	add	r0, r1, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L151	@cond_branch
	ldr	r1, .L158+0x8
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	mov	r2, #0x6
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L151	@cond_branch
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L151:
	ldr	r5, .L158+0x8
	ldrh	r0, [r5, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r0, .L158+0xc
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r6, #0x30]
	ldrh	r1, [r5, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r6, #0x34]
	ldrh	r1, [r5, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	bl	InitSpriteDataForLinearTranslation
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x8
	strh	r0, [r6, #0x34]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x8
	strh	r0, [r6, #0x36]
	strh	r7, [r6, #0x38]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r6, #0x3a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L153	@cond_branch
	ldr	r1, .L158+0x10
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData6
	b	.L154
.L159:
	.align	2, 0
.L158:
	.word	gBattleAnimTarget
	.word	gBattlerSpriteIds
	.word	gBattleAnimArgs
	.word	gSprites
	.word	DestroyAnimSprite
.L153:
	ldr	r1, .L160
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData6
.L154:
	ldr	r0, .L160+0x4
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L161:
	.align	2, 0
.L160:
	.word	SlideMonToOffsetAndBack_End
	.word	TranslateSpriteLinearByIdFixedPoint
.Lfe19:
	.size	 SlideMonToOffsetAndBack,.Lfe19-SlideMonToOffsetAndBack
	.align	2, 0
	.type	 SlideMonToOffsetAndBack_End,function
	.thumb_func
SlideMonToOffsetAndBack_End:
	push	{r4, lr}
	ldr	r4, .L163
	mov	r1, #0x38
	ldrsh	r2, [r0, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r3, #0x0
	strh	r3, [r1, #0x24]
	mov	r1, #0x38
	ldrsh	r2, [r0, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r3, [r1, #0x26]
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L164:
	.align	2, 0
.L163:
	.word	gSprites
.Lfe20:
	.size	 SlideMonToOffsetAndBack_End,.Lfe20-SlideMonToOffsetAndBack_End
	.align	2, 0
	.globl	AnimTask_WindUpLunge
	.type	 AnimTask_WindUpLunge,function
	.thumb_func
AnimTask_WindUpLunge:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L167
	mov	r0, #0x6
	ldrsh	r1, [r5, r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L167+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L166	@cond_branch
	ldrh	r0, [r5, #0x2]
	neg	r0, r0
	strh	r0, [r5, #0x2]
	ldrh	r0, [r5, #0xa]
	neg	r0, r0
	strh	r0, [r5, #0xa]
.L166:
	ldrb	r0, [r5]
	bl	GetAnimBattlerSpriteId
	ldr	r1, .L167+0x8
	lsl	r4, r6, #0x2
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x8]
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x8
	mov	r2, #0x6
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r4, #0xa]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0xc]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x8
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r4, #0x12]
	ldrh	r0, [r5, #0xc]
	strh	r0, [r4, #0x14]
	strh	r7, [r4, #0x16]
	ldr	r0, .L167+0xc
	str	r0, [r4]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L168:
	.align	2, 0
.L167:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	AnimTask_WindUpLunge_Step1
.Lfe21:
	.size	 AnimTask_WindUpLunge,.Lfe21-AnimTask_WindUpLunge
	.align	2, 0
	.type	 AnimTask_WindUpLunge_Step1,function
	.thumb_func
AnimTask_WindUpLunge_Step1:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L171
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrb	r1, [r5, #0x8]
	ldrh	r0, [r5, #0xa]
	ldrh	r2, [r5, #0x1e]
	add	r0, r0, r2
	strh	r0, [r5, #0x1e]
	ldr	r2, .L171+0x4
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	add	r4, r4, r2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r5, #0x1c]
	lsr	r0, r0, #0x8
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r5, #0x16]
	ldrh	r1, [r5, #0x1c]
	add	r0, r0, r1
	strh	r0, [r5, #0x1c]
	ldrh	r0, [r5, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L170	@cond_branch
	ldr	r0, .L171+0x8
	str	r0, [r5]
.L170:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	gTasks
	.word	gSprites
	.word	AnimTask_WindUpLunge_Step2
.Lfe22:
	.size	 AnimTask_WindUpLunge_Step1,.Lfe22-AnimTask_WindUpLunge_Step1
	.align	2, 0
	.type	 AnimTask_WindUpLunge_Step2,function
	.thumb_func
AnimTask_WindUpLunge_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L177
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L174	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x10]
	b	.L175
.L178:
	.align	2, 0
.L177:
	.word	gTasks
.L174:
	ldrb	r0, [r4, #0x8]
	ldrh	r2, [r4, #0x12]
	ldrh	r1, [r4, #0x20]
	add	r2, r2, r1
	strh	r2, [r4, #0x20]
	ldr	r3, .L179
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x18
	ldrh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	add	r2, r2, r0
	strh	r2, [r1, #0x24]
	ldrh	r0, [r4, #0x14]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L175	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L175:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L180:
	.align	2, 0
.L179:
	.word	gSprites
.Lfe23:
	.size	 AnimTask_WindUpLunge_Step2,.Lfe23-AnimTask_WindUpLunge_Step2
	.align	2, 0
	.globl	AnimTask_SlideOffScreen
	.type	 AnimTask_SlideOffScreen,function
	.thumb_func
AnimTask_SlideOffScreen:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L196
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x2
	beq	.L185	@cond_branch
	cmp	r0, #0x2
	bgt	.L191	@cond_branch
	cmp	r0, #0
	blt	.L189	@cond_branch
	ldrb	r0, [r1]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	b	.L182
.L197:
	.align	2, 0
.L196:
	.word	gBattleAnimArgs
.L191:
	cmp	r0, #0x3
	beq	.L187	@cond_branch
	b	.L189
.L185:
	ldr	r5, .L198
	b	.L195
.L199:
	.align	2, 0
.L198:
	.word	gBattleAnimAttacker
.L187:
	ldr	r5, .L200
.L195:
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L189	@cond_branch
	ldr	r1, .L200+0x4
	ldrb	r0, [r5]
	eor	r0, r0, r4
	add	r0, r0, r1
	ldrb	r2, [r0]
	b	.L182
.L201:
	.align	2, 0
.L200:
	.word	gBattleAnimTarget
	.word	gBattlerSpriteIds
.L189:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L181
.L182:
	ldr	r1, .L202
	lsl	r4, r6, #0x2
	add	r0, r4, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	strh	r2, [r5, #0x8]
	ldr	r0, .L202+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L192	@cond_branch
	ldr	r0, .L202+0x8
	ldrh	r0, [r0, #0x2]
	b	.L194
.L203:
	.align	2, 0
.L202:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L192:
	ldr	r0, .L204
	ldrh	r0, [r0, #0x2]
	neg	r0, r0
.L194:
	strh	r0, [r5, #0xa]
	ldr	r0, .L204+0x4
	add	r1, r4, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L204+0x8
	str	r0, [r1]
.L181:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L205:
	.align	2, 0
.L204:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_SlideOffScreen_Step
.Lfe24:
	.size	 AnimTask_SlideOffScreen,.Lfe24-AnimTask_SlideOffScreen
	.align	2, 0
	.type	 AnimTask_SlideOffScreen_Step,function
	.thumb_func
AnimTask_SlideOffScreen_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L208
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r2, [r1, #0x8]
	ldr	r3, .L208+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r1, #0xa]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	add	r1, r1, r0
	add	r1, r1, #0x20
	mov	r0, #0x98
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bls	.L207	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L207:
	pop	{r4}
	pop	{r0}
	bx	r0
.L209:
	.align	2, 0
.L208:
	.word	gTasks
	.word	gSprites
.Lfe25:
	.size	 AnimTask_SlideOffScreen_Step,.Lfe25-AnimTask_SlideOffScreen_Step
	.align	2, 0
	.globl	AnimTask_SwayMon
	.type	 AnimTask_SwayMon,function
	.thumb_func
AnimTask_SwayMon:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L215
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L211	@cond_branch
	ldr	r1, .L215+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L211:
	ldr	r4, .L215+0x4
	ldrb	r0, [r4, #0x8]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L215+0x8
	lsl	r3, r5, #0x2
	add	r1, r3, r5
	lsl	r1, r1, #0x3
	add	r2, r1, r2
	ldrh	r1, [r4]
	strh	r1, [r2, #0x8]
	ldrh	r1, [r4, #0x2]
	strh	r1, [r2, #0xa]
	ldrh	r1, [r4, #0x4]
	strh	r1, [r2, #0xc]
	ldrh	r1, [r4, #0x6]
	strh	r1, [r2, #0xe]
	strh	r0, [r2, #0x10]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L212	@cond_branch
	ldrb	r0, [r6]
	b	.L214
.L216:
	.align	2, 0
.L215:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gTasks
.L212:
	ldr	r0, .L217
	ldrb	r0, [r0]
.L214:
	strh	r0, [r2, #0x12]
	ldr	r1, .L217+0x4
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0, #0x20]
	ldr	r1, .L217+0x8
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L218:
	.align	2, 0
.L217:
	.word	gBattleAnimTarget
	.word	gTasks
	.word	AnimTask_SwayMon_Step
.Lfe26:
	.size	 AnimTask_SwayMon,.Lfe26-AnimTask_SwayMon
	.align	2, 0
	.type	 AnimTask_SwayMon_Step,function
	.thumb_func
AnimTask_SwayMon_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L231
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrb	r7, [r4, #0x10]
	ldrh	r0, [r4, #0xc]
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	lsl	r1, r0, #0x10
	strh	r0, [r4, #0x1c]
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r0, r8
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	bl	Sin
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r9, r5
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L220	@cond_branch
	ldr	r0, .L231+0x4
	lsl	r2, r7, #0x4
	add	r1, r2, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	strh	r5, [r1, #0x24]
	mov	r9, r0
	add	r4, r2, #0
	b	.L221
.L232:
	.align	2, 0
.L231:
	.word	gTasks
	.word	gSprites
.L220:
	ldrb	r0, [r4, #0x12]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L222	@cond_branch
	ldr	r1, .L233
	lsl	r2, r7, #0x4
	add	r0, r2, r7
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r9, r1
	add	r4, r2, #0
	cmp	r0, #0
	bge	.L230	@cond_branch
	b	.L225
.L234:
	.align	2, 0
.L233:
	.word	gSprites
.L222:
	ldr	r1, .L235
	lsl	r2, r7, #0x4
	add	r0, r2, r7
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	mov	r4, r9
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	mov	r9, r1
	add	r4, r2, #0
	cmp	r0, #0
	bge	.L225	@cond_branch
	neg	r0, r0
.L225:
	neg	r0, r0
.L230:
	strh	r0, [r3, #0x26]
.L221:
	mov	r5, r8
	cmp	r5, #0x7f
	bls	.L228	@cond_branch
	ldr	r1, .L235+0x4
	lsl	r2, r6, #0x2
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0x1e
	ldrsh	r0, [r3, r5]
	add	r5, r1, #0
	cmp	r0, #0
	bne	.L228	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	beq	.L227	@cond_branch
.L228:
	mov	r2, r8
	cmp	r2, #0x7e
	bhi	.L226	@cond_branch
	ldr	r1, .L235+0x4
	lsl	r2, r6, #0x2
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0x1e
	ldrsh	r0, [r3, r5]
	add	r5, r1, #0
	cmp	r0, #0x1
	bne	.L226	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L226	@cond_branch
.L227:
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrh	r0, [r1, #0x1e]
	mov	r2, #0x1
	eor	r0, r0, r2
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x20]
	eor	r0, r0, r2
	strh	r0, [r1, #0x20]
	ldrh	r0, [r1, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L226	@cond_branch
	add	r0, r4, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	strh	r3, [r0, #0x24]
	strh	r3, [r0, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L226:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L236:
	.align	2, 0
.L235:
	.word	gSprites
	.word	gTasks
.Lfe27:
	.size	 AnimTask_SwayMon_Step,.Lfe27-AnimTask_SwayMon_Step
	.align	2, 0
	.globl	AnimTask_ScaleMonAndRestore
	.type	 AnimTask_ScaleMonAndRestore,function
	.thumb_func
AnimTask_ScaleMonAndRestore:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L238
	ldrb	r0, [r6, #0x6]
	bl	GetAnimBattlerSpriteId
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r1, [r6, #0x8]
	add	r0, r5, #0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r1, .L238+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r6]
	strh	r1, [r0, #0x8]
	ldrh	r1, [r6, #0x2]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r6, #0x4]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r6, #0x4]
	strh	r1, [r0, #0xe]
	strh	r5, [r0, #0x10]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x1c]
	strh	r1, [r0, #0x1e]
	ldr	r1, .L238+0x8
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L239:
	.align	2, 0
.L238:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_ScaleMonAndRestore_Step
.Lfe28:
	.size	 AnimTask_ScaleMonAndRestore,.Lfe28-AnimTask_ScaleMonAndRestore
	.align	2, 0
	.type	 AnimTask_ScaleMonAndRestore_Step,function
	.thumb_func
AnimTask_ScaleMonAndRestore_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L244
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0xa]
	ldrh	r3, [r4, #0x1e]
	add	r0, r0, r3
	strh	r0, [r4, #0x1e]
	ldrb	r0, [r4, #0x10]
	add	r6, r0, #0
	mov	r0, #0x1c
	ldrsh	r1, [r4, r0]
	mov	r3, #0x1e
	ldrsh	r2, [r4, r3]
	add	r0, r6, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L241	@cond_branch
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	ble	.L242	@cond_branch
	ldrh	r0, [r4, #0x8]
	neg	r0, r0
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xa]
	neg	r0, r0
	strh	r0, [r4, #0xa]
	strh	r2, [r4, #0xc]
	strh	r1, [r4, #0xe]
	b	.L241
.L245:
	.align	2, 0
.L244:
	.word	gTasks
.L242:
	add	r0, r6, #0
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L241:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 AnimTask_ScaleMonAndRestore_Step,.Lfe29-AnimTask_ScaleMonAndRestore_Step
	.align	2, 0
	.globl	AnimTask_RotateMonSpriteToSide
	.type	 AnimTask_RotateMonSpriteToSide,function
	.thumb_func
AnimTask_RotateMonSpriteToSide:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L257
	ldrb	r0, [r4, #0x4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r1, .L257+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r1, #0x0
	strh	r1, [r2, #0xa]
	ldrh	r0, [r4]
	strh	r0, [r2, #0xc]
	mov	r3, #0x6
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x1
	beq	.L247	@cond_branch
	strh	r1, [r2, #0xe]
	b	.L248
.L258:
	.align	2, 0
.L257:
	.word	gBattleAnimArgs
	.word	gTasks
.L247:
	ldrh	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	r3, r0
	mul	r3, r3, r1
	add	r0, r3, #0
	strh	r0, [r2, #0xe]
.L248:
	ldr	r1, .L259
	lsl	r4, r7, #0x2
	add	r0, r4, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r6, .L259+0x4
	ldrh	r0, [r6, #0x2]
	strh	r0, [r5, #0x10]
	mov	r0, r8
	strh	r0, [r5, #0x12]
	ldrh	r0, [r6, #0x6]
	strh	r0, [r5, #0x14]
	bl	IsContest
	lsl	r0, r0, #0x18
	mov	r8, r4
	cmp	r0, #0
	beq	.L249	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5, #0x16]
	b	.L250
.L260:
	.align	2, 0
.L259:
	.word	gTasks
	.word	gBattleAnimArgs
.L249:
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L251	@cond_branch
	ldr	r0, .L261
	b	.L256
.L262:
	.align	2, 0
.L261:
	.word	gBattleAnimAttacker
.L251:
	ldr	r0, .L263
.L256:
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L254	@cond_branch
	mov	r1, #0x1
.L254:
	strh	r1, [r5, #0x16]
.L250:
	ldr	r0, .L263+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r4, r1, r0
	mov	r3, #0x16
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L255	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L255	@cond_branch
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0xe]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0x10]
.L255:
	ldr	r0, .L263+0x4
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L263+0x8
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L264:
	.align	2, 0
.L263:
	.word	gBattleAnimTarget
	.word	gTasks
	.word	AnimTask_RotateMonSpriteToSide_Step
.Lfe30:
	.size	 AnimTask_RotateMonSpriteToSide,.Lfe30-AnimTask_RotateMonSpriteToSide
	.align	2, 0
	.globl	AnimTask_RotateMonToSideAndRestore
	.type	 AnimTask_RotateMonToSideAndRestore,function
	.thumb_func
AnimTask_RotateMonToSideAndRestore:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L274
	ldrb	r0, [r4, #0x4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r1, .L274+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0xa]
	ldrh	r1, [r4]
	strh	r1, [r0, #0xc]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L266	@cond_branch
	ldr	r0, .L274+0x8
	b	.L273
.L275:
	.align	2, 0
.L274:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	gBattleAnimAttacker
.L266:
	ldr	r0, .L276
.L273:
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L268	@cond_branch
	ldrh	r0, [r4, #0x2]
	neg	r0, r0
	strh	r0, [r4, #0x2]
.L268:
	ldr	r0, .L276+0x4
	mov	r2, #0x6
	ldrsh	r1, [r0, r2]
	add	r6, r0, #0
	cmp	r1, #0x1
	beq	.L270	@cond_branch
	ldr	r2, .L276+0x8
	lsl	r3, r5, #0x2
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0xe]
	b	.L271
.L277:
	.align	2, 0
.L276:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gTasks
.L270:
	ldr	r3, .L278
	lsl	r4, r5, #0x2
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrh	r2, [r6]
	ldrh	r1, [r6, #0x2]
	mov	r7, r2
	mul	r7, r7, r1
	add	r1, r7, #0
	strh	r1, [r0, #0xe]
	add	r2, r3, #0
	add	r3, r4, #0
.L271:
	add	r1, r3, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r0, [r6, #0x2]
	strh	r0, [r1, #0x10]
	mov	r0, r8
	strh	r0, [r1, #0x12]
	ldrh	r0, [r6, #0x6]
	strh	r0, [r1, #0x14]
	mov	r0, #0x1
	strh	r0, [r1, #0x16]
	mov	r2, #0xe
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0xe]
	mov	r7, #0x10
	ldrsh	r0, [r1, r7]
	neg	r0, r0
	strh	r0, [r1, #0x10]
	ldr	r0, .L278+0x4
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	gTasks
	.word	AnimTask_RotateMonSpriteToSide_Step
.Lfe31:
	.size	 AnimTask_RotateMonToSideAndRestore,.Lfe31-AnimTask_RotateMonToSideAndRestore
	.align	2, 0
	.type	 AnimTask_RotateMonSpriteToSide_Step,function
	.thumb_func
AnimTask_RotateMonSpriteToSide_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L290
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0xe]
	add	r0, r0, r1
	strh	r0, [r4, #0xe]
	ldrb	r0, [r4, #0x12]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xe]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L281	@cond_branch
	ldrb	r0, [r4, #0x12]
	bl	SetBattlerSpriteYOffsetFromRotation
.L281:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L282	@cond_branch
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L284	@cond_branch
	cmp	r0, #0x1
	ble	.L286	@cond_branch
	cmp	r0, #0x2
	beq	.L287	@cond_branch
	b	.L286
.L291:
	.align	2, 0
.L290:
	.word	gTasks
.L284:
	ldrb	r0, [r4, #0x12]
	bl	ResetSpriteRotScale
.L286:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L282
.L287:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0x10]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
.L282:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 AnimTask_RotateMonSpriteToSide_Step,.Lfe32-AnimTask_RotateMonSpriteToSide_Step
	.align	2, 0
	.globl	AnimTask_ShakeTargetBasedOnMovePowerOrDmg
	.type	 AnimTask_ShakeTargetBasedOnMovePowerOrDmg,function
	.thumb_func
AnimTask_ShakeTargetBasedOnMovePowerOrDmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L300
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r8, r0
	cmp	r1, #0
	bne	.L293	@cond_branch
	ldr	r4, .L300+0x4
	lsl	r5, r7, #0x2
	add	r0, r5, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r4
	ldr	r0, .L300+0x8
	ldrh	r0, [r0]
	mov	r1, #0xc
	bl	__udivsi3
	b	.L299
.L301:
	.align	2, 0
.L300:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	gAnimMovePower
.L293:
	ldr	r4, .L302
	lsl	r5, r7, #0x2
	add	r0, r5, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r4
	ldr	r0, .L302+0x4
	ldr	r0, [r0]
	mov	r1, #0xc
	bl	__divsi3
.L299:
	strh	r0, [r6, #0x26]
	lsl	r0, r0, #0x10
	add	r1, r4, #0
	cmp	r0, #0
	bgt	.L297	@cond_branch
	mov	r0, #0x1
	strh	r0, [r6, #0x26]
.L297:
	mov	r2, #0x26
	ldrsh	r0, [r6, r2]
	cmp	r0, #0x10
	ble	.L296	@cond_branch
	mov	r0, #0x10
	strh	r0, [r6, #0x26]
.L296:
	add	r4, r5, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	mov	r5, #0x0
	strh	r1, [r4, #0x24]
	ldrh	r2, [r4, #0x26]
	mov	r0, #0x1
	and	r0, r0, r2
	add	r1, r1, r0
	strh	r1, [r4, #0x22]
	strh	r5, [r4, #0x20]
	mov	r1, r8
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x1e]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x16]
	ldr	r2, .L302+0x8
	mov	r0, #0x16
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x18]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x26]
	strh	r0, [r4, #0x1a]
	strh	r5, [r4, #0x8]
	mov	r1, r8
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0xa]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0xc]
	ldr	r0, .L302+0xc
	str	r0, [r4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gTasks
	.word	gAnimMoveDmg
	.word	gSprites
	.word	AnimTask_ShakeTargetBasedOnMovePowerOrDmg_Step
.Lfe33:
	.size	 AnimTask_ShakeTargetBasedOnMovePowerOrDmg,.Lfe33-AnimTask_ShakeTargetBasedOnMovePowerOrDmg
	.align	2, 0
	.type	 AnimTask_ShakeTargetBasedOnMovePowerOrDmg_Step,function
	.thumb_func
AnimTask_ShakeTargetBasedOnMovePowerOrDmg_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L314
	add	r3, r0, r1
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xa
	ldrsh	r1, [r3, r2]
	cmp	r0, r1
	ble	.L305	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x8]
	ldrh	r0, [r3, #0x20]
	add	r1, r0, #0x1
	mov	r0, #0x1
	and	r1, r1, r0
	strh	r1, [r3, #0x20]
	mov	r2, #0x1c
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L306	@cond_branch
	cmp	r1, #0
	beq	.L307	@cond_branch
	ldr	r2, .L314+0x4
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x22]
	ldrh	r2, [r3, #0x18]
	add	r1, r1, r2
	b	.L313
.L315:
	.align	2, 0
.L314:
	.word	gTasks
	.word	gSprites
.L307:
	ldr	r2, .L316
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x18]
	ldrh	r2, [r3, #0x24]
	sub	r1, r1, r2
.L313:
	strh	r1, [r0, #0x24]
.L306:
	mov	r1, #0x1e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L309	@cond_branch
	mov	r2, #0x20
	ldrsh	r4, [r3, r2]
	cmp	r4, #0
	beq	.L310	@cond_branch
	ldr	r2, .L316
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x26]
	strh	r1, [r0, #0x26]
	b	.L309
.L317:
	.align	2, 0
.L316:
	.word	gSprites
.L310:
	ldr	r2, .L318
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x26]
.L309:
	ldrh	r0, [r3, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	cmp	r4, #0
	bne	.L305	@cond_branch
	ldr	r2, .L318
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x24]
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x26]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L305:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L319:
	.align	2, 0
.L318:
	.word	gSprites
.Lfe34:
	.size	 AnimTask_ShakeTargetBasedOnMovePowerOrDmg_Step,.Lfe34-AnimTask_ShakeTargetBasedOnMovePowerOrDmg_Step
.text
	.align	2, 0 @ Don't pad with nop

