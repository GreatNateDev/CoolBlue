@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sAnim_ConfusionDuck_0,object
sAnim_ConfusionDuck_0:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x4
	.byte	0x8
	.space	1
	.short	0x0
	.byte	0x48
	.space	1
	.short	0x8
	.byte	0x8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ConfusionDuck_0,20
	.align	2, 0
	.type	 sAnim_ConfusionDuck_1,object
sAnim_ConfusionDuck_1:
	.short	0x0
	.byte	0x48
	.space	1
	.short	0x4
	.byte	0x8
	.space	1
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x8
	.byte	0x8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ConfusionDuck_1,20
	.align	2, 0
	.type	 sAnims_ConfusionDuck,object
sAnims_ConfusionDuck:
	.word	sAnim_ConfusionDuck_0
	.word	sAnim_ConfusionDuck_1
	.size	 sAnims_ConfusionDuck,8
	.globl	gConfusionDuckSpriteTemplate
	.align	2, 0
	.type	 gConfusionDuckSpriteTemplate,object
	.size	 gConfusionDuckSpriteTemplate,24
gConfusionDuckSpriteTemplate:
	.short	0x2759
	.short	0x2759
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sAnims_ConfusionDuck
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimConfusionDuck
	.globl	gSimplePaletteBlendSpriteTemplate
	.align	2, 0
	.type	 gSimplePaletteBlendSpriteTemplate,object
	.size	 gSimplePaletteBlendSpriteTemplate,24
gSimplePaletteBlendSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSimplePaletteBlend
	.globl	gComplexPaletteBlendSpriteTemplate
	.align	2, 0
	.type	 gComplexPaletteBlendSpriteTemplate,object
	.size	 gComplexPaletteBlendSpriteTemplate,24
gComplexPaletteBlendSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimComplexPaletteBlend
	.align	2, 0
	.type	 sAnim_CirclingSparkle,object
sAnim_CirclingSparkle:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_CirclingSparkle,24
	.align	2, 0
	.type	 sAnims_CirclingSparkle,object
sAnims_CirclingSparkle:
	.word	sAnim_CirclingSparkle
	.size	 sAnims_CirclingSparkle,4
	.align	2, 0
	.type	 sCirclingSparkleSpriteTemplate,object
	.size	 sCirclingSparkleSpriteTemplate,24
sCirclingSparkleSpriteTemplate:
	.short	0x2757
	.short	0x2757
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_CirclingSparkle
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCirclingSparkle
	.globl	gShakeMonOrTerrainSpriteTemplate
	.align	2, 0
	.type	 gShakeMonOrTerrainSpriteTemplate,object
	.size	 gShakeMonOrTerrainSpriteTemplate,24
gShakeMonOrTerrainSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimShakeMonOrBattleTerrain
	.align	2, 0
	.type	 sAffineAnim_HitSplat_0,object
sAffineAnim_HitSplat_0:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_HitSplat_0,16
	.align	2, 0
	.type	 sAffineAnim_HitSplat_1,object
sAffineAnim_HitSplat_1:
	.short	0xd8
	.short	0xd8
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_HitSplat_1,24
	.align	2, 0
	.type	 sAffineAnim_HitSplat_2,object
sAffineAnim_HitSplat_2:
	.short	0xb0
	.short	0xb0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_HitSplat_2,24
	.align	2, 0
	.type	 sAffineAnim_HitSplat_3,object
sAffineAnim_HitSplat_3:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_HitSplat_3,24
	.align	2, 0
	.type	 sAffineAnims_HitSplat,object
sAffineAnims_HitSplat:
	.word	sAffineAnim_HitSplat_0
	.word	sAffineAnim_HitSplat_1
	.word	sAffineAnim_HitSplat_2
	.word	sAffineAnim_HitSplat_3
	.size	 sAffineAnims_HitSplat,16
	.globl	gBasicHitSplatSpriteTemplate
	.align	2, 0
	.type	 gBasicHitSplatSpriteTemplate,object
	.size	 gBasicHitSplatSpriteTemplate,24
gBasicHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_HitSplat
	.word	AnimHitSplatBasic
	.globl	gHandleInvertHitSplatSpriteTemplate
	.align	2, 0
	.type	 gHandleInvertHitSplatSpriteTemplate,object
	.size	 gHandleInvertHitSplatSpriteTemplate,24
gHandleInvertHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_HitSplat
	.word	AnimHitSplatHandleInvert
	.globl	gWaterHitSplatSpriteTemplate
	.align	2, 0
	.type	 gWaterHitSplatSpriteTemplate,object
	.size	 gWaterHitSplatSpriteTemplate,24
gWaterHitSplatSpriteTemplate:
	.short	0x27a4
	.short	0x27a4
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_HitSplat
	.word	AnimHitSplatBasic
	.globl	gRandomPosHitSplatSpriteTemplate
	.align	2, 0
	.type	 gRandomPosHitSplatSpriteTemplate,object
	.size	 gRandomPosHitSplatSpriteTemplate,24
gRandomPosHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_HitSplat
	.word	AnimHitSplatRandom
	.globl	gMonEdgeHitSplatSpriteTemplate
	.align	2, 0
	.type	 gMonEdgeHitSplatSpriteTemplate,object
	.size	 gMonEdgeHitSplatSpriteTemplate,24
gMonEdgeHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_HitSplat
	.word	AnimHitSplatOnMonEdge
	.globl	gCrossImpactSpriteTemplate
	.align	2, 0
	.type	 gCrossImpactSpriteTemplate,object
	.size	 gCrossImpactSpriteTemplate,24
gCrossImpactSpriteTemplate:
	.short	0x282d
	.short	0x282d
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCrossImpact
	.globl	gFlashingHitSplatSpriteTemplate
	.align	2, 0
	.type	 gFlashingHitSplatSpriteTemplate,object
	.size	 gFlashingHitSplatSpriteTemplate,24
gFlashingHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_HitSplat
	.word	AnimFlashingHitSplat
	.globl	gPersistHitSplatSpriteTemplate
	.align	2, 0
	.type	 gPersistHitSplatSpriteTemplate,object
	.size	 gPersistHitSplatSpriteTemplate,24
gPersistHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_HitSplat
	.word	AnimHitSplatPersistent
.text
	.align	2, 0
	.type	 AnimConfusionDuck,function
	.thumb_func
AnimConfusionDuck:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L7
	ldrh	r0, [r5]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L7+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L5	@cond_branch
	ldrh	r0, [r5, #0x6]
	neg	r0, r0
	strh	r0, [r4, #0x30]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	b	.L6
.L8:
	.align	2, 0
.L7:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L5:
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	strh	r1, [r4, #0x36]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L6:
	ldr	r0, .L9
	ldrh	r0, [r0, #0x8]
	strh	r0, [r4, #0x34]
	ldr	r1, .L9+0x4
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	gBattleAnimArgs
	.word	AnimConfusionDuck_Step
.Lfe1:
	.size	 AnimConfusionDuck,.Lfe1-AnimConfusionDuck
	.align	2, 0
	.type	 AnimConfusionDuck_Step,function
	.thumb_func
AnimConfusionDuck_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x1e
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r1, #0xa
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	cmp	r0, #0x7f
	bhi	.L12	@cond_branch
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	b	.L13
.L12:
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xc
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
.L13:
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x2e]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L14	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L14:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimConfusionDuck_Step,.Lfe2-AnimConfusionDuck_Step
	.align	2, 0
	.type	 AnimSimplePaletteBlend,function
	.thumb_func
AnimSimplePaletteBlend:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	ldr	r4, .L16
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	bl	UnpackSelectedBattlePalettes
	mov	r1, #0x2
	ldrsb	r1, [r4, r1]
	ldrb	r2, [r4, #0x4]
	ldrb	r3, [r4, #0x6]
	ldrh	r4, [r4, #0x8]
	str	r4, [sp]
	bl	BeginNormalPaletteFade
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L16+0x4
	str	r0, [r5, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gBattleAnimArgs
	.word	AnimSimplePaletteBlend_Step
.Lfe3:
	.size	 AnimSimplePaletteBlend,.Lfe3-AnimSimplePaletteBlend
	.align	2, 0
	.globl	UnpackSelectedBattlePalettes
	.type	 UnpackSelectedBattlePalettes,function
	.thumb_func
UnpackSelectedBattlePalettes:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r4, #0x1
	mov	r8, r0
	mov	r1, r8
	and	r1, r1, r4
	mov	r8, r1
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x11
	and	r1, r1, r4
	asr	r2, r0, #0x12
	and	r2, r2, r4
	asr	r3, r0, #0x13
	and	r3, r3, r4
	asr	r6, r0, #0x14
	and	r6, r6, r4
	asr	r5, r0, #0x15
	and	r5, r5, r4
	asr	r0, r0, #0x16
	and	r0, r0, r4
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, r8
	bl	GetBattlePalettesMask
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 UnpackSelectedBattlePalettes,.Lfe4-UnpackSelectedBattlePalettes
	.align	2, 0
	.type	 AnimSimplePaletteBlend_Step,function
	.thumb_func
AnimSimplePaletteBlend_Step:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L21
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L20	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L20:
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	gPaletteFade
.Lfe5:
	.size	 AnimSimplePaletteBlend_Step,.Lfe5-AnimSimplePaletteBlend_Step
	.align	2, 0
	.type	 AnimComplexPaletteBlend,function
	.thumb_func
AnimComplexPaletteBlend:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L24
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x34]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x36]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r5, #0x38]
	ldrh	r0, [r4, #0xc]
	strh	r0, [r5, #0x3a]
	ldrh	r0, [r4]
	strh	r0, [r5, #0x3c]
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	bl	UnpackSelectedBattlePalettes
	ldrb	r1, [r4, #0x8]
	ldrh	r2, [r4, #0x6]
	bl	BlendPalettes
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L24+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	gBattleAnimArgs
	.word	AnimComplexPaletteBlend_Step1
.Lfe6:
	.size	 AnimComplexPaletteBlend,.Lfe6-AnimComplexPaletteBlend
	.align	2, 0
	.type	 AnimComplexPaletteBlend_Step1,function
	.thumb_func
AnimComplexPaletteBlend_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L27	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	b	.L26
.L27:
	ldr	r0, .L32
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L26	@cond_branch
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L29	@cond_branch
	ldr	r0, .L32+0x4
	str	r0, [r4, #0x1c]
	b	.L26
.L33:
	.align	2, 0
.L32:
	.word	gPaletteFade
	.word	AnimComplexPaletteBlend_Step2
.L29:
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	bl	UnpackSelectedBattlePalettes
	add	r3, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L30	@cond_branch
	ldrh	r1, [r4, #0x36]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrh	r2, [r4, #0x34]
	add	r0, r3, #0
	bl	BlendPalettes
	b	.L31
.L30:
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrh	r2, [r4, #0x38]
	add	r0, r3, #0
	bl	BlendPalettes
.L31:
	ldrh	r0, [r4, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r2, #0
	eor	r0, r0, r1
	strh	r0, [r4, #0x30]
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x32]
.L26:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 AnimComplexPaletteBlend_Step1,.Lfe7-AnimComplexPaletteBlend_Step1
	.align	2, 0
	.type	 AnimComplexPaletteBlend_Step2,function
	.thumb_func
AnimComplexPaletteBlend_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L36
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L35	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	bl	UnpackSelectedBattlePalettes
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BlendPalettes
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L35:
	pop	{r4}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	gPaletteFade
.Lfe8:
	.size	 AnimComplexPaletteBlend_Step2,.Lfe8-AnimComplexPaletteBlend_Step2
	.align	2, 0
	.type	 AnimCirclingSparkle,function
	.thumb_func
AnimCirclingSparkle:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L39
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	mov	r2, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r2, [r4, #0x2e]
	mov	r0, #0xa
	strh	r0, [r4, #0x30]
	mov	r0, #0x8
	strh	r0, [r4, #0x32]
	mov	r0, #0x28
	strh	r0, [r4, #0x34]
	mov	r0, #0x70
	strh	r0, [r4, #0x36]
	strh	r2, [r4, #0x38]
	ldr	r1, .L39+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L39+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteInGrowingCircle
.Lfe9:
	.size	 AnimCirclingSparkle,.Lfe9-AnimCirclingSparkle
	.align	2, 0
	.globl	AnimTask_BlendColorCycle
	.type	 AnimTask_BlendColorCycle,function
	.thumb_func
AnimTask_BlendColorCycle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L42
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldr	r3, .L42+0x4
	ldrh	r1, [r3]
	mov	r5, #0x0
	strh	r1, [r4, #0x8]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r4, #0xa]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r4, #0xc]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r4, #0xe]
	ldrh	r2, [r3, #0x8]
	strh	r2, [r4, #0x10]
	ldrh	r1, [r3, #0xa]
	strh	r1, [r4, #0x12]
	strh	r5, [r4, #0x18]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r1, #0x0
	bl	BlendColorCycle
	ldr	r0, .L42+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_BlendColorCycleLoop
.Lfe10:
	.size	 AnimTask_BlendColorCycle,.Lfe10-AnimTask_BlendColorCycle
	.align	2, 0
	.type	 BlendColorCycle,function
	.thumb_func
BlendColorCycle:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r1, .L45
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	bl	UnpackSelectedBattlePalettes
	mov	r1, #0xa
	ldrsb	r1, [r4, r1]
	ldrh	r2, [r4, #0x12]
	str	r2, [sp]
	add	r2, r5, #0
	add	r3, r6, #0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x18]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x18]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	gTasks
.Lfe11:
	.size	 BlendColorCycle,.Lfe11-BlendColorCycle
	.align	2, 0
	.type	 AnimTask_BlendColorCycleLoop,function
	.thumb_func
AnimTask_BlendColorCycleLoop:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r3, #0
	ldr	r0, .L54
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L48	@cond_branch
	ldr	r1, .L54+0x4
	lsl	r2, r3, #0x2
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0xc
	ldrsh	r0, [r3, r5]
	add	r6, r1, #0
	add	r5, r2, #0
	cmp	r0, #0
	ble	.L49	@cond_branch
	mov	r1, #0x18
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L50	@cond_branch
	ldrb	r1, [r3, #0xe]
	ldrb	r2, [r3, #0x10]
	b	.L51
.L55:
	.align	2, 0
.L54:
	.word	gPaletteFade
	.word	gTasks
.L50:
	ldrb	r1, [r3, #0x10]
	ldrb	r2, [r3, #0xe]
.L51:
	add	r0, r5, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	cmp	r0, #0x1
	bne	.L52	@cond_branch
	mov	r2, #0x0
.L52:
	add	r0, r4, #0
	bl	BlendColorCycle
	b	.L48
.L49:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L48:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 AnimTask_BlendColorCycleLoop,.Lfe12-AnimTask_BlendColorCycleLoop
	.align	2, 0
	.globl	AnimTask_BlendColorCycleExclude
	.type	 AnimTask_BlendColorCycleExclude,function
	.thumb_func
AnimTask_BlendColorCycleExclude:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r3, .L64
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldr	r2, .L64+0x4
	ldrh	r1, [r2]
	strh	r1, [r0, #0x8]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r2, #0x6]
	strh	r1, [r0, #0xe]
	ldrh	r1, [r2, #0x8]
	strh	r1, [r0, #0x10]
	ldrh	r1, [r2, #0xa]
	strh	r1, [r0, #0x12]
	strh	r5, [r0, #0x18]
	mov	r4, #0x0
	ldr	r0, .L64+0x8
	ldrb	r1, [r0]
	mov	r9, r3
	mov	r8, r2
	cmp	r5, r1
	bge	.L58	@cond_branch
	ldr	r0, .L64+0xc
	ldrb	r3, [r0]
	ldr	r7, .L64+0x10
	mov	r0, #0x1
	mov	ip, r0
	add	r2, r1, #0
.L60:
	cmp	r4, r3
	beq	.L59	@cond_branch
	ldrb	r1, [r7]
	cmp	r4, r1
	beq	.L59	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x10
	mov	r0, ip
	lsl	r0, r0, r1
	orr	r5, r5, r0
.L59:
	add	r4, r4, #0x1
	cmp	r4, r2
	blt	.L60	@cond_branch
.L58:
	mov	r2, r8
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x1
	bne	.L63	@cond_branch
	mov	r0, #0xe
	orr	r5, r5, r0
.L63:
	lsl	r4, r6, #0x2
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	add	r4, r4, r9
	lsr	r0, r5, #0x10
	strh	r0, [r4, #0x1a]
	mov	r0, #0xff
	and	r5, r5, r0
	strh	r5, [r4, #0x1c]
	ldrb	r2, [r4, #0x10]
	add	r0, r6, #0
	mov	r1, #0x0
	bl	BlendColorCycleExclude
	ldr	r0, .L64+0x14
	str	r0, [r4]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L65:
	.align	2, 0
.L64:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattlersCount
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	AnimTask_BlendColorCycleExcludeLoop
.Lfe13:
	.size	 AnimTask_BlendColorCycleExclude,.Lfe13-AnimTask_BlendColorCycleExclude
	.align	2, 0
	.type	 BlendColorCycleExclude,function
	.thumb_func
BlendColorCycleExclude:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r1, #0
	add	r3, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r1, .L67
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldrh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	ldrh	r1, [r4, #0x1c]
	orr	r0, r0, r1
	mov	r1, #0xa
	ldrsb	r1, [r4, r1]
	ldrh	r2, [r4, #0x12]
	str	r2, [sp]
	add	r2, r5, #0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x18]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x18]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gTasks
.Lfe14:
	.size	 BlendColorCycleExclude,.Lfe14-BlendColorCycleExclude
	.align	2, 0
	.type	 AnimTask_BlendColorCycleExcludeLoop,function
	.thumb_func
AnimTask_BlendColorCycleExcludeLoop:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r3, #0
	ldr	r0, .L76
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L70	@cond_branch
	ldr	r1, .L76+0x4
	lsl	r2, r3, #0x2
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0xc
	ldrsh	r0, [r3, r5]
	add	r6, r1, #0
	add	r5, r2, #0
	cmp	r0, #0
	ble	.L71	@cond_branch
	mov	r1, #0x18
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L72	@cond_branch
	ldrb	r1, [r3, #0xe]
	ldrb	r2, [r3, #0x10]
	b	.L73
.L77:
	.align	2, 0
.L76:
	.word	gPaletteFade
	.word	gTasks
.L72:
	ldrb	r1, [r3, #0x10]
	ldrb	r2, [r3, #0xe]
.L73:
	add	r0, r5, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	cmp	r0, #0x1
	bne	.L74	@cond_branch
	mov	r2, #0x0
.L74:
	add	r0, r4, #0
	bl	BlendColorCycleExclude
	b	.L70
.L71:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L70:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 AnimTask_BlendColorCycleExcludeLoop,.Lfe15-AnimTask_BlendColorCycleExcludeLoop
	.align	2, 0
	.globl	AnimTask_BlendColorCycleByTag
	.type	 AnimTask_BlendColorCycleByTag,function
	.thumb_func
AnimTask_BlendColorCycleByTag:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L79
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldr	r3, .L79+0x4
	ldrh	r1, [r3]
	mov	r5, #0x0
	strh	r1, [r4, #0x8]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r4, #0xa]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r4, #0xc]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r4, #0xe]
	ldrh	r2, [r3, #0x8]
	strh	r2, [r4, #0x10]
	ldrh	r1, [r3, #0xa]
	strh	r1, [r4, #0x12]
	strh	r5, [r4, #0x18]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r1, #0x0
	bl	BlendColorCycleByTag
	ldr	r0, .L79+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_BlendColorCycleByTagLoop
.Lfe16:
	.size	 AnimTask_BlendColorCycleByTag,.Lfe16-AnimTask_BlendColorCycleByTag
	.align	2, 0
	.type	 BlendColorCycleByTag,function
	.thumb_func
BlendColorCycleByTag:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r1, .L82
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldrh	r0, [r4, #0x8]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r2, #0x1
	lsl	r2, r2, r0
	mov	r1, #0xa
	ldrsb	r1, [r4, r1]
	ldrh	r0, [r4, #0x12]
	str	r0, [sp]
	add	r0, r2, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x18]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x18]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gTasks
.Lfe17:
	.size	 BlendColorCycleByTag,.Lfe17-BlendColorCycleByTag
	.align	2, 0
	.type	 AnimTask_BlendColorCycleByTagLoop,function
	.thumb_func
AnimTask_BlendColorCycleByTagLoop:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r3, #0
	ldr	r0, .L91
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L85	@cond_branch
	ldr	r1, .L91+0x4
	lsl	r2, r3, #0x2
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0xc
	ldrsh	r0, [r3, r5]
	add	r6, r1, #0
	add	r5, r2, #0
	cmp	r0, #0
	ble	.L86	@cond_branch
	mov	r1, #0x18
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L87	@cond_branch
	ldrb	r1, [r3, #0xe]
	ldrb	r2, [r3, #0x10]
	b	.L88
.L92:
	.align	2, 0
.L91:
	.word	gPaletteFade
	.word	gTasks
.L87:
	ldrb	r1, [r3, #0x10]
	ldrb	r2, [r3, #0xe]
.L88:
	add	r0, r5, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	cmp	r0, #0x1
	bne	.L89	@cond_branch
	mov	r2, #0x0
.L89:
	add	r0, r4, #0
	bl	BlendColorCycleByTag
	b	.L85
.L86:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L85:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 AnimTask_BlendColorCycleByTagLoop,.Lfe18-AnimTask_BlendColorCycleByTagLoop
	.align	2, 0
	.globl	AnimTask_FlashAnimTagWithColor
	.type	 AnimTask_FlashAnimTagWithColor,function
	.thumb_func
AnimTask_FlashAnimTagWithColor:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L94
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldr	r5, .L94+0x4
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x8]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0xa]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0xc]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x10]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x12]
	ldrh	r0, [r5, #0xc]
	strh	r0, [r4, #0x14]
	ldrh	r0, [r5]
	strh	r0, [r4, #0x16]
	ldrh	r0, [r5]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldrb	r3, [r5, #0x8]
	ldrh	r0, [r5, #0x6]
	str	r0, [sp]
	add	r0, r1, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	BeginNormalPaletteFade
	ldr	r0, .L94+0x8
	str	r0, [r4]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_FlashAnimTagWithColor_Step1
.Lfe19:
	.size	 AnimTask_FlashAnimTagWithColor,.Lfe19-AnimTask_FlashAnimTagWithColor
	.align	2, 0
	.type	 AnimTask_FlashAnimTagWithColor_Step1,function
	.thumb_func
AnimTask_FlashAnimTagWithColor_Step1:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L102
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x8]
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L97	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x8]
	b	.L96
.L103:
	.align	2, 0
.L102:
	.word	gTasks
.L97:
	ldr	r0, .L104
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L96	@cond_branch
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L99	@cond_branch
	ldr	r0, .L104+0x4
	str	r0, [r4]
	b	.L96
.L105:
	.align	2, 0
.L104:
	.word	gPaletteFade
	.word	AnimTask_FlashAnimTagWithColor_Step2
.L99:
	ldrh	r0, [r4, #0x16]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r2, #0x1
	lsl	r2, r2, r0
	ldrh	r1, [r4, #0xa]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L100	@cond_branch
	ldrb	r3, [r4, #0x10]
	ldrh	r0, [r4, #0xe]
	str	r0, [sp]
	add	r0, r2, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	BeginNormalPaletteFade
	b	.L101
.L100:
	ldrb	r3, [r4, #0x14]
	ldrh	r0, [r4, #0x12]
	str	r0, [sp]
	add	r0, r2, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	BeginNormalPaletteFade
.L101:
	ldr	r0, .L106
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xa]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r2, r3, #0
	eor	r0, r0, r2
	strh	r0, [r1, #0xa]
	mov	r2, #0xff
	and	r0, r0, r2
	strh	r0, [r1, #0x8]
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
.L96:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	gTasks
.Lfe20:
	.size	 AnimTask_FlashAnimTagWithColor_Step1,.Lfe20-AnimTask_FlashAnimTagWithColor_Step1
	.align	2, 0
	.type	 AnimTask_FlashAnimTagWithColor_Step2,function
	.thumb_func
AnimTask_FlashAnimTagWithColor_Step2:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L110
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L109	@cond_branch
	ldr	r1, .L110+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x16]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r1, #0x1
	lsl	r1, r1, r0
	str	r5, [sp]
	add	r0, r1, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L109:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	gPaletteFade
	.word	gTasks
.Lfe21:
	.size	 AnimTask_FlashAnimTagWithColor_Step2,.Lfe21-AnimTask_FlashAnimTagWithColor_Step2
	.align	2, 0
	.globl	AnimTask_InvertScreenColor
	.type	 AnimTask_InvertScreenColor,function
	.thumb_func
AnimTask_InvertScreenColor:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r2, #0x0
	ldr	r0, .L116
	ldrb	r6, [r0]
	ldr	r0, .L116+0x4
	ldrb	r7, [r0]
	ldr	r4, .L116+0x8
	ldrh	r1, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L113	@cond_branch
	str	r2, [sp]
	str	r2, [sp, #0x4]
	str	r2, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	add	r2, r0, #0
.L113:
	ldrh	r1, [r4, #0x2]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L114	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r6
	orr	r2, r2, r0
.L114:
	ldrh	r1, [r4, #0x4]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L115	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r7
	orr	r2, r2, r0
.L115:
	add	r0, r2, #0
	bl	InvertPlttBuffer
	mov	r0, r8
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L117:
	.align	2, 0
.L116:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.Lfe22:
	.size	 AnimTask_InvertScreenColor,.Lfe22-AnimTask_InvertScreenColor
	.align	2, 0
	.type	 AnimTask_TintPalettes,function
	.thumb_func
AnimTask_TintPalettes:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r1, .L125
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L119	@cond_branch
	ldr	r1, .L125+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0xc]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x10]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0xa]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x12]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x14]
	ldrh	r0, [r1, #0xc]
	strh	r0, [r4, #0x16]
.L119:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldr	r0, .L125+0x8
	ldrb	r0, [r0]
	mov	r9, r0
	ldr	r0, .L125+0xc
	ldrb	r0, [r0]
	mov	sl, r0
	ldrh	r1, [r4, #0xc]
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L120	@cond_branch
	ldr	r5, .L125+0x10
.L120:
	mov	r6, #0x1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L121	@cond_branch
	ldr	r2, .L125+0x14
	ldr	r0, .L125+0x18
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x14
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r6, #0
	lsl	r1, r1, r0
	lsl	r1, r1, #0x10
	orr	r5, r5, r1
.L121:
	ldrh	r1, [r4, #0xe]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L122	@cond_branch
	add	r0, r6, #0
	mov	r2, r9
	lsl	r0, r0, r2
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
.L122:
	ldrh	r1, [r4, #0x10]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L123	@cond_branch
	add	r0, r6, #0
	mov	r1, sl
	lsl	r0, r0, r1
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
.L123:
	mov	r1, #0x12
	ldrsb	r1, [r4, r1]
	mov	r2, #0x14
	ldrsb	r2, [r4, r2]
	mov	r3, #0x16
	ldrsb	r3, [r4, r3]
	add	r0, r5, #0
	bl	TintPlttBuffer
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L124	@cond_branch
	add	r0, r5, #0
	bl	UnfadePlttBuffer
	mov	r0, r8
	bl	DestroyAnimVisualTask
.L124:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	0xffff
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe23:
	.size	 AnimTask_TintPalettes,.Lfe23-AnimTask_TintPalettes
	.align	2, 0
	.type	 AnimShakeMonOrBattleTerrain,function
	.thumb_func
AnimShakeMonOrBattleTerrain:
	push	{r4, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L137
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x34]
	mov	r2, #0x6
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	beq	.L130	@cond_branch
	cmp	r0, #0x1
	bgt	.L134	@cond_branch
	cmp	r0, #0
	beq	.L129	@cond_branch
	b	.L132
.L138:
	.align	2, 0
.L137:
	.word	gBattleAnimArgs
.L134:
	cmp	r0, #0x2
	beq	.L131	@cond_branch
	b	.L132
.L129:
	ldr	r1, .L139
	b	.L136
.L140:
	.align	2, 0
.L139:
	.word	gBattle_BG3_X
.L130:
	ldr	r1, .L141
	b	.L136
.L142:
	.align	2, 0
.L141:
	.word	gBattle_BG3_Y
.L131:
	ldr	r1, .L143
.L136:
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	b	.L128
.L144:
	.align	2, 0
.L143:
	.word	gSpriteCoordOffsetX
.L132:
	ldr	r1, .L145
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
.L128:
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrh	r0, [r1]
	strh	r0, [r4, #0x36]
	ldr	r0, .L145+0x4
	ldrh	r0, [r0, #0x6]
	strh	r0, [r4, #0x38]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L135	@cond_branch
	bl	AnimShakeMonOrBattleTerrain_UpdateCoordOffsetEnabled
.L135:
	ldr	r0, .L145+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L146:
	.align	2, 0
.L145:
	.word	gSpriteCoordOffsetY
	.word	gBattleAnimArgs
	.word	AnimShakeMonOrBattleTerrain_Step
.Lfe24:
	.size	 AnimShakeMonOrBattleTerrain,.Lfe24-AnimShakeMonOrBattleTerrain
	.align	2, 0
	.type	 AnimShakeMonOrBattleTerrain_Step,function
	.thumb_func
AnimShakeMonOrBattleTerrain_Step:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x34]
	mov	r2, #0x34
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L148	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x34]
	ldrh	r1, [r3, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L149	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x30]
	b	.L151
.L149:
	ldrh	r0, [r3, #0x32]
	strh	r0, [r3, #0x30]
	mov	r0, #0x3a
	ldrsh	r1, [r3, r0]
	mov	r2, #0x3c
	ldrsh	r0, [r3, r2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrh	r0, [r3, #0x2e]
	ldrh	r2, [r1]
	add	r0, r0, r2
	strh	r0, [r1]
	ldrh	r0, [r3, #0x2e]
	neg	r0, r0
	strh	r0, [r3, #0x2e]
	b	.L151
.L148:
	mov	r0, #0x3a
	ldrsh	r1, [r3, r0]
	mov	r2, #0x3c
	ldrsh	r0, [r3, r2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrh	r0, [r3, #0x36]
	strh	r0, [r1]
	ldrh	r0, [r3, #0x38]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L152	@cond_branch
	mov	r4, #0x0
	ldr	r5, .L158
	ldrb	r0, [r5]
	cmp	r4, r0
	bcs	.L152	@cond_branch
	ldr	r2, .L158+0x4
	mov	ip, r2
	ldr	r6, .L158+0x8
	mov	r7, #0x3
	neg	r7, r7
.L156:
	add	r0, r4, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5]
	cmp	r4, r0
	bcc	.L156	@cond_branch
.L152:
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L151:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe25:
	.size	 AnimShakeMonOrBattleTerrain_Step,.Lfe25-AnimShakeMonOrBattleTerrain_Step
	.align	2, 0
	.type	 AnimShakeMonOrBattleTerrain_UpdateCoordOffsetEnabled,function
	.thumb_func
AnimShakeMonOrBattleTerrain_UpdateCoordOffsetEnabled:
	push	{r4, r5, r6, lr}
	ldr	r6, .L167
	ldr	r4, .L167+0x4
	ldr	r5, .L167+0x8
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r1, r1, #0x3e
	ldrb	r3, [r1]
	mov	r2, #0x3
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	strb	r0, [r1]
	ldr	r3, .L167+0xc
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	and	r2, r2, r1
	strb	r2, [r0]
	ldr	r0, .L167+0x10
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x2
	bne	.L161	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	b	.L165
.L168:
	.align	2, 0
.L167:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L161:
	cmp	r0, #0
	bne	.L163	@cond_branch
	ldrb	r0, [r5]
	b	.L166
.L163:
	ldrb	r0, [r3]
.L166:
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x2
.L165:
	orr	r1, r1, r2
	strb	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 AnimShakeMonOrBattleTerrain_UpdateCoordOffsetEnabled,.Lfe26-AnimShakeMonOrBattleTerrain_UpdateCoordOffsetEnabled
	.align	2, 0
	.globl	AnimTask_ShakeBattleTerrain
	.type	 AnimTask_ShakeBattleTerrain,function
	.thumb_func
AnimTask_ShakeBattleTerrain:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L170
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	ldr	r3, .L170+0x4
	ldrh	r1, [r3]
	strh	r1, [r2, #0x8]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r2, #0xa]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r2, #0xc]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r2, #0xe]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r2, #0x18]
	ldr	r4, .L170+0x8
	ldrh	r1, [r3]
	strh	r1, [r4]
	ldr	r4, .L170+0xc
	ldrh	r1, [r3, #0x2]
	strh	r1, [r4]
	ldr	r1, .L170+0x10
	str	r1, [r2]
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L171:
	.align	2, 0
.L170:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	AnimTask_ShakeBattleTerrain_Step
.Lfe27:
	.size	 AnimTask_ShakeBattleTerrain,.Lfe27-AnimTask_ShakeBattleTerrain
	.align	2, 0
	.type	 AnimTask_ShakeBattleTerrain_Step,function
	.thumb_func
AnimTask_ShakeBattleTerrain_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L182
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r2, [r3, #0xe]
	mov	r4, #0xe
	ldrsh	r0, [r3, r4]
	mov	ip, r1
	cmp	r0, #0
	bne	.L173	@cond_branch
	ldr	r0, .L182+0x4
	ldrh	r2, [r0]
	mov	r7, #0x8
	ldrsh	r1, [r3, r7]
	add	r6, r0, #0
	cmp	r2, r1
	bne	.L174	@cond_branch
	ldrh	r0, [r3, #0x8]
	neg	r0, r0
	b	.L180
.L183:
	.align	2, 0
.L182:
	.word	gTasks
	.word	gBattle_BG3_X
.L174:
	ldrh	r0, [r3, #0x8]
.L180:
	strh	r0, [r6]
	ldr	r2, .L184
	ldrh	r3, [r2]
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	mov	r7, ip
	add	r4, r0, r7
	mov	r7, #0xa
	ldrsh	r0, [r4, r7]
	cmn	r3, r0
	bne	.L176	@cond_branch
	mov	r0, #0x0
	b	.L181
.L185:
	.align	2, 0
.L184:
	.word	gBattle_BG3_Y
.L176:
	ldrh	r0, [r4, #0xa]
	neg	r0, r0
.L181:
	strh	r0, [r2]
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldrh	r1, [r0, #0x18]
	strh	r1, [r0, #0xe]
	ldrh	r1, [r0, #0xc]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xc]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0
	bne	.L179	@cond_branch
	strh	r1, [r6]
	strh	r1, [r2]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L179
.L173:
	sub	r0, r2, #0x1
	strh	r0, [r3, #0xe]
.L179:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 AnimTask_ShakeBattleTerrain_Step,.Lfe28-AnimTask_ShakeBattleTerrain_Step
	.align	2, 0
	.type	 AnimHitSplatBasic,function
	.thumb_func
AnimHitSplatBasic:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L189
	ldrb	r1, [r4, #0x6]
	bl	StartSpriteAffineAnim
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L187	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L188
.L190:
	.align	2, 0
.L189:
	.word	gBattleAnimArgs
.L187:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L188:
	ldr	r0, .L191
	str	r0, [r5, #0x1c]
	ldr	r1, .L191+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L192:
	.align	2, 0
.L191:
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	DestroyAnimSprite
.Lfe29:
	.size	 AnimHitSplatBasic,.Lfe29-AnimHitSplatBasic
	.align	2, 0
	.type	 AnimHitSplatPersistent,function
	.thumb_func
AnimHitSplatPersistent:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L196
	ldrb	r1, [r4, #0x6]
	bl	StartSpriteAffineAnim
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L194	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L195
.L197:
	.align	2, 0
.L196:
	.word	gBattleAnimArgs
.L194:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L195:
	ldr	r0, .L198
	ldrh	r0, [r0, #0x8]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L198+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L198+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L199:
	.align	2, 0
.L198:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	DestroyAnimSpriteAfterTimer
.Lfe30:
	.size	 AnimHitSplatPersistent,.Lfe30-AnimHitSplatPersistent
	.align	2, 0
	.type	 AnimHitSplatHandleInvert,function
	.thumb_func
AnimHitSplatHandleInvert:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L202
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L201	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L201	@cond_branch
	ldr	r1, .L202+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L201:
	add	r0, r4, #0
	bl	AnimHitSplatBasic
	pop	{r4}
	pop	{r0}
	bx	r0
.L203:
	.align	2, 0
.L202:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe31:
	.size	 AnimHitSplatHandleInvert,.Lfe31-AnimHitSplatHandleInvert
	.align	2, 0
	.type	 AnimHitSplatRandom,function
	.thumb_func
AnimHitSplatRandom:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L208
	mov	r0, #0x2
	ldrsh	r1, [r5, r0]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L205	@cond_branch
	bl	Random
	mov	r1, #0x3
	and	r1, r1, r0
	strh	r1, [r5, #0x2]
.L205:
	ldrb	r1, [r5, #0x2]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L206	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	b	.L207
.L209:
	.align	2, 0
.L208:
	.word	gBattleAnimArgs
.L206:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
.L207:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x30
	bl	__umodsi3
	ldr	r1, .L210
	add	r0, r0, r1
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x18
	bl	__umodsi3
	ldr	r1, .L210+0x4
	add	r0, r0, r1
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldr	r1, .L210+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L210+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L211:
	.align	2, 0
.L210:
	.word	0xffe8
	.word	0xfff4
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe32:
	.size	 AnimHitSplatRandom,.Lfe32-AnimHitSplatRandom
	.align	2, 0
	.type	 AnimHitSplatOnMonEdge,function
	.thumb_func
AnimHitSplatOnMonEdge:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L213
	ldrb	r0, [r5]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x2e]
	ldr	r2, .L213+0x4
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	ldrh	r0, [r0, #0x20]
	add	r1, r1, r0
	strh	r1, [r4, #0x20]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	strh	r1, [r4, #0x22]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x24]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x26]
	ldrb	r1, [r5, #0x6]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	ldr	r1, .L213+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L213+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe33:
	.size	 AnimHitSplatOnMonEdge,.Lfe33-AnimHitSplatOnMonEdge
	.align	2, 0
	.type	 AnimCrossImpact,function
	.thumb_func
AnimCrossImpact:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L218
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L216	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L217
.L219:
	.align	2, 0
.L218:
	.word	gBattleAnimArgs
.L216:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L217:
	ldr	r0, .L220
	ldrh	r0, [r0, #0x6]
	strh	r0, [r4, #0x2e]
	ldr	r1, .L220+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L220+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	WaitAnimForDuration
.Lfe34:
	.size	 AnimCrossImpact,.Lfe34-AnimCrossImpact
	.align	2, 0
	.type	 AnimFlashingHitSplat,function
	.thumb_func
AnimFlashingHitSplat:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L225
	ldrb	r1, [r4, #0x6]
	bl	StartSpriteAffineAnim
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L223	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L224
.L226:
	.align	2, 0
.L225:
	.word	gBattleAnimArgs
.L223:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L224:
	ldr	r0, .L227
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	AnimFlashingHitSplat_Step
.Lfe35:
	.size	 AnimFlashingHitSplat,.Lfe35-AnimFlashingHitSplat
	.align	2, 0
	.type	 AnimFlashingHitSplat_Step,function
	.thumb_func
AnimFlashingHitSplat_Step:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x2e]
	add	r1, r0, #0x1
	strh	r1, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L230	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L230:
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 AnimFlashingHitSplat_Step,.Lfe36-AnimFlashingHitSplat_Step
.text
	.align	2, 0 @ Don't pad with nop

