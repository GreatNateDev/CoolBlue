@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	SoundTask_FireBlast
	.type	 SoundTask_FireBlast,function
	.thumb_func
SoundTask_FireBlast:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L5
	lsl	r6, r0, #0x2
	add	r6, r6, r0
	lsl	r6, r6, #0x3
	add	r6, r6, r1
	ldr	r1, .L5+0x4
	ldrh	r0, [r1]
	strh	r0, [r6, #0x8]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r6, #0xa]
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r5, r0, #0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x2
	bl	CalculatePanIncrement
	strh	r4, [r6, #0xc]
	strh	r5, [r6, #0xe]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r6, #0x10]
	mov	r0, #0xa
	strh	r0, [r6, #0x1c]
	ldr	r0, .L5+0x8
	str	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	SoundTask_FireBlast_Step1
.Lfe1:
	.size	 SoundTask_FireBlast,.Lfe1-SoundTask_FireBlast
	.align	2, 0
	.type	 SoundTask_FireBlast_Step1,function
	.thumb_func
SoundTask_FireBlast_Step1:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L11
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r5, [r4, #0xc]
	ldrb	r6, [r4, #0x10]
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6f
	bne	.L8	@cond_branch
	mov	r0, #0x5
	strh	r0, [r4, #0x1c]
	strh	r1, [r4, #0x1e]
	ldr	r0, .L11+0x4
	str	r0, [r4]
	b	.L9
.L12:
	.align	2, 0
.L11:
	.word	gTasks
	.word	SoundTask_FireBlast_Step2
.L8:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L10	@cond_branch
	strh	r1, [r4, #0x1c]
	ldrh	r0, [r4, #0x8]
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
.L10:
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	KeepPanInRange
	strh	r0, [r4, #0xc]
.L9:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 SoundTask_FireBlast_Step1,.Lfe2-SoundTask_FireBlast_Step1
	.align	2, 0
	.type	 SoundTask_FireBlast_Step2,function
	.thumb_func
SoundTask_FireBlast_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L16
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L14	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	ldrh	r0, [r4, #0xa]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L14	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimSoundTask
.L14:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gTasks
.Lfe3:
	.size	 SoundTask_FireBlast_Step2,.Lfe3-SoundTask_FireBlast_Step2
	.align	2, 0
	.globl	SoundTask_LoopSEAdjustPanning
	.type	 SoundTask_LoopSEAdjustPanning,function
	.thumb_func
SoundTask_LoopSEAdjustPanning:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L19
	ldrh	r1, [r0]
	str	r1, [sp]
	ldrb	r5, [r0, #0x4]
	ldrb	r6, [r0, #0x6]
	ldrb	r3, [r0, #0x8]
	mov	sl, r3
	ldrb	r7, [r0, #0xa]
	ldrb	r1, [r0, #0xc]
	mov	r9, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	BattleAnimAdjustPanning
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	add	r0, r5, #0
	bl	BattleAnimAdjustPanning
	add	r5, r0, #0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CalculatePanIncrement
	ldr	r2, .L19+0x4
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	mov	r6, sp
	ldrh	r6, [r6]
	strh	r6, [r1, #0x8]
	strh	r4, [r1, #0xa]
	strh	r5, [r1, #0xc]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	mov	r0, sl
	strh	r0, [r1, #0x10]
	strh	r7, [r1, #0x12]
	mov	r3, r9
	strh	r3, [r1, #0x14]
	strh	r2, [r1, #0x1c]
	strh	r4, [r1, #0x1e]
	strh	r3, [r1, #0x20]
	ldr	r2, .L19+0x8
	str	r2, [r1]
	mov	r0, r8
	bl	_call_via_r2
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	SoundTask_LoopSEAdjustPanning_Step
.Lfe4:
	.size	 SoundTask_LoopSEAdjustPanning,.Lfe4-SoundTask_LoopSEAdjustPanning
	.align	2, 0
	.type	 SoundTask_LoopSEAdjustPanning_Step,function
	.thumb_func
SoundTask_LoopSEAdjustPanning_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L25
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x20]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L22	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x8]
	mov	r1, #0x1e
	ldrsb	r1, [r4, r1]
	bl	PlaySE12WithPanning
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L22	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimSoundTask
	b	.L21
.L26:
	.align	2, 0
.L25:
	.word	gTasks
.L22:
	ldr	r1, .L27
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L21	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0xe]
	ldrh	r1, [r4, #0x1e]
	add	r0, r0, r1
	strh	r0, [r4, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r4, r2]
	bl	KeepPanInRange
	strh	r0, [r4, #0x1e]
.L21:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	gTasks
.Lfe5:
	.size	 SoundTask_LoopSEAdjustPanning_Step,.Lfe5-SoundTask_LoopSEAdjustPanning_Step
	.align	2, 0
	.globl	SoundTask_PlayCryHighPitch
	.type	 SoundTask_PlayCryHighPitch,function
	.thumb_func
SoundTask_PlayCryHighPitch:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L43
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L30	@cond_branch
	ldr	r0, .L43+0x4
	ldrb	r4, [r0]
	b	.L31
.L44:
	.align	2, 0
.L43:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L30:
	cmp	r0, #0x1
	bne	.L32	@cond_branch
	ldr	r0, .L45
	ldrb	r4, [r0]
	b	.L31
.L46:
	.align	2, 0
.L45:
	.word	gBattleAnimTarget
.L32:
	cmp	r0, #0x2
	bne	.L34	@cond_branch
	ldr	r0, .L47
	b	.L41
.L48:
	.align	2, 0
.L47:
	.word	gBattleAnimAttacker
.L34:
	ldr	r0, .L49
.L41:
	ldrb	r1, [r0]
	mov	r0, #0x2
	add	r4, r0, #0
	eor	r4, r4, r1
.L31:
	ldr	r0, .L49+0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L37	@cond_branch
	cmp	r0, #0x3
	bne	.L36	@cond_branch
.L37:
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L36	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L29
.L50:
	.align	2, 0
.L49:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L36:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L38	@cond_branch
	ldr	r1, .L51
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L51+0x4
	b	.L42
.L52:
	.align	2, 0
.L51:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L38:
	ldr	r1, .L53
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L53+0x4
.L42:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L40	@cond_branch
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	mov	r2, #0x3
	bl	PlayCry_ByMode
.L40:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L29:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe6:
	.size	 SoundTask_PlayCryHighPitch,.Lfe6-SoundTask_PlayCryHighPitch
	.align	2, 0
	.globl	SoundTask_PlayDoubleCry
	.type	 SoundTask_PlayDoubleCry,function
	.thumb_func
SoundTask_PlayDoubleCry:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L72
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L56	@cond_branch
	ldr	r0, .L72+0x4
	ldrb	r4, [r0]
	b	.L57
.L73:
	.align	2, 0
.L72:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L56:
	cmp	r0, #0x1
	bne	.L58	@cond_branch
	ldr	r0, .L74
	ldrb	r4, [r0]
	b	.L57
.L75:
	.align	2, 0
.L74:
	.word	gBattleAnimTarget
.L58:
	cmp	r0, #0x2
	bne	.L60	@cond_branch
	ldr	r0, .L76
	b	.L70
.L77:
	.align	2, 0
.L76:
	.word	gBattleAnimAttacker
.L60:
	ldr	r0, .L78
.L70:
	ldrb	r1, [r0]
	mov	r0, #0x2
	add	r4, r0, #0
	eor	r4, r4, r1
.L57:
	ldr	r0, .L78+0x4
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0x1
	beq	.L63	@cond_branch
	cmp	r0, #0x3
	bne	.L62	@cond_branch
.L63:
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L62	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L55
.L79:
	.align	2, 0
.L78:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L62:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L64	@cond_branch
	ldr	r1, .L80
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L80+0x4
	b	.L71
.L81:
	.align	2, 0
.L80:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L64:
	ldr	r1, .L82
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L82+0x4
.L71:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r1, .L82+0x8
	lsl	r2, r6, #0x2
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r4, .L82+0xc
	ldrh	r1, [r4, #0x2]
	strh	r1, [r0, #0x8]
	strh	r3, [r0, #0xa]
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	strh	r1, [r0, #0xc]
	add	r5, r2, #0
	cmp	r3, #0
	beq	.L66	@cond_branch
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xff
	bne	.L67	@cond_branch
	add	r0, r3, #0
	mov	r2, #0x9
	bl	PlayCry_ByMode
	b	.L68
.L83:
	.align	2, 0
.L82:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gTasks
	.word	gBattleAnimArgs
.L67:
	add	r0, r3, #0
	mov	r2, #0x7
	bl	PlayCry_ByMode
.L68:
	ldr	r0, .L84
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L84+0x4
	str	r0, [r1]
	b	.L55
.L85:
	.align	2, 0
.L84:
	.word	gTasks
	.word	SoundTask_PlayDoubleCry_Step
.L66:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L55:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 SoundTask_PlayDoubleCry,.Lfe7-SoundTask_PlayDoubleCry
	.align	2, 0
	.type	 SoundTask_PlayDoubleCry_Step,function
	.thumb_func
SoundTask_PlayDoubleCry_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r9, r4
	ldr	r1, .L93
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r6, [r1, #0xa]
	mov	r8, r6
	ldrb	r5, [r1, #0xc]
	add	r7, r5, #0
	ldrh	r2, [r1, #0x1a]
	mov	r3, #0x1a
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1
	bgt	.L87	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x1a]
	b	.L88
.L94:
	.align	2, 0
.L93:
	.word	gTasks
.L87:
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xff
	bne	.L89	@cond_branch
	bl	IsCryPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L88	@cond_branch
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	add	r0, r6, #0
	mov	r2, #0xa
	bl	PlayCry_ByMode
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L88
.L89:
	bl	IsCryPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L88	@cond_branch
	lsl	r1, r7, #0x18
	asr	r1, r1, #0x18
	mov	r0, r8
	mov	r2, #0x8
	bl	PlayCry_ByMode
	mov	r0, r9
	bl	DestroyAnimVisualTask
.L88:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 SoundTask_PlayDoubleCry_Step,.Lfe8-SoundTask_PlayDoubleCry_Step
	.align	2, 0
	.globl	SoundTask_WaitForCry
	.type	 SoundTask_WaitForCry,function
	.thumb_func
SoundTask_WaitForCry:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r1, .L99
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0x1a]
	mov	r3, #0x1a
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1
	bgt	.L96	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x1a]
	b	.L97
.L100:
	.align	2, 0
.L99:
	.word	gTasks
.L96:
	bl	IsCryPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L97	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L97:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 SoundTask_WaitForCry,.Lfe9-SoundTask_WaitForCry
	.align	2, 0
	.globl	SoundTask_PlayCryWithEcho
	.type	 SoundTask_PlayCryWithEcho,function
	.thumb_func
SoundTask_PlayCryWithEcho:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	ldr	r2, .L104
	ldr	r1, .L104+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r3, [r1]
	ldr	r2, .L104+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	strh	r3, [r4, #0xa]
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	strh	r1, [r4, #0xc]
	cmp	r3, #0
	beq	.L102	@cond_branch
	add	r0, r3, #0
	mov	r2, #0x4
	bl	PlayCry_ByMode
	ldr	r0, .L104+0xc
	str	r0, [r4]
	b	.L103
.L105:
	.align	2, 0
.L104:
	.word	gAnimBattlerSpecies
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	SoundTask_PlayCryWithEcho_Step
.L102:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L103:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 SoundTask_PlayCryWithEcho,.Lfe10-SoundTask_PlayCryWithEcho
	.align	2, 0
	.type	 SoundTask_PlayCryWithEcho_Step,function
	.thumb_func
SoundTask_PlayCryWithEcho_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L110
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x1a]
	mov	r2, #0x1a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bgt	.L107	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
	b	.L108
.L111:
	.align	2, 0
.L110:
	.word	gTasks
.L107:
	bl	IsCryPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L108	@cond_branch
	ldrh	r0, [r4, #0xa]
	mov	r1, #0xc
	ldrsb	r1, [r4, r1]
	mov	r2, #0x6
	bl	PlayCry_ByMode
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L108:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 SoundTask_PlayCryWithEcho_Step,.Lfe11-SoundTask_PlayCryWithEcho_Step
	.align	2, 0
	.globl	SoundTask_PlaySE1WithPanning
	.type	 SoundTask_PlaySE1WithPanning,function
	.thumb_func
SoundTask_PlaySE1WithPanning:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L113
	ldrh	r5, [r0]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	PlaySE1WithPanning
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gBattleAnimArgs
.Lfe12:
	.size	 SoundTask_PlaySE1WithPanning,.Lfe12-SoundTask_PlaySE1WithPanning
	.align	2, 0
	.globl	SoundTask_PlaySE2WithPanning
	.type	 SoundTask_PlaySE2WithPanning,function
	.thumb_func
SoundTask_PlaySE2WithPanning:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L116
	ldrh	r5, [r0]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	PlaySE2WithPanning
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L117:
	.align	2, 0
.L116:
	.word	gBattleAnimArgs
.Lfe13:
	.size	 SoundTask_PlaySE2WithPanning,.Lfe13-SoundTask_PlaySE2WithPanning
	.align	2, 0
	.globl	SoundTask_AdjustPanningVar
	.type	 SoundTask_AdjustPanningVar,function
	.thumb_func
SoundTask_AdjustPanningVar:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L119
	ldrb	r5, [r0, #0x2]
	ldrb	r6, [r0, #0x4]
	ldrh	r1, [r0, #0x6]
	mov	r9, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	BattleAnimAdjustPanning
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	add	r0, r5, #0
	bl	BattleAnimAdjustPanning
	add	r5, r0, #0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CalculatePanIncrement
	ldr	r2, .L119+0x4
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r4, [r1, #0xa]
	strh	r5, [r1, #0xc]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	mov	r0, r9
	strh	r0, [r1, #0x12]
	strh	r2, [r1, #0x1c]
	strh	r4, [r1, #0x1e]
	ldr	r2, .L119+0x8
	str	r2, [r1]
	mov	r0, r8
	bl	_call_via_r2
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L120:
	.align	2, 0
.L119:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	SoundTask_AdjustPanningVar_Step
.Lfe14:
	.size	 SoundTask_AdjustPanningVar,.Lfe14-SoundTask_AdjustPanningVar
	.align	2, 0
	.type	 SoundTask_AdjustPanningVar_Step,function
	.thumb_func
SoundTask_AdjustPanningVar_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L124
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r2, [r4, #0xe]
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x12
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bne	.L122	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	add	r0, r2, r1
	strh	r0, [r4, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r4, r2]
	bl	KeepPanInRange
	strh	r0, [r4, #0x1e]
.L122:
	ldr	r1, .L124+0x4
	ldrh	r0, [r4, #0x1e]
	strb	r0, [r1]
	mov	r3, #0x1e
	ldrsh	r1, [r4, r3]
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L123	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L123:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	gTasks
	.word	gAnimCustomPanning
.Lfe15:
	.size	 SoundTask_AdjustPanningVar_Step,.Lfe15-SoundTask_AdjustPanningVar_Step
.text
	.align	2, 0 @ Don't pad with nop

