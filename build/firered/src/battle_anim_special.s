@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sCaptureStar,object
sCaptureStar:
	.byte	0xa
	.byte	0x2
	.byte	-0x3
	.space	1
	.byte	0xf
	.byte	0x0
	.byte	-0x4
	.space	1
	.byte	-0xa
	.byte	0x2
	.byte	-0x4
	.space	1
	.size	 sCaptureStar,12
	.globl	gBallParticleSpritesheets
	.align	2, 0
	.type	 gBallParticleSpritesheets,object
gBallParticleSpritesheets:
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6ec
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6ed
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6ee
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6ef
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f0
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f1
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f2
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f3
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f4
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f5
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f6
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f7
	.size	 gBallParticleSpritesheets,96
	.globl	gBallParticlePalettes
	.align	2, 0
	.type	 gBallParticlePalettes,object
gBallParticlePalettes:
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6ec
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6ed
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6ee
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6ef
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f0
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f1
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f2
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f3
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f4
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f5
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f6
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f7
	.space	2
	.size	 gBallParticlePalettes,96
	.align	2, 0
	.type	 sAnim_RegularBall,object
sAnim_RegularBall:
	.short	0x0
	.byte	0x1
	.space	1
	.short	0x1
	.byte	0x1
	.space	1
	.short	0x2
	.byte	0x1
	.space	1
	.short	0x0
	.byte	0x41
	.space	1
	.short	0x2
	.byte	0x1
	.space	1
	.short	0x1
	.byte	0x1
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_RegularBall,28
	.align	2, 0
	.type	 sAnim_MasterBall,object
sAnim_MasterBall:
	.short	0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_MasterBall,8
	.align	2, 0
	.type	 sAnim_NetDiveBall,object
sAnim_NetDiveBall:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_NetDiveBall,8
	.align	2, 0
	.type	 sAnim_NestBall,object
sAnim_NestBall:
	.short	0x5
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_NestBall,8
	.align	2, 0
	.type	 sAnim_LuxuryPremierBall,object
sAnim_LuxuryPremierBall:
	.short	0x6
	.byte	0x4
	.space	1
	.short	0x7
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_LuxuryPremierBall,12
	.align	2, 0
	.type	 sAnim_UltraRepeatTimerBall,object
sAnim_UltraRepeatTimerBall:
	.short	0x7
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_UltraRepeatTimerBall,8
	.align	2, 0
	.type	 sAnims_BallParticles,object
sAnims_BallParticles:
	.word	sAnim_RegularBall
	.word	sAnim_MasterBall
	.word	sAnim_NetDiveBall
	.word	sAnim_NestBall
	.word	sAnim_LuxuryPremierBall
	.word	sAnim_UltraRepeatTimerBall
	.size	 sAnims_BallParticles,24
	.type	 sBallParticleAnimNums,object
sBallParticleAnimNums:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x5
	.byte	0x5
	.byte	0x4
	.byte	0x4
	.size	 sBallParticleAnimNums,12
	.align	2, 0
	.type	 sBallParticleAnimationFuncs,object
sBallParticleAnimationFuncs:
	.word	PokeBallOpenParticleAnimation
	.word	GreatBallOpenParticleAnimation
	.word	SafariBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	MasterBallOpenParticleAnimation
	.word	SafariBallOpenParticleAnimation
	.word	DiveBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	RepeatBallOpenParticleAnimation
	.word	TimerBallOpenParticleAnimation
	.word	GreatBallOpenParticleAnimation
	.word	PremierBallOpenParticleAnimation
	.size	 sBallParticleAnimationFuncs,48
	.align	2, 0
	.type	 sBallParticlesSpriteTemplates,object
sBallParticlesSpriteTemplates:
	.short	0xd6ec
	.short	0xd6ec
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6ed
	.short	0xd6ed
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6ee
	.short	0xd6ee
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6ef
	.short	0xd6ef
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f0
	.short	0xd6f0
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f1
	.short	0xd6f1
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f2
	.short	0xd6f2
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f3
	.short	0xd6f3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f4
	.short	0xd6f4
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f5
	.short	0xd6f5
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f6
	.short	0xd6f6
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f7
	.short	0xd6f7
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.size	 sBallParticlesSpriteTemplates,288
	.align	1, 0
	.type	 sBallOpenFadeColors,object
sBallOpenFadeColors:
	.short	0x7adf
	.short	0x7af0
	.short	0x53d7
	.short	0x3fff
	.short	0x7297
	.short	0x67f5
	.short	0x7b2c
	.short	0x2b7e
	.short	0x431f
	.short	0x7bdd
	.short	0x2a3f
	.short	0x293f
	.short	0x0
	.short	0x201
	.short	0x403
	.short	0x101
	.short	0x100
	.short	0x503
	.short	0x506
	.short	0x4
	.size	 sBallOpenFadeColors,40
	.globl	gSafariBaitSpriteTemplate
	.align	2, 0
	.type	 gSafariBaitSpriteTemplate,object
	.size	 gSafariBaitSpriteTemplate,24
gSafariBaitSpriteTemplate:
	.short	0x281d
	.short	0x281d
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_SafariBaitOrRock_Init
	.align	2, 0
	.type	 sSpriteAnim_SafariRock_0,object
sSpriteAnim_SafariRock_0:
	.short	0x40
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_SafariRock_0,8
	.align	2, 0
	.type	 sSpriteAnimTable_SafariRock,object
sSpriteAnimTable_SafariRock:
	.word	sSpriteAnim_SafariRock_0
	.size	 sSpriteAnimTable_SafariRock,4
	.globl	gSafariRockTemplate
	.align	2, 0
	.type	 gSafariRockTemplate,object
	.size	 gSafariRockTemplate,24
gSafariRockTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sSpriteAnimTable_SafariRock
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_SafariBaitOrRock_Init
.text
	.align	2, 0
	.globl	AnimTask_LevelUpHealthBox
	.type	 AnimTask_LevelUpHealthBox,function
	.thumb_func
AnimTask_LevelUpHealthBox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
	ldr	r0, .L5
	ldrb	r4, [r0]
	ldr	r0, .L5+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L5+0x8
	strh	r1, [r0]
	ldr	r1, .L5+0xc
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L5+0x10
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L5+0x14
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	ldr	r0, .L5+0x18
	add	r4, r4, r0
	ldrb	r0, [r4]
	ldr	r1, .L5+0x1c
	mov	r9, r1
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r9
	ldrb	r7, [r4, #0x6]
	ldrh	r6, [r4, #0x38]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L5+0x20
	bl	CreateInvisibleSpriteWithCallback
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	ldr	r0, .L5+0x20
	bl	CreateInvisibleSpriteWithCallback
	mov	sl, r0
	mov	r2, sl
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	ldrb	r1, [r4, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r1
	mov	r1, #0x4
	mov	r8, r1
	mov	r2, r8
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
	lsl	r5, r7, #0x4
	add	r5, r5, r7
	lsl	r5, r5, #0x2
	add	r5, r5, r9
	ldrb	r1, [r5, #0x5]
	add	r0, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrb	r2, [r1, #0x5]
	add	r0, r3, #0
	and	r0, r0, r2
	mov	r2, r8
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r0, [sp, #0x14]
	lsl	r6, r0, #0x4
	add	r6, r6, r0
	lsl	r6, r6, #0x2
	mov	r1, r9
	add	r7, r6, r1
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, #0x44
	str	r3, [sp, #0x18]
	bl	memcpy
	mov	r2, sl
	lsl	r4, r2, #0x4
	add	r4, r4, sl
	lsl	r4, r4, #0x2
	add	r0, r4, #0
	add	r0, r0, r9
	mov	r8, r0
	add	r1, r5, #0
	mov	r2, #0x44
	bl	memcpy
	ldrb	r1, [r7, #0x1]
	ldr	r3, [sp, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r7, #0x1]
	mov	r2, r8
	ldrb	r0, [r2, #0x1]
	and	r3, r3, r0
	orr	r3, r3, r1
	strb	r3, [r2, #0x1]
	mov	r0, #0x1c
	add	r9, r9, r0
	add	r6, r6, r9
	ldr	r1, .L5+0x20
	str	r1, [r6]
	add	r4, r4, r9
	str	r1, [r4]
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L5+0x24
	bl	AnimLoadCompressedBgTilemap
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L5+0x28
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L5+0x2c
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r1, .L5+0x30
	ldrh	r0, [r7, #0x20]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r1]
	ldr	r1, .L5+0x34
	ldrh	r0, [r7, #0x22]
	neg	r0, r0
	sub	r0, r0, #0x20
	strh	r0, [r1]
	ldr	r1, .L5+0x38
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xa0
	lsl	r1, r1, #0x2
	strh	r1, [r0, #0xa]
	mov	r1, sp
	ldrh	r1, [r1, #0x14]
	strh	r1, [r0, #0x8]
	mov	r2, sl
	strh	r2, [r0, #0xc]
	ldr	r1, .L5+0x3c
	str	r1, [r0]
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	gBattleAnimAttacker
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	gUnusedLevelupAnimationTilemap
	.word	gUnusedLevelupAnimationGfx
	.word	gCureBubblesPal
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	AnimTask_UnusedLevelUpHealthBox_Step
.Lfe1:
	.size	 AnimTask_LevelUpHealthBox,.Lfe1-AnimTask_LevelUpHealthBox
	.align	2, 0
	.type	 AnimTask_UnusedLevelUpHealthBox_Step,function
	.thumb_func
AnimTask_UnusedLevelUpHealthBox_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L22
	ldrb	r0, [r0]
	mov	r8, r0
	ldr	r1, .L22+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r1, [r5, #0xa]
	ldrh	r0, [r5, #0x22]
	add	r1, r1, r0
	mov	r3, #0x0
	strh	r1, [r5, #0x22]
	ldr	r2, .L22+0x8
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x18
	ldrh	r4, [r2]
	add	r0, r0, r4
	strh	r0, [r2]
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x22]
	mov	r1, #0x26
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L12	@cond_branch
	cmp	r0, #0x1
	bgt	.L20	@cond_branch
	cmp	r0, #0
	beq	.L9	@cond_branch
	b	.L8
.L23:
	.align	2, 0
.L22:
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	gBattle_BG1_Y
.L20:
	cmp	r0, #0x2
	beq	.L14	@cond_branch
	b	.L8
.L9:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bgt	.LCB305
	b	.L8	@long jump
.LCB305:
	strh	r3, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x20
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x8
	beq	.LCB324
	b	.L8	@long jump
.LCB324:
	b	.L21
.L12:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	beq	.LCB334
	b	.L8	@long jump
.LCB334:
.L21:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
	b	.L8
.L14:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L8	@cond_branch
	strh	r3, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x20
	ldrsh	r4, [r5, r0]
	cmp	r4, #0
	bne	.L8	@cond_branch
	mov	r0, #0x0
	bl	ResetBattleAnimBg
	ldr	r0, .L24
	strh	r4, [r0]
	ldr	r0, .L24+0x4
	strh	r4, [r0]
	ldr	r4, .L24+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L17	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L17:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r4, #0x8
	ldrsh	r1, [r5, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r6, .L24+0xc
	add	r0, r0, r6
	bl	DestroySprite
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	ldr	r0, .L24+0x10
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r2, [r1, #0x6]
	mov	r8, r2
	ldrh	r4, [r1, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r3, [r1, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	mov	r5, #0x4
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	mov	r0, r8
	lsl	r1, r0, #0x4
	add	r1, r1, r8
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r3, [r1, #0x5]
	add	r0, r2, #0
	and	r0, r0, r3
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0, #0x5]
	and	r2, r2, r1
	orr	r2, r2, r5
	strb	r2, [r0, #0x5]
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L8:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe2:
	.size	 AnimTask_UnusedLevelUpHealthBox_Step,.Lfe2-AnimTask_UnusedLevelUpHealthBox_Step
	.align	2, 0
	.globl	DoLoadHealthboxPalsForLevelUp
	.type	 DoLoadHealthboxPalsForLevelUp,function
	.thumb_func
DoLoadHealthboxPalsForLevelUp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r9, r0
	add	r7, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L27
	add	r2, r2, r0
	ldrb	r0, [r2]
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	ldr	r0, .L27+0x4
	add	r5, r5, r0
	ldrb	r1, [r5, #0x6]
	mov	sl, r1
	ldrh	r4, [r5, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L27+0x8
	bl	AllocSpritePalette
	mov	r2, r9
	strb	r0, [r2]
	ldr	r0, .L27+0xc
	bl	AllocSpritePalette
	strb	r0, [r7]
	ldrb	r0, [r5, #0x5]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r3, r1, #0
	orr	r0, r0, r3
	lsl	r6, r4, #0x4
	add	r6, r6, r4
	lsl	r6, r6, #0x2
	ldr	r2, .L27+0x4
	add	r6, r6, r2
	ldrb	r4, [r6, #0x5]
	lsr	r4, r4, #0x4
	lsl	r4, r4, #0x4
	orr	r4, r4, r3
	lsl	r0, r0, #0x1
	ldr	r1, .L27+0x10
	mov	r8, r1
	add	r0, r0, r8
	mov	r2, r9
	ldrb	r1, [r2]
	lsl	r1, r1, #0x4
	add	r1, r3, r1
	mov	r2, #0x20
	str	r3, [sp]
	bl	LoadPalette
	lsl	r4, r4, #0x1
	add	r4, r4, r8
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	ldr	r3, [sp]
	add	r3, r3, r0
	add	r0, r4, #0
	add	r1, r3, #0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, r9
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	ldrb	r2, [r5, #0x5]
	mov	r3, #0xf
	add	r0, r3, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	mov	r2, sl
	lsl	r1, r2, #0x4
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	ldr	r0, .L27+0x4
	add	r1, r1, r0
	mov	r0, r9
	ldrb	r2, [r0]
	lsl	r2, r2, #0x4
	ldrb	r4, [r1, #0x5]
	add	r0, r3, #0
	and	r0, r0, r4
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	ldrb	r1, [r6, #0x5]
	and	r3, r3, r1
	orr	r3, r3, r0
	strb	r3, [r6, #0x5]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	0xd709
	.word	0xd70a
	.word	gPlttBufferUnfaded
.Lfe3:
	.size	 DoLoadHealthboxPalsForLevelUp,.Lfe3-DoLoadHealthboxPalsForLevelUp
	.align	2, 0
	.globl	AnimTask_LoadHealthboxPalsForLevelUp
	.type	 AnimTask_LoadHealthboxPalsForLevelUp,function
	.thumb_func
AnimTask_LoadHealthboxPalsForLevelUp:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, sp
	add	r1, r1, #0x1
	ldr	r0, .L30
	ldrb	r2, [r0]
	mov	r0, sp
	bl	DoLoadHealthboxPalsForLevelUp
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gBattleAnimAttacker
.Lfe4:
	.size	 AnimTask_LoadHealthboxPalsForLevelUp,.Lfe4-AnimTask_LoadHealthboxPalsForLevelUp
	.align	2, 0
	.globl	DoFreeHealthboxPalsForLevelUp
	.type	 DoFreeHealthboxPalsForLevelUp,function
	.thumb_func
DoFreeHealthboxPalsForLevelUp:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L33
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, .L33+0x4
	mov	r8, r1
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	add	r5, r5, r8
	ldrb	r0, [r5, #0x6]
	mov	r9, r0
	ldrh	r6, [r5, #0x38]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L33+0x8
	bl	FreeSpritePaletteByTag
	ldr	r0, .L33+0xc
	bl	FreeSpritePaletteByTag
	ldr	r0, .L33+0x10
	bl	IndexOfSpritePaletteTag
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L33+0x14
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsl	r4, r4, #0x4
	ldrb	r2, [r5, #0x5]
	mov	r3, #0xf
	add	r1, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r4
	strb	r1, [r5, #0x5]
	mov	r1, r9
	lsl	r2, r1, #0x4
	add	r2, r2, r9
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrb	r5, [r2, #0x5]
	add	r1, r3, #0
	and	r1, r1, r5
	orr	r1, r1, r4
	strb	r1, [r2, #0x5]
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	lsr	r0, r0, #0x14
	ldrb	r2, [r1, #0x5]
	and	r3, r3, r2
	orr	r3, r3, r0
	strb	r3, [r1, #0x5]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	0xd709
	.word	0xd70a
	.word	0xd6ff
	.word	0xd704
.Lfe5:
	.size	 DoFreeHealthboxPalsForLevelUp,.Lfe5-DoFreeHealthboxPalsForLevelUp
	.align	2, 0
	.globl	AnimTask_FreeHealthboxPalsForLevelUp
	.type	 AnimTask_FreeHealthboxPalsForLevelUp,function
	.thumb_func
AnimTask_FreeHealthboxPalsForLevelUp:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L36
	ldrb	r0, [r0]
	bl	DoFreeHealthboxPalsForLevelUp
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	gBattleAnimAttacker
.Lfe6:
	.size	 AnimTask_FreeHealthboxPalsForLevelUp,.Lfe6-AnimTask_FreeHealthboxPalsForLevelUp
	.align	2, 0
	.globl	AnimTask_FlashHealthboxOnLevelUp
	.type	 AnimTask_FlashHealthboxOnLevelUp,function
	.thumb_func
AnimTask_FlashHealthboxOnLevelUp:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L39
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r2, .L39+0x4
	ldrh	r0, [r2]
	strh	r0, [r1, #0x1c]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0x1e]
	ldr	r0, .L39+0x8
	str	r0, [r1]
	bx	lr
.L40:
	.align	2, 0
.L39:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_FlashHealthboxOnLevelUp_Step
.Lfe7:
	.size	 AnimTask_FlashHealthboxOnLevelUp,.Lfe7-AnimTask_FlashHealthboxOnLevelUp
	.align	2, 0
	.type	 AnimTask_FlashHealthboxOnLevelUp_Step,function
	.thumb_func
AnimTask_FlashHealthboxOnLevelUp_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L54
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r6, #0x0
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x1e
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L42	@cond_branch
	strh	r6, [r4, #0x8]
	ldr	r0, .L54+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r3, #0x1c
	ldrsh	r0, [r4, r3]
	mov	r1, #0x2
	cmp	r0, #0
	bne	.L43	@cond_branch
	mov	r1, #0x6
.L43:
	mov	r3, #0xa
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L46	@cond_branch
	cmp	r0, #0x1
	beq	.L49	@cond_branch
	b	.L42
.L55:
	.align	2, 0
.L54:
	.word	gTasks
	.word	0xd709
.L46:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L47	@cond_branch
	mov	r0, #0x10
	strh	r0, [r4, #0xc]
.L47:
	lsl	r0, r2, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	orr	r0, r0, r1
	ldrb	r2, [r4, #0xc]
	ldr	r3, .L56
	mov	r1, #0x1
	bl	BlendPalette
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x10
	bne	.L42	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L42
.L57:
	.align	2, 0
.L56:
	.word	0x7f74
.L49:
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L50	@cond_branch
	strh	r6, [r4, #0xc]
.L50:
	lsl	r0, r2, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	orr	r0, r0, r1
	ldrb	r2, [r4, #0xc]
	ldr	r3, .L58
	mov	r1, #0x1
	bl	BlendPalette
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L42	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L42:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	0x7f74
.Lfe8:
	.size	 AnimTask_FlashHealthboxOnLevelUp_Step,.Lfe8-AnimTask_FlashHealthboxOnLevelUp_Step
	.align	2, 0
	.globl	AnimTask_SwitchOutShrinkMon
	.type	 AnimTask_SwitchOutShrinkMon,function
	.thumb_func
AnimTask_SwitchOutShrinkMon:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L70
	ldr	r0, .L70+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r5, [r0]
	ldr	r1, .L70+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L63	@cond_branch
	cmp	r0, #0x1
	bgt	.L68	@cond_branch
	cmp	r0, #0
	beq	.L62	@cond_branch
	b	.L61
.L71:
	.align	2, 0
.L70:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gTasks
.L68:
	cmp	r0, #0x2
	beq	.L65	@cond_branch
	b	.L61
.L62:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	b	.L69
.L63:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x30
	strh	r0, [r4, #0x1c]
	mov	r0, #0x1c
	ldrsh	r2, [r4, r0]
	add	r0, r5, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	add	r0, r5, #0
	bl	SetBattlerSpriteYOffsetFromYScale
	mov	r0, #0x1c
	ldrsh	r1, [r4, r0]
	ldr	r0, .L72
	cmp	r1, r0
	ble	.L61	@cond_branch
.L69:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L61
.L73:
	.align	2, 0
.L72:
	.word	0x2cf
.L65:
	add	r0, r5, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L74
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L61:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	gSprites
.Lfe9:
	.size	 AnimTask_SwitchOutShrinkMon,.Lfe9-AnimTask_SwitchOutShrinkMon
	.align	2, 0
	.globl	AnimTask_SwitchOutBallEffect
	.type	 AnimTask_SwitchOutBallEffect,function
	.thumb_func
AnimTask_SwitchOutBallEffect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L86
	ldr	r4, .L86+0x4
	ldrb	r0, [r4]
	add	r1, r0, r1
	ldrb	r1, [r1]
	mov	r9, r1
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L77	@cond_branch
	ldr	r1, .L86+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L86+0xc
	b	.L85
.L87:
	.align	2, 0
.L86:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L77:
	ldr	r1, .L88
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L88+0x4
.L85:
	add	r0, r0, r1
	mov	r1, #0x26
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L88+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r6, r0, r2
	mov	r0, #0x8
	ldrsh	r7, [r6, r0]
	cmp	r7, #0
	beq	.L80	@cond_branch
	cmp	r7, #0x1
	beq	.L81	@cond_branch
	b	.L79
.L89:
	.align	2, 0
.L88:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gTasks
.L80:
	ldr	r5, .L90
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	ldr	r2, .L90+0x4
	mov	r3, r9
	lsl	r0, r3, #0x4
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x5]
	lsl	r2, r2, #0x1c
	lsr	r2, r2, #0x1e
	add	r0, r0, #0x43
	ldrb	r3, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	mov	r0, r8
	str	r0, [sp]
	add	r0, r4, #0
	bl	AnimateBallOpenParticles
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x1c]
	str	r7, [sp]
	str	r7, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	add	r2, r0, #0
	ldrb	r1, [r5]
	mov	r0, #0x0
	mov	r3, r8
	bl	LaunchBallFadeMonTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x1e]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L79
.L91:
	.align	2, 0
.L90:
	.word	gBattleAnimAttacker
	.word	gSprites
.L81:
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L79	@cond_branch
	mov	r3, #0x1e
	ldrsh	r0, [r6, r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L79	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L79:
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 AnimTask_SwitchOutBallEffect,.Lfe10-AnimTask_SwitchOutBallEffect
	.align	2, 0
	.globl	AnimTask_LoadBallGfx
	.type	 AnimTask_LoadBallGfx,function
	.thumb_func
AnimTask_LoadBallGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L93
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	LoadBallGfx
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gLastUsedItem
.Lfe11:
	.size	 AnimTask_LoadBallGfx,.Lfe11-AnimTask_LoadBallGfx
	.align	2, 0
	.globl	AnimTask_FreeBallGfx
	.type	 AnimTask_FreeBallGfx,function
	.thumb_func
AnimTask_FreeBallGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L96
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	FreeBallGfx
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	gLastUsedItem
.Lfe12:
	.size	 AnimTask_FreeBallGfx,.Lfe12-AnimTask_FreeBallGfx
	.align	2, 0
	.globl	AnimTask_IsBallBlockedByTrainerOrDodged
	.type	 AnimTask_IsBallBlockedByTrainerOrDodged,function
	.thumb_func
AnimTask_IsBallBlockedByTrainerOrDodged:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L105
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x5
	beq	.L100	@cond_branch
	cmp	r0, #0x6
	beq	.L101	@cond_branch
	ldr	r1, .L105+0x4
	mov	r0, #0x0
	b	.L104
.L106:
	.align	2, 0
.L105:
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimArgs
.L100:
	ldr	r1, .L107
	ldr	r0, .L107+0x4
	b	.L104
.L108:
	.align	2, 0
.L107:
	.word	gBattleAnimArgs
	.word	0xffff
.L101:
	ldr	r1, .L109
	ldr	r0, .L109+0x4
.L104:
	strh	r0, [r1, #0xe]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L110:
	.align	2, 0
.L109:
	.word	gBattleAnimArgs
	.word	0xfffe
.Lfe13:
	.size	 AnimTask_IsBallBlockedByTrainerOrDodged,.Lfe13-AnimTask_IsBallBlockedByTrainerOrDodged
	.align	2, 0
	.globl	ItemIdToBallId
	.type	 ItemIdToBallId,function
	.thumb_func
ItemIdToBallId:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	sub	r0, r0, #0x1
	cmp	r0, #0xb
	bhi	.L125	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L128
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L129:
	.align	2, 0
.L128:
	.word	.L126
	.align	2, 0
	.align	2, 0
.L126:
	.word	.L113
	.word	.L114
	.word	.L115
	.word	.L125
	.word	.L116
	.word	.L117
	.word	.L118
	.word	.L119
	.word	.L120
	.word	.L121
	.word	.L122
	.word	.L123
.L113:
	mov	r0, #0x4
	b	.L127
.L114:
	mov	r0, #0x3
	b	.L127
.L115:
	mov	r0, #0x1
	b	.L127
.L116:
	mov	r0, #0x2
	b	.L127
.L117:
	mov	r0, #0x5
	b	.L127
.L118:
	mov	r0, #0x6
	b	.L127
.L119:
	mov	r0, #0x7
	b	.L127
.L120:
	mov	r0, #0x8
	b	.L127
.L121:
	mov	r0, #0x9
	b	.L127
.L122:
	mov	r0, #0xa
	b	.L127
.L123:
	mov	r0, #0xb
	b	.L127
.L125:
	mov	r0, #0x0
.L127:
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 ItemIdToBallId,.Lfe14-ItemIdToBallId
	.align	2, 0
	.globl	AnimTask_ThrowBall
	.type	 AnimTask_ThrowBall,function
	.thumb_func
AnimTask_ThrowBall:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	mov	sl, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L131
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L131+0x4
	add	r0, r0, r1
	mov	r1, #0x20
	mov	r2, #0x50
	mov	r3, #0x1d
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r1, .L131+0x8
	mov	r9, r1
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r6, r4, r1
	mov	r0, #0x22
	strh	r0, [r6, #0x2e]
	ldr	r2, .L131+0xc
	mov	r8, r2
	ldrb	r0, [r2]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x30]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	strh	r0, [r6, #0x32]
	mov	r0, r9
	add	r0, r0, #0x1c
	add	r4, r4, r0
	ldr	r0, .L131+0x10
	str	r0, [r4]
	ldr	r0, .L131+0x14
	ldr	r0, [r0]
	ldr	r3, [r0, #0x8]
	ldr	r1, .L131+0x18
	mov	r2, r8
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x1
	ldrb	r2, [r3, #0x9]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x9]
	ldr	r1, .L131+0x1c
	mov	r2, sl
	lsl	r0, r2, #0x2
	add	r0, r0, sl
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	ldr	r1, .L131+0x20
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L132:
	.align	2, 0
.L131:
	.word	gLastUsedItem
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	gBattleAnimTarget
	.word	SpriteCB_ThrowBall_Init
	.word	gBattleSpritesDataPtr
	.word	gBattlerSpriteIds
	.word	gTasks
	.word	AnimTask_ThrowBall_WaitAnimObjComplete
.Lfe15:
	.size	 AnimTask_ThrowBall,.Lfe15-AnimTask_ThrowBall
	.align	2, 0
	.type	 AnimTask_ThrowBall_WaitAnimObjComplete,function
	.thumb_func
AnimTask_ThrowBall_WaitAnimObjComplete:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L135
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	ldr	r2, .L135+0x4
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2e]
	ldr	r0, .L135+0x8
	cmp	r1, r0
	bne	.L134	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
.L134:
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	gTasks
	.word	gSprites
	.word	0xffff
.Lfe16:
	.size	 AnimTask_ThrowBall_WaitAnimObjComplete,.Lfe16-AnimTask_ThrowBall_WaitAnimObjComplete
	.align	2, 0
	.globl	AnimTask_ThrowBallSpecial
	.type	 AnimTask_ThrowBallSpecial,function
	.thumb_func
AnimTask_ThrowBallSpecial:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L141
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L138	@cond_branch
	mov	r5, #0x1c
	mov	r6, #0xb
	b	.L139
.L142:
	.align	2, 0
.L141:
	.word	gBattleTypeFlags
.L138:
	mov	r5, #0x17
	mov	r6, #0xb
	ldr	r0, .L143
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x1
	bne	.L139	@cond_branch
	mov	r6, #0xd
.L139:
	ldr	r0, .L143+0x4
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L143+0x8
	add	r0, r0, r1
	mov	r1, #0x20
	orr	r5, r5, r1
	mov	r1, #0x50
	orr	r6, r6, r1
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L143+0xc
	mov	r9, r0
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r6, r4, r0
	mov	r0, #0x22
	strh	r0, [r6, #0x2e]
	ldr	r1, .L143+0x10
	mov	r8, r1
	ldrb	r0, [r1]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x30]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	strh	r0, [r6, #0x32]
	mov	r0, #0x1c
	add	r9, r9, r0
	add	r4, r4, r9
	ldr	r0, .L143+0x14
	str	r0, [r4]
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L143+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldr	r1, .L143+0x1c
	str	r1, [r0]
	ldr	r1, .L143+0x20
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	ldr	r1, .L143+0x24
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L144:
	.align	2, 0
.L143:
	.word	gSaveBlock2Ptr
	.word	gLastUsedItem
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	gBattleAnimTarget
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	SpriteCB_PlayerThrowInit
	.word	gTasks
	.word	AnimTask_ThrowBallSpecial_PlaySfx
.Lfe17:
	.size	 AnimTask_ThrowBallSpecial,.Lfe17-AnimTask_ThrowBallSpecial
	.align	2, 0
	.type	 AnimTask_ThrowBallSpecial_PlaySfx,function
	.thumb_func
AnimTask_ThrowBallSpecial_PlaySfx:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L147
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L147+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L146	@cond_branch
	mov	r0, #0x36
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldr	r0, .L147+0x8
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L147+0xc
	str	r1, [r0]
	ldr	r0, .L147+0x10
	mov	r1, #0xa
	bl	CreateTask
	ldr	r0, .L147+0x14
	str	r0, [r4]
.L146:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gTasks
	.word	SpriteCB_ThrowBall_Init
	.word	AnimTask_ThrowBallSpecial_ResetPlayerSprite
	.word	AnimTask_ThrowBall_WaitAnimObjComplete
.Lfe18:
	.size	 AnimTask_ThrowBallSpecial_PlaySfx,.Lfe18-AnimTask_ThrowBallSpecial_PlaySfx
	.align	2, 0
	.type	 AnimTask_ThrowBallSpecial_ResetPlayerSprite,function
	.thumb_func
AnimTask_ThrowBallSpecial_ResetPlayerSprite:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L151
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r4, .L151+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L150	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x0
	bl	StartSpriteAnim
	add	r0, r5, #0
	bl	DestroyTask
.L150:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe19:
	.size	 AnimTask_ThrowBallSpecial_ResetPlayerSprite,.Lfe19-AnimTask_ThrowBallSpecial_ResetPlayerSprite
	.align	2, 0
	.type	 SpriteCB_ThrowBall_Init,function
	.thumb_func
SpriteCB_ThrowBall_Init:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r4, #0x32]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r1, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	strh	r2, [r4, #0x36]
	ldr	r0, .L154
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L154+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L155:
	.align	2, 0
.L154:
	.word	0xffd8
	.word	SpriteCB_ThrowBall_ArcFlight
.Lfe20:
	.size	 SpriteCB_ThrowBall_Init,.Lfe20-SpriteCB_ThrowBall_Init
	.align	2, 0
	.type	 SpriteCB_ThrowBall_ArcFlight,function
	.thumb_func
SpriteCB_ThrowBall_ArcFlight:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L157	@cond_branch
	ldr	r0, .L171
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x5
	bne	.L158	@cond_branch
	ldr	r0, .L171+0x4
	str	r0, [r4, #0x1c]
	b	.L157
.L172:
	.align	2, 0
.L171:
	.word	gBattleSpritesDataPtr
	.word	TrainerBallBlock
.L158:
	cmp	r0, #0x6
	bne	.L160	@cond_branch
	ldr	r0, .L173
	str	r0, [r4, #0x1c]
	b	.L157
.L174:
	.align	2, 0
.L173:
	.word	GhostBallDodge
.L160:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x24]
	strh	r1, [r4, #0x26]
	add	r1, r4, #0
	add	r1, r1, #0x2e
	mov	r2, #0x0
	add	r0, r4, #0
	add	r0, r0, #0x3c
.L165:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L165	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldr	r0, .L175
	str	r0, [r4, #0x1c]
	ldr	r0, .L175+0x4
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xb
	bgt	.L157	@cond_branch
	cmp	r5, #0
	blt	.L157	@cond_branch
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r5, [sp]
	mov	r2, #0x1
	mov	r3, #0x1c
	bl	AnimateBallOpenParticles
	ldr	r0, .L175+0x8
	ldrb	r1, [r0]
	mov	r0, #0x0
	mov	r2, #0xe
	add	r3, r5, #0
	bl	LaunchBallFadeMonTask
.L157:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L176:
	.align	2, 0
.L175:
	.word	SpriteCB_ThrowBall_TenFrameDelay
	.word	gLastUsedItem
	.word	gBattleAnimTarget
.Lfe21:
	.size	 SpriteCB_ThrowBall_ArcFlight,.Lfe21-SpriteCB_ThrowBall_ArcFlight
	.align	2, 0
	.type	 SpriteCB_ThrowBall_TenFrameDelay,function
	.thumb_func
SpriteCB_ThrowBall_TenFrameDelay:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L178	@cond_branch
	ldr	r0, .L179
	mov	r1, #0x32
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x38]
	ldr	r0, .L179+0x4
	str	r0, [r4, #0x1c]
	ldr	r2, .L179+0x8
	ldr	r1, .L179+0xc
	ldr	r0, .L179+0x10
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
.L178:
	pop	{r4}
	pop	{r0}
	bx	r0
.L180:
	.align	2, 0
.L179:
	.word	TaskDummy
	.word	SpriteCB_ThrowBall_ShrinkMon
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
.Lfe22:
	.size	 SpriteCB_ThrowBall_TenFrameDelay,.Lfe22-SpriteCB_ThrowBall_TenFrameDelay
	.align	2, 0
	.type	 SpriteCB_ThrowBall_ShrinkMon,function
	.thumb_func
SpriteCB_ThrowBall_ShrinkMon:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldr	r1, .L193
	ldr	r0, .L193+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r4, [r0]
	ldrh	r0, [r7, #0x38]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L193+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L182	@cond_branch
	mov	r0, #0x35
	bl	PlaySE
.L182:
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L185	@cond_branch
	cmp	r0, #0x1
	bgt	.L191	@cond_branch
	cmp	r0, #0
	beq	.L184	@cond_branch
	b	.L188
.L194:
	.align	2, 0
.L193:
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gTasks
.L191:
	cmp	r0, #0x2
	beq	.L187	@cond_branch
	b	.L188
.L184:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	ldr	r1, .L195
	mov	r0, #0x1c
	str	r0, [r1]
	ldr	r2, .L195+0x4
	ldr	r1, .L195+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	ldrh	r0, [r7, #0x26]
	ldrh	r7, [r7, #0x22]
	add	r0, r0, r7
	sub	r1, r1, r0
	strh	r1, [r2]
	ldr	r4, .L195+0xc
	ldrh	r0, [r2]
	lsl	r0, r0, #0x8
	mov	r1, #0x1c
	bl	__udivsi3
	strh	r0, [r4]
	strh	r0, [r5, #0xc]
	b	.L192
.L196:
	.align	2, 0
.L195:
	.word	gMonShrinkDuration
	.word	gMonShrinkDistance
	.word	gSprites
	.word	gMonShrinkDelta
.L185:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x20
	strh	r0, [r5, #0x1c]
	mov	r0, #0x1c
	ldrsh	r2, [r5, r0]
	add	r0, r4, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0xc]
	ldrh	r1, [r5, #0xe]
	add	r0, r0, r1
	strh	r0, [r5, #0xe]
	ldr	r0, .L197
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r2, #0xe
	ldrsh	r0, [r5, r2]
	neg	r0, r0
	asr	r0, r0, #0x8
	strh	r0, [r1, #0x26]
	mov	r0, #0x1c
	ldrsh	r1, [r5, r0]
	ldr	r0, .L197+0x4
	cmp	r1, r0
	ble	.L183	@cond_branch
	b	.L192
.L198:
	.align	2, 0
.L197:
	.word	gSprites
	.word	0x47f
.L187:
	add	r0, r4, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L199
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L192:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L183
.L200:
	.align	2, 0
.L199:
	.word	gSprites
.L188:
	ldr	r0, .L201
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xa
	ble	.L183	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
	add	r0, r7, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	mov	r0, #0x0
	strh	r0, [r7, #0x38]
	ldr	r0, .L201+0x4
	str	r0, [r7, #0x1c]
.L183:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L202:
	.align	2, 0
.L201:
	.word	gTasks
	.word	SpriteCB_ThrowBall_InitialFall
.Lfe23:
	.size	 SpriteCB_ThrowBall_ShrinkMon,.Lfe23-SpriteCB_ThrowBall_ShrinkMon
	.align	2, 0
	.type	 SpriteCB_ThrowBall_InitialFall,function
	.thumb_func
SpriteCB_ThrowBall_InitialFall:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L204	@cond_branch
	mov	r1, #0x0
	strh	r1, [r4, #0x34]
	mov	r0, #0x28
	strh	r0, [r4, #0x36]
	strh	r1, [r4, #0x38]
	mov	r0, #0x0
	mov	r1, #0x28
	bl	Cos
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x36
	ldrsh	r1, [r4, r0]
	mov	r0, #0x0
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldr	r0, .L205
	str	r0, [r4, #0x1c]
.L204:
	pop	{r4}
	pop	{r0}
	bx	r0
.L206:
	.align	2, 0
.L205:
	.word	SpriteCB_ThrowBall_Bounce
.Lfe24:
	.size	 SpriteCB_ThrowBall_InitialFall,.Lfe24-SpriteCB_ThrowBall_InitialFall
	.align	2, 0
	.type	 SpriteCB_ThrowBall_Bounce,function
	.thumb_func
SpriteCB_ThrowBall_Bounce:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L209	@cond_branch
	cmp	r1, #0x1
	beq	.L219	@cond_branch
	b	.L208
.L209:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	add	r1, r1, #0x4
	ldrh	r2, [r4, #0x34]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	add	r1, r1, r0
	strh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x3f
	ble	.L208	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0xa
	strh	r0, [r4, #0x36]
	ldr	r1, .L226
	add	r0, r2, r1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L211	@cond_branch
	mov	r5, #0x1
.L211:
	cmp	r0, #0x2
	beq	.L214	@cond_branch
	cmp	r0, #0x2
	bgt	.L218	@cond_branch
	cmp	r0, #0x1
	beq	.L213	@cond_branch
	b	.L216
.L227:
	.align	2, 0
.L226:
	.word	0x101
.L218:
	cmp	r0, #0x3
	beq	.L215	@cond_branch
	b	.L216
.L213:
	mov	r0, #0x31
	bl	PlaySE
	b	.L208
.L214:
	mov	r0, #0x32
	bl	PlaySE
	b	.L208
.L215:
	mov	r0, #0x33
	bl	PlaySE
	b	.L208
.L216:
	mov	r0, #0x34
	bl	PlaySE
	b	.L208
.L219:
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	sub	r1, r1, #0x4
	ldrh	r2, [r4, #0x34]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	sub	r1, r1, r0
	strh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bgt	.L208	@cond_branch
	strh	r5, [r4, #0x38]
	ldr	r0, .L228
	and	r0, r0, r2
	strh	r0, [r4, #0x34]
.L208:
	cmp	r5, #0
	beq	.L223	@cond_branch
	mov	r5, #0x0
	strh	r5, [r4, #0x34]
	mov	r0, #0x40
	mov	r1, #0x28
	bl	Cos
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x26]
	ldr	r0, .L228+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L224	@cond_branch
	strh	r5, [r4, #0x38]
	ldr	r0, .L228+0x8
	str	r0, [r4, #0x1c]
	b	.L223
.L229:
	.align	2, 0
.L228:
	.word	-0x100
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_ThrowBall_DelayThenBreakOut
.L224:
	ldr	r0, .L230
	str	r0, [r4, #0x1c]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	strh	r5, [r4, #0x38]
.L223:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L231:
	.align	2, 0
.L230:
	.word	SpriteCB_ThrowBall_InitShake
.Lfe25:
	.size	 SpriteCB_ThrowBall_Bounce,.Lfe25-SpriteCB_ThrowBall_Bounce
	.align	2, 0
	.type	 SpriteCB_ThrowBall_InitShake,function
	.thumb_func
SpriteCB_ThrowBall_InitShake:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L233	@cond_branch
	strh	r5, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r0, .L234
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	strh	r5, [r0, #0xc]
	ldr	r0, .L234+0x4
	str	r0, [r4, #0x1c]
	mov	r0, #0x17
	bl	PlaySE
.L233:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L235:
	.align	2, 0
.L234:
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_ThrowBall_DoShake
.Lfe26:
	.size	 SpriteCB_ThrowBall_InitShake,.Lfe26-SpriteCB_ThrowBall_InitShake
	.align	2, 0
	.type	 SpriteCB_ThrowBall_DoShake,function
	.thumb_func
SpriteCB_ThrowBall_DoShake:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r1, #0x6
	bls	.LCB2649
	b	.L265	@long jump
.LCB2649:
	lsl	r0, r1, #0x2
	ldr	r1, .L273
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L274:
	.align	2, 0
.L273:
	.word	.L269
	.align	2, 0
	.align	2, 0
.L269:
	.word	.L238
	.word	.L242
	.word	.L247
	.word	.L251
	.word	.L255
	.word	.L259
	.word	.L265
.L238:
	ldr	r1, .L275
	ldr	r5, [r1]
	ldr	r2, [r5, #0x8]
	ldrh	r3, [r2, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r2, r6]
	add	r6, r1, #0
	cmp	r0, #0xff
	ble	.L239	@cond_branch
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldr	r1, [r5, #0x8]
	ldrb	r0, [r1, #0xc]
	strh	r0, [r1, #0xc]
	b	.L240
.L276:
	.align	2, 0
.L275:
	.word	gBattleSpritesDataPtr
.L239:
	add	r0, r3, #0
	add	r0, r0, #0xb0
	strh	r0, [r2, #0xc]
.L240:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xe
	bhi	.LCB2717
	b	.L237	@long jump
.LCB2717:
	b	.L270
.L242:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L271	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r6, #0x36
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bge	.L244	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	ChangeSpriteAffineAnim
	b	.L237
.L244:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	b	.L237
.L247:
	ldr	r1, .L277
	ldr	r5, [r1]
	ldr	r2, [r5, #0x8]
	ldrh	r3, [r2, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r2, r6]
	add	r6, r1, #0
	cmp	r0, #0xff
	ble	.L248	@cond_branch
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldr	r1, [r5, #0x8]
	ldrb	r0, [r1, #0xc]
	strh	r0, [r1, #0xc]
	b	.L249
.L278:
	.align	2, 0
.L277:
	.word	gBattleSpritesDataPtr
.L248:
	add	r0, r3, #0
	add	r0, r0, #0xb0
	strh	r0, [r2, #0xc]
.L249:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0xc
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x18
	bhi	.LCB2813
	b	.L237	@long jump
.LCB2813:
.L270:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	strh	r3, [r0, #0xc]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	strh	r3, [r4, #0x38]
	b	.L237
.L251:
	ldrh	r0, [r4, #0x38]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x38]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L252	@cond_branch
.L271:
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L237
.L252:
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r6, #0x36
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bge	.L253	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	ChangeSpriteAffineAnim
	b	.L255
.L253:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
.L255:
	ldr	r1, .L279
	ldr	r5, [r1]
	ldr	r2, [r5, #0x8]
	ldrh	r3, [r2, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r2, r6]
	add	r6, r1, #0
	cmp	r0, #0xff
	ble	.L256	@cond_branch
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldr	r1, [r5, #0x8]
	ldrb	r0, [r1, #0xc]
	strh	r0, [r1, #0xc]
	b	.L257
.L280:
	.align	2, 0
.L279:
	.word	gBattleSpritesDataPtr
.L256:
	add	r0, r3, #0
	add	r0, r0, #0xb0
	strh	r0, [r2, #0xc]
.L257:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x8
	bls	.L237	@cond_branch
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	strh	r3, [r0, #0xc]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	strh	r3, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	b	.L237
.L259:
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x18
	ldr	r0, .L281
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x8]
	cmp	r1, r0
	bne	.L260	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L281+0x4
	str	r0, [r4, #0x1c]
	b	.L237
.L282:
	.align	2, 0
.L281:
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_ThrowBall_DelayThenBreakOut
.L260:
	cmp	r0, #0x4
	bne	.L262	@cond_branch
	cmp	r1, #0x3
	bne	.L262	@cond_branch
	ldr	r0, .L283
	str	r0, [r4, #0x1c]
	b	.L272
.L284:
	.align	2, 0
.L283:
	.word	SpriteCB_ThrowBall_InitClick
.L262:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
.L272:
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L237
.L265:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L237	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r1, [r4, #0x34]
	ldr	r0, .L285
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x3
	bl	StartSpriteAffineAnim
	mov	r6, #0x36
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bge	.L267	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	b	.L268
.L286:
	.align	2, 0
.L285:
	.word	-0x100
.L267:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L268:
	mov	r0, #0x17
	bl	PlaySE
.L237:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 SpriteCB_ThrowBall_DoShake,.Lfe27-SpriteCB_ThrowBall_DoShake
	.align	2, 0
	.type	 SpriteCB_ThrowBall_DelayThenBreakOut,function
	.thumb_func
SpriteCB_ThrowBall_DelayThenBreakOut:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L288	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x38]
	ldr	r0, .L289
	str	r0, [r1, #0x1c]
.L288:
	pop	{r0}
	bx	r0
.L290:
	.align	2, 0
.L289:
	.word	SpriteCB_ThrowBall_BeginBreakOut
.Lfe28:
	.size	 SpriteCB_ThrowBall_DelayThenBreakOut,.Lfe28-SpriteCB_ThrowBall_DelayThenBreakOut
	.align	2, 0
	.type	 SpriteCB_ThrowBall_InitClick,function
	.thumb_func
SpriteCB_ThrowBall_InitClick:
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r1, [r3]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r3]
	ldr	r1, .L292
	str	r1, [r0, #0x1c]
	mov	r1, #0x0
	strh	r1, [r0, #0x34]
	strh	r1, [r0, #0x36]
	strh	r1, [r0, #0x38]
	bx	lr
.L293:
	.align	2, 0
.L292:
	.word	SpriteCB_ThrowBall_DoClick
.Lfe29:
	.size	 SpriteCB_ThrowBall_InitClick,.Lfe29-SpriteCB_ThrowBall_InitClick
	.align	2, 0
	.type	 SpriteCB_ThrowBall_DoClick,function
	.thumb_func
SpriteCB_ThrowBall_DoClick:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r7, .L302
	ldrh	r0, [r6, #0x36]
	add	r0, r0, #0x1
	mov	r1, #0x0
	mov	r8, r1
	strh	r0, [r6, #0x36]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0x28
	bne	.L295	@cond_branch
	mov	r0, #0xf7
	bl	PlaySE
	ldrb	r1, [r6, #0x5]
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r1
	mov	r1, #0x6
	mov	r2, #0x0
	bl	BlendPalettes
	add	r0, r6, #0
	bl	CreateStarsWhenBallClicks
	b	.L296
.L303:
	.align	2, 0
.L302:
	.word	gBattleAnimTarget
.L295:
	cmp	r1, #0x3c
	bne	.L297	@cond_branch
	ldrb	r1, [r6, #0x5]
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r1
	mov	r1, r8
	str	r1, [sp]
	mov	r1, #0x2
	mov	r2, #0x6
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L296
.L297:
	cmp	r1, #0x5f
	bne	.L299	@cond_branch
	ldr	r0, .L304
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r0, #0x1
	bl	UpdateOamPriorityInAllHealthboxes
	bl	m4aMPlayAllStop
	ldr	r0, .L304+0x4
	bl	PlaySE
	b	.L296
.L305:
	.align	2, 0
.L304:
	.word	gDoingBattleAnim
	.word	0x13f
.L299:
	ldr	r0, .L306
	cmp	r1, r0
	bne	.L296	@cond_branch
	ldr	r5, .L306+0x4
	ldr	r4, .L306+0x8
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	mov	r0, r8
	strh	r0, [r6, #0x2e]
	ldr	r0, .L306+0xc
	str	r0, [r6, #0x1c]
.L296:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L307:
	.align	2, 0
.L306:
	.word	0x13b
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_ThrowBall_FinishClick
.Lfe30:
	.size	 SpriteCB_ThrowBall_DoClick,.Lfe30-SpriteCB_ThrowBall_DoClick
	.align	2, 0
	.type	 SpriteCB_ThrowBall_FinishClick,function
	.thumb_func
SpriteCB_ThrowBall_FinishClick:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L311	@cond_branch
	cmp	r0, #0x1
	bgt	.L318	@cond_branch
	cmp	r0, #0
	beq	.L310	@cond_branch
	b	.L315
.L318:
	cmp	r0, #0x2
	beq	.L314	@cond_branch
	b	.L315
.L310:
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, [r4, #0x14]
	ldrh	r0, [r0, #0x2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldr	r0, .L320
	str	r0, [sp]
	add	r0, r1, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L319
.L321:
	.align	2, 0
.L320:
	.word	0x7fff
.L311:
	ldrh	r0, [r4, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L309	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x32]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x32]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L309	@cond_branch
	b	.L319
.L314:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L319:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L309
.L315:
	ldr	r0, .L322
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L309	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	strh	r5, [r4, #0x2e]
	ldr	r0, .L322+0x4
	str	r0, [r4, #0x1c]
.L309:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	gPaletteFade
	.word	BattleAnimObj_SignalEnd
.Lfe31:
	.size	 SpriteCB_ThrowBall_FinishClick,.Lfe31-SpriteCB_ThrowBall_FinishClick
	.align	2, 0
	.type	 BattleAnimObj_SignalEnd,function
	.thumb_func
BattleAnimObj_SignalEnd:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L325	@cond_branch
	ldr	r0, .L327
	strh	r0, [r4, #0x2e]
	b	.L326
.L328:
	.align	2, 0
.L327:
	.word	0xffff
.L325:
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L326:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 BattleAnimObj_SignalEnd,.Lfe32-BattleAnimObj_SignalEnd
	.align	2, 0
	.type	 CreateStarsWhenBallClicks,function
	.thumb_func
CreateStarsWhenBallClicks:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	add	r1, r6, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L330	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	b	.L331
.L330:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x1
	strb	r0, [r1]
.L331:
	mov	r0, #0x4
	bl	LoadBallParticleGfx
	mov	r7, #0x0
	ldr	r2, .L338
	mov	r9, r2
	mov	r0, #0x1c
	add	r0, r0, r9
	mov	sl, r0
.L335:
	mov	r2, #0x20
	ldrsh	r1, [r6, r2]
	mov	r0, #0x22
	ldrsh	r2, [r6, r0]
	ldr	r0, .L338+0x4
	mov	r3, r8
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L334	@cond_branch
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	mov	r2, r9
	add	r5, r4, r2
	mov	r0, #0x18
	strh	r0, [r5, #0x2e]
	ldr	r0, .L338+0x8
	lsl	r1, r7, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	ldrh	r2, [r6, #0x20]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	mov	r0, #0x1
	ldrsb	r0, [r1, r0]
	ldrh	r2, [r6, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x36]
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	strh	r0, [r5, #0x38]
	add	r0, r5, #0
	bl	InitAnimArcTranslation
	add	r4, r4, sl
	ldr	r0, .L338+0xc
	str	r0, [r4]
	ldr	r0, .L338+0x10
	ldrb	r1, [r0, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAnim
.L334:
	add	r7, r7, #0x1
	cmp	r7, #0x2
	bls	.L335	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L339:
	.align	2, 0
.L338:
	.word	gSprites
	.word	sBallParticlesSpriteTemplates+0x60
	.word	sCaptureStar
	.word	SpriteCB_BallCaptureSuccessStar
	.word	sBallParticleAnimNums
.Lfe33:
	.size	 CreateStarsWhenBallClicks,.Lfe33-CreateStarsWhenBallClicks
	.align	2, 0
	.type	 SpriteCB_BallCaptureSuccessStar,function
	.thumb_func
SpriteCB_BallCaptureSuccessStar:
	push	{r4, lr}
	add	r4, r0, #0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L341	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
.L341:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 SpriteCB_BallCaptureSuccessStar,.Lfe34-SpriteCB_BallCaptureSuccessStar
	.align	2, 0
	.type	 SpriteCB_ThrowBall_BeginBreakOut,function
	.thumb_func
SpriteCB_ThrowBall_BeginBreakOut:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	ldr	r0, .L347
	str	r0, [r4, #0x1c]
	ldr	r0, .L347+0x4
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xb
	bgt	.L343	@cond_branch
	cmp	r5, #0
	blt	.L343	@cond_branch
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r5, [sp]
	mov	r2, #0x1
	mov	r3, #0x1c
	bl	AnimateBallOpenParticles
	ldr	r0, .L347+0x8
	ldrb	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0xe
	add	r3, r5, #0
	bl	LaunchBallFadeMonTask
.L343:
	ldr	r6, .L347+0xc
	ldr	r5, .L347+0x10
	ldr	r4, .L347+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	AnimateSprite
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	strh	r1, [r0, #0x30]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L348:
	.align	2, 0
.L347:
	.word	SpriteCB_ThrowBall_RunBreakOut
	.word	gLastUsedItem
	.word	gBattleAnimTarget
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe35:
	.size	 SpriteCB_ThrowBall_BeginBreakOut,.Lfe35-SpriteCB_ThrowBall_BeginBreakOut
	.align	2, 0
	.type	 SpriteCB_ThrowBall_RunBreakOut,function
	.thumb_func
SpriteCB_ThrowBall_RunBreakOut:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	mov	r5, #0x0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L350	@cond_branch
	add	r2, r7, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L350:
	ldr	r4, .L354
	ldr	r3, .L354+0x4
	ldr	r2, .L354+0x8
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r4
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L351	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	mov	r5, #0x1
	b	.L352
.L355:
	.align	2, 0
.L354:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
.L351:
	ldr	r6, .L356
	add	r0, r6, #0
	ldrh	r6, [r1, #0x30]
	add	r0, r0, r6
	strh	r0, [r1, #0x30]
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x26]
.L352:
	add	r0, r7, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L353	@cond_branch
	cmp	r5, #0
	beq	.L353	@cond_branch
	ldr	r4, .L356+0x4
	ldr	r3, .L356+0x8
	ldr	r2, .L356+0xc
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r6, #0x0
	mov	r5, #0x0
	strh	r5, [r0, #0x26]
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r0, .L356+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	lsl	r1, r1, #0x1e
	add	r2, r2, #0x3e
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	strh	r5, [r7, #0x2e]
	ldr	r0, .L356+0x14
	str	r0, [r7, #0x1c]
	ldr	r0, .L356+0x18
	strb	r6, [r0]
	mov	r0, #0x1
	bl	UpdateOamPriorityInAllHealthboxes
.L353:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L357:
	.align	2, 0
.L356:
	.word	-0x120
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gBattleSpritesDataPtr
	.word	BattleAnimObj_SignalEnd
	.word	gDoingBattleAnim
.Lfe36:
	.size	 SpriteCB_ThrowBall_RunBreakOut,.Lfe36-SpriteCB_ThrowBall_RunBreakOut
	.align	2, 0
	.type	 TrainerBallBlock,function
	.thumb_func
TrainerBallBlock:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r2, #0x20]
	ldrh	r0, [r2, #0x26]
	ldrh	r3, [r2, #0x22]
	add	r0, r0, r3
	strh	r0, [r2, #0x22]
	strh	r1, [r2, #0x26]
	strh	r1, [r2, #0x24]
	ldr	r4, .L364
	mov	r3, #0x0
	mov	r1, #0x5
	add	r0, r2, #0
	add	r0, r0, #0x38
.L362:
	strh	r3, [r0]
	sub	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L362	@cond_branch
	str	r4, [r2, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L365:
	.align	2, 0
.L364:
	.word	TrainerBallBlock2
.Lfe37:
	.size	 TrainerBallBlock,.Lfe37-TrainerBallBlock
	.align	2, 0
	.type	 TrainerBallBlock2,function
	.thumb_func
TrainerBallBlock2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	add	r2, r0, #0
	ldrh	r1, [r4, #0x2e]
	add	r2, r2, r1
	mov	r0, #0xd0
	lsl	r0, r0, #0x3
	add	r3, r0, #0
	ldrh	r1, [r4, #0x30]
	add	r3, r3, r1
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r4, #0x2e]
	and	r3, r3, r0
	strh	r3, [r4, #0x30]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	cmp	r0, #0xa0
	bgt	.L368	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x8
	neg	r1, r1
	cmp	r0, r1
	bge	.L367	@cond_branch
.L368:
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L369
	str	r0, [r4, #0x1c]
	ldr	r1, .L369+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x1
	bl	UpdateOamPriorityInAllHealthboxes
.L367:
	pop	{r4}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	BattleAnimObj_SignalEnd
	.word	gDoingBattleAnim
.Lfe38:
	.size	 TrainerBallBlock2,.Lfe38-TrainerBallBlock2
	.align	2, 0
	.type	 GhostBallDodge,function
	.thumb_func
GhostBallDodge:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x26]
	strh	r0, [r4, #0x24]
	mov	r0, #0x22
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	sub	r1, r1, #0x8
	strh	r1, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r0, #0x90
	strh	r0, [r4, #0x36]
	mov	r0, #0x20
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	add	r0, r4, #0
	bl	TranslateAnimVerticalArc
	ldr	r0, .L372
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L373:
	.align	2, 0
.L372:
	.word	GhostBallDodge2
.Lfe39:
	.size	 GhostBallDodge,.Lfe39-GhostBallDodge
	.align	2, 0
	.type	 GhostBallDodge2,function
	.thumb_func
GhostBallDodge2:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimVerticalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L375	@cond_branch
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	cmp	r0, #0x40
	ble	.L374	@cond_branch
.L375:
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L377
	str	r0, [r4, #0x1c]
	ldr	r0, .L377+0x4
	strb	r1, [r0]
	mov	r0, #0x1
	bl	UpdateOamPriorityInAllHealthboxes
.L374:
	pop	{r4}
	pop	{r0}
	bx	r0
.L378:
	.align	2, 0
.L377:
	.word	BattleAnimObj_SignalEnd
	.word	gDoingBattleAnim
.Lfe40:
	.size	 GhostBallDodge2,.Lfe40-GhostBallDodge2
	.align	2, 0
	.type	 LoadBallParticleGfx,function
	.thumb_func
LoadBallParticleGfx:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L381
	lsr	r5, r0, #0x15
	add	r4, r5, r1
	ldrh	r0, [r4, #0x6]
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L381+0x4
	cmp	r0, r1
	bne	.L380	@cond_branch
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L381+0x8
	add	r0, r5, r0
	bl	LoadCompressedSpritePaletteUsingHeap
.L380:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L382:
	.align	2, 0
.L381:
	.word	gBallParticleSpritesheets
	.word	-0x10000
	.word	gBallParticlePalettes
.Lfe41:
	.size	 LoadBallParticleGfx,.Lfe41-LoadBallParticleGfx
	.align	2, 0
	.globl	AnimateBallOpenParticles
	.type	 AnimateBallOpenParticles,function
	.thumb_func
AnimateBallOpenParticles:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	mov	r8, r1
	mov	r9, r2
	mov	sl, r3
	ldr	r5, [sp, #0x1c]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, sl
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	bl	LoadBallParticleGfx
	ldr	r1, .L384
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x5
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L384+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0xa]
	mov	r1, r8
	strh	r1, [r0, #0xc]
	mov	r1, r9
	strh	r1, [r0, #0xe]
	mov	r1, sl
	strh	r1, [r0, #0x10]
	strh	r5, [r0, #0x26]
	mov	r0, #0xf
	bl	PlaySE
	add	r0, r4, #0
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L385:
	.align	2, 0
.L384:
	.word	sBallParticleAnimationFuncs
	.word	gTasks
.Lfe42:
	.size	 AnimateBallOpenParticles,.Lfe42-AnimateBallOpenParticles
	.align	2, 0
	.type	 IncrementBattleParticleCounter,function
	.thumb_func
IncrementBattleParticleCounter:
	push	{lr}
	ldr	r0, .L388
	ldr	r1, .L388+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L387	@cond_branch
	ldr	r0, .L388+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x8]
	ldrb	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strb	r0, [r1, #0xa]
.L387:
	pop	{r0}
	bx	r0
.L389:
	.align	2, 0
.L388:
	.word	gMain
	.word	0x439
	.word	gBattleSpritesDataPtr
.Lfe43:
	.size	 IncrementBattleParticleCounter,.Lfe43-IncrementBattleParticleCounter
	.align	2, 0
	.type	 PokeBallOpenParticleAnimation,function
	.thumb_func
PokeBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L396
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r0, [r6, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r2, #0x8
	ldrsh	r0, [r6, r2]
	add	r2, r1, #0
	cmp	r0, #0xf
	bgt	.L391	@cond_branch
	ldrb	r1, [r6, #0xa]
	ldrb	r2, [r6, #0xc]
	ldrb	r4, [r6, #0xe]
	mov	r9, r4
	ldrb	r3, [r6, #0x10]
	ldr	r4, [sp]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r4, .L396+0x4
	add	r0, r0, r4
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0x40
	beq	.L392	@cond_branch
	bl	IncrementBattleParticleCounter
	mov	r0, sl
	lsl	r4, r0, #0x4
	add	r4, r4, sl
	lsl	r4, r4, #0x2
	ldr	r5, .L396+0x8
	add	r7, r4, r5
	ldr	r0, .L396+0xc
	ldr	r1, [sp]
	add	r0, r1, r0
	ldrb	r1, [r0]
	add	r0, r7, #0
	bl	StartSpriteAnim
	add	r5, r5, #0x1c
	add	r4, r4, r5
	ldr	r0, .L396+0x10
	str	r0, [r4]
	mov	r0, #0x3
	mov	r2, r9
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r1, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r7, #0x5]
	ldrb	r0, [r6, #0x8]
	cmp	r0, #0x7
	bls	.L393	@cond_branch
	sub	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L393:
	lsl	r0, r0, #0x5
	strh	r0, [r7, #0x2e]
.L392:
	ldr	r0, .L396
	mov	r4, r8
	lsl	r1, r4, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r1, [r1, r2]
	add	r2, r0, #0
	cmp	r1, #0xf
	bne	.L391	@cond_branch
	ldr	r0, .L396+0x14
	ldr	r4, .L396+0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L395	@cond_branch
	ldr	r0, .L396+0x8
	mov	r2, sl
	lsl	r1, r2, #0x4
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L395:
	mov	r0, r8
	bl	DestroyTask
	b	.L390
.L397:
	.align	2, 0
.L396:
	.word	gTasks
	.word	sBallParticlesSpriteTemplates
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	PokeBallOpenParticleAnimation_Step1
	.word	gMain
	.word	0x439
.L391:
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
.L390:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 PokeBallOpenParticleAnimation,.Lfe44-PokeBallOpenParticleAnimation
	.align	2, 0
	.type	 PokeBallOpenParticleAnimation_Step1,function
	.thumb_func
PokeBallOpenParticleAnimation_Step1:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x30]
	mov	r3, #0x30
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L399	@cond_branch
	ldr	r0, .L401
	str	r0, [r1, #0x1c]
	b	.L400
.L402:
	.align	2, 0
.L401:
	.word	PokeBallOpenParticleAnimation_Step2
.L399:
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x30]
.L400:
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 PokeBallOpenParticleAnimation_Step1,.Lfe45-PokeBallOpenParticleAnimation_Step1
	.align	2, 0
	.type	 PokeBallOpenParticleAnimation_Step2,function
	.thumb_func
PokeBallOpenParticleAnimation_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	bne	.L404	@cond_branch
	add	r0, r4, #0
	bl	DestroyBallOpenAnimationParticle
.L404:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 PokeBallOpenParticleAnimation_Step2,.Lfe46-PokeBallOpenParticleAnimation_Step2
	.align	2, 0
	.type	 TimerBallOpenParticleAnimation,function
	.thumb_func
TimerBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L413
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x4]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0xc]
	mov	r7, #0x0
	ldr	r3, .L413+0x4
	mov	sl, r3
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
.L409:
	ldr	r0, .L413+0x8
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L408	@cond_branch
	bl	IncrementBattleParticleCounter
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r3, sl
	add	r5, r4, r3
	ldr	r0, .L413+0xc
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L413+0x10
	add	r4, r4, r0
	ldr	r0, .L413+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0xa
	strh	r0, [r5, #0x36]
	mov	r0, #0x2
	strh	r0, [r5, #0x38]
	mov	r0, #0x1
	strh	r0, [r5, #0x3a]
.L408:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L409	@cond_branch
	ldr	r0, .L413+0x18
	ldr	r1, .L413+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L412	@cond_branch
	ldr	r0, .L413+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L412:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L414:
	.align	2, 0
.L413:
	.word	gTasks
	.word	gSprites
	.word	sBallParticlesSpriteTemplates
	.word	sBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe47:
	.size	 TimerBallOpenParticleAnimation,.Lfe47-TimerBallOpenParticleAnimation
	.align	2, 0
	.type	 DiveBallOpenParticleAnimation,function
	.thumb_func
DiveBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L423
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x4]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0xc]
	mov	r7, #0x0
	ldr	r3, .L423+0x4
	mov	sl, r3
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
.L419:
	ldr	r0, .L423+0x8
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L418	@cond_branch
	bl	IncrementBattleParticleCounter
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r3, sl
	add	r5, r4, r3
	ldr	r0, .L423+0xc
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L423+0x10
	add	r4, r4, r0
	ldr	r0, .L423+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0xa
	strh	r0, [r5, #0x36]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	mov	r0, #0x2
	strh	r0, [r5, #0x3a]
.L418:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L419	@cond_branch
	ldr	r0, .L423+0x18
	ldr	r1, .L423+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L422	@cond_branch
	ldr	r0, .L423+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L422:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L424:
	.align	2, 0
.L423:
	.word	gTasks
	.word	gSprites
	.word	sBallParticlesSpriteTemplates
	.word	sBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe48:
	.size	 DiveBallOpenParticleAnimation,.Lfe48-DiveBallOpenParticleAnimation
	.align	2, 0
	.type	 SafariBallOpenParticleAnimation,function
	.thumb_func
SafariBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L433
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r0, #0xa]
	str	r2, [sp]
	ldrb	r3, [r0, #0xc]
	str	r3, [sp, #0x4]
	ldrb	r2, [r0, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r0, [r0, #0x10]
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
	ldr	r3, .L433+0x4
	mov	r8, r3
	ldr	r0, .L433+0x8
	add	r1, r1, r0
	mov	sl, r1
.L429:
	ldr	r0, .L433+0xc
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L428	@cond_branch
	bl	IncrementBattleParticleCounter
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r2, r8
	add	r5, r4, r2
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L433+0x10
	add	r4, r4, r0
	ldr	r0, .L433+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0x4
	strh	r0, [r5, #0x36]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	strh	r0, [r5, #0x3a]
.L428:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L429	@cond_branch
	ldr	r0, .L433+0x18
	ldr	r1, .L433+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L432	@cond_branch
	ldr	r0, .L433+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L432:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L434:
	.align	2, 0
.L433:
	.word	gTasks
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	sBallParticlesSpriteTemplates
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe49:
	.size	 SafariBallOpenParticleAnimation,.Lfe49-SafariBallOpenParticleAnimation
	.align	2, 0
	.type	 UltraBallOpenParticleAnimation,function
	.thumb_func
UltraBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L443
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x4]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0xc]
	mov	r7, #0x0
	ldr	r3, .L443+0x4
	mov	sl, r3
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
.L439:
	ldr	r0, .L443+0x8
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L438	@cond_branch
	bl	IncrementBattleParticleCounter
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r3, sl
	add	r5, r4, r3
	ldr	r0, .L443+0xc
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L443+0x10
	add	r4, r4, r0
	ldr	r0, .L443+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	strh	r0, [r5, #0x2e]
	mov	r0, #0x5
	strh	r0, [r5, #0x36]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	strh	r0, [r5, #0x3a]
.L438:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x9
	bls	.L439	@cond_branch
	ldr	r0, .L443+0x18
	ldr	r1, .L443+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L442	@cond_branch
	ldr	r0, .L443+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L442:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L444:
	.align	2, 0
.L443:
	.word	gTasks
	.word	gSprites
	.word	sBallParticlesSpriteTemplates
	.word	sBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe50:
	.size	 UltraBallOpenParticleAnimation,.Lfe50-UltraBallOpenParticleAnimation
	.align	2, 0
	.type	 GreatBallOpenParticleAnimation,function
	.thumb_func
GreatBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L456
	lsl	r2, r0, #0x2
	add	r0, r2, r0
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r1, [r3, #0x16]
	mov	r4, #0x16
	ldrsh	r0, [r3, r4]
	cmp	r0, #0
	beq	.L446	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x16]
	b	.L447
.L457:
	.align	2, 0
.L456:
	.word	gTasks
.L446:
	ldrh	r0, [r3, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r3, #0xa]
	str	r1, [sp]
	ldrb	r4, [r3, #0xc]
	str	r4, [sp, #0x4]
	ldrb	r1, [r3, #0xe]
	str	r1, [sp, #0x8]
	ldrb	r3, [r3, #0x10]
	str	r3, [sp, #0xc]
	mov	r7, #0x0
	str	r2, [sp, #0x14]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	str	r1, [sp, #0x10]
	ldr	r3, .L458
	mov	r9, r3
	ldr	r1, .L458+0x4
	add	r0, r0, r1
	mov	sl, r0
.L451:
	ldr	r0, .L458+0x8
	ldr	r4, [sp, #0x10]
	add	r0, r4, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L450	@cond_branch
	bl	IncrementBattleParticleCounter
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r0, r9
	add	r5, r4, r0
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L458+0xc
	add	r4, r4, r0
	ldr	r0, .L458+0x10
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0x8
	strh	r0, [r5, #0x36]
	mov	r0, #0x2
	strh	r0, [r5, #0x38]
	strh	r0, [r5, #0x3a]
.L450:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L451	@cond_branch
	ldr	r0, .L458+0x14
	ldr	r1, [sp, #0x14]
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x8
	strh	r0, [r1, #0x16]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0x2
	bne	.L447	@cond_branch
	ldr	r0, .L458+0x18
	ldr	r4, .L458+0x1c
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L455	@cond_branch
	ldr	r0, .L458
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L455:
	mov	r0, r8
	bl	DestroyTask
.L447:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L459:
	.align	2, 0
.L458:
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	sBallParticlesSpriteTemplates
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gTasks
	.word	gMain
	.word	0x439
.Lfe51:
	.size	 GreatBallOpenParticleAnimation,.Lfe51-GreatBallOpenParticleAnimation
	.align	2, 0
	.type	 FanOutBallOpenParticles_Step1,function
	.thumb_func
FanOutBallOpenParticles_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x2e]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	ldrh	r2, [r4, #0x30]
	add	r0, r0, r2
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L461	@cond_branch
	add	r0, r4, #0
	bl	DestroyBallOpenAnimationParticle
.L461:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 FanOutBallOpenParticles_Step1,.Lfe52-FanOutBallOpenParticles_Step1
	.align	2, 0
	.type	 RepeatBallOpenParticleAnimation,function
	.thumb_func
RepeatBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L470
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r0, #0xa]
	str	r2, [sp]
	ldrb	r3, [r0, #0xc]
	str	r3, [sp, #0x4]
	ldrb	r2, [r0, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r0, [r0, #0x10]
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
	ldr	r3, .L470+0x4
	mov	r8, r3
	ldr	r0, .L470+0x8
	add	r1, r1, r0
	mov	sl, r1
.L466:
	ldr	r0, .L470+0xc
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L465	@cond_branch
	bl	IncrementBattleParticleCounter
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r2, r8
	add	r5, r4, r2
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L470+0x10
	add	r4, r4, r0
	ldr	r0, .L470+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r0, [r5, #0x2e]
.L465:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0xb
	bls	.L466	@cond_branch
	ldr	r0, .L470+0x18
	ldr	r1, .L470+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L469	@cond_branch
	ldr	r0, .L470+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L469:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L471:
	.align	2, 0
.L470:
	.word	gTasks
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	sBallParticlesSpriteTemplates
	.word	gSprites+0x1c
	.word	RepeatBallOpenParticleAnimation_Step1
	.word	gMain
	.word	0x439
.Lfe53:
	.size	 RepeatBallOpenParticleAnimation,.Lfe53-RepeatBallOpenParticleAnimation
	.align	2, 0
	.type	 RepeatBallOpenParticleAnimation_Step1,function
	.thumb_func
RepeatBallOpenParticleAnimation_Step1:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	mov	r0, #0x2e
	ldrsh	r4, [r5, r0]
	mov	r2, #0x32
	ldrsh	r1, [r5, r2]
	add	r0, r4, #0
	bl	Sin
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Cos
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x6
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L473	@cond_branch
	add	r0, r5, #0
	bl	DestroyBallOpenAnimationParticle
.L473:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 RepeatBallOpenParticleAnimation_Step1,.Lfe54-RepeatBallOpenParticleAnimation_Step1
	.align	2, 0
	.type	 MasterBallOpenParticleAnimation,function
	.thumb_func
MasterBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	ldr	r0, .L490
	ldr	r2, [sp]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp, #0x4]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x8]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0xc]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0x10]
	mov	r3, #0x0
	mov	r8, r3
	mov	r1, r9
	lsl	r0, r1, #0x1
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x14]
.L478:
	mov	r7, #0x0
	mov	r2, #0x1
	add	r2, r2, r8
	mov	sl, r2
.L482:
	ldr	r0, .L490+0x4
	ldr	r3, [sp, #0x14]
	add	r0, r3, r0
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	ldr	r3, [sp, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L481	@cond_branch
	bl	IncrementBattleParticleCounter
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	ldr	r0, .L490+0x8
	add	r5, r4, r0
	ldr	r0, .L490+0xc
	add	r0, r0, r9
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r1, .L490+0x10
	add	r4, r4, r1
	ldr	r0, .L490+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r1, [sp, #0xc]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r2, r3, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0x8
	strh	r0, [r5, #0x36]
	mov	r0, r8
	cmp	r0, #0
	bne	.L484	@cond_branch
	mov	r0, #0x2
	strh	r0, [r5, #0x38]
	mov	r0, #0x1
	b	.L489
.L491:
	.align	2, 0
.L490:
	.word	gTasks
	.word	sBallParticlesSpriteTemplates
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
.L484:
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	mov	r0, #0x2
.L489:
	strh	r0, [r5, #0x3a]
.L481:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L482	@cond_branch
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x1
	bls	.L478	@cond_branch
	ldr	r0, .L492
	ldr	r2, .L492+0x4
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L488	@cond_branch
	ldr	r0, .L492+0x8
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L488:
	ldr	r0, [sp]
	bl	DestroyTask
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	gMain
	.word	0x439
	.word	gSprites
.Lfe55:
	.size	 MasterBallOpenParticleAnimation,.Lfe55-MasterBallOpenParticleAnimation
	.align	2, 0
	.type	 PremierBallOpenParticleAnimation,function
	.thumb_func
PremierBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L502
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r0, #0xa]
	str	r2, [sp]
	ldrb	r3, [r0, #0xc]
	str	r3, [sp, #0x4]
	ldrb	r2, [r0, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r0, [r0, #0x10]
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
	ldr	r3, .L502+0x4
	mov	r8, r3
	ldr	r0, .L502+0x8
	add	r1, r1, r0
	mov	sl, r1
.L498:
	ldr	r0, .L502+0xc
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L497	@cond_branch
	bl	IncrementBattleParticleCounter
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r2, r8
	add	r5, r4, r2
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L502+0x10
	add	r4, r4, r0
	ldr	r0, .L502+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
.L497:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L498	@cond_branch
	ldr	r0, .L502+0x18
	ldr	r1, .L502+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L501	@cond_branch
	ldr	r0, .L502+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L501:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L503:
	.align	2, 0
.L502:
	.word	gTasks
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	sBallParticlesSpriteTemplates
	.word	gSprites+0x1c
	.word	PremierBallOpenParticleAnimation_Step1
	.word	gMain
	.word	0x439
.Lfe56:
	.size	 PremierBallOpenParticleAnimation,.Lfe56-PremierBallOpenParticleAnimation
	.align	2, 0
	.type	 PremierBallOpenParticleAnimation_Step1,function
	.thumb_func
PremierBallOpenParticleAnimation_Step1:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	mov	r0, #0x2e
	ldrsh	r4, [r5, r0]
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r2, #0x32
	ldrsh	r1, [r5, r2]
	bl	Sin
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Cos
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0xa
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L505	@cond_branch
	add	r0, r5, #0
	bl	DestroyBallOpenAnimationParticle
.L505:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 PremierBallOpenParticleAnimation_Step1,.Lfe57-PremierBallOpenParticleAnimation_Step1
	.align	2, 0
	.type	 DestroyBallOpenAnimationParticle,function
	.thumb_func
DestroyBallOpenAnimationParticle:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldr	r0, .L519
	ldr	r1, .L519+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L507	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r7, r1]
	cmp	r0, #0x1
	bne	.L518	@cond_branch
	add	r0, r7, #0
	bl	DestroySpriteAndFreeResources
	b	.L510
.L520:
	.align	2, 0
.L519:
	.word	gMain
	.word	0x439
.L507:
	ldr	r2, .L521
	ldr	r0, [r2]
	ldr	r1, [r0, #0x8]
	ldrb	r0, [r1, #0xa]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0xa]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	bne	.L511	@cond_branch
	mov	r6, #0x0
	ldr	r5, .L521+0x4
	ldr	r4, .L521+0x8
.L515:
	ldrh	r0, [r5, #0x6]
	bl	FreeSpriteTilesByTag
	ldrh	r0, [r4, #0x4]
	bl	FreeSpritePaletteByTag
	add	r5, r5, #0x8
	add	r4, r4, #0x8
	add	r6, r6, #0x1
	cmp	r6, #0xb
	ble	.L515	@cond_branch
.L518:
	add	r0, r7, #0
	bl	DestroySprite
	b	.L510
.L522:
	.align	2, 0
.L521:
	.word	gBattleSpritesDataPtr
	.word	gBallParticleSpritesheets
	.word	gBallParticlePalettes
.L511:
	add	r0, r7, #0
	bl	DestroySprite
.L510:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 DestroyBallOpenAnimationParticle,.Lfe58-DestroyBallOpenAnimationParticle
	.align	2, 0
	.globl	LaunchBallFadeMonTask
	.type	 LaunchBallFadeMonTask,function
	.thumb_func
LaunchBallFadeMonTask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r9, r2
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	ldr	r0, .L526
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L526+0x4
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	strh	r7, [r5, #0x26]
	strh	r6, [r5, #0xe]
	mov	r0, r9
	strh	r0, [r5, #0x1c]
	mov	r1, r9
	lsr	r0, r1, #0x10
	strh	r0, [r5, #0x1e]
	cmp	r4, #0
	bne	.L524	@cond_branch
	lsl	r0, r6, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	ldr	r2, .L526+0x8
	lsl	r1, r7, #0x1
	add	r1, r1, r2
	ldrh	r3, [r1]
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalette
	mov	r0, #0x1
	strh	r0, [r5, #0xa]
	b	.L525
.L527:
	.align	2, 0
.L526:
	.word	Task_FadeMon_ToBallColor
	.word	gTasks
	.word	sBallOpenFadeColors
.L524:
	lsl	r0, r6, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	ldr	r2, .L528
	lsl	r1, r7, #0x1
	add	r1, r1, r2
	ldrh	r3, [r1]
	mov	r1, #0x10
	mov	r2, #0x10
	bl	BlendPalette
	mov	r0, #0x10
	strh	r0, [r5, #0x8]
	ldr	r0, .L528+0x4
	strh	r0, [r5, #0xa]
	ldr	r0, .L528+0x8
	str	r0, [r5]
.L525:
	ldr	r0, .L528+0xc
	str	r0, [sp]
	mov	r0, r9
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r0, r8
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L529:
	.align	2, 0
.L528:
	.word	sBallOpenFadeColors
	.word	0xffff
	.word	Task_FadeMon_ToNormal
	.word	0x7fff
.Lfe59:
	.size	 LaunchBallFadeMonTask,.Lfe59-LaunchBallFadeMonTask
	.align	2, 0
	.type	 Task_FadeMon_ToBallColor,function
	.thumb_func
Task_FadeMon_ToBallColor:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L534
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x10
	bgt	.L531	@cond_branch
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0x8]
	ldr	r3, .L534+0x4
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L532
.L535:
	.align	2, 0
.L534:
	.word	gTasks
	.word	sBallOpenFadeColors
.L531:
	ldr	r0, .L536
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L532	@cond_branch
	ldrh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldr	r1, .L536+0x4
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	add	r0, r5, #0
	bl	DestroyTask
.L532:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	gPaletteFade
	.word	0x7fff
.Lfe60:
	.size	 Task_FadeMon_ToBallColor,.Lfe60-Task_FadeMon_ToBallColor
	.align	2, 0
	.type	 Task_FadeMon_ToNormal,function
	.thumb_func
Task_FadeMon_ToNormal:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L540
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L539	@cond_branch
	ldr	r0, .L540+0x4
	lsl	r4, r2, #0x2
	add	r4, r4, r2
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldr	r1, .L540+0x8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L540+0xc
	str	r0, [r4]
.L539:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L541:
	.align	2, 0
.L540:
	.word	gPaletteFade
	.word	gTasks
	.word	0x7fff
	.word	Task_FadeMon_ToNormal_Step
.Lfe61:
	.size	 Task_FadeMon_ToNormal,.Lfe61-Task_FadeMon_ToNormal
	.align	2, 0
	.type	 Task_FadeMon_ToNormal_Step,function
	.thumb_func
Task_FadeMon_ToNormal_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L545
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x10
	bgt	.L543	@cond_branch
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x14
	mov	r3, #0x80
	lsl	r3, r3, #0x11
	add	r0, r0, r3
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0x8]
	ldr	r3, .L545+0x4
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L544
.L546:
	.align	2, 0
.L545:
	.word	gTasks
	.word	sBallOpenFadeColors
.L543:
	add	r0, r2, #0
	bl	DestroyTask
.L544:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 Task_FadeMon_ToNormal_Step,.Lfe62-Task_FadeMon_ToNormal_Step
	.align	2, 0
	.globl	AnimTask_SwapMonSpriteToFromSubstitute
	.type	 AnimTask_SwapMonSpriteToFromSubstitute,function
	.thumb_func
AnimTask_SwapMonSpriteToFromSubstitute:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L566
	ldr	r3, .L566+0x4
	ldrb	r2, [r3]
	add	r0, r2, r0
	ldrb	r6, [r0]
	ldr	r1, .L566+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L553	@cond_branch
	cmp	r0, #0x1
	bgt	.L564	@cond_branch
	cmp	r0, #0
	beq	.L549	@cond_branch
	b	.L548
.L567:
	.align	2, 0
.L566:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gTasks
.L564:
	cmp	r0, #0x2
	beq	.L554	@cond_branch
	b	.L548
.L549:
	ldr	r0, .L568
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1e]
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r4, [r5, #0x8]
	add	r0, r0, r4
	strh	r0, [r5, #0x8]
	ldrb	r0, [r3]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L550	@cond_branch
	ldr	r2, .L568+0x4
	lsl	r3, r6, #0x4
	add	r1, r3, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r4, [r1, #0x24]
	add	r0, r0, r4
	strh	r0, [r1, #0x24]
	add	r4, r3, #0
	b	.L551
.L569:
	.align	2, 0
.L568:
	.word	gBattleAnimArgs
	.word	gSprites
.L550:
	ldr	r3, .L570
	lsl	r4, r6, #0x4
	add	r2, r4, r6
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r5, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r2, r3, #0
.L551:
	ldr	r1, .L570+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrb	r0, [r3, #0x8]
	strh	r0, [r3, #0x8]
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r2, #0x20
	ldrsh	r1, [r0, r2]
	mov	r4, #0x24
	ldrsh	r0, [r0, r4]
	add	r1, r1, r0
	add	r1, r1, #0x20
	mov	r0, #0x98
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bls	.L548	@cond_branch
	ldrh	r0, [r3, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x1c]
	b	.L548
.L571:
	.align	2, 0
.L570:
	.word	gSprites
	.word	gTasks
.L553:
	ldrb	r1, [r5, #0x1e]
	add	r0, r2, #0
	add	r2, r6, #0
	bl	LoadBattleMonGfxAndAnimate
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	b	.L548
.L554:
	mov	r1, #0xa0
	lsl	r1, r1, #0x3
	add	r0, r1, #0
	ldrh	r2, [r5, #0x8]
	add	r0, r0, r2
	strh	r0, [r5, #0x8]
	ldrb	r0, [r3]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L555	@cond_branch
	ldr	r0, .L572
	lsl	r3, r6, #0x4
	add	r2, r3, r6
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r1, [r5, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r4, r3, #0
	b	.L556
.L573:
	.align	2, 0
.L572:
	.word	gSprites
.L555:
	ldr	r0, .L574
	lsl	r2, r6, #0x4
	add	r1, r2, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r3, [r1, #0x24]
	add	r0, r0, r3
	strh	r0, [r1, #0x24]
	add	r4, r2, #0
.L556:
	ldr	r1, .L574+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	strh	r1, [r0, #0x8]
	ldr	r0, .L574+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L557	@cond_branch
	ldr	r0, .L574
	add	r1, r4, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r4, #0x24
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bgt	.L559	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x24]
	b	.L565
.L575:
	.align	2, 0
.L574:
	.word	gSprites
	.word	gTasks
	.word	gBattleAnimAttacker
.L557:
	ldr	r0, .L576
	add	r1, r4, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r3, #0x24
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	blt	.L559	@cond_branch
	strh	r2, [r1, #0x24]
	mov	r4, #0x1
	mov	r8, r4
.L559:
	mov	r0, r8
	cmp	r0, #0
	beq	.L548	@cond_branch
.L565:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L548:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L577:
	.align	2, 0
.L576:
	.word	gSprites
.Lfe63:
	.size	 AnimTask_SwapMonSpriteToFromSubstitute,.Lfe63-AnimTask_SwapMonSpriteToFromSubstitute
	.align	2, 0
	.globl	AnimTask_SubstituteFadeToInvisible
	.type	 AnimTask_SubstituteFadeToInvisible,function
	.thumb_func
AnimTask_SubstituteFadeToInvisible:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L590
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L583	@cond_branch
	cmp	r0, #0x1
	bgt	.L589	@cond_branch
	cmp	r0, #0
	beq	.L580	@cond_branch
	b	.L579
.L591:
	.align	2, 0
.L590:
	.word	gTasks
.L589:
	cmp	r0, #0x2
	beq	.L586	@cond_branch
	b	.L579
.L580:
	ldr	r0, .L592
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L581	@cond_branch
	ldr	r1, .L592+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	b	.L582
.L593:
	.align	2, 0
.L592:
	.word	gBattleAnimAttacker
	.word	0x3f42
.L581:
	ldr	r1, .L594
	mov	r0, #0x50
	bl	SetGpuReg
.L582:
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, .L594+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x26]
	b	.L579
.L595:
	.align	2, 0
.L594:
	.word	0x3f44
	.word	gTasks
.L583:
	ldrh	r0, [r4, #0xa]
	add	r1, r0, #0x1
	strh	r1, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L579	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r2, [r4, #0x8]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x8]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L579	@cond_branch
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	b	.L579
.L586:
	ldr	r1, .L596
	ldr	r4, .L596+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L596+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r0, .L596+0xc
	add	r1, r1, r0
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r0, #0x0
	mov	r3, #0x1
	bl	RequestDma3Fill
	ldrb	r0, [r4]
	bl	ClearBehindSubstituteBit
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L579:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L597:
	.align	2, 0
.L596:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	0x6010000
.Lfe64:
	.size	 AnimTask_SubstituteFadeToInvisible,.Lfe64-AnimTask_SubstituteFadeToInvisible
	.align	2, 0
	.globl	AnimTask_IsAttackerBehindSubstitute
	.type	 AnimTask_IsAttackerBehindSubstitute,function
	.thumb_func
AnimTask_IsAttackerBehindSubstitute:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L599
	ldr	r1, .L599+0x4
	ldr	r2, [r1]
	ldr	r1, .L599+0x8
	ldrb	r1, [r1]
	ldr	r2, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	strh	r1, [r3, #0xe]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L600:
	.align	2, 0
.L599:
	.word	gBattleAnimArgs
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimAttacker
.Lfe65:
	.size	 AnimTask_IsAttackerBehindSubstitute,.Lfe65-AnimTask_IsAttackerBehindSubstitute
	.align	2, 0
	.globl	AnimTask_SetTargetToEffectBattler
	.type	 AnimTask_SetTargetToEffectBattler,function
	.thumb_func
AnimTask_SetTargetToEffectBattler:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L602
	ldr	r1, .L602+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L603:
	.align	2, 0
.L602:
	.word	gBattleAnimTarget
	.word	gEffectBattler
.Lfe66:
	.size	 AnimTask_SetTargetToEffectBattler,.Lfe66-AnimTask_SetTargetToEffectBattler
	.align	2, 0
	.globl	TryShinyAnimation
	.type	 TryShinyAnimation,function
	.thumb_func
TryShinyAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L609
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	add	r5, r0, #0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r4, r0, #0
	add	r0, r6, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L605	@cond_branch
	lsr	r0, r5, #0x10
	ldr	r7, .L609+0x4
	and	r5, r5, r7
	eor	r0, r0, r5
	lsr	r1, r4, #0x10
	eor	r0, r0, r1
	and	r4, r4, r7
	eor	r0, r0, r4
	cmp	r0, #0x7
	bhi	.L606	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L606:
	mov	r0, r8
	cmp	r0, #0
	beq	.L605	@cond_branch
	ldr	r0, .L609+0x8
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r7
	bne	.L608	@cond_branch
	ldr	r0, .L609+0xc
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L609+0x10
	bl	LoadCompressedSpritePaletteUsingHeap
.L608:
	ldr	r5, .L609+0x14
	add	r0, r5, #0
	mov	r1, #0xa
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L609+0x18
	lsl	r2, r4, #0x2
	add	r2, r2, r4
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	mov	r4, #0x0
	strh	r6, [r2, #0x8]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	strh	r6, [r1, #0x8]
	strh	r4, [r2, #0xa]
	mov	r0, #0x1
	strh	r0, [r1, #0xa]
	b	.L604
.L610:
	.align	2, 0
.L609:
	.word	gBattleSpritesDataPtr
	.word	0xffff
	.word	0x27f9
	.word	gBattleAnimPicTable+0x748
	.word	gBattleAnimPaletteTable+0x748
	.word	AnimTask_ShinySparkles
	.word	gTasks
.L605:
	ldr	r0, .L611
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L604:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L612:
	.align	2, 0
.L611:
	.word	gBattleSpritesDataPtr
.Lfe67:
	.size	 TryShinyAnimation,.Lfe67-TryShinyAnimation
	.align	2, 0
	.type	 AnimTask_ShinySparkles,function
	.thumb_func
AnimTask_ShinySparkles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L629
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x22]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3b
	bgt	.L614	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x22]
	b	.L613
.L630:
	.align	2, 0
.L629:
	.word	gTasks
.L614:
	ldr	r0, .L631
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	beq	.LCB7058
	b	.L613	@long jump
.LCB7058:
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB7070
	b	.L613	@long jump
.LCB7070:
	ldrb	r0, [r4, #0x8]
	mov	r8, r0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L617	@cond_branch
	ldr	r0, .L631+0x4
	add	r1, r5, #0
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L618
.L632:
	.align	2, 0
.L631:
	.word	gBattleSpritesDataPtr
	.word	gWishStarSpriteTemplate
.L617:
	cmp	r0, #0
	blt	.L619	@cond_branch
	cmp	r0, #0x3
	bgt	.L619	@cond_branch
	ldr	r0, .L633
	add	r1, r5, #0
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L633+0x4
	lsl	r2, r5, #0x4
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x4
	b	.L628
.L634:
	.align	2, 0
.L633:
	.word	gMiniTwinklingStarSpriteTemplate
	.word	gSprites
.L619:
	ldr	r0, .L635
	add	r1, r5, #0
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L635+0x4
	lsl	r2, r5, #0x4
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x5
.L628:
	ldr	r4, .L635+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L635+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L618:
	ldr	r2, .L635+0x10
	lsl	r1, r7, #0x2
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r2
	mov	r2, #0xa
	ldrsh	r0, [r6, r2]
	mov	r9, r1
	cmp	r0, #0
	bne	.L621	@cond_branch
	ldr	r1, .L635+0x4
	lsl	r2, r5, #0x4
	add	r0, r2, r5
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L635+0x14
	str	r1, [r0]
	add	r4, r2, #0
	b	.L622
.L636:
	.align	2, 0
.L635:
	.word	gMiniTwinklingStarSpriteTemplate
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	gTasks
	.word	SpriteCB_ShinySparkles_1
.L621:
	ldr	r3, .L637
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r1, r0
	ldr	r2, .L637+0x4
	str	r2, [r0]
	add	r1, r1, r3
	ldr	r0, .L637+0x8
	strh	r0, [r1, #0x24]
	mov	r0, #0x20
	strh	r0, [r1, #0x26]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L622	@cond_branch
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x3f
	cmp	r0, #0
	bne	.L624	@cond_branch
	mov	r1, #0xc0
.L624:
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x5f
	bl	PlaySE12WithPanning
.L622:
	ldr	r1, .L637
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r7, [r0, #0x2e]
	ldr	r1, .L637+0xc
	mov	r2, r9
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	cmp	r5, #0x40
	beq	.L626	@cond_branch
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
.L626:
	mov	r4, #0x1e
	ldrsh	r0, [r1, r4]
	cmp	r0, #0x5
	bne	.L613	@cond_branch
	ldr	r0, .L637+0x10
	str	r0, [r1]
.L613:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L638:
	.align	2, 0
.L637:
	.word	gSprites
	.word	SpriteCB_ShinySparkles_2
	.word	0xffe0
	.word	gTasks
	.word	AnimTask_ShinySparkles_WaitSparkles
.Lfe68:
	.size	 AnimTask_ShinySparkles,.Lfe68-AnimTask_ShinySparkles
	.align	2, 0
	.type	 AnimTask_ShinySparkles_WaitSparkles,function
	.thumb_func
AnimTask_ShinySparkles_WaitSparkles:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r0, #0
	ldr	r1, .L642
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r2, #0x20
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L640	@cond_branch
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L641	@cond_branch
	ldrb	r1, [r1, #0x8]
	ldr	r0, .L642+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L641:
	add	r0, r3, #0
	bl	DestroyTask
.L640:
	pop	{r0}
	bx	r0
.L643:
	.align	2, 0
.L642:
	.word	gTasks
	.word	gBattleSpritesDataPtr
.Lfe69:
	.size	 AnimTask_ShinySparkles_WaitSparkles,.Lfe69-AnimTask_ShinySparkles_WaitSparkles
	.align	2, 0
	.type	 SpriteCB_ShinySparkles_1,function
	.thumb_func
SpriteCB_ShinySparkles_1:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0xc
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L645	@cond_branch
	ldr	r2, .L646
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L645:
	pop	{r4}
	pop	{r0}
	bx	r0
.L647:
	.align	2, 0
.L646:
	.word	gTasks
.Lfe70:
	.size	 SpriteCB_ShinySparkles_1,.Lfe70-SpriteCB_ShinySparkles_1
	.align	2, 0
	.type	 SpriteCB_ShinySparkles_2,function
	.thumb_func
SpriteCB_ShinySparkles_2:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3
	bgt	.L649	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L650
.L649:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r1, [r4, #0x24]
	add	r1, r1, #0x5
	strh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, #0x5
	strh	r0, [r4, #0x26]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x20
	ble	.L650	@cond_branch
	ldr	r2, .L652
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L650:
	pop	{r4}
	pop	{r0}
	bx	r0
.L653:
	.align	2, 0
.L652:
	.word	gTasks
.Lfe71:
	.size	 SpriteCB_ShinySparkles_2,.Lfe71-SpriteCB_ShinySparkles_2
	.align	2, 0
	.globl	AnimTask_LoadBaitGfx
	.type	 AnimTask_LoadBaitGfx,function
	.thumb_func
AnimTask_LoadBaitGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L655
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L655+0x4
	bl	LoadCompressedSpritePaletteUsingHeap
	ldr	r0, .L655+0x8
	bl	IndexOfSpritePaletteTag
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L656:
	.align	2, 0
.L655:
	.word	gBattleAnimPicTable+0x868
	.word	gBattleAnimPaletteTable+0x868
	.word	0x281d
.Lfe72:
	.size	 AnimTask_LoadBaitGfx,.Lfe72-AnimTask_LoadBaitGfx
	.align	2, 0
	.globl	AnimTask_FreeBaitGfx
	.type	 AnimTask_FreeBaitGfx,function
	.thumb_func
AnimTask_FreeBaitGfx:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L658
	add	r0, r5, #0
	bl	FreeSpriteTilesByTag
	add	r0, r5, #0
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	0x281d
.Lfe73:
	.size	 AnimTask_FreeBaitGfx,.Lfe73-AnimTask_FreeBaitGfx
	.align	2, 0
	.type	 SpriteCB_SafariBaitOrRock_Init,function
	.thumb_func
SpriteCB_SafariBaitOrRock_Init:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x1e
	strh	r0, [r4, #0x2e]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r5, .L661
	lsr	r0, r0, #0x18
	ldrh	r1, [r5, #0x4]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x6]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	ldr	r0, .L661+0x4
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r2, .L661+0x8
	ldr	r1, .L661+0xc
	ldr	r0, .L661+0x10
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L661+0x14
	str	r1, [r0]
	ldr	r0, .L661+0x18
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L662:
	.align	2, 0
.L661:
	.word	gBattleAnimArgs
	.word	0xffe0
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	SpriteCB_PlayerThrowInit
	.word	SpriteCB_SafariBaitOrRock_WaitPlayerThrow
.Lfe74:
	.size	 SpriteCB_SafariBaitOrRock_Init,.Lfe74-SpriteCB_SafariBaitOrRock_Init
	.align	2, 0
	.type	 SpriteCB_SafariBaitOrRock_WaitPlayerThrow,function
	.thumb_func
SpriteCB_SafariBaitOrRock_WaitPlayerThrow:
	push	{lr}
	add	r3, r0, #0
	ldr	r2, .L665
	ldr	r1, .L665+0x4
	ldr	r0, .L665+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L664	@cond_branch
	ldr	r0, .L665+0xc
	str	r0, [r3, #0x1c]
.L664:
	pop	{r0}
	bx	r0
.L666:
	.align	2, 0
.L665:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	SpriteCB_SafariBaitOrRock_ArcFlight
.Lfe75:
	.size	 SpriteCB_SafariBaitOrRock_WaitPlayerThrow,.Lfe75-SpriteCB_SafariBaitOrRock_WaitPlayerThrow
	.align	2, 0
	.type	 SpriteCB_SafariBaitOrRock_ArcFlight,function
	.thumb_func
SpriteCB_SafariBaitOrRock_ArcFlight:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L668	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L669
	str	r0, [r4, #0x1c]
.L668:
	pop	{r4}
	pop	{r0}
	bx	r0
.L670:
	.align	2, 0
.L669:
	.word	SpriteCB_SafariBaitOrRock_Finish
.Lfe76:
	.size	 SpriteCB_SafariBaitOrRock_ArcFlight,.Lfe76-SpriteCB_SafariBaitOrRock_ArcFlight
	.align	2, 0
	.type	 SpriteCB_SafariBaitOrRock_Finish,function
	.thumb_func
SpriteCB_SafariBaitOrRock_Finish:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L674
	ldr	r3, .L674+0x4
	ldr	r2, .L674+0x8
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L672	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L672	@cond_branch
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L672:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L675:
	.align	2, 0
.L674:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe77:
	.size	 SpriteCB_SafariBaitOrRock_Finish,.Lfe77-SpriteCB_SafariBaitOrRock_Finish
	.align	2, 0
	.globl	AnimTask_SafariOrGhost_DecideAnimSides
	.type	 AnimTask_SafariOrGhost_DecideAnimSides,function
	.thumb_func
AnimTask_SafariOrGhost_DecideAnimSides:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L683
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L678	@cond_branch
	cmp	r0, #0x1
	beq	.L679	@cond_branch
	b	.L677
.L684:
	.align	2, 0
.L683:
	.word	gBattleAnimArgs
.L678:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L685
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L682
.L686:
	.align	2, 0
.L685:
	.word	gBattleAnimAttacker
.L679:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r1, .L687
	strb	r0, [r1]
	mov	r0, #0x0
.L682:
	bl	GetBattlerAtPosition
	ldr	r1, .L687+0x4
	strb	r0, [r1]
.L677:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L688:
	.align	2, 0
.L687:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.Lfe78:
	.size	 AnimTask_SafariOrGhost_DecideAnimSides,.Lfe78-AnimTask_SafariOrGhost_DecideAnimSides
	.align	2, 0
	.globl	AnimTask_SafariGetReaction
	.type	 AnimTask_SafariGetReaction,function
	.thumb_func
AnimTask_SafariGetReaction:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L693
	ldrb	r0, [r2, #0x5]
	cmp	r0, #0x2
	bls	.L690	@cond_branch
	ldr	r1, .L693+0x4
	mov	r0, #0x0
	b	.L692
.L694:
	.align	2, 0
.L693:
	.word	gBattleCommunication
	.word	gBattleAnimArgs
.L690:
	ldr	r1, .L695
	ldrb	r0, [r2, #0x5]
.L692:
	strh	r0, [r1, #0xe]
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L696:
	.align	2, 0
.L695:
	.word	gBattleAnimArgs
.Lfe79:
	.size	 AnimTask_SafariGetReaction,.Lfe79-AnimTask_SafariGetReaction
	.align	2, 0
	.globl	AnimTask_GetTrappedMoveAnimId
	.type	 AnimTask_GetTrappedMoveAnimId,function
	.thumb_func
AnimTask_GetTrappedMoveAnimId:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L707
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrh	r1, [r0]
	cmp	r1, #0x53
	bne	.L698	@cond_branch
	ldr	r1, .L707+0x4
	mov	r0, #0x1
	b	.L706
.L708:
	.align	2, 0
.L707:
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimArgs
.L698:
	cmp	r1, #0xfa
	bne	.L700	@cond_branch
	ldr	r1, .L709
	mov	r0, #0x2
	b	.L706
.L710:
	.align	2, 0
.L709:
	.word	gBattleAnimArgs
.L700:
	cmp	r1, #0x80
	bne	.L702	@cond_branch
	ldr	r1, .L711
	mov	r0, #0x3
	b	.L706
.L712:
	.align	2, 0
.L711:
	.word	gBattleAnimArgs
.L702:
	mov	r0, #0xa4
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L704	@cond_branch
	ldr	r1, .L713
	mov	r0, #0x4
	b	.L706
.L714:
	.align	2, 0
.L713:
	.word	gBattleAnimArgs
.L704:
	ldr	r1, .L715
	mov	r0, #0x0
.L706:
	strh	r0, [r1]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L716:
	.align	2, 0
.L715:
	.word	gBattleAnimArgs
.Lfe80:
	.size	 AnimTask_GetTrappedMoveAnimId,.Lfe80-AnimTask_GetTrappedMoveAnimId
	.align	2, 0
	.globl	AnimTask_GetBattlersFromArg
	.type	 AnimTask_GetBattlersFromArg,function
	.thumb_func
AnimTask_GetBattlersFromArg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L718
	ldr	r1, .L718+0x4
	ldr	r2, [r1]
	ldr	r1, [r2, #0x8]
	ldrh	r1, [r1]
	strb	r1, [r3]
	ldr	r3, .L718+0x8
	ldr	r1, [r2, #0x8]
	ldrh	r1, [r1]
	lsr	r1, r1, #0x8
	strb	r1, [r3]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L719:
	.align	2, 0
.L718:
	.word	gBattleAnimAttacker
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimTarget
.Lfe81:
	.size	 AnimTask_GetBattlersFromArg,.Lfe81-AnimTask_GetBattlersFromArg
	.comm	gMonShrinkDuration, 4	@ 4
	.comm	gMonShrinkDelta, 4	@ 2
	.comm	gMonShrinkDistance, 4	@ 2
.text
	.align	2, 0 @ Don't pad with nop

