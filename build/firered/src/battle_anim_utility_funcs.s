@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sAnimStatsChangeData,object
	.size	 sAnimStatsChangeData,4
sAnimStatsChangeData:
	.word	0x0
	.section .rodata
	.align	1, 0
	.type	 sRgbWhite,object
sRgbWhite:
	.short	0x7fff
	.size	 sRgbWhite,2
	.globl	gBattleAnimRegOffsBgCnt
	.type	 gBattleAnimRegOffsBgCnt,object
gBattleAnimRegOffsBgCnt:
	.byte	0x8
	.byte	0xa
	.byte	0xc
	.byte	0xe
	.size	 gBattleAnimRegOffsBgCnt,4
	.globl	gBattleIntroRegOffsBgCnt
	.type	 gBattleIntroRegOffsBgCnt,object
gBattleIntroRegOffsBgCnt:
	.byte	0x8
	.byte	0xa
	.byte	0xc
	.byte	0xe
	.size	 gBattleIntroRegOffsBgCnt,4
.text
	.align	2, 0
	.globl	AnimTask_BlendBattleAnimPal
	.type	 AnimTask_BlendBattleAnimPal,function
	.thumb_func
AnimTask_BlendBattleAnimPal:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L5
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	bl	UnpackSelectedBattlePalettes
	add	r6, r0, #0
	ldrh	r3, [r4]
	lsl	r3, r3, #0x10
	asr	r0, r3, #0x17
	mov	r4, #0x1
	and	r0, r0, r4
	asr	r1, r3, #0x18
	and	r1, r1, r4
	asr	r2, r3, #0x19
	and	r2, r2, r4
	asr	r3, r3, #0x1a
	and	r3, r3, r4
	bl	GetBattleMonSpritePalettesMask
	orr	r6, r6, r0
	add	r0, r5, #0
	add	r1, r6, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	gBattleAnimArgs
.Lfe1:
	.size	 AnimTask_BlendBattleAnimPal,.Lfe1-AnimTask_BlendBattleAnimPal
	.align	2, 0
	.globl	AnimTask_BlendBattleAnimPalExclude
	.type	 AnimTask_BlendBattleAnimPalExclude,function
	.thumb_func
AnimTask_BlendBattleAnimPalExclude:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r1, sp
	mov	r0, #0xff
	strb	r0, [r1, #0x1]
	mov	r0, #0x1
	bl	UnpackSelectedBattlePalettes
	add	r5, r0, #0
	ldr	r0, .L27
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x7
	bhi	.L8	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L27+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L28:
	.align	2, 0
.L27:
	.word	gBattleAnimArgs
	.word	.L17
	.align	2, 0
	.align	2, 0
.L17:
	.word	.L10
	.word	.L12
	.word	.L9
	.word	.L11
	.word	.L13
	.word	.L14
	.word	.L15
	.word	.L16
.L9:
	mov	r5, #0x0
.L10:
	mov	r0, sp
	ldr	r1, .L29
	b	.L25
.L30:
	.align	2, 0
.L29:
	.word	gBattleAnimAttacker
.L11:
	mov	r5, #0x0
.L12:
	mov	r0, sp
	ldr	r1, .L31
.L25:
	ldrb	r1, [r1]
	strb	r1, [r0]
	b	.L8
.L32:
	.align	2, 0
.L31:
	.word	gBattleAnimTarget
.L13:
	mov	r1, sp
	ldr	r0, .L33
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L33+0x4
	ldrb	r0, [r0]
	strb	r0, [r1, #0x1]
	b	.L8
.L34:
	.align	2, 0
.L33:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L14:
	mov	r1, sp
	mov	r0, #0xff
	strb	r0, [r1]
	b	.L8
.L15:
	mov	r5, #0x0
	mov	r2, sp
	ldr	r0, .L35
	b	.L26
.L36:
	.align	2, 0
.L35:
	.word	gBattleAnimAttacker
.L16:
	mov	r5, #0x0
	mov	r2, sp
	ldr	r0, .L37
.L26:
	ldrb	r0, [r0]
	mov	r1, #0x2
	eor	r0, r0, r1
	strb	r0, [r2]
.L8:
	mov	r4, #0x0
	mov	r6, sp
.L22:
	ldrb	r0, [r6]
	cmp	r4, r0
	beq	.L21	@cond_branch
	ldrb	r0, [r6, #0x1]
	cmp	r4, r0
	beq	.L21	@cond_branch
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L21	@cond_branch
	add	r0, r4, #0
	bl	GetSpritePalIdxByBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r0
	orr	r5, r5, r1
.L21:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L22	@cond_branch
	add	r0, r7, #0
	add	r1, r5, #0
	bl	StartBlendAnimSpriteColor
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gBattleAnimTarget
.Lfe2:
	.size	 AnimTask_BlendBattleAnimPalExclude,.Lfe2-AnimTask_BlendBattleAnimPalExclude
	.align	2, 0
	.globl	AnimTask_SetCamouflageBlend
	.type	 AnimTask_SetCamouflageBlend,function
	.thumb_func
AnimTask_SetCamouflageBlend:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L54
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	bl	UnpackSelectedBattlePalettes
	add	r2, r0, #0
	ldr	r0, .L54+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x9
	bhi	.L40	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L54+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L55:
	.align	2, 0
.L54:
	.word	gBattleAnimArgs
	.word	gBattleTerrain
	.word	.L51
	.align	2, 0
	.align	2, 0
.L51:
	.word	.L41
	.word	.L42
	.word	.L43
	.word	.L44
	.word	.L45
	.word	.L46
	.word	.L47
	.word	.L48
	.word	.L49
	.word	.L50
.L41:
	ldr	r1, .L56
	ldr	r0, .L56+0x4
	b	.L53
.L57:
	.align	2, 0
.L56:
	.word	gBattleAnimArgs
	.word	0xb0c
.L42:
	ldr	r1, .L58
	mov	r0, #0x9e
	lsl	r0, r0, #0x4
	b	.L53
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimArgs
.L43:
	ldr	r1, .L60
	ldr	r0, .L60+0x4
	b	.L53
.L61:
	.align	2, 0
.L60:
	.word	gBattleAnimArgs
	.word	0x2f1e
.L44:
	ldr	r1, .L62
	mov	r0, #0x90
	lsl	r0, r0, #0x7
	b	.L53
.L63:
	.align	2, 0
.L62:
	.word	gBattleAnimArgs
.L45:
	ldr	r1, .L64
	ldr	r0, .L64+0x4
	b	.L53
.L65:
	.align	2, 0
.L64:
	.word	gBattleAnimArgs
	.word	0x7ecb
.L46:
	ldr	r1, .L66
	ldr	r0, .L66+0x4
	b	.L53
.L67:
	.align	2, 0
.L66:
	.word	gBattleAnimArgs
	.word	0x7ecb
.L47:
	ldr	r1, .L68
	ldr	r0, .L68+0x4
	b	.L53
.L69:
	.align	2, 0
.L68:
	.word	gBattleAnimArgs
	.word	0x2a16
.L48:
	ldr	r1, .L70
	ldr	r0, .L70+0x4
	b	.L53
.L71:
	.align	2, 0
.L70:
	.word	gBattleAnimArgs
	.word	0xd2e
.L49:
.L50:
	ldr	r1, .L72
	ldr	r0, .L72+0x4
.L53:
	strh	r0, [r1, #0x8]
.L40:
	add	r0, r4, #0
	add	r1, r2, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gBattleAnimArgs
	.word	0x7fff
.Lfe3:
	.size	 AnimTask_SetCamouflageBlend,.Lfe3-AnimTask_SetCamouflageBlend
	.align	2, 0
	.globl	AnimTask_BlendParticle
	.type	 AnimTask_BlendParticle,function
	.thumb_func
AnimTask_BlendParticle:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L75
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r1, #0x1
	lsl	r1, r1, r0
	add	r0, r4, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gBattleAnimArgs
.Lfe4:
	.size	 AnimTask_BlendParticle,.Lfe4-AnimTask_BlendParticle
	.align	2, 0
	.type	 StartBlendAnimSpriteColor,function
	.thumb_func
StartBlendAnimSpriteColor:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L78
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	strh	r1, [r2, #0x8]
	lsr	r1, r1, #0x10
	strh	r1, [r2, #0xa]
	ldr	r3, .L78+0x4
	ldrh	r1, [r3, #0x2]
	strh	r1, [r2, #0xc]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r2, #0xe]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r2, #0x10]
	ldrh	r1, [r3, #0x8]
	strh	r1, [r2, #0x12]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r2, #0x1c]
	ldr	r1, .L78+0x8
	str	r1, [r2]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_BlendSpriteColor_Step2
.Lfe5:
	.size	 StartBlendAnimSpriteColor,.Lfe5-StartBlendAnimSpriteColor
	.align	2, 0
	.type	 AnimTask_BlendSpriteColor_Step2,function
	.thumb_func
AnimTask_BlendSpriteColor_Step2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L92
	lsl	r5, r7, #0x2
	add	r0, r5, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1a]
	mov	r8, r0
	mov	r4, #0x1a
	ldrsh	r1, [r3, r4]
	mov	r4, #0xc
	ldrsh	r0, [r3, r4]
	mov	r9, r2
	cmp	r1, r0
	bne	.L81	@cond_branch
	strh	r6, [r3, #0x1a]
	mov	r0, #0x8
	ldrsh	r4, [r3, r0]
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	mov	r8, r5
	cmp	r4, #0
	beq	.L83	@cond_branch
	add	r5, r3, #0
.L84:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L85	@cond_branch
	ldrb	r2, [r5, #0x1c]
	ldrh	r3, [r5, #0x12]
	add	r0, r6, #0
	mov	r1, #0x10
	bl	BlendPalette
.L85:
	add	r0, r6, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsr	r4, r4, #0x1
	cmp	r4, #0
	bne	.L84	@cond_branch
.L83:
	mov	r4, r8
	add	r0, r4, r7
	lsl	r0, r0, #0x3
	mov	r1, r9
	add	r2, r0, r1
	ldrh	r0, [r2, #0x1c]
	mov	r4, #0x1c
	ldrsh	r3, [r2, r4]
	mov	r4, #0x10
	ldrsh	r1, [r2, r4]
	cmp	r3, r1
	bge	.L87	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r2, #0x1c]
	b	.L91
.L93:
	.align	2, 0
.L92:
	.word	gTasks
.L87:
	cmp	r3, r1
	ble	.L89	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x1c]
	b	.L91
.L89:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	b	.L91
.L81:
	mov	r0, r8
	add	r0, r0, #0x1
	strh	r0, [r3, #0x1a]
.L91:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimTask_BlendSpriteColor_Step2,.Lfe6-AnimTask_BlendSpriteColor_Step2
	.align	2, 0
	.globl	AnimTask_HardwarePaletteFade
	.type	 AnimTask_HardwarePaletteFade,function
	.thumb_func
AnimTask_HardwarePaletteFade:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L95
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x2]
	ldrb	r2, [r4, #0x4]
	ldrb	r3, [r4, #0x6]
	ldrb	r4, [r4, #0x8]
	str	r4, [sp]
	bl	BeginHardwarePaletteFade
	ldr	r1, .L95+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L95+0x8
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_HardwarePaletteFade_Step
.Lfe7:
	.size	 AnimTask_HardwarePaletteFade,.Lfe7-AnimTask_HardwarePaletteFade
	.align	2, 0
	.type	 AnimTask_HardwarePaletteFade_Step,function
	.thumb_func
AnimTask_HardwarePaletteFade_Step:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L99
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L98	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L98:
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gPaletteFade
.Lfe8:
	.size	 AnimTask_HardwarePaletteFade_Step,.Lfe8-AnimTask_HardwarePaletteFade_Step
	.align	2, 0
	.globl	AnimTask_TraceMonBlended
	.type	 AnimTask_TraceMonBlended,function
	.thumb_func
AnimTask_TraceMonBlended:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L102
	add	r1, r1, r0
	ldr	r2, .L102+0x4
	ldrh	r0, [r2]
	mov	r3, #0x0
	strh	r0, [r1, #0x8]
	strh	r3, [r1, #0xa]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0xc]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r1, #0xe]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r1, #0x10]
	strh	r3, [r1, #0x12]
	ldr	r0, .L102+0x8
	str	r0, [r1]
	bx	lr
.L103:
	.align	2, 0
.L102:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_TraceMonBlended_Step
.Lfe9:
	.size	 AnimTask_TraceMonBlended,.Lfe9-AnimTask_TraceMonBlended
	.align	2, 0
	.type	 AnimTask_TraceMonBlended_Step,function
	.thumb_func
AnimTask_TraceMonBlended_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r2, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L113
	add	r4, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L105	@cond_branch
	ldrh	r1, [r4, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L106	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xa]
	b	.L111
.L114:
	.align	2, 0
.L113:
	.word	gTasks
.L106:
	ldrb	r0, [r4, #0x8]
	bl	CloneBattlerSpriteWithBlend
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L108	@cond_branch
	ldr	r6, .L115
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r3, r1, r6
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	mov	r2, #0x2
	cmp	r0, #0
	beq	.L109	@cond_branch
	mov	r2, #0x1
.L109:
	lsl	r2, r2, #0x2
	ldrb	r1, [r3, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3, #0x5]
	mov	r0, #0x14
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r4, #0xe]
	strh	r1, [r0, #0x2e]
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r5, [r0, #0x30]
	mov	r0, #0x14
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x5
	strh	r1, [r0, #0x32]
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L115+0x4
	str	r1, [r0]
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
.L108:
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0xc]
	strh	r0, [r4, #0xa]
	b	.L111
.L116:
	.align	2, 0
.L115:
	.word	gSprites
	.word	AnimMonTrace
.L105:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L111	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L111:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 AnimTask_TraceMonBlended_Step,.Lfe10-AnimTask_TraceMonBlended_Step
	.align	2, 0
	.type	 AnimMonTrace,function
	.thumb_func
AnimMonTrace:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L118	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	b	.L119
.L118:
	ldr	r3, .L120
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySpriteWithActiveSheet
.L119:
	pop	{r4}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	gTasks
.Lfe11:
	.size	 AnimMonTrace,.Lfe11-AnimMonTrace
	.align	2, 0
	.globl	AnimTask_DrawFallingWhiteLinesOnAttacker
	.type	 AnimTask_DrawFallingWhiteLinesOnAttacker,function
	.thumb_func
AnimTask_DrawFallingWhiteLinesOnAttacker:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r7, #0x0
	ldr	r0, .L132
	strh	r7, [r0]
	ldr	r0, .L132+0x4
	strh	r7, [r0]
	ldr	r1, .L132+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L132+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L132+0x10
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L132+0x14
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0xa
	bl	GetGpuReg
	add	r4, sp, #0x10
	strh	r0, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x4
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r2, sp
	add	r2, r2, #0x11
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L123	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
.L123:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L124	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L124	@cond_branch
	ldr	r5, .L132+0x18
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L126	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L124	@cond_branch
.L126:
	ldrb	r0, [r5]
	mov	r6, #0x2
	eor	r0, r0, r6
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L124	@cond_branch
	ldr	r3, .L132+0x1c
	ldr	r1, .L132+0x20
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldrb	r1, [r4]
	mov	r0, r8
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r7, #0x1
.L124:
	ldr	r4, .L132+0x18
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L128	@cond_branch
	ldr	r1, .L132+0x24
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L132+0x28
	b	.L131
.L133:
	.align	2, 0
.L132:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	0xc08
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L128:
	ldr	r1, .L134
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L134+0x4
.L131:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r0, .L134+0x8
	ldrb	r0, [r0]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateInvisibleSpriteCopy
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L134+0xc
	bl	AnimLoadCompressedBgTilemap
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L130	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
.L130:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L134+0x10
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L134+0x14
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	add	r1, r1, #0x1
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r2, .L134+0x18
	ldr	r0, .L134+0x1c
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r2]
	ldr	r2, .L134+0x20
	ldrh	r0, [r1, #0x22]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r2]
	ldr	r1, .L134+0x24
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	strh	r7, [r0, #0x14]
	ldr	r1, .L134+0x28
	str	r1, [r0]
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L135:
	.align	2, 0
.L134:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleAnimAttacker
	.word	gFile_graphics_battle_anims_masks_curse_tilemap
	.word	gFile_graphics_battle_anims_masks_curse_sheet
	.word	sRgbWhite
	.word	gBattle_BG1_X
	.word	gSprites
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	AnimTask_DrawFallingWhiteLinesOnAttacker_Step
.Lfe12:
	.size	 AnimTask_DrawFallingWhiteLinesOnAttacker,.Lfe12-AnimTask_DrawFallingWhiteLinesOnAttacker
	.align	2, 0
	.type	 AnimTask_DrawFallingWhiteLinesOnAttacker_Step,function
	.thumb_func
AnimTask_DrawFallingWhiteLinesOnAttacker_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L141
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x4
	mov	r1, #0x0
	mov	r8, r1
	strh	r0, [r5, #0x1c]
	ldr	r7, .L141+0x4
	ldrh	r2, [r7]
	sub	r1, r2, #0x4
	strh	r1, [r7]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L137	@cond_branch
	mov	r0, r8
	strh	r0, [r5, #0x1c]
	add	r0, r2, #0
	add	r0, r0, #0x3c
	strh	r0, [r7]
	ldrh	r0, [r5, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L137	@cond_branch
	mov	r0, #0x0
	bl	ResetBattleAnimBg
	ldr	r0, .L141+0x8
	mov	r1, r8
	strh	r1, [r0]
	ldr	r0, .L141+0xc
	strh	r1, [r0]
	ldr	r4, .L141+0x10
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L139	@cond_branch
	mov	r0, #0xa
	bl	GetGpuReg
	add	r1, sp, #0x10
	strh	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrh	r1, [r1]
	mov	r0, #0xa
	bl	SetGpuReg
.L139:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r4, .L141+0x14
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	InitBattleAnimBg
	mov	r1, #0x14
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L140	@cond_branch
	ldr	r2, .L141+0x18
	ldr	r0, .L141+0x1c
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
.L140:
	mov	r2, r8
	strh	r2, [r7]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L137:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	gTasks
	.word	gBattle_BG1_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe13:
	.size	 AnimTask_DrawFallingWhiteLinesOnAttacker_Step,.Lfe13-AnimTask_DrawFallingWhiteLinesOnAttacker_Step
	.align	2, 0
	.globl	InitStatsChangeAnimation
	.type	 InitStatsChangeAnimation,function
	.thumb_func
InitStatsChangeAnimation:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L149
	mov	r0, #0x18
	bl	AllocZeroed
	str	r0, [r4]
	mov	r2, #0x0
	ldr	r3, .L149+0x4
.L147:
	ldr	r1, [r4]
	lsl	r0, r2, #0x1
	add	r1, r1, #0x4
	add	r1, r1, r0
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L147	@cond_branch
	ldr	r0, .L149+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L149+0xc
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	sAnimStatsChangeData
	.word	gBattleAnimArgs
	.word	gTasks
	.word	StatsChangeAnimation_Step1
.Lfe14:
	.size	 InitStatsChangeAnimation,.Lfe14-InitStatsChangeAnimation
	.align	2, 0
	.type	 StatsChangeAnimation_Step1,function
	.thumb_func
StatsChangeAnimation_Step1:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L165
	ldr	r1, [r0]
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L152	@cond_branch
	ldr	r0, .L165+0x4
	b	.L163
.L166:
	.align	2, 0
.L165:
	.word	sAnimStatsChangeData
	.word	gBattleAnimAttacker
.L152:
	ldr	r0, .L167
.L163:
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r4, .L167+0x4
	ldr	r2, [r4]
	ldrb	r0, [r2]
	mov	r1, #0x2
	eor	r0, r0, r1
	strb	r0, [r2, #0x1]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L155	@cond_branch
	ldr	r1, [r4]
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L154	@cond_branch
	ldrb	r0, [r1, #0x1]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L154	@cond_branch
.L155:
	ldr	r1, [r4]
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
.L154:
	ldr	r0, .L167+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L167+0xc
	strh	r1, [r0]
	ldr	r1, .L167+0x10
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L167+0x14
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L167+0x18
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L156	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L156:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L157	@cond_branch
	ldr	r4, .L167+0x4
	ldr	r1, [r4]
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L157	@cond_branch
	ldrb	r0, [r1]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L159	@cond_branch
	ldr	r0, [r4]
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L157	@cond_branch
.L159:
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1
	bne	.L157	@cond_branch
	ldr	r3, .L167+0x1c
	ldr	r1, .L167+0x20
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	ldr	r0, [r4]
	strb	r5, [r0, #0x2]
.L157:
	ldr	r4, .L167+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L161	@cond_branch
	ldr	r1, .L167+0x24
	ldr	r0, [r4]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L167+0x28
	b	.L164
.L168:
	.align	2, 0
.L167:
	.word	gBattleAnimTarget
	.word	sAnimStatsChangeData
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L161:
	ldr	r1, .L169
	ldr	r0, [r4]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L169+0x4
.L164:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	ldr	r1, [r4]
	strh	r0, [r1, #0x14]
	ldr	r0, .L169+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L169+0xc
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L170:
	.align	2, 0
.L169:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gTasks
	.word	StatsChangeAnimation_Step2
.Lfe15:
	.size	 StatsChangeAnimation_Step1,.Lfe15-StatsChangeAnimation_Step1
	.align	2, 0
	.type	 StatsChangeAnimation_Step2,function
	.thumb_func
StatsChangeAnimation_Step2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	ldr	r6, .L195
	ldr	r4, .L195+0x4
	ldr	r2, [r4]
	ldrb	r0, [r2]
	add	r1, r0, r6
	ldrb	r1, [r1]
	ldrh	r2, [r2, #0x14]
	bl	CreateInvisibleSpriteCopy
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r2, [r4]
	mov	r1, #0xa
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L172	@cond_branch
	ldrb	r0, [r2, #0x1]
	add	r1, r0, r6
	ldrb	r1, [r1]
	ldrh	r2, [r2, #0x14]
	bl	CreateInvisibleSpriteCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L172:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	ldr	r0, [r4]
	mov	r4, #0x4
	ldrsh	r0, [r0, r4]
	cmp	r0, #0
	bne	.L173	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L195+0x8
	bl	AnimLoadCompressedBgTilemap
	b	.L174
.L196:
	.align	2, 0
.L195:
	.word	gBattlerSpriteIds
	.word	sAnimStatsChangeData
	.word	gBattleStatMask1_Tilemap
.L173:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L197
	bl	AnimLoadCompressedBgTilemap
.L174:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L175	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
.L175:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L197+0x4
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L197+0x8
	ldr	r0, [r0]
	mov	r1, #0x6
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x6
	bhi	.L184	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L197+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L198:
	.align	2, 0
.L197:
	.word	gBattleStatMask2_Tilemap
	.word	gBattleStatMask_Gfx
	.word	sAnimStatsChangeData
	.word	.L185
	.align	2, 0
	.align	2, 0
.L185:
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L181
	.word	.L182
	.word	.L183
.L177:
	ldr	r0, .L199
	b	.L192
.L200:
	.align	2, 0
.L199:
	.word	gBattleStatMask2_Pal
.L178:
	ldr	r0, .L201
	b	.L192
.L202:
	.align	2, 0
.L201:
	.word	gBattleStatMask1_Pal
.L179:
	ldr	r0, .L203
	b	.L192
.L204:
	.align	2, 0
.L203:
	.word	gBattleStatMask3_Pal
.L180:
	ldr	r0, .L205
	b	.L192
.L206:
	.align	2, 0
.L205:
	.word	gBattleStatMask4_Pal
.L181:
	ldr	r0, .L207
	b	.L192
.L208:
	.align	2, 0
.L207:
	.word	gBattleStatMask6_Pal
.L182:
	ldr	r0, .L209
	b	.L192
.L210:
	.align	2, 0
.L209:
	.word	gBattleStatMask7_Pal
.L183:
	ldr	r0, .L211
.L192:
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L176
.L212:
	.align	2, 0
.L211:
	.word	gBattleStatMask8_Pal
.L184:
	ldr	r0, .L213
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
.L176:
	ldr	r3, .L213+0x4
	mov	r2, #0x0
	strh	r2, [r3]
	ldr	r0, .L213+0x8
	strh	r2, [r0]
	ldr	r1, .L213+0xc
	ldr	r0, [r1]
	mov	r4, #0x4
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	cmp	r0, #0x1
	bne	.L186	@cond_branch
	mov	r0, #0x40
	strh	r0, [r3]
	ldr	r2, .L213+0x10
	lsl	r3, r5, #0x2
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L213+0x14
	b	.L193
.L214:
	.align	2, 0
.L213:
	.word	gBattleStatMask5_Pal
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sAnimStatsChangeData
	.word	gTasks
	.word	0xfffd
.L186:
	ldr	r2, .L215
	lsl	r3, r5, #0x2
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x3
.L193:
	strh	r1, [r0, #0xa]
	ldr	r0, [r4]
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L188	@cond_branch
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0xa
	strh	r1, [r0, #0x10]
	mov	r1, #0x14
	b	.L194
.L216:
	.align	2, 0
.L215:
	.word	gTasks
.L188:
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0xd
	strh	r1, [r0, #0x10]
	mov	r1, #0x1e
.L194:
	strh	r1, [r0, #0x12]
	add	r1, r3, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r7, [r1, #0x8]
	ldr	r3, [r4]
	ldrh	r0, [r3, #0xa]
	strh	r0, [r1, #0xc]
	mov	r4, r8
	strh	r4, [r1, #0xe]
	ldrb	r0, [r3, #0x2]
	strh	r0, [r1, #0x14]
	ldr	r2, .L217
	ldrb	r0, [r3, #0x1]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1, #0x16]
	ldr	r0, .L217+0x4
	str	r0, [r1]
	mov	r1, #0x4
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L190	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning2
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xe8
	bl	PlaySE12WithPanning
	b	.L191
.L218:
	.align	2, 0
.L217:
	.word	gBattlerSpriteIds
	.word	StatsChangeAnimation_Step3
.L190:
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning2
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xee
	bl	PlaySE12WithPanning
.L191:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 StatsChangeAnimation_Step2,.Lfe16-StatsChangeAnimation_Step2
	.align	2, 0
	.type	 StatsChangeAnimation_Step3,function
	.thumb_func
StatsChangeAnimation_Step3:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L237
	ldr	r1, .L237+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0xa]
	ldrh	r1, [r2]
	add	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x26
	ldrsh	r2, [r5, r0]
	cmp	r2, #0x1
	beq	.L224	@cond_branch
	cmp	r2, #0x1
	bgt	.L235	@cond_branch
	cmp	r2, #0
	beq	.L221	@cond_branch
	b	.L220
.L238:
	.align	2, 0
.L237:
	.word	gBattle_BG1_Y
	.word	gTasks
.L235:
	cmp	r2, #0x2
	beq	.L226	@cond_branch
	cmp	r2, #0x3
	beq	.L229	@cond_branch
	b	.L220
.L221:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB2183
	b	.L220	@long jump
.LCB2183:
	strh	r2, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	cmp	r1, r0
	beq	.LCB2205
	b	.L220	@long jump
.LCB2205:
	b	.L236
.L224:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r5, r2]
	cmp	r0, r1
	beq	.LCB2218
	b	.L220	@long jump
.LCB2218:
	b	.L236
.L226:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L220	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x20
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L220	@cond_branch
	mov	r0, #0x0
	bl	ResetBattleAnimBg
.L236:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
	b	.L220
.L229:
	ldr	r0, .L239
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L239+0x4
	strh	r1, [r0]
	ldr	r4, .L239+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L230	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L230:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L239+0xc
	add	r0, r0, r4
	bl	DestroySprite
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L231	@cond_branch
	mov	r2, #0xe
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
.L231:
	mov	r1, #0x14
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L232	@cond_branch
	mov	r2, #0x16
	ldrsh	r0, [r5, r2]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
.L232:
	ldr	r4, .L239+0x10
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L220:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
	.word	sAnimStatsChangeData
.Lfe17:
	.size	 StatsChangeAnimation_Step3,.Lfe17-StatsChangeAnimation_Step3
	.align	2, 0
	.globl	AnimTask_Flash
	.type	 AnimTask_Flash,function
	.thumb_func
AnimTask_Flash:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	GetBattleMonSpritePalettesMask
	add	r6, r0, #0
	mov	r1, #0x0
	bl	SetPalettesToColor
	ldr	r0, .L242
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	lsr	r0, r6, #0x10
	mov	r5, #0x0
	strh	r0, [r4, #0x24]
	str	r5, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	add	r6, r0, #0
	ldr	r1, .L242+0x4
	and	r6, r6, r1
	add	r0, r6, #0
	bl	SetPalettesToColor
	strh	r6, [r4, #0x26]
	strh	r5, [r4, #0x8]
	strh	r5, [r4, #0xa]
	ldr	r0, .L242+0x8
	str	r0, [r4]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	gTasks
	.word	0xffff
	.word	AnimTask_Flash_Step
.Lfe18:
	.size	 AnimTask_Flash,.Lfe18-AnimTask_Flash
	.align	2, 0
	.type	 AnimTask_Flash_Step,function
	.thumb_func
AnimTask_Flash_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L263
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L248	@cond_branch
	cmp	r1, #0x1
	bgt	.L261	@cond_branch
	cmp	r1, #0
	beq	.L246	@cond_branch
	b	.L245
.L264:
	.align	2, 0
.L263:
	.word	gTasks
.L261:
	cmp	r1, #0x2
	beq	.L258	@cond_branch
	b	.L245
.L246:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L245	@cond_branch
	strh	r1, [r4, #0xa]
	mov	r0, #0x10
	strh	r0, [r4, #0xc]
	b	.L262
.L248:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L245	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r5, #0x0
	mov	r6, #0x1
.L253:
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	asr	r0, r0, r5
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L254	@cond_branch
	lsl	r0, r5, #0x14
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0xc]
	mov	r1, #0x10
	ldr	r3, .L265
	bl	BlendPalette
.L254:
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	asr	r0, r0, r5
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L252	@cond_branch
	lsl	r0, r5, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0xc]
	mov	r1, #0x10
	mov	r3, #0x0
	bl	BlendPalette
.L252:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xf
	bls	.L253	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L245	@cond_branch
.L262:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L245
.L266:
	.align	2, 0
.L265:
	.word	0xffff
.L258:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L245:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimTask_Flash_Step,.Lfe19-AnimTask_Flash_Step
	.align	2, 0
	.type	 SetPalettesToColor,function
	.thumb_func
SetPalettesToColor:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	mov	r2, #0x0
.L271:
	mov	r0, #0x1
	and	r0, r0, r3
	lsr	r4, r3, #0x1
	add	r5, r2, #0x1
	cmp	r0, #0
	beq	.L270	@cond_branch
	lsl	r0, r2, #0x14
	lsr	r2, r0, #0x10
	add	r0, r2, #0
	add	r0, r0, #0x10
	cmp	r2, r0
	bge	.L270	@cond_branch
	ldr	r1, .L279
	add	r3, r0, #0
.L276:
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	strh	r6, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r3
	blt	.L276	@cond_branch
.L270:
	add	r3, r4, #0
	lsl	r0, r5, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x1f
	bls	.L271	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	gPlttBufferFaded
.Lfe20:
	.size	 SetPalettesToColor,.Lfe20-SetPalettesToColor
	.align	2, 0
	.globl	AnimTask_BlendNonAttackerPalettes
	.type	 AnimTask_BlendNonAttackerPalettes,function
	.thumb_func
AnimTask_BlendNonAttackerPalettes:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	mov	r2, #0x0
	ldr	r0, .L293
	ldrb	r3, [r0]
	mov	r5, #0x1
.L285:
	cmp	r3, r2
	beq	.L284	@cond_branch
	add	r1, r2, #0
	add	r1, r1, #0x10
	add	r0, r5, #0
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L284:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L285	@cond_branch
	mov	r2, #0x5
	ldr	r0, .L293+0x4
	add	r1, r0, #0
	add	r1, r1, #0x8
.L291:
	ldrh	r0, [r1]
	strh	r0, [r1, #0x2]
	sub	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L291	@cond_branch
	add	r0, r6, #0
	add	r1, r4, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe21:
	.size	 AnimTask_BlendNonAttackerPalettes,.Lfe21-AnimTask_BlendNonAttackerPalettes
	.align	2, 0
	.globl	AnimTask_StartSlidingBg
	.type	 AnimTask_StartSlidingBg,function
	.thumb_func
AnimTask_StartSlidingBg:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	bl	ToggleBg3Mode
	ldr	r0, .L297
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L297+0x4
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L296	@cond_branch
	ldr	r0, .L297+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L296	@cond_branch
	ldrh	r0, [r4]
	neg	r0, r0
	strh	r0, [r4]
	ldrh	r0, [r4, #0x2]
	neg	r0, r0
	strh	r0, [r4, #0x2]
.L296:
	ldr	r0, .L297+0xc
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r2, .L297+0x4
	ldrh	r0, [r2]
	strh	r0, [r1, #0xa]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0xc]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r1, #0xe]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L298:
	.align	2, 0
.L297:
	.word	AnimTask_UpdateSlidingBg
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gTasks
.Lfe22:
	.size	 AnimTask_StartSlidingBg,.Lfe22-AnimTask_StartSlidingBg
	.align	2, 0
	.type	 AnimTask_UpdateSlidingBg,function
	.thumb_func
AnimTask_UpdateSlidingBg:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L301
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r3, [r1, #0xa]
	ldrh	r0, [r1, #0x1c]
	add	r3, r3, r0
	mov	r4, #0x0
	mov	ip, r4
	strh	r3, [r1, #0x1c]
	ldrh	r2, [r1, #0xc]
	ldrh	r7, [r1, #0x1e]
	add	r2, r2, r7
	strh	r2, [r1, #0x1e]
	ldr	r6, .L301+0x4
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x18
	ldrh	r4, [r6]
	add	r0, r0, r4
	strh	r0, [r6]
	ldr	r4, .L301+0x8
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r7, [r4]
	add	r0, r0, r7
	strh	r0, [r4]
	mov	r0, #0xff
	and	r3, r3, r0
	strh	r3, [r1, #0x1c]
	and	r2, r2, r0
	strh	r2, [r1, #0x1e]
	ldr	r0, .L301+0xc
	mov	r3, #0xe
	ldrsh	r2, [r0, r3]
	mov	r7, #0xe
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bne	.L300	@cond_branch
	mov	r0, ip
	strh	r0, [r6]
	strh	r0, [r4]
	mov	r0, #0x1
	bl	ToggleBg3Mode
	add	r0, r5, #0
	bl	DestroyTask
.L300:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	gTasks
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattleAnimArgs
.Lfe23:
	.size	 AnimTask_UpdateSlidingBg,.Lfe23-AnimTask_UpdateSlidingBg
	.align	2, 0
	.globl	AnimTask_GetAttackerSide
	.type	 AnimTask_GetAttackerSide,function
	.thumb_func
AnimTask_GetAttackerSide:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L304
	ldrb	r0, [r0]
	bl	GetBattlerSide
	ldr	r1, .L304+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L305:
	.align	2, 0
.L304:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe24:
	.size	 AnimTask_GetAttackerSide,.Lfe24-AnimTask_GetAttackerSide
	.align	2, 0
	.globl	AnimTask_GetTargetSide
	.type	 AnimTask_GetTargetSide,function
	.thumb_func
AnimTask_GetTargetSide:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L307
	ldrb	r0, [r0]
	bl	GetBattlerSide
	ldr	r1, .L307+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.Lfe25:
	.size	 AnimTask_GetTargetSide,.Lfe25-AnimTask_GetTargetSide
	.align	2, 0
	.globl	AnimTask_GetTargetIsAttackerPartner
	.type	 AnimTask_GetTargetIsAttackerPartner,function
	.thumb_func
AnimTask_GetTargetIsAttackerPartner:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r5, .L311
	mov	r4, #0x0
	ldr	r0, .L311+0x4
	ldrb	r2, [r0]
	mov	r0, #0x2
	ldr	r1, .L311+0x8
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L310	@cond_branch
	mov	r4, #0x1
.L310:
	strh	r4, [r5, #0xe]
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L312:
	.align	2, 0
.L311:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.Lfe26:
	.size	 AnimTask_GetTargetIsAttackerPartner,.Lfe26-AnimTask_GetTargetIsAttackerPartner
	.align	2, 0
	.globl	AnimTask_SetAllNonAttackersInvisiblity
	.type	 AnimTask_SetAllNonAttackersInvisiblity,function
	.thumb_func
AnimTask_SetAllNonAttackersInvisiblity:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r6, .L320
.L317:
	ldr	r0, .L320+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L316	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L316	@cond_branch
	ldr	r0, .L320+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldr	r1, .L320+0xc
	add	r2, r2, #0x3e
	mov	r0, #0x1
	ldrb	r3, [r1]
	and	r3, r3, r0
	lsl	r3, r3, #0x2
	ldrb	r0, [r2]
	mov	r7, #0x5
	neg	r7, r7
	add	r1, r7, #0
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
.L316:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L317	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L321:
	.align	2, 0
.L320:
	.word	gSprites
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	gBattleAnimArgs
.Lfe27:
	.size	 AnimTask_SetAllNonAttackersInvisiblity,.Lfe27-AnimTask_SetAllNonAttackersInvisiblity
	.align	2, 0
	.globl	StartMonScrollingBgMask
	.type	 StartMonScrollingBgMask,function
	.thumb_func
StartMonScrollingBgMask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	ldr	r1, [sp, #0x44]
	ldr	r4, [sp, #0x48]
	ldr	r5, [sp, #0x4c]
	ldr	r6, [sp, #0x50]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp, #0x14]
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x18]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x1c]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	sl, r6
	mov	r0, #0x0
	str	r0, [sp, #0x20]
	mov	r0, #0x2
	add	r6, r7, #0
	eor	r6, r6, r0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L324	@cond_branch
	mov	r1, r8
	cmp	r1, #0
	beq	.L323	@cond_branch
	add	r0, r6, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L323	@cond_branch
.L324:
	mov	r2, #0x0
	mov	r8, r2
.L323:
	ldr	r0, .L331
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L331+0x4
	strh	r1, [r0]
	ldr	r1, .L331+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L331+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L331+0x10
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0xa
	bl	GetGpuReg
	add	r4, sp, #0x10
	strh	r0, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r2, sp
	add	r2, r2, #0x11
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L325	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4]
.L325:
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L326	@cond_branch
	ldr	r1, .L331+0x14
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L331+0x18
	b	.L330
.L332:
	.align	2, 0
.L331:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L326:
	ldr	r1, .L333
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L333+0x4
.L330:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r5, .L333+0x8
	add	r0, r7, r5
	ldrb	r1, [r0]
	add	r0, r7, #0
	add	r2, r4, #0
	bl	CreateInvisibleSpriteCopy
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, r8
	cmp	r0, #0
	beq	.L328	@cond_branch
	add	r0, r6, r5
	ldrb	r1, [r0]
	add	r0, r6, #0
	add	r2, r4, #0
	bl	CreateInvisibleSpriteCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x20]
.L328:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, [sp, #0x58]
	bl	AnimLoadCompressedBgTilemap
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L329	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
.L329:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	mov	r1, sp
	ldrh	r2, [r1, #0xa]
	ldr	r1, [sp, #0x54]
	bl	AnimLoadCompressedBgGfx
	mov	r0, sp
	ldrb	r1, [r0, #0x8]
	lsl	r1, r1, #0x4
	ldr	r0, [sp, #0x5c]
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r0, .L333+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L333+0x10
	strh	r1, [r0]
	ldr	r1, .L333+0x14
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, sp
	ldrh	r1, [r1, #0x14]
	strh	r1, [r0, #0xa]
	mov	r2, sp
	ldrh	r2, [r2, #0x18]
	strh	r2, [r0, #0x10]
	mov	r1, sl
	strh	r1, [r0, #0x12]
	mov	r2, sp
	ldrh	r2, [r2, #0x1c]
	strh	r2, [r0, #0x14]
	strh	r7, [r0, #0x8]
	mov	r1, r8
	strh	r1, [r0, #0xc]
	mov	r2, sp
	ldrh	r2, [r2, #0x20]
	strh	r2, [r0, #0xe]
	ldr	r1, .L333+0x18
	str	r1, [r0]
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L334:
	.align	2, 0
.L333:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerSpriteIds
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	UpdateMonScrollingBgMask
.Lfe28:
	.size	 StartMonScrollingBgMask,.Lfe28-StartMonScrollingBgMask
	.align	2, 0
	.type	 UpdateMonScrollingBgMask,function
	.thumb_func
UpdateMonScrollingBgMask:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L354
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r0, #0xa
	ldrsh	r2, [r3, r0]
	add	r5, r1, #0
	cmp	r2, #0
	bge	.L336	@cond_branch
	neg	r2, r2
.L336:
	ldrh	r0, [r3, #0x22]
	add	r4, r0, r2
	strh	r4, [r3, #0x22]
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bge	.L337	@cond_branch
	ldr	r2, .L354+0x4
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2]
	sub	r0, r0, r1
	strh	r0, [r2]
	b	.L338
.L355:
	.align	2, 0
.L354:
	.word	gTasks
	.word	gBattle_BG1_Y
.L337:
	ldr	r1, .L356
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r1]
	add	r0, r0, r2
	strh	r0, [r1]
.L338:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r5
	ldrh	r1, [r5, #0x22]
	mov	r0, #0xff
	and	r0, r0, r1
	mov	r2, #0x0
	strh	r0, [r5, #0x22]
	mov	r3, #0x26
	ldrsh	r0, [r5, r3]
	cmp	r0, #0x1
	beq	.L343	@cond_branch
	cmp	r0, #0x1
	bgt	.L352	@cond_branch
	cmp	r0, #0
	beq	.L340	@cond_branch
	b	.L339
.L357:
	.align	2, 0
.L356:
	.word	gBattle_BG1_Y
.L352:
	cmp	r0, #0x2
	beq	.L345	@cond_branch
	b	.L339
.L340:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x14
	ldrsh	r1, [r5, r3]
	cmp	r0, r1
	bge	.LCB3436
	b	.L339	@long jump
.LCB3436:
	strh	r2, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x20
	ldrsh	r1, [r5, r0]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	cmp	r1, r0
	bne	.L339	@cond_branch
	b	.L353
.L343:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x12
	ldrsh	r1, [r5, r3]
	cmp	r0, r1
	bne	.L339	@cond_branch
.L353:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
	b	.L339
.L345:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x14
	ldrsh	r1, [r5, r3]
	cmp	r0, r1
	blt	.L339	@cond_branch
	strh	r2, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x20
	ldrsh	r4, [r5, r0]
	cmp	r4, #0
	bne	.L339	@cond_branch
	mov	r0, #0x0
	bl	ResetBattleAnimBg
	ldr	r0, .L358
	strh	r4, [r0]
	ldr	r0, .L358+0x4
	strh	r4, [r0]
	ldr	r4, .L358+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L348	@cond_branch
	mov	r0, #0xa
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	mov	r2, sp
	ldrb	r1, [r2]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, sp
	ldrh	r1, [r0]
	mov	r0, #0xa
	bl	SetGpuReg
.L348:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r3, #0x8
	ldrsh	r1, [r5, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L358+0xc
	add	r0, r0, r4
	bl	DestroySprite
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L349	@cond_branch
	mov	r2, #0xe
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
.L349:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L339:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L359:
	.align	2, 0
.L358:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
.Lfe29:
	.size	 UpdateMonScrollingBgMask,.Lfe29-UpdateMonScrollingBgMask
	.align	2, 0
	.globl	AnimTask_GetBattleTerrain
	.type	 AnimTask_GetBattleTerrain,function
	.thumb_func
AnimTask_GetBattleTerrain:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L361
	ldr	r1, .L361+0x4
	ldrb	r1, [r1]
	strh	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L362:
	.align	2, 0
.L361:
	.word	gBattleAnimArgs
	.word	gBattleTerrain
.Lfe30:
	.size	 AnimTask_GetBattleTerrain,.Lfe30-AnimTask_GetBattleTerrain
	.align	2, 0
	.globl	AnimTask_AllocBackupPalBuffer
	.type	 AnimTask_AllocBackupPalBuffer,function
	.thumb_func
AnimTask_AllocBackupPalBuffer:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	ldr	r1, .L364
	ldr	r1, [r1]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	str	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L365:
	.align	2, 0
.L364:
	.word	gMonSpritesGfxPtr
.Lfe31:
	.size	 AnimTask_AllocBackupPalBuffer,.Lfe31-AnimTask_AllocBackupPalBuffer
	.align	2, 0
	.globl	AnimTask_FreeBackupPalBuffer
	.type	 AnimTask_FreeBackupPalBuffer,function
	.thumb_func
AnimTask_FreeBackupPalBuffer:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L367
	ldr	r0, [r6]
	mov	r5, #0xbe
	lsl	r5, r5, #0x1
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r6]
	add	r0, r0, r5
	mov	r1, #0x0
	str	r1, [r0]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L368:
	.align	2, 0
.L367:
	.word	gMonSpritesGfxPtr
.Lfe32:
	.size	 AnimTask_FreeBackupPalBuffer,.Lfe32-AnimTask_FreeBackupPalBuffer
	.align	2, 0
	.globl	AnimTask_CopyPalUnfadedToBackup
	.type	 AnimTask_CopyPalUnfadedToBackup,function
	.thumb_func
AnimTask_CopyPalUnfadedToBackup:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L381
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L370	@cond_branch
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	add	r1, r0, #0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L376	@cond_branch
	mov	r2, #0x1
.L374:
	lsr	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L374	@cond_branch
	b	.L376
.L382:
	.align	2, 0
.L381:
	.word	gBattleAnimArgs
.L370:
	cmp	r0, #0x1
	bne	.L377	@cond_branch
	ldr	r0, .L383
	b	.L380
.L384:
	.align	2, 0
.L383:
	.word	gBattleAnimAttacker
.L377:
	cmp	r0, #0x2
	bne	.L376	@cond_branch
	ldr	r0, .L385
.L380:
	ldrb	r0, [r0]
	add	r4, r0, #0
	add	r4, r4, #0x10
.L376:
	ldr	r0, .L385+0x4
	ldr	r1, [r0]
	ldr	r0, .L385+0x8
	mov	r2, #0x2
	ldrsh	r0, [r0, r2]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r1, [r1]
	lsl	r0, r0, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x5
	ldr	r2, .L385+0xc
	add	r1, r1, r2
	mov	r2, #0x20
	bl	memcpy
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L386:
	.align	2, 0
.L385:
	.word	gBattleAnimTarget
	.word	gMonSpritesGfxPtr
	.word	gBattleAnimArgs
	.word	gPlttBufferUnfaded
.Lfe33:
	.size	 AnimTask_CopyPalUnfadedToBackup,.Lfe33-AnimTask_CopyPalUnfadedToBackup
	.align	2, 0
	.globl	AnimTask_CopyPalUnfadedFromBackup
	.type	 AnimTask_CopyPalUnfadedFromBackup,function
	.thumb_func
AnimTask_CopyPalUnfadedFromBackup:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L399
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L388	@cond_branch
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	add	r1, r0, #0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L394	@cond_branch
	mov	r2, #0x1
.L392:
	lsr	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L392	@cond_branch
	b	.L394
.L400:
	.align	2, 0
.L399:
	.word	gBattleAnimArgs
.L388:
	cmp	r0, #0x1
	bne	.L395	@cond_branch
	ldr	r0, .L401
	b	.L398
.L402:
	.align	2, 0
.L401:
	.word	gBattleAnimAttacker
.L395:
	cmp	r0, #0x2
	bne	.L394	@cond_branch
	ldr	r0, .L403
.L398:
	ldrb	r0, [r0]
	add	r4, r0, #0
	add	r4, r4, #0x10
.L394:
	lsl	r0, r4, #0x5
	ldr	r1, .L403+0x4
	add	r0, r0, r1
	ldr	r1, .L403+0x8
	ldr	r2, [r1]
	ldr	r1, .L403+0xc
	mov	r3, #0x2
	ldrsh	r1, [r1, r3]
	mov	r3, #0xbe
	lsl	r3, r3, #0x1
	add	r2, r2, r3
	ldr	r2, [r2]
	lsl	r1, r1, #0x5
	add	r1, r1, r2
	mov	r2, #0x20
	bl	memcpy
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L404:
	.align	2, 0
.L403:
	.word	gBattleAnimTarget
	.word	gPlttBufferUnfaded
	.word	gMonSpritesGfxPtr
	.word	gBattleAnimArgs
.Lfe34:
	.size	 AnimTask_CopyPalUnfadedFromBackup,.Lfe34-AnimTask_CopyPalUnfadedFromBackup
	.align	2, 0
	.globl	AnimTask_CopyPalFadedToUnfaded
	.type	 AnimTask_CopyPalFadedToUnfaded,function
	.thumb_func
AnimTask_CopyPalFadedToUnfaded:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L417
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L406	@cond_branch
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	add	r1, r0, #0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L412	@cond_branch
	mov	r2, #0x1
.L410:
	lsr	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L410	@cond_branch
	b	.L412
.L418:
	.align	2, 0
.L417:
	.word	gBattleAnimArgs
.L406:
	cmp	r0, #0x1
	bne	.L413	@cond_branch
	ldr	r0, .L419
	b	.L416
.L420:
	.align	2, 0
.L419:
	.word	gBattleAnimAttacker
.L413:
	cmp	r0, #0x2
	bne	.L412	@cond_branch
	ldr	r0, .L421
.L416:
	ldrb	r0, [r0]
	add	r4, r0, #0
	add	r4, r4, #0x10
.L412:
	lsl	r1, r4, #0x5
	ldr	r0, .L421+0x4
	add	r0, r1, r0
	ldr	r2, .L421+0x8
	add	r1, r1, r2
	mov	r2, #0x20
	bl	memcpy
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L422:
	.align	2, 0
.L421:
	.word	gBattleAnimTarget
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.Lfe35:
	.size	 AnimTask_CopyPalFadedToUnfaded,.Lfe35-AnimTask_CopyPalFadedToUnfaded
	.align	2, 0
	.globl	AnimTask_IsContest
	.type	 AnimTask_IsContest,function
	.thumb_func
AnimTask_IsContest:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L424	@cond_branch
	ldr	r1, .L426
	mov	r0, #0x1
	strh	r0, [r1, #0xe]
	b	.L425
.L427:
	.align	2, 0
.L426:
	.word	gBattleAnimArgs
.L424:
	ldr	r0, .L428
	strh	r1, [r0, #0xe]
.L425:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L429:
	.align	2, 0
.L428:
	.word	gBattleAnimArgs
.Lfe36:
	.size	 AnimTask_IsContest,.Lfe36-AnimTask_IsContest
	.align	2, 0
	.globl	AnimTask_SetAnimAttackerAndTargetForEffectTgt
	.type	 AnimTask_SetAnimAttackerAndTargetForEffectTgt,function
	.thumb_func
AnimTask_SetAnimAttackerAndTargetForEffectTgt:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L431
	ldr	r1, .L431+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	ldr	r2, .L431+0x8
	ldr	r1, .L431+0xc
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L432:
	.align	2, 0
.L431:
	.word	gBattleAnimAttacker
	.word	gBattlerTarget
	.word	gBattleAnimTarget
	.word	gEffectBattler
.Lfe37:
	.size	 AnimTask_SetAnimAttackerAndTargetForEffectTgt,.Lfe37-AnimTask_SetAnimAttackerAndTargetForEffectTgt
	.align	2, 0
	.globl	AnimTask_IsTargetSameSide
	.type	 AnimTask_IsTargetSameSide,function
	.thumb_func
AnimTask_IsTargetSameSide:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L437
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r0, .L437+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L434	@cond_branch
	ldr	r1, .L437+0x8
	mov	r0, #0x1
	b	.L436
.L438:
	.align	2, 0
.L437:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L434:
	ldr	r1, .L439
	mov	r0, #0x0
.L436:
	strh	r0, [r1, #0xe]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L440:
	.align	2, 0
.L439:
	.word	gBattleAnimArgs
.Lfe38:
	.size	 AnimTask_IsTargetSameSide,.Lfe38-AnimTask_IsTargetSameSide
	.align	2, 0
	.globl	AnimTask_SetAnimTargetToBattlerTarget
	.type	 AnimTask_SetAnimTargetToBattlerTarget,function
	.thumb_func
AnimTask_SetAnimTargetToBattlerTarget:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L442
	ldr	r1, .L442+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L443:
	.align	2, 0
.L442:
	.word	gBattleAnimTarget
	.word	gBattlerTarget
.Lfe39:
	.size	 AnimTask_SetAnimTargetToBattlerTarget,.Lfe39-AnimTask_SetAnimTargetToBattlerTarget
	.align	2, 0
	.globl	AnimTask_SetAnimAttackerAndTargetForEffectAtk
	.type	 AnimTask_SetAnimAttackerAndTargetForEffectAtk,function
	.thumb_func
AnimTask_SetAnimAttackerAndTargetForEffectAtk:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L445
	ldr	r1, .L445+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	ldr	r2, .L445+0x8
	ldr	r1, .L445+0xc
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L446:
	.align	2, 0
.L445:
	.word	gBattleAnimAttacker
	.word	gBattlerAttacker
	.word	gBattleAnimTarget
	.word	gEffectBattler
.Lfe40:
	.size	 AnimTask_SetAnimAttackerAndTargetForEffectAtk,.Lfe40-AnimTask_SetAnimAttackerAndTargetForEffectAtk
	.align	2, 0
	.globl	AnimTask_SetAttackerInvisibleWaitForSignal
	.type	 AnimTask_SetAttackerInvisibleWaitForSignal,function
	.thumb_func
AnimTask_SetAttackerInvisibleWaitForSignal:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L448	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L449
.L448:
	ldr	r0, .L450
	lsl	r3, r4, #0x2
	add	r3, r3, r4
	lsl	r3, r3, #0x3
	add	r3, r3, r0
	ldr	r0, .L450+0x4
	ldr	r4, [r0]
	ldr	r2, .L450+0x8
	ldrb	r0, [r2]
	ldr	r1, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	strh	r0, [r3, #0x8]
	ldrb	r1, [r2]
	ldr	r0, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L450+0xc
	str	r0, [r3]
	ldr	r1, .L450+0x10
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L449:
	pop	{r4}
	pop	{r0}
	bx	r0
.L451:
	.align	2, 0
.L450:
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimAttacker
	.word	AnimTask_WaitAndRestoreVisibility
	.word	gAnimVisualTaskCount
.Lfe41:
	.size	 AnimTask_SetAttackerInvisibleWaitForSignal,.Lfe41-AnimTask_SetAttackerInvisibleWaitForSignal
	.align	2, 0
	.type	 AnimTask_WaitAndRestoreVisibility,function
	.thumb_func
AnimTask_WaitAndRestoreVisibility:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L454
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	bne	.L453	@cond_branch
	ldr	r0, .L454+0x4
	ldr	r1, [r0]
	ldr	r0, .L454+0x8
	ldrb	r3, [r0]
	ldr	r0, [r1]
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r1, .L454+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r0, r4, #0
	bl	DestroyTask
.L453:
	pop	{r4}
	pop	{r0}
	bx	r0
.L455:
	.align	2, 0
.L454:
	.word	gBattleAnimArgs
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimAttacker
	.word	gTasks
.Lfe42:
	.size	 AnimTask_WaitAndRestoreVisibility,.Lfe42-AnimTask_WaitAndRestoreVisibility
.text
	.align	2, 0 @ Don't pad with nop

