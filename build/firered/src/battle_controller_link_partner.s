@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sLinkPartnerBufferCommands,object
	.size	 sLinkPartnerBufferCommands,228
sLinkPartnerBufferCommands:
	.word	LinkPartnerHandleGetMonData
	.word	LinkPartnerHandleGetRawMonData
	.word	LinkPartnerHandleSetMonData
	.word	LinkPartnerHandleSetRawMonData
	.word	LinkPartnerHandleLoadMonSprite
	.word	LinkPartnerHandleSwitchInAnim
	.word	LinkPartnerHandleReturnMonToBall
	.word	LinkPartnerHandleDrawTrainerPic
	.word	LinkPartnerHandleTrainerSlide
	.word	LinkPartnerHandleTrainerSlideBack
	.word	LinkPartnerHandleFaintAnimation
	.word	LinkPartnerHandlePaletteFade
	.word	LinkPartnerHandleSuccessBallThrowAnim
	.word	LinkPartnerHandleBallThrowAnim
	.word	LinkPartnerHandlePause
	.word	LinkPartnerHandleMoveAnimation
	.word	LinkPartnerHandlePrintString
	.word	LinkPartnerHandlePrintSelectionString
	.word	LinkPartnerHandleChooseAction
	.word	LinkPartnerHandleUnknownYesNoBox
	.word	LinkPartnerHandleChooseMove
	.word	LinkPartnerHandleChooseItem
	.word	LinkPartnerHandleChoosePokemon
	.word	LinkPartnerHandleCmd23
	.word	LinkPartnerHandleHealthBarUpdate
	.word	LinkPartnerHandleExpUpdate
	.word	LinkPartnerHandleStatusIconUpdate
	.word	LinkPartnerHandleStatusAnimation
	.word	LinkPartnerHandleStatusXor
	.word	LinkPartnerHandleDataTransfer
	.word	LinkPartnerHandleDMA3Transfer
	.word	LinkPartnerHandlePlayBGM
	.word	LinkPartnerHandleCmd32
	.word	LinkPartnerHandleTwoReturnValues
	.word	LinkPartnerHandleChosenMonReturnValue
	.word	LinkPartnerHandleOneReturnValue
	.word	LinkPartnerHandleOneReturnValue_Duplicate
	.word	LinkPartnerHandleClearUnkVar
	.word	LinkPartnerHandleSetUnkVar
	.word	LinkPartnerHandleClearUnkFlag
	.word	LinkPartnerHandleToggleUnkFlag
	.word	LinkPartnerHandleHitAnimation
	.word	LinkPartnerHandleCantSwitch
	.word	LinkPartnerHandlePlaySE
	.word	LinkPartnerHandlePlayFanfare
	.word	LinkPartnerHandleFaintingCry
	.word	LinkPartnerHandleIntroSlide
	.word	LinkPartnerHandleIntroTrainerBallThrow
	.word	LinkPartnerHandleDrawPartyStatusSummary
	.word	LinkPartnerHandleHidePartyStatusSummary
	.word	LinkPartnerHandleEndBounceEffect
	.word	LinkPartnerHandleSpriteInvisibility
	.word	LinkPartnerHandleBattleAnimation
	.word	LinkPartnerHandleLinkStandbyMsg
	.word	LinkPartnerHandleResetActionMoveSelection
	.word	LinkPartnerHandleEndLinkBattle
	.word	LinkPartnerCmdEnd
.text
	.align	2, 0
	.type	 LinkPartnerDummy,function
	.thumb_func
LinkPartnerDummy:
	bx	lr
.Lfe1:
	.size	 LinkPartnerDummy,.Lfe1-LinkPartnerDummy
	.align	2, 0
	.globl	SetControllerToLinkPartner
	.type	 SetControllerToLinkPartner,function
	.thumb_func
SetControllerToLinkPartner:
	ldr	r1, .L6
	ldr	r0, .L6+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L6+0x8
	str	r1, [r0]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	LinkPartnerBufferRunCommand
.Lfe2:
	.size	 SetControllerToLinkPartner,.Lfe2-SetControllerToLinkPartner
	.align	2, 0
	.type	 LinkPartnerBufferRunCommand,function
	.thumb_func
LinkPartnerBufferRunCommand:
	push	{lr}
	ldr	r2, .L12
	ldr	r1, .L12+0x4
	ldr	r0, .L12+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L9	@cond_branch
	ldr	r0, .L12+0xc
	lsl	r1, r3, #0x9
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x38
	bhi	.L10	@cond_branch
	ldr	r0, .L12+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L9
.L13:
	.align	2, 0
.L12:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	sLinkPartnerBufferCommands
.L10:
	bl	LinkPartnerBufferExecCompleted
.L9:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 LinkPartnerBufferRunCommand,.Lfe3-LinkPartnerBufferRunCommand
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L16
	ldr	r1, .L16+0x4
	ldr	r0, .L16+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L16+0xc
	cmp	r1, r0
	bne	.L15	@cond_branch
	bl	LinkPartnerBufferExecCompleted
.L15:
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe4:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe4-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 FreeTrainerSpriteAfterSlide,function
	.thumb_func
FreeTrainerSpriteAfterSlide:
	push	{r4, r5, r6, lr}
	ldr	r6, .L20
	ldr	r5, .L20+0x4
	ldr	r4, .L20+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L20+0xc
	cmp	r1, r0
	bne	.L19	@cond_branch
	mov	r0, #0x0
	bl	BattleGfxSfxDummy3
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	bl	LinkPartnerBufferExecCompleted
.L19:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 FreeTrainerSpriteAfterSlide,.Lfe5-FreeTrainerSpriteAfterSlide
	.align	2, 0
	.type	 Intro_DelayAndEnd,function
	.thumb_func
Intro_DelayAndEnd:
	push	{r4, lr}
	ldr	r4, .L24
	ldr	r1, [r4]
	ldr	r3, .L24+0x4
	ldrb	r0, [r3]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L23	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	bl	LinkPartnerBufferExecCompleted
.L23:
	pop	{r4}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe6:
	.size	 Intro_DelayAndEnd,.Lfe6-Intro_DelayAndEnd
	.align	2, 0
	.type	 Intro_WaitForHealthbox,function
	.thumb_func
Intro_WaitForHealthbox:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L28	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L27	@cond_branch
	ldr	r0, .L35
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L27	@cond_branch
.L28:
	ldr	r2, .L35+0x4
	ldr	r1, .L35+0x8
	ldr	r0, .L35+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L35+0x10
	cmp	r1, r0
	bne	.L30	@cond_branch
	b	.L34
.L36:
	.align	2, 0
.L35:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.L27:
	ldr	r2, .L37
	ldr	r5, .L37+0x4
	ldr	r0, .L37+0x8
	ldrb	r3, [r0]
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r2, #0
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r2, [r0]
	ldr	r0, .L37+0xc
	cmp	r2, r0
	bne	.L30	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	cmp	r0, r2
	bne	.L30	@cond_branch
.L34:
	mov	r6, #0x1
.L30:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L32	@cond_branch
	mov	r6, #0x0
.L32:
	cmp	r6, #0
	beq	.L33	@cond_branch
	ldr	r0, .L37+0x10
	ldr	r0, [r0]
	ldr	r3, .L37+0x8
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L37+0x14
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L37+0x18
	str	r1, [r0]
.L33:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	Intro_DelayAndEnd
.Lfe7:
	.size	 Intro_WaitForHealthbox,.Lfe7-Intro_WaitForHealthbox
	.align	2, 0
	.type	 Intro_ShowHealthbox,function
	.thumb_func
Intro_ShowHealthbox:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L42
	mov	ip, r0
	ldr	r0, [r0]
	ldr	r6, .L42+0x4
	ldrb	r2, [r6]
	ldr	r4, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r4
	ldrb	r1, [r3]
	mov	r5, #0x8
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB381
	b	.L40	@long jump
.LCB381:
	mov	r7, #0x2
	add	r1, r7, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L40	@cond_branch
	ldrb	r0, [r3, #0x9]
	add	r0, r0, #0x1
	strb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L40	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x9]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldr	r0, .L42+0x8
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L41	@cond_branch
	ldr	r1, .L42+0xc
	ldrb	r0, [r6]
	eor	r0, r0, r7
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L42+0x10
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L42+0x14
	ldrb	r0, [r6]
	add	r1, r7, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L42+0x18
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L42+0x1c
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r6]
	eor	r0, r0, r7
	bl	StartHealthboxSlideIn
	ldrb	r0, [r6]
	eor	r0, r0, r7
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L41:
	ldr	r1, .L42+0xc
	ldr	r4, .L42+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L42+0x10
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r5, .L42+0x14
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L42+0x18
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L42+0x1c
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	bl	StartHealthboxSlideIn
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldr	r0, .L42
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L42+0x20
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L42+0x24
	str	r1, [r0]
.L40:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattleControllerData
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	Intro_WaitForHealthbox
.Lfe8:
	.size	 Intro_ShowHealthbox,.Lfe8-Intro_ShowHealthbox
	.align	2, 0
	.type	 WaitForMonAnimAfterLoad,function
	.thumb_func
WaitForMonAnimAfterLoad:
	push	{lr}
	ldr	r2, .L46
	ldr	r1, .L46+0x4
	ldr	r0, .L46+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L45	@cond_branch
	mov	r2, #0x24
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L45	@cond_branch
	bl	LinkPartnerBufferExecCompleted
.L45:
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.Lfe9:
	.size	 WaitForMonAnimAfterLoad,.Lfe9-WaitForMonAnimAfterLoad
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r5, .L51
	ldrb	r0, [r5]
	ldr	r6, .L51+0x4
	add	r1, r0, r6
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L49	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L50
.L52:
	.align	2, 0
.L51:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L49:
	ldr	r2, .L53
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L53+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	bl	LinkPartnerBufferExecCompleted
.L50:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe10:
	.size	 CompleteOnHealthbarDone,.Lfe10-CompleteOnHealthbarDone
	.align	2, 0
	.type	 FreeMonSpriteAfterFaintAnim,function
	.thumb_func
FreeMonSpriteAfterFaintAnim:
	push	{r4, r5, r6, lr}
	ldr	r6, .L57
	ldr	r5, .L57+0x4
	ldr	r4, .L57+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r6
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	cmp	r0, #0xa0
	ble	.L56	@cond_branch
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	ldr	r1, .L57+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	LinkPartnerBufferExecCompleted
.L56:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.Lfe11:
	.size	 FreeMonSpriteAfterFaintAnim,.Lfe11-FreeMonSpriteAfterFaintAnim
	.align	2, 0
	.type	 FreeMonSpriteAfterSwitchOutAnim,function
	.thumb_func
FreeMonSpriteAfterSwitchOutAnim:
	push	{r4, r5, r6, lr}
	ldr	r0, .L61
	ldr	r0, [r0]
	ldr	r6, .L61+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L60	@cond_branch
	ldr	r5, .L61+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L61+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L61+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	LinkPartnerBufferExecCompleted
.L60:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe12:
	.size	 FreeMonSpriteAfterSwitchOutAnim,.Lfe12-FreeMonSpriteAfterSwitchOutAnim
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L64	@cond_branch
	bl	LinkPartnerBufferExecCompleted
.L64:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 CompleteOnInactiveTextPrinter,.Lfe13-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L69
	ldr	r0, .L69+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L69+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L66	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L69+0xc
	strb	r3, [r0]
	bl	LinkPartnerBufferExecCompleted
	b	.L67
.L70:
	.align	2, 0
.L69:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L66:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L68	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L68:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L67:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe14-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 SwitchIn_ShowSubstitute,function
	.thumb_func
SwitchIn_ShowSubstitute:
	push	{r4, lr}
	ldr	r2, .L74
	ldr	r0, .L74+0x4
	ldr	r4, .L74+0x8
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L74+0xc
	cmp	r1, r0
	bne	.L72	@cond_branch
	ldr	r0, .L74+0x10
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L73	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L73:
	ldr	r0, .L74+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L74+0x18
	str	r0, [r1]
.L72:
	pop	{r4}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	SwitchIn_WaitAndEnd
.Lfe15:
	.size	 SwitchIn_ShowSubstitute,.Lfe15-SwitchIn_ShowSubstitute
	.align	2, 0
	.type	 SwitchIn_WaitAndEnd,function
	.thumb_func
SwitchIn_WaitAndEnd:
	push	{lr}
	ldr	r0, .L78
	ldr	r2, [r0]
	ldr	r0, .L78+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L77	@cond_branch
	bl	LinkPartnerBufferExecCompleted
.L77:
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe16:
	.size	 SwitchIn_WaitAndEnd,.Lfe16-SwitchIn_WaitAndEnd
	.align	2, 0
	.type	 SwitchIn_ShowHealthbox,function
	.thumb_func
SwitchIn_ShowHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r3, .L82
	ldr	r0, [r3]
	ldr	r7, .L82+0x4
	ldrb	r1, [r7]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L81	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L82+0x8
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, .L82+0xc
	mov	r1, #0xa
	bl	CreateTask
	ldr	r0, .L82+0x10
	mov	r8, r0
	ldrb	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L82+0x14
	add	r0, r0, r5
	bl	HandleLowHpMusicChange
	ldr	r1, .L82+0x18
	ldrb	r0, [r7]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L82+0x1c
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r4, .L82+0x20
	ldrb	r1, [r7]
	add	r0, r1, r4
	ldrb	r0, [r0]
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	ldrh	r1, [r1]
	mul	r1, r1, r6
	add	r1, r1, r5
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r7]
	bl	StartHealthboxSlideIn
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldrb	r0, [r7]
	bl	CopyBattleSpriteInvisibility
	ldr	r1, .L82+0x24
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L82+0x28
	str	r1, [r0]
.L81:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	0x27f9
	.word	Task_PlayerController_RestoreBgmAfterCry
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	SwitchIn_ShowSubstitute
.Lfe17:
	.size	 SwitchIn_ShowHealthbox,.Lfe17-SwitchIn_ShowHealthbox
	.align	2, 0
	.type	 SwitchIn_TryShinyAnim,function
	.thumb_func
SwitchIn_TryShinyAnim:
	push	{r4, r5, r6, lr}
	ldr	r6, .L87
	ldr	r0, [r6]
	ldr	r4, .L87+0x4
	ldrb	r2, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L85	@cond_branch
	ldr	r0, .L87+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L87+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L85:
	ldr	r5, .L87+0x10
	ldr	r0, .L87+0x14
	ldrb	r2, [r4]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L87+0x18
	cmp	r1, r0
	bne	.L86	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L86	@cond_branch
	add	r0, r3, r5
	bl	DestroySprite
	ldr	r1, .L87+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L87+0x20
	str	r1, [r0]
.L86:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gBattleControllerData
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	SwitchIn_ShowHealthbox
.Lfe18:
	.size	 SwitchIn_TryShinyAnim,.Lfe18-SwitchIn_TryShinyAnim
	.align	2, 0
	.type	 LinkPartnerBufferExecCompleted,function
	.thumb_func
LinkPartnerBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L92
	ldr	r4, .L92+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L92+0x8
	str	r1, [r0]
	ldr	r0, .L92+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L90	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r1, .L92+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	mov	r1, #0x38
	strb	r1, [r0]
	b	.L91
.L93:
	.align	2, 0
.L92:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	LinkPartnerBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleBufferA
.L90:
	ldr	r2, .L94
	ldr	r1, .L94+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L91:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe19:
	.size	 LinkPartnerBufferExecCompleted,.Lfe19-LinkPartnerBufferExecCompleted
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L98
	ldr	r2, [r0]
	ldr	r0, .L98+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L97	@cond_branch
	bl	LinkPartnerBufferExecCompleted
.L97:
	pop	{r0}
	bx	r0
.L99:
	.align	2, 0
.L98:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe20:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe20-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L102
	ldr	r2, [r0]
	ldr	r0, .L102+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L101	@cond_branch
	bl	LinkPartnerBufferExecCompleted
.L101:
	pop	{r0}
	bx	r0
.L103:
	.align	2, 0
.L102:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe21:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe21-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 LinkPartnerHandleGetMonData,function
	.thumb_func
LinkPartnerHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r1, .L113
	ldr	r0, .L113+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L105	@cond_branch
	ldr	r0, .L113+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	CopyLinkPartnerMonData
	add	r6, r0, #0
	b	.L106
.L114:
	.align	2, 0
.L113:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L105:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L110:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L111	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	CopyLinkPartnerMonData
	add	r6, r6, r0
.L111:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L110	@cond_branch
.L106:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	LinkPartnerBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 LinkPartnerHandleGetMonData,.Lfe22-LinkPartnerHandleGetMonData
	.align	2, 0
	.type	 CopyLinkPartnerMonData,function
	.thumb_func
CopyLinkPartnerMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x90
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L204
	ldr	r3, .L204+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bls	.LCB1466
	bl	.L116	@far jump
.LCB1466:
	lsl	r0, r0, #0x2
	ldr	r1, .L204+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L205:
	.align	2, 0
.L204:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	.L198
	.align	2, 0
	.align	2, 0
.L198:
	.word	.L117
	.word	.L128
	.word	.L129
	.word	.L130
	.word	.L144
	.word	.L144
	.word	.L144
	.word	.L144
	.word	.L145
	.word	.L154
	.word	.L154
	.word	.L154
	.word	.L154
	.word	.L116
	.word	.L116
	.word	.L116
	.word	.L116
	.word	.L155
	.word	.L156
	.word	.L157
	.word	.L158
	.word	.L159
	.word	.L160
	.word	.L161
	.word	.L162
	.word	.L163
	.word	.L164
	.word	.L165
	.word	.L166
	.word	.L167
	.word	.L168
	.word	.L169
	.word	.L170
	.word	.L171
	.word	.L172
	.word	.L173
	.word	.L174
	.word	.L175
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L181
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
.L117:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L206
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	mov	r6, #0x0
	add	r0, sp, #0x24
	mov	r9, r0
	mov	r1, #0x3b
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2b
	str	r2, [sp, #0x80]
	mov	r0, sp
	add	r0, r0, #0x2a
	str	r0, [sp, #0x7c]
	mov	r1, sp
	add	r1, r1, #0x68
	str	r1, [sp, #0x8c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x84]
	add	r0, r0, #0x12
	str	r0, [sp, #0x88]
	mov	r8, r4
	add	r4, sp, #0xc
.L121:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L121	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L206
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x80]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x44]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L206+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L206+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L206+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x7c]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x28]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2c]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, sp
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x7
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x54]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	ldr	r0, [sp, #0x84]
	ldr	r1, [sp, #0x8c]
	bl	StringCopy_Nickname
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x88]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L126:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x57
	bls	.L126	@cond_branch
	b	.L116
.L207:
	.align	2, 0
.L206:
	.word	gPlayerParty
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L128:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L208
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L200
.L209:
	.align	2, 0
.L208:
	.word	gPlayerParty
.L129:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L210
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L200
.L211:
	.align	2, 0
.L210:
	.word	gPlayerParty
.L130:
	mov	r6, #0x0
	add	r2, sp, #0x58
	mov	r9, r2
	add	r0, sp, #0x60
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L212
	add	r4, r1, r0
	mov	r8, r9
.L134:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L134	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L212
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L139:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L139	@cond_branch
	b	.L116
.L213:
	.align	2, 0
.L212:
	.word	gPlayerParty
.L144:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L214
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L200
.L215:
	.align	2, 0
.L214:
	.word	gPlayerParty
.L145:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L216
	mov	r8, r2
.L149:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L149	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L216
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L116
.L217:
	.align	2, 0
.L216:
	.word	gPlayerParty
.L154:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L218
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x8
	b	.L201
.L219:
	.align	2, 0
.L218:
	.word	gPlayerParty
.L155:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L220
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L202
.L221:
	.align	2, 0
.L220:
	.word	gPlayerParty
.L156:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L222
	add	r0, r0, r1
	mov	r1, #0x19
.L202:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L116
.L223:
	.align	2, 0
.L222:
	.word	gPlayerParty
.L157:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L224
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L201
.L225:
	.align	2, 0
.L224:
	.word	gPlayerParty
.L158:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L226
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L201
.L227:
	.align	2, 0
.L226:
	.word	gPlayerParty
.L159:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L228
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L201
.L229:
	.align	2, 0
.L228:
	.word	gPlayerParty
.L160:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L230
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L201
.L231:
	.align	2, 0
.L230:
	.word	gPlayerParty
.L161:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L232
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L201
.L233:
	.align	2, 0
.L232:
	.word	gPlayerParty
.L162:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L234
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L201
.L235:
	.align	2, 0
.L234:
	.word	gPlayerParty
.L163:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L236
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L201
.L237:
	.align	2, 0
.L236:
	.word	gPlayerParty
.L164:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L238
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L201
.L239:
	.align	2, 0
.L238:
	.word	gPlayerParty
.L165:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L240
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L201
.L241:
	.align	2, 0
.L240:
	.word	gPlayerParty
.L166:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L242
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L201
.L243:
	.align	2, 0
.L242:
	.word	gPlayerParty
.L167:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L244
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L201
.L245:
	.align	2, 0
.L244:
	.word	gPlayerParty
.L168:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L246
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L201
.L247:
	.align	2, 0
.L246:
	.word	gPlayerParty
.L169:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L248
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L116
.L249:
	.align	2, 0
.L248:
	.word	gPlayerParty
.L170:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L250
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L201
.L251:
	.align	2, 0
.L250:
	.word	gPlayerParty
.L171:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L252
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L201
.L253:
	.align	2, 0
.L252:
	.word	gPlayerParty
.L172:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L254
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L201
.L255:
	.align	2, 0
.L254:
	.word	gPlayerParty
.L173:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L256
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L201
.L257:
	.align	2, 0
.L256:
	.word	gPlayerParty
.L174:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L258
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L201
.L259:
	.align	2, 0
.L258:
	.word	gPlayerParty
.L175:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L260
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L201
.L261:
	.align	2, 0
.L260:
	.word	gPlayerParty
.L176:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L262
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L203
.L263:
	.align	2, 0
.L262:
	.word	gPlayerParty
.L177:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L264
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L200
.L265:
	.align	2, 0
.L264:
	.word	gPlayerParty
.L178:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L266
	add	r0, r0, r1
	mov	r1, #0x37
.L203:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L116
.L267:
	.align	2, 0
.L266:
	.word	gPlayerParty
.L179:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L268
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L201
.L269:
	.align	2, 0
.L268:
	.word	gPlayerParty
.L180:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L270
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L200
.L271:
	.align	2, 0
.L270:
	.word	gPlayerParty
.L181:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L272
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L200
.L273:
	.align	2, 0
.L272:
	.word	gPlayerParty
.L182:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L274
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L200
.L275:
	.align	2, 0
.L274:
	.word	gPlayerParty
.L183:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L276
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L200
.L277:
	.align	2, 0
.L276:
	.word	gPlayerParty
.L184:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L278
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L200
.L279:
	.align	2, 0
.L278:
	.word	gPlayerParty
.L185:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L280
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L200
.L281:
	.align	2, 0
.L280:
	.word	gPlayerParty
.L186:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L282
	add	r0, r0, r1
	mov	r1, #0x3f
.L200:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L116
.L283:
	.align	2, 0
.L282:
	.word	gPlayerParty
.L187:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L284
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L201
.L285:
	.align	2, 0
.L284:
	.word	gPlayerParty
.L188:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L286
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L201
.L287:
	.align	2, 0
.L286:
	.word	gPlayerParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L288
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L201
.L289:
	.align	2, 0
.L288:
	.word	gPlayerParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L290
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L201
.L291:
	.align	2, 0
.L290:
	.word	gPlayerParty
.L191:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L292
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L201
.L293:
	.align	2, 0
.L292:
	.word	gPlayerParty
.L192:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L294
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L201
.L295:
	.align	2, 0
.L294:
	.word	gPlayerParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L296
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L201
.L297:
	.align	2, 0
.L296:
	.word	gPlayerParty
.L194:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L298
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L201
.L299:
	.align	2, 0
.L298:
	.word	gPlayerParty
.L195:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L300
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L201
.L301:
	.align	2, 0
.L300:
	.word	gPlayerParty
.L196:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L302
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L201
.L303:
	.align	2, 0
.L302:
	.word	gPlayerParty
.L197:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L304
	add	r0, r0, r1
	mov	r1, #0x36
.L201:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L116:
	add	r0, r6, #0
	add	sp, sp, #0x90
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L305:
	.align	2, 0
.L304:
	.word	gPlayerParty
.Lfe23:
	.size	 CopyLinkPartnerMonData,.Lfe23-CopyLinkPartnerMonData
	.align	2, 0
	.type	 LinkPartnerHandleGetRawMonData,function
	.thumb_func
LinkPartnerHandleGetRawMonData:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 LinkPartnerHandleGetRawMonData,.Lfe24-LinkPartnerHandleGetRawMonData
	.align	2, 0
	.type	 LinkPartnerHandleSetMonData,function
	.thumb_func
LinkPartnerHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r1, .L316
	ldr	r0, .L316+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L308	@cond_branch
	ldr	r0, .L316+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetLinkPartnerMonData
	b	.L309
.L317:
	.align	2, 0
.L316:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L308:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L313:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L314	@cond_branch
	add	r0, r5, #0
	bl	SetLinkPartnerMonData
.L314:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L313	@cond_branch
.L309:
	bl	LinkPartnerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 LinkPartnerHandleSetMonData,.Lfe25-LinkPartnerHandleSetMonData
	.align	2, 0
	.type	 SetLinkPartnerMonData,function
	.thumb_func
SetLinkPartnerMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x34
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L390
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	ldr	r2, .L390+0x4
	add	r3, r0, r2
	add	r6, r3, #0
	sub	r1, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r7, r2, #0
	cmp	r0, #0x3b
	bls	.LCB2883
	bl	.L319	@far jump
.LCB2883:
	lsl	r0, r0, #0x2
	ldr	r1, .L390+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L391:
	.align	2, 0
.L390:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
	.word	.L386
	.align	2, 0
	.align	2, 0
.L386:
	.word	.L320
	.word	.L326
	.word	.L327
	.word	.L328
	.word	.L337
	.word	.L337
	.word	.L337
	.word	.L337
	.word	.L338
	.word	.L342
	.word	.L342
	.word	.L342
	.word	.L342
	.word	.L319
	.word	.L319
	.word	.L319
	.word	.L319
	.word	.L343
	.word	.L344
	.word	.L345
	.word	.L346
	.word	.L347
	.word	.L348
	.word	.L349
	.word	.L350
	.word	.L351
	.word	.L352
	.word	.L353
	.word	.L354
	.word	.L355
	.word	.L356
	.word	.L357
	.word	.L358
	.word	.L359
	.word	.L360
	.word	.L361
	.word	.L362
	.word	.L363
	.word	.L364
	.word	.L365
	.word	.L366
	.word	.L367
	.word	.L368
	.word	.L369
	.word	.L370
	.word	.L371
	.word	.L372
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L383
	.word	.L384
	.word	.L385
.L320:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L392
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	add	r2, r6, #0
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0x2e
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x3b
	add	r0, r0, r6
	mov	sl, r0
	add	r0, r6, #0
	add	r0, r0, #0x2b
	str	r0, [sp, #0x20]
	add	r0, r0, #0x19
	str	r0, [sp, #0x28]
	add	r0, r0, #0x4
	str	r0, [sp, #0x2c]
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	sub	r0, r0, #0x22
	str	r0, [sp, #0x1c]
	sub	r0, r0, #0x2
	str	r0, [sp, #0x18]
	add	r0, r0, #0x4
	str	r0, [sp, #0x24]
	add	r0, r6, #0x2
	str	r0, [sp, #0x4]
	add	r0, r6, #0x4
	str	r0, [sp, #0x8]
	add	r0, r6, #0x6
	str	r0, [sp, #0xc]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x14]
	mov	r9, r4
	add	r7, r6, #0
	add	r7, r7, #0x24
	add	r4, r6, #0
	add	r4, r4, #0xc
.L324:
	mov	r1, r8
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r7, #0
	bl	SetMonData
	add	r7, r7, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L324	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L392
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	ldrb	r0, [r6, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r6, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r6, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldr	r0, [r6, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r6, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r6, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L319
.L393:
	.align	2, 0
.L392:
	.word	gPlayerParty
.L326:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L394
	add	r0, r0, r1
	ldr	r1, .L394+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0xb
	bl	SetMonData
	b	.L319
.L395:
	.align	2, 0
.L394:
	.word	gPlayerParty
	.word	gActiveBattler
.L327:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L396
	add	r0, r0, r1
	ldr	r1, .L396+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0xc
	bl	SetMonData
	b	.L319
.L397:
	.align	2, 0
.L396:
	.word	gPlayerParty
	.word	gActiveBattler
.L328:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0xc
	add	r0, r0, r3
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L398
	add	r7, r1, r0
	add	r6, r3, #0
	add	r6, r6, #0x8
	add	r4, r3, #0
.L332:
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r7, #0
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	add	r0, r7, #0
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L332	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L398
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	b	.L319
.L399:
	.align	2, 0
.L398:
	.word	gPlayerParty
.L337:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L400
	add	r0, r0, r1
	ldr	r3, .L400+0x4
	ldr	r1, .L400+0x8
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L388
.L401:
	.align	2, 0
.L400:
	.word	gPlayerParty
	.word	gBattleBufferA
	.word	gActiveBattler
.L338:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L402
	add	r4, r4, r0
	ldr	r5, .L402+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L319
.L403:
	.align	2, 0
.L402:
	.word	gPlayerParty
	.word	gActiveBattler
.L342:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L404
	add	r0, r0, r1
	ldr	r3, .L404+0x4
	ldr	r1, .L404+0x8
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L388:
	add	r3, r3, #0x3
	add	r2, r2, r3
	bl	SetMonData
	b	.L319
.L405:
	.align	2, 0
.L404:
	.word	gPlayerParty
	.word	gBattleBufferA
	.word	gActiveBattler
.L343:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L406
	add	r0, r0, r1
	ldr	r1, .L406+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1
	bl	SetMonData
	b	.L319
.L407:
	.align	2, 0
.L406:
	.word	gPlayerParty
	.word	gActiveBattler
.L344:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L408
	add	r0, r0, r1
	ldr	r1, .L408+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x19
	bl	SetMonData
	b	.L319
.L409:
	.align	2, 0
.L408:
	.word	gPlayerParty
	.word	gActiveBattler
.L345:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L410
	add	r0, r0, r1
	ldr	r1, .L410+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1a
	bl	SetMonData
	b	.L319
.L411:
	.align	2, 0
.L410:
	.word	gPlayerParty
	.word	gActiveBattler
.L346:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L412
	add	r0, r0, r1
	ldr	r1, .L412+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1b
	bl	SetMonData
	b	.L319
.L413:
	.align	2, 0
.L412:
	.word	gPlayerParty
	.word	gActiveBattler
.L347:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L414
	add	r0, r0, r1
	ldr	r1, .L414+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1c
	bl	SetMonData
	b	.L319
.L415:
	.align	2, 0
.L414:
	.word	gPlayerParty
	.word	gActiveBattler
.L348:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L416
	add	r0, r0, r1
	ldr	r1, .L416+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1d
	bl	SetMonData
	b	.L319
.L417:
	.align	2, 0
.L416:
	.word	gPlayerParty
	.word	gActiveBattler
.L349:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L418
	add	r0, r0, r1
	ldr	r1, .L418+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1e
	bl	SetMonData
	b	.L319
.L419:
	.align	2, 0
.L418:
	.word	gPlayerParty
	.word	gActiveBattler
.L350:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L420
	add	r0, r0, r1
	ldr	r1, .L420+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1f
	bl	SetMonData
	b	.L319
.L421:
	.align	2, 0
.L420:
	.word	gPlayerParty
	.word	gActiveBattler
.L351:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L422
	add	r0, r0, r1
	ldr	r1, .L422+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x20
	bl	SetMonData
	b	.L319
.L423:
	.align	2, 0
.L422:
	.word	gPlayerParty
	.word	gActiveBattler
.L352:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L424
	add	r0, r0, r1
	ldr	r1, .L424+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x22
	bl	SetMonData
	b	.L319
.L425:
	.align	2, 0
.L424:
	.word	gPlayerParty
	.word	gActiveBattler
.L353:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L426
	add	r0, r0, r1
	ldr	r1, .L426+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x23
	bl	SetMonData
	b	.L319
.L427:
	.align	2, 0
.L426:
	.word	gPlayerParty
	.word	gActiveBattler
.L354:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L428
	add	r0, r0, r1
	ldr	r1, .L428+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x24
	bl	SetMonData
	b	.L319
.L429:
	.align	2, 0
.L428:
	.word	gPlayerParty
	.word	gActiveBattler
.L355:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L430
	add	r0, r0, r1
	ldr	r1, .L430+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x25
	bl	SetMonData
	b	.L319
.L431:
	.align	2, 0
.L430:
	.word	gPlayerParty
	.word	gActiveBattler
.L356:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L432
	add	r0, r0, r1
	ldr	r1, .L432+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x26
	bl	SetMonData
	b	.L319
.L433:
	.align	2, 0
.L432:
	.word	gPlayerParty
	.word	gActiveBattler
.L357:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L434
	add	r4, r4, r0
	ldr	r5, .L434+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x5
	add	r2, r2, r0
	add	r0, r4, #0
	b	.L389
.L435:
	.align	2, 0
.L434:
	.word	gPlayerParty
	.word	gActiveBattler
.L358:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L436
	add	r0, r0, r1
	ldr	r1, .L436+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x27
	bl	SetMonData
	b	.L319
.L437:
	.align	2, 0
.L436:
	.word	gPlayerParty
	.word	gActiveBattler
.L359:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L438
	add	r0, r0, r1
	ldr	r1, .L438+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x28
	bl	SetMonData
	b	.L319
.L439:
	.align	2, 0
.L438:
	.word	gPlayerParty
	.word	gActiveBattler
.L360:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L440
	add	r0, r0, r1
	ldr	r1, .L440+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x29
	bl	SetMonData
	b	.L319
.L441:
	.align	2, 0
.L440:
	.word	gPlayerParty
	.word	gActiveBattler
.L361:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L442
	add	r0, r0, r1
	ldr	r1, .L442+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2a
	bl	SetMonData
	b	.L319
.L443:
	.align	2, 0
.L442:
	.word	gPlayerParty
	.word	gActiveBattler
.L362:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L444
	add	r0, r0, r1
	ldr	r1, .L444+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2b
	bl	SetMonData
	b	.L319
.L445:
	.align	2, 0
.L444:
	.word	gPlayerParty
	.word	gActiveBattler
.L363:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L446
	add	r0, r0, r1
	ldr	r1, .L446+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
.L389:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L319
.L447:
	.align	2, 0
.L446:
	.word	gPlayerParty
	.word	gActiveBattler
.L364:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L448
	add	r0, r0, r1
	ldr	r1, .L448+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x0
	bl	SetMonData
	b	.L319
.L449:
	.align	2, 0
.L448:
	.word	gPlayerParty
	.word	gActiveBattler
.L365:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L450
	add	r0, r0, r1
	ldr	r1, .L450+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x9
	bl	SetMonData
	b	.L319
.L451:
	.align	2, 0
.L450:
	.word	gPlayerParty
	.word	gActiveBattler
.L366:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L452
	add	r0, r0, r1
	ldr	r1, .L452+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x37
	bl	SetMonData
	b	.L319
.L453:
	.align	2, 0
.L452:
	.word	gPlayerParty
	.word	gActiveBattler
.L367:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L454
	add	r0, r0, r1
	ldr	r1, .L454+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x38
	bl	SetMonData
	b	.L319
.L455:
	.align	2, 0
.L454:
	.word	gPlayerParty
	.word	gActiveBattler
.L368:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L456
	add	r0, r0, r1
	ldr	r1, .L456+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x39
	bl	SetMonData
	b	.L319
.L457:
	.align	2, 0
.L456:
	.word	gPlayerParty
	.word	gActiveBattler
.L369:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L458
	add	r0, r0, r1
	ldr	r1, .L458+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3a
	bl	SetMonData
	b	.L319
.L459:
	.align	2, 0
.L458:
	.word	gPlayerParty
	.word	gActiveBattler
.L370:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L460
	add	r0, r0, r1
	ldr	r1, .L460+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3b
	bl	SetMonData
	b	.L319
.L461:
	.align	2, 0
.L460:
	.word	gPlayerParty
	.word	gActiveBattler
.L371:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L462
	add	r0, r0, r1
	ldr	r1, .L462+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3c
	bl	SetMonData
	b	.L319
.L463:
	.align	2, 0
.L462:
	.word	gPlayerParty
	.word	gActiveBattler
.L372:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L464
	add	r0, r0, r1
	ldr	r1, .L464+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3d
	bl	SetMonData
	b	.L319
.L465:
	.align	2, 0
.L464:
	.word	gPlayerParty
	.word	gActiveBattler
.L373:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L466
	add	r0, r0, r1
	ldr	r1, .L466+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3e
	bl	SetMonData
	b	.L319
.L467:
	.align	2, 0
.L466:
	.word	gPlayerParty
	.word	gActiveBattler
.L374:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L468
	add	r0, r0, r1
	ldr	r1, .L468+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3f
	bl	SetMonData
	b	.L319
.L469:
	.align	2, 0
.L468:
	.word	gPlayerParty
	.word	gActiveBattler
.L375:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L470
	add	r0, r0, r1
	ldr	r1, .L470+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x16
	bl	SetMonData
	b	.L319
.L471:
	.align	2, 0
.L470:
	.word	gPlayerParty
	.word	gActiveBattler
.L376:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L472
	add	r0, r0, r1
	ldr	r1, .L472+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x17
	bl	SetMonData
	b	.L319
.L473:
	.align	2, 0
.L472:
	.word	gPlayerParty
	.word	gActiveBattler
.L377:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L474
	add	r0, r0, r1
	ldr	r1, .L474+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x18
	bl	SetMonData
	b	.L319
.L475:
	.align	2, 0
.L474:
	.word	gPlayerParty
	.word	gActiveBattler
.L378:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L476
	add	r0, r0, r1
	ldr	r1, .L476+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x21
	bl	SetMonData
	b	.L319
.L477:
	.align	2, 0
.L476:
	.word	gPlayerParty
	.word	gActiveBattler
.L379:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L478
	add	r0, r0, r1
	ldr	r1, .L478+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2f
	bl	SetMonData
	b	.L319
.L479:
	.align	2, 0
.L478:
	.word	gPlayerParty
	.word	gActiveBattler
.L380:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L480
	add	r0, r0, r1
	ldr	r1, .L480+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x30
	bl	SetMonData
	b	.L319
.L481:
	.align	2, 0
.L480:
	.word	gPlayerParty
	.word	gActiveBattler
.L381:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L482
	add	r0, r0, r1
	ldr	r1, .L482+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x32
	bl	SetMonData
	b	.L319
.L483:
	.align	2, 0
.L482:
	.word	gPlayerParty
	.word	gActiveBattler
.L382:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L484
	add	r0, r0, r1
	ldr	r1, .L484+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x33
	bl	SetMonData
	b	.L319
.L485:
	.align	2, 0
.L484:
	.word	gPlayerParty
	.word	gActiveBattler
.L383:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L486
	add	r0, r0, r1
	ldr	r1, .L486+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x34
	bl	SetMonData
	b	.L319
.L487:
	.align	2, 0
.L486:
	.word	gPlayerParty
	.word	gActiveBattler
.L384:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L488
	add	r0, r0, r1
	ldr	r1, .L488+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x35
	bl	SetMonData
	b	.L319
.L489:
	.align	2, 0
.L488:
	.word	gPlayerParty
	.word	gActiveBattler
.L385:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L490
	add	r0, r0, r1
	ldr	r1, .L490+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x36
	bl	SetMonData
.L319:
	ldr	r2, .L490+0x8
	ldr	r0, .L490+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L490
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L491:
	.align	2, 0
.L490:
	.word	gPlayerParty
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.Lfe26:
	.size	 SetLinkPartnerMonData,.Lfe26-SetLinkPartnerMonData
	.align	2, 0
	.type	 LinkPartnerHandleSetRawMonData,function
	.thumb_func
LinkPartnerHandleSetRawMonData:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L498
	ldr	r7, .L498+0x4
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r3, r1
	mul	r3, r3, r0
	ldr	r4, .L498+0x8
	lsl	r2, r2, #0x9
	add	r0, r4, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	ldr	r1, .L498+0xc
	add	r0, r0, r1
	add	r5, r3, r0
	mov	r3, #0x0
	add	r0, r4, #0x2
	add	r2, r2, r0
	ldrb	r2, [r2]
	cmp	r3, r2
	bcs	.L494	@cond_branch
	add	r6, r4, #0
	add	r2, r7, #0
	add	r4, r0, #0
.L496:
	add	r1, r5, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r3, r0
	bcc	.L496	@cond_branch
.L494:
	bl	LinkPartnerBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L499:
	.align	2, 0
.L498:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gPlayerParty
.Lfe27:
	.size	 LinkPartnerHandleSetRawMonData,.Lfe27-LinkPartnerHandleSetRawMonData
	.align	2, 0
	.type	 LinkPartnerHandleLoadMonSprite,function
	.thumb_func
LinkPartnerHandleLoadMonSprite:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r0, .L501
	mov	r8, r0
	ldr	r6, .L501+0x4
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L501+0x8
	add	r0, r0, r4
	bl	BattleLoadPlayerMonSpriteGfx
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L501+0xc
	mov	r8, r0
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L501+0x10
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L501+0x14
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L501+0x18
	strh	r1, [r0, #0x24]
	ldrb	r2, [r6]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	ldrb	r3, [r6]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r2, [r6]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L501+0x1c
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldr	r1, .L501+0x20
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L501+0x24
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L502:
	.align	2, 0
.L501:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattlerControllerFuncs
	.word	WaitForMonAnimAfterLoad
.Lfe28:
	.size	 LinkPartnerHandleLoadMonSprite,.Lfe28-LinkPartnerHandleLoadMonSprite
	.align	2, 0
	.type	 LinkPartnerHandleSwitchInAnim,function
	.thumb_func
LinkPartnerHandleSwitchInAnim:
	push	{r4, r5, r6, lr}
	ldr	r5, .L504
	ldrb	r0, [r5]
	ldr	r4, .L504+0x4
	lsl	r1, r0, #0x9
	add	r6, r4, #0x2
	add	r1, r1, r6
	ldrb	r1, [r1]
	bl	ClearTemporarySpeciesSpriteData
	ldr	r2, .L504+0x8
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	lsl	r0, r0, #0x9
	add	r4, r4, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	strh	r0, [r1]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L504+0xc
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSpriteGfx
	ldrb	r0, [r5]
	lsl	r1, r0, #0x9
	add	r1, r1, r6
	ldrb	r1, [r1]
	bl	StartSendOutAnim
	ldr	r1, .L504+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L504+0x14
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L505:
	.align	2, 0
.L504:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	SwitchIn_TryShinyAnim
.Lfe29:
	.size	 LinkPartnerHandleSwitchInAnim,.Lfe29-LinkPartnerHandleSwitchInAnim
	.align	2, 0
	.type	 StartSendOutAnim,function
	.thumb_func
StartSendOutAnim:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	ClearTemporarySpeciesSpriteData
	ldr	r0, .L507
	lsl	r2, r6, #0x1
	add	r2, r2, r0
	ldr	r0, .L507+0x4
	lsl	r1, r6, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	strh	r0, [r2]
	ldrh	r1, [r2]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L507+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L507+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L507+0x10
	mov	r9, r1
	add	r9, r9, r6
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L507+0x14
	mov	sl, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, sl
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L507+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L507+0x1c
	mov	r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L507+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L507+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xff
	bl	DoPokeballSendOutAnimation
	mov	r1, r9
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L508:
	.align	2, 0
.L507:
	.word	gBattlerPartyIndexes
	.word	gBattleBufferA
	.word	gPlayerParty
	.word	SpriteCB_WaitForBattlerBallReleaseAnim
	.word	gBattleControllerData
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe30:
	.size	 StartSendOutAnim,.Lfe30-StartSendOutAnim
	.align	2, 0
	.type	 LinkPartnerHandleReturnMonToBall,function
	.thumb_func
LinkPartnerHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r1, .L512
	ldr	r6, .L512+0x4
	ldrb	r2, [r6]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L510	@cond_branch
	ldr	r0, .L512+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L512+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L512+0x10
	str	r1, [r0]
	b	.L511
.L513:
	.align	2, 0
.L512:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L510:
	ldr	r5, .L514
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L514+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L514+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	LinkPartnerBufferExecCompleted
.L511:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L515:
	.align	2, 0
.L514:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe31:
	.size	 LinkPartnerHandleReturnMonToBall,.Lfe31-LinkPartnerHandleReturnMonToBall
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L524
	ldr	r4, [r6]
	ldr	r5, .L524+0x4
	ldrb	r2, [r5]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L518	@cond_branch
	cmp	r0, #0x1
	beq	.L520	@cond_branch
	b	.L517
.L525:
	.align	2, 0
.L524:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L518:
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L519	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L519:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L517
.L520:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L517	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x1
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L526
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L526+0x4
	str	r1, [r0]
.L517:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L527:
	.align	2, 0
.L526:
	.word	gBattlerControllerFuncs
	.word	FreeMonSpriteAfterSwitchOutAnim
.Lfe32:
	.size	 DoSwitchOutAnimation,.Lfe32-DoSwitchOutAnimation
	.align	2, 0
	.type	 LinkPartnerHandleDrawTrainerPic,function
	.thumb_func
LinkPartnerHandleDrawTrainerPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r6, .L534
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	mov	r1, #0x2
	and	r1, r1, r0
	mov	r7, #0x20
	cmp	r1, #0
	beq	.L529	@cond_branch
	mov	r7, #0x5a
.L529:
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	ldr	r5, .L534+0x4
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r4, #0xff
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L532	@cond_branch
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L532	@cond_branch
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1]
	and	r4, r4, r0
	cmp	r4, #0x3
	bne	.L531	@cond_branch
.L532:
	ldr	r0, .L534
	ldrb	r0, [r0]
	bl	GetBattlerMultiplayerId
	ldr	r2, .L534+0x4
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x13]
	add	r4, r0, #0x2
	b	.L533
.L535:
	.align	2, 0
.L534:
	.word	gActiveBattler
	.word	gLinkPlayers
.L531:
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r4, [r1, #0x13]
.L533:
	ldr	r5, .L536
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	DecompressTrainerBackPalette
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r6, .L536+0x4
	mov	r8, r7
	ldr	r0, .L536+0x8
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrb	r0, [r4]
	mov	r4, #0x8
	sub	r4, r4, r0
	lsl	r4, r4, #0x12
	mov	r0, #0xa0
	lsl	r0, r0, #0xf
	add	r4, r4, r0
	asr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	mov	r1, r8
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r6, .L536+0xc
	ldrb	r1, [r5]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r4, .L536+0x10
	ldrb	r3, [r5]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L536+0x14
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L536+0x18
	str	r1, [r0]
	ldr	r1, .L536+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L536+0x20
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerBackPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xfffe
	.word	SpriteCB_TrainerSlideIn
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe33:
	.size	 LinkPartnerHandleDrawTrainerPic,.Lfe33-LinkPartnerHandleDrawTrainerPic
	.align	2, 0
	.type	 LinkPartnerHandleTrainerSlide,function
	.thumb_func
LinkPartnerHandleTrainerSlide:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 LinkPartnerHandleTrainerSlide,.Lfe34-LinkPartnerHandleTrainerSlide
	.align	2, 0
	.type	 LinkPartnerHandleTrainerSlideBack,function
	.thumb_func
LinkPartnerHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r6, .L540
	ldr	r4, .L540+0x4
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L540+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L540+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L540+0x10
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L540+0x14
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L540+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L540+0x1c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L541:
	.align	2, 0
.L540:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	FreeTrainerSpriteAfterSlide
.Lfe35:
	.size	 LinkPartnerHandleTrainerSlideBack,.Lfe35-LinkPartnerHandleTrainerSlideBack
	.align	2, 0
	.type	 LinkPartnerHandleFaintAnimation,function
	.thumb_func
LinkPartnerHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L547
	ldr	r4, [r6]
	ldr	r5, .L547+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L543	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L544	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L544:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L545
.L548:
	.align	2, 0
.L547:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L543:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L545	@cond_branch
	strb	r4, [r3, #0x4]
	ldr	r2, .L549
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L549+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	mov	r1, #0x40
	neg	r1, r1
	mov	r0, #0x10
	bl	PlaySE12WithPanning
	ldr	r2, .L549+0x8
	ldr	r3, .L549+0xc
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x30]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
	strh	r1, [r0, #0x32]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L549+0x10
	str	r1, [r0]
	ldr	r1, .L549+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L549+0x18
	str	r1, [r0]
.L545:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L550:
	.align	2, 0
.L549:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_FaintSlideAnim
	.word	gBattlerControllerFuncs
	.word	FreeMonSpriteAfterFaintAnim
.Lfe36:
	.size	 LinkPartnerHandleFaintAnimation,.Lfe36-LinkPartnerHandleFaintAnimation
	.align	2, 0
	.type	 LinkPartnerHandlePaletteFade,function
	.thumb_func
LinkPartnerHandlePaletteFade:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 LinkPartnerHandlePaletteFade,.Lfe37-LinkPartnerHandlePaletteFade
	.align	2, 0
	.type	 LinkPartnerHandleSuccessBallThrowAnim,function
	.thumb_func
LinkPartnerHandleSuccessBallThrowAnim:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 LinkPartnerHandleSuccessBallThrowAnim,.Lfe38-LinkPartnerHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 LinkPartnerHandleBallThrowAnim,function
	.thumb_func
LinkPartnerHandleBallThrowAnim:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 LinkPartnerHandleBallThrowAnim,.Lfe39-LinkPartnerHandleBallThrowAnim
	.align	2, 0
	.type	 LinkPartnerHandlePause,function
	.thumb_func
LinkPartnerHandlePause:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 LinkPartnerHandlePause,.Lfe40-LinkPartnerHandlePause
	.align	2, 0
	.type	 LinkPartnerHandleMoveAnimation,function
	.thumb_func
LinkPartnerHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L559
	ldrb	r0, [r6]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5535
	b	.L556	@long jump
.LCB5535:
	ldr	r0, .L559+0x4
	mov	ip, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L559+0x8
	mov	r1, ip
	add	r1, r1, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	strb	r1, [r5]
	ldr	r4, .L559+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x5
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L559+0x10
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x6
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x7
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x9
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	str	r3, [r4]
	ldr	r3, .L559+0x14
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	mov	r2, ip
	add	r2, r2, #0xa
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L559+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0xc
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0xd
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L559+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x10
	add	r2, r2, r1
	str	r2, [r3]
	ldr	r3, .L559+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L557	@cond_branch
	bl	LinkPartnerBufferExecCompleted
	b	.L556
.L560:
	.align	2, 0
.L559:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L557:
	ldr	r0, .L561
	ldr	r0, [r0]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L561+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L561+0x8
	str	r1, [r0]
.L556:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L562:
	.align	2, 0
.L561:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	LinkPartnerDoMoveAnimation
.Lfe41:
	.size	 LinkPartnerHandleMoveAnimation,.Lfe41-LinkPartnerHandleMoveAnimation
	.align	2, 0
	.type	 LinkPartnerDoMoveAnimation,function
	.thumb_func
LinkPartnerDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r2, .L577
	ldr	r6, .L577+0x4
	ldrb	r3, [r6]
	lsl	r1, r3, #0x9
	add	r0, r2, #0x1
	mov	sl, r0
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r2, #0x2
	mov	r9, r5
	add	r0, r1, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r2, r2, #0xb
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r7, .L577+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L567	@cond_branch
	cmp	r2, #0x1
	bgt	.L576	@cond_branch
	cmp	r2, #0
	beq	.L565	@cond_branch
	b	.L564
.L578:
	.align	2, 0
.L577:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L576:
	cmp	r2, #0x2
	beq	.L569	@cond_branch
	cmp	r2, #0x3
	beq	.L572	@cond_branch
	b	.L564
.L565:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r1, r0, r1
	ldrb	r2, [r1]
	mov	r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0x4
	bne	.L566	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r2, [r6]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L566:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L564
.L567:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L564	@cond_branch
	mov	r0, #0x0
	bl	SetBattlerSpriteAffineMode
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L564
.L569:
	ldr	r0, .L579
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L579+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L564	@cond_branch
	mov	r0, #0x1
	bl	SetBattlerSpriteAffineMode
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L571	@cond_branch
	mov	r0, r8
	cmp	r0, #0x1
	bhi	.L571	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L571:
	ldr	r0, .L579+0x8
	ldr	r2, [r0]
	ldr	r0, .L579+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L564
.L580:
	.align	2, 0
.L579:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L572:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L564	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	lsl	r2, r0, #0x9
	mov	r3, sl
	add	r1, r2, r3
	ldrb	r1, [r1]
	add	r2, r2, r9
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	LinkPartnerBufferExecCompleted
.L564:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 LinkPartnerDoMoveAnimation,.Lfe42-LinkPartnerDoMoveAnimation
	.align	2, 0
	.type	 LinkPartnerHandlePrintString,function
	.thumb_func
LinkPartnerHandlePrintString:
	push	{r4, lr}
	ldr	r0, .L584
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L584+0x4
	strh	r1, [r0]
	ldr	r0, .L584+0x8
	ldrb	r4, [r0]
	lsl	r4, r4, #0x9
	ldr	r0, .L584+0xc
	add	r4, r4, r0
	ldrh	r0, [r4]
	bl	BufferStringBattle
	ldrh	r0, [r4]
	bl	BattleStringShouldBeColored
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L582	@cond_branch
	ldr	r0, .L584+0x10
	mov	r1, #0x40
	bl	BattlePutTextOnWindow
	b	.L583
.L585:
	.align	2, 0
.L584:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gActiveBattler
	.word	gBattleBufferA+0x2
	.word	gDisplayedStringBattle
.L582:
	ldr	r0, .L586
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
.L583:
	ldr	r1, .L586+0x4
	ldr	r0, .L586+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L586+0xc
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L587:
	.align	2, 0
.L586:
	.word	gDisplayedStringBattle
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnInactiveTextPrinter
.Lfe43:
	.size	 LinkPartnerHandlePrintString,.Lfe43-LinkPartnerHandlePrintString
	.align	2, 0
	.type	 LinkPartnerHandlePrintSelectionString,function
	.thumb_func
LinkPartnerHandlePrintSelectionString:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 LinkPartnerHandlePrintSelectionString,.Lfe44-LinkPartnerHandlePrintSelectionString
	.align	2, 0
	.type	 LinkPartnerHandleChooseAction,function
	.thumb_func
LinkPartnerHandleChooseAction:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 LinkPartnerHandleChooseAction,.Lfe45-LinkPartnerHandleChooseAction
	.align	2, 0
	.type	 LinkPartnerHandleUnknownYesNoBox,function
	.thumb_func
LinkPartnerHandleUnknownYesNoBox:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 LinkPartnerHandleUnknownYesNoBox,.Lfe46-LinkPartnerHandleUnknownYesNoBox
	.align	2, 0
	.type	 LinkPartnerHandleChooseMove,function
	.thumb_func
LinkPartnerHandleChooseMove:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 LinkPartnerHandleChooseMove,.Lfe47-LinkPartnerHandleChooseMove
	.align	2, 0
	.type	 LinkPartnerHandleChooseItem,function
	.thumb_func
LinkPartnerHandleChooseItem:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 LinkPartnerHandleChooseItem,.Lfe48-LinkPartnerHandleChooseItem
	.align	2, 0
	.type	 LinkPartnerHandleChoosePokemon,function
	.thumb_func
LinkPartnerHandleChoosePokemon:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 LinkPartnerHandleChoosePokemon,.Lfe49-LinkPartnerHandleChoosePokemon
	.align	2, 0
	.type	 LinkPartnerHandleCmd23,function
	.thumb_func
LinkPartnerHandleCmd23:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 LinkPartnerHandleCmd23,.Lfe50-LinkPartnerHandleCmd23
	.align	2, 0
	.type	 LinkPartnerHandleHealthBarUpdate,function
	.thumb_func
LinkPartnerHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r3, .L598
	ldr	r0, .L598+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r2, r4, #0x9
	add	r0, r3, #0x2
	add	r0, r2, r0
	ldrb	r1, [r0]
	add	r3, r3, #0x3
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L598+0x8
	cmp	r7, r0
	beq	.L596	@cond_branch
	ldr	r6, .L598+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L598+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L598+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L597
.L599:
	.align	2, 0
.L598:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
.L596:
	ldr	r1, .L600
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L600+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L600+0x8
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
.L597:
	ldr	r1, .L600+0xc
	ldr	r0, .L600+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L600+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L601:
	.align	2, 0
.L600:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe51:
	.size	 LinkPartnerHandleHealthBarUpdate,.Lfe51-LinkPartnerHandleHealthBarUpdate
	.align	2, 0
	.type	 LinkPartnerHandleExpUpdate,function
	.thumb_func
LinkPartnerHandleExpUpdate:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 LinkPartnerHandleExpUpdate,.Lfe52-LinkPartnerHandleExpUpdate
	.align	2, 0
	.type	 LinkPartnerHandleStatusIconUpdate,function
	.thumb_func
LinkPartnerHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L605
	ldrb	r0, [r4]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L604	@cond_branch
	ldr	r0, .L605+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L605+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L605+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	UpdateHealthboxAttribute
	ldrb	r2, [r4]
	ldr	r0, .L605+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L605+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L605+0x18
	str	r1, [r0]
.L604:
	pop	{r4}
	pop	{r0}
	bx	r0
.L606:
	.align	2, 0
.L605:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe53:
	.size	 LinkPartnerHandleStatusIconUpdate,.Lfe53-LinkPartnerHandleStatusIconUpdate
	.align	2, 0
	.type	 LinkPartnerHandleStatusAnimation,function
	.thumb_func
LinkPartnerHandleStatusAnimation:
	push	{r4, r5, lr}
	ldr	r5, .L609
	ldrb	r0, [r5]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L608	@cond_branch
	ldr	r4, .L609+0x4
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r0, r4, #0x1
	add	r0, r3, r0
	ldrb	r0, [r0]
	add	r1, r4, #0x2
	add	r1, r3, r1
	ldrb	r1, [r1]
	add	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	add	r2, r4, #0x4
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	add	r4, r4, #0x5
	add	r3, r3, r4
	ldrb	r2, [r3]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	InitAndLaunchChosenStatusAnimation
	ldr	r1, .L609+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L609+0xc
	str	r1, [r0]
.L608:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L610:
	.align	2, 0
.L609:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe54:
	.size	 LinkPartnerHandleStatusAnimation,.Lfe54-LinkPartnerHandleStatusAnimation
	.align	2, 0
	.type	 LinkPartnerHandleStatusXor,function
	.thumb_func
LinkPartnerHandleStatusXor:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 LinkPartnerHandleStatusXor,.Lfe55-LinkPartnerHandleStatusXor
	.align	2, 0
	.type	 LinkPartnerHandleDataTransfer,function
	.thumb_func
LinkPartnerHandleDataTransfer:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 LinkPartnerHandleDataTransfer,.Lfe56-LinkPartnerHandleDataTransfer
	.align	2, 0
	.type	 LinkPartnerHandleDMA3Transfer,function
	.thumb_func
LinkPartnerHandleDMA3Transfer:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 LinkPartnerHandleDMA3Transfer,.Lfe57-LinkPartnerHandleDMA3Transfer
	.align	2, 0
	.type	 LinkPartnerHandlePlayBGM,function
	.thumb_func
LinkPartnerHandlePlayBGM:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 LinkPartnerHandlePlayBGM,.Lfe58-LinkPartnerHandlePlayBGM
	.align	2, 0
	.type	 LinkPartnerHandleCmd32,function
	.thumb_func
LinkPartnerHandleCmd32:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 LinkPartnerHandleCmd32,.Lfe59-LinkPartnerHandleCmd32
	.align	2, 0
	.type	 LinkPartnerHandleTwoReturnValues,function
	.thumb_func
LinkPartnerHandleTwoReturnValues:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 LinkPartnerHandleTwoReturnValues,.Lfe60-LinkPartnerHandleTwoReturnValues
	.align	2, 0
	.type	 LinkPartnerHandleChosenMonReturnValue,function
	.thumb_func
LinkPartnerHandleChosenMonReturnValue:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 LinkPartnerHandleChosenMonReturnValue,.Lfe61-LinkPartnerHandleChosenMonReturnValue
	.align	2, 0
	.type	 LinkPartnerHandleOneReturnValue,function
	.thumb_func
LinkPartnerHandleOneReturnValue:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 LinkPartnerHandleOneReturnValue,.Lfe62-LinkPartnerHandleOneReturnValue
	.align	2, 0
	.type	 LinkPartnerHandleOneReturnValue_Duplicate,function
	.thumb_func
LinkPartnerHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 LinkPartnerHandleOneReturnValue_Duplicate,.Lfe63-LinkPartnerHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 LinkPartnerHandleClearUnkVar,function
	.thumb_func
LinkPartnerHandleClearUnkVar:
	push	{lr}
	ldr	r2, .L621
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L622:
	.align	2, 0
.L621:
	.word	gUnusedControllerStruct
.Lfe64:
	.size	 LinkPartnerHandleClearUnkVar,.Lfe64-LinkPartnerHandleClearUnkVar
	.align	2, 0
	.type	 LinkPartnerHandleSetUnkVar,function
	.thumb_func
LinkPartnerHandleSetUnkVar:
	push	{lr}
	ldr	r3, .L624
	ldr	r1, .L624+0x4
	ldr	r0, .L624+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L625:
	.align	2, 0
.L624:
	.word	gUnusedControllerStruct
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe65:
	.size	 LinkPartnerHandleSetUnkVar,.Lfe65-LinkPartnerHandleSetUnkVar
	.align	2, 0
	.type	 LinkPartnerHandleClearUnkFlag,function
	.thumb_func
LinkPartnerHandleClearUnkFlag:
	push	{lr}
	ldr	r2, .L627
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	gUnusedControllerStruct
.Lfe66:
	.size	 LinkPartnerHandleClearUnkFlag,.Lfe66-LinkPartnerHandleClearUnkFlag
	.align	2, 0
	.type	 LinkPartnerHandleToggleUnkFlag,function
	.thumb_func
LinkPartnerHandleToggleUnkFlag:
	push	{lr}
	ldr	r3, .L630
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L631:
	.align	2, 0
.L630:
	.word	gUnusedControllerStruct
.Lfe67:
	.size	 LinkPartnerHandleToggleUnkFlag,.Lfe67-LinkPartnerHandleToggleUnkFlag
	.align	2, 0
	.type	 LinkPartnerHandleHitAnimation,function
	.thumb_func
LinkPartnerHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L635
	ldr	r2, .L635+0x4
	ldr	r4, .L635+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L633	@cond_branch
	bl	LinkPartnerBufferExecCompleted
	b	.L634
.L636:
	.align	2, 0
.L635:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L633:
	ldr	r1, .L637
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L637+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L637+0x8
	str	r1, [r0]
.L634:
	pop	{r4}
	pop	{r0}
	bx	r0
.L638:
	.align	2, 0
.L637:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe68:
	.size	 LinkPartnerHandleHitAnimation,.Lfe68-LinkPartnerHandleHitAnimation
	.align	2, 0
	.type	 LinkPartnerHandleCantSwitch,function
	.thumb_func
LinkPartnerHandleCantSwitch:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 LinkPartnerHandleCantSwitch,.Lfe69-LinkPartnerHandleCantSwitch
	.align	2, 0
	.type	 LinkPartnerHandlePlaySE,function
	.thumb_func
LinkPartnerHandlePlaySE:
	push	{r4, lr}
	ldr	r4, .L643
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L641	@cond_branch
	mov	r3, #0xc0
.L641:
	ldr	r2, .L643+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	LinkPartnerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L644:
	.align	2, 0
.L643:
	.word	gActiveBattler
	.word	gBattleBufferA
.Lfe70:
	.size	 LinkPartnerHandlePlaySE,.Lfe70-LinkPartnerHandlePlaySE
	.align	2, 0
	.type	 LinkPartnerHandlePlayFanfare,function
	.thumb_func
LinkPartnerHandlePlayFanfare:
	push	{lr}
	ldr	r2, .L646
	ldr	r0, .L646+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L647:
	.align	2, 0
.L646:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe71:
	.size	 LinkPartnerHandlePlayFanfare,.Lfe71-LinkPartnerHandlePlayFanfare
	.align	2, 0
	.type	 LinkPartnerHandleFaintingCry,function
	.thumb_func
LinkPartnerHandleFaintingCry:
	push	{lr}
	ldr	r1, .L649
	ldr	r0, .L649+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L649+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	neg	r1, r1
	mov	r2, #0x5
	bl	PlayCry_ByMode
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
.Lfe72:
	.size	 LinkPartnerHandleFaintingCry,.Lfe72-LinkPartnerHandleFaintingCry
	.align	2, 0
	.type	 LinkPartnerHandleIntroSlide,function
	.thumb_func
LinkPartnerHandleIntroSlide:
	push	{lr}
	ldr	r1, .L652
	ldr	r0, .L652+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	HandleIntroSlide
	ldr	r2, .L652+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L653:
	.align	2, 0
.L652:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe73:
	.size	 LinkPartnerHandleIntroSlide,.Lfe73-LinkPartnerHandleIntroSlide
	.align	2, 0
	.type	 LinkPartnerHandleIntroTrainerBallThrow,function
	.thumb_func
LinkPartnerHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L659
	ldr	r6, .L659+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L659+0x8
	add	r0, r0, r4
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L659+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L659+0x10
	str	r1, [r0]
	ldrb	r2, [r6]
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x38]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L659+0x14
	bl	StoreSpriteCallbackInData6
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L659+0x18
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	ldr	r4, .L659+0x1c
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r5, #0xff
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L656	@cond_branch
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r1, [r1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L656	@cond_branch
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1]
	and	r5, r5, r0
	cmp	r5, #0x3
	bne	.L655	@cond_branch
.L656:
	ldr	r0, .L659+0x4
	ldrb	r0, [r0]
	bl	GetBattlerMultiplayerId
	ldr	r2, .L659+0x1c
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x13]
	add	r0, r0, #0x2
	b	.L657
.L660:
	.align	2, 0
.L659:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	SpriteCB_FreePlayerSpriteLoadMonSprite
	.word	0xd6f9
	.word	gLinkPlayers
.L655:
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x13]
.L657:
	ldr	r1, .L661
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r4, r7, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r2, .L661+0x4
	ldr	r1, .L661+0x8
	ldr	r5, .L661+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x5]
	ldr	r0, .L661+0x10
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L661+0x14
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r5]
	strh	r0, [r1, #0x8]
	ldr	r3, .L661+0x18
	ldr	r0, [r3]
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L658	@cond_branch
	ldr	r0, .L661+0x1c
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L661+0x20
	str	r1, [r0]
.L658:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L661+0x24
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L661+0x28
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L662:
	.align	2, 0
.L661:
	.word	gTrainerBackPicPaletteTable
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	Task_StartSendOutAnim
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	LinkPartnerDummy
.Lfe74:
	.size	 LinkPartnerHandleIntroTrainerBallThrow,.Lfe74-LinkPartnerHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 Task_StartSendOutAnim,function
	.thumb_func
Task_StartSendOutAnim:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L669
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x17
	bgt	.L664	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xa]
	b	.L665
.L670:
	.align	2, 0
.L669:
	.word	gTasks
.L664:
	ldr	r7, .L671
	ldrb	r0, [r7]
	mov	r9, r0
	ldrh	r0, [r1, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L667	@cond_branch
	ldr	r0, .L671+0x4
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L666	@cond_branch
.L667:
	ldr	r0, .L671+0x8
	ldrb	r1, [r7]
	lsl	r2, r1, #0x9
	add	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L671+0xc
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	StartSendOutAnim
	b	.L668
.L672:
	.align	2, 0
.L671:
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
.L666:
	ldr	r4, .L673
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r4, r4, #0x1
	add	r1, r1, r4
	ldr	r5, .L673+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	StartSendOutAnim
	ldrb	r0, [r7]
	mov	r6, #0x2
	eor	r0, r0, r6
	strb	r0, [r7]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r1, r1, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L673+0x8
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSpriteGfx
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	StartSendOutAnim
	ldrb	r0, [r7]
	eor	r0, r0, r6
	strb	r0, [r7]
.L668:
	ldr	r1, .L673+0xc
	ldr	r2, .L673+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L673+0x14
	str	r1, [r0]
	mov	r3, r9
	strb	r3, [r2]
	mov	r0, r8
	bl	DestroyTask
.L665:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L674:
	.align	2, 0
.L673:
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	Intro_ShowHealthbox
.Lfe75:
	.size	 Task_StartSendOutAnim,.Lfe75-Task_StartSendOutAnim
	.align	2, 0
	.type	 LinkPartnerHandleDrawPartyStatusSummary,function
	.thumb_func
LinkPartnerHandleDrawPartyStatusSummary:
	push	{r4, r5, r6, lr}
	ldr	r1, .L679
	ldr	r0, .L679+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L676	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L676	@cond_branch
	bl	LinkPartnerBufferExecCompleted
	b	.L677
.L680:
	.align	2, 0
.L679:
	.word	gBattleBufferA
	.word	gActiveBattler
.L676:
	ldr	r6, .L681
	ldr	r0, [r6]
	ldr	r5, .L681+0x4
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r5]
	lsl	r3, r0, #0x9
	ldr	r4, .L681+0x8
	add	r1, r3, r4
	sub	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	sub	r4, r4, #0x2
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L681+0xc
	ldrb	r1, [r5]
	add	r1, r1, r2
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x5]
	ldrb	r2, [r5]
	lsl	r0, r2, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L678	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L678:
	ldr	r0, .L681+0x10
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L681+0x14
	str	r0, [r1]
.L677:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L682:
	.align	2, 0
.L681:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleBufferA+0x4
	.word	gBattlerStatusSummaryTaskId
	.word	gBattlerControllerFuncs
	.word	EndDrawPartyStatusSummary
.Lfe76:
	.size	 LinkPartnerHandleDrawPartyStatusSummary,.Lfe76-LinkPartnerHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 EndDrawPartyStatusSummary,function
	.thumb_func
EndDrawPartyStatusSummary:
	push	{r4, lr}
	ldr	r4, .L685
	ldr	r0, [r4]
	ldr	r3, .L685+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L684	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	bl	LinkPartnerBufferExecCompleted
.L684:
	pop	{r4}
	pop	{r0}
	bx	r0
.L686:
	.align	2, 0
.L685:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe77:
	.size	 EndDrawPartyStatusSummary,.Lfe77-EndDrawPartyStatusSummary
	.align	2, 0
	.type	 LinkPartnerHandleHidePartyStatusSummary,function
	.thumb_func
LinkPartnerHandleHidePartyStatusSummary:
	push	{lr}
	ldr	r0, .L689
	ldr	r1, [r0]
	ldr	r0, .L689+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L688	@cond_branch
	ldr	r2, .L689+0x8
	ldr	r0, .L689+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L689+0x10
	str	r1, [r0]
.L688:
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L690:
	.align	2, 0
.L689:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gTasks
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
.Lfe78:
	.size	 LinkPartnerHandleHidePartyStatusSummary,.Lfe78-LinkPartnerHandleHidePartyStatusSummary
	.align	2, 0
	.type	 LinkPartnerHandleEndBounceEffect,function
	.thumb_func
LinkPartnerHandleEndBounceEffect:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 LinkPartnerHandleEndBounceEffect,.Lfe79-LinkPartnerHandleEndBounceEffect
	.align	2, 0
	.type	 LinkPartnerHandleSpriteInvisibility,function
	.thumb_func
LinkPartnerHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L694
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L693	@cond_branch
	ldr	r3, .L694+0x4
	ldr	r0, .L694+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L694+0xc
	lsl	r1, r1, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	add	r2, r2, #0x3e
	mov	r0, #0x1
	ldrb	r1, [r1]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	CopyBattleSpriteInvisibility
.L693:
	bl	LinkPartnerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L695:
	.align	2, 0
.L694:
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleBufferA
.Lfe80:
	.size	 LinkPartnerHandleSpriteInvisibility,.Lfe80-LinkPartnerHandleSpriteInvisibility
	.align	2, 0
	.type	 LinkPartnerHandleBattleAnimation,function
	.thumb_func
LinkPartnerHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L700
	ldrb	r0, [r6]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L697	@cond_branch
	ldr	r5, .L700+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r5, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r5, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L698	@cond_branch
	bl	LinkPartnerBufferExecCompleted
	b	.L697
.L701:
	.align	2, 0
.L700:
	.word	gActiveBattler
	.word	gBattleBufferA
.L698:
	ldr	r0, .L702
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L702+0x4
	str	r0, [r1]
.L697:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L703:
	.align	2, 0
.L702:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe81:
	.size	 LinkPartnerHandleBattleAnimation,.Lfe81-LinkPartnerHandleBattleAnimation
	.align	2, 0
	.type	 LinkPartnerHandleLinkStandbyMsg,function
	.thumb_func
LinkPartnerHandleLinkStandbyMsg:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 LinkPartnerHandleLinkStandbyMsg,.Lfe82-LinkPartnerHandleLinkStandbyMsg
	.align	2, 0
	.type	 LinkPartnerHandleResetActionMoveSelection,function
	.thumb_func
LinkPartnerHandleResetActionMoveSelection:
	push	{lr}
	bl	LinkPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 LinkPartnerHandleResetActionMoveSelection,.Lfe83-LinkPartnerHandleResetActionMoveSelection
	.align	2, 0
	.type	 LinkPartnerHandleEndLinkBattle,function
	.thumb_func
LinkPartnerHandleEndLinkBattle:
	push	{r4, lr}
	ldr	r2, .L707
	ldr	r1, .L707+0x4
	ldr	r4, .L707+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	LinkPartnerBufferExecCompleted
	ldr	r1, .L707+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L707+0x10
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L708:
	.align	2, 0
.L707:
	.word	gBattleOutcome
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	SetBattleEndCallbacks
.Lfe84:
	.size	 LinkPartnerHandleEndLinkBattle,.Lfe84-LinkPartnerHandleEndLinkBattle
	.align	2, 0
	.type	 LinkPartnerCmdEnd,function
	.thumb_func
LinkPartnerCmdEnd:
	bx	lr
.Lfe85:
	.size	 LinkPartnerCmdEnd,.Lfe85-LinkPartnerCmdEnd
.text
	.align	2, 0 @ Don't pad with nop

