@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sOakOldManBufferCommands,object
	.size	 sOakOldManBufferCommands,228
sOakOldManBufferCommands:
	.word	OakOldManHandleGetMonData
	.word	OakOldManHandleGetRawMonData
	.word	OakOldManHandleSetMonData
	.word	OakOldManHandleSetRawMonData
	.word	OakOldManHandleLoadMonSprite
	.word	OakOldManHandleSwitchInAnim
	.word	OakOldManHandleReturnMonToBall
	.word	OakOldManHandleDrawTrainerPic
	.word	OakOldManHandleTrainerSlide
	.word	OakOldManHandleTrainerSlideBack
	.word	OakOldManHandleFaintAnimation
	.word	OakOldManHandlePaletteFade
	.word	OakOldManHandleSuccessBallThrowAnim
	.word	OakOldManHandleBallThrowAnim
	.word	OakOldManHandlePause
	.word	OakOldManHandleMoveAnimation
	.word	OakOldManHandlePrintString
	.word	OakOldManHandlePrintSelectionString
	.word	OakOldManHandleChooseAction
	.word	OakOldManHandleUnknownYesNoBox
	.word	OakOldManHandleChooseMove
	.word	OakOldManHandleChooseItem
	.word	OakOldManHandleChoosePokemon
	.word	OakOldManHandleCmd23
	.word	OakOldManHandleHealthBarUpdate
	.word	OakOldManHandleExpUpdate
	.word	OakOldManHandleStatusIconUpdate
	.word	OakOldManHandleStatusAnimation
	.word	OakOldManHandleStatusXor
	.word	OakOldManHandleDataTransfer
	.word	OakOldManHandleDMA3Transfer
	.word	OakOldManHandlePlayBGM
	.word	OakOldManHandleCmd32
	.word	OakOldManHandleTwoReturnValues
	.word	OakOldManHandleChosenMonReturnValue
	.word	OakOldManHandleOneReturnValue
	.word	OakOldManHandleOneReturnValue_Duplicate
	.word	OakOldManHandleCmd37
	.word	OakOldManHandleCmd38
	.word	OakOldManHandleCmd39
	.word	OakOldManHandleCmd40
	.word	OakOldManHandleHitAnimation
	.word	OakOldManHandleCmd42
	.word	OakOldManHandlePlaySE
	.word	OakOldManHandlePlayFanfare
	.word	OakOldManHandleFaintingCry
	.word	OakOldManHandleIntroSlide
	.word	OakOldManHandleIntroTrainerBallThrow
	.word	OakOldManHandleDrawPartyStatusSummary
	.word	OakOldManHandleHidePartyStatusSummary
	.word	OakOldManHandleEndBounceEffect
	.word	OakOldManHandleSpriteInvisibility
	.word	OakOldManHandleBattleAnimation
	.word	OakOldManHandleLinkStandbyMsg
	.word	OakOldManHandleResetActionMoveSelection
	.word	OakOldManHandleCmd55
	.word	OakOldManCmdEnd
.text
	.align	2, 0
	.type	 OakOldManDummy,function
	.thumb_func
OakOldManDummy:
	bx	lr
.Lfe1:
	.size	 OakOldManDummy,.Lfe1-OakOldManDummy
	.align	2, 0
	.globl	SetControllerToOakOrOldMan
	.type	 SetControllerToOakOrOldMan,function
	.thumb_func
SetControllerToOakOrOldMan:
	ldr	r1, .L6
	ldr	r0, .L6+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L6+0x8
	str	r1, [r0]
	ldr	r2, .L6+0xc
	ldr	r0, [r2]
	add	r0, r0, #0x94
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0x95
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0x96
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0x97
	strb	r1, [r0]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OakOldManBufferRunCommand
	.word	gBattleStruct
.Lfe2:
	.size	 SetControllerToOakOrOldMan,.Lfe2-SetControllerToOakOrOldMan
	.align	2, 0
	.type	 OakOldManBufferRunCommand,function
	.thumb_func
OakOldManBufferRunCommand:
	push	{lr}
	ldr	r2, .L12
	ldr	r1, .L12+0x4
	ldr	r0, .L12+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L9	@cond_branch
	ldr	r0, .L12+0xc
	lsl	r1, r3, #0x9
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x38
	bhi	.L10	@cond_branch
	ldr	r0, .L12+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L9
.L13:
	.align	2, 0
.L12:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	sOakOldManBufferCommands
.L10:
	bl	OakOldManBufferExecCompleted
.L9:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 OakOldManBufferRunCommand,.Lfe3-OakOldManBufferRunCommand
	.align	2, 0
	.type	 HandleInputChooseAction,function
	.thumb_func
HandleInputChooseAction:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L49
	ldr	r4, .L49+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r1, r7, #0x2
	add	r1, r2, r1
	ldrb	r5, [r1]
	add	r1, r7, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r5, r5, r1
	mov	r1, #0x1
	mov	r2, #0x7
	mov	r3, #0x1
	bl	DoBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x7
	mov	r3, #0x1
	bl	DoBounceEffect
	ldr	r0, .L49+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L15	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L49+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L18	@cond_branch
	cmp	r0, #0x1
	bgt	.L23	@cond_branch
	cmp	r0, #0
	beq	.L17	@cond_branch
	b	.L45
.L50:
	.align	2, 0
.L49:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gMain
	.word	gActionSelectionCursor
.L23:
	cmp	r0, #0x2
	beq	.L19	@cond_branch
	cmp	r0, #0x3
	beq	.L20	@cond_branch
	b	.L45
.L17:
	mov	r0, #0x1
	mov	r1, #0x0
	b	.L48
.L18:
	mov	r0, #0x1
	mov	r1, #0x1
	b	.L48
.L19:
	mov	r0, #0x1
	mov	r1, #0x2
	b	.L48
.L20:
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	b	.L45
.L15:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
	ldr	r5, .L51
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB220
	b	.L14	@long jump
.LCB220:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	ActionSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x1
	b	.L46
.L52:
	.align	2, 0
.L51:
	.word	gActionSelectionCursor
.L25:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldr	r5, .L53
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB263
	b	.L14	@long jump
.LCB263:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	ActionSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x1
	b	.L46
.L54:
	.align	2, 0
.L53:
	.word	gActionSelectionCursor
.L28:
	mov	r0, #0x40
	mov	r8, r0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L31	@cond_branch
	ldr	r5, .L55
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L14	@cond_branch
	b	.L47
.L56:
	.align	2, 0
.L55:
	.word	gActionSelectionCursor
.L31:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L34	@cond_branch
	ldr	r5, .L57
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L14	@cond_branch
.L47:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	ActionSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x2
.L46:
	eor	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	ActionSelectionCreateCursorAt
	b	.L14
.L58:
	.align	2, 0
.L57:
	.word	gActionSelectionCursor
.L34:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L37	@cond_branch
	ldr	r6, .L59
	ldr	r0, [r6]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L14	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L14	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L59+0x4
	ldrb	r1, [r1]
	ldr	r2, .L59+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L14	@cond_branch
	ldr	r0, [r6]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L14	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r7, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L39	@cond_branch
	cmp	r5, #0xc
	bhi	.L14	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	AddBagItem
.L39:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	mov	r1, #0xc
.L48:
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
.L45:
	bl	OakOldManBufferExecCompleted
	b	.L14
.L60:
	.align	2, 0
.L59:
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L37:
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L14	@cond_branch
	bl	SwapHpBarsWithHpText
.L14:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 HandleInputChooseAction,.Lfe4-HandleInputChooseAction
	.align	2, 0
	.type	 SimulateInputChooseAction,function
	.thumb_func
SimulateInputChooseAction:
	push	{r4, lr}
	ldr	r1, .L71
	ldr	r2, [r1]
	add	r0, r2, #0
	add	r0, r0, #0x94
	ldrb	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x1
	beq	.L64	@cond_branch
	cmp	r0, #0x1
	bgt	.L70	@cond_branch
	cmp	r0, #0
	beq	.L63	@cond_branch
	b	.L62
.L72:
	.align	2, 0
.L71:
	.word	gBattleStruct
.L70:
	cmp	r0, #0x2
	beq	.L66	@cond_branch
	b	.L62
.L63:
	add	r1, r2, #0
	add	r1, r1, #0x96
	mov	r0, #0x40
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r1, r1, #0x94
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L64:
	ldr	r1, [r4]
	add	r1, r1, #0x96
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L62	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	ActionSelectionDestroyCursorAt
	mov	r0, #0x1
	mov	r1, #0x0
	bl	ActionSelectionCreateCursorAt
	ldr	r0, [r4]
	add	r0, r0, #0x96
	mov	r1, #0x40
	strb	r1, [r0]
	ldr	r1, [r4]
	add	r1, r1, #0x94
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L62
.L66:
	add	r1, r2, #0
	add	r1, r1, #0x96
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L62	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	bl	OakOldManBufferExecCompleted
.L62:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 SimulateInputChooseAction,.Lfe5-SimulateInputChooseAction
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L75
	ldr	r1, .L75+0x4
	ldr	r0, .L75+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L75+0xc
	cmp	r1, r0
	bne	.L74	@cond_branch
	bl	OakOldManBufferExecCompleted
.L74:
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe6:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe6-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L78	@cond_branch
	bl	OakOldManBufferExecCompleted
.L78:
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 CompleteOnInactiveTextPrinter,.Lfe7-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 OakOldManSetBattleEndCallbacks,function
	.thumb_func
OakOldManSetBattleEndCallbacks:
	push	{lr}
	ldr	r0, .L81
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L80	@cond_branch
	ldr	r2, .L81+0x4
	ldr	r0, .L81+0x8
	add	r3, r2, r0
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L81+0xc
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, [r2, #0x8]
	bl	SetMainCallback2
.L80:
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gPaletteFade
	.word	gMain
	.word	0x439
	.word	gPreBattleCallback1
.Lfe8:
	.size	 OakOldManSetBattleEndCallbacks,.Lfe8-OakOldManSetBattleEndCallbacks
	.align	2, 0
	.type	 CompleteOnSpecialAnimDone,function
	.thumb_func
CompleteOnSpecialAnimDone:
	push	{lr}
	ldr	r0, .L85
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L84	@cond_branch
	bl	OakOldManBufferExecCompleted
.L84:
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	gDoingBattleAnim
.Lfe9:
	.size	 CompleteOnSpecialAnimDone,.Lfe9-CompleteOnSpecialAnimDone
	.align	2, 0
	.globl	OakOldManHandleInputChooseMove
	.type	 OakOldManHandleInputChooseMove,function
	.thumb_func
OakOldManHandleInputChooseMove:
	push	{lr}
	bl	HandleInputChooseMove
	ldr	r2, .L89
	ldr	r1, .L89+0x4
	ldr	r0, .L89+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L88	@cond_branch
	bl	OakOldManBufferExecCompleted
.L88:
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
.Lfe10:
	.size	 OakOldManHandleInputChooseMove,.Lfe10-OakOldManHandleInputChooseMove
	.align	2, 0
	.type	 OpenPartyMenuToChooseMon,function
	.thumb_func
OpenPartyMenuToChooseMon:
	push	{r4, lr}
	ldr	r0, .L93
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L92	@cond_branch
	ldr	r1, .L93+0x4
	ldr	r2, .L93+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L93+0xc
	str	r1, [r0]
	ldr	r3, .L93+0x10
	ldr	r1, .L93+0x14
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldrb	r4, [r1, #0x8]
	bl	DestroyTask
	bl	FreeAllWindowBuffers
	add	r0, r4, #0
	bl	OpenPartyMenuInTutorialBattle
.L92:
	pop	{r4}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gPaletteFade
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	WaitForMonSelection
	.word	gTasks
	.word	gBattleControllerData
.Lfe11:
	.size	 OpenPartyMenuToChooseMon,.Lfe11-OpenPartyMenuToChooseMon
	.align	2, 0
	.type	 WaitForMonSelection,function
	.thumb_func
WaitForMonSelection:
	push	{lr}
	ldr	r0, .L99
	ldr	r1, [r0, #0x4]
	ldr	r0, .L99+0x4
	cmp	r1, r0
	bne	.L96	@cond_branch
	ldr	r0, .L99+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L96	@cond_branch
	ldr	r0, .L99+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L97	@cond_branch
	ldr	r0, .L99+0x10
	ldrb	r1, [r0]
	ldr	r2, .L99+0x14
	mov	r0, #0x1
	bl	BtlController_EmitChosenMonReturnValue
	b	.L98
.L100:
	.align	2, 0
.L99:
	.word	gMain
	.word	BattleMainCB2
	.word	gPaletteFade
	.word	gPartyMenuUseExitCallback
	.word	gSelectedMonPartyId
	.word	gBattlePartyCurrentOrder
.L97:
	mov	r0, #0x1
	mov	r1, #0x6
	mov	r2, #0x0
	bl	BtlController_EmitChosenMonReturnValue
.L98:
	bl	OakOldManBufferExecCompleted
.L96:
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 WaitForMonSelection,.Lfe12-WaitForMonSelection
	.align	2, 0
	.type	 OpenBagAndChooseItem,function
	.thumb_func
OpenBagAndChooseItem:
	push	{lr}
	ldr	r0, .L105
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L102	@cond_branch
	ldr	r1, .L105+0x4
	ldr	r0, .L105+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L105+0xc
	str	r1, [r0]
	bl	ReshowBattleScreenDummy
	bl	FreeAllWindowBuffers
	ldr	r0, .L105+0x10
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L103	@cond_branch
	bl	CB2_BagMenuFromBattle
	b	.L102
.L106:
	.align	2, 0
.L105:
	.word	gPaletteFade
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteWhenChoseItem
	.word	gBattleTypeFlags
.L103:
	bl	InitOldManBag
.L102:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 OpenBagAndChooseItem,.Lfe13-OpenBagAndChooseItem
	.align	2, 0
	.type	 CompleteWhenChoseItem,function
	.thumb_func
CompleteWhenChoseItem:
	push	{lr}
	ldr	r0, .L111
	ldr	r1, [r0, #0x4]
	ldr	r0, .L111+0x4
	cmp	r1, r0
	bne	.L108	@cond_branch
	ldr	r0, .L111+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L108	@cond_branch
	mov	r0, #0x4
	bl	BtlCtrl_OakOldMan_TestState2Flag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L109	@cond_branch
	ldr	r0, .L111+0xc
	ldrh	r0, [r0]
	cmp	r0, #0xd
	bne	.L109	@cond_branch
	ldr	r0, .L111+0x10
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L109	@cond_branch
	mov	r0, #0x4
	bl	BtlCtrl_OakOldMan_SetState2Flag
	ldr	r1, .L111+0x14
	ldr	r0, .L111+0x18
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L111+0x1c
	str	r1, [r0]
	b	.L108
.L112:
	.align	2, 0
.L111:
	.word	gMain
	.word	BattleMainCB2
	.word	gPaletteFade
	.word	gSpecialVar_ItemId
	.word	gBattleTypeFlags
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PrintOakText_KeepAnEyeOnHP
.L109:
	ldr	r0, .L113
	ldrh	r1, [r0]
	mov	r0, #0x1
	bl	BtlController_EmitOneReturnValue
	bl	OakOldManBufferExecCompleted
.L108:
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gSpecialVar_ItemId
.Lfe14:
	.size	 CompleteWhenChoseItem,.Lfe14-CompleteWhenChoseItem
	.align	2, 0
	.type	 Intro_TryShinyAnimShowHealthbox,function
	.thumb_func
Intro_TryShinyAnimShowHealthbox:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L120
	ldr	r0, [r4]
	ldr	r5, .L120+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r7, #0x88
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L116	@cond_branch
	ldr	r0, .L120+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L120+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L116:
	ldr	r1, [r4]
	ldrb	r0, [r5]
	mov	r6, #0x2
	add	r2, r6, #0
	eor	r2, r2, r0
	ldr	r1, [r1, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L117	@cond_branch
	ldr	r0, .L120+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L120+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L117:
	ldr	r0, [r4]
	ldrb	r2, [r5]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	mov	r4, #0x8
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L118	@cond_branch
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L118	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L119	@cond_branch
	ldr	r0, .L120+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L119	@cond_branch
	ldr	r1, .L120+0x14
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L120+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L120+0x1c
	ldrb	r0, [r5]
	add	r1, r6, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L120+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L120+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	eor	r0, r0, r6
	bl	StartHealthboxSlideIn
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L119:
	ldr	r1, .L120+0x14
	ldr	r4, .L120+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L120+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r5, .L120+0x1c
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L120+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L120+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	bl	StartHealthboxSlideIn
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldr	r0, .L120
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L120+0x20
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L120+0x24
	str	r1, [r0]
.L118:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattleControllerData
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	Intro_WaitForShinyAnimAndHealthbox
.Lfe15:
	.size	 Intro_TryShinyAnimShowHealthbox,.Lfe15-Intro_TryShinyAnimShowHealthbox
	.align	2, 0
	.type	 Intro_WaitForShinyAnimAndHealthbox,function
	.thumb_func
Intro_WaitForShinyAnimAndHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r4, #0x0
	ldr	r2, .L125
	ldr	r0, .L125+0x4
	ldr	r1, .L125+0x8
	mov	r8, r1
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L125+0xc
	cmp	r1, r0
	bne	.L123	@cond_branch
	mov	r4, #0x1
.L123:
	cmp	r4, #0
	beq	.L124	@cond_branch
	ldr	r7, .L125+0x10
	ldr	r0, [r7]
	ldr	r4, [r0, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r4
	ldrb	r1, [r2, #0x1]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L124	@cond_branch
	mov	r6, #0x2
	add	r1, r6, #0
	eor	r1, r1, r3
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L124	@cond_branch
	ldrb	r1, [r2]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r7]
	mov	r1, r8
	ldrb	r2, [r1]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r2, [r7]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	ldr	r2, [r7]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L125+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, .L125+0x18
	mov	r1, #0xa
	bl	CreateTask
	ldr	r2, .L125+0x1c
	mov	r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L125+0x20
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	ldr	r1, .L125+0x24
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L125+0x28
	str	r1, [r0]
.L124:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	0x27f9
	.word	Task_PlayerController_RestoreBgmAfterCry
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	PrintOakText_ForPetesSake
.Lfe16:
	.size	 Intro_WaitForShinyAnimAndHealthbox,.Lfe16-Intro_WaitForShinyAnimAndHealthbox
	.align	2, 0
	.type	 Task_GiveExpToMon,function
	.thumb_func
Task_GiveExpToMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L138
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r8, r0
	ldrb	r0, [r0, #0x8]
	mov	sl, r0
	mov	r1, r8
	ldrb	r7, [r1, #0xc]
	str	r7, [sp, #0x8]
	ldrh	r2, [r1, #0xa]
	str	r2, [sp, #0xc]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L129	@cond_branch
	ldr	r1, .L138+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	sl, r0
	bne	.LCB1408
	b	.L128	@long jump
.LCB1408:
.L129:
	mov	r0, #0x64
	mov	r1, sl
	mul	r1, r1, r0
	ldr	r0, .L138+0x8
	add	r6, r1, r0
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x4]
	ldr	r3, .L138+0xc
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	ldr	r2, .L138+0x10
	lsl	r1, r5, #0x3
	sub	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x13]
	mov	r1, #0xca
	lsl	r1, r1, #0x1
	mul	r1, r1, r2
	add	r4, r4, r1
	add	r4, r4, r3
	ldr	r2, [r4]
	str	r2, [sp]
	ldr	r3, [sp, #0xc]
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x10
	add	r0, r0, r1
	cmp	r0, r2
	bcc	.L130	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x19
	mov	r2, sp
	bl	SetMonData
	add	r0, r6, #0
	bl	CalculateMonStats
	ldr	r2, [sp]
	add	r0, sp, #0x4
	ldrh	r0, [r0]
	sub	r2, r2, r0
	ldr	r0, [sp, #0xc]
	sub	r2, r0, r2
	ldr	r4, .L138+0x14
	ldrb	r5, [r4]
	strb	r7, [r4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xb
	bl	BtlController_EmitTwoReturnValues
	strb	r5, [r4]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L131	@cond_branch
	ldr	r2, .L138+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	mov	r1, sl
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.L132	@cond_branch
	mov	r0, #0x2
	eor	r7, r7, r0
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L131	@cond_branch
.L132:
	ldr	r0, .L138+0x18
	b	.L136
.L139:
	.align	2, 0
.L138:
	.word	gTasks
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gSpeciesInfo
	.word	gActiveBattler
	.word	Task_LaunchLvlUpAnim
.L131:
	ldr	r0, .L140
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L140+0x4
	b	.L137
.L141:
	.align	2, 0
.L140:
	.word	gTasks
	.word	DestroyExpTaskAndCompleteOnInactiveTextPrinter
.L130:
	str	r0, [sp, #0x4]
	add	r2, sp, #0x4
	add	r0, r6, #0
	mov	r1, #0x19
	bl	SetMonData
	ldr	r1, .L142
	ldr	r3, [sp, #0x8]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, .L142+0x4
	str	r1, [r0]
	mov	r0, r9
	bl	DestroyTask
	b	.L135
.L143:
	.align	2, 0
.L142:
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter2
.L128:
	ldr	r0, .L144
.L136:
	mov	r1, r8
.L137:
	str	r0, [r1]
.L135:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	Task_PrepareToGiveExpWithExpBar
.Lfe17:
	.size	 Task_GiveExpToMon,.Lfe17-Task_GiveExpToMon
	.align	2, 0
	.type	 Task_PrepareToGiveExpWithExpBar,function
	.thumb_func
Task_PrepareToGiveExpWithExpBar:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L147
	lsl	r2, r0, #0x2
	mov	r8, r2
	add	r8, r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x3
	mov	r8, r0
	add	r8, r8, r1
	mov	r2, r8
	ldrb	r1, [r2, #0x8]
	mov	r0, #0xa
	ldrsh	r2, [r2, r0]
	mov	r9, r2
	mov	r2, r8
	ldrb	r2, [r2, #0xc]
	mov	sl, r2
	mov	r0, #0x64
	mov	r6, r1
	mul	r6, r6, r0
	ldr	r0, .L147+0x4
	add	r6, r6, r0
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	add	r3, r0, #0
	ldr	r6, .L147+0x8
	lsl	r1, r4, #0x2
	ldr	r2, .L147+0xc
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r6
	ldr	r1, [r1]
	sub	r3, r3, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r4, r4, r6
	ldr	r2, [r4]
	sub	r2, r2, r1
	ldr	r0, .L147+0x10
	add	r0, r0, sl
	ldrb	r1, [r0]
	mov	r0, r9
	neg	r0, r0
	str	r0, [sp]
	mov	r0, sl
	bl	SetBattleBarStruct
	mov	r0, #0x1b
	bl	PlaySE
	ldr	r0, .L147+0x14
	mov	r1, r8
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	gTasks
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gSpeciesInfo
	.word	gHealthboxSpriteIds
	.word	Task_GiveExpWithExpBar
.Lfe18:
	.size	 Task_PrepareToGiveExpWithExpBar,.Lfe18-Task_PrepareToGiveExpWithExpBar
	.align	2, 0
	.type	 Task_GiveExpWithExpBar,function
	.thumb_func
Task_GiveExpWithExpBar:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L155
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r1, [r6, #0x1c]
	mov	r2, #0x1c
	ldrsh	r0, [r6, r2]
	cmp	r0, #0xc
	bgt	.L150	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r6, #0x1c]
	b	.L151
.L156:
	.align	2, 0
.L155:
	.word	gTasks
.L150:
	ldrb	r0, [r6, #0x8]
	mov	r9, r0
	ldrh	r2, [r6, #0xa]
	mov	sl, r2
	ldrb	r7, [r6, #0xc]
	ldr	r5, .L157
	add	r5, r7, r5
	ldrb	r1, [r5]
	add	r0, r7, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r4, r0
	bne	.L151	@cond_branch
	mov	r0, #0x1b
	bl	m4aSongNumStop
	mov	r0, #0x64
	mov	r1, r9
	mul	r1, r1, r0
	ldr	r0, .L157+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r3, .L157+0x8
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	ldr	r2, .L157+0xc
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r1
	add	r4, r4, r0
	add	r4, r4, r3
	ldr	r1, [r4]
	str	r1, [sp]
	mov	r2, sl
	lsl	r0, r2, #0x10
	asr	r4, r0, #0x10
	ldr	r0, [sp, #0x4]
	add	r0, r0, r4
	cmp	r0, r1
	blt	.L153	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x19
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0
	bl	CalculateMonStats
	ldr	r2, [sp]
	add	r0, sp, #0x4
	ldrh	r0, [r0]
	sub	r2, r2, r0
	sub	r2, r4, r2
	ldr	r4, .L157+0x10
	ldrb	r5, [r4]
	strb	r7, [r4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xb
	bl	BtlController_EmitTwoReturnValues
	strb	r5, [r4]
	ldr	r0, .L157+0x14
	str	r0, [r6]
	b	.L151
.L158:
	.align	2, 0
.L157:
	.word	gHealthboxSpriteIds
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gSpeciesInfo
	.word	gActiveBattler
	.word	Task_LaunchLvlUpAnim
.L153:
	str	r0, [sp, #0x4]
	add	r2, sp, #0x4
	add	r0, r5, #0
	mov	r1, #0x19
	bl	SetMonData
	ldr	r1, .L159
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r1, .L159+0x4
	str	r1, [r0]
	mov	r0, r8
	bl	DestroyTask
.L151:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter2
.Lfe19:
	.size	 Task_GiveExpWithExpBar,.Lfe19-Task_GiveExpWithExpBar
	.align	2, 0
	.type	 Task_LaunchLvlUpAnim,function
	.thumb_func
Task_LaunchLvlUpAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L163
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r4, [r0, #0xc]
	ldrb	r6, [r0, #0x8]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L162	@cond_branch
	ldr	r1, .L163+0x4
	mov	r0, #0x2
	add	r2, r4, #0
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	bne	.L162	@cond_branch
	add	r4, r2, #0
.L162:
	add	r0, r4, #0
	add	r1, r4, #0
	add	r2, r4, #0
	mov	r3, #0x0
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, .L163
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L163+0x8
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L164:
	.align	2, 0
.L163:
	.word	gTasks
	.word	gBattlerPartyIndexes
	.word	Task_UpdateLvlInHealthbox
.Lfe20:
	.size	 Task_LaunchLvlUpAnim,.Lfe20-Task_LaunchLvlUpAnim
	.align	2, 0
	.type	 Task_UpdateLvlInHealthbox,function
	.thumb_func
Task_UpdateLvlInHealthbox:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L169
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrb	r5, [r2, #0xc]
	ldr	r0, .L169+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L166	@cond_branch
	ldrb	r4, [r2, #0x8]
	mov	r0, #0x64
	mov	r1, r4
	mul	r1, r1, r0
	ldr	r0, .L169+0x8
	add	r7, r1, r0
	add	r0, r7, #0
	mov	r1, #0x38
	bl	GetMonData
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L167	@cond_branch
	ldr	r1, .L169+0xc
	mov	r0, #0x2
	add	r2, r5, #0
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L167	@cond_branch
	ldr	r0, .L169+0x10
	add	r0, r2, r0
	ldrb	r0, [r0]
	add	r1, r7, #0
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	b	.L168
.L170:
	.align	2, 0
.L169:
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	gHealthboxSpriteIds
.L167:
	ldr	r0, .L171
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x64
	mul	r1, r1, r4
	ldr	r2, .L171+0x4
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
.L168:
	ldr	r0, .L171+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L171+0xc
	str	r0, [r1]
.L166:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	gHealthboxSpriteIds
	.word	gPlayerParty
	.word	gTasks
	.word	DestroyExpTaskAndCompleteOnInactiveTextPrinter
.Lfe21:
	.size	 Task_UpdateLvlInHealthbox,.Lfe21-Task_UpdateLvlInHealthbox
	.align	2, 0
	.type	 DestroyExpTaskAndCompleteOnInactiveTextPrinter,function
	.thumb_func
DestroyExpTaskAndCompleteOnInactiveTextPrinter:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L174
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrb	r1, [r4, #0x8]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L174+0x4
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	ldrb	r0, [r4, #0xc]
	ldr	r1, .L174+0x8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L174+0xc
	str	r1, [r0]
	add	r0, r5, #0
	bl	DestroyTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L175:
	.align	2, 0
.L174:
	.word	gTasks
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter2
.Lfe22:
	.size	 DestroyExpTaskAndCompleteOnInactiveTextPrinter,.Lfe22-DestroyExpTaskAndCompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 FreeMonSpriteAfterFaintAnim,function
	.thumb_func
FreeMonSpriteAfterFaintAnim:
	push	{r4, r5, r6, lr}
	ldr	r6, .L178
	ldr	r5, .L178+0x4
	ldr	r4, .L178+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r6
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	cmp	r0, #0xa0
	ble	.L177	@cond_branch
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	ldr	r1, .L178+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	OakOldManBufferExecCompleted
.L177:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L179:
	.align	2, 0
.L178:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.Lfe23:
	.size	 FreeMonSpriteAfterFaintAnim,.Lfe23-FreeMonSpriteAfterFaintAnim
	.align	2, 0
	.type	 PrintOakText_ForPetesSake,function
	.thumb_func
PrintOakText_ForPetesSake:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L203
	ldr	r0, [r1]
	add	r0, r0, #0x94
	ldrb	r0, [r0]
	add	r7, r1, #0
	cmp	r0, #0x8
	bls	.LCB2197
	b	.L181	@long jump
.LCB2197:
	lsl	r0, r0, #0x2
	ldr	r1, .L203+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L204:
	.align	2, 0
.L203:
	.word	gBattleStruct
	.word	.L199
	.align	2, 0
	.align	2, 0
.L199:
	.word	.L182
	.word	.L184
	.word	.L186
	.word	.L187
	.word	.L189
	.word	.L191
	.word	.L193
	.word	.L195
	.word	.L197
.L182:
	ldr	r0, .L205
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.LCB2224
	b	.L181	@long jump
.LCB2224:
	ldr	r4, [r7]
	add	r5, r4, #0
	add	r5, r5, #0x95
	add	r4, r4, #0x97
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	DoLoadHealthboxPalsForLevelUp
	mov	r0, #0x82
	neg	r0, r0
	str	r6, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x8
	bl	BeginNormalPaletteFade
	ldr	r1, [r7]
	b	.L201
.L206:
	.align	2, 0
.L205:
	.word	gPaletteFade
.L184:
	ldr	r0, .L207
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB2265
	b	.L181	@long jump
.LCB2265:
	bl	BtlCtrl_DrawVoiceoverMessageFrame
	b	.L202
.L208:
	.align	2, 0
.L207:
	.word	gPaletteFade
.L186:
	ldr	r0, .L209
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L209+0x4
	mov	r1, #0x18
	bl	BattlePutTextOnWindow
	b	.L202
.L210:
	.align	2, 0
.L209:
	.word	gText_ForPetesSake
	.word	gDisplayedStringBattle
.L187:
	mov	r0, #0x18
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	beq	.LCB2300
	b	.L181	@long jump
.LCB2300:
	ldr	r2, .L211
	ldr	r4, .L211+0x4
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0x95
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r0, r0, #0x97
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	orr	r1, r1, r0
	lsl	r0, r1, #0x10
	str	r3, [sp]
	mov	r1, #0x4
	mov	r2, #0x8
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, [r4]
	b	.L201
.L212:
	.align	2, 0
.L211:
	.word	gBitTable
	.word	gBattleStruct
.L189:
	ldr	r0, .L213
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L181	@cond_branch
	ldr	r0, .L213+0x4
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L213+0x8
	mov	r1, #0x18
	bl	BattlePutTextOnWindow
	b	.L202
.L214:
	.align	2, 0
.L213:
	.word	gPaletteFade
	.word	gText_TheTrainerThat
	.word	gDisplayedStringBattle
.L191:
	mov	r0, #0x18
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L181	@cond_branch
	ldr	r2, .L215
	ldr	r4, .L215+0x4
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0x95
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r0, r0, #0x97
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	orr	r1, r1, r0
	lsl	r0, r1, #0x10
	str	r3, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x8
	bl	BeginNormalPaletteFade
	ldr	r1, [r4]
	b	.L201
.L216:
	.align	2, 0
.L215:
	.word	gBitTable
	.word	gBattleStruct
.L193:
	ldr	r0, .L217
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L181	@cond_branch
	ldr	r0, .L217+0x4
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L217+0x8
	mov	r1, #0x18
	bl	BattlePutTextOnWindow
	b	.L202
.L218:
	.align	2, 0
.L217:
	.word	gPaletteFade
	.word	gText_TryBattling
	.word	gDisplayedStringBattle
.L195:
	mov	r0, #0x18
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L181	@cond_branch
	mov	r0, #0x82
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x8
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L202:
	ldr	r0, .L219
	ldr	r1, [r0]
.L201:
	add	r1, r1, #0x94
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L181
.L220:
	.align	2, 0
.L219:
	.word	gBattleStruct
.L197:
	ldr	r0, .L221
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L181	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DoFreeHealthboxPalsForLevelUp
	bl	BtlCtrl_RemoveVoiceoverMessageFrame
	ldr	r0, .L221+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x94
	strb	r4, [r0]
	bl	OakOldManBufferExecCompleted
.L181:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L222:
	.align	2, 0
.L221:
	.word	gPaletteFade
	.word	gBattleStruct
.Lfe24:
	.size	 PrintOakText_ForPetesSake,.Lfe24-PrintOakText_ForPetesSake
	.align	2, 0
	.globl	PrintOakText_InflictingDamageIsKey
	.type	 PrintOakText_InflictingDamageIsKey,function
	.thumb_func
PrintOakText_InflictingDamageIsKey:
	push	{lr}
	ldr	r0, .L224
	mov	r1, #0x1
	bl	PrintOakTextWithMainBgDarkened
	pop	{r0}
	bx	r0
.L225:
	.align	2, 0
.L224:
	.word	gText_InflictingDamageIsKey
.Lfe25:
	.size	 PrintOakText_InflictingDamageIsKey,.Lfe25-PrintOakText_InflictingDamageIsKey
	.align	2, 0
	.type	 PrintOakText_LoweringStats,function
	.thumb_func
PrintOakText_LoweringStats:
	push	{lr}
	ldr	r0, .L227
	mov	r1, #0x40
	bl	PrintOakTextWithMainBgDarkened
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	gText_LoweringStats
.Lfe26:
	.size	 PrintOakText_LoweringStats,.Lfe26-PrintOakText_LoweringStats
	.align	2, 0
	.globl	PrintOakText_OakNoRunningFromATrainer
	.type	 PrintOakText_OakNoRunningFromATrainer,function
	.thumb_func
PrintOakText_OakNoRunningFromATrainer:
	push	{lr}
	ldr	r0, .L230
	mov	r1, #0x1
	bl	PrintOakTextWithMainBgDarkened
	pop	{r0}
	bx	r0
.L231:
	.align	2, 0
.L230:
	.word	gText_OakNoRunningFromATrainer
.Lfe27:
	.size	 PrintOakText_OakNoRunningFromATrainer,.Lfe27-PrintOakText_OakNoRunningFromATrainer
	.align	2, 0
	.type	 PrintOakText_WinEarnsPrizeMoney,function
	.thumb_func
PrintOakText_WinEarnsPrizeMoney:
	push	{lr}
	ldr	r0, .L233
	mov	r1, #0x40
	bl	PrintOakTextWithMainBgDarkened
	pop	{r0}
	bx	r0
.L234:
	.align	2, 0
.L233:
	.word	gText_WinEarnsPrizeMoney
.Lfe28:
	.size	 PrintOakText_WinEarnsPrizeMoney,.Lfe28-PrintOakText_WinEarnsPrizeMoney
	.align	2, 0
	.globl	PrintOakText_HowDisappointing
	.type	 PrintOakText_HowDisappointing,function
	.thumb_func
PrintOakText_HowDisappointing:
	push	{lr}
	ldr	r0, .L236
	mov	r1, #0x40
	bl	PrintOakTextWithMainBgDarkened
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	gText_HowDissapointing
.Lfe29:
	.size	 PrintOakText_HowDisappointing,.Lfe29-PrintOakText_HowDisappointing
	.align	2, 0
	.type	 PrintOakTextWithMainBgDarkened,function
	.thumb_func
PrintOakTextWithMainBgDarkened:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r1, .L257
	ldr	r0, [r1]
	add	r0, r0, #0x94
	ldrb	r0, [r0]
	add	r5, r1, #0
	cmp	r0, #0x5
	bls	.LCB2612
	b	.L239	@long jump
.LCB2612:
	lsl	r0, r0, #0x2
	ldr	r1, .L257+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L258:
	.align	2, 0
.L257:
	.word	gBattleStruct
	.word	.L253
	.align	2, 0
	.align	2, 0
.L253:
	.word	.L240
	.word	.L242
	.word	.L244
	.word	.L246
	.word	.L247
	.word	.L249
.L240:
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L239	@cond_branch
	ldr	r1, .L259
	ldr	r0, [r1]
	add	r0, r0, #0x97
	strb	r4, [r0]
	ldr	r1, [r1]
	b	.L255
.L260:
	.align	2, 0
.L259:
	.word	gBattleStruct
.L242:
	ldr	r1, [r5]
	add	r1, r1, #0x97
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L239	@cond_branch
	mov	r0, #0x82
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x8
	bl	BeginNormalPaletteFade
	ldr	r1, [r5]
	b	.L255
.L244:
	ldr	r0, .L261
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L239	@cond_branch
	bl	BtlCtrl_DrawVoiceoverMessageFrame
	b	.L256
.L262:
	.align	2, 0
.L261:
	.word	gPaletteFade
.L246:
	add	r0, r2, #0
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L263
	mov	r1, #0x18
	bl	BattlePutTextOnWindow
	b	.L256
.L264:
	.align	2, 0
.L263:
	.word	gDisplayedStringBattle
.L247:
	mov	r0, #0x18
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L239	@cond_branch
	mov	r0, #0x82
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x8
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L256:
	ldr	r0, .L265
	ldr	r1, [r0]
.L255:
	add	r1, r1, #0x94
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L239
.L266:
	.align	2, 0
.L265:
	.word	gBattleStruct
.L249:
	ldr	r0, .L267
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L239	@cond_branch
	bl	BtlCtrl_RemoveVoiceoverMessageFrame
	ldr	r0, .L267+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L251	@cond_branch
	bl	OakOldManBufferExecCompleted
	b	.L252
.L268:
	.align	2, 0
.L267:
	.word	gPaletteFade
	.word	gActiveBattler
.L251:
	bl	OpponentBufferExecCompleted
.L252:
	ldr	r0, .L269
	mov	r1, #0x0
	strb	r1, [r0, #0x7]
	ldr	r0, .L269+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x94
	strb	r1, [r0]
.L239:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L270:
	.align	2, 0
.L269:
	.word	gBattleCommunication
	.word	gBattleStruct
.Lfe30:
	.size	 PrintOakTextWithMainBgDarkened,.Lfe30-PrintOakTextWithMainBgDarkened
	.align	2, 0
	.type	 PrintOakText_KeepAnEyeOnHP,function
	.thumb_func
PrintOakText_KeepAnEyeOnHP:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L290
	ldr	r0, [r1]
	add	r0, r0, #0x94
	ldrb	r0, [r0]
	add	r5, r1, #0
	cmp	r0, #0x6
	bls	.LCB2812
	b	.L272	@long jump
.LCB2812:
	lsl	r0, r0, #0x2
	ldr	r1, .L290+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L291:
	.align	2, 0
.L290:
	.word	gBattleStruct
	.word	.L286
	.align	2, 0
	.align	2, 0
.L286:
	.word	.L273
	.word	.L275
	.word	.L277
	.word	.L279
	.word	.L280
	.word	.L282
	.word	.L284
.L273:
	ldr	r0, .L292
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.LCB2839
	b	.L272	@long jump
.LCB2839:
	ldr	r1, [r5]
	add	r0, r1, #0
	add	r0, r0, #0x95
	add	r1, r1, #0x97
	ldr	r2, .L292+0x4
	ldrb	r2, [r2]
	bl	DoLoadHealthboxPalsForLevelUp
	mov	r0, #0x82
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x8
	bl	BeginNormalPaletteFade
	ldr	r1, [r5]
	b	.L288
.L293:
	.align	2, 0
.L292:
	.word	gPaletteFade
	.word	gActiveBattler
.L275:
	ldr	r0, .L294
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB2878
	b	.L272	@long jump
.LCB2878:
	ldr	r2, .L294+0x4
	ldr	r0, [r5]
	add	r1, r0, #0
	add	r1, r1, #0x95
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r0, r0, #0x97
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	orr	r1, r1, r0
	lsl	r0, r1, #0x10
	str	r3, [sp]
	mov	r1, #0x4
	mov	r2, #0x8
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, [r5]
	b	.L288
.L295:
	.align	2, 0
.L294:
	.word	gPaletteFade
	.word	gBitTable
.L277:
	ldr	r0, .L296
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L272	@cond_branch
	bl	BtlCtrl_DrawVoiceoverMessageFrame
	b	.L289
.L297:
	.align	2, 0
.L296:
	.word	gPaletteFade
.L279:
	ldr	r0, .L298
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L298+0x4
	mov	r1, #0x18
	bl	BattlePutTextOnWindow
	b	.L289
.L299:
	.align	2, 0
.L298:
	.word	gText_KeepAnEyeOnHP
	.word	gDisplayedStringBattle
.L280:
	mov	r0, #0x18
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L272	@cond_branch
	ldr	r2, .L300
	ldr	r4, .L300+0x4
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0x95
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r0, r0, #0x97
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	orr	r1, r1, r0
	lsl	r0, r1, #0x10
	str	r3, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x8
	bl	BeginNormalPaletteFade
	ldr	r1, [r4]
	b	.L288
.L301:
	.align	2, 0
.L300:
	.word	gBitTable
	.word	gBattleStruct
.L282:
	ldr	r0, .L302
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L272	@cond_branch
	mov	r0, #0x82
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x8
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L289:
	ldr	r0, .L302+0x4
	ldr	r1, [r0]
.L288:
	add	r1, r1, #0x94
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L272
.L303:
	.align	2, 0
.L302:
	.word	gPaletteFade
	.word	gBattleStruct
.L284:
	ldr	r0, .L304
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L272	@cond_branch
	bl	BtlCtrl_RemoveVoiceoverMessageFrame
	ldr	r0, .L304+0x4
	ldrh	r1, [r0]
	mov	r0, #0x1
	bl	BtlController_EmitOneReturnValue
	bl	OakOldManBufferExecCompleted
	ldr	r0, .L304+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x94
	strb	r4, [r0]
.L272:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L305:
	.align	2, 0
.L304:
	.word	gPaletteFade
	.word	gSpecialVar_ItemId
	.word	gBattleStruct
.Lfe31:
	.size	 PrintOakText_KeepAnEyeOnHP,.Lfe31-PrintOakText_KeepAnEyeOnHP
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r5, .L309
	ldrb	r0, [r5]
	ldr	r6, .L309+0x4
	add	r1, r0, r6
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L307	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L308
.L310:
	.align	2, 0
.L309:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L307:
	ldr	r2, .L311
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L311+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	bl	OakOldManBufferExecCompleted
.L308:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L312:
	.align	2, 0
.L311:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe32:
	.size	 CompleteOnHealthbarDone,.Lfe32-CompleteOnHealthbarDone
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter2,function
	.thumb_func
CompleteOnInactiveTextPrinter2:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L314	@cond_branch
	bl	OakOldManBufferExecCompleted
.L314:
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 CompleteOnInactiveTextPrinter2,.Lfe33-CompleteOnInactiveTextPrinter2
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L319
	ldr	r0, .L319+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L319+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L316	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L319+0xc
	strb	r3, [r0]
	bl	OakOldManBufferExecCompleted
	b	.L317
.L320:
	.align	2, 0
.L319:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L316:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L318	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L318:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L317:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe34-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r0, .L323
	ldr	r0, [r0]
	ldr	r6, .L323+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L322	@cond_branch
	ldr	r5, .L323+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L323+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L323+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	OakOldManBufferExecCompleted
.L322:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L324:
	.align	2, 0
.L323:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe35:
	.size	 DoSwitchOutAnimation,.Lfe35-DoSwitchOutAnimation
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy2,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy2:
	push	{lr}
	ldr	r2, .L327
	ldr	r1, .L327+0x4
	ldr	r0, .L327+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L327+0xc
	cmp	r1, r0
	bne	.L326	@cond_branch
	bl	OakOldManBufferExecCompleted
.L326:
	pop	{r0}
	bx	r0
.L328:
	.align	2, 0
.L327:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe36:
	.size	 CompleteOnBattlerSpriteCallbackDummy2,.Lfe36-CompleteOnBattlerSpriteCallbackDummy2
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L331
	ldr	r2, [r0]
	ldr	r0, .L331+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L330	@cond_branch
	bl	OakOldManBufferExecCompleted
.L330:
	pop	{r0}
	bx	r0
.L332:
	.align	2, 0
.L331:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe37:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe37-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 OakOldManBufferExecCompleted,function
	.thumb_func
OakOldManBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L336
	ldr	r4, .L336+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L336+0x8
	str	r1, [r0]
	ldr	r0, .L336+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L334	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r1, .L336+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	mov	r1, #0x38
	strb	r1, [r0]
	b	.L335
.L337:
	.align	2, 0
.L336:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OakOldManBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleBufferA
.L334:
	ldr	r2, .L338
	ldr	r1, .L338+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L335:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L339:
	.align	2, 0
.L338:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe38:
	.size	 OakOldManBufferExecCompleted,.Lfe38-OakOldManBufferExecCompleted
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L342
	ldr	r2, [r0]
	ldr	r0, .L342+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L341	@cond_branch
	bl	OakOldManBufferExecCompleted
.L341:
	pop	{r0}
	bx	r0
.L343:
	.align	2, 0
.L342:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe39:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe39-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 OakOldManHandleGetMonData,function
	.thumb_func
OakOldManHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r1, .L353
	ldr	r0, .L353+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L345	@cond_branch
	ldr	r0, .L353+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	CopyOakOldManMonData
	add	r6, r0, #0
	b	.L346
.L354:
	.align	2, 0
.L353:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L345:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L350:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L351	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	CopyOakOldManMonData
	add	r6, r6, r0
.L351:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L350	@cond_branch
.L346:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	OakOldManBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 OakOldManHandleGetMonData,.Lfe40-OakOldManHandleGetMonData
	.align	2, 0
	.type	 CopyOakOldManMonData,function
	.thumb_func
CopyOakOldManMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x90
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L444
	ldr	r3, .L444+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bls	.LCB3595
	bl	.L356	@far jump
.LCB3595:
	lsl	r0, r0, #0x2
	ldr	r1, .L444+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L445:
	.align	2, 0
.L444:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	.L438
	.align	2, 0
	.align	2, 0
.L438:
	.word	.L357
	.word	.L368
	.word	.L369
	.word	.L370
	.word	.L384
	.word	.L384
	.word	.L384
	.word	.L384
	.word	.L385
	.word	.L394
	.word	.L394
	.word	.L394
	.word	.L394
	.word	.L356
	.word	.L356
	.word	.L356
	.word	.L356
	.word	.L395
	.word	.L396
	.word	.L397
	.word	.L398
	.word	.L399
	.word	.L400
	.word	.L401
	.word	.L402
	.word	.L403
	.word	.L404
	.word	.L405
	.word	.L406
	.word	.L407
	.word	.L408
	.word	.L409
	.word	.L410
	.word	.L411
	.word	.L412
	.word	.L413
	.word	.L414
	.word	.L415
	.word	.L416
	.word	.L417
	.word	.L418
	.word	.L419
	.word	.L420
	.word	.L421
	.word	.L422
	.word	.L423
	.word	.L424
	.word	.L425
	.word	.L426
	.word	.L427
	.word	.L428
	.word	.L429
	.word	.L430
	.word	.L431
	.word	.L432
	.word	.L433
	.word	.L434
	.word	.L435
	.word	.L436
	.word	.L437
.L357:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L446
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	mov	r6, #0x0
	add	r0, sp, #0x24
	mov	r9, r0
	mov	r1, #0x3b
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2b
	str	r2, [sp, #0x80]
	mov	r0, sp
	add	r0, r0, #0x2a
	str	r0, [sp, #0x7c]
	mov	r1, sp
	add	r1, r1, #0x68
	str	r1, [sp, #0x8c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x84]
	add	r0, r0, #0x12
	str	r0, [sp, #0x88]
	mov	r8, r4
	add	r4, sp, #0xc
.L361:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L361	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L446
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x80]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x44]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L446+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L446+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L446+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x7c]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x28]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2c]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, sp
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x7
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x54]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	ldr	r0, [sp, #0x84]
	ldr	r1, [sp, #0x8c]
	bl	StringCopy_Nickname
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x88]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L366:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x57
	bls	.L366	@cond_branch
	b	.L356
.L447:
	.align	2, 0
.L446:
	.word	gPlayerParty
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L368:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L448
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L440
.L449:
	.align	2, 0
.L448:
	.word	gPlayerParty
.L369:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L450
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L440
.L451:
	.align	2, 0
.L450:
	.word	gPlayerParty
.L370:
	mov	r6, #0x0
	add	r2, sp, #0x58
	mov	r9, r2
	add	r0, sp, #0x60
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L452
	add	r4, r1, r0
	mov	r8, r9
.L374:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L374	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L452
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L379:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L379	@cond_branch
	b	.L356
.L453:
	.align	2, 0
.L452:
	.word	gPlayerParty
.L384:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L454
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L440
.L455:
	.align	2, 0
.L454:
	.word	gPlayerParty
.L385:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L456
	mov	r8, r2
.L389:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L389	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L456
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L356
.L457:
	.align	2, 0
.L456:
	.word	gPlayerParty
.L394:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L458
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x8
	b	.L441
.L459:
	.align	2, 0
.L458:
	.word	gPlayerParty
.L395:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L460
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L442
.L461:
	.align	2, 0
.L460:
	.word	gPlayerParty
.L396:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L462
	add	r0, r0, r1
	mov	r1, #0x19
.L442:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L356
.L463:
	.align	2, 0
.L462:
	.word	gPlayerParty
.L397:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L464
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L441
.L465:
	.align	2, 0
.L464:
	.word	gPlayerParty
.L398:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L466
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L441
.L467:
	.align	2, 0
.L466:
	.word	gPlayerParty
.L399:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L468
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L441
.L469:
	.align	2, 0
.L468:
	.word	gPlayerParty
.L400:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L470
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L441
.L471:
	.align	2, 0
.L470:
	.word	gPlayerParty
.L401:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L472
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L441
.L473:
	.align	2, 0
.L472:
	.word	gPlayerParty
.L402:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L474
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L441
.L475:
	.align	2, 0
.L474:
	.word	gPlayerParty
.L403:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L476
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L441
.L477:
	.align	2, 0
.L476:
	.word	gPlayerParty
.L404:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L478
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L441
.L479:
	.align	2, 0
.L478:
	.word	gPlayerParty
.L405:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L480
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L441
.L481:
	.align	2, 0
.L480:
	.word	gPlayerParty
.L406:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L482
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L441
.L483:
	.align	2, 0
.L482:
	.word	gPlayerParty
.L407:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L484
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L441
.L485:
	.align	2, 0
.L484:
	.word	gPlayerParty
.L408:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L486
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L441
.L487:
	.align	2, 0
.L486:
	.word	gPlayerParty
.L409:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L488
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L356
.L489:
	.align	2, 0
.L488:
	.word	gPlayerParty
.L410:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L490
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L441
.L491:
	.align	2, 0
.L490:
	.word	gPlayerParty
.L411:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L492
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L441
.L493:
	.align	2, 0
.L492:
	.word	gPlayerParty
.L412:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L494
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L441
.L495:
	.align	2, 0
.L494:
	.word	gPlayerParty
.L413:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L496
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L441
.L497:
	.align	2, 0
.L496:
	.word	gPlayerParty
.L414:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L498
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L441
.L499:
	.align	2, 0
.L498:
	.word	gPlayerParty
.L415:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L500
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L441
.L501:
	.align	2, 0
.L500:
	.word	gPlayerParty
.L416:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L502
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L443
.L503:
	.align	2, 0
.L502:
	.word	gPlayerParty
.L417:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L504
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L440
.L505:
	.align	2, 0
.L504:
	.word	gPlayerParty
.L418:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L506
	add	r0, r0, r1
	mov	r1, #0x37
.L443:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L356
.L507:
	.align	2, 0
.L506:
	.word	gPlayerParty
.L419:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L508
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L441
.L509:
	.align	2, 0
.L508:
	.word	gPlayerParty
.L420:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L510
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L440
.L511:
	.align	2, 0
.L510:
	.word	gPlayerParty
.L421:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L512
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L440
.L513:
	.align	2, 0
.L512:
	.word	gPlayerParty
.L422:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L514
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L440
.L515:
	.align	2, 0
.L514:
	.word	gPlayerParty
.L423:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L516
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L440
.L517:
	.align	2, 0
.L516:
	.word	gPlayerParty
.L424:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L518
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L440
.L519:
	.align	2, 0
.L518:
	.word	gPlayerParty
.L425:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L520
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L440
.L521:
	.align	2, 0
.L520:
	.word	gPlayerParty
.L426:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L522
	add	r0, r0, r1
	mov	r1, #0x3f
.L440:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L356
.L523:
	.align	2, 0
.L522:
	.word	gPlayerParty
.L427:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L524
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L441
.L525:
	.align	2, 0
.L524:
	.word	gPlayerParty
.L428:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L526
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L441
.L527:
	.align	2, 0
.L526:
	.word	gPlayerParty
.L429:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L528
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L441
.L529:
	.align	2, 0
.L528:
	.word	gPlayerParty
.L430:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L530
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L441
.L531:
	.align	2, 0
.L530:
	.word	gPlayerParty
.L431:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L532
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L441
.L533:
	.align	2, 0
.L532:
	.word	gPlayerParty
.L432:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L534
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L441
.L535:
	.align	2, 0
.L534:
	.word	gPlayerParty
.L433:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L536
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L441
.L537:
	.align	2, 0
.L536:
	.word	gPlayerParty
.L434:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L538
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L441
.L539:
	.align	2, 0
.L538:
	.word	gPlayerParty
.L435:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L540
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L441
.L541:
	.align	2, 0
.L540:
	.word	gPlayerParty
.L436:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L542
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L441
.L543:
	.align	2, 0
.L542:
	.word	gPlayerParty
.L437:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L544
	add	r0, r0, r1
	mov	r1, #0x36
.L441:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L356:
	add	r0, r6, #0
	add	sp, sp, #0x90
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L545:
	.align	2, 0
.L544:
	.word	gPlayerParty
.Lfe41:
	.size	 CopyOakOldManMonData,.Lfe41-CopyOakOldManMonData
	.align	2, 0
	.type	 OakOldManHandleGetRawMonData,function
	.thumb_func
OakOldManHandleGetRawMonData:
	push	{lr}
	bl	PlayerHandleGetRawMonData
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 OakOldManHandleGetRawMonData,.Lfe42-OakOldManHandleGetRawMonData
	.align	2, 0
	.type	 OakOldManHandleSetMonData,function
	.thumb_func
OakOldManHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r1, .L556
	ldr	r0, .L556+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L548	@cond_branch
	ldr	r0, .L556+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetOakOldManMonData
	b	.L549
.L557:
	.align	2, 0
.L556:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L548:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L553:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L554	@cond_branch
	add	r0, r5, #0
	bl	SetOakOldManMonData
.L554:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L553	@cond_branch
.L549:
	bl	OakOldManBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 OakOldManHandleSetMonData,.Lfe43-OakOldManHandleSetMonData
	.align	2, 0
	.type	 SetOakOldManMonData,function
	.thumb_func
SetOakOldManMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x34
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L630
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	ldr	r2, .L630+0x4
	add	r3, r0, r2
	add	r6, r3, #0
	sub	r1, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r7, r2, #0
	cmp	r0, #0x3b
	bls	.LCB5012
	bl	.L559	@far jump
.LCB5012:
	lsl	r0, r0, #0x2
	ldr	r1, .L630+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L631:
	.align	2, 0
.L630:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
	.word	.L626
	.align	2, 0
	.align	2, 0
.L626:
	.word	.L560
	.word	.L566
	.word	.L567
	.word	.L568
	.word	.L577
	.word	.L577
	.word	.L577
	.word	.L577
	.word	.L578
	.word	.L582
	.word	.L582
	.word	.L582
	.word	.L582
	.word	.L559
	.word	.L559
	.word	.L559
	.word	.L559
	.word	.L583
	.word	.L584
	.word	.L585
	.word	.L586
	.word	.L587
	.word	.L588
	.word	.L589
	.word	.L590
	.word	.L591
	.word	.L592
	.word	.L593
	.word	.L594
	.word	.L595
	.word	.L596
	.word	.L597
	.word	.L598
	.word	.L599
	.word	.L600
	.word	.L601
	.word	.L602
	.word	.L603
	.word	.L604
	.word	.L605
	.word	.L606
	.word	.L607
	.word	.L608
	.word	.L609
	.word	.L610
	.word	.L611
	.word	.L612
	.word	.L613
	.word	.L614
	.word	.L615
	.word	.L616
	.word	.L617
	.word	.L618
	.word	.L619
	.word	.L620
	.word	.L621
	.word	.L622
	.word	.L623
	.word	.L624
	.word	.L625
.L560:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L632
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	add	r2, r6, #0
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0x2e
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x3b
	add	r0, r0, r6
	mov	sl, r0
	add	r0, r6, #0
	add	r0, r0, #0x2b
	str	r0, [sp, #0x20]
	add	r0, r0, #0x19
	str	r0, [sp, #0x28]
	add	r0, r0, #0x4
	str	r0, [sp, #0x2c]
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	sub	r0, r0, #0x22
	str	r0, [sp, #0x1c]
	sub	r0, r0, #0x2
	str	r0, [sp, #0x18]
	add	r0, r0, #0x4
	str	r0, [sp, #0x24]
	add	r0, r6, #0x2
	str	r0, [sp, #0x4]
	add	r0, r6, #0x4
	str	r0, [sp, #0x8]
	add	r0, r6, #0x6
	str	r0, [sp, #0xc]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x14]
	mov	r9, r4
	add	r7, r6, #0
	add	r7, r7, #0x24
	add	r4, r6, #0
	add	r4, r4, #0xc
.L564:
	mov	r1, r8
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r7, #0
	bl	SetMonData
	add	r7, r7, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L564	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L632
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	ldrb	r0, [r6, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r6, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r6, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldr	r0, [r6, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r6, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r6, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L559
.L633:
	.align	2, 0
.L632:
	.word	gPlayerParty
.L566:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L634
	add	r0, r0, r1
	ldr	r1, .L634+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0xb
	bl	SetMonData
	b	.L559
.L635:
	.align	2, 0
.L634:
	.word	gPlayerParty
	.word	gActiveBattler
.L567:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L636
	add	r0, r0, r1
	ldr	r1, .L636+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0xc
	bl	SetMonData
	b	.L559
.L637:
	.align	2, 0
.L636:
	.word	gPlayerParty
	.word	gActiveBattler
.L568:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0xc
	add	r0, r0, r3
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L638
	add	r7, r1, r0
	add	r6, r3, #0
	add	r6, r6, #0x8
	add	r4, r3, #0
.L572:
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r7, #0
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	add	r0, r7, #0
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L572	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L638
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	b	.L559
.L639:
	.align	2, 0
.L638:
	.word	gPlayerParty
.L577:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L640
	add	r0, r0, r1
	ldr	r3, .L640+0x4
	ldr	r1, .L640+0x8
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L628
.L641:
	.align	2, 0
.L640:
	.word	gPlayerParty
	.word	gBattleBufferA
	.word	gActiveBattler
.L578:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L642
	add	r4, r4, r0
	ldr	r5, .L642+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L559
.L643:
	.align	2, 0
.L642:
	.word	gPlayerParty
	.word	gActiveBattler
.L582:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L644
	add	r0, r0, r1
	ldr	r3, .L644+0x4
	ldr	r1, .L644+0x8
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L628:
	add	r3, r3, #0x3
	add	r2, r2, r3
	bl	SetMonData
	b	.L559
.L645:
	.align	2, 0
.L644:
	.word	gPlayerParty
	.word	gBattleBufferA
	.word	gActiveBattler
.L583:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L646
	add	r0, r0, r1
	ldr	r1, .L646+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1
	bl	SetMonData
	b	.L559
.L647:
	.align	2, 0
.L646:
	.word	gPlayerParty
	.word	gActiveBattler
.L584:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L648
	add	r0, r0, r1
	ldr	r1, .L648+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x19
	bl	SetMonData
	b	.L559
.L649:
	.align	2, 0
.L648:
	.word	gPlayerParty
	.word	gActiveBattler
.L585:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L650
	add	r0, r0, r1
	ldr	r1, .L650+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1a
	bl	SetMonData
	b	.L559
.L651:
	.align	2, 0
.L650:
	.word	gPlayerParty
	.word	gActiveBattler
.L586:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L652
	add	r0, r0, r1
	ldr	r1, .L652+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1b
	bl	SetMonData
	b	.L559
.L653:
	.align	2, 0
.L652:
	.word	gPlayerParty
	.word	gActiveBattler
.L587:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L654
	add	r0, r0, r1
	ldr	r1, .L654+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1c
	bl	SetMonData
	b	.L559
.L655:
	.align	2, 0
.L654:
	.word	gPlayerParty
	.word	gActiveBattler
.L588:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L656
	add	r0, r0, r1
	ldr	r1, .L656+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1d
	bl	SetMonData
	b	.L559
.L657:
	.align	2, 0
.L656:
	.word	gPlayerParty
	.word	gActiveBattler
.L589:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L658
	add	r0, r0, r1
	ldr	r1, .L658+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1e
	bl	SetMonData
	b	.L559
.L659:
	.align	2, 0
.L658:
	.word	gPlayerParty
	.word	gActiveBattler
.L590:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L660
	add	r0, r0, r1
	ldr	r1, .L660+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1f
	bl	SetMonData
	b	.L559
.L661:
	.align	2, 0
.L660:
	.word	gPlayerParty
	.word	gActiveBattler
.L591:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L662
	add	r0, r0, r1
	ldr	r1, .L662+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x20
	bl	SetMonData
	b	.L559
.L663:
	.align	2, 0
.L662:
	.word	gPlayerParty
	.word	gActiveBattler
.L592:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L664
	add	r0, r0, r1
	ldr	r1, .L664+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x22
	bl	SetMonData
	b	.L559
.L665:
	.align	2, 0
.L664:
	.word	gPlayerParty
	.word	gActiveBattler
.L593:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L666
	add	r0, r0, r1
	ldr	r1, .L666+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x23
	bl	SetMonData
	b	.L559
.L667:
	.align	2, 0
.L666:
	.word	gPlayerParty
	.word	gActiveBattler
.L594:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L668
	add	r0, r0, r1
	ldr	r1, .L668+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x24
	bl	SetMonData
	b	.L559
.L669:
	.align	2, 0
.L668:
	.word	gPlayerParty
	.word	gActiveBattler
.L595:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L670
	add	r0, r0, r1
	ldr	r1, .L670+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x25
	bl	SetMonData
	b	.L559
.L671:
	.align	2, 0
.L670:
	.word	gPlayerParty
	.word	gActiveBattler
.L596:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L672
	add	r0, r0, r1
	ldr	r1, .L672+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x26
	bl	SetMonData
	b	.L559
.L673:
	.align	2, 0
.L672:
	.word	gPlayerParty
	.word	gActiveBattler
.L597:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L674
	add	r4, r4, r0
	ldr	r5, .L674+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x5
	add	r2, r2, r0
	add	r0, r4, #0
	b	.L629
.L675:
	.align	2, 0
.L674:
	.word	gPlayerParty
	.word	gActiveBattler
.L598:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L676
	add	r0, r0, r1
	ldr	r1, .L676+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x27
	bl	SetMonData
	b	.L559
.L677:
	.align	2, 0
.L676:
	.word	gPlayerParty
	.word	gActiveBattler
.L599:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L678
	add	r0, r0, r1
	ldr	r1, .L678+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x28
	bl	SetMonData
	b	.L559
.L679:
	.align	2, 0
.L678:
	.word	gPlayerParty
	.word	gActiveBattler
.L600:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L680
	add	r0, r0, r1
	ldr	r1, .L680+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x29
	bl	SetMonData
	b	.L559
.L681:
	.align	2, 0
.L680:
	.word	gPlayerParty
	.word	gActiveBattler
.L601:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L682
	add	r0, r0, r1
	ldr	r1, .L682+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2a
	bl	SetMonData
	b	.L559
.L683:
	.align	2, 0
.L682:
	.word	gPlayerParty
	.word	gActiveBattler
.L602:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L684
	add	r0, r0, r1
	ldr	r1, .L684+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2b
	bl	SetMonData
	b	.L559
.L685:
	.align	2, 0
.L684:
	.word	gPlayerParty
	.word	gActiveBattler
.L603:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L686
	add	r0, r0, r1
	ldr	r1, .L686+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
.L629:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L559
.L687:
	.align	2, 0
.L686:
	.word	gPlayerParty
	.word	gActiveBattler
.L604:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L688
	add	r0, r0, r1
	ldr	r1, .L688+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x0
	bl	SetMonData
	b	.L559
.L689:
	.align	2, 0
.L688:
	.word	gPlayerParty
	.word	gActiveBattler
.L605:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L690
	add	r0, r0, r1
	ldr	r1, .L690+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x9
	bl	SetMonData
	b	.L559
.L691:
	.align	2, 0
.L690:
	.word	gPlayerParty
	.word	gActiveBattler
.L606:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L692
	add	r0, r0, r1
	ldr	r1, .L692+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x37
	bl	SetMonData
	b	.L559
.L693:
	.align	2, 0
.L692:
	.word	gPlayerParty
	.word	gActiveBattler
.L607:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L694
	add	r0, r0, r1
	ldr	r1, .L694+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x38
	bl	SetMonData
	b	.L559
.L695:
	.align	2, 0
.L694:
	.word	gPlayerParty
	.word	gActiveBattler
.L608:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L696
	add	r0, r0, r1
	ldr	r1, .L696+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x39
	bl	SetMonData
	b	.L559
.L697:
	.align	2, 0
.L696:
	.word	gPlayerParty
	.word	gActiveBattler
.L609:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L698
	add	r0, r0, r1
	ldr	r1, .L698+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3a
	bl	SetMonData
	b	.L559
.L699:
	.align	2, 0
.L698:
	.word	gPlayerParty
	.word	gActiveBattler
.L610:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L700
	add	r0, r0, r1
	ldr	r1, .L700+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3b
	bl	SetMonData
	b	.L559
.L701:
	.align	2, 0
.L700:
	.word	gPlayerParty
	.word	gActiveBattler
.L611:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L702
	add	r0, r0, r1
	ldr	r1, .L702+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3c
	bl	SetMonData
	b	.L559
.L703:
	.align	2, 0
.L702:
	.word	gPlayerParty
	.word	gActiveBattler
.L612:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L704
	add	r0, r0, r1
	ldr	r1, .L704+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3d
	bl	SetMonData
	b	.L559
.L705:
	.align	2, 0
.L704:
	.word	gPlayerParty
	.word	gActiveBattler
.L613:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L706
	add	r0, r0, r1
	ldr	r1, .L706+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3e
	bl	SetMonData
	b	.L559
.L707:
	.align	2, 0
.L706:
	.word	gPlayerParty
	.word	gActiveBattler
.L614:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L708
	add	r0, r0, r1
	ldr	r1, .L708+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3f
	bl	SetMonData
	b	.L559
.L709:
	.align	2, 0
.L708:
	.word	gPlayerParty
	.word	gActiveBattler
.L615:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L710
	add	r0, r0, r1
	ldr	r1, .L710+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x16
	bl	SetMonData
	b	.L559
.L711:
	.align	2, 0
.L710:
	.word	gPlayerParty
	.word	gActiveBattler
.L616:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L712
	add	r0, r0, r1
	ldr	r1, .L712+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x17
	bl	SetMonData
	b	.L559
.L713:
	.align	2, 0
.L712:
	.word	gPlayerParty
	.word	gActiveBattler
.L617:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L714
	add	r0, r0, r1
	ldr	r1, .L714+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x18
	bl	SetMonData
	b	.L559
.L715:
	.align	2, 0
.L714:
	.word	gPlayerParty
	.word	gActiveBattler
.L618:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L716
	add	r0, r0, r1
	ldr	r1, .L716+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x21
	bl	SetMonData
	b	.L559
.L717:
	.align	2, 0
.L716:
	.word	gPlayerParty
	.word	gActiveBattler
.L619:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L718
	add	r0, r0, r1
	ldr	r1, .L718+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2f
	bl	SetMonData
	b	.L559
.L719:
	.align	2, 0
.L718:
	.word	gPlayerParty
	.word	gActiveBattler
.L620:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L720
	add	r0, r0, r1
	ldr	r1, .L720+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x30
	bl	SetMonData
	b	.L559
.L721:
	.align	2, 0
.L720:
	.word	gPlayerParty
	.word	gActiveBattler
.L621:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L722
	add	r0, r0, r1
	ldr	r1, .L722+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x32
	bl	SetMonData
	b	.L559
.L723:
	.align	2, 0
.L722:
	.word	gPlayerParty
	.word	gActiveBattler
.L622:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L724
	add	r0, r0, r1
	ldr	r1, .L724+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x33
	bl	SetMonData
	b	.L559
.L725:
	.align	2, 0
.L724:
	.word	gPlayerParty
	.word	gActiveBattler
.L623:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L726
	add	r0, r0, r1
	ldr	r1, .L726+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x34
	bl	SetMonData
	b	.L559
.L727:
	.align	2, 0
.L726:
	.word	gPlayerParty
	.word	gActiveBattler
.L624:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L728
	add	r0, r0, r1
	ldr	r1, .L728+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x35
	bl	SetMonData
	b	.L559
.L729:
	.align	2, 0
.L728:
	.word	gPlayerParty
	.word	gActiveBattler
.L625:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L730
	add	r0, r0, r1
	ldr	r1, .L730+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x36
	bl	SetMonData
.L559:
	ldr	r2, .L730+0x8
	ldr	r0, .L730+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L730
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L731:
	.align	2, 0
.L730:
	.word	gPlayerParty
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.Lfe44:
	.size	 SetOakOldManMonData,.Lfe44-SetOakOldManMonData
	.align	2, 0
	.type	 OakOldManHandleSetRawMonData,function
	.thumb_func
OakOldManHandleSetRawMonData:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 OakOldManHandleSetRawMonData,.Lfe45-OakOldManHandleSetRawMonData
	.align	2, 0
	.type	 OakOldManHandleLoadMonSprite,function
	.thumb_func
OakOldManHandleLoadMonSprite:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 OakOldManHandleLoadMonSprite,.Lfe46-OakOldManHandleLoadMonSprite
	.align	2, 0
	.type	 OakOldManHandleSwitchInAnim,function
	.thumb_func
OakOldManHandleSwitchInAnim:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 OakOldManHandleSwitchInAnim,.Lfe47-OakOldManHandleSwitchInAnim
	.align	2, 0
	.type	 OakOldManHandleReturnMonToBall,function
	.thumb_func
OakOldManHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r0, .L738
	ldr	r6, .L738+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L736	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x1
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, .L738+0x8
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L738+0xc
	str	r0, [r1]
	b	.L737
.L739:
	.align	2, 0
.L738:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L736:
	ldr	r5, .L740
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L740+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L740+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	OakOldManBufferExecCompleted
.L737:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L741:
	.align	2, 0
.L740:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe48:
	.size	 OakOldManHandleReturnMonToBall,.Lfe48-OakOldManHandleReturnMonToBall
	.align	2, 0
	.type	 OakOldManHandleDrawTrainerPic,function
	.thumb_func
OakOldManHandleDrawTrainerPic:
	push	{r4, r5, r6, lr}
	ldr	r0, .L746
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L743	@cond_branch
	ldr	r4, .L746+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x8]
	ldr	r6, .L746+0x8
	ldrb	r1, [r6]
	bl	DecompressTrainerBackPalette
	ldr	r0, [r4]
	ldrb	r5, [r0, #0x8]
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L746+0xc
	ldr	r2, .L746+0x10
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r2, .L746+0x14
	ldrb	r1, [r6]
	b	.L745
.L747:
	.align	2, 0
.L746:
	.word	gBattleTypeFlags
	.word	gSaveBlock2Ptr
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerBackPicCoords
	.word	gBattlerSpriteIds
.L743:
	ldr	r4, .L748
	ldrb	r1, [r4]
	mov	r0, #0x5
	bl	DecompressTrainerBackPalette
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x5
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L748+0x4
	ldr	r1, .L748+0x8
	ldrb	r1, [r1, #0x14]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r2, .L748+0xc
	ldrb	r1, [r4]
.L745:
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r4, .L748+0x10
	ldr	r5, .L748+0xc
	ldr	r6, .L748
	ldrb	r3, [r6]
	add	r0, r3, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L748+0x14
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L748+0x18
	str	r1, [r0]
	ldr	r1, .L748+0x1c
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L748+0x20
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L749:
	.align	2, 0
.L748:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerBackPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xfffe
	.word	SpriteCB_TrainerSlideIn
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe49:
	.size	 OakOldManHandleDrawTrainerPic,.Lfe49-OakOldManHandleDrawTrainerPic
	.align	2, 0
	.type	 OakOldManHandleTrainerSlide,function
	.thumb_func
OakOldManHandleTrainerSlide:
	push	{r4, r5, r6, lr}
	ldr	r0, .L754
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L751	@cond_branch
	ldr	r4, .L754+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x8]
	ldr	r6, .L754+0x8
	ldrb	r1, [r6]
	bl	DecompressTrainerBackPalette
	ldr	r0, [r4]
	ldrb	r5, [r0, #0x8]
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L754+0xc
	ldr	r2, .L754+0x10
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r2, .L754+0x14
	ldrb	r1, [r6]
	b	.L753
.L755:
	.align	2, 0
.L754:
	.word	gBattleTypeFlags
	.word	gSaveBlock2Ptr
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerBackPicCoords
	.word	gBattlerSpriteIds
.L751:
	ldr	r4, .L756
	ldrb	r1, [r4]
	mov	r0, #0x5
	bl	DecompressTrainerBackPalette
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x5
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L756+0x4
	ldr	r1, .L756+0x8
	ldrb	r1, [r1, #0x14]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r2, .L756+0xc
	ldrb	r1, [r4]
.L753:
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r4, .L756+0x10
	ldr	r5, .L756+0xc
	ldr	r6, .L756
	ldrb	r3, [r6]
	add	r0, r3, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L756+0x14
	strh	r1, [r0, #0x24]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L756+0x18
	str	r1, [r0]
	ldr	r1, .L756+0x1c
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L756+0x20
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L757:
	.align	2, 0
.L756:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerBackPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xffa0
	.word	SpriteCB_TrainerSlideIn
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy2
.Lfe50:
	.size	 OakOldManHandleTrainerSlide,.Lfe50-OakOldManHandleTrainerSlide
	.align	2, 0
	.type	 OakOldManHandleTrainerSlideBack,function
	.thumb_func
OakOldManHandleTrainerSlideBack:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 OakOldManHandleTrainerSlideBack,.Lfe51-OakOldManHandleTrainerSlideBack
	.align	2, 0
	.type	 OakOldManHandleFaintAnimation,function
	.thumb_func
OakOldManHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L764
	ldr	r4, [r6]
	ldr	r5, .L764+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L760	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L761	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L761:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L762
.L765:
	.align	2, 0
.L764:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L760:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L762	@cond_branch
	strb	r4, [r3, #0x4]
	ldr	r2, .L766
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L766+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	mov	r1, #0x40
	neg	r1, r1
	mov	r0, #0x10
	bl	PlaySE12WithPanning
	ldr	r2, .L766+0x8
	ldr	r3, .L766+0xc
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x30]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
	strh	r1, [r0, #0x32]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L766+0x10
	str	r1, [r0]
	ldr	r1, .L766+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L766+0x18
	str	r1, [r0]
.L762:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L767:
	.align	2, 0
.L766:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_FaintSlideAnim
	.word	gBattlerControllerFuncs
	.word	FreeMonSpriteAfterFaintAnim
.Lfe52:
	.size	 OakOldManHandleFaintAnimation,.Lfe52-OakOldManHandleFaintAnimation
	.align	2, 0
	.type	 OakOldManHandlePaletteFade,function
	.thumb_func
OakOldManHandlePaletteFade:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 OakOldManHandlePaletteFade,.Lfe53-OakOldManHandlePaletteFade
	.align	2, 0
	.type	 OakOldManHandleSuccessBallThrowAnim,function
	.thumb_func
OakOldManHandleSuccessBallThrowAnim:
	push	{r4, r5, lr}
	ldr	r0, .L770
	ldr	r0, [r0]
	ldr	r1, [r0, #0x8]
	mov	r0, #0x4
	strb	r0, [r1, #0x8]
	ldr	r1, .L770+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r5, .L770+0x8
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x4
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L770+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L770+0x10
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L771:
	.align	2, 0
.L770:
	.word	gBattleSpritesDataPtr
	.word	gDoingBattleAnim
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	CompleteOnSpecialAnimDone
.Lfe54:
	.size	 OakOldManHandleSuccessBallThrowAnim,.Lfe54-OakOldManHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 OakOldManHandleBallThrowAnim,function
	.thumb_func
OakOldManHandleBallThrowAnim:
	push	{r4, r5, lr}
	ldr	r1, .L773
	ldr	r5, .L773+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r0, .L773+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	strb	r1, [r0, #0x8]
	ldr	r1, .L773+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x4
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L773+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L773+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L774:
	.align	2, 0
.L773:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	CompleteOnSpecialAnimDone
.Lfe55:
	.size	 OakOldManHandleBallThrowAnim,.Lfe55-OakOldManHandleBallThrowAnim
	.align	2, 0
	.type	 OakOldManHandlePause,function
	.thumb_func
OakOldManHandlePause:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 OakOldManHandlePause,.Lfe56-OakOldManHandlePause
	.align	2, 0
	.type	 OakOldManHandleMoveAnimation,function
	.thumb_func
OakOldManHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r0, .L779
	mov	ip, r0
	ldr	r6, .L779+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L779+0x8
	mov	r1, ip
	add	r1, r1, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	strb	r1, [r5]
	ldr	r4, .L779+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x5
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L779+0x10
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x6
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x7
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x9
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	str	r3, [r4]
	ldr	r3, .L779+0x14
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	mov	r2, ip
	add	r2, r2, #0xa
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L779+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0xc
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0xd
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L779+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x10
	add	r2, r2, r1
	str	r2, [r3]
	ldr	r3, .L779+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L777	@cond_branch
	bl	OakOldManBufferExecCompleted
	b	.L778
.L780:
	.align	2, 0
.L779:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L777:
	ldr	r0, .L781
	ldr	r0, [r0]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L781+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L781+0x8
	str	r1, [r0]
.L778:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L782:
	.align	2, 0
.L781:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	OakOldManDoMoveAnimation
.Lfe57:
	.size	 OakOldManHandleMoveAnimation,.Lfe57-OakOldManHandleMoveAnimation
	.align	2, 0
	.type	 OakOldManDoMoveAnimation,function
	.thumb_func
OakOldManDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r2, .L797
	ldr	r6, .L797+0x4
	ldrb	r3, [r6]
	lsl	r1, r3, #0x9
	add	r0, r2, #0x1
	mov	r9, r0
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r2, r2, #0x2
	mov	r8, r2
	add	r1, r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldr	r7, .L797+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L787	@cond_branch
	cmp	r2, #0x1
	bgt	.L796	@cond_branch
	cmp	r2, #0
	beq	.L785	@cond_branch
	b	.L784
.L798:
	.align	2, 0
.L797:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L796:
	cmp	r2, #0x2
	beq	.L789	@cond_branch
	cmp	r2, #0x3
	beq	.L792	@cond_branch
	b	.L784
.L785:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L786	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L786:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L784
.L787:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L784	@cond_branch
	mov	r0, #0x0
	bl	SetBattlerSpriteAffineMode
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L784
.L789:
	ldr	r0, .L799
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L799+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L784	@cond_branch
	mov	r0, #0x1
	bl	SetBattlerSpriteAffineMode
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L791	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L791:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L784
.L800:
	.align	2, 0
.L799:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
.L792:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L784	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	lsl	r2, r0, #0x9
	mov	r3, r9
	add	r1, r2, r3
	ldrb	r1, [r1]
	add	r2, r2, r8
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	OakOldManBufferExecCompleted
.L784:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 OakOldManDoMoveAnimation,.Lfe58-OakOldManDoMoveAnimation
	.align	2, 0
	.type	 OakOldManHandlePrintString,function
	.thumb_func
OakOldManHandlePrintString:
	push	{r4, lr}
	ldr	r0, .L817
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L817+0x4
	strh	r1, [r0]
	ldr	r0, .L817+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	ldr	r1, .L817+0xc
	add	r4, r0, r1
	ldr	r0, .L817+0x10
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L802	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0x1
	bne	.L802	@cond_branch
	bl	OakOldManBufferExecCompleted
	b	.L801
.L818:
	.align	2, 0
.L817:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gActiveBattler
	.word	gBattleBufferA+0x2
	.word	gBattleTypeFlags
.L802:
	ldrh	r0, [r4]
	bl	BufferStringBattle
	ldrh	r0, [r4]
	bl	BattleStringShouldBeColored
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L804	@cond_branch
	ldr	r0, .L819
	mov	r1, #0x40
	bl	BattlePutTextOnWindow
	b	.L805
.L820:
	.align	2, 0
.L819:
	.word	gDisplayedStringBattle
.L804:
	ldr	r0, .L821
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
.L805:
	ldr	r0, .L821+0x4
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L806	@cond_branch
	ldrh	r1, [r4]
	cmp	r1, #0xd8
	beq	.L808	@cond_branch
	cmp	r1, #0xd8
	bgt	.L815	@cond_branch
	cmp	r1, #0x1e
	beq	.L810	@cond_branch
	b	.L806
.L822:
	.align	2, 0
.L821:
	.word	gDisplayedStringBattle
	.word	gBattleTypeFlags
.L815:
	cmp	r1, #0xe3
	beq	.L812	@cond_branch
	ldr	r0, .L823
	cmp	r1, r0
	beq	.L811	@cond_branch
	b	.L806
.L824:
	.align	2, 0
.L823:
	.word	0x17f
.L808:
	mov	r0, #0x2
	bl	BtlCtrl_OakOldMan_TestState2Flag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L806	@cond_branch
	mov	r0, #0x2
	bl	BtlCtrl_OakOldMan_SetState2Flag
	ldr	r1, .L825
	ldr	r0, .L825+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L825+0x8
	b	.L816
.L826:
	.align	2, 0
.L825:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PrintOakText_LoweringStats
.L810:
	ldr	r1, .L827
	ldr	r0, .L827+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L827+0x8
	b	.L816
.L828:
	.align	2, 0
.L827:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PrintOakText_WinEarnsPrizeMoney
.L811:
	ldr	r1, .L829
	ldr	r0, .L829+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L829+0x8
	b	.L816
.L830:
	.align	2, 0
.L829:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PrintOakText_HowDisappointing
.L812:
	ldr	r1, .L831
	ldr	r0, .L831+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L831+0x8
	b	.L816
.L832:
	.align	2, 0
.L831:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PrintOakText_OakNoRunningFromATrainer
.L806:
	ldr	r1, .L833
	ldr	r0, .L833+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L833+0x8
.L816:
	str	r1, [r0]
.L801:
	pop	{r4}
	pop	{r0}
	bx	r0
.L834:
	.align	2, 0
.L833:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnInactiveTextPrinter
.Lfe59:
	.size	 OakOldManHandlePrintString,.Lfe59-OakOldManHandlePrintString
	.align	2, 0
	.type	 OakOldManHandlePrintSelectionString,function
	.thumb_func
OakOldManHandlePrintSelectionString:
	push	{lr}
	ldr	r0, .L838
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L836	@cond_branch
	bl	OakOldManHandlePrintString
	b	.L837
.L839:
	.align	2, 0
.L838:
	.word	gActiveBattler
.L836:
	bl	OakOldManBufferExecCompleted
.L837:
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 OakOldManHandlePrintSelectionString,.Lfe60-OakOldManHandlePrintSelectionString
	.align	2, 0
	.type	 HandleChooseActionAfterDma3,function
	.thumb_func
HandleChooseActionAfterDma3:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L841	@cond_branch
	ldr	r0, .L845
	strh	r1, [r0]
	ldr	r1, .L845+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r0, .L845+0x8
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L842	@cond_branch
	ldr	r1, .L845+0xc
	ldr	r0, .L845+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L845+0x14
	b	.L844
.L846:
	.align	2, 0
.L845:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleTypeFlags
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	HandleInputChooseAction
.L842:
	ldr	r1, .L847
	ldr	r0, .L847+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L847+0x8
.L844:
	str	r1, [r0]
.L841:
	pop	{r0}
	bx	r0
.L848:
	.align	2, 0
.L847:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	SimulateInputChooseAction
.Lfe61:
	.size	 HandleChooseActionAfterDma3,.Lfe61-HandleChooseActionAfterDma3
	.align	2, 0
	.type	 OakOldManHandleChooseAction,function
	.thumb_func
OakOldManHandleChooseAction:
	push	{r4, lr}
	ldr	r1, .L857
	ldr	r0, .L857+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L857+0x8
	str	r1, [r0]
	ldr	r0, .L857+0xc
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
	ldr	r0, .L857+0x10
	mov	r1, #0x2
	bl	BattlePutTextOnWindow
	mov	r4, #0x0
.L853:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	ActionSelectionDestroyCursorAt
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L853	@cond_branch
	ldr	r1, .L857+0x14
	ldr	r0, .L857+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	ActionSelectionCreateCursorAt
	ldr	r0, .L857+0x18
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L855	@cond_branch
	ldr	r0, .L857+0x1c
	bl	BattleStringExpandPlaceholdersToDisplayedString
	b	.L856
.L858:
	.align	2, 0
.L857:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	HandleChooseActionAfterDma3
	.word	gText_EmptyString3
	.word	gText_BattleMenu
	.word	gActionSelectionCursor
	.word	gBattleTypeFlags
	.word	gText_WhatWillPkmnDo
.L855:
	ldr	r0, .L859
	bl	BattleStringExpandPlaceholdersToDisplayedString
.L856:
	ldr	r0, .L859+0x4
	mov	r1, #0x1
	bl	BattlePutTextOnWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L860:
	.align	2, 0
.L859:
	.word	gText_WhatWillOldManDo
	.word	gDisplayedStringBattle
.Lfe62:
	.size	 OakOldManHandleChooseAction,.Lfe62-OakOldManHandleChooseAction
	.align	2, 0
	.type	 OakOldManHandleUnknownYesNoBox,function
	.thumb_func
OakOldManHandleUnknownYesNoBox:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 OakOldManHandleUnknownYesNoBox,.Lfe63-OakOldManHandleUnknownYesNoBox
	.align	2, 0
	.type	 OakHandleChooseMove_WaitDma3,function
	.thumb_func
OakHandleChooseMove_WaitDma3:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L863	@cond_branch
	ldr	r0, .L864
	strh	r1, [r0]
	ldr	r1, .L864+0x4
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L864+0x8
	ldr	r0, .L864+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L864+0x10
	str	r1, [r0]
.L863:
	pop	{r0}
	bx	r0
.L865:
	.align	2, 0
.L864:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OakOldManHandleInputChooseMove
.Lfe64:
	.size	 OakHandleChooseMove_WaitDma3,.Lfe64-OakHandleChooseMove_WaitDma3
	.align	2, 0
	.type	 OakOldManHandleChooseMove,function
	.thumb_func
OakOldManHandleChooseMove:
	push	{r4, lr}
	ldr	r0, .L875
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L867	@cond_branch
	bl	InitMoveSelectionsVarsAndStrings
	ldr	r1, .L875+0x4
	ldr	r0, .L875+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L875+0xc
	str	r1, [r0]
	b	.L868
.L876:
	.align	2, 0
.L875:
	.word	gBattleTypeFlags
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OakHandleChooseMove_WaitDma3
.L867:
	ldr	r4, .L877
	ldr	r0, [r4]
	add	r0, r0, #0x95
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L870	@cond_branch
	cmp	r0, #0x1
	beq	.L871	@cond_branch
	b	.L868
.L878:
	.align	2, 0
.L877:
	.word	gBattleStruct
.L870:
	bl	InitMoveSelectionsVarsAndStrings
	ldr	r1, [r4]
	add	r1, r1, #0x95
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x97
	mov	r1, #0x50
	strb	r1, [r0]
.L871:
	ldr	r0, .L879
	ldr	r1, [r0]
	add	r1, r1, #0x97
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L868	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	bl	OakOldManBufferExecCompleted
.L868:
	pop	{r4}
	pop	{r0}
	bx	r0
.L880:
	.align	2, 0
.L879:
	.word	gBattleStruct
.Lfe65:
	.size	 OakOldManHandleChooseMove,.Lfe65-OakOldManHandleChooseMove
	.align	2, 0
	.type	 OakOldManHandleChooseItem,function
	.thumb_func
OakOldManHandleChooseItem:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L887
	ldr	r2, .L887+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L887+0x8
	str	r1, [r0]
	ldr	r1, .L887+0xc
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r3, #0x0
	ldr	r5, .L887+0x10
	ldr	r4, .L887+0x14
.L885:
	add	r0, r3, r5
	ldrb	r1, [r2]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x1
	add	r1, r3, r1
	add	r1, r1, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L885	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L888:
	.align	2, 0
.L887:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OpenBagAndChooseItem
	.word	gBattlerInMenuId
	.word	gBattlePartyCurrentOrder
	.word	gBattleBufferA
.Lfe66:
	.size	 OakOldManHandleChooseItem,.Lfe66-OakOldManHandleChooseItem
	.align	2, 0
	.type	 OakOldManHandleChoosePokemon,function
	.thumb_func
OakOldManHandleChoosePokemon:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L895
	mov	r1, #0xff
	bl	CreateTask
	ldr	r3, .L895+0x4
	ldr	r4, .L895+0x8
	ldrb	r1, [r4]
	add	r1, r1, r3
	strb	r0, [r1]
	ldr	r5, .L895+0xc
	ldrb	r2, [r4]
	add	r3, r2, r3
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldr	r5, .L895+0x10
	lsl	r2, r2, #0x9
	add	r6, r5, #0x1
	add	r2, r2, r6
	ldrb	r2, [r2]
	mov	r0, #0xf
	and	r0, r0, r2
	strh	r0, [r1, #0x8]
	ldr	r3, .L895+0x14
	ldr	r1, [r3]
	add	r1, r1, #0x49
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsr	r0, r0, #0x4
	strb	r0, [r1]
	ldr	r2, [r3]
	add	r2, r2, #0x8b
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r5, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r2, [r3]
	add	r2, r2, #0xac
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r5, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r2, #0x0
	ldr	r3, .L895+0x18
.L893:
	add	r0, r2, r3
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x4
	add	r1, r2, r1
	add	r1, r1, r5
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L893	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L895+0x1c
	ldr	r2, .L895+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L895+0x20
	str	r1, [r0]
	ldr	r1, .L895+0x24
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L896:
	.align	2, 0
.L895:
	.word	TaskDummy
	.word	gBattleControllerData
	.word	gActiveBattler
	.word	gTasks
	.word	gBattleBufferA
	.word	gBattleStruct
	.word	gBattlePartyCurrentOrder
	.word	gBattlerControllerFuncs
	.word	OpenPartyMenuToChooseMon
	.word	gBattlerInMenuId
.Lfe67:
	.size	 OakOldManHandleChoosePokemon,.Lfe67-OakOldManHandleChoosePokemon
	.align	2, 0
	.type	 OakOldManHandleCmd23,function
	.thumb_func
OakOldManHandleCmd23:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 OakOldManHandleCmd23,.Lfe68-OakOldManHandleCmd23
	.align	2, 0
	.type	 OakOldManHandleHealthBarUpdate,function
	.thumb_func
OakOldManHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r3, .L901
	ldr	r0, .L901+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r2, r4, #0x9
	add	r0, r3, #0x2
	add	r0, r2, r0
	ldrb	r1, [r0]
	add	r3, r3, #0x3
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L901+0x8
	cmp	r7, r0
	beq	.L899	@cond_branch
	ldr	r6, .L901+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L901+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L901+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L900
.L902:
	.align	2, 0
.L901:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
.L899:
	ldr	r1, .L903
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L903+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r4, .L903+0x8
	add	r1, r0, r4
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
	mov	r1, r9
	ldrb	r0, [r1]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
.L900:
	ldr	r1, .L903+0xc
	ldr	r0, .L903+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L903+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L904:
	.align	2, 0
.L903:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe69:
	.size	 OakOldManHandleHealthBarUpdate,.Lfe69-OakOldManHandleHealthBarUpdate
	.align	2, 0
	.type	 OakOldManHandleExpUpdate,function
	.thumb_func
OakOldManHandleExpUpdate:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L908
	ldr	r6, .L908+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x9
	add	r1, r5, #0x1
	add	r0, r0, r1
	ldrb	r7, [r0]
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L908+0x8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x63
	bls	.L906	@cond_branch
	bl	OakOldManBufferExecCompleted
	b	.L907
.L909:
	.align	2, 0
.L908:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gPlayerParty
.L906:
	mov	r0, #0x1
	bl	LoadBattleBarGfx
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r0, r5, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldr	r0, .L910
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L910+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r7, [r1, #0x8]
	strh	r4, [r1, #0xa]
	ldrb	r0, [r6]
	strh	r0, [r1, #0xc]
	ldr	r1, .L910+0x8
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L910+0xc
	str	r1, [r0]
.L907:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L911:
	.align	2, 0
.L910:
	.word	Task_GiveExpToMon
	.word	gTasks
	.word	gBattlerControllerFuncs
	.word	OakOldManDummy
.Lfe70:
	.size	 OakOldManHandleExpUpdate,.Lfe70-OakOldManHandleExpUpdate
	.align	2, 0
	.type	 OakOldManHandleStatusIconUpdate,function
	.thumb_func
OakOldManHandleStatusIconUpdate:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 OakOldManHandleStatusIconUpdate,.Lfe71-OakOldManHandleStatusIconUpdate
	.align	2, 0
	.type	 OakOldManHandleStatusAnimation,function
	.thumb_func
OakOldManHandleStatusAnimation:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 OakOldManHandleStatusAnimation,.Lfe72-OakOldManHandleStatusAnimation
	.align	2, 0
	.type	 OakOldManHandleStatusXor,function
	.thumb_func
OakOldManHandleStatusXor:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 OakOldManHandleStatusXor,.Lfe73-OakOldManHandleStatusXor
	.align	2, 0
	.type	 OakOldManHandleDataTransfer,function
	.thumb_func
OakOldManHandleDataTransfer:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe74:
	.size	 OakOldManHandleDataTransfer,.Lfe74-OakOldManHandleDataTransfer
	.align	2, 0
	.type	 OakOldManHandleDMA3Transfer,function
	.thumb_func
OakOldManHandleDMA3Transfer:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 OakOldManHandleDMA3Transfer,.Lfe75-OakOldManHandleDMA3Transfer
	.align	2, 0
	.type	 OakOldManHandlePlayBGM,function
	.thumb_func
OakOldManHandlePlayBGM:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe76:
	.size	 OakOldManHandlePlayBGM,.Lfe76-OakOldManHandlePlayBGM
	.align	2, 0
	.type	 OakOldManHandleCmd32,function
	.thumb_func
OakOldManHandleCmd32:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 OakOldManHandleCmd32,.Lfe77-OakOldManHandleCmd32
	.align	2, 0
	.type	 OakOldManHandleTwoReturnValues,function
	.thumb_func
OakOldManHandleTwoReturnValues:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 OakOldManHandleTwoReturnValues,.Lfe78-OakOldManHandleTwoReturnValues
	.align	2, 0
	.type	 OakOldManHandleChosenMonReturnValue,function
	.thumb_func
OakOldManHandleChosenMonReturnValue:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 OakOldManHandleChosenMonReturnValue,.Lfe79-OakOldManHandleChosenMonReturnValue
	.align	2, 0
	.type	 OakOldManHandleOneReturnValue,function
	.thumb_func
OakOldManHandleOneReturnValue:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 OakOldManHandleOneReturnValue,.Lfe80-OakOldManHandleOneReturnValue
	.align	2, 0
	.type	 OakOldManHandleOneReturnValue_Duplicate,function
	.thumb_func
OakOldManHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 OakOldManHandleOneReturnValue_Duplicate,.Lfe81-OakOldManHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 OakOldManHandleCmd37,function
	.thumb_func
OakOldManHandleCmd37:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 OakOldManHandleCmd37,.Lfe82-OakOldManHandleCmd37
	.align	2, 0
	.type	 OakOldManHandleCmd38,function
	.thumb_func
OakOldManHandleCmd38:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 OakOldManHandleCmd38,.Lfe83-OakOldManHandleCmd38
	.align	2, 0
	.type	 OakOldManHandleCmd39,function
	.thumb_func
OakOldManHandleCmd39:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 OakOldManHandleCmd39,.Lfe84-OakOldManHandleCmd39
	.align	2, 0
	.type	 OakOldManHandleCmd40,function
	.thumb_func
OakOldManHandleCmd40:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 OakOldManHandleCmd40,.Lfe85-OakOldManHandleCmd40
	.align	2, 0
	.type	 OakOldManHandleHitAnimation,function
	.thumb_func
OakOldManHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L930
	ldr	r2, .L930+0x4
	ldr	r4, .L930+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L928	@cond_branch
	bl	OakOldManBufferExecCompleted
	b	.L929
.L931:
	.align	2, 0
.L930:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L928:
	ldr	r1, .L932
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L932+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L932+0x8
	str	r1, [r0]
.L929:
	pop	{r4}
	pop	{r0}
	bx	r0
.L933:
	.align	2, 0
.L932:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe86:
	.size	 OakOldManHandleHitAnimation,.Lfe86-OakOldManHandleHitAnimation
	.align	2, 0
	.type	 OakOldManHandleCmd42,function
	.thumb_func
OakOldManHandleCmd42:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 OakOldManHandleCmd42,.Lfe87-OakOldManHandleCmd42
	.align	2, 0
	.type	 OakOldManHandlePlaySE,function
	.thumb_func
OakOldManHandlePlaySE:
	push	{lr}
	ldr	r2, .L936
	ldr	r0, .L936+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlaySE
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.L937:
	.align	2, 0
.L936:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe88:
	.size	 OakOldManHandlePlaySE,.Lfe88-OakOldManHandlePlaySE
	.align	2, 0
	.type	 OakOldManHandlePlayFanfare,function
	.thumb_func
OakOldManHandlePlayFanfare:
	push	{lr}
	ldr	r2, .L939
	ldr	r0, .L939+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.L940:
	.align	2, 0
.L939:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe89:
	.size	 OakOldManHandlePlayFanfare,.Lfe89-OakOldManHandlePlayFanfare
	.align	2, 0
	.type	 OakOldManHandleFaintingCry,function
	.thumb_func
OakOldManHandleFaintingCry:
	push	{lr}
	ldr	r1, .L942
	ldr	r0, .L942+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L942+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	bl	PlayCry_Normal
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.L943:
	.align	2, 0
.L942:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
.Lfe90:
	.size	 OakOldManHandleFaintingCry,.Lfe90-OakOldManHandleFaintingCry
	.align	2, 0
	.type	 OakOldManHandleIntroSlide,function
	.thumb_func
OakOldManHandleIntroSlide:
	push	{lr}
	ldr	r1, .L945
	ldr	r0, .L945+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	HandleIntroSlide
	ldr	r2, .L945+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.L946:
	.align	2, 0
.L945:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe91:
	.size	 OakOldManHandleIntroSlide,.Lfe91-OakOldManHandleIntroSlide
	.align	2, 0
	.type	 OakOldManHandleIntroTrainerBallThrow,function
	.thumb_func
OakOldManHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L952
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8959
	b	.L948	@long jump
.LCB8959:
	ldr	r6, .L952+0x4
	ldr	r7, .L952+0x8
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L952+0xc
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L952+0x10
	strh	r1, [r0, #0x32]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L952+0x14
	str	r1, [r0]
	ldrb	r2, [r7]
	add	r0, r2, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x38]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L952+0x18
	bl	StoreSpriteCallbackInData6
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L952+0x1c
	bl	AllocSpritePalette
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r1, .L952+0x20
	ldr	r0, .L952+0x24
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	lsr	r4, r4, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x5]
	ldr	r0, .L952+0x28
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L952+0x2c
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r7]
	strh	r0, [r1, #0x8]
	ldr	r3, .L952+0x30
	ldr	r0, [r3]
	ldrb	r2, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L949	@cond_branch
	ldr	r0, .L952+0x34
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L952+0x38
	str	r1, [r0]
.L949:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L952+0x3c
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L952+0x40
	str	r1, [r0]
	b	.L950
.L953:
	.align	2, 0
.L952:
	.word	gBattleTypeFlags
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	SpriteCB_FreePlayerSpriteLoadMonSprite
	.word	0xd6f8
	.word	gTrainerBackPicPaletteTable
	.word	gSaveBlock2Ptr
	.word	Task_StartSendOutAnim
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	BattleControllerDummy
.L948:
	ldr	r0, .L954
	ldr	r1, [r0]
	ldr	r0, .L954+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L951	@cond_branch
	ldr	r2, .L954+0x8
	ldr	r0, .L954+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L954+0x10
	str	r1, [r0]
.L951:
	bl	OakOldManBufferExecCompleted
.L950:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L955:
	.align	2, 0
.L954:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gTasks
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
.Lfe92:
	.size	 OakOldManHandleIntroTrainerBallThrow,.Lfe92-OakOldManHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 StartSendOutAnim,function
	.thumb_func
StartSendOutAnim:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L957
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x2]
	ldr	r0, .L957+0x4
	lsl	r2, r6, #0x1
	add	r2, r2, r0
	ldr	r0, .L957+0x8
	lsl	r1, r6, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	strh	r0, [r2]
	ldrh	r1, [r2]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L957+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L957+0x10
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L957+0x14
	mov	r9, r1
	add	r9, r9, r6
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L957+0x18
	mov	sl, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, sl
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L957+0x1c
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L957+0x20
	mov	r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L957+0x24
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L957+0x28
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xff
	bl	DoPokeballSendOutAnimation
	mov	r1, r9
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L958:
	.align	2, 0
.L957:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gBattleBufferA
	.word	gPlayerParty
	.word	SpriteCB_WaitForBattlerBallReleaseAnim
	.word	gBattleControllerData
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe93:
	.size	 StartSendOutAnim,.Lfe93-StartSendOutAnim
	.align	2, 0
	.type	 Task_StartSendOutAnim,function
	.thumb_func
Task_StartSendOutAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L962
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1e
	bgt	.L960	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xa]
	b	.L961
.L963:
	.align	2, 0
.L962:
	.word	gTasks
.L960:
	ldr	r4, .L964
	ldrb	r5, [r4]
	ldrh	r0, [r1, #0x8]
	strb	r0, [r4]
	ldr	r0, .L964+0x4
	ldrb	r1, [r4]
	lsl	r2, r1, #0x9
	add	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L964+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	StartSendOutAnim
	ldr	r1, .L964+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L964+0x10
	str	r1, [r0]
	strb	r5, [r4]
	add	r0, r6, #0
	bl	DestroyTask
.L961:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L965:
	.align	2, 0
.L964:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
	.word	gBattlerControllerFuncs
	.word	Intro_TryShinyAnimShowHealthbox
.Lfe94:
	.size	 Task_StartSendOutAnim,.Lfe94-Task_StartSendOutAnim
	.align	2, 0
	.type	 OakOldManHandleDrawPartyStatusSummary,function
	.thumb_func
OakOldManHandleDrawPartyStatusSummary:
	push	{r4, r5, lr}
	ldr	r1, .L969
	ldr	r0, .L969+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L967	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L967	@cond_branch
	bl	OakOldManBufferExecCompleted
	b	.L968
.L970:
	.align	2, 0
.L969:
	.word	gBattleBufferA
	.word	gActiveBattler
.L967:
	ldr	r0, .L971
	ldr	r0, [r0]
	ldr	r5, .L971+0x4
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r5]
	lsl	r4, r0, #0x9
	ldr	r3, .L971+0x8
	add	r1, r4, r3
	sub	r2, r3, #0x3
	add	r2, r4, r2
	ldrb	r2, [r2]
	sub	r3, r3, #0x2
	add	r4, r4, r3
	ldrb	r3, [r4]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L971+0xc
	ldrb	r1, [r5]
	add	r1, r1, r2
	strb	r0, [r1]
	bl	OakOldManBufferExecCompleted
.L968:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L972:
	.align	2, 0
.L971:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleBufferA+0x4
	.word	gBattlerStatusSummaryTaskId
.Lfe95:
	.size	 OakOldManHandleDrawPartyStatusSummary,.Lfe95-OakOldManHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 OakOldManHandleHidePartyStatusSummary,function
	.thumb_func
OakOldManHandleHidePartyStatusSummary:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 OakOldManHandleHidePartyStatusSummary,.Lfe96-OakOldManHandleHidePartyStatusSummary
	.align	2, 0
	.type	 OakOldManHandleEndBounceEffect,function
	.thumb_func
OakOldManHandleEndBounceEffect:
	push	{r4, lr}
	ldr	r4, .L975
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	EndBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	EndBounceEffect
	bl	OakOldManBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L976:
	.align	2, 0
.L975:
	.word	gActiveBattler
.Lfe97:
	.size	 OakOldManHandleEndBounceEffect,.Lfe97-OakOldManHandleEndBounceEffect
	.align	2, 0
	.type	 OakOldManHandleSpriteInvisibility,function
	.thumb_func
OakOldManHandleSpriteInvisibility:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe98:
	.size	 OakOldManHandleSpriteInvisibility,.Lfe98-OakOldManHandleSpriteInvisibility
	.align	2, 0
	.type	 OakOldManHandleBattleAnimation,function
	.thumb_func
OakOldManHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L981
	ldr	r6, .L981+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r5, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r5, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L979	@cond_branch
	bl	OakOldManBufferExecCompleted
	b	.L980
.L982:
	.align	2, 0
.L981:
	.word	gBattleBufferA
	.word	gActiveBattler
.L979:
	ldr	r0, .L983
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L983+0x4
	str	r0, [r1]
.L980:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L984:
	.align	2, 0
.L983:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe99:
	.size	 OakOldManHandleBattleAnimation,.Lfe99-OakOldManHandleBattleAnimation
	.align	2, 0
	.type	 OakOldManHandleLinkStandbyMsg,function
	.thumb_func
OakOldManHandleLinkStandbyMsg:
	push	{r4, lr}
	ldr	r1, .L992
	ldr	r4, .L992+0x4
	ldrb	r2, [r4]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	blt	.L986	@cond_branch
	cmp	r0, #0x1
	bgt	.L986	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x1
	bl	EndBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	EndBounceEffect
.L986:
	bl	OakOldManBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L993:
	.align	2, 0
.L992:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe100:
	.size	 OakOldManHandleLinkStandbyMsg,.Lfe100-OakOldManHandleLinkStandbyMsg
	.align	2, 0
	.type	 OakOldManHandleResetActionMoveSelection,function
	.thumb_func
OakOldManHandleResetActionMoveSelection:
	push	{lr}
	bl	OakOldManBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 OakOldManHandleResetActionMoveSelection,.Lfe101-OakOldManHandleResetActionMoveSelection
	.align	2, 0
	.type	 OakOldManHandleCmd55,function
	.thumb_func
OakOldManHandleCmd55:
	push	{r4, lr}
	ldr	r2, .L997
	ldr	r1, .L997+0x4
	ldr	r4, .L997+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	OakOldManBufferExecCompleted
	ldr	r0, .L997+0xc
	ldr	r0, [r0]
	mov	r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L996	@cond_branch
	ldr	r0, .L997+0x10
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L997+0x14
	str	r0, [r1]
.L996:
	pop	{r4}
	pop	{r0}
	bx	r0
.L998:
	.align	2, 0
.L997:
	.word	gBattleOutcome
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattlerControllerFuncs
	.word	OakOldManSetBattleEndCallbacks
.Lfe102:
	.size	 OakOldManHandleCmd55,.Lfe102-OakOldManHandleCmd55
	.align	2, 0
	.type	 OakOldManCmdEnd,function
	.thumb_func
OakOldManCmdEnd:
	bx	lr
.Lfe103:
	.size	 OakOldManCmdEnd,.Lfe103-OakOldManCmdEnd
	.align	2, 0
	.globl	BtlCtrl_OakOldMan_TestState2Flag
	.type	 BtlCtrl_OakOldMan_TestState2Flag,function
	.thumb_func
BtlCtrl_OakOldMan_TestState2Flag:
	add	r1, r0, #0
	ldr	r0, .L1001
	ldr	r0, [r0]
	add	r0, r0, #0x96
	ldrb	r0, [r0]
	and	r0, r0, r1
	bx	lr
.L1002:
	.align	2, 0
.L1001:
	.word	gBattleStruct
.Lfe104:
	.size	 BtlCtrl_OakOldMan_TestState2Flag,.Lfe104-BtlCtrl_OakOldMan_TestState2Flag
	.align	2, 0
	.globl	BtlCtrl_OakOldMan_SetState2Flag
	.type	 BtlCtrl_OakOldMan_SetState2Flag,function
	.thumb_func
BtlCtrl_OakOldMan_SetState2Flag:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1004
	ldr	r1, [r1]
	add	r1, r1, #0x96
	ldrb	r2, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	bx	lr
.L1005:
	.align	2, 0
.L1004:
	.word	gBattleStruct
.Lfe105:
	.size	 BtlCtrl_OakOldMan_SetState2Flag,.Lfe105-BtlCtrl_OakOldMan_SetState2Flag
	.align	2, 0
	.globl	BtlCtrl_DrawVoiceoverMessageFrame
	.type	 BtlCtrl_DrawVoiceoverMessageFrame,function
	.thumb_func
BtlCtrl_DrawVoiceoverMessageFrame:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	mov	r6, #0x1a
	mov	r5, #0x7
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x30
	mov	r2, #0x0
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x31
	mov	r2, #0x1
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r6, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x32
	mov	r2, #0x2
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x33
	mov	r2, #0x1c
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x34
	mov	r2, #0x1d
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x35
	mov	r2, #0x0
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x36
	mov	r2, #0x1
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x38
	mov	r2, #0x1c
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x39
	mov	r2, #0x1d
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x3a
	mov	r2, #0x0
	mov	r3, #0x10
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x3b
	mov	r2, #0x1
	mov	r3, #0x10
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x3c
	mov	r2, #0x1c
	mov	r3, #0x10
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x3d
	mov	r2, #0x1d
	mov	r3, #0x10
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x11
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0x4
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1
	mov	r3, #0x11
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0x8
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1c
	mov	r3, #0x11
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0xc
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1d
	mov	r3, #0x11
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x12
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0x14
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1
	mov	r3, #0x12
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1c
	mov	r3, #0x12
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0x1c
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1d
	mov	r3, #0x12
	bl	FillBgTilemapBufferRect
	mov	r1, #0x83
	lsl	r1, r1, #0x4
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0x20
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0x24
	str	r6, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x2
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0x28
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	ldr	r1, .L1007+0x2c
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1008:
	.align	2, 0
.L1007:
	.word	0x83a
	.word	0x83b
	.word	0x83c
	.word	0x83d
	.word	0x835
	.word	0x836
	.word	0x838
	.word	0x839
	.word	0x831
	.word	0x832
	.word	0x833
	.word	0x834
.Lfe106:
	.size	 BtlCtrl_DrawVoiceoverMessageFrame,.Lfe106-BtlCtrl_DrawVoiceoverMessageFrame
	.align	2, 0
	.globl	BtlCtrl_RemoveVoiceoverMessageFrame
	.type	 BtlCtrl_RemoveVoiceoverMessageFrame,function
	.thumb_func
BtlCtrl_RemoveVoiceoverMessageFrame:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	mov	r5, #0x0
	mov	r0, #0x1a
	mov	r8, r0
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	mov	r6, #0x4
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x4
	mov	r2, #0x1
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	mov	r0, r8
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x5
	mov	r2, #0x2
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x6
	mov	r2, #0x1c
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x7
	mov	r2, #0x1d
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x8
	mov	r2, #0x0
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x9
	mov	r2, #0x1
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	mov	r0, r8
	str	r0, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xa
	mov	r2, #0x2
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xb
	mov	r2, #0x1c
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xc
	mov	r2, #0x1d
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xd
	mov	r2, #0x0
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xe
	mov	r2, #0x1
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	mov	r0, r8
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xf
	mov	r2, #0x2
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x11
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe107:
	.size	 BtlCtrl_RemoveVoiceoverMessageFrame,.Lfe107-BtlCtrl_RemoveVoiceoverMessageFrame
.text
	.align	2, 0 @ Don't pad with nop

