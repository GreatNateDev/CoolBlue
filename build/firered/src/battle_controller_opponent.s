@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sOpponentBufferCommands,object
	.size	 sOpponentBufferCommands,228
sOpponentBufferCommands:
	.word	OpponentHandleGetMonData
	.word	OpponentHandleGetRawMonData
	.word	OpponentHandleSetMonData
	.word	OpponentHandleSetRawMonData
	.word	OpponentHandleLoadMonSprite
	.word	OpponentHandleSwitchInAnim
	.word	OpponentHandleReturnMonToBall
	.word	OpponentHandleDrawTrainerPic
	.word	OpponentHandleTrainerSlide
	.word	OpponentHandleTrainerSlideBack
	.word	OpponentHandleFaintAnimation
	.word	OpponentHandlePaletteFade
	.word	OpponentHandleSuccessBallThrowAnim
	.word	OpponentHandleBallThrowAnim
	.word	OpponentHandlePause
	.word	OpponentHandleMoveAnimation
	.word	OpponentHandlePrintString
	.word	OpponentHandlePrintSelectionString
	.word	OpponentHandleChooseAction
	.word	OpponentHandleUnknownYesNoBox
	.word	OpponentHandleChooseMove
	.word	OpponentHandleChooseItem
	.word	OpponentHandleChoosePokemon
	.word	OpponentHandleCmd23
	.word	OpponentHandleHealthBarUpdate
	.word	OpponentHandleExpUpdate
	.word	OpponentHandleStatusIconUpdate
	.word	OpponentHandleStatusAnimation
	.word	OpponentHandleStatusXor
	.word	OpponentHandleDataTransfer
	.word	OpponentHandleDMA3Transfer
	.word	OpponentHandlePlayBGM
	.word	OpponentHandleCmd32
	.word	OpponentHandleTwoReturnValues
	.word	OpponentHandleChosenMonReturnValue
	.word	OpponentHandleOneReturnValue
	.word	OpponentHandleOneReturnValue_Duplicate
	.word	OpponentHandleCmd37
	.word	OpponentHandleCmd38
	.word	OpponentHandleCmd39
	.word	OpponentHandleCmd40
	.word	OpponentHandleHitAnimation
	.word	OpponentHandleCmd42
	.word	OpponentHandlePlaySE
	.word	OpponentHandlePlayFanfare
	.word	OpponentHandleFaintingCry
	.word	OpponentHandleIntroSlide
	.word	OpponentHandleIntroTrainerBallThrow
	.word	OpponentHandleDrawPartyStatusSummary
	.word	OpponentHandleHidePartyStatusSummary
	.word	OpponentHandleEndBounceEffect
	.word	OpponentHandleSpriteInvisibility
	.word	OpponentHandleBattleAnimation
	.word	OpponentHandleLinkStandbyMsg
	.word	OpponentHandleResetActionMoveSelection
	.word	OpponentHandleCmd55
	.word	OpponentCmdEnd
	.type	 sUnused,object
sUnused:
	.byte	0xb0
	.byte	0xb0
	.byte	0xc8
	.byte	0x98
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x20
	.size	 sUnused,8
.text
	.align	2, 0
	.type	 OpponentDummy,function
	.thumb_func
OpponentDummy:
	bx	lr
.Lfe1:
	.size	 OpponentDummy,.Lfe1-OpponentDummy
	.align	2, 0
	.globl	SetControllerToOpponent
	.type	 SetControllerToOpponent,function
	.thumb_func
SetControllerToOpponent:
	ldr	r1, .L6
	ldr	r0, .L6+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L6+0x8
	str	r1, [r0]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OpponentBufferRunCommand
.Lfe2:
	.size	 SetControllerToOpponent,.Lfe2-SetControllerToOpponent
	.align	2, 0
	.type	 OpponentBufferRunCommand,function
	.thumb_func
OpponentBufferRunCommand:
	push	{lr}
	ldr	r2, .L12
	ldr	r1, .L12+0x4
	ldr	r0, .L12+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L9	@cond_branch
	ldr	r0, .L12+0xc
	lsl	r1, r3, #0x9
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x38
	bhi	.L10	@cond_branch
	ldr	r0, .L12+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L9
.L13:
	.align	2, 0
.L12:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	sOpponentBufferCommands
.L10:
	bl	OpponentBufferExecCompleted
.L9:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 OpponentBufferRunCommand,.Lfe3-OpponentBufferRunCommand
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L16
	ldr	r1, .L16+0x4
	ldr	r0, .L16+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L16+0xc
	cmp	r1, r0
	bne	.L15	@cond_branch
	bl	OpponentBufferExecCompleted
.L15:
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe4:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe4-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy2,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy2:
	push	{lr}
	ldr	r2, .L20
	ldr	r1, .L20+0x4
	ldr	r0, .L20+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L20+0xc
	cmp	r1, r0
	bne	.L19	@cond_branch
	bl	OpponentBufferExecCompleted
.L19:
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 CompleteOnBattlerSpriteCallbackDummy2,.Lfe5-CompleteOnBattlerSpriteCallbackDummy2
	.align	2, 0
	.type	 FreeTrainerSpriteAfterSlide,function
	.thumb_func
FreeTrainerSpriteAfterSlide:
	push	{r4, r5, r6, lr}
	ldr	r4, .L24
	ldr	r6, .L24+0x4
	ldr	r5, .L24+0x8
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L24+0xc
	cmp	r1, r0
	bne	.L23	@cond_branch
	add	r0, r2, r4
	ldrh	r0, [r0, #0x6]
	bl	FreeTrainerFrontPicPaletteAndTile
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x38]
	ldr	r2, .L24+0x10
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L24+0x14
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	bl	OpponentBufferExecCompleted
.L23:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	0x3ff
	.word	-0x400
.Lfe6:
	.size	 FreeTrainerSpriteAfterSlide,.Lfe6-FreeTrainerSpriteAfterSlide
	.align	2, 0
	.type	 Intro_DelayAndEnd,function
	.thumb_func
Intro_DelayAndEnd:
	push	{r4, lr}
	ldr	r4, .L28
	ldr	r1, [r4]
	ldr	r3, .L28+0x4
	ldrb	r0, [r3]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L27	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	bl	OpponentBufferExecCompleted
.L27:
	pop	{r4}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe7:
	.size	 Intro_DelayAndEnd,.Lfe7-Intro_DelayAndEnd
	.align	2, 0
	.type	 Intro_WaitForShinyAnimAndHealthbox,function
	.thumb_func
Intro_WaitForShinyAnimAndHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L32	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L31	@cond_branch
	ldr	r0, .L41
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L31	@cond_branch
.L32:
	ldr	r2, .L41+0x4
	ldr	r1, .L41+0x8
	ldr	r0, .L41+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L41+0x10
	cmp	r1, r0
	bne	.L34	@cond_branch
	b	.L40
.L42:
	.align	2, 0
.L41:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.L31:
	ldr	r2, .L43
	ldr	r5, .L43+0x4
	ldr	r0, .L43+0x8
	ldrb	r3, [r0]
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L43+0xc
	cmp	r4, r0
	bne	.L34	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L34	@cond_branch
.L40:
	mov	r6, #0x1
.L34:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L36	@cond_branch
	mov	r6, #0x0
.L36:
	cmp	r6, #0
	bne	.LCB378
	b	.L37	@long jump
.LCB378:
	ldr	r0, .L43+0x10
	mov	ip, r0
	ldr	r0, [r0]
	ldr	r7, .L43+0x8
	ldrb	r2, [r7]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r3
	ldrb	r1, [r4, #0x1]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L37	@cond_branch
	mov	r6, #0x2
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L37	@cond_branch
	ldrb	r1, [r4]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r1, ip
	ldr	r0, [r1]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, ip
	ldr	r2, [r0]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	mov	r1, ip
	ldr	r2, [r1]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L43+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, .L43+0x18
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L38	@cond_branch
	ldr	r0, .L43+0x1c
	bl	m4aMPlayContinue
	b	.L39
.L44:
	.align	2, 0
.L43:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	0x27f9
	.word	gBattleTypeFlags
	.word	gMPlayInfo_BGM
.L38:
	ldr	r0, .L45
	ldr	r1, .L45+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L39:
	ldr	r0, .L45+0x8
	ldr	r0, [r0]
	ldr	r3, .L45+0xc
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L45+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L45+0x14
	str	r1, [r0]
.L37:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	Intro_DelayAndEnd
.Lfe8:
	.size	 Intro_WaitForShinyAnimAndHealthbox,.Lfe8-Intro_WaitForShinyAnimAndHealthbox
	.align	2, 0
	.type	 Intro_TryShinyAnimShowHealthbox,function
	.thumb_func
Intro_TryShinyAnimShowHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L52
	ldr	r0, [r4]
	ldr	r1, .L52+0x4
	mov	r9, r1
	ldrb	r2, [r1]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r5, #0x88
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L48	@cond_branch
	ldr	r0, .L52+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L52+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L48:
	ldr	r1, [r4]
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r7, #0x2
	add	r2, r7, #0
	eor	r2, r2, r0
	ldr	r1, [r1, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L49	@cond_branch
	ldr	r0, .L52+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L52+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L49:
	ldr	r0, [r4]
	mov	r1, r9
	ldrb	r2, [r1]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	mov	r4, #0x8
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB622
	b	.L50	@long jump
.LCB622:
	add	r1, r7, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB637
	b	.L50	@long jump
.LCB637:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	ldr	r0, .L52+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldr	r1, .L52+0x14
	mov	r2, r9
	ldrb	r0, [r2]
	eor	r0, r0, r7
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L52+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L52+0x1c
	mov	r1, r9
	ldrb	r0, [r1]
	add	r1, r7, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L52+0x8
	mov	r8, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	ldrh	r1, [r1]
	mov	r6, #0x64
	mul	r1, r1, r6
	ldr	r5, .L52+0xc
	add	r1, r1, r5
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	mov	r1, r9
	ldrb	r0, [r1]
	eor	r0, r0, r7
	bl	StartHealthboxSlideIn
	mov	r2, r9
	ldrb	r0, [r2]
	eor	r0, r0, r7
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	mov	r1, r9
	ldrb	r0, [r1]
	add	r4, r7, #0
	eor	r4, r4, r0
	lsl	r0, r4, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
.L51:
	ldr	r1, .L52+0x14
	ldr	r5, .L52+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L52+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L52+0x1c
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L52+0x8
	mov	r9, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r9
	ldrh	r1, [r1]
	mov	r2, #0x64
	mov	r8, r2
	mov	r2, r8
	mul	r2, r2, r1
	add	r1, r2, #0
	ldr	r6, .L52+0xc
	add	r1, r1, r6
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	bl	StartHealthboxSlideIn
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldrb	r4, [r5]
	lsl	r0, r4, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r0, .L52
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L52+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L52+0x24
	str	r1, [r0]
.L50:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gBattleControllerData
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	Intro_WaitForShinyAnimAndHealthbox
.Lfe9:
	.size	 Intro_TryShinyAnimShowHealthbox,.Lfe9-Intro_TryShinyAnimShowHealthbox
	.align	2, 0
	.type	 TryShinyAnimAfterMonAnim,function
	.thumb_func
TryShinyAnimAfterMonAnim:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L59
	ldr	r0, .L59+0x4
	ldr	r7, .L59+0x8
	ldrb	r3, [r7]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r2, r0, #0x1f
	cmp	r2, #0x1
	bne	.L55	@cond_branch
	mov	r4, #0x24
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bne	.L55	@cond_branch
	ldr	r6, .L59+0xc
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r4, r3, #0x1
	add	r0, r4, r3
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r5, [r1]
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L56	@cond_branch
	ldr	r0, .L59+0x10
	add	r0, r4, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L59+0x14
	add	r1, r1, r0
	add	r0, r3, #0
	bl	TryShinyAnimation
	b	.L55
.L60:
	.align	2, 0
.L59:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L56:
	ldrb	r0, [r1, #0x1]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L55	@cond_branch
	mov	r0, #0x7f
	and	r0, r0, r5
	strb	r0, [r1]
	ldr	r0, [r6]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L61
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	bl	OpponentBufferExecCompleted
.L55:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	0x27f9
.Lfe10:
	.size	 TryShinyAnimAfterMonAnim,.Lfe10-TryShinyAnimAfterMonAnim
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r6, .L68
	ldrb	r0, [r6]
	ldr	r5, .L68+0x4
	add	r1, r0, r5
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L64	@cond_branch
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L65
.L69:
	.align	2, 0
.L68:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L64:
	mov	r0, #0x1
	bl	BtlCtrl_OakOldMan_TestState2Flag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L66	@cond_branch
	ldr	r0, .L70
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L66	@cond_branch
	mov	r0, #0x1
	bl	BtlCtrl_OakOldMan_SetState2Flag
	ldr	r0, .L70+0x4
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L70+0x8
	str	r0, [r1]
	b	.L65
.L71:
	.align	2, 0
.L70:
	.word	gBattleTypeFlags
	.word	gBattlerControllerFuncs
	.word	PrintOakText_InflictingDamageIsKey
.L66:
	bl	OpponentBufferExecCompleted
.L65:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 CompleteOnHealthbarDone,.Lfe11-CompleteOnHealthbarDone
	.align	2, 0
	.type	 HideHealthboxAfterMonFaint,function
	.thumb_func
HideHealthboxAfterMonFaint:
	push	{lr}
	ldr	r2, .L74
	ldr	r0, .L74+0x4
	ldr	r1, .L74+0x8
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L73	@cond_branch
	ldr	r0, .L74+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	OpponentBufferExecCompleted
.L73:
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.Lfe12:
	.size	 HideHealthboxAfterMonFaint,.Lfe12-HideHealthboxAfterMonFaint
	.align	2, 0
	.type	 FreeMonSpriteAfterSwitchOutAnim,function
	.thumb_func
FreeMonSpriteAfterSwitchOutAnim:
	push	{r4, r5, r6, lr}
	ldr	r0, .L78
	ldr	r0, [r0]
	ldr	r6, .L78+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L77	@cond_branch
	ldr	r5, .L78+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L78+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	HideBattlerShadowSprite
	ldr	r1, .L78+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	OpponentBufferExecCompleted
.L77:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe13:
	.size	 FreeMonSpriteAfterSwitchOutAnim,.Lfe13-FreeMonSpriteAfterSwitchOutAnim
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L81	@cond_branch
	bl	OpponentBufferExecCompleted
.L81:
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 CompleteOnInactiveTextPrinter,.Lfe14-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L86
	ldr	r0, .L86+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L86+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L83	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L86+0xc
	strb	r3, [r0]
	bl	OpponentBufferExecCompleted
	b	.L84
.L87:
	.align	2, 0
.L86:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L83:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L85	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L85:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L84:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe15-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 SwitchIn_ShowSubstitute,function
	.thumb_func
SwitchIn_ShowSubstitute:
	push	{r4, lr}
	ldr	r2, .L91
	ldr	r0, .L91+0x4
	ldr	r4, .L91+0x8
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L91+0xc
	cmp	r1, r0
	bne	.L89	@cond_branch
	ldr	r0, .L91+0x10
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L90	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L90:
	ldr	r0, .L91+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L91+0x18
	str	r0, [r1]
.L89:
	pop	{r4}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	SwitchIn_HandleSoundAndEnd
.Lfe16:
	.size	 SwitchIn_ShowSubstitute,.Lfe16-SwitchIn_ShowSubstitute
	.align	2, 0
	.type	 SwitchIn_HandleSoundAndEnd,function
	.thumb_func
SwitchIn_HandleSoundAndEnd:
	push	{lr}
	ldr	r0, .L95
	ldr	r2, [r0]
	ldr	r0, .L95+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L94	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	ldr	r0, .L95+0x8
	ldr	r1, .L95+0xc
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	bl	OpponentBufferExecCompleted
.L94:
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gMPlayInfo_BGM
	.word	0xffff
.Lfe17:
	.size	 SwitchIn_HandleSoundAndEnd,.Lfe17-SwitchIn_HandleSoundAndEnd
	.align	2, 0
	.type	 SwitchIn_ShowHealthbox,function
	.thumb_func
SwitchIn_ShowHealthbox:
	push	{r4, r5, lr}
	ldr	r3, .L99
	ldr	r0, [r3]
	ldr	r5, .L99+0x4
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L98	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	ldrb	r2, [r5]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L99+0x8
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r1, .L99+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L99+0x10
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r4, .L99+0x14
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L99+0x18
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L99+0x1c
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	bl	StartHealthboxSlideIn
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldrb	r0, [r5]
	bl	CopyBattleSpriteInvisibility
	ldr	r1, .L99+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L99+0x24
	str	r1, [r0]
.L98:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	0x27f9
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerControllerFuncs
	.word	SwitchIn_ShowSubstitute
.Lfe18:
	.size	 SwitchIn_ShowHealthbox,.Lfe18-SwitchIn_ShowHealthbox
	.align	2, 0
	.type	 SwitchIn_TryShinyAnim,function
	.thumb_func
SwitchIn_TryShinyAnim:
	push	{r4, r5, r6, lr}
	ldr	r6, .L104
	ldr	r0, [r6]
	ldr	r5, .L104+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L102	@cond_branch
	ldr	r0, .L104+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L104+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L102:
	ldr	r4, .L104+0x10
	ldr	r0, .L104+0x14
	ldrb	r2, [r5]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L104+0x18
	cmp	r1, r0
	bne	.L103	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L103	@cond_branch
	add	r0, r3, r4
	bl	DestroySprite
	ldrb	r4, [r5]
	ldr	r1, .L104+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L104+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r1, .L104+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L104+0x20
	str	r1, [r0]
.L103:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L105:
	.align	2, 0
.L104:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gSprites
	.word	gBattleControllerData
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	SwitchIn_ShowHealthbox
.Lfe19:
	.size	 SwitchIn_TryShinyAnim,.Lfe19-SwitchIn_TryShinyAnim
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L108
	ldr	r2, [r0]
	ldr	r0, .L108+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L107	@cond_branch
	bl	OpponentBufferExecCompleted
.L107:
	pop	{r0}
	bx	r0
.L109:
	.align	2, 0
.L108:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe20:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe20-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L112
	ldr	r2, [r0]
	ldr	r0, .L112+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L111	@cond_branch
	bl	OpponentBufferExecCompleted
.L111:
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe21:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe21-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.globl	OpponentBufferExecCompleted
	.type	 OpponentBufferExecCompleted,function
	.thumb_func
OpponentBufferExecCompleted:
	ldr	r1, .L115
	ldr	r2, .L115+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L115+0x8
	str	r1, [r0]
	ldr	r3, .L115+0xc
	ldr	r1, .L115+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
	bx	lr
.L116:
	.align	2, 0
.L115:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OpponentBufferRunCommand
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe22:
	.size	 OpponentBufferExecCompleted,.Lfe22-OpponentBufferExecCompleted
	.align	2, 0
	.type	 OpponentHandleGetMonData,function
	.thumb_func
OpponentHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r1, .L126
	ldr	r0, .L126+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L118	@cond_branch
	ldr	r0, .L126+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	GetOpponentMonData
	add	r6, r0, #0
	b	.L119
.L127:
	.align	2, 0
.L126:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L118:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L123:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L124	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	GetOpponentMonData
	add	r6, r6, r0
.L124:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L123	@cond_branch
.L119:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	OpponentBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 OpponentHandleGetMonData,.Lfe23-OpponentHandleGetMonData
	.align	2, 0
	.type	 GetOpponentMonData,function
	.thumb_func
GetOpponentMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x90
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L217
	ldr	r3, .L217+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bls	.LCB1780
	bl	.L129	@far jump
.LCB1780:
	lsl	r0, r0, #0x2
	ldr	r1, .L217+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L218:
	.align	2, 0
.L217:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	.L211
	.align	2, 0
	.align	2, 0
.L211:
	.word	.L130
	.word	.L141
	.word	.L142
	.word	.L143
	.word	.L157
	.word	.L157
	.word	.L157
	.word	.L157
	.word	.L158
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L168
	.word	.L169
	.word	.L170
	.word	.L171
	.word	.L172
	.word	.L173
	.word	.L174
	.word	.L175
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L181
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
	.word	.L198
	.word	.L199
	.word	.L200
	.word	.L201
	.word	.L202
	.word	.L203
	.word	.L204
	.word	.L205
	.word	.L206
	.word	.L207
	.word	.L208
	.word	.L209
	.word	.L210
.L130:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L219
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	mov	r6, #0x0
	add	r0, sp, #0x24
	mov	r9, r0
	mov	r1, #0x3b
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2b
	str	r2, [sp, #0x80]
	mov	r0, sp
	add	r0, r0, #0x2a
	str	r0, [sp, #0x7c]
	mov	r1, sp
	add	r1, r1, #0x68
	str	r1, [sp, #0x8c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x84]
	add	r0, r0, #0x12
	str	r0, [sp, #0x88]
	mov	r8, r4
	add	r4, sp, #0xc
.L134:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L134	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L219
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x80]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x44]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L219+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L219+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L219+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x7c]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x28]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2c]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, sp
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x7
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x54]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	ldr	r0, [sp, #0x84]
	ldr	r1, [sp, #0x8c]
	bl	StringCopy_Nickname
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x88]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L139:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x57
	bls	.L139	@cond_branch
	b	.L129
.L220:
	.align	2, 0
.L219:
	.word	gEnemyParty
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L141:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L221
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L213
.L222:
	.align	2, 0
.L221:
	.word	gEnemyParty
.L142:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L223
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L213
.L224:
	.align	2, 0
.L223:
	.word	gEnemyParty
.L143:
	mov	r6, #0x0
	add	r2, sp, #0x58
	mov	r9, r2
	add	r0, sp, #0x60
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L225
	add	r4, r1, r0
	mov	r8, r9
.L147:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L147	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L225
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L152:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L152	@cond_branch
	b	.L129
.L226:
	.align	2, 0
.L225:
	.word	gEnemyParty
.L157:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L227
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L213
.L228:
	.align	2, 0
.L227:
	.word	gEnemyParty
.L158:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L229
	mov	r8, r2
.L162:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L162	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L229
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L129
.L230:
	.align	2, 0
.L229:
	.word	gEnemyParty
.L167:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L231
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x8
	b	.L214
.L232:
	.align	2, 0
.L231:
	.word	gEnemyParty
.L168:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L233
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L215
.L234:
	.align	2, 0
.L233:
	.word	gEnemyParty
.L169:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L235
	add	r0, r0, r1
	mov	r1, #0x19
.L215:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L129
.L236:
	.align	2, 0
.L235:
	.word	gEnemyParty
.L170:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L237
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L214
.L238:
	.align	2, 0
.L237:
	.word	gEnemyParty
.L171:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L239
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L214
.L240:
	.align	2, 0
.L239:
	.word	gEnemyParty
.L172:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L241
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L214
.L242:
	.align	2, 0
.L241:
	.word	gEnemyParty
.L173:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L243
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L214
.L244:
	.align	2, 0
.L243:
	.word	gEnemyParty
.L174:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L245
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L214
.L246:
	.align	2, 0
.L245:
	.word	gEnemyParty
.L175:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L247
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L214
.L248:
	.align	2, 0
.L247:
	.word	gEnemyParty
.L176:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L249
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L214
.L250:
	.align	2, 0
.L249:
	.word	gEnemyParty
.L177:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L251
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L214
.L252:
	.align	2, 0
.L251:
	.word	gEnemyParty
.L178:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L253
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L214
.L254:
	.align	2, 0
.L253:
	.word	gEnemyParty
.L179:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L255
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L214
.L256:
	.align	2, 0
.L255:
	.word	gEnemyParty
.L180:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L257
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L214
.L258:
	.align	2, 0
.L257:
	.word	gEnemyParty
.L181:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L259
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L214
.L260:
	.align	2, 0
.L259:
	.word	gEnemyParty
.L182:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L261
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L129
.L262:
	.align	2, 0
.L261:
	.word	gEnemyParty
.L183:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L263
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L214
.L264:
	.align	2, 0
.L263:
	.word	gEnemyParty
.L184:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L265
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L214
.L266:
	.align	2, 0
.L265:
	.word	gEnemyParty
.L185:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L267
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L214
.L268:
	.align	2, 0
.L267:
	.word	gEnemyParty
.L186:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L269
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L214
.L270:
	.align	2, 0
.L269:
	.word	gEnemyParty
.L187:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L271
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L214
.L272:
	.align	2, 0
.L271:
	.word	gEnemyParty
.L188:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L273
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L214
.L274:
	.align	2, 0
.L273:
	.word	gEnemyParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L275
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L216
.L276:
	.align	2, 0
.L275:
	.word	gEnemyParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L277
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L213
.L278:
	.align	2, 0
.L277:
	.word	gEnemyParty
.L191:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L279
	add	r0, r0, r1
	mov	r1, #0x37
.L216:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L129
.L280:
	.align	2, 0
.L279:
	.word	gEnemyParty
.L192:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L281
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L214
.L282:
	.align	2, 0
.L281:
	.word	gEnemyParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L283
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L213
.L284:
	.align	2, 0
.L283:
	.word	gEnemyParty
.L194:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L285
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L213
.L286:
	.align	2, 0
.L285:
	.word	gEnemyParty
.L195:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L287
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L213
.L288:
	.align	2, 0
.L287:
	.word	gEnemyParty
.L196:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L289
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L213
.L290:
	.align	2, 0
.L289:
	.word	gEnemyParty
.L197:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L291
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L213
.L292:
	.align	2, 0
.L291:
	.word	gEnemyParty
.L198:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L293
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L213
.L294:
	.align	2, 0
.L293:
	.word	gEnemyParty
.L199:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L295
	add	r0, r0, r1
	mov	r1, #0x3f
.L213:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L129
.L296:
	.align	2, 0
.L295:
	.word	gEnemyParty
.L200:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L297
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L214
.L298:
	.align	2, 0
.L297:
	.word	gEnemyParty
.L201:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L299
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L214
.L300:
	.align	2, 0
.L299:
	.word	gEnemyParty
.L202:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L301
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L214
.L302:
	.align	2, 0
.L301:
	.word	gEnemyParty
.L203:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L303
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L214
.L304:
	.align	2, 0
.L303:
	.word	gEnemyParty
.L204:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L305
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L214
.L306:
	.align	2, 0
.L305:
	.word	gEnemyParty
.L205:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L307
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L214
.L308:
	.align	2, 0
.L307:
	.word	gEnemyParty
.L206:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L309
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L214
.L310:
	.align	2, 0
.L309:
	.word	gEnemyParty
.L207:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L311
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L214
.L312:
	.align	2, 0
.L311:
	.word	gEnemyParty
.L208:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L313
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L214
.L314:
	.align	2, 0
.L313:
	.word	gEnemyParty
.L209:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L315
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L214
.L316:
	.align	2, 0
.L315:
	.word	gEnemyParty
.L210:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L317
	add	r0, r0, r1
	mov	r1, #0x36
.L214:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L129:
	add	r0, r6, #0
	add	sp, sp, #0x90
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L318:
	.align	2, 0
.L317:
	.word	gEnemyParty
.Lfe24:
	.size	 GetOpponentMonData,.Lfe24-GetOpponentMonData
	.align	2, 0
	.type	 OpponentHandleGetRawMonData,function
	.thumb_func
OpponentHandleGetRawMonData:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x58
	ldr	r2, .L325
	ldr	r5, .L325+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mov	r4, r2
	mul	r4, r4, r0
	ldr	r3, .L325+0x8
	lsl	r1, r1, #0x9
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldrb	r2, [r0]
	ldr	r0, .L325+0xc
	add	r0, r2, r0
	add	r6, r4, r0
	mov	r0, sp
	add	r4, r0, r2
	mov	r2, #0x0
	add	r0, r3, #0x2
	add	r1, r1, r0
	add	r7, r5, #0
	mov	ip, r3
	ldrb	r1, [r1]
	cmp	r2, r1
	bcs	.L321	@cond_branch
	add	r3, r0, #0
.L323:
	add	r1, r4, r2
	add	r0, r6, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L323	@cond_branch
.L321:
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	mov	r1, ip
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	add	r2, r4, #0
	bl	BtlController_EmitDataTransfer
	bl	OpponentBufferExecCompleted
	add	sp, sp, #0x58
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L326:
	.align	2, 0
.L325:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gEnemyParty
.Lfe25:
	.size	 OpponentHandleGetRawMonData,.Lfe25-OpponentHandleGetRawMonData
	.align	2, 0
	.type	 OpponentHandleSetMonData,function
	.thumb_func
OpponentHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r1, .L336
	ldr	r0, .L336+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L328	@cond_branch
	ldr	r0, .L336+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetOpponentMonData
	b	.L329
.L337:
	.align	2, 0
.L336:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L328:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L333:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L334	@cond_branch
	add	r0, r5, #0
	bl	SetOpponentMonData
.L334:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L333	@cond_branch
.L329:
	bl	OpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 OpponentHandleSetMonData,.Lfe26-OpponentHandleSetMonData
	.align	2, 0
	.type	 SetOpponentMonData,function
	.thumb_func
SetOpponentMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, .L410
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	ldr	r2, .L410+0x4
	add	r4, r0, r2
	add	r7, r4, #0
	sub	r1, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r6, r3, #0
	add	r3, r2, #0
	cmp	r0, #0x3b
	bls	.LCB3276
	bl	.L339	@far jump
.LCB3276:
	lsl	r0, r0, #0x2
	ldr	r1, .L410+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L411:
	.align	2, 0
.L410:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
	.word	.L406
	.align	2, 0
	.align	2, 0
.L406:
	.word	.L340
	.word	.L346
	.word	.L347
	.word	.L348
	.word	.L357
	.word	.L357
	.word	.L357
	.word	.L357
	.word	.L358
	.word	.L362
	.word	.L362
	.word	.L362
	.word	.L362
	.word	.L339
	.word	.L339
	.word	.L339
	.word	.L339
	.word	.L363
	.word	.L364
	.word	.L365
	.word	.L366
	.word	.L367
	.word	.L368
	.word	.L369
	.word	.L370
	.word	.L371
	.word	.L372
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L383
	.word	.L384
	.word	.L385
	.word	.L386
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L393
	.word	.L394
	.word	.L395
	.word	.L396
	.word	.L397
	.word	.L398
	.word	.L399
	.word	.L400
	.word	.L401
	.word	.L402
	.word	.L403
	.word	.L404
	.word	.L405
.L340:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L412
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	add	r2, r7, #0
	bl	SetMonData
	add	r2, r7, #0
	add	r2, r2, #0x2e
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x3b
	add	r0, r0, r7
	mov	sl, r0
	add	r0, r7, #0
	add	r0, r0, #0x2b
	str	r0, [sp, #0x20]
	add	r0, r0, #0x19
	str	r0, [sp, #0x28]
	add	r0, r0, #0x4
	str	r0, [sp, #0x2c]
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	sub	r0, r0, #0x22
	str	r0, [sp, #0x1c]
	sub	r0, r0, #0x2
	str	r0, [sp, #0x18]
	add	r0, r0, #0x4
	str	r0, [sp, #0x24]
	add	r0, r7, #0x2
	str	r0, [sp, #0x4]
	add	r0, r7, #0x4
	str	r0, [sp, #0x8]
	add	r0, r7, #0x6
	str	r0, [sp, #0xc]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x14]
	mov	r9, r4
	add	r6, r7, #0
	add	r6, r6, #0x24
	add	r4, r7, #0
	add	r4, r4, #0xc
.L344:
	mov	r1, r8
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L344	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L412
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	ldrb	r0, [r7, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r7, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r7, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldr	r0, [r7, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r7, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r7, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L339
.L413:
	.align	2, 0
.L412:
	.word	gEnemyParty
.L346:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L414
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0xb
	bl	SetMonData
	b	.L339
.L415:
	.align	2, 0
.L414:
	.word	gEnemyParty
.L347:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L416
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0xc
	bl	SetMonData
	b	.L339
.L417:
	.align	2, 0
.L416:
	.word	gEnemyParty
.L348:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0xc
	add	r0, r0, r4
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L418
	add	r7, r1, r0
	add	r6, r4, #0
	add	r6, r6, #0x8
.L352:
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r7, #0
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	add	r0, r7, #0
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L352	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L418
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	b	.L339
.L419:
	.align	2, 0
.L418:
	.word	gEnemyParty
.L357:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L420
	add	r0, r0, r1
	ldr	r3, .L420+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L408
.L421:
	.align	2, 0
.L420:
	.word	gEnemyParty
	.word	gBattleBufferA
.L358:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L422
	add	r4, r4, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	add	r0, r4, #0
	mov	r1, #0x11
	str	r3, [sp, #0x34]
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L339
.L423:
	.align	2, 0
.L422:
	.word	gEnemyParty
.L362:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L424
	add	r0, r0, r1
	ldr	r3, .L424+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L408:
	add	r3, r3, #0x3
	add	r2, r2, r3
	bl	SetMonData
	b	.L339
.L425:
	.align	2, 0
.L424:
	.word	gEnemyParty
	.word	gBattleBufferA
.L363:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L426
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1
	bl	SetMonData
	b	.L339
.L427:
	.align	2, 0
.L426:
	.word	gEnemyParty
.L364:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L428
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x19
	bl	SetMonData
	b	.L339
.L429:
	.align	2, 0
.L428:
	.word	gEnemyParty
.L365:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L430
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1a
	bl	SetMonData
	b	.L339
.L431:
	.align	2, 0
.L430:
	.word	gEnemyParty
.L366:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L432
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1b
	bl	SetMonData
	b	.L339
.L433:
	.align	2, 0
.L432:
	.word	gEnemyParty
.L367:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L434
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1c
	bl	SetMonData
	b	.L339
.L435:
	.align	2, 0
.L434:
	.word	gEnemyParty
.L368:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L436
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1d
	bl	SetMonData
	b	.L339
.L437:
	.align	2, 0
.L436:
	.word	gEnemyParty
.L369:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L438
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1e
	bl	SetMonData
	b	.L339
.L439:
	.align	2, 0
.L438:
	.word	gEnemyParty
.L370:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L440
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1f
	bl	SetMonData
	b	.L339
.L441:
	.align	2, 0
.L440:
	.word	gEnemyParty
.L371:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L442
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x20
	bl	SetMonData
	b	.L339
.L443:
	.align	2, 0
.L442:
	.word	gEnemyParty
.L372:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L444
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x22
	bl	SetMonData
	b	.L339
.L445:
	.align	2, 0
.L444:
	.word	gEnemyParty
.L373:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L446
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x23
	bl	SetMonData
	b	.L339
.L447:
	.align	2, 0
.L446:
	.word	gEnemyParty
.L374:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L448
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x24
	bl	SetMonData
	b	.L339
.L449:
	.align	2, 0
.L448:
	.word	gEnemyParty
.L375:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L450
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x25
	bl	SetMonData
	b	.L339
.L451:
	.align	2, 0
.L450:
	.word	gEnemyParty
.L376:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L452
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x26
	bl	SetMonData
	b	.L339
.L453:
	.align	2, 0
.L452:
	.word	gEnemyParty
.L377:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L454
	add	r4, r4, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	add	r0, r4, #0
	mov	r1, #0x27
	str	r3, [sp, #0x34]
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x5
	add	r2, r2, r0
	add	r0, r4, #0
	b	.L409
.L455:
	.align	2, 0
.L454:
	.word	gEnemyParty
.L378:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L456
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x27
	bl	SetMonData
	b	.L339
.L457:
	.align	2, 0
.L456:
	.word	gEnemyParty
.L379:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L458
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x28
	bl	SetMonData
	b	.L339
.L459:
	.align	2, 0
.L458:
	.word	gEnemyParty
.L380:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L460
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x29
	bl	SetMonData
	b	.L339
.L461:
	.align	2, 0
.L460:
	.word	gEnemyParty
.L381:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L462
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2a
	bl	SetMonData
	b	.L339
.L463:
	.align	2, 0
.L462:
	.word	gEnemyParty
.L382:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L464
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2b
	bl	SetMonData
	b	.L339
.L465:
	.align	2, 0
.L464:
	.word	gEnemyParty
.L383:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L466
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
.L409:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L339
.L467:
	.align	2, 0
.L466:
	.word	gEnemyParty
.L384:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L468
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x0
	bl	SetMonData
	b	.L339
.L469:
	.align	2, 0
.L468:
	.word	gEnemyParty
.L385:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L470
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x9
	bl	SetMonData
	b	.L339
.L471:
	.align	2, 0
.L470:
	.word	gEnemyParty
.L386:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L472
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x37
	bl	SetMonData
	b	.L339
.L473:
	.align	2, 0
.L472:
	.word	gEnemyParty
.L387:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L474
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x38
	bl	SetMonData
	b	.L339
.L475:
	.align	2, 0
.L474:
	.word	gEnemyParty
.L388:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L476
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x39
	bl	SetMonData
	b	.L339
.L477:
	.align	2, 0
.L476:
	.word	gEnemyParty
.L389:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L478
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3a
	bl	SetMonData
	b	.L339
.L479:
	.align	2, 0
.L478:
	.word	gEnemyParty
.L390:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L480
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3b
	bl	SetMonData
	b	.L339
.L481:
	.align	2, 0
.L480:
	.word	gEnemyParty
.L391:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L482
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3c
	bl	SetMonData
	b	.L339
.L483:
	.align	2, 0
.L482:
	.word	gEnemyParty
.L392:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L484
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3d
	bl	SetMonData
	b	.L339
.L485:
	.align	2, 0
.L484:
	.word	gEnemyParty
.L393:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L486
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3e
	bl	SetMonData
	b	.L339
.L487:
	.align	2, 0
.L486:
	.word	gEnemyParty
.L394:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L488
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3f
	bl	SetMonData
	b	.L339
.L489:
	.align	2, 0
.L488:
	.word	gEnemyParty
.L395:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L490
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x16
	bl	SetMonData
	b	.L339
.L491:
	.align	2, 0
.L490:
	.word	gEnemyParty
.L396:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L492
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x17
	bl	SetMonData
	b	.L339
.L493:
	.align	2, 0
.L492:
	.word	gEnemyParty
.L397:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L494
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x18
	bl	SetMonData
	b	.L339
.L495:
	.align	2, 0
.L494:
	.word	gEnemyParty
.L398:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L496
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x21
	bl	SetMonData
	b	.L339
.L497:
	.align	2, 0
.L496:
	.word	gEnemyParty
.L399:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L498
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2f
	bl	SetMonData
	b	.L339
.L499:
	.align	2, 0
.L498:
	.word	gEnemyParty
.L400:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L500
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x30
	bl	SetMonData
	b	.L339
.L501:
	.align	2, 0
.L500:
	.word	gEnemyParty
.L401:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L502
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x32
	bl	SetMonData
	b	.L339
.L503:
	.align	2, 0
.L502:
	.word	gEnemyParty
.L402:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L504
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x33
	bl	SetMonData
	b	.L339
.L505:
	.align	2, 0
.L504:
	.word	gEnemyParty
.L403:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L506
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x34
	bl	SetMonData
	b	.L339
.L507:
	.align	2, 0
.L506:
	.word	gEnemyParty
.L404:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L508
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x35
	bl	SetMonData
	b	.L339
.L509:
	.align	2, 0
.L508:
	.word	gEnemyParty
.L405:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L510
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x36
	bl	SetMonData
.L339:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L511:
	.align	2, 0
.L510:
	.word	gEnemyParty
.Lfe27:
	.size	 SetOpponentMonData,.Lfe27-SetOpponentMonData
	.align	2, 0
	.type	 OpponentHandleSetRawMonData,function
	.thumb_func
OpponentHandleSetRawMonData:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L518
	ldr	r7, .L518+0x4
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r3, r1
	mul	r3, r3, r0
	ldr	r4, .L518+0x8
	lsl	r2, r2, #0x9
	add	r0, r4, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	ldr	r1, .L518+0xc
	add	r0, r0, r1
	add	r5, r3, r0
	mov	r3, #0x0
	add	r0, r4, #0x2
	add	r2, r2, r0
	ldrb	r2, [r2]
	cmp	r3, r2
	bcs	.L514	@cond_branch
	add	r6, r4, #0
	add	r2, r7, #0
	add	r4, r0, #0
.L516:
	add	r1, r5, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r3, r0
	bcc	.L516	@cond_branch
.L514:
	bl	OpponentBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L519:
	.align	2, 0
.L518:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gEnemyParty
.Lfe28:
	.size	 OpponentHandleSetRawMonData,.Lfe28-OpponentHandleSetRawMonData
	.align	2, 0
	.type	 OpponentHandleLoadMonSprite,function
	.thumb_func
OpponentHandleLoadMonSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L524
	ldr	r4, .L524+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r6, .L524+0x8
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L524+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L521	@cond_branch
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r6
	bl	DecompressGhostFrontPic
	ldrb	r0, [r4]
	bl	GetGhostSpriteDefault_Y
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, .L524+0x10
	ldr	r0, [r3]
	ldrb	r1, [r4]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, [r3]
	ldrb	r1, [r4]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	b	.L522
.L525:
	.align	2, 0
.L524:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gBattleSpritesDataPtr
.L521:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r6
	bl	BattleLoadOpponentMonSpriteGfx
	ldrb	r0, [r4]
	bl	GetBattlerSpriteDefault_Y
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L522:
	ldr	r7, .L526
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r6, .L526+0x4
	ldrb	r0, [r7]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r7]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	CreateSprite
	ldr	r4, .L526+0x8
	ldrb	r1, [r7]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L526+0xc
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L526+0x10
	strh	r1, [r0, #0x24]
	ldrb	r2, [r7]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r3, [r7]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r2, [r7]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L526+0x14
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldr	r0, .L526+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L523	@cond_branch
	ldrb	r4, [r7]
	ldr	r1, .L526+0x1c
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L526+0x20
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
.L523:
	ldr	r0, .L526+0x24
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L526+0x28
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L527:
	.align	2, 0
.L526:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerControllerFuncs
	.word	TryShinyAnimAfterMonAnim
.Lfe29:
	.size	 OpponentHandleLoadMonSprite,.Lfe29-OpponentHandleLoadMonSprite
	.align	2, 0
	.type	 OpponentHandleSwitchInAnim,function
	.thumb_func
OpponentHandleSwitchInAnim:
	push	{r4, lr}
	ldr	r4, .L529
	ldrb	r0, [r4]
	ldr	r1, .L529+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	mov	r1, #0x6
	strb	r1, [r0]
	ldr	r1, .L529+0x8
	ldrb	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r1
	ldr	r3, .L529+0xc
	lsl	r0, r0, #0x9
	add	r1, r3, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x9
	add	r3, r3, #0x2
	add	r1, r1, r3
	ldrb	r1, [r1]
	bl	StartSendOutAnim
	ldr	r1, .L529+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L529+0x14
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L530:
	.align	2, 0
.L529:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gBattleBufferA
	.word	gBattlerControllerFuncs
	.word	SwitchIn_TryShinyAnim
.Lfe30:
	.size	 OpponentHandleSwitchInAnim,.Lfe30-OpponentHandleSwitchInAnim
	.align	2, 0
	.type	 StartSendOutAnim,function
	.thumb_func
StartSendOutAnim:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	ClearTemporarySpeciesSpriteData
	ldr	r0, .L532
	lsl	r4, r6, #0x1
	add	r4, r4, r0
	ldr	r0, .L532+0x4
	lsl	r1, r6, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x64
	mov	r9, r1
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r5, .L532+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L532+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L532+0x10
	mov	sl, r1
	add	sl, sl, r6
	mov	r1, sl
	strb	r0, [r1]
	ldrh	r0, [r4]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	add	r1, r6, #0
	bl	BattleLoadOpponentMonSpriteGfx
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L532+0x14
	mov	r9, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r9
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L532+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L532+0x1c
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	mov	r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L532+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L532+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xfe
	bl	DoPokeballSendOutAnimation
	mov	r1, sl
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L533:
	.align	2, 0
.L532:
	.word	gBattlerPartyIndexes
	.word	gBattleBufferA
	.word	gEnemyParty
	.word	SpriteCB_WaitForBattlerBallReleaseAnim
	.word	gBattleControllerData
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe31:
	.size	 StartSendOutAnim,.Lfe31-StartSendOutAnim
	.align	2, 0
	.type	 OpponentHandleReturnMonToBall,function
	.thumb_func
OpponentHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r1, .L537
	ldr	r6, .L537+0x4
	ldrb	r2, [r6]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L535	@cond_branch
	ldr	r0, .L537+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L537+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L537+0x10
	str	r1, [r0]
	b	.L536
.L538:
	.align	2, 0
.L537:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L535:
	ldr	r5, .L539
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L539+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	HideBattlerShadowSprite
	ldr	r1, .L539+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	OpponentBufferExecCompleted
.L536:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L540:
	.align	2, 0
.L539:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe32:
	.size	 OpponentHandleReturnMonToBall,.Lfe32-OpponentHandleReturnMonToBall
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L549
	ldr	r4, [r6]
	ldr	r5, .L549+0x4
	ldrb	r2, [r5]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L543	@cond_branch
	cmp	r0, #0x1
	beq	.L545	@cond_branch
	b	.L542
.L550:
	.align	2, 0
.L549:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L543:
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L544	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L544:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L542
.L545:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L542	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x2
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L551
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L551+0x4
	str	r1, [r0]
.L542:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L552:
	.align	2, 0
.L551:
	.word	gBattlerControllerFuncs
	.word	FreeMonSpriteAfterSwitchOutAnim
.Lfe33:
	.size	 DoSwitchOutAnimation,.Lfe33-DoSwitchOutAnimation
	.align	2, 0
	.type	 OpponentHandleDrawTrainerPic,function
	.thumb_func
OpponentHandleDrawTrainerPic:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r3, .L563
	ldrh	r1, [r3]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L554	@cond_branch
	bl	GetSecretBaseTrainerPicIndex
	b	.L562
.L564:
	.align	2, 0
.L563:
	.word	gTrainerBattleOpponent_A
.L554:
	ldr	r0, .L565
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L556	@cond_branch
	bl	GetBattleTowerTrainerFrontSpriteId
	b	.L562
.L566:
	.align	2, 0
.L565:
	.word	gBattleTypeFlags
.L556:
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L558	@cond_branch
	bl	GetTrainerTowerTrainerFrontSpriteId
	b	.L562
.L558:
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L560	@cond_branch
	bl	GetEreaderTrainerFrontSpriteId
.L562:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L555
.L560:
	ldr	r2, .L567
	ldrh	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
.L555:
	mov	r9, r0
	ldr	r0, .L567+0x4
	mov	r8, r0
	ldrb	r1, [r0]
	mov	r0, r9
	bl	DecompressTrainerFrontPic
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r5, .L567+0x8
	ldr	r1, .L567+0xc
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x8
	sub	r4, r4, r0
	lsl	r4, r4, #0x12
	mov	r0, #0xa0
	lsl	r0, r0, #0xe
	add	r4, r4, r0
	asr	r4, r4, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r5, #0
	mov	r1, #0xb0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r5, .L567+0x10
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L567+0x14
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L567+0x18
	strh	r1, [r0, #0x24]
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldr	r0, .L567+0x1c
	mov	r1, r9
	lsl	r6, r1, #0x3
	add	r0, r6, r0
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	strh	r0, [r1, #0x38]
	ldr	r0, .L567+0x20
	add	r6, r6, r0
	ldrh	r0, [r6, #0x6]
	bl	GetSpriteTileStartByTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r2, .L567+0x24
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L567+0x28
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r2, r9
	strh	r2, [r0, #0x6]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L567+0x2c
	str	r1, [r0]
	ldr	r1, .L567+0x30
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L567+0x34
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L568:
	.align	2, 0
.L567:
	.word	gTrainers
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerFrontPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gTrainerFrontPicPaletteTable
	.word	gTrainerFrontPicTable
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_TrainerSlideIn
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe34:
	.size	 OpponentHandleDrawTrainerPic,.Lfe34-OpponentHandleDrawTrainerPic
	.align	2, 0
	.type	 OpponentHandleTrainerSlide,function
	.thumb_func
OpponentHandleTrainerSlide:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r3, .L579
	ldrh	r1, [r3]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L570	@cond_branch
	bl	GetSecretBaseTrainerPicIndex
	b	.L578
.L580:
	.align	2, 0
.L579:
	.word	gTrainerBattleOpponent_A
.L570:
	ldr	r0, .L581
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L572	@cond_branch
	bl	GetBattleTowerTrainerFrontSpriteId
	b	.L578
.L582:
	.align	2, 0
.L581:
	.word	gBattleTypeFlags
.L572:
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L574	@cond_branch
	bl	GetTrainerTowerTrainerFrontSpriteId
	b	.L578
.L574:
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L576	@cond_branch
	bl	GetEreaderTrainerFrontSpriteId
.L578:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L571
.L576:
	ldr	r2, .L583
	ldrh	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
.L571:
	mov	r9, r0
	ldr	r0, .L583+0x4
	mov	r8, r0
	ldrb	r1, [r0]
	mov	r0, r9
	bl	DecompressTrainerFrontPic
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L583+0x8
	ldr	r2, .L583+0xc
	mov	r3, r9
	lsl	r1, r3, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xe
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0xb0
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r5, .L583+0x10
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L583+0x14
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x60
	strh	r1, [r0, #0x24]
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x20
	strh	r1, [r0, #0x20]
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L583+0x18
	strh	r1, [r0, #0x2e]
	ldr	r0, .L583+0x1c
	mov	r3, r9
	lsl	r6, r3, #0x3
	add	r0, r6, r0
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	mov	r3, r8
	ldrb	r0, [r3]
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	strh	r0, [r1, #0x38]
	ldr	r0, .L583+0x20
	add	r6, r6, r0
	ldrh	r0, [r6, #0x6]
	bl	GetSpriteTileStartByTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r2, .L583+0x24
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L583+0x28
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r3, r8
	ldrb	r0, [r3]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, r9
	strh	r1, [r0, #0x6]
	ldrb	r0, [r3]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L583+0x2c
	str	r1, [r0]
	ldr	r1, .L583+0x30
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L583+0x34
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L584:
	.align	2, 0
.L583:
	.word	gTrainers
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerFrontPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xfffe
	.word	gTrainerFrontPicPaletteTable
	.word	gTrainerFrontPicTable
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_TrainerSlideIn
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy2
.Lfe35:
	.size	 OpponentHandleTrainerSlide,.Lfe35-OpponentHandleTrainerSlide
	.align	2, 0
	.type	 OpponentHandleTrainerSlideBack,function
	.thumb_func
OpponentHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r6, .L586
	ldr	r4, .L586+0x4
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L586+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L586+0xc
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L586+0x10
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L586+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L586+0x18
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L587:
	.align	2, 0
.L586:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	StartAnimLinearTranslation
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	FreeTrainerSpriteAfterSlide
.Lfe36:
	.size	 OpponentHandleTrainerSlideBack,.Lfe36-OpponentHandleTrainerSlideBack
	.align	2, 0
	.type	 OpponentHandleFaintAnimation,function
	.thumb_func
OpponentHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L593
	ldr	r4, [r6]
	ldr	r5, .L593+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L589	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L590	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L590:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L591
.L594:
	.align	2, 0
.L593:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L589:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L591	@cond_branch
	strb	r0, [r3, #0x4]
	mov	r0, #0x10
	mov	r1, #0x3f
	bl	PlaySE12WithPanning
	ldr	r2, .L595
	ldr	r1, .L595+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L595+0x8
	str	r1, [r0]
	ldr	r1, .L595+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L595+0x10
	str	r1, [r0]
.L591:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L596:
	.align	2, 0
.L595:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_FaintOpponentMon
	.word	gBattlerControllerFuncs
	.word	HideHealthboxAfterMonFaint
.Lfe37:
	.size	 OpponentHandleFaintAnimation,.Lfe37-OpponentHandleFaintAnimation
	.align	2, 0
	.type	 OpponentHandlePaletteFade,function
	.thumb_func
OpponentHandlePaletteFade:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 OpponentHandlePaletteFade,.Lfe38-OpponentHandlePaletteFade
	.align	2, 0
	.type	 OpponentHandleSuccessBallThrowAnim,function
	.thumb_func
OpponentHandleSuccessBallThrowAnim:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 OpponentHandleSuccessBallThrowAnim,.Lfe39-OpponentHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 OpponentHandleBallThrowAnim,function
	.thumb_func
OpponentHandleBallThrowAnim:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 OpponentHandleBallThrowAnim,.Lfe40-OpponentHandleBallThrowAnim
	.align	2, 0
	.type	 OpponentHandlePause,function
	.thumb_func
OpponentHandlePause:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 OpponentHandlePause,.Lfe41-OpponentHandlePause
	.align	2, 0
	.type	 OpponentHandleMoveAnimation,function
	.thumb_func
OpponentHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L605
	ldrb	r0, [r6]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6242
	b	.L602	@long jump
.LCB6242:
	ldr	r0, .L605+0x4
	mov	ip, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L605+0x8
	mov	r1, ip
	add	r1, r1, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	strb	r1, [r5]
	ldr	r4, .L605+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x5
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L605+0x10
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x6
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x7
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x9
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	str	r3, [r4]
	ldr	r3, .L605+0x14
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	mov	r2, ip
	add	r2, r2, #0xa
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L605+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0xc
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0xd
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L605+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x10
	add	r2, r2, r1
	str	r2, [r3]
	ldr	r3, .L605+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L603	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L602
.L606:
	.align	2, 0
.L605:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L603:
	ldr	r0, .L607
	ldr	r0, [r0]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L607+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L607+0x8
	str	r1, [r0]
.L602:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L608:
	.align	2, 0
.L607:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	OpponentDoMoveAnimation
.Lfe42:
	.size	 OpponentHandleMoveAnimation,.Lfe42-OpponentHandleMoveAnimation
	.align	2, 0
	.type	 OpponentDoMoveAnimation,function
	.thumb_func
OpponentDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r2, .L623
	ldr	r6, .L623+0x4
	ldrb	r3, [r6]
	lsl	r1, r3, #0x9
	add	r0, r2, #0x1
	mov	sl, r0
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r2, #0x2
	mov	r9, r5
	add	r0, r1, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r2, r2, #0xb
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r7, .L623+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L613	@cond_branch
	cmp	r2, #0x1
	bgt	.L622	@cond_branch
	cmp	r2, #0
	beq	.L611	@cond_branch
	b	.L610
.L624:
	.align	2, 0
.L623:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L622:
	cmp	r2, #0x2
	beq	.L615	@cond_branch
	cmp	r2, #0x3
	beq	.L618	@cond_branch
	b	.L610
.L611:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r1, r0, r1
	ldrb	r2, [r1]
	mov	r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0x4
	bne	.L612	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r2, [r6]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L612:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L610
.L613:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L610	@cond_branch
	mov	r0, #0x0
	bl	SetBattlerSpriteAffineMode
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L610
.L615:
	ldr	r0, .L625
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L625+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L610	@cond_branch
	mov	r0, #0x1
	bl	SetBattlerSpriteAffineMode
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L617	@cond_branch
	mov	r0, r8
	cmp	r0, #0x1
	bhi	.L617	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L617:
	ldr	r0, .L625+0x8
	ldr	r2, [r0]
	ldr	r0, .L625+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L610
.L626:
	.align	2, 0
.L625:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L618:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L610	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	lsl	r2, r0, #0x9
	mov	r3, sl
	add	r1, r2, r3
	ldrb	r1, [r1]
	add	r2, r2, r9
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	OpponentBufferExecCompleted
.L610:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 OpponentDoMoveAnimation,.Lfe43-OpponentDoMoveAnimation
	.align	2, 0
	.type	 OpponentHandlePrintString,function
	.thumb_func
OpponentHandlePrintString:
	push	{r4, lr}
	ldr	r0, .L637
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L637+0x4
	strh	r1, [r0]
	ldr	r0, .L637+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	ldr	r1, .L637+0xc
	add	r4, r0, r1
	ldrh	r0, [r4]
	bl	BufferStringBattle
	ldrh	r0, [r4]
	bl	BattleStringShouldBeColored
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L628	@cond_branch
	ldr	r0, .L637+0x10
	mov	r1, #0x40
	bl	BattlePutTextOnWindow
	b	.L629
.L638:
	.align	2, 0
.L637:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gActiveBattler
	.word	gBattleBufferA+0x2
	.word	gDisplayedStringBattle
.L628:
	ldr	r0, .L639
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
.L629:
	ldr	r0, .L639+0x4
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L630	@cond_branch
	ldrh	r1, [r4]
	cmp	r1, #0xe3
	beq	.L633	@cond_branch
	ldr	r0, .L639+0x8
	cmp	r1, r0
	bne	.L630	@cond_branch
	ldr	r1, .L639+0xc
	ldr	r0, .L639+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L639+0x14
	b	.L636
.L640:
	.align	2, 0
.L639:
	.word	gDisplayedStringBattle
	.word	gBattleTypeFlags
	.word	0x17f
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PrintOakText_HowDisappointing
.L633:
	ldr	r1, .L641
	ldr	r0, .L641+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L641+0x8
	b	.L636
.L642:
	.align	2, 0
.L641:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PrintOakText_OakNoRunningFromATrainer
.L630:
	ldr	r1, .L643
	ldr	r0, .L643+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L643+0x8
.L636:
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L644:
	.align	2, 0
.L643:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnInactiveTextPrinter
.Lfe44:
	.size	 OpponentHandlePrintString,.Lfe44-OpponentHandlePrintString
	.align	2, 0
	.type	 OpponentHandlePrintSelectionString,function
	.thumb_func
OpponentHandlePrintSelectionString:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 OpponentHandlePrintSelectionString,.Lfe45-OpponentHandlePrintSelectionString
	.align	2, 0
	.type	 OpponentHandleChooseAction,function
	.thumb_func
OpponentHandleChooseAction:
	push	{lr}
	bl	AI_TrySwitchOrUseItem
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 OpponentHandleChooseAction,.Lfe46-OpponentHandleChooseAction
	.align	2, 0
	.type	 OpponentHandleUnknownYesNoBox,function
	.thumb_func
OpponentHandleUnknownYesNoBox:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 OpponentHandleUnknownYesNoBox,.Lfe47-OpponentHandleUnknownYesNoBox
	.align	2, 0
	.type	 OpponentHandleChooseMove,function
	.thumb_func
OpponentHandleChooseMove:
	push	{r4, r5, r6, lr}
	ldr	r6, .L669
	ldrb	r0, [r6]
	lsl	r0, r0, #0x9
	ldr	r1, .L669+0x4
	add	r5, r0, r1
	ldr	r0, .L669+0x8
	ldr	r0, [r0]
	mov	r1, #0x93
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L649	@cond_branch
	bl	BattleAI_SetupAIData
	bl	BattleAI_ChooseMoveOrAction
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	beq	.L652	@cond_branch
	cmp	r4, #0x5
	bne	.L653	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x4
	b	.L668
.L670:
	.align	2, 0
.L669:
	.word	gActiveBattler
	.word	gBattleBufferA+0x4
	.word	gBattleTypeFlags
.L652:
	mov	r0, #0x1
	mov	r1, #0x3
.L668:
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	b	.L650
.L653:
	ldr	r3, .L671
	lsl	r0, r4, #0x1
	add	r2, r5, r0
	ldrh	r1, [r2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L654	@cond_branch
	ldr	r1, .L671+0x4
	ldrb	r0, [r6]
	strb	r0, [r1]
.L654:
	ldrh	r1, [r2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L655	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r5, .L671+0x4
	strb	r0, [r5]
	ldr	r0, .L671+0x8
	ldrb	r1, [r0]
	ldr	r2, .L671+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L655	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	strb	r0, [r5]
.L655:
	ldr	r0, .L671+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	mov	r0, #0x1
	mov	r1, #0xa
	add	r2, r4, #0
	bl	BtlController_EmitTwoReturnValues
.L650:
	bl	OpponentBufferExecCompleted
	b	.L658
.L672:
	.align	2, 0
.L671:
	.word	gBattleMoves
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L649:
	mov	r6, #0x3
.L659:
	bl	Random
	add	r4, r0, #0
	and	r4, r4, r6
	lsl	r0, r4, #0x1
	add	r0, r5, r0
	ldrh	r2, [r0]
	cmp	r2, #0
	beq	.L659	@cond_branch
	ldr	r1, .L673
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L664	@cond_branch
	ldr	r0, .L673+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	mov	r0, #0x1
	mov	r1, #0xa
	add	r2, r4, #0
	bl	BtlController_EmitTwoReturnValues
	b	.L665
.L674:
	.align	2, 0
.L673:
	.word	gBattleMoves
	.word	gActiveBattler
.L664:
	ldr	r0, .L675
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L666	@cond_branch
	bl	Random
	mov	r1, #0x2
	and	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r1, #0
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x10
	orr	r2, r2, r4
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	b	.L665
.L676:
	.align	2, 0
.L675:
	.word	gBattleTypeFlags
.L666:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x10
	orr	r2, r2, r4
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
.L665:
	bl	OpponentBufferExecCompleted
.L658:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 OpponentHandleChooseMove,.Lfe48-OpponentHandleChooseMove
	.align	2, 0
	.type	 OpponentHandleChooseItem,function
	.thumb_func
OpponentHandleChooseItem:
	push	{lr}
	ldr	r0, .L678
	ldrb	r0, [r0]
	lsr	r0, r0, #0x1
	ldr	r1, .L678+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc0
	ldrb	r1, [r0]
	mov	r0, #0x1
	bl	BtlController_EmitOneReturnValue
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L679:
	.align	2, 0
.L678:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe49:
	.size	 OpponentHandleChooseItem,.Lfe49-OpponentHandleChooseItem
	.align	2, 0
	.type	 OpponentHandleChoosePokemon,function
	.thumb_func
OpponentHandleChoosePokemon:
	push	{r4, r5, r6, lr}
	ldr	r6, .L692
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r5, .L692+0x4
	ldr	r1, [r5]
	add	r0, r0, r1
	add	r0, r0, #0x92
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bne	.L681	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bne	.L691	@cond_branch
	ldr	r0, .L692+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L683	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	b	.L684
.L693:
	.align	2, 0
.L692:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleTypeFlags
.L683:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L684:
	mov	r4, #0x0
	b	.L685
.L687:
	add	r4, r4, #0x1
.L685:
	cmp	r4, #0x5
	bgt	.L691	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L694
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L687	@cond_branch
	ldr	r1, .L694+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L687	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L687	@cond_branch
	b	.L691
.L695:
	.align	2, 0
.L694:
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L681:
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, [r5]
	add	r0, r0, r1
	add	r0, r0, #0x92
	ldrb	r4, [r0]
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, [r5]
	add	r0, r0, r1
	add	r0, r0, #0x92
	mov	r1, #0x6
	strb	r1, [r0]
.L691:
	ldr	r0, .L696
	ldrb	r0, [r0]
	ldr	r1, .L696+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	strb	r4, [r0]
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitChosenMonReturnValue
	bl	OpponentBufferExecCompleted
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L697:
	.align	2, 0
.L696:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe50:
	.size	 OpponentHandleChoosePokemon,.Lfe50-OpponentHandleChoosePokemon
	.align	2, 0
	.type	 OpponentHandleCmd23,function
	.thumb_func
OpponentHandleCmd23:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 OpponentHandleCmd23,.Lfe51-OpponentHandleCmd23
	.align	2, 0
	.type	 OpponentHandleHealthBarUpdate,function
	.thumb_func
OpponentHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r3, .L702
	ldr	r0, .L702+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r2, r4, #0x9
	add	r0, r3, #0x3
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r1, r1, #0x8
	add	r3, r3, #0x2
	add	r2, r2, r3
	ldrb	r0, [r2]
	orr	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r7, r0, #0x10
	ldr	r0, .L702+0x8
	cmp	r7, r0
	beq	.L700	@cond_branch
	ldr	r6, .L702+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L702+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L702+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L701
.L703:
	.align	2, 0
.L702:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
.L700:
	ldr	r1, .L704
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L704+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L704+0x8
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
.L701:
	ldr	r1, .L704+0xc
	ldr	r0, .L704+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L704+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L705:
	.align	2, 0
.L704:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe52:
	.size	 OpponentHandleHealthBarUpdate,.Lfe52-OpponentHandleHealthBarUpdate
	.align	2, 0
	.type	 OpponentHandleExpUpdate,function
	.thumb_func
OpponentHandleExpUpdate:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 OpponentHandleExpUpdate,.Lfe53-OpponentHandleExpUpdate
	.align	2, 0
	.type	 OpponentHandleStatusIconUpdate,function
	.thumb_func
OpponentHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L709
	ldrb	r0, [r4]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L708	@cond_branch
	ldr	r0, .L709+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L709+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L709+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	UpdateHealthboxAttribute
	ldrb	r2, [r4]
	ldr	r0, .L709+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L709+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L709+0x18
	str	r1, [r0]
.L708:
	pop	{r4}
	pop	{r0}
	bx	r0
.L710:
	.align	2, 0
.L709:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe54:
	.size	 OpponentHandleStatusIconUpdate,.Lfe54-OpponentHandleStatusIconUpdate
	.align	2, 0
	.type	 OpponentHandleStatusAnimation,function
	.thumb_func
OpponentHandleStatusAnimation:
	push	{r4, r5, lr}
	ldr	r5, .L713
	ldrb	r0, [r5]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L712	@cond_branch
	ldr	r4, .L713+0x4
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r0, r4, #0x1
	add	r0, r3, r0
	ldrb	r0, [r0]
	add	r1, r4, #0x2
	add	r1, r3, r1
	ldrb	r1, [r1]
	add	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	add	r2, r4, #0x4
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	add	r4, r4, #0x5
	add	r3, r3, r4
	ldrb	r2, [r3]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	InitAndLaunchChosenStatusAnimation
	ldr	r1, .L713+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L713+0xc
	str	r1, [r0]
.L712:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L714:
	.align	2, 0
.L713:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe55:
	.size	 OpponentHandleStatusAnimation,.Lfe55-OpponentHandleStatusAnimation
	.align	2, 0
	.type	 OpponentHandleStatusXor,function
	.thumb_func
OpponentHandleStatusXor:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 OpponentHandleStatusXor,.Lfe56-OpponentHandleStatusXor
	.align	2, 0
	.type	 OpponentHandleDataTransfer,function
	.thumb_func
OpponentHandleDataTransfer:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 OpponentHandleDataTransfer,.Lfe57-OpponentHandleDataTransfer
	.align	2, 0
	.type	 OpponentHandleDMA3Transfer,function
	.thumb_func
OpponentHandleDMA3Transfer:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 OpponentHandleDMA3Transfer,.Lfe58-OpponentHandleDMA3Transfer
	.align	2, 0
	.type	 OpponentHandlePlayBGM,function
	.thumb_func
OpponentHandlePlayBGM:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 OpponentHandlePlayBGM,.Lfe59-OpponentHandlePlayBGM
	.align	2, 0
	.type	 OpponentHandleCmd32,function
	.thumb_func
OpponentHandleCmd32:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 OpponentHandleCmd32,.Lfe60-OpponentHandleCmd32
	.align	2, 0
	.type	 OpponentHandleTwoReturnValues,function
	.thumb_func
OpponentHandleTwoReturnValues:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 OpponentHandleTwoReturnValues,.Lfe61-OpponentHandleTwoReturnValues
	.align	2, 0
	.type	 OpponentHandleChosenMonReturnValue,function
	.thumb_func
OpponentHandleChosenMonReturnValue:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 OpponentHandleChosenMonReturnValue,.Lfe62-OpponentHandleChosenMonReturnValue
	.align	2, 0
	.type	 OpponentHandleOneReturnValue,function
	.thumb_func
OpponentHandleOneReturnValue:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 OpponentHandleOneReturnValue,.Lfe63-OpponentHandleOneReturnValue
	.align	2, 0
	.type	 OpponentHandleOneReturnValue_Duplicate,function
	.thumb_func
OpponentHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 OpponentHandleOneReturnValue_Duplicate,.Lfe64-OpponentHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 OpponentHandleCmd37,function
	.thumb_func
OpponentHandleCmd37:
	push	{lr}
	ldr	r2, .L725
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L726:
	.align	2, 0
.L725:
	.word	gUnusedControllerStruct
.Lfe65:
	.size	 OpponentHandleCmd37,.Lfe65-OpponentHandleCmd37
	.align	2, 0
	.type	 OpponentHandleCmd38,function
	.thumb_func
OpponentHandleCmd38:
	push	{lr}
	ldr	r3, .L728
	ldr	r1, .L728+0x4
	ldr	r0, .L728+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L729:
	.align	2, 0
.L728:
	.word	gUnusedControllerStruct
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe66:
	.size	 OpponentHandleCmd38,.Lfe66-OpponentHandleCmd38
	.align	2, 0
	.type	 OpponentHandleCmd39,function
	.thumb_func
OpponentHandleCmd39:
	push	{lr}
	ldr	r2, .L731
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L732:
	.align	2, 0
.L731:
	.word	gUnusedControllerStruct
.Lfe67:
	.size	 OpponentHandleCmd39,.Lfe67-OpponentHandleCmd39
	.align	2, 0
	.type	 OpponentHandleCmd40,function
	.thumb_func
OpponentHandleCmd40:
	push	{lr}
	ldr	r3, .L734
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L735:
	.align	2, 0
.L734:
	.word	gUnusedControllerStruct
.Lfe68:
	.size	 OpponentHandleCmd40,.Lfe68-OpponentHandleCmd40
	.align	2, 0
	.type	 OpponentHandleHitAnimation,function
	.thumb_func
OpponentHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L739
	ldr	r2, .L739+0x4
	ldr	r4, .L739+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L737	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L738
.L740:
	.align	2, 0
.L739:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L737:
	ldr	r1, .L741
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L741+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L741+0x8
	str	r1, [r0]
.L738:
	pop	{r4}
	pop	{r0}
	bx	r0
.L742:
	.align	2, 0
.L741:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe69:
	.size	 OpponentHandleHitAnimation,.Lfe69-OpponentHandleHitAnimation
	.align	2, 0
	.type	 OpponentHandleCmd42,function
	.thumb_func
OpponentHandleCmd42:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 OpponentHandleCmd42,.Lfe70-OpponentHandleCmd42
	.align	2, 0
	.type	 OpponentHandlePlaySE,function
	.thumb_func
OpponentHandlePlaySE:
	push	{r4, lr}
	ldr	r4, .L747
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L745	@cond_branch
	mov	r3, #0xc0
.L745:
	ldr	r2, .L747+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	OpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	gActiveBattler
	.word	gBattleBufferA
.Lfe71:
	.size	 OpponentHandlePlaySE,.Lfe71-OpponentHandlePlaySE
	.align	2, 0
	.type	 OpponentHandlePlayFanfare,function
	.thumb_func
OpponentHandlePlayFanfare:
	push	{lr}
	ldr	r2, .L750
	ldr	r0, .L750+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L751:
	.align	2, 0
.L750:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe72:
	.size	 OpponentHandlePlayFanfare,.Lfe72-OpponentHandlePlayFanfare
	.align	2, 0
	.type	 OpponentHandleFaintingCry,function
	.thumb_func
OpponentHandleFaintingCry:
	push	{lr}
	ldr	r1, .L753
	ldr	r0, .L753+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L753+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	mov	r2, #0x5
	bl	PlayCry_ByMode
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L754:
	.align	2, 0
.L753:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gEnemyParty
.Lfe73:
	.size	 OpponentHandleFaintingCry,.Lfe73-OpponentHandleFaintingCry
	.align	2, 0
	.type	 OpponentHandleIntroSlide,function
	.thumb_func
OpponentHandleIntroSlide:
	push	{lr}
	ldr	r1, .L756
	ldr	r0, .L756+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	HandleIntroSlide
	ldr	r2, .L756+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L757:
	.align	2, 0
.L756:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe74:
	.size	 OpponentHandleIntroSlide,.Lfe74-OpponentHandleIntroSlide
	.align	2, 0
	.type	 OpponentHandleIntroTrainerBallThrow,function
	.thumb_func
OpponentHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, lr}
	ldr	r5, .L760
	ldr	r6, .L760+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L760+0x8
	add	r0, r0, r4
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L760+0xc
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L760+0x10
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L760+0x14
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L760+0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r6]
	strh	r0, [r1, #0x8]
	ldr	r3, .L760+0x1c
	ldr	r0, [r3]
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L759	@cond_branch
	ldr	r0, .L760+0x20
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L760+0x24
	str	r1, [r0]
.L759:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L760+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L760+0x2c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L761:
	.align	2, 0
.L760:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	StartAnimLinearTranslation
	.word	SpriteCB_FreeOpponentSprite
	.word	Task_StartSendOutAnim
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	OpponentDummy
.Lfe75:
	.size	 OpponentHandleIntroTrainerBallThrow,.Lfe75-OpponentHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 SpriteCB_FreeOpponentSprite,function
	.thumb_func
SpriteCB_FreeOpponentSprite:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x6]
	bl	FreeTrainerFrontPicPaletteAndTile
	ldrh	r0, [r4, #0x38]
	ldr	r1, .L763
	and	r1, r1, r0
	ldrh	r2, [r4, #0x4]
	ldr	r0, .L763+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L764:
	.align	2, 0
.L763:
	.word	0x3ff
	.word	-0x400
.Lfe76:
	.size	 SpriteCB_FreeOpponentSprite,.Lfe76-SpriteCB_FreeOpponentSprite
	.align	2, 0
	.type	 Task_StartSendOutAnim,function
	.thumb_func
Task_StartSendOutAnim:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r7, .L769
	ldrb	r0, [r7]
	mov	r9, r0
	ldr	r1, .L769+0x4
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L767	@cond_branch
	ldr	r0, .L769+0x8
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L766	@cond_branch
.L767:
	ldr	r0, .L769+0xc
	ldrb	r1, [r7]
	lsl	r2, r1, #0x9
	add	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L769+0x10
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	StartSendOutAnim
	b	.L768
.L770:
	.align	2, 0
.L769:
	.word	gActiveBattler
	.word	gTasks
	.word	gBattleTypeFlags
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
.L766:
	ldr	r4, .L771
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r4, r4, #0x1
	add	r1, r1, r4
	ldr	r6, .L771+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	StartSendOutAnim
	ldrb	r0, [r7]
	mov	r5, #0x2
	eor	r0, r0, r5
	strb	r0, [r7]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r1, r1, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	StartSendOutAnim
	ldrb	r0, [r7]
	eor	r0, r0, r5
	strb	r0, [r7]
.L768:
	ldr	r1, .L771+0x8
	ldr	r2, .L771+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L771+0x10
	str	r1, [r0]
	mov	r0, r9
	strb	r0, [r2]
	mov	r0, r8
	bl	DestroyTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L772:
	.align	2, 0
.L771:
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	Intro_TryShinyAnimShowHealthbox
.Lfe77:
	.size	 Task_StartSendOutAnim,.Lfe77-Task_StartSendOutAnim
	.align	2, 0
	.type	 OpponentHandleDrawPartyStatusSummary,function
	.thumb_func
OpponentHandleDrawPartyStatusSummary:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L780
	ldr	r0, .L780+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L774	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L774	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L773
.L781:
	.align	2, 0
.L780:
	.word	gBattleBufferA
	.word	gActiveBattler
.L774:
	ldr	r4, .L782
	ldr	r0, [r4]
	ldr	r3, .L782+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L782+0x8
	ldrb	r2, [r3]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L776	@cond_branch
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r2, [r3, #0x1]
	lsl	r1, r2, #0x1a
	lsr	r0, r1, #0x1b
	cmp	r0, #0x1
	bhi	.L777	@cond_branch
	add	r0, r0, #0x1
	mov	r1, #0x1f
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	b	.L773
.L783:
	.align	2, 0
.L782:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleBufferA
.L777:
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r3, #0x1]
.L776:
	add	r5, r7, #0
	ldrb	r0, [r5]
	lsl	r3, r0, #0x9
	ldr	r4, .L784
	add	r1, r3, r4
	sub	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	sub	r4, r4, #0x2
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L784+0x4
	ldrb	r1, [r5]
	add	r1, r1, r2
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r6, .L784+0x8
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x5]
	ldrb	r2, [r5]
	lsl	r0, r2, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L779	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L779:
	ldr	r0, .L784+0xc
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L784+0x10
	str	r0, [r1]
.L773:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L785:
	.align	2, 0
.L784:
	.word	gBattleBufferA+0x4
	.word	gBattlerStatusSummaryTaskId
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	EndDrawPartyStatusSummary
.Lfe78:
	.size	 OpponentHandleDrawPartyStatusSummary,.Lfe78-OpponentHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 EndDrawPartyStatusSummary,function
	.thumb_func
EndDrawPartyStatusSummary:
	push	{r4, lr}
	ldr	r4, .L788
	ldr	r0, [r4]
	ldr	r3, .L788+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L787	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	bl	OpponentBufferExecCompleted
.L787:
	pop	{r4}
	pop	{r0}
	bx	r0
.L789:
	.align	2, 0
.L788:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe79:
	.size	 EndDrawPartyStatusSummary,.Lfe79-EndDrawPartyStatusSummary
	.align	2, 0
	.type	 OpponentHandleHidePartyStatusSummary,function
	.thumb_func
OpponentHandleHidePartyStatusSummary:
	push	{lr}
	ldr	r0, .L792
	ldr	r1, [r0]
	ldr	r0, .L792+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L791	@cond_branch
	ldr	r2, .L792+0x8
	ldr	r0, .L792+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L792+0x10
	str	r1, [r0]
.L791:
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L793:
	.align	2, 0
.L792:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gTasks
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
.Lfe80:
	.size	 OpponentHandleHidePartyStatusSummary,.Lfe80-OpponentHandleHidePartyStatusSummary
	.align	2, 0
	.type	 OpponentHandleEndBounceEffect,function
	.thumb_func
OpponentHandleEndBounceEffect:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 OpponentHandleEndBounceEffect,.Lfe81-OpponentHandleEndBounceEffect
	.align	2, 0
	.type	 OpponentHandleSpriteInvisibility,function
	.thumb_func
OpponentHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L797
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L796	@cond_branch
	ldr	r3, .L797+0x4
	ldr	r0, .L797+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L797+0xc
	lsl	r1, r1, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	add	r2, r2, #0x3e
	mov	r0, #0x1
	ldrb	r1, [r1]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	CopyBattleSpriteInvisibility
.L796:
	bl	OpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L798:
	.align	2, 0
.L797:
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleBufferA
.Lfe82:
	.size	 OpponentHandleSpriteInvisibility,.Lfe82-OpponentHandleSpriteInvisibility
	.align	2, 0
	.type	 OpponentHandleBattleAnimation,function
	.thumb_func
OpponentHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L803
	ldrb	r0, [r6]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L800	@cond_branch
	ldr	r5, .L803+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r5, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r5, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L801	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L800
.L804:
	.align	2, 0
.L803:
	.word	gActiveBattler
	.word	gBattleBufferA
.L801:
	ldr	r0, .L805
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L805+0x4
	str	r0, [r1]
.L800:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L806:
	.align	2, 0
.L805:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe83:
	.size	 OpponentHandleBattleAnimation,.Lfe83-OpponentHandleBattleAnimation
	.align	2, 0
	.type	 OpponentHandleLinkStandbyMsg,function
	.thumb_func
OpponentHandleLinkStandbyMsg:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 OpponentHandleLinkStandbyMsg,.Lfe84-OpponentHandleLinkStandbyMsg
	.align	2, 0
	.type	 OpponentHandleResetActionMoveSelection,function
	.thumb_func
OpponentHandleResetActionMoveSelection:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 OpponentHandleResetActionMoveSelection,.Lfe85-OpponentHandleResetActionMoveSelection
	.align	2, 0
	.type	 OpponentHandleCmd55,function
	.thumb_func
OpponentHandleCmd55:
	push	{lr}
	ldr	r0, .L811
	ldr	r0, [r0]
	mov	r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L810	@cond_branch
	ldr	r2, .L811+0x4
	ldr	r0, .L811+0x8
	add	r3, r2, r0
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L811+0xc
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, [r2, #0x8]
	bl	SetMainCallback2
.L810:
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L812:
	.align	2, 0
.L811:
	.word	gBattleTypeFlags
	.word	gMain
	.word	0x439
	.word	gPreBattleCallback1
.Lfe86:
	.size	 OpponentHandleCmd55,.Lfe86-OpponentHandleCmd55
	.align	2, 0
	.type	 OpponentCmdEnd,function
	.thumb_func
OpponentCmdEnd:
	bx	lr
.Lfe87:
	.size	 OpponentCmdEnd,.Lfe87-OpponentCmdEnd
.text
	.align	2, 0 @ Don't pad with nop

