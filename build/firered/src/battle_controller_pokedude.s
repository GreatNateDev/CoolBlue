@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sPokedudeBufferCommands,object
	.size	 sPokedudeBufferCommands,228
sPokedudeBufferCommands:
	.word	PokedudeHandleGetMonData
	.word	PokedudeHandleGetRawMonData
	.word	PokedudeHandleSetMonData
	.word	PokedudeHandleSetRawMonData
	.word	PokedudeHandleLoadMonSprite
	.word	PokedudeHandleSwitchInAnim
	.word	PokedudeHandleReturnMonToBall
	.word	PokedudeHandleDrawTrainerPic
	.word	PokedudeHandleTrainerSlide
	.word	PokedudeHandleTrainerSlideBack
	.word	PokedudeHandleFaintAnimation
	.word	PokedudeHandlePaletteFade
	.word	PokedudeHandleSuccessBallThrowAnim
	.word	PokedudeHandleBallThrowAnim
	.word	PokedudeHandlePause
	.word	PokedudeHandleMoveAnimation
	.word	PokedudeHandlePrintString
	.word	PokedudeHandlePrintSelectionString
	.word	PokedudeHandleChooseAction
	.word	PokedudeHandleUnknownYesNoBox
	.word	PokedudeHandleChooseMove
	.word	PokedudeHandleChooseItem
	.word	PokedudeHandleChoosePokemon
	.word	PokedudeHandleCmd23
	.word	PokedudeHandleHealthBarUpdate
	.word	PokedudeHandleExpUpdate
	.word	PokedudeHandleStatusIconUpdate
	.word	PokedudeHandleStatusAnimation
	.word	PokedudeHandleStatusXor
	.word	PokedudeHandleDataTransfer
	.word	PokedudeHandleDMA3Transfer
	.word	PokedudeHandlePlayBGM
	.word	PokedudeHandleCmd32
	.word	PokedudeHandleTwoReturnValues
	.word	PokedudeHandleChosenMonReturnValue
	.word	PokedudeHandleOneReturnValue
	.word	PokedudeHandleOneReturnValue_Duplicate
	.word	PokedudeHandleCmd37
	.word	PokedudeHandleCmd38
	.word	PokedudeHandleCmd39
	.word	PokedudeHandleCmd40
	.word	PokedudeHandleHitAnimation
	.word	PokedudeHandleCmd42
	.word	PokedudeHandlePlaySE
	.word	PokedudeHandlePlayFanfare
	.word	PokedudeHandleFaintingCry
	.word	PokedudeHandleIntroSlide
	.word	PokedudeHandleIntroTrainerBallThrow
	.word	PokedudeHandleDrawPartyStatusSummary
	.word	PokedudeHandleHidePartyStatusSummary
	.word	PokedudeHandleEndBounceEffect
	.word	PokedudeHandleSpriteInvisibility
	.word	PokedudeHandleBattleAnimation
	.word	PokedudeHandleLinkStandbyMsg
	.word	PokedudeHandleResetActionMoveSelection
	.word	PokedudeHandleCmd55
	.word	PokedudeCmdEnd
	.type	 sUnused,object
sUnused:
	.byte	0x48
	.byte	0x48
	.byte	0x20
	.byte	0x5a
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x58
	.size	 sUnused,8
.text
	.align	2, 0
	.type	 PokedudeDummy,function
	.thumb_func
PokedudeDummy:
	bx	lr
.Lfe1:
	.size	 PokedudeDummy,.Lfe1-PokedudeDummy
	.align	2, 0
	.globl	SetControllerToPokedude
	.type	 SetControllerToPokedude,function
	.thumb_func
SetControllerToPokedude:
	ldr	r1, .L6
	ldr	r0, .L6+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L6+0x8
	str	r1, [r0]
	ldr	r2, .L6+0xc
	ldr	r0, [r2]
	add	r0, r0, #0x96
	ldr	r1, .L6+0x10
	ldrh	r1, [r1]
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0x97
	mov	r1, #0x0
	strb	r1, [r0]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PokedudeBufferRunCommand
	.word	gBattleStruct
	.word	gSpecialVar_0x8004
.Lfe2:
	.size	 SetControllerToPokedude,.Lfe2-SetControllerToPokedude
	.align	2, 0
	.type	 PokedudeBufferRunCommand,function
	.thumb_func
PokedudeBufferRunCommand:
	push	{r4, r5, lr}
	ldr	r2, .L13
	ldr	r1, .L13+0x4
	ldr	r5, .L13+0x8
	ldrb	r3, [r5]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L9	@cond_branch
	ldr	r4, .L13+0xc
	lsl	r0, r3, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x38
	bhi	.L10	@cond_branch
	bl	HandlePokedudeVoiceoverEtc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L9	@cond_branch
	ldr	r1, .L13+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	b	.L9
.L14:
	.align	2, 0
.L13:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	sPokedudeBufferCommands
.L10:
	bl	PokedudeBufferExecCompleted
.L9:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 PokedudeBufferRunCommand,.Lfe3-PokedudeBufferRunCommand
	.align	2, 0
	.type	 HandleInputChooseAction,function
	.thumb_func
HandleInputChooseAction:
	push	{lr}
	bl	PokedudeSimulateInputChooseAction
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 HandleInputChooseAction,.Lfe4-HandleInputChooseAction
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L18
	ldr	r1, .L18+0x4
	ldr	r0, .L18+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L18+0xc
	cmp	r1, r0
	bne	.L17	@cond_branch
	bl	PokedudeBufferExecCompleted
.L17:
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe5-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 CompleteOnBattlerSpritePosX_0,function
	.thumb_func
CompleteOnBattlerSpritePosX_0:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L25
	ldr	r0, .L25+0x4
	ldr	r7, .L25+0x8
	ldrb	r3, [r7]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r2, r0, #0x1f
	cmp	r2, #0x1
	bne	.L21	@cond_branch
	mov	r4, #0x24
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bne	.L21	@cond_branch
	ldr	r6, .L25+0xc
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r4, r3, #0x1
	add	r0, r4, r3
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r5, [r1]
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L22	@cond_branch
	ldr	r0, .L25+0x10
	add	r0, r4, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L25+0x14
	add	r1, r1, r0
	add	r0, r3, #0
	bl	TryShinyAnimation
	b	.L21
.L26:
	.align	2, 0
.L25:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L22:
	ldrb	r0, [r1, #0x1]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L21	@cond_branch
	mov	r0, #0x7f
	and	r0, r0, r5
	strb	r0, [r1]
	ldr	r0, [r6]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L27
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	bl	PokedudeBufferExecCompleted
.L21:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	0x27f9
.Lfe6:
	.size	 CompleteOnBattlerSpritePosX_0,.Lfe6-CompleteOnBattlerSpritePosX_0
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L30	@cond_branch
	bl	PokedudeBufferExecCompleted
.L30:
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 CompleteOnInactiveTextPrinter,.Lfe7-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 Pokedude_SetBattleEndCallbacks,function
	.thumb_func
Pokedude_SetBattleEndCallbacks:
	push	{lr}
	ldr	r0, .L33
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L32	@cond_branch
	ldr	r2, .L33+0x4
	ldr	r0, .L33+0x8
	add	r3, r2, r0
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L33+0xc
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, [r2, #0x8]
	bl	SetMainCallback2
.L32:
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gPaletteFade
	.word	gMain
	.word	0x439
	.word	gPreBattleCallback1
.Lfe8:
	.size	 Pokedude_SetBattleEndCallbacks,.Lfe8-Pokedude_SetBattleEndCallbacks
	.align	2, 0
	.type	 SwitchIn_HandleSoundAndEnd,function
	.thumb_func
SwitchIn_HandleSoundAndEnd:
	push	{r4, lr}
	ldr	r0, .L37
	ldr	r0, [r0]
	ldr	r4, .L37+0x4
	ldrb	r1, [r4]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L36	@cond_branch
	ldr	r0, .L37+0x8
	mov	r1, #0xa
	bl	CreateTask
	ldr	r2, .L37+0xc
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L37+0x10
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	bl	PokedudeBufferExecCompleted
.L36:
	pop	{r4}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	Task_PlayerController_RestoreBgmAfterCry
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe9:
	.size	 SwitchIn_HandleSoundAndEnd,.Lfe9-SwitchIn_HandleSoundAndEnd
	.align	2, 0
	.type	 SwitchIn_CleanShinyAnimShowSubstitute,function
	.thumb_func
SwitchIn_CleanShinyAnimShowSubstitute:
	push	{r4, r5, r6, lr}
	ldr	r2, .L42
	ldr	r0, .L42+0x4
	ldr	r6, .L42+0x8
	ldrb	r3, [r6]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L42+0xc
	cmp	r1, r0
	bne	.L40	@cond_branch
	ldr	r5, .L42+0x10
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldrb	r2, [r6]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L42+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, [r5]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L41	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L41:
	ldr	r0, .L42+0x18
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L42+0x1c
	str	r0, [r1]
.L40:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	0x27f9
	.word	gBattlerControllerFuncs
	.word	SwitchIn_HandleSoundAndEnd
.Lfe10:
	.size	 SwitchIn_CleanShinyAnimShowSubstitute,.Lfe10-SwitchIn_CleanShinyAnimShowSubstitute
	.align	2, 0
	.type	 SwitchIn_TryShinyAnimShowHealthbox,function
	.thumb_func
SwitchIn_TryShinyAnimShowHealthbox:
	push	{r4, r5, r6, lr}
	ldr	r6, .L47
	ldr	r0, [r6]
	ldr	r5, .L47+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L45	@cond_branch
	ldr	r0, .L47+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L47+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L45:
	ldr	r4, .L47+0x10
	ldr	r0, .L47+0x14
	ldrb	r2, [r5]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L47+0x18
	cmp	r1, r0
	bne	.L46	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L46	@cond_branch
	add	r0, r3, r4
	bl	DestroySprite
	ldr	r4, .L47+0x1c
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L47+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L47+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	bl	StartHealthboxSlideIn
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldrb	r0, [r5]
	bl	CopyBattleSpriteInvisibility
	ldr	r1, .L47+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L47+0x24
	str	r1, [r0]
.L46:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gBattleControllerData
	.word	SpriteCallbackDummy
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	SwitchIn_CleanShinyAnimShowSubstitute
.Lfe11:
	.size	 SwitchIn_TryShinyAnimShowHealthbox,.Lfe11-SwitchIn_TryShinyAnimShowHealthbox
	.align	2, 0
	.type	 CompleteOnSpecialAnimDone,function
	.thumb_func
CompleteOnSpecialAnimDone:
	push	{lr}
	ldr	r0, .L51
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L50	@cond_branch
	bl	PokedudeBufferExecCompleted
.L50:
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gDoingBattleAnim
.Lfe12:
	.size	 CompleteOnSpecialAnimDone,.Lfe12-CompleteOnSpecialAnimDone
	.align	2, 0
	.type	 Intro_DelayAndEnd,function
	.thumb_func
Intro_DelayAndEnd:
	push	{r4, lr}
	ldr	r4, .L55
	ldr	r1, [r4]
	ldr	r3, .L55+0x4
	ldrb	r0, [r3]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L54	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	bl	PokedudeBufferExecCompleted
.L54:
	pop	{r4}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe13:
	.size	 Intro_DelayAndEnd,.Lfe13-Intro_DelayAndEnd
	.align	2, 0
	.type	 PokedudeHandleInputChooseMove,function
	.thumb_func
PokedudeHandleInputChooseMove:
	push	{lr}
	bl	PokedudeSimulateInputChooseMove
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 PokedudeHandleInputChooseMove,.Lfe14-PokedudeHandleInputChooseMove
	.align	2, 0
	.type	 OpenPartyMenuToChooseMon,function
	.thumb_func
OpenPartyMenuToChooseMon:
	push	{lr}
	ldr	r0, .L60
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L59	@cond_branch
	ldr	r1, .L60+0x4
	ldr	r2, .L60+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L60+0xc
	str	r1, [r0]
	ldr	r1, .L60+0x10
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	DestroyTask
	bl	FreeAllWindowBuffers
	bl	Pokedude_OpenPartyMenuInBattle
.L59:
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gPaletteFade
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	WaitForMonSelection
	.word	gBattleControllerData
.Lfe15:
	.size	 OpenPartyMenuToChooseMon,.Lfe15-OpenPartyMenuToChooseMon
	.align	2, 0
	.type	 WaitForMonSelection,function
	.thumb_func
WaitForMonSelection:
	push	{lr}
	ldr	r0, .L66
	ldr	r1, [r0, #0x4]
	ldr	r0, .L66+0x4
	cmp	r1, r0
	bne	.L63	@cond_branch
	ldr	r0, .L66+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L63	@cond_branch
	ldr	r0, .L66+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L64	@cond_branch
	ldr	r0, .L66+0x10
	ldrb	r1, [r0]
	ldr	r2, .L66+0x14
	mov	r0, #0x1
	bl	BtlController_EmitChosenMonReturnValue
	b	.L65
.L67:
	.align	2, 0
.L66:
	.word	gMain
	.word	BattleMainCB2
	.word	gPaletteFade
	.word	gPartyMenuUseExitCallback
	.word	gSelectedMonPartyId
	.word	gBattlePartyCurrentOrder
.L64:
	mov	r0, #0x1
	mov	r1, #0x6
	mov	r2, #0x0
	bl	BtlController_EmitChosenMonReturnValue
.L65:
	bl	PokedudeBufferExecCompleted
.L63:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 WaitForMonSelection,.Lfe16-WaitForMonSelection
	.align	2, 0
	.type	 OpenBagAndChooseItem,function
	.thumb_func
OpenBagAndChooseItem:
	push	{lr}
	ldr	r0, .L75
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r1, .L75+0x4
	ldr	r0, .L75+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L75+0xc
	str	r1, [r0]
	bl	ReshowBattleScreenDummy
	bl	FreeAllWindowBuffers
	ldr	r0, .L75+0x10
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L72	@cond_branch
	cmp	r0, #0x3
	beq	.L73	@cond_branch
.L72:
	mov	r0, #0x7
	b	.L70
.L76:
	.align	2, 0
.L75:
	.word	gPaletteFade
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteWhenChoseItem
	.word	gSpecialVar_0x8004
.L73:
	mov	r0, #0x8
.L70:
	bl	InitPokedudeBag
.L69:
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 OpenBagAndChooseItem,.Lfe17-OpenBagAndChooseItem
	.align	2, 0
	.type	 CompleteWhenChoseItem,function
	.thumb_func
CompleteWhenChoseItem:
	push	{lr}
	ldr	r0, .L79
	ldr	r1, [r0, #0x4]
	ldr	r0, .L79+0x4
	cmp	r1, r0
	bne	.L78	@cond_branch
	ldr	r0, .L79+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L78	@cond_branch
	ldr	r0, .L79+0xc
	ldrh	r1, [r0]
	mov	r0, #0x1
	bl	BtlController_EmitOneReturnValue
	bl	PokedudeBufferExecCompleted
.L78:
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gMain
	.word	BattleMainCB2
	.word	gPaletteFade
	.word	gSpecialVar_ItemId
.Lfe18:
	.size	 CompleteWhenChoseItem,.Lfe18-CompleteWhenChoseItem
	.align	2, 0
	.type	 Intro_TryShinyAnimShowHealthbox,function
	.thumb_func
Intro_TryShinyAnimShowHealthbox:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L86
	ldr	r0, [r4]
	ldr	r5, .L86+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r7, #0x88
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L82	@cond_branch
	ldr	r0, .L86+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L86+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L82:
	ldr	r1, [r4]
	ldrb	r0, [r5]
	mov	r6, #0x2
	add	r2, r6, #0
	eor	r2, r2, r0
	ldr	r1, [r1, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L83	@cond_branch
	ldr	r0, .L86+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L86+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L83:
	ldr	r0, [r4]
	ldrb	r2, [r5]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	mov	r4, #0x8
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L84	@cond_branch
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L84	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L85	@cond_branch
	ldr	r0, .L86+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L85	@cond_branch
	ldr	r1, .L86+0x14
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L86+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L86+0x1c
	ldrb	r0, [r5]
	add	r1, r6, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L86+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L86+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	eor	r0, r0, r6
	bl	StartHealthboxSlideIn
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L85:
	ldr	r1, .L86+0x14
	ldr	r4, .L86+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L86+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r5, .L86+0x1c
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L86+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L86+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	bl	StartHealthboxSlideIn
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldr	r0, .L86
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L86+0x20
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L86+0x24
	str	r1, [r0]
.L84:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L87:
	.align	2, 0
.L86:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattleControllerData
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	Intro_WaitForShinyAnimAndHealthbox
.Lfe19:
	.size	 Intro_TryShinyAnimShowHealthbox,.Lfe19-Intro_TryShinyAnimShowHealthbox
	.align	2, 0
	.type	 Intro_WaitForShinyAnimAndHealthbox,function
	.thumb_func
Intro_WaitForShinyAnimAndHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r4, #0x0
	ldr	r2, .L91
	ldr	r0, .L91+0x4
	ldr	r1, .L91+0x8
	mov	r8, r1
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L91+0xc
	cmp	r1, r0
	bne	.L89	@cond_branch
	mov	r4, #0x1
.L89:
	cmp	r4, #0
	beq	.L90	@cond_branch
	ldr	r7, .L91+0x10
	ldr	r0, [r7]
	ldr	r4, [r0, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r4
	ldrb	r1, [r2, #0x1]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L90	@cond_branch
	mov	r6, #0x2
	add	r1, r6, #0
	eor	r1, r1, r3
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L90	@cond_branch
	ldrb	r1, [r2]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r7]
	mov	r1, r8
	ldrb	r2, [r1]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r2, [r7]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	ldr	r2, [r7]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L91+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, .L91+0x18
	mov	r1, #0xa
	bl	CreateTask
	ldr	r2, .L91+0x1c
	mov	r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L91+0x20
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	ldr	r1, .L91+0x24
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L91+0x28
	str	r1, [r0]
.L90:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	0x27f9
	.word	Task_PlayerController_RestoreBgmAfterCry
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	Intro_DelayAndEnd
.Lfe20:
	.size	 Intro_WaitForShinyAnimAndHealthbox,.Lfe20-Intro_WaitForShinyAnimAndHealthbox
	.align	2, 0
	.type	 Task_GiveExpToMon,function
	.thumb_func
Task_GiveExpToMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L104
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r8, r0
	ldrb	r0, [r0, #0x8]
	mov	sl, r0
	mov	r1, r8
	ldrb	r7, [r1, #0xc]
	str	r7, [sp, #0x8]
	ldrh	r2, [r1, #0xa]
	str	r2, [sp, #0xc]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L95	@cond_branch
	ldr	r1, .L104+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	sl, r0
	bne	.LCB1316
	b	.L94	@long jump
.LCB1316:
.L95:
	mov	r0, #0x64
	mov	r1, sl
	mul	r1, r1, r0
	ldr	r0, .L104+0x8
	add	r6, r1, r0
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x4]
	ldr	r3, .L104+0xc
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	ldr	r2, .L104+0x10
	lsl	r1, r5, #0x3
	sub	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x13]
	mov	r1, #0xca
	lsl	r1, r1, #0x1
	mul	r1, r1, r2
	add	r4, r4, r1
	add	r4, r4, r3
	ldr	r2, [r4]
	str	r2, [sp]
	ldr	r3, [sp, #0xc]
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x10
	add	r0, r0, r1
	cmp	r0, r2
	bcc	.L96	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x19
	mov	r2, sp
	bl	SetMonData
	add	r0, r6, #0
	bl	CalculateMonStats
	ldr	r2, [sp]
	add	r0, sp, #0x4
	ldrh	r0, [r0]
	sub	r2, r2, r0
	ldr	r0, [sp, #0xc]
	sub	r2, r0, r2
	ldr	r4, .L104+0x14
	ldrb	r5, [r4]
	strb	r7, [r4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xb
	bl	BtlController_EmitTwoReturnValues
	strb	r5, [r4]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L97	@cond_branch
	ldr	r2, .L104+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	mov	r1, sl
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.L98	@cond_branch
	mov	r0, #0x2
	eor	r7, r7, r0
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L97	@cond_branch
.L98:
	ldr	r0, .L104+0x18
	b	.L102
.L105:
	.align	2, 0
.L104:
	.word	gTasks
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gSpeciesInfo
	.word	gActiveBattler
	.word	Task_LaunchLvlUpAnim
.L97:
	ldr	r0, .L106
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L106+0x4
	b	.L103
.L107:
	.align	2, 0
.L106:
	.word	gTasks
	.word	DestroyExpTaskAndCompleteOnInactiveTextPrinter
.L96:
	str	r0, [sp, #0x4]
	add	r2, sp, #0x4
	add	r0, r6, #0
	mov	r1, #0x19
	bl	SetMonData
	ldr	r1, .L108
	ldr	r3, [sp, #0x8]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, .L108+0x4
	str	r1, [r0]
	mov	r0, r9
	bl	DestroyTask
	b	.L101
.L109:
	.align	2, 0
.L108:
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter2
.L94:
	ldr	r0, .L110
.L102:
	mov	r1, r8
.L103:
	str	r0, [r1]
.L101:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	Task_PrepareToGiveExpWithExpBar
.Lfe21:
	.size	 Task_GiveExpToMon,.Lfe21-Task_GiveExpToMon
	.align	2, 0
	.type	 Task_PrepareToGiveExpWithExpBar,function
	.thumb_func
Task_PrepareToGiveExpWithExpBar:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L113
	lsl	r2, r0, #0x2
	mov	r8, r2
	add	r8, r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x3
	mov	r8, r0
	add	r8, r8, r1
	mov	r2, r8
	ldrb	r1, [r2, #0x8]
	mov	r0, #0xa
	ldrsh	r2, [r2, r0]
	mov	r9, r2
	mov	r2, r8
	ldrb	r2, [r2, #0xc]
	mov	sl, r2
	mov	r0, #0x64
	mov	r6, r1
	mul	r6, r6, r0
	ldr	r0, .L113+0x4
	add	r6, r6, r0
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	add	r3, r0, #0
	ldr	r6, .L113+0x8
	lsl	r1, r4, #0x2
	ldr	r2, .L113+0xc
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r6
	ldr	r1, [r1]
	sub	r3, r3, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r4, r4, r6
	ldr	r2, [r4]
	sub	r2, r2, r1
	ldr	r0, .L113+0x10
	add	r0, r0, sl
	ldrb	r1, [r0]
	mov	r0, r9
	neg	r0, r0
	str	r0, [sp]
	mov	r0, sl
	bl	SetBattleBarStruct
	mov	r0, #0x1b
	bl	PlaySE
	ldr	r0, .L113+0x14
	mov	r1, r8
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gTasks
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gSpeciesInfo
	.word	gHealthboxSpriteIds
	.word	Task_GiveExpWithExpBar
.Lfe22:
	.size	 Task_PrepareToGiveExpWithExpBar,.Lfe22-Task_PrepareToGiveExpWithExpBar
	.align	2, 0
	.type	 Task_GiveExpWithExpBar,function
	.thumb_func
Task_GiveExpWithExpBar:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L121
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r1, [r6, #0x1c]
	mov	r2, #0x1c
	ldrsh	r0, [r6, r2]
	cmp	r0, #0xc
	bgt	.L116	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r6, #0x1c]
	b	.L117
.L122:
	.align	2, 0
.L121:
	.word	gTasks
.L116:
	ldrb	r0, [r6, #0x8]
	mov	r9, r0
	ldrh	r2, [r6, #0xa]
	mov	sl, r2
	ldrb	r7, [r6, #0xc]
	ldr	r5, .L123
	add	r5, r7, r5
	ldrb	r1, [r5]
	add	r0, r7, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r4, r0
	bne	.L117	@cond_branch
	mov	r0, #0x1b
	bl	m4aSongNumStop
	mov	r0, #0x64
	mov	r1, r9
	mul	r1, r1, r0
	ldr	r0, .L123+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r3, .L123+0x8
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	ldr	r2, .L123+0xc
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r1
	add	r4, r4, r0
	add	r4, r4, r3
	ldr	r1, [r4]
	str	r1, [sp]
	mov	r2, sl
	lsl	r0, r2, #0x10
	asr	r4, r0, #0x10
	ldr	r0, [sp, #0x4]
	add	r0, r0, r4
	cmp	r0, r1
	blt	.L119	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x19
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0
	bl	CalculateMonStats
	ldr	r2, [sp]
	add	r0, sp, #0x4
	ldrh	r0, [r0]
	sub	r2, r2, r0
	sub	r2, r4, r2
	ldr	r4, .L123+0x10
	ldrb	r5, [r4]
	strb	r7, [r4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xb
	bl	BtlController_EmitTwoReturnValues
	strb	r5, [r4]
	ldr	r0, .L123+0x14
	str	r0, [r6]
	b	.L117
.L124:
	.align	2, 0
.L123:
	.word	gHealthboxSpriteIds
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gSpeciesInfo
	.word	gActiveBattler
	.word	Task_LaunchLvlUpAnim
.L119:
	str	r0, [sp, #0x4]
	add	r2, sp, #0x4
	add	r0, r5, #0
	mov	r1, #0x19
	bl	SetMonData
	ldr	r1, .L125
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r1, .L125+0x4
	str	r1, [r0]
	mov	r0, r8
	bl	DestroyTask
.L117:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter2
.Lfe23:
	.size	 Task_GiveExpWithExpBar,.Lfe23-Task_GiveExpWithExpBar
	.align	2, 0
	.type	 Task_LaunchLvlUpAnim,function
	.thumb_func
Task_LaunchLvlUpAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L129
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r4, [r0, #0xc]
	ldrb	r6, [r0, #0x8]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L128	@cond_branch
	ldr	r1, .L129+0x4
	mov	r0, #0x2
	add	r2, r4, #0
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	bne	.L128	@cond_branch
	add	r4, r2, #0
.L128:
	add	r0, r4, #0
	add	r1, r4, #0
	add	r2, r4, #0
	mov	r3, #0x0
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, .L129
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L129+0x8
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	gTasks
	.word	gBattlerPartyIndexes
	.word	Task_UpdateLvlInHealthbox
.Lfe24:
	.size	 Task_LaunchLvlUpAnim,.Lfe24-Task_LaunchLvlUpAnim
	.align	2, 0
	.type	 Task_UpdateLvlInHealthbox,function
	.thumb_func
Task_UpdateLvlInHealthbox:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L135
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrb	r5, [r2, #0xc]
	ldr	r0, .L135+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L132	@cond_branch
	ldrb	r4, [r2, #0x8]
	mov	r0, #0x64
	mov	r1, r4
	mul	r1, r1, r0
	ldr	r0, .L135+0x8
	add	r7, r1, r0
	add	r0, r7, #0
	mov	r1, #0x38
	bl	GetMonData
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L133	@cond_branch
	ldr	r1, .L135+0xc
	mov	r0, #0x2
	add	r2, r5, #0
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L133	@cond_branch
	ldr	r0, .L135+0x10
	add	r0, r2, r0
	ldrb	r0, [r0]
	add	r1, r7, #0
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	b	.L134
.L136:
	.align	2, 0
.L135:
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	gHealthboxSpriteIds
.L133:
	ldr	r0, .L137
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x64
	mul	r1, r1, r4
	ldr	r2, .L137+0x4
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
.L134:
	ldr	r0, .L137+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L137+0xc
	str	r0, [r1]
.L132:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L138:
	.align	2, 0
.L137:
	.word	gHealthboxSpriteIds
	.word	gPlayerParty
	.word	gTasks
	.word	DestroyExpTaskAndCompleteOnInactiveTextPrinter
.Lfe25:
	.size	 Task_UpdateLvlInHealthbox,.Lfe25-Task_UpdateLvlInHealthbox
	.align	2, 0
	.type	 DestroyExpTaskAndCompleteOnInactiveTextPrinter,function
	.thumb_func
DestroyExpTaskAndCompleteOnInactiveTextPrinter:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L140
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrb	r1, [r4, #0x8]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L140+0x4
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	ldrb	r0, [r4, #0xc]
	ldr	r1, .L140+0x8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L140+0xc
	str	r1, [r0]
	add	r0, r5, #0
	bl	DestroyTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L141:
	.align	2, 0
.L140:
	.word	gTasks
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter2
.Lfe26:
	.size	 DestroyExpTaskAndCompleteOnInactiveTextPrinter,.Lfe26-DestroyExpTaskAndCompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 FreeMonSpriteAfterFaintAnim,function
	.thumb_func
FreeMonSpriteAfterFaintAnim:
	push	{r4, r5, r6, lr}
	ldr	r4, .L147
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L143	@cond_branch
	ldr	r6, .L147+0x4
	ldr	r5, .L147+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r6
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	cmp	r0, #0xa0
	ble	.L145	@cond_branch
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	ldr	r1, .L147+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	PokedudeBufferExecCompleted
	b	.L145
.L148:
	.align	2, 0
.L147:
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gHealthboxSpriteIds
.L143:
	ldr	r2, .L149
	ldr	r0, .L149+0x4
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L145	@cond_branch
	ldr	r0, .L149+0x8
	add	r0, r3, r0
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	PokedudeBufferExecCompleted
.L145:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gHealthboxSpriteIds
.Lfe27:
	.size	 FreeMonSpriteAfterFaintAnim,.Lfe27-FreeMonSpriteAfterFaintAnim
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r5, .L154
	ldrb	r0, [r5]
	ldr	r6, .L154+0x4
	add	r1, r0, r6
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L152	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L153
.L155:
	.align	2, 0
.L154:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L152:
	ldr	r2, .L156
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L156+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	bl	PokedudeBufferExecCompleted
.L153:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L157:
	.align	2, 0
.L156:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe28:
	.size	 CompleteOnHealthbarDone,.Lfe28-CompleteOnHealthbarDone
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter2,function
	.thumb_func
CompleteOnInactiveTextPrinter2:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L159	@cond_branch
	bl	PokedudeBufferExecCompleted
.L159:
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 CompleteOnInactiveTextPrinter2,.Lfe29-CompleteOnInactiveTextPrinter2
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L164
	ldr	r0, .L164+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L164+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L161	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L164+0xc
	strb	r3, [r0]
	bl	PokedudeBufferExecCompleted
	b	.L162
.L165:
	.align	2, 0
.L164:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L161:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L163	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L163:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L162:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe30-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r0, .L168
	ldr	r0, [r0]
	ldr	r6, .L168+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L167	@cond_branch
	ldr	r5, .L168+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L168+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L168+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	PokedudeBufferExecCompleted
.L167:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe31:
	.size	 DoSwitchOutAnimation,.Lfe31-DoSwitchOutAnimation
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy2,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy2:
	push	{lr}
	ldr	r2, .L172
	ldr	r1, .L172+0x4
	ldr	r0, .L172+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L172+0xc
	cmp	r1, r0
	bne	.L171	@cond_branch
	bl	PokedudeBufferExecCompleted
.L171:
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe32:
	.size	 CompleteOnBattlerSpriteCallbackDummy2,.Lfe32-CompleteOnBattlerSpriteCallbackDummy2
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L176
	ldr	r2, [r0]
	ldr	r0, .L176+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L175	@cond_branch
	bl	PokedudeBufferExecCompleted
.L175:
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe33:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe33-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L180
	ldr	r2, [r0]
	ldr	r0, .L180+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L179	@cond_branch
	bl	PokedudeBufferExecCompleted
.L179:
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe34:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe34-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 PokedudeBufferExecCompleted,function
	.thumb_func
PokedudeBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L185
	ldr	r4, .L185+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L185+0x8
	str	r1, [r0]
	ldr	r0, .L185+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L183	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r1, .L185+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	mov	r1, #0x38
	strb	r1, [r0]
	b	.L184
.L186:
	.align	2, 0
.L185:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PokedudeBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleBufferA
.L183:
	ldr	r2, .L187
	ldr	r1, .L187+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L184:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe35:
	.size	 PokedudeBufferExecCompleted,.Lfe35-PokedudeBufferExecCompleted
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation2,function
	.thumb_func
CompleteOnFinishedStatusAnimation2:
	push	{lr}
	ldr	r0, .L191
	ldr	r2, [r0]
	ldr	r0, .L191+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L190	@cond_branch
	bl	PokedudeBufferExecCompleted
.L190:
	pop	{r0}
	bx	r0
.L192:
	.align	2, 0
.L191:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe36:
	.size	 CompleteOnFinishedStatusAnimation2,.Lfe36-CompleteOnFinishedStatusAnimation2
	.align	2, 0
	.type	 PokedudeHandleGetMonData,function
	.thumb_func
PokedudeHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r1, .L202
	ldr	r0, .L202+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L194	@cond_branch
	ldr	r0, .L202+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	CopyPokedudeMonData
	add	r6, r0, #0
	b	.L195
.L203:
	.align	2, 0
.L202:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L194:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L199:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L200	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	CopyPokedudeMonData
	add	r6, r6, r0
.L200:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L199	@cond_branch
.L195:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	PokedudeBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 PokedudeHandleGetMonData,.Lfe37-PokedudeHandleGetMonData
	.align	2, 0
	.type	 CopyPokedudeMonData,function
	.thumb_func
CopyPokedudeMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8c
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L296
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L205	@cond_branch
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L296+0x4
	b	.L291
.L297:
	.align	2, 0
.L296:
	.word	gActiveBattler
	.word	gPlayerParty
.L205:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L298
.L291:
	add	r6, r1, r0
	ldr	r3, .L298+0x4
	ldr	r2, .L298+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r1, r3, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bls	.LCB2734
	b	.L207	@long jump
.LCB2734:
	lsl	r0, r0, #0x2
	ldr	r1, .L298+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L299:
	.align	2, 0
.L298:
	.word	gEnemyParty
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	.L289
	.align	2, 0
	.align	2, 0
.L289:
	.word	.L208
	.word	.L219
	.word	.L220
	.word	.L221
	.word	.L235
	.word	.L235
	.word	.L235
	.word	.L235
	.word	.L236
	.word	.L245
	.word	.L245
	.word	.L245
	.word	.L245
	.word	.L207
	.word	.L207
	.word	.L207
	.word	.L207
	.word	.L246
	.word	.L247
	.word	.L248
	.word	.L249
	.word	.L250
	.word	.L251
	.word	.L252
	.word	.L253
	.word	.L254
	.word	.L255
	.word	.L256
	.word	.L257
	.word	.L258
	.word	.L259
	.word	.L260
	.word	.L261
	.word	.L262
	.word	.L263
	.word	.L264
	.word	.L265
	.word	.L266
	.word	.L267
	.word	.L268
	.word	.L269
	.word	.L270
	.word	.L271
	.word	.L272
	.word	.L273
	.word	.L274
	.word	.L275
	.word	.L276
	.word	.L277
	.word	.L278
	.word	.L279
	.word	.L280
	.word	.L281
	.word	.L282
	.word	.L283
	.word	.L284
	.word	.L285
	.word	.L286
	.word	.L287
	.word	.L288
.L208:
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	mov	r4, #0x0
	add	r0, sp, #0x24
	mov	r8, r0
	mov	r1, #0x3b
	add	r1, r1, sp
	mov	r9, r1
	mov	r2, #0x2b
	add	r2, r2, sp
	mov	sl, r2
	mov	r0, sp
	add	r0, r0, #0x2a
	str	r0, [sp, #0x7c]
	mov	r1, sp
	add	r1, r1, #0x68
	str	r1, [sp, #0x88]
	mov	r2, sp
	add	r2, r2, #0x30
	str	r2, [sp, #0x80]
	add	r0, r0, #0x12
	str	r0, [sp, #0x84]
	add	r5, sp, #0xc
.L212:
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	bl	GetMonData
	strh	r0, [r5]
	add	r1, r4, #0
	add	r1, r1, #0x11
	add	r0, r6, #0
	bl	GetMonData
	mov	r2, r8
	add	r1, r2, r4
	strb	r0, [r1]
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L212	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x20
	bl	GetMonData
	mov	r2, sl
	strb	r0, [r2]
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x44]
	add	r0, r6, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r4, #0x1f
	and	r0, r0, r4
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r6, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L300
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r6, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r6, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L300+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r6, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L300+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r6, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r4
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r6, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x7c]
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x28]
	add	r0, r6, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2c]
	add	r0, r6, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r6, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r6, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r6, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r6, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r6, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, sp
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r6, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x7
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x54]
	add	r0, r6, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x88]
	bl	GetMonData
	ldr	r0, [sp, #0x80]
	ldr	r1, [sp, #0x88]
	bl	StringCopy_Nickname
	add	r0, r6, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x84]
	bl	GetMonData
	mov	r2, sp
	mov	r4, #0x0
.L217:
	add	r0, r7, r4
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x57
	bls	.L217	@cond_branch
	b	.L207
.L301:
	.align	2, 0
.L300:
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L219:
	add	r0, r6, #0
	mov	r1, #0xb
	b	.L292
.L220:
	add	r0, r6, #0
	mov	r1, #0xc
	b	.L292
.L221:
	mov	r4, #0x0
	add	r2, sp, #0x58
	mov	r8, r2
	add	r0, sp, #0x60
	mov	r9, r0
	mov	r5, r8
.L225:
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	bl	GetMonData
	strh	r0, [r5]
	add	r1, r4, #0
	add	r1, r1, #0x11
	add	r0, r6, #0
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r4
	strb	r0, [r1]
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L225	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r8
	strb	r0, [r1, #0xc]
	mov	r2, r8
	mov	r4, #0x0
.L230:
	add	r0, r7, r4
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0xf
	bls	.L230	@cond_branch
	b	.L207
.L235:
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r1, r3, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r1, r1, #0x9
	add	r0, r6, #0
	b	.L292
.L236:
	mov	r4, #0x0
.L240:
	add	r1, r4, #0
	add	r1, r1, #0x11
	add	r0, r6, #0
	bl	GetMonData
	add	r1, r7, r4
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L240	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r4
	strb	r0, [r1]
	add	r4, r4, #0x1
	b	.L207
.L245:
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r1, r3, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r1, r1, #0x8
	add	r0, r6, #0
	b	.L293
.L246:
	add	r0, r6, #0
	mov	r1, #0x1
	b	.L294
.L247:
	add	r0, r6, #0
	mov	r1, #0x19
.L294:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r4, #0x3
	b	.L207
.L248:
	add	r0, r6, #0
	mov	r1, #0x1a
	b	.L293
.L249:
	add	r0, r6, #0
	mov	r1, #0x1b
	b	.L293
.L250:
	add	r0, r6, #0
	mov	r1, #0x1c
	b	.L293
.L251:
	add	r0, r6, #0
	mov	r1, #0x1d
	b	.L293
.L252:
	add	r0, r6, #0
	mov	r1, #0x1e
	b	.L293
.L253:
	add	r0, r6, #0
	mov	r1, #0x1f
	b	.L293
.L254:
	add	r0, r6, #0
	mov	r1, #0x20
	b	.L293
.L255:
	add	r0, r6, #0
	mov	r1, #0x22
	b	.L293
.L256:
	add	r0, r6, #0
	mov	r1, #0x23
	b	.L293
.L257:
	add	r0, r6, #0
	mov	r1, #0x24
	b	.L293
.L258:
	add	r0, r6, #0
	mov	r1, #0x25
	b	.L293
.L259:
	add	r0, r6, #0
	mov	r1, #0x26
	b	.L293
.L260:
	add	r0, r6, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r6, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r6, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r6, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r6, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r6, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r4, #0x6
	b	.L207
.L261:
	add	r0, r6, #0
	mov	r1, #0x27
	b	.L293
.L262:
	add	r0, r6, #0
	mov	r1, #0x28
	b	.L293
.L263:
	add	r0, r6, #0
	mov	r1, #0x29
	b	.L293
.L264:
	add	r0, r6, #0
	mov	r1, #0x2a
	b	.L293
.L265:
	add	r0, r6, #0
	mov	r1, #0x2b
	b	.L293
.L266:
	add	r0, r6, #0
	mov	r1, #0x2c
	b	.L293
.L267:
	add	r0, r6, #0
	mov	r1, #0x0
	b	.L295
.L268:
	add	r0, r6, #0
	mov	r1, #0x9
	b	.L292
.L269:
	add	r0, r6, #0
	mov	r1, #0x37
.L295:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r4, #0x4
	b	.L207
.L270:
	add	r0, r6, #0
	mov	r1, #0x38
	b	.L293
.L271:
	add	r0, r6, #0
	mov	r1, #0x39
	b	.L292
.L272:
	add	r0, r6, #0
	mov	r1, #0x3a
	b	.L292
.L273:
	add	r0, r6, #0
	mov	r1, #0x3b
	b	.L292
.L274:
	add	r0, r6, #0
	mov	r1, #0x3c
	b	.L292
.L275:
	add	r0, r6, #0
	mov	r1, #0x3d
	b	.L292
.L276:
	add	r0, r6, #0
	mov	r1, #0x3e
	b	.L292
.L277:
	add	r0, r6, #0
	mov	r1, #0x3f
.L292:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r4, #0x2
	b	.L207
.L278:
	add	r0, r6, #0
	mov	r1, #0x16
	b	.L293
.L279:
	add	r0, r6, #0
	mov	r1, #0x17
	b	.L293
.L280:
	add	r0, r6, #0
	mov	r1, #0x18
	b	.L293
.L281:
	add	r0, r6, #0
	mov	r1, #0x21
	b	.L293
.L282:
	add	r0, r6, #0
	mov	r1, #0x2f
	b	.L293
.L283:
	add	r0, r6, #0
	mov	r1, #0x30
	b	.L293
.L284:
	add	r0, r6, #0
	mov	r1, #0x32
	b	.L293
.L285:
	add	r0, r6, #0
	mov	r1, #0x33
	b	.L293
.L286:
	add	r0, r6, #0
	mov	r1, #0x34
	b	.L293
.L287:
	add	r0, r6, #0
	mov	r1, #0x35
	b	.L293
.L288:
	add	r0, r6, #0
	mov	r1, #0x36
.L293:
	bl	GetMonData
	strb	r0, [r7]
	mov	r4, #0x1
.L207:
	add	r0, r4, #0
	add	sp, sp, #0x8c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 CopyPokedudeMonData,.Lfe38-CopyPokedudeMonData
	.align	2, 0
	.type	 PokedudeHandleGetRawMonData,function
	.thumb_func
PokedudeHandleGetRawMonData:
	push	{lr}
	bl	PlayerHandleGetRawMonData
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 PokedudeHandleGetRawMonData,.Lfe39-PokedudeHandleGetRawMonData
	.align	2, 0
	.type	 PokedudeHandleSetMonData,function
	.thumb_func
PokedudeHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r1, .L312
	ldr	r0, .L312+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L304	@cond_branch
	ldr	r0, .L312+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetPokedudeMonData
	b	.L305
.L313:
	.align	2, 0
.L312:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L304:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L309:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L310	@cond_branch
	add	r0, r5, #0
	bl	SetPokedudeMonData
.L310:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L309	@cond_branch
.L305:
	bl	PokedudeBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 PokedudeHandleSetMonData,.Lfe40-PokedudeHandleSetMonData
	.align	2, 0
	.type	 SetPokedudeMonData,function
	.thumb_func
SetPokedudeMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x30
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L389
	ldrb	r0, [r0]
	lsl	r2, r0, #0x9
	ldr	r1, .L389+0x4
	add	r5, r2, r1
	mov	r8, r5
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L315	@cond_branch
	mov	r0, #0x64
	mov	r1, r4
	mul	r1, r1, r0
	ldr	r0, .L389+0x8
	b	.L386
.L390:
	.align	2, 0
.L389:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
	.word	gPlayerParty
.L315:
	mov	r0, #0x64
	mov	r1, r4
	mul	r1, r1, r0
	ldr	r0, .L391
.L386:
	add	r6, r1, r0
	ldr	r2, .L391+0x4
	ldr	r0, .L391+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r3, r2, #0
	cmp	r0, #0x3b
	bls	.LCB3667
	bl	.L317	@far jump
.LCB3667:
	lsl	r0, r0, #0x2
	ldr	r1, .L391+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L392:
	.align	2, 0
.L391:
	.word	gEnemyParty
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	.L384
	.align	2, 0
	.align	2, 0
.L384:
	.word	.L318
	.word	.L324
	.word	.L325
	.word	.L326
	.word	.L335
	.word	.L335
	.word	.L335
	.word	.L335
	.word	.L336
	.word	.L340
	.word	.L340
	.word	.L340
	.word	.L340
	.word	.L317
	.word	.L317
	.word	.L317
	.word	.L317
	.word	.L341
	.word	.L342
	.word	.L343
	.word	.L344
	.word	.L345
	.word	.L346
	.word	.L347
	.word	.L348
	.word	.L349
	.word	.L350
	.word	.L351
	.word	.L352
	.word	.L353
	.word	.L354
	.word	.L355
	.word	.L356
	.word	.L357
	.word	.L358
	.word	.L359
	.word	.L360
	.word	.L361
	.word	.L362
	.word	.L363
	.word	.L364
	.word	.L365
	.word	.L366
	.word	.L367
	.word	.L368
	.word	.L369
	.word	.L370
	.word	.L371
	.word	.L372
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L383
.L318:
	add	r0, r6, #0
	mov	r1, #0xb
	mov	r2, r8
	bl	SetMonData
	mov	r2, r8
	add	r2, r2, #0x2e
	add	r0, r6, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r4, #0x0
	mov	r0, #0x3b
	add	r0, r0, r8
	mov	r9, r0
	mov	r1, #0x2b
	add	r1, r1, r8
	mov	sl, r1
	mov	r2, r8
	add	r2, r2, #0x44
	str	r2, [sp, #0x10]
	mov	r0, r8
	add	r0, r0, #0x48
	str	r0, [sp, #0x14]
	mov	r1, r8
	add	r1, r1, #0x4c
	str	r1, [sp, #0x18]
	sub	r2, r2, #0x1a
	str	r2, [sp, #0x8]
	sub	r0, r0, #0x20
	str	r0, [sp, #0x4]
	sub	r1, r1, #0x20
	str	r1, [sp, #0xc]
	sub	r2, r2, #0x28
	str	r2, [sp, #0x1c]
	sub	r0, r0, #0x24
	str	r0, [sp, #0x20]
	sub	r1, r1, #0x26
	str	r1, [sp, #0x24]
	add	r2, r2, #0x6
	str	r2, [sp, #0x28]
	add	r0, r0, #0x6
	str	r0, [sp, #0x2c]
	mov	r7, r8
	add	r7, r7, #0x24
	mov	r5, r8
	add	r5, r5, #0xc
.L322:
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	add	r2, r5, #0
	bl	SetMonData
	add	r1, r4, #0
	add	r1, r1, #0x11
	add	r0, r6, #0
	add	r2, r7, #0
	bl	SetMonData
	add	r7, r7, #0x1
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L322	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x20
	mov	r2, sl
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x27
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	mov	r2, r8
	ldrh	r0, [r2, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x28
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	mov	r2, r8
	ldrb	r0, [r2, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x29
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	mov	r2, r8
	ldr	r0, [r2, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x2a
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	mov	r2, r8
	ldrh	r0, [r2, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x2b
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	mov	r2, r8
	ldrb	r0, [r2, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x2c
	mov	r2, sp
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	add	r0, r6, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	b	.L317
.L324:
	ldr	r0, .L393
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L393+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0xb
	bl	SetMonData
	b	.L317
.L394:
	.align	2, 0
.L393:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L325:
	ldr	r0, .L395
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L395+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0xc
	bl	SetMonData
	b	.L317
.L396:
	.align	2, 0
.L395:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L326:
	mov	r4, #0x0
	mov	r0, #0xc
	add	r0, r0, r5
	mov	r8, r0
	add	r7, r5, #0
	add	r7, r7, #0x8
.L330:
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	add	r2, r5, #0
	bl	SetMonData
	add	r1, r4, #0
	add	r1, r1, #0x11
	add	r0, r6, #0
	add	r2, r7, #0
	bl	SetMonData
	add	r7, r7, #0x1
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L330	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x15
	mov	r2, r8
	bl	SetMonData
	b	.L317
.L335:
	ldr	r0, .L397
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	add	r0, r3, #0x1
	add	r0, r2, r0
	ldrb	r1, [r0]
	add	r1, r1, #0x9
	b	.L387
.L398:
	.align	2, 0
.L397:
	.word	gActiveBattler
.L336:
	ldr	r5, .L399
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	ldr	r4, .L399+0x4
	add	r2, r2, r4
	add	r0, r6, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r4, #0x1
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r4, #0x2
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r4, #0x3
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r4, r4, #0x4
	add	r2, r2, r4
	add	r0, r6, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L317
.L400:
	.align	2, 0
.L399:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L340:
	ldr	r0, .L401
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	add	r0, r3, #0x1
	add	r0, r2, r0
	ldrb	r1, [r0]
	add	r1, r1, #0x8
.L387:
	add	r0, r3, #0x3
	add	r2, r2, r0
	add	r0, r6, #0
	bl	SetMonData
	b	.L317
.L402:
	.align	2, 0
.L401:
	.word	gActiveBattler
.L341:
	ldr	r0, .L403
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L403+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x1
	bl	SetMonData
	b	.L317
.L404:
	.align	2, 0
.L403:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L342:
	ldr	r0, .L405
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L405+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x19
	bl	SetMonData
	b	.L317
.L406:
	.align	2, 0
.L405:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L343:
	ldr	r0, .L407
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L407+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x1a
	bl	SetMonData
	b	.L317
.L408:
	.align	2, 0
.L407:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L344:
	ldr	r0, .L409
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L409+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x1b
	bl	SetMonData
	b	.L317
.L410:
	.align	2, 0
.L409:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L345:
	ldr	r0, .L411
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L411+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x1c
	bl	SetMonData
	b	.L317
.L412:
	.align	2, 0
.L411:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L346:
	ldr	r0, .L413
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L413+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x1d
	bl	SetMonData
	b	.L317
.L414:
	.align	2, 0
.L413:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L347:
	ldr	r0, .L415
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L415+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x1e
	bl	SetMonData
	b	.L317
.L416:
	.align	2, 0
.L415:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L348:
	ldr	r0, .L417
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L417+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x1f
	bl	SetMonData
	b	.L317
.L418:
	.align	2, 0
.L417:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L349:
	ldr	r0, .L419
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L419+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x20
	bl	SetMonData
	b	.L317
.L420:
	.align	2, 0
.L419:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L350:
	ldr	r0, .L421
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L421+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x22
	bl	SetMonData
	b	.L317
.L422:
	.align	2, 0
.L421:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L351:
	ldr	r0, .L423
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L423+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x23
	bl	SetMonData
	b	.L317
.L424:
	.align	2, 0
.L423:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L352:
	ldr	r0, .L425
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L425+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x24
	bl	SetMonData
	b	.L317
.L426:
	.align	2, 0
.L425:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L353:
	ldr	r0, .L427
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L427+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x25
	bl	SetMonData
	b	.L317
.L428:
	.align	2, 0
.L427:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L354:
	ldr	r0, .L429
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L429+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x26
	bl	SetMonData
	b	.L317
.L430:
	.align	2, 0
.L429:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L355:
	ldr	r5, .L431
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	ldr	r4, .L431+0x4
	add	r2, r2, r4
	add	r0, r6, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r4, #0x1
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r4, #0x2
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r4, #0x3
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r4, #0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r4, r4, #0x5
	add	r2, r2, r4
	b	.L388
.L432:
	.align	2, 0
.L431:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L356:
	ldr	r0, .L433
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L433+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x27
	bl	SetMonData
	b	.L317
.L434:
	.align	2, 0
.L433:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L357:
	ldr	r0, .L435
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L435+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x28
	bl	SetMonData
	b	.L317
.L436:
	.align	2, 0
.L435:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L358:
	ldr	r0, .L437
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L437+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x29
	bl	SetMonData
	b	.L317
.L438:
	.align	2, 0
.L437:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L359:
	ldr	r0, .L439
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L439+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x2a
	bl	SetMonData
	b	.L317
.L440:
	.align	2, 0
.L439:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L360:
	ldr	r0, .L441
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L441+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x2b
	bl	SetMonData
	b	.L317
.L442:
	.align	2, 0
.L441:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L361:
	ldr	r0, .L443
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L443+0x4
	add	r2, r2, r0
.L388:
	add	r0, r6, #0
	mov	r1, #0x2c
	bl	SetMonData
	b	.L317
.L444:
	.align	2, 0
.L443:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L362:
	ldr	r0, .L445
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L445+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x0
	bl	SetMonData
	b	.L317
.L446:
	.align	2, 0
.L445:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L363:
	ldr	r0, .L447
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L447+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x9
	bl	SetMonData
	b	.L317
.L448:
	.align	2, 0
.L447:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L364:
	ldr	r0, .L449
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L449+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x37
	bl	SetMonData
	b	.L317
.L450:
	.align	2, 0
.L449:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L365:
	ldr	r0, .L451
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L451+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x38
	bl	SetMonData
	b	.L317
.L452:
	.align	2, 0
.L451:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L366:
	ldr	r0, .L453
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L453+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x39
	bl	SetMonData
	b	.L317
.L454:
	.align	2, 0
.L453:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L367:
	ldr	r0, .L455
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L455+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x3a
	bl	SetMonData
	b	.L317
.L456:
	.align	2, 0
.L455:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L368:
	ldr	r0, .L457
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L457+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x3b
	bl	SetMonData
	b	.L317
.L458:
	.align	2, 0
.L457:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L369:
	ldr	r0, .L459
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L459+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x3c
	bl	SetMonData
	b	.L317
.L460:
	.align	2, 0
.L459:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L370:
	ldr	r0, .L461
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L461+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x3d
	bl	SetMonData
	b	.L317
.L462:
	.align	2, 0
.L461:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L371:
	ldr	r0, .L463
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L463+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x3e
	bl	SetMonData
	b	.L317
.L464:
	.align	2, 0
.L463:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L372:
	ldr	r0, .L465
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L465+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x3f
	bl	SetMonData
	b	.L317
.L466:
	.align	2, 0
.L465:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L373:
	ldr	r0, .L467
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L467+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x16
	bl	SetMonData
	b	.L317
.L468:
	.align	2, 0
.L467:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L374:
	ldr	r0, .L469
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L469+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x17
	bl	SetMonData
	b	.L317
.L470:
	.align	2, 0
.L469:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L375:
	ldr	r0, .L471
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L471+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x18
	bl	SetMonData
	b	.L317
.L472:
	.align	2, 0
.L471:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L376:
	ldr	r0, .L473
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L473+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x21
	bl	SetMonData
	b	.L317
.L474:
	.align	2, 0
.L473:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L377:
	ldr	r0, .L475
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L475+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x2f
	bl	SetMonData
	b	.L317
.L476:
	.align	2, 0
.L475:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L378:
	ldr	r0, .L477
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L477+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x30
	bl	SetMonData
	b	.L317
.L478:
	.align	2, 0
.L477:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L379:
	ldr	r0, .L479
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L479+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x32
	bl	SetMonData
	b	.L317
.L480:
	.align	2, 0
.L479:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L380:
	ldr	r0, .L481
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L481+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x33
	bl	SetMonData
	b	.L317
.L482:
	.align	2, 0
.L481:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L381:
	ldr	r0, .L483
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L483+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x34
	bl	SetMonData
	b	.L317
.L484:
	.align	2, 0
.L483:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L382:
	ldr	r0, .L485
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L485+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x35
	bl	SetMonData
	b	.L317
.L486:
	.align	2, 0
.L485:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
.L383:
	ldr	r0, .L487
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	ldr	r0, .L487+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x36
	bl	SetMonData
.L317:
	ldr	r2, .L487+0x8
	ldr	r0, .L487
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L487+0xc
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	add	sp, sp, #0x30
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe41:
	.size	 SetPokedudeMonData,.Lfe41-SetPokedudeMonData
	.align	2, 0
	.type	 PokedudeHandleSetRawMonData,function
	.thumb_func
PokedudeHandleSetRawMonData:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 PokedudeHandleSetRawMonData,.Lfe42-PokedudeHandleSetRawMonData
	.align	2, 0
	.type	 PokedudeHandleLoadMonSprite,function
	.thumb_func
PokedudeHandleLoadMonSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r6, .L491
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	ldr	r1, .L491+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r2, .L491+0x8
	mov	sl, r2
	add	r0, r0, sl
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	ldr	r2, .L491+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, sl
	bl	BattleLoadOpponentMonSpriteGfx
	ldrb	r0, [r6]
	bl	GetBattlerSpriteDefault_Y
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L491+0xc
	mov	r9, r0
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r9
	add	r1, r4, #0
	add	r2, r5, #0
	bl	CreateSprite
	ldr	r4, .L491+0x10
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L491+0x14
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L491+0x18
	strh	r1, [r0, #0x24]
	ldrb	r2, [r6]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r3, [r6]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r2, [r6]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L491+0x1c
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldrb	r4, [r6]
	lsl	r0, r4, #0x1
	ldr	r2, .L491+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, sl
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r1, .L491+0x20
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L491+0x24
	str	r1, [r0]
	bl	PokedudeBufferExecCompleted
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L492:
	.align	2, 0
.L491:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpritePosX_0
.Lfe43:
	.size	 PokedudeHandleLoadMonSprite,.Lfe43-PokedudeHandleLoadMonSprite
	.align	2, 0
	.type	 PokedudeHandleSwitchInAnim,function
	.thumb_func
PokedudeHandleSwitchInAnim:
	push	{r4, r5, lr}
	ldr	r5, .L494
	ldrb	r0, [r5]
	ldr	r4, .L494+0x4
	lsl	r1, r0, #0x9
	add	r2, r4, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	ClearTemporarySpeciesSpriteData
	ldr	r2, .L494+0x8
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	lsl	r0, r0, #0x9
	add	r4, r4, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r4, #0x0
	strh	r0, [r1]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L494+0xc
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSpriteGfx
	ldr	r1, .L494+0x10
	ldrb	r0, [r5]
	add	r0, r0, r1
	strb	r4, [r0]
	ldr	r1, .L494+0x14
	ldrb	r0, [r5]
	add	r0, r0, r1
	strb	r4, [r0]
	ldrb	r0, [r5]
	bl	StartSendOutAnim
	ldr	r1, .L494+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L494+0x1c
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L495:
	.align	2, 0
.L494:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	gBattlerControllerFuncs
	.word	SwitchIn_TryShinyAnimShowHealthbox
.Lfe44:
	.size	 PokedudeHandleSwitchInAnim,.Lfe44-PokedudeHandleSwitchInAnim
	.align	2, 0
	.type	 PokedudeHandleReturnMonToBall,function
	.thumb_func
PokedudeHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r0, .L499
	ldr	r6, .L499+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L497	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x1
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, .L499+0x8
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L499+0xc
	str	r0, [r1]
	b	.L498
.L500:
	.align	2, 0
.L499:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L497:
	ldr	r5, .L501
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L501+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L501+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	PokedudeBufferExecCompleted
.L498:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L502:
	.align	2, 0
.L501:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe45:
	.size	 PokedudeHandleReturnMonToBall,.Lfe45-PokedudeHandleReturnMonToBall
	.align	2, 0
	.type	 PokedudeHandleDrawTrainerPic,function
	.thumb_func
PokedudeHandleDrawTrainerPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L507
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L504	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x4
	bl	DecompressTrainerBackPalette
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x4
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L507+0x4
	ldr	r1, .L507+0x8
	ldrb	r1, [r1, #0x10]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r5, .L507+0xc
	ldrb	r1, [r7]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L507+0x10
	ldrb	r0, [r7]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r7]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L507+0x14
	strh	r1, [r0, #0x2e]
	ldrb	r3, [r7]
	add	r0, r3, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	b	.L506
.L508:
	.align	2, 0
.L507:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerBackPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xfffe
.L504:
	ldrb	r1, [r7]
	mov	r0, #0x84
	bl	DecompressTrainerFrontPic
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x84
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r5, .L509
	ldr	r0, .L509+0x4
	mov	r1, #0x84
	mov	r8, r1
	mov	r1, #0x84
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x8
	sub	r4, r4, r0
	lsl	r4, r4, #0x12
	mov	r0, #0xa0
	lsl	r0, r0, #0xe
	add	r4, r4, r0
	asr	r4, r4, #0x10
	ldrb	r0, [r7]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r5, #0
	mov	r1, #0xb0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r5, .L509+0x8
	ldrb	r1, [r7]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L509+0xc
	ldrb	r0, [r7]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L509+0x10
	strh	r1, [r0, #0x24]
	ldrb	r0, [r7]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldr	r0, .L509+0x14
	mov	r1, r8
	lsl	r6, r1, #0x3
	add	r0, r0, r6
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	ldrb	r1, [r7]
	add	r1, r1, r5
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldrb	r0, [r7]
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	strh	r0, [r1, #0x38]
	ldr	r0, .L509+0x18
	add	r0, r0, r6
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	ldrb	r1, [r7]
	add	r1, r1, r5
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r2, .L509+0x1c
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L509+0x20
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	ldrb	r0, [r7]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, r8
	strh	r1, [r0, #0x6]
.L506:
	ldrb	r0, [r7]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L509+0x24
	str	r1, [r0]
	ldr	r1, .L509+0x28
	ldr	r0, .L509+0x2c
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L509+0x30
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L510:
	.align	2, 0
.L509:
	.word	gMultiuseSpriteTemplate
	.word	gTrainerFrontPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gTrainerFrontPicPaletteTable
	.word	gTrainerFrontPicTable
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_TrainerSlideIn
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe46:
	.size	 PokedudeHandleDrawTrainerPic,.Lfe46-PokedudeHandleDrawTrainerPic
	.align	2, 0
	.type	 PokedudeHandleTrainerSlide,function
	.thumb_func
PokedudeHandleTrainerSlide:
	push	{r4, r5, r6, lr}
	ldr	r4, .L512
	ldrb	r1, [r4]
	mov	r0, #0x4
	bl	DecompressTrainerBackPalette
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x4
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L512+0x4
	ldr	r1, .L512+0x8
	ldrb	r1, [r1, #0x10]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r6, .L512+0xc
	ldrb	r1, [r4]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r5, .L512+0x10
	ldrb	r3, [r4]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L512+0x14
	strh	r1, [r0, #0x24]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r5, #0x1c
	add	r0, r0, r5
	ldr	r1, .L512+0x18
	str	r1, [r0]
	ldr	r1, .L512+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L512+0x20
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L513:
	.align	2, 0
.L512:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerBackPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xffa0
	.word	SpriteCB_TrainerSlideIn
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy2
.Lfe47:
	.size	 PokedudeHandleTrainerSlide,.Lfe47-PokedudeHandleTrainerSlide
	.align	2, 0
	.type	 PokedudeHandleTrainerSlideBack,function
	.thumb_func
PokedudeHandleTrainerSlideBack:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 PokedudeHandleTrainerSlideBack,.Lfe48-PokedudeHandleTrainerSlideBack
	.align	2, 0
	.type	 PokedudeHandleFaintAnimation,function
	.thumb_func
PokedudeHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L523
	ldr	r4, [r6]
	ldr	r5, .L523+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L516	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L517	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L517:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L518
.L524:
	.align	2, 0
.L523:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L516:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L518	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L520	@cond_branch
	ldr	r2, .L525
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L525+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	mov	r1, #0x40
	neg	r1, r1
	mov	r0, #0x10
	bl	PlaySE12WithPanning
	ldr	r2, .L525+0x8
	ldr	r3, .L525+0xc
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x30]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
	strh	r1, [r0, #0x32]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L525+0x10
	b	.L522
.L526:
	.align	2, 0
.L525:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_FaintSlideAnim
.L520:
	mov	r0, #0x10
	mov	r1, #0x3f
	bl	PlaySE12WithPanning
	ldr	r2, .L527
	ldr	r1, .L527+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L527+0x8
.L522:
	str	r1, [r0]
	ldr	r1, .L527+0xc
	ldr	r0, .L527+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L527+0x14
	str	r1, [r0]
.L518:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L528:
	.align	2, 0
.L527:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_FaintOpponentMon
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	FreeMonSpriteAfterFaintAnim
.Lfe49:
	.size	 PokedudeHandleFaintAnimation,.Lfe49-PokedudeHandleFaintAnimation
	.align	2, 0
	.type	 PokedudeHandlePaletteFade,function
	.thumb_func
PokedudeHandlePaletteFade:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 PokedudeHandlePaletteFade,.Lfe50-PokedudeHandlePaletteFade
	.align	2, 0
	.type	 PokedudeHandleSuccessBallThrowAnim,function
	.thumb_func
PokedudeHandleSuccessBallThrowAnim:
	push	{r4, r5, lr}
	ldr	r0, .L531
	ldr	r0, [r0]
	ldr	r1, [r0, #0x8]
	mov	r0, #0x4
	strb	r0, [r1, #0x8]
	ldr	r1, .L531+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r5, .L531+0x8
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x3
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L531+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L531+0x10
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L532:
	.align	2, 0
.L531:
	.word	gBattleSpritesDataPtr
	.word	gDoingBattleAnim
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	CompleteOnSpecialAnimDone
.Lfe51:
	.size	 PokedudeHandleSuccessBallThrowAnim,.Lfe51-PokedudeHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 PokedudeHandleBallThrowAnim,function
	.thumb_func
PokedudeHandleBallThrowAnim:
	push	{r4, r5, lr}
	ldr	r1, .L534
	ldr	r5, .L534+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r0, .L534+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	strb	r1, [r0, #0x8]
	ldr	r1, .L534+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x3
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L534+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L534+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L535:
	.align	2, 0
.L534:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	CompleteOnSpecialAnimDone
.Lfe52:
	.size	 PokedudeHandleBallThrowAnim,.Lfe52-PokedudeHandleBallThrowAnim
	.align	2, 0
	.type	 PokedudeHandlePause,function
	.thumb_func
PokedudeHandlePause:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 PokedudeHandlePause,.Lfe53-PokedudeHandlePause
	.align	2, 0
	.type	 PokedudeHandleMoveAnimation,function
	.thumb_func
PokedudeHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r0, .L540
	mov	ip, r0
	ldr	r6, .L540+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L540+0x8
	mov	r1, ip
	add	r1, r1, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	strb	r1, [r5]
	ldr	r4, .L540+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x5
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L540+0x10
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x6
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x7
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x9
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	str	r3, [r4]
	ldr	r3, .L540+0x14
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	mov	r2, ip
	add	r2, r2, #0xa
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L540+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0xc
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0xd
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L540+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x10
	add	r2, r2, r1
	str	r2, [r3]
	ldr	r3, .L540+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L538	@cond_branch
	bl	PokedudeBufferExecCompleted
	b	.L539
.L541:
	.align	2, 0
.L540:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L538:
	ldr	r0, .L542
	ldr	r0, [r0]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L542+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L542+0x8
	str	r1, [r0]
.L539:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L543:
	.align	2, 0
.L542:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	PokedudeDoMoveAnimation
.Lfe54:
	.size	 PokedudeHandleMoveAnimation,.Lfe54-PokedudeHandleMoveAnimation
	.align	2, 0
	.type	 PokedudeDoMoveAnimation,function
	.thumb_func
PokedudeDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r2, .L558
	ldr	r6, .L558+0x4
	ldrb	r3, [r6]
	lsl	r1, r3, #0x9
	add	r0, r2, #0x1
	mov	r9, r0
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r2, r2, #0x2
	mov	r8, r2
	add	r1, r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldr	r7, .L558+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L548	@cond_branch
	cmp	r2, #0x1
	bgt	.L557	@cond_branch
	cmp	r2, #0
	beq	.L546	@cond_branch
	b	.L545
.L559:
	.align	2, 0
.L558:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L557:
	cmp	r2, #0x2
	beq	.L550	@cond_branch
	cmp	r2, #0x3
	beq	.L553	@cond_branch
	b	.L545
.L546:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L547	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L547:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L545
.L548:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L545	@cond_branch
	mov	r0, #0x0
	bl	SetBattlerSpriteAffineMode
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L545
.L550:
	ldr	r0, .L560
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L560+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L545	@cond_branch
	mov	r0, #0x1
	bl	SetBattlerSpriteAffineMode
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L552	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L552:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L545
.L561:
	.align	2, 0
.L560:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
.L553:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L545	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	lsl	r2, r0, #0x9
	mov	r3, r9
	add	r1, r2, r3
	ldrb	r1, [r1]
	add	r2, r2, r8
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	PokedudeBufferExecCompleted
.L545:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 PokedudeDoMoveAnimation,.Lfe55-PokedudeDoMoveAnimation
	.align	2, 0
	.type	 PokedudeHandlePrintString,function
	.thumb_func
PokedudeHandlePrintString:
	push	{r4, lr}
	ldr	r0, .L565
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L565+0x4
	strh	r1, [r0]
	ldr	r0, .L565+0x8
	ldrb	r4, [r0]
	lsl	r4, r4, #0x9
	ldr	r0, .L565+0xc
	add	r4, r4, r0
	ldrh	r0, [r4]
	bl	BufferStringBattle
	ldrh	r0, [r4]
	bl	BattleStringShouldBeColored
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L563	@cond_branch
	ldr	r0, .L565+0x10
	mov	r1, #0x40
	bl	BattlePutTextOnWindow
	b	.L564
.L566:
	.align	2, 0
.L565:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gActiveBattler
	.word	gBattleBufferA+0x2
	.word	gDisplayedStringBattle
.L563:
	ldr	r0, .L567
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
.L564:
	ldr	r1, .L567+0x4
	ldr	r0, .L567+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L567+0xc
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L568:
	.align	2, 0
.L567:
	.word	gDisplayedStringBattle
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnInactiveTextPrinter
.Lfe56:
	.size	 PokedudeHandlePrintString,.Lfe56-PokedudeHandlePrintString
	.align	2, 0
	.type	 PokedudeHandlePrintSelectionString,function
	.thumb_func
PokedudeHandlePrintSelectionString:
	push	{lr}
	ldr	r0, .L572
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L570	@cond_branch
	bl	PokedudeHandlePrintString
	b	.L571
.L573:
	.align	2, 0
.L572:
	.word	gActiveBattler
.L570:
	bl	PokedudeBufferExecCompleted
.L571:
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 PokedudeHandlePrintSelectionString,.Lfe57-PokedudeHandlePrintSelectionString
	.align	2, 0
	.type	 HandleChooseActionAfterDma3,function
	.thumb_func
HandleChooseActionAfterDma3:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L575	@cond_branch
	ldr	r0, .L576
	strh	r1, [r0]
	ldr	r1, .L576+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L576+0x8
	ldr	r0, .L576+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L576+0x10
	str	r1, [r0]
.L575:
	pop	{r0}
	bx	r0
.L577:
	.align	2, 0
.L576:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	HandleInputChooseAction
.Lfe58:
	.size	 HandleChooseActionAfterDma3,.Lfe58-HandleChooseActionAfterDma3
	.align	2, 0
	.type	 PokedudeHandleChooseAction,function
	.thumb_func
PokedudeHandleChooseAction:
	push	{r4, lr}
	ldr	r4, .L586
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L579	@cond_branch
	ldr	r1, .L586+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L586+0x8
	str	r1, [r0]
	ldr	r0, .L586+0xc
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
	ldr	r0, .L586+0x10
	mov	r1, #0x2
	bl	BattlePutTextOnWindow
	mov	r4, #0x0
.L583:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	ActionSelectionDestroyCursorAt
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L583	@cond_branch
	ldr	r1, .L586+0x14
	ldr	r0, .L586
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	ActionSelectionCreateCursorAt
	ldr	r0, .L586+0x18
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L586+0x1c
	mov	r1, #0x1
	bl	BattlePutTextOnWindow
	b	.L585
.L587:
	.align	2, 0
.L586:
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	HandleChooseActionAfterDma3
	.word	gText_EmptyString3
	.word	gText_BattleMenu
	.word	gActionSelectionCursor
	.word	gText_WhatWillPkmnDo
	.word	gDisplayedStringBattle
.L579:
	ldr	r0, .L588
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L588+0x4
	str	r0, [r1]
.L585:
	pop	{r4}
	pop	{r0}
	bx	r0
.L589:
	.align	2, 0
.L588:
	.word	gBattlerControllerFuncs
	.word	HandleInputChooseAction
.Lfe59:
	.size	 PokedudeHandleChooseAction,.Lfe59-PokedudeHandleChooseAction
	.align	2, 0
	.type	 PokedudeHandleUnknownYesNoBox,function
	.thumb_func
PokedudeHandleUnknownYesNoBox:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 PokedudeHandleUnknownYesNoBox,.Lfe60-PokedudeHandleUnknownYesNoBox
	.align	2, 0
	.type	 PokedudeHandleChooseMoveAfterDma3,function
	.thumb_func
PokedudeHandleChooseMoveAfterDma3:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L592	@cond_branch
	ldr	r0, .L593
	strh	r1, [r0]
	ldr	r1, .L593+0x4
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L593+0x8
	ldr	r0, .L593+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L593+0x10
	str	r1, [r0]
.L592:
	pop	{r0}
	bx	r0
.L594:
	.align	2, 0
.L593:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PokedudeHandleInputChooseMove
.Lfe61:
	.size	 PokedudeHandleChooseMoveAfterDma3,.Lfe61-PokedudeHandleChooseMoveAfterDma3
	.align	2, 0
	.type	 PokedudeHandleChooseMove,function
	.thumb_func
PokedudeHandleChooseMove:
	push	{r4, lr}
	ldr	r4, .L599
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L596	@cond_branch
	bl	InitMoveSelectionsVarsAndStrings
	ldr	r0, .L599+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L599+0x8
	b	.L598
.L600:
	.align	2, 0
.L599:
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	PokedudeHandleChooseMoveAfterDma3
.L596:
	ldr	r0, .L601
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L601+0x4
.L598:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L602:
	.align	2, 0
.L601:
	.word	gBattlerControllerFuncs
	.word	PokedudeHandleInputChooseMove
.Lfe62:
	.size	 PokedudeHandleChooseMove,.Lfe62-PokedudeHandleChooseMove
	.align	2, 0
	.type	 PokedudeHandleChooseItem,function
	.thumb_func
PokedudeHandleChooseItem:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L609
	ldr	r2, .L609+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L609+0x8
	str	r1, [r0]
	ldr	r1, .L609+0xc
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r3, #0x0
	ldr	r5, .L609+0x10
	ldr	r4, .L609+0x14
.L607:
	add	r0, r3, r5
	ldrb	r1, [r2]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x1
	add	r1, r3, r1
	add	r1, r1, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L607	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L610:
	.align	2, 0
.L609:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OpenBagAndChooseItem
	.word	gBattlerInMenuId
	.word	gBattlePartyCurrentOrder
	.word	gBattleBufferA
.Lfe63:
	.size	 PokedudeHandleChooseItem,.Lfe63-PokedudeHandleChooseItem
	.align	2, 0
	.type	 PokedudeHandleChoosePokemon,function
	.thumb_func
PokedudeHandleChoosePokemon:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L617
	mov	r1, #0xff
	bl	CreateTask
	ldr	r3, .L617+0x4
	ldr	r4, .L617+0x8
	ldrb	r1, [r4]
	add	r1, r1, r3
	strb	r0, [r1]
	ldr	r5, .L617+0xc
	ldrb	r2, [r4]
	add	r3, r2, r3
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldr	r5, .L617+0x10
	lsl	r2, r2, #0x9
	add	r6, r5, #0x1
	add	r2, r2, r6
	ldrb	r2, [r2]
	mov	r0, #0xf
	and	r0, r0, r2
	strh	r0, [r1, #0x8]
	ldr	r3, .L617+0x14
	ldr	r1, [r3]
	add	r1, r1, #0x49
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsr	r0, r0, #0x4
	strb	r0, [r1]
	ldr	r2, [r3]
	add	r2, r2, #0x8b
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r5, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r2, [r3]
	add	r2, r2, #0xac
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r5, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r2, #0x0
	ldr	r3, .L617+0x18
.L615:
	add	r0, r2, r3
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x4
	add	r1, r2, r1
	add	r1, r1, r5
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L615	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L617+0x1c
	ldr	r2, .L617+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L617+0x20
	str	r1, [r0]
	ldr	r1, .L617+0x24
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L618:
	.align	2, 0
.L617:
	.word	TaskDummy
	.word	gBattleControllerData
	.word	gActiveBattler
	.word	gTasks
	.word	gBattleBufferA
	.word	gBattleStruct
	.word	gBattlePartyCurrentOrder
	.word	gBattlerControllerFuncs
	.word	OpenPartyMenuToChooseMon
	.word	gBattlerInMenuId
.Lfe64:
	.size	 PokedudeHandleChoosePokemon,.Lfe64-PokedudeHandleChoosePokemon
	.align	2, 0
	.type	 PokedudeHandleCmd23,function
	.thumb_func
PokedudeHandleCmd23:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 PokedudeHandleCmd23,.Lfe65-PokedudeHandleCmd23
	.align	2, 0
	.type	 PokedudeHandleHealthBarUpdate,function
	.thumb_func
PokedudeHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L626
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L621	@cond_branch
	ldr	r1, .L626+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L626+0x8
	b	.L625
.L627:
	.align	2, 0
.L626:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L621:
	ldr	r1, .L628
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L628+0x4
.L625:
	add	r5, r1, r0
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r3, .L628+0x8
	ldr	r7, .L628+0xc
	ldrb	r1, [r7]
	lsl	r1, r1, #0x9
	add	r0, r3, #0x2
	add	r0, r1, r0
	ldrb	r2, [r0]
	add	r3, r3, #0x3
	add	r1, r1, r3
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	lsl	r2, r2, #0x10
	asr	r6, r2, #0x10
	ldr	r0, .L628+0x10
	cmp	r6, r0
	beq	.L623	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r4, r0, #0
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	ldrb	r0, [r7]
	ldr	r1, .L628+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r6, [sp]
	add	r2, r4, #0
	bl	SetBattleBarStruct
	b	.L624
.L629:
	.align	2, 0
.L628:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	0x7fff
	.word	gHealthboxSpriteIds
.L623:
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	ldrb	r0, [r7]
	ldr	r4, .L630
	add	r1, r0, r4
	ldrb	r1, [r1]
	str	r6, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
.L624:
	ldr	r1, .L630+0x4
	ldr	r0, .L630+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L630+0xc
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L631:
	.align	2, 0
.L630:
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe66:
	.size	 PokedudeHandleHealthBarUpdate,.Lfe66-PokedudeHandleHealthBarUpdate
	.align	2, 0
	.type	 PokedudeHandleExpUpdate,function
	.thumb_func
PokedudeHandleExpUpdate:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L635
	ldr	r6, .L635+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x9
	add	r1, r5, #0x1
	add	r0, r0, r1
	ldrb	r7, [r0]
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L635+0x8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x63
	bls	.L633	@cond_branch
	bl	PokedudeBufferExecCompleted
	b	.L634
.L636:
	.align	2, 0
.L635:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gPlayerParty
.L633:
	mov	r0, #0x1
	bl	LoadBattleBarGfx
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r0, r5, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldr	r0, .L637
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L637+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r7, [r1, #0x8]
	strh	r4, [r1, #0xa]
	ldrb	r0, [r6]
	strh	r0, [r1, #0xc]
	ldr	r1, .L637+0x8
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L637+0xc
	str	r1, [r0]
.L634:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L638:
	.align	2, 0
.L637:
	.word	Task_GiveExpToMon
	.word	gTasks
	.word	gBattlerControllerFuncs
	.word	PokedudeDummy
.Lfe67:
	.size	 PokedudeHandleExpUpdate,.Lfe67-PokedudeHandleExpUpdate
	.align	2, 0
	.type	 PokedudeHandleStatusIconUpdate,function
	.thumb_func
PokedudeHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L644
	ldrb	r0, [r4]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L640	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L641	@cond_branch
	ldr	r1, .L644+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L644+0x8
	b	.L643
.L645:
	.align	2, 0
.L644:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L641:
	ldr	r1, .L646
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L646+0x4
.L643:
	add	r2, r1, r0
	ldr	r1, .L646+0x8
	ldr	r4, .L646+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r1, r2, #0
	mov	r2, #0x9
	bl	UpdateHealthboxAttribute
	ldrb	r2, [r4]
	ldr	r0, .L646+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L646+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L646+0x18
	str	r1, [r0]
.L640:
	pop	{r4}
	pop	{r0}
	bx	r0
.L647:
	.align	2, 0
.L646:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe68:
	.size	 PokedudeHandleStatusIconUpdate,.Lfe68-PokedudeHandleStatusIconUpdate
	.align	2, 0
	.type	 PokedudeHandleStatusAnimation,function
	.thumb_func
PokedudeHandleStatusAnimation:
	push	{r4, r5, lr}
	ldr	r5, .L650
	ldrb	r0, [r5]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L649	@cond_branch
	ldr	r4, .L650+0x4
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r0, r4, #0x1
	add	r0, r3, r0
	ldrb	r0, [r0]
	add	r1, r4, #0x2
	add	r1, r3, r1
	ldrb	r1, [r1]
	add	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	add	r2, r4, #0x4
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	add	r4, r4, #0x5
	add	r3, r3, r4
	ldrb	r2, [r3]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	InitAndLaunchChosenStatusAnimation
	ldr	r1, .L650+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L650+0xc
	str	r1, [r0]
.L649:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L651:
	.align	2, 0
.L650:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe69:
	.size	 PokedudeHandleStatusAnimation,.Lfe69-PokedudeHandleStatusAnimation
	.align	2, 0
	.type	 PokedudeHandleStatusXor,function
	.thumb_func
PokedudeHandleStatusXor:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L656
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L653	@cond_branch
	ldr	r1, .L656+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L656+0x8
	b	.L655
.L657:
	.align	2, 0
.L656:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L653:
	ldr	r1, .L658
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L658+0x4
.L655:
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	ldr	r2, .L658+0x8
	ldr	r1, .L658+0xc
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	eor	r0, r0, r1
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x37
	mov	r2, sp
	bl	SetMonData
	bl	PokedudeBufferExecCompleted
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe70:
	.size	 PokedudeHandleStatusXor,.Lfe70-PokedudeHandleStatusXor
	.align	2, 0
	.type	 PokedudeHandleDataTransfer,function
	.thumb_func
PokedudeHandleDataTransfer:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 PokedudeHandleDataTransfer,.Lfe71-PokedudeHandleDataTransfer
	.align	2, 0
	.type	 PokedudeHandleDMA3Transfer,function
	.thumb_func
PokedudeHandleDMA3Transfer:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 PokedudeHandleDMA3Transfer,.Lfe72-PokedudeHandleDMA3Transfer
	.align	2, 0
	.type	 PokedudeHandlePlayBGM,function
	.thumb_func
PokedudeHandlePlayBGM:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 PokedudeHandlePlayBGM,.Lfe73-PokedudeHandlePlayBGM
	.align	2, 0
	.type	 PokedudeHandleCmd32,function
	.thumb_func
PokedudeHandleCmd32:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe74:
	.size	 PokedudeHandleCmd32,.Lfe74-PokedudeHandleCmd32
	.align	2, 0
	.type	 PokedudeHandleTwoReturnValues,function
	.thumb_func
PokedudeHandleTwoReturnValues:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 PokedudeHandleTwoReturnValues,.Lfe75-PokedudeHandleTwoReturnValues
	.align	2, 0
	.type	 PokedudeHandleChosenMonReturnValue,function
	.thumb_func
PokedudeHandleChosenMonReturnValue:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe76:
	.size	 PokedudeHandleChosenMonReturnValue,.Lfe76-PokedudeHandleChosenMonReturnValue
	.align	2, 0
	.type	 PokedudeHandleOneReturnValue,function
	.thumb_func
PokedudeHandleOneReturnValue:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 PokedudeHandleOneReturnValue,.Lfe77-PokedudeHandleOneReturnValue
	.align	2, 0
	.type	 PokedudeHandleOneReturnValue_Duplicate,function
	.thumb_func
PokedudeHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 PokedudeHandleOneReturnValue_Duplicate,.Lfe78-PokedudeHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 PokedudeHandleCmd37,function
	.thumb_func
PokedudeHandleCmd37:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 PokedudeHandleCmd37,.Lfe79-PokedudeHandleCmd37
	.align	2, 0
	.type	 PokedudeHandleCmd38,function
	.thumb_func
PokedudeHandleCmd38:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 PokedudeHandleCmd38,.Lfe80-PokedudeHandleCmd38
	.align	2, 0
	.type	 PokedudeHandleCmd39,function
	.thumb_func
PokedudeHandleCmd39:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 PokedudeHandleCmd39,.Lfe81-PokedudeHandleCmd39
	.align	2, 0
	.type	 PokedudeHandleCmd40,function
	.thumb_func
PokedudeHandleCmd40:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 PokedudeHandleCmd40,.Lfe82-PokedudeHandleCmd40
	.align	2, 0
	.type	 PokedudeHandleHitAnimation,function
	.thumb_func
PokedudeHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L675
	ldr	r2, .L675+0x4
	ldr	r4, .L675+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L673	@cond_branch
	bl	PokedudeBufferExecCompleted
	b	.L674
.L676:
	.align	2, 0
.L675:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L673:
	ldr	r1, .L677
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L677+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L677+0x8
	str	r1, [r0]
.L674:
	pop	{r4}
	pop	{r0}
	bx	r0
.L678:
	.align	2, 0
.L677:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe83:
	.size	 PokedudeHandleHitAnimation,.Lfe83-PokedudeHandleHitAnimation
	.align	2, 0
	.type	 PokedudeHandleCmd42,function
	.thumb_func
PokedudeHandleCmd42:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 PokedudeHandleCmd42,.Lfe84-PokedudeHandleCmd42
	.align	2, 0
	.type	 PokedudeHandlePlaySE,function
	.thumb_func
PokedudeHandlePlaySE:
	push	{lr}
	ldr	r2, .L681
	ldr	r0, .L681+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlaySE
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.L682:
	.align	2, 0
.L681:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe85:
	.size	 PokedudeHandlePlaySE,.Lfe85-PokedudeHandlePlaySE
	.align	2, 0
	.type	 PokedudeHandlePlayFanfare,function
	.thumb_func
PokedudeHandlePlayFanfare:
	push	{lr}
	ldr	r2, .L684
	ldr	r0, .L684+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.L685:
	.align	2, 0
.L684:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe86:
	.size	 PokedudeHandlePlayFanfare,.Lfe86-PokedudeHandlePlayFanfare
	.align	2, 0
	.type	 PokedudeHandleFaintingCry,function
	.thumb_func
PokedudeHandleFaintingCry:
	push	{r4, lr}
	ldr	r4, .L690
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L687	@cond_branch
	ldr	r1, .L690+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L690+0x8
	b	.L689
.L691:
	.align	2, 0
.L690:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L687:
	ldr	r1, .L692
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L692+0x4
.L689:
	add	r0, r1, r0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	bl	PlayCry_Normal
	bl	PokedudeBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L693:
	.align	2, 0
.L692:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.Lfe87:
	.size	 PokedudeHandleFaintingCry,.Lfe87-PokedudeHandleFaintingCry
	.align	2, 0
	.type	 PokedudeHandleIntroSlide,function
	.thumb_func
PokedudeHandleIntroSlide:
	push	{lr}
	ldr	r1, .L695
	ldr	r0, .L695+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	HandleIntroSlide
	ldr	r2, .L695+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.L696:
	.align	2, 0
.L695:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe88:
	.size	 PokedudeHandleIntroSlide,.Lfe88-PokedudeHandleIntroSlide
	.align	2, 0
	.type	 PokedudeHandleIntroTrainerBallThrow,function
	.thumb_func
PokedudeHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L699
	ldr	r7, .L699+0x4
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L699+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L699+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L699+0x10
	str	r1, [r0]
	ldrb	r2, [r7]
	add	r0, r2, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x38]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L699+0x14
	bl	StoreSpriteCallbackInData6
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L699+0x18
	bl	AllocSpritePalette
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r0, .L699+0x1c
	ldr	r0, [r0, #0x20]
	lsr	r4, r4, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x5]
	ldr	r0, .L699+0x20
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L699+0x24
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r7]
	strh	r0, [r1, #0x8]
	ldr	r3, .L699+0x28
	ldr	r0, [r3]
	ldrb	r2, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L698	@cond_branch
	ldr	r0, .L699+0x2c
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L699+0x30
	str	r1, [r0]
.L698:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L699+0x34
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L699+0x38
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L700:
	.align	2, 0
.L699:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	SpriteCB_FreePlayerSpriteLoadMonSprite
	.word	0xd6f8
	.word	gTrainerBackPicPaletteTable
	.word	Task_StartSendOutAnim
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	PokedudeDummy
.Lfe89:
	.size	 PokedudeHandleIntroTrainerBallThrow,.Lfe89-PokedudeHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 StartSendOutAnim,function
	.thumb_func
StartSendOutAnim:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L702
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x2]
	ldr	r0, .L702+0x4
	lsl	r2, r6, #0x1
	add	r2, r2, r0
	ldr	r0, .L702+0x8
	lsl	r1, r6, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	strh	r0, [r2]
	ldrh	r1, [r2]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L702+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L702+0x10
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L702+0x14
	mov	r9, r1
	add	r9, r9, r6
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L702+0x18
	mov	sl, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, sl
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L702+0x1c
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L702+0x20
	mov	r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L702+0x24
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L702+0x28
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xff
	bl	DoPokeballSendOutAnimation
	mov	r1, r9
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L703:
	.align	2, 0
.L702:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gBattleBufferA
	.word	gPlayerParty
	.word	SpriteCB_WaitForBattlerBallReleaseAnim
	.word	gBattleControllerData
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe90:
	.size	 StartSendOutAnim,.Lfe90-StartSendOutAnim
	.align	2, 0
	.type	 Task_StartSendOutAnim,function
	.thumb_func
Task_StartSendOutAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L707
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1e
	bgt	.L705	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xa]
	b	.L706
.L708:
	.align	2, 0
.L707:
	.word	gTasks
.L705:
	ldr	r4, .L709
	ldrb	r5, [r4]
	ldrh	r0, [r1, #0x8]
	strb	r0, [r4]
	ldr	r0, .L709+0x4
	ldrb	r1, [r4]
	lsl	r2, r1, #0x9
	add	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L709+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	StartSendOutAnim
	ldr	r1, .L709+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L709+0x10
	str	r1, [r0]
	strb	r5, [r4]
	add	r0, r6, #0
	bl	DestroyTask
.L706:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L710:
	.align	2, 0
.L709:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
	.word	gBattlerControllerFuncs
	.word	Intro_TryShinyAnimShowHealthbox
.Lfe91:
	.size	 Task_StartSendOutAnim,.Lfe91-Task_StartSendOutAnim
	.align	2, 0
	.type	 PokedudeHandleDrawPartyStatusSummary,function
	.thumb_func
PokedudeHandleDrawPartyStatusSummary:
	push	{r4, r5, lr}
	ldr	r1, .L714
	ldr	r0, .L714+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L712	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L712	@cond_branch
	bl	PokedudeBufferExecCompleted
	b	.L713
.L715:
	.align	2, 0
.L714:
	.word	gBattleBufferA
	.word	gActiveBattler
.L712:
	ldr	r0, .L716
	ldr	r0, [r0]
	ldr	r5, .L716+0x4
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r5]
	lsl	r4, r0, #0x9
	ldr	r3, .L716+0x8
	add	r1, r4, r3
	sub	r2, r3, #0x3
	add	r2, r4, r2
	ldrb	r2, [r2]
	sub	r3, r3, #0x2
	add	r4, r4, r3
	ldrb	r3, [r4]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L716+0xc
	ldrb	r1, [r5]
	add	r1, r1, r2
	strb	r0, [r1]
	bl	PokedudeBufferExecCompleted
.L713:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L717:
	.align	2, 0
.L716:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleBufferA+0x4
	.word	gBattlerStatusSummaryTaskId
.Lfe92:
	.size	 PokedudeHandleDrawPartyStatusSummary,.Lfe92-PokedudeHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 PokedudeHandleHidePartyStatusSummary,function
	.thumb_func
PokedudeHandleHidePartyStatusSummary:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe93:
	.size	 PokedudeHandleHidePartyStatusSummary,.Lfe93-PokedudeHandleHidePartyStatusSummary
	.align	2, 0
	.type	 PokedudeHandleEndBounceEffect,function
	.thumb_func
PokedudeHandleEndBounceEffect:
	push	{r4, lr}
	ldr	r4, .L720
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	EndBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	EndBounceEffect
	bl	PokedudeBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L721:
	.align	2, 0
.L720:
	.word	gActiveBattler
.Lfe94:
	.size	 PokedudeHandleEndBounceEffect,.Lfe94-PokedudeHandleEndBounceEffect
	.align	2, 0
	.type	 PokedudeHandleSpriteInvisibility,function
	.thumb_func
PokedudeHandleSpriteInvisibility:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 PokedudeHandleSpriteInvisibility,.Lfe95-PokedudeHandleSpriteInvisibility
	.align	2, 0
	.type	 PokedudeHandleBattleAnimation,function
	.thumb_func
PokedudeHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L726
	ldr	r6, .L726+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r5, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r5, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L724	@cond_branch
	bl	PokedudeBufferExecCompleted
	b	.L725
.L727:
	.align	2, 0
.L726:
	.word	gBattleBufferA
	.word	gActiveBattler
.L724:
	ldr	r0, .L728
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L728+0x4
	str	r0, [r1]
.L725:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L729:
	.align	2, 0
.L728:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe96:
	.size	 PokedudeHandleBattleAnimation,.Lfe96-PokedudeHandleBattleAnimation
	.align	2, 0
	.type	 PokedudeHandleLinkStandbyMsg,function
	.thumb_func
PokedudeHandleLinkStandbyMsg:
	push	{r4, lr}
	ldr	r1, .L737
	ldr	r4, .L737+0x4
	ldrb	r2, [r4]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	blt	.L731	@cond_branch
	cmp	r0, #0x1
	bgt	.L731	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x1
	bl	EndBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	EndBounceEffect
.L731:
	bl	PokedudeBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L738:
	.align	2, 0
.L737:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe97:
	.size	 PokedudeHandleLinkStandbyMsg,.Lfe97-PokedudeHandleLinkStandbyMsg
	.align	2, 0
	.type	 PokedudeHandleResetActionMoveSelection,function
	.thumb_func
PokedudeHandleResetActionMoveSelection:
	push	{lr}
	bl	PokedudeBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe98:
	.size	 PokedudeHandleResetActionMoveSelection,.Lfe98-PokedudeHandleResetActionMoveSelection
	.align	2, 0
	.type	 PokedudeHandleCmd55,function
	.thumb_func
PokedudeHandleCmd55:
	push	{r4, lr}
	ldr	r2, .L742
	ldr	r1, .L742+0x4
	ldr	r4, .L742+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	PokedudeBufferExecCompleted
	ldr	r0, .L742+0xc
	ldr	r0, [r0]
	mov	r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L741	@cond_branch
	ldr	r0, .L742+0x10
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L742+0x14
	str	r0, [r1]
.L741:
	pop	{r4}
	pop	{r0}
	bx	r0
.L743:
	.align	2, 0
.L742:
	.word	gBattleOutcome
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattlerControllerFuncs
	.word	Pokedude_SetBattleEndCallbacks
.Lfe99:
	.size	 PokedudeHandleCmd55,.Lfe99-PokedudeHandleCmd55
	.align	2, 0
	.type	 PokedudeCmdEnd,function
	.thumb_func
PokedudeCmdEnd:
	bx	lr
.Lfe100:
	.size	 PokedudeCmdEnd,.Lfe100-PokedudeCmdEnd
	.section .rodata
	.align	2, 0
	.type	 sInputScripts_ChooseAction_Battle,object
sInputScripts_ChooseAction_Battle:
	.byte	0x0
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x4
	.byte	0x4
	.space	2
	.byte	0x0
	.byte	0x0
	.space	2
	.size	 sInputScripts_ChooseAction_Battle,16
	.align	2, 0
	.type	 sInputScripts_ChooseAction_Status,object
sInputScripts_ChooseAction_Status:
	.byte	0x0
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x1
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x0
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.size	 sInputScripts_ChooseAction_Status,24
	.align	2, 0
	.type	 sInputScripts_ChooseAction_Matchups,object
sInputScripts_ChooseAction_Matchups:
	.byte	0x0
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x2
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x0
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.size	 sInputScripts_ChooseAction_Matchups,24
	.align	2, 0
	.type	 sInputScripts_ChooseAction_Catching,object
sInputScripts_ChooseAction_Catching:
	.byte	0x0
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x0
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x1
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.size	 sInputScripts_ChooseAction_Catching,24
	.align	2, 0
	.type	 sInputScripts_ChooseAction,object
sInputScripts_ChooseAction:
	.word	sInputScripts_ChooseAction_Battle
	.word	sInputScripts_ChooseAction_Status
	.word	sInputScripts_ChooseAction_Matchups
	.word	sInputScripts_ChooseAction_Catching
	.size	 sInputScripts_ChooseAction,16
	.align	2, 0
	.type	 sInputScripts_ChooseMove_Battle,object
sInputScripts_ChooseMove_Battle:
	.byte	0x2
	.byte	0x2
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0xff
	.byte	0xff
	.space	2
	.byte	0x0
	.byte	0x0
	.space	2
	.size	 sInputScripts_ChooseMove_Battle,16
	.align	2, 0
	.type	 sInputScripts_ChooseMove_Status,object
sInputScripts_ChooseMove_Status:
	.byte	0x2
	.byte	0x2
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x2
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x2
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0xff
	.byte	0xff
	.space	2
	.byte	0x0
	.byte	0x0
	.space	2
	.size	 sInputScripts_ChooseMove_Status,32
	.align	2, 0
	.type	 sInputScripts_ChooseMove_Matchups,object
sInputScripts_ChooseMove_Matchups:
	.byte	0x2
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x0
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x0
	.byte	0x0
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0xff
	.byte	0xff
	.space	2
	.byte	0x0
	.byte	0x0
	.space	2
	.size	 sInputScripts_ChooseMove_Matchups,32
	.align	2, 0
	.type	 sInputScripts_ChooseMove_Catching,object
sInputScripts_ChooseMove_Catching:
	.byte	0x0
	.byte	0x2
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0x2
	.byte	0x2
	.space	2
	.byte	0x40
	.byte	0x0
	.space	2
	.byte	0xff
	.byte	0xff
	.space	2
	.byte	0x0
	.byte	0x0
	.space	2
	.size	 sInputScripts_ChooseMove_Catching,24
	.align	2, 0
	.type	 sInputScripts_ChooseMove,object
sInputScripts_ChooseMove:
	.word	sInputScripts_ChooseMove_Battle
	.word	sInputScripts_ChooseMove_Status
	.word	sInputScripts_ChooseMove_Matchups
	.word	sInputScripts_ChooseMove_Catching
	.size	 sInputScripts_ChooseMove,16
	.align	2, 0
	.type	 sPokedudeTextScripts_Battle,object
sPokedudeTextScripts_Battle:
	.byte	0x12
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x10
	.byte	0x1
	.short	0x4
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x12
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x10
	.byte	0x0
	.short	0xd
	.word	PokedudeAction_PrintVoiceoverMessage
	.size	 sPokedudeTextScripts_Battle,32
	.align	2, 0
	.type	 sPokedudeTextScripts_Status,object
sPokedudeTextScripts_Status:
	.byte	0x12
	.byte	0x0
	.space	2
	.word	0x0
	.byte	0x12
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintMessageWithHealthboxPals
	.byte	0x15
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x10
	.byte	0x1
	.short	0x4
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x10
	.byte	0x0
	.short	0xd
	.word	PokedudeAction_PrintVoiceoverMessage
	.size	 sPokedudeTextScripts_Status,40
	.align	2, 0
	.type	 sPokedudeTextScripts_Matchups,object
sPokedudeTextScripts_Matchups:
	.byte	0x10
	.byte	0x1
	.short	0x4
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x12
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x16
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x10
	.byte	0x1
	.short	0x4
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x12
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x14
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x10
	.byte	0x0
	.short	0xd
	.word	PokedudeAction_PrintVoiceoverMessage
	.size	 sPokedudeTextScripts_Matchups,56
	.align	2, 0
	.type	 sPokedudeTextScripts_Catching,object
sPokedudeTextScripts_Catching:
	.byte	0x12
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x12
	.byte	0x0
	.space	2
	.word	0x0
	.byte	0x12
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x10
	.byte	0x1
	.short	0x6b
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x15
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.byte	0x37
	.byte	0x0
	.space	2
	.word	PokedudeAction_PrintVoiceoverMessage
	.size	 sPokedudeTextScripts_Catching,48
	.align	2, 0
	.type	 sPokedudeTextScripts,object
sPokedudeTextScripts:
	.word	sPokedudeTextScripts_Battle
	.word	sPokedudeTextScripts_Status
	.word	sPokedudeTextScripts_Matchups
	.word	sPokedudeTextScripts_Catching
	.size	 sPokedudeTextScripts,16
	.align	2, 0
	.type	 sPokedudeTexts_Battle,object
sPokedudeTexts_Battle:
	.word	Pokedude_Text_SpeedierBattlerGoesFirst
	.word	Pokedude_Text_MyRattataFasterThanPidgey
	.word	Pokedude_Text_BattlersTakeTurnsAttacking
	.word	Pokedude_Text_MyRattataWonGetsEXP
	.size	 sPokedudeTexts_Battle,16
	.align	2, 0
	.type	 sPokedudeTexts_Status,object
sPokedudeTexts_Status:
	.word	Pokedude_Text_UhOhRattataPoisoned
	.word	Pokedude_Text_UhOhRattataPoisoned
	.word	Pokedude_Text_HealStatusRightAway
	.word	Pokedude_Text_UsingItemTakesTurn
	.word	Pokedude_Text_YayWeManagedToWin
	.size	 sPokedudeTexts_Status,20
	.align	2, 0
	.type	 sPokedudeTexts_TypeMatchup,object
sPokedudeTexts_TypeMatchup:
	.word	Pokedude_Text_WaterNotVeryEffectiveAgainstGrass
	.word	Pokedude_Text_GrassEffectiveAgainstWater
	.word	Pokedude_Text_LetsTryShiftingMons
	.word	Pokedude_Text_ShiftingUsesTurn
	.word	Pokedude_Text_ButterfreeDoubleResistsGrass
	.word	Pokedude_Text_ButterfreeGoodAgainstOddish
	.word	Pokedude_Text_YeahWeWon
	.size	 sPokedudeTexts_TypeMatchup,28
	.align	2, 0
	.type	 sPokedudeTexts_Catching,object
sPokedudeTexts_Catching:
	.word	Pokedude_Text_WeakenMonBeforeCatching
	.word	Pokedude_Text_WeakenMonBeforeCatching
	.word	Pokedude_Text_BestIfTargetStatused
	.word	Pokedude_Text_CantDoubleUpOnStatus
	.word	Pokedude_Text_LetMeThrowBall
	.word	Pokedude_Text_PickBestKindOfBall
	.size	 sPokedudeTexts_Catching,24
	.align	2, 0
	.type	 sParties_Battle,object
sParties_Battle:
	.byte	0x0
	.byte	0xf
	.short	0x13
	.short	0x21
	.short	0x27
	.short	0x9e
	.short	0x62
	.byte	0x1
	.byte	0x0
	.space	2
	.byte	0x1
	.byte	0x12
	.short	0x10
	.short	0x21
	.short	0x1c
	.short	0x10
	.short	0x62
	.byte	0x4
	.byte	0x0
	.space	2
	.byte	0xff
	.space	15
	.size	 sParties_Battle,48
	.align	2, 0
	.type	 sParties_Status,object
sParties_Status:
	.byte	0x0
	.byte	0xf
	.short	0x13
	.short	0x21
	.short	0x27
	.short	0x9e
	.short	0x62
	.byte	0x1
	.byte	0x0
	.space	2
	.byte	0x1
	.byte	0xe
	.short	0x2b
	.short	0x47
	.short	0xe6
	.short	0x4d
	.space	2
	.byte	0x13
	.byte	0x0
	.space	2
	.byte	0xff
	.space	15
	.size	 sParties_Status,48
	.align	2, 0
	.type	 sParties_Matchups,object
sParties_Matchups:
	.byte	0x0
	.byte	0xf
	.short	0x3c
	.short	0x37
	.short	0x5f
	.short	0x91
	.space	2
	.byte	0x13
	.byte	0x0
	.space	2
	.byte	0x0
	.byte	0xf
	.short	0xc
	.short	0x5d
	.short	0x4d
	.short	0x4e
	.short	0x4f
	.byte	0x13
	.byte	0x0
	.space	2
	.byte	0x1
	.byte	0xe
	.short	0x2b
	.short	0x47
	.short	0xe6
	.short	0x4d
	.space	2
	.byte	0x13
	.byte	0x0
	.space	2
	.byte	0xff
	.space	15
	.size	 sParties_Matchups,64
	.align	2, 0
	.type	 sParties_Catching,object
sParties_Catching:
	.byte	0x0
	.byte	0xf
	.short	0xc
	.short	0x5d
	.short	0x4d
	.short	0x4f
	.short	0x4e
	.byte	0x13
	.byte	0x0
	.space	2
	.byte	0x1
	.byte	0xb
	.short	0x27
	.short	0x2f
	.short	0x6f
	.short	0x1
	.space	2
	.byte	0x17
	.byte	0x0
	.space	2
	.byte	0xff
	.space	15
	.size	 sParties_Catching,48
	.align	2, 0
	.type	 sPokedudeBattlePartyPointers,object
sPokedudeBattlePartyPointers:
	.word	sParties_Battle
	.word	sParties_Status
	.word	sParties_Matchups
	.word	sParties_Catching
	.size	 sPokedudeBattlePartyPointers,16
.text
	.align	2, 0
	.type	 PokedudeSimulateInputChooseAction,function
	.thumb_func
PokedudeSimulateInputChooseAction:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L761
	ldr	r0, .L761+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x96
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r7, [r0]
	ldr	r4, .L761+0x8
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L746	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0x1
	mov	r2, #0x7
	mov	r3, #0x1
	bl	DoBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x7
	mov	r3, #0x1
	bl	DoBounceEffect
.L746:
	ldr	r6, .L761+0xc
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	add	r3, r0, r2
	ldrb	r0, [r3, #0x4]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	bne	.L747	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L748	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L748:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x2]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L751	@cond_branch
	cmp	r0, #0x1
	bgt	.L756	@cond_branch
	cmp	r0, #0
	beq	.L750	@cond_branch
	b	.L749
.L762:
	.align	2, 0
.L761:
	.word	sInputScripts_ChooseAction
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gPokedudeBattlerStates
.L756:
	cmp	r0, #0x2
	beq	.L752	@cond_branch
	cmp	r0, #0x3
	beq	.L753	@cond_branch
	b	.L749
.L750:
	mov	r0, #0x1
	mov	r1, #0x0
	b	.L760
.L751:
	mov	r0, #0x1
	mov	r1, #0x1
	b	.L760
.L752:
	mov	r0, #0x1
	mov	r1, #0x2
.L760:
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	b	.L749
.L753:
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
.L749:
	bl	PokedudeBufferExecCompleted
	ldr	r3, .L763
	ldr	r2, .L763+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r3
	ldr	r2, [r0]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bne	.L758	@cond_branch
	mov	r0, #0x0
	strb	r0, [r2]
	b	.L758
.L764:
	.align	2, 0
.L763:
	.word	gPokedudeBattlerStates
	.word	gActiveBattler
.L747:
	ldr	r5, .L765
	add	r0, r2, r5
	ldrb	r0, [r0]
	ldrb	r2, [r3]
	cmp	r0, r2
	beq	.L759	@cond_branch
	ldrb	r0, [r3, #0x4]
	lsr	r0, r0, #0x1
	cmp	r0, r1
	bne	.L759	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	ActionSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r2, r1, r5
	lsl	r0, r1, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	ActionSelectionCreateCursorAt
.L759:
	ldr	r1, .L765+0x4
	ldr	r0, .L765+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
.L758:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L766:
	.align	2, 0
.L765:
	.word	gActionSelectionCursor
	.word	gPokedudeBattlerStates
	.word	gActiveBattler
.Lfe101:
	.size	 PokedudeSimulateInputChooseAction,.Lfe101-PokedudeSimulateInputChooseAction
	.align	2, 0
	.type	 PokedudeSimulateInputChooseMove,function
	.thumb_func
PokedudeSimulateInputChooseMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L773
	ldr	r0, .L773+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x96
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r7, [r0]
	ldr	r0, .L773+0x8
	mov	r8, r0
	ldr	r6, .L773+0xc
	ldrb	r2, [r6]
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	add	r3, r0, r2
	ldrb	r0, [r3, #0x4]
	ldrb	r4, [r1, #0x2]
	cmp	r0, r4
	bne	.L768	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L769	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L769:
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	mov	r4, #0x0
	strb	r4, [r0, #0x2]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	bl	PokedudeBufferExecCompleted
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L771	@cond_branch
	strb	r4, [r2, #0x1]
	b	.L771
.L774:
	.align	2, 0
.L773:
	.word	sInputScripts_ChooseMove
	.word	gBattleStruct
	.word	gPokedudeBattlerStates
	.word	gActiveBattler
.L768:
	ldr	r5, .L775
	add	r1, r2, r5
	ldrb	r0, [r3]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L772	@cond_branch
	ldrb	r0, [r3, #0x4]
	lsr	r0, r0, #0x1
	cmp	r0, r4
	bne	.L772	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	MoveSelectionDestroyCursorAt
	ldrb	r1, [r6]
	add	r2, r1, r5
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	MoveSelectionCreateCursorAt
.L772:
	ldr	r1, .L775+0x4
	ldr	r0, .L775+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
.L771:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L776:
	.align	2, 0
.L775:
	.word	gMoveSelectionCursor
	.word	gPokedudeBattlerStates
	.word	gActiveBattler
.Lfe102:
	.size	 PokedudeSimulateInputChooseMove,.Lfe102-PokedudeSimulateInputChooseMove
	.align	2, 0
	.type	 HandlePokedudeVoiceoverEtc,function
	.thumb_func
HandlePokedudeVoiceoverEtc:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L784
	ldr	r4, .L784+0x4
	ldr	r2, [r4]
	add	r0, r2, #0
	add	r0, r0, #0x96
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r6, [r0]
	ldr	r3, .L784+0x8
	ldrb	r5, [r3]
	lsl	r1, r5, #0x9
	ldr	r0, .L784+0xc
	add	r7, r1, r0
	mov	ip, r7
	sub	r0, r0, #0x2
	add	r1, r1, r0
	add	r2, r2, #0x97
	ldrb	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r1, [r1]
	add	r7, r4, #0
	add	r4, r3, #0
	ldrb	r2, [r0]
	cmp	r1, r2
	bne	.L783	@cond_branch
	ldrb	r2, [r0, #0x1]
	cmp	r5, r2
	bne	.L783	@cond_branch
	cmp	r1, #0x10
	bne	.L780	@cond_branch
	ldrh	r0, [r0, #0x2]
	mov	r1, ip
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L783	@cond_branch
.L780:
	ldr	r0, [r7]
	add	r3, r0, #0
	add	r3, r3, #0x97
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	add	r0, r0, r6
	ldr	r2, [r0, #0x4]
	cmp	r2, #0
	beq	.L781	@cond_branch
	ldr	r1, .L784+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	str	r2, [r0]
	ldr	r2, .L784+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, [r7]
	add	r0, r0, #0x97
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2]
	strb	r0, [r1, #0x3]
	ldr	r1, [r7]
	add	r1, r1, #0x97
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L782
.L785:
	.align	2, 0
.L784:
	.word	sPokedudeTextScripts
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattleBufferA+0x2
	.word	gBattlerControllerFuncs
	.word	gPokedudeBattlerStates
.L781:
	add	r0, r1, #0x1
	strb	r0, [r3]
.L783:
	mov	r0, #0x0
.L782:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe103:
	.size	 HandlePokedudeVoiceoverEtc,.Lfe103-HandlePokedudeVoiceoverEtc
	.align	2, 0
	.type	 ReturnFromPokedudeAction,function
	.thumb_func
ReturnFromPokedudeAction:
	ldr	r1, .L787
	ldr	r2, .L787+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x2]
	ldr	r1, .L787+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L787+0xc
	str	r1, [r0]
	bx	lr
.L788:
	.align	2, 0
.L787:
	.word	gPokedudeBattlerStates
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	PokedudeBufferRunCommand
.Lfe104:
	.size	 ReturnFromPokedudeAction,.Lfe104-ReturnFromPokedudeAction
	.align	2, 0
	.type	 PokedudeAction_PrintVoiceoverMessage,function
	.thumb_func
PokedudeAction_PrintVoiceoverMessage:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L806
	ldr	r2, .L806+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x2]
	add	r5, r1, #0
	add	r4, r2, #0
	cmp	r0, #0x4
	bls	.LCB9050
	b	.L790	@long jump
.LCB9050:
	lsl	r0, r0, #0x2
	ldr	r1, .L806+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L807:
	.align	2, 0
.L806:
	.word	gPokedudeBattlerStates
	.word	gActiveBattler
	.word	.L801
	.align	2, 0
	.align	2, 0
.L801:
	.word	.L791
	.word	.L793
	.word	.L795
	.word	.L796
	.word	.L798
.L791:
	ldr	r0, .L808
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L790	@cond_branch
	mov	r0, #0x81
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x8
	b	.L803
.L809:
	.align	2, 0
.L808:
	.word	gPaletteFade
.L793:
	ldr	r0, .L810
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L790	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	ldr	r0, .L810+0x4
	ldrh	r0, [r0]
	strb	r0, [r1, #0x4]
	bl	BtlCtrl_DrawVoiceoverMessageFrame
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	b	.L804
.L811:
	.align	2, 0
.L810:
	.word	gPaletteFade
	.word	gBattle_BG0_Y
.L795:
	ldr	r1, .L812
	mov	r0, #0x0
	strh	r0, [r1]
	bl	GetPokedudeText
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L812+0x4
	mov	r1, #0x18
	bl	BattlePutTextOnWindow
	b	.L805
.L813:
	.align	2, 0
.L812:
	.word	gBattle_BG0_Y
	.word	gDisplayedStringBattle
.L796:
	mov	r0, #0x18
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	bne	.L790	@cond_branch
	ldr	r0, .L814
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L790	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x81
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x4
	mov	r2, #0x8
	mov	r3, #0x0
.L803:
	bl	BeginNormalPaletteFade
.L805:
	ldr	r1, .L814+0x4
	ldr	r0, .L814+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
.L804:
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
	b	.L790
.L815:
	.align	2, 0
.L814:
	.word	gMain
	.word	gPokedudeBattlerStates
	.word	gActiveBattler
.L798:
	ldr	r0, .L816
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L790	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0xd
	bne	.L800	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r0, .L816+0x4
	bl	PlayBGM
.L800:
	ldr	r1, .L816+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	strh	r0, [r1]
	bl	BtlCtrl_RemoveVoiceoverMessageFrame
	bl	ReturnFromPokedudeAction
.L790:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L817:
	.align	2, 0
.L816:
	.word	gPaletteFade
	.word	0x137
	.word	gBattle_BG0_Y
.Lfe105:
	.size	 PokedudeAction_PrintVoiceoverMessage,.Lfe105-PokedudeAction_PrintVoiceoverMessage
	.align	2, 0
	.type	 PokedudeAction_PrintMessageWithHealthboxPals,function
	.thumb_func
PokedudeAction_PrintMessageWithHealthboxPals:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L839
	ldr	r2, .L839+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x2]
	add	r3, r1, #0
	cmp	r0, #0x6
	bls	.LCB9270
	b	.L819	@long jump
.LCB9270:
	lsl	r0, r0, #0x2
	ldr	r1, .L839+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L840:
	.align	2, 0
.L839:
	.word	gPokedudeBattlerStates
	.word	gActiveBattler
	.word	.L834
	.align	2, 0
	.align	2, 0
.L834:
	.word	.L820
	.word	.L822
	.word	.L824
	.word	.L826
	.word	.L827
	.word	.L829
	.word	.L831
.L820:
	ldr	r0, .L841
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.LCB9298
	b	.L819	@long jump
.LCB9298:
	ldr	r0, .L841+0x4
	ldr	r4, [r0]
	add	r5, r4, #0
	add	r5, r5, #0x95
	add	r4, r4, #0x94
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	DoLoadHealthboxPalsForLevelUp
	mov	r0, #0x81
	neg	r0, r0
	str	r6, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x8
	b	.L836
.L842:
	.align	2, 0
.L841:
	.word	gPaletteFade
	.word	gBattleStruct
.L822:
	ldr	r0, .L843
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB9338
	b	.L819	@long jump
.LCB9338:
	ldr	r2, .L843+0x4
	ldr	r0, .L843+0x8
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x95
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r0, r0, #0x94
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	orr	r1, r1, r0
	lsl	r0, r1, #0x10
	str	r3, [sp]
	b	.L837
.L844:
	.align	2, 0
.L843:
	.word	gPaletteFade
	.word	gBitTable
	.word	gBattleStruct
.L824:
	ldr	r0, .L845
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9380
	b	.L819	@long jump
.LCB9380:
	bl	BtlCtrl_DrawVoiceoverMessageFrame
	b	.L838
.L846:
	.align	2, 0
.L845:
	.word	gPaletteFade
.L826:
	bl	GetPokedudeText
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L847
	mov	r1, #0x18
	bl	BattlePutTextOnWindow
	b	.L838
.L848:
	.align	2, 0
.L847:
	.word	gDisplayedStringBattle
.L827:
	mov	r0, #0x18
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	bne	.L819	@cond_branch
	ldr	r0, .L849
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L819	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L849+0x4
	ldr	r0, .L849+0x8
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x95
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r0, r0, #0x94
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	orr	r1, r1, r0
	lsl	r0, r1, #0x10
	str	r4, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x8
	b	.L836
.L850:
	.align	2, 0
.L849:
	.word	gMain
	.word	gBitTable
	.word	gBattleStruct
.L829:
	ldr	r0, .L851
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L819	@cond_branch
	mov	r0, #0x81
	neg	r0, r0
	str	r1, [sp]
.L837:
	mov	r1, #0x4
	mov	r2, #0x8
	mov	r3, #0x0
.L836:
	bl	BeginNormalPaletteFade
.L838:
	ldr	r1, .L851+0x4
	ldr	r0, .L851+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
	b	.L819
.L852:
	.align	2, 0
.L851:
	.word	gPaletteFade
	.word	gPokedudeBattlerStates
	.word	gActiveBattler
.L831:
	ldr	r0, .L853
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L819	@cond_branch
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0xd
	bne	.L833	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r0, .L853+0x4
	bl	PlayBGM
.L833:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DoFreeHealthboxPalsForLevelUp
	bl	BtlCtrl_RemoveVoiceoverMessageFrame
	bl	ReturnFromPokedudeAction
.L819:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L854:
	.align	2, 0
.L853:
	.word	gPaletteFade
	.word	0x137
.Lfe106:
	.size	 PokedudeAction_PrintMessageWithHealthboxPals,.Lfe106-PokedudeAction_PrintMessageWithHealthboxPals
	.align	2, 0
	.type	 GetPokedudeText,function
	.thumb_func
GetPokedudeText:
	push	{lr}
	ldr	r0, .L869
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x96
	ldrb	r1, [r1]
	cmp	r1, #0x1
	beq	.L859	@cond_branch
	cmp	r1, #0x1
	ble	.L858	@cond_branch
	cmp	r1, #0x2
	beq	.L860	@cond_branch
	cmp	r1, #0x3
	beq	.L861	@cond_branch
.L858:
	ldr	r1, .L869+0x4
	b	.L866
.L870:
	.align	2, 0
.L869:
	.word	gBattleStruct
	.word	sPokedudeTexts_Battle
.L859:
	ldr	r1, .L871
	b	.L866
.L872:
	.align	2, 0
.L871:
	.word	sPokedudeTexts_Status
.L860:
	ldr	r1, .L873
	b	.L866
.L874:
	.align	2, 0
.L873:
	.word	sPokedudeTexts_TypeMatchup
.L861:
	ldr	r1, .L875
.L866:
	add	r0, r0, #0x97
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	pop	{r1}
	bx	r1
.L876:
	.align	2, 0
.L875:
	.word	sPokedudeTexts_Catching
.Lfe107:
	.size	 GetPokedudeText,.Lfe107-GetPokedudeText
	.align	2, 0
	.globl	InitPokedudePartyAndOpponent
	.type	 InitPokedudePartyAndOpponent,function
	.thumb_func
InitPokedudePartyAndOpponent:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	sl, r0
	mov	r9, r0
	ldr	r1, .L890
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	str	r0, [r1]
	bl	ZeroPlayerPartyMons
	bl	ZeroEnemyPartyMons
	ldr	r1, .L890+0x4
	ldr	r0, .L890+0x8
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r8, r0
	mov	r7, #0x0
.L878:
	lsl	r0, r7, #0x4
	mov	r2, r8
	add	r1, r0, r2
	ldrb	r1, [r1]
	add	r4, r0, #0
	cmp	r1, #0
	bne	.L881	@cond_branch
	mov	r0, #0x64
	mov	r1, sl
	mul	r1, r1, r0
	ldr	r0, .L890+0xc
	add	r6, r1, r0
	mov	r0, #0x1
	add	sl, sl, r0
	b	.L882
.L891:
	.align	2, 0
.L890:
	.word	gBattleTypeFlags
	.word	sPokedudeBattlePartyPointers
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
.L881:
	mov	r0, #0x64
	mov	r1, r9
	mul	r1, r1, r0
	ldr	r0, .L892
	add	r6, r1, r0
	mov	r2, #0x1
	add	r9, r9, r2
.L882:
	mov	r0, r8
	add	r3, r4, r0
	ldrh	r1, [r3, #0x2]
	ldrb	r2, [r3, #0x1]
	ldrb	r0, [r3, #0xd]
	str	r0, [sp]
	ldrb	r0, [r3, #0xc]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	mov	r3, #0x0
	bl	CreateMonWithGenderNatureLetter
	mov	r5, #0x0
	add	r7, r7, #0x1
	mov	r0, r8
	add	r0, r0, #0x4
	add	r4, r4, r0
.L886:
	ldrh	r1, [r4]
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	bl	SetMonMoveSlot
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L886	@cond_branch
	lsl	r0, r7, #0x4
	add	r0, r0, r8
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L878	@cond_branch
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L893:
	.align	2, 0
.L892:
	.word	gEnemyParty
.Lfe108:
	.size	 InitPokedudePartyAndOpponent,.Lfe108-InitPokedudePartyAndOpponent
	.comm	gPokedudeBattlerStates, 16	@ 16
.text
	.align	2, 0 @ Don't pad with nop

