@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sLinkSendTaskId,object
	.size	 sLinkSendTaskId,1
sLinkSendTaskId:
	.byte	0x0
	.type	 sLinkReceiveTaskId,object
	.size	 sLinkReceiveTaskId,1
sLinkReceiveTaskId:
	.byte	0x0
	.type	 sUnused,object
	.size	 sUnused,1
sUnused:
	.byte	0x0
	.globl	gUnusedControllerStruct
	.align	2, 0
	.type	 gUnusedControllerStruct,object
	.size	 gUnusedControllerStruct,4
gUnusedControllerStruct:
	.space	4
	.type	 sBattleBuffersTransferData,object
	.size	 sBattleBuffersTransferData,256
sBattleBuffersTransferData:
	.space	256
.text
	.align	2, 0
	.globl	HandleLinkBattleSetup
	.type	 HandleLinkBattleSetup,function
	.thumb_func
HandleLinkBattleSetup:
	push	{lr}
	ldr	r0, .L6
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r0, .L6+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L4	@cond_branch
	bl	SetWirelessCommType1
.L4:
	ldr	r0, .L6+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L5	@cond_branch
	bl	OpenLink
.L5:
	ldr	r0, .L6+0xc
	mov	r1, #0x0
	bl	CreateTask
	bl	CreateTasksForSendRecvLinkBuffers
.L3:
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	gBattleTypeFlags
	.word	gWirelessCommType
	.word	gReceivedRemoteLinkPlayers
	.word	Task_WaitForLinkPlayerConnection
.Lfe1:
	.size	 HandleLinkBattleSetup,.Lfe1-HandleLinkBattleSetup
	.align	2, 0
	.globl	SetUpBattleVars
	.type	 SetUpBattleVars,function
	.thumb_func
SetUpBattleVars:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L14
	ldr	r0, .L14+0x4
	str	r0, [r1]
	mov	r2, #0x0
	ldr	r0, .L14+0x8
	mov	r8, r0
	mov	r3, #0x0
	ldr	r1, .L14+0xc
	mov	ip, r1
	ldr	r7, .L14+0x10
	mov	r6, #0xff
	ldr	r5, .L14+0x14
	ldr	r4, .L14+0x18
.L12:
	mov	r0, r8
	mov	r1, ip
	add	r1, r1, #0x4
	mov	ip, r1
	sub	r1, r1, #0x4
	stmia	r1!, {r0}
	add	r1, r2, r7
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	add	r0, r2, r5
	strb	r3, [r0]
	add	r0, r2, r4
	strb	r3, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L12	@cond_branch
	bl	HandleLinkBattleSetup
	ldr	r0, .L14+0x1c
	mov	r4, #0x0
	str	r4, [r0]
	bl	ClearBattleAnimationVars
	bl	ClearBattleMonForms
	bl	BattleAI_HandleItemUseBeforeAISetup
	ldr	r0, .L14+0x20
	str	r4, [r0]
	ldr	r0, .L14+0x24
	strb	r4, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gBattleMainFunc
	.word	BeginBattleIntroDummy
	.word	BattleControllerDummy
	.word	gBattlerControllerFuncs
	.word	gBattlerPositions
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	gBattleControllerExecFlags
	.word	gUnusedFirstBattleVar1
	.word	gUnusedFirstBattleVar2
.Lfe2:
	.size	 SetUpBattleVars,.Lfe2-SetUpBattleVars
	.align	2, 0
	.globl	InitBattleControllers
	.type	 InitBattleControllers,function
	.thumb_func
InitBattleControllers:
	push	{r4, r5, lr}
	ldr	r0, .L25
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L17	@cond_branch
	bl	InitLinkBtlControllers
	b	.L18
.L26:
	.align	2, 0
.L25:
	.word	gBattleTypeFlags
.L17:
	bl	InitSinglePlayerBtlControllers
.L18:
	bl	SetBattlePartyIds
	ldr	r0, .L27
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L19	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L27+0x4
	ldrb	r1, [r0]
	cmp	r4, r1
	bge	.L19	@cond_branch
	add	r5, r0, #0
.L23:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	add	r4, r4, #0x1
	ldrb	r0, [r5]
	cmp	r4, r0
	blt	.L23	@cond_branch
.L19:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	gBattleTypeFlags
	.word	gBattlersCount
.Lfe3:
	.size	 InitBattleControllers,.Lfe3-InitBattleControllers
	.align	2, 0
	.type	 InitSinglePlayerBtlControllers,function
	.thumb_func
InitSinglePlayerBtlControllers:
	push	{r4, lr}
	ldr	r0, .L43
	ldr	r2, [r0]
	mov	r4, #0x1
	add	r3, r2, #0
	and	r3, r3, r4
	cmp	r3, #0
	bne	.L30	@cond_branch
	ldr	r1, .L43+0x4
	ldr	r0, .L43+0x8
	str	r0, [r1]
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L31	@cond_branch
	ldr	r2, .L43+0xc
	ldr	r1, .L43+0x10
	str	r1, [r2]
	ldr	r0, .L43+0x14
	strb	r3, [r0]
	str	r1, [r2, #0x4]
	strb	r4, [r0, #0x1]
	ldr	r1, .L43+0x18
	mov	r0, #0x2
	b	.L40
.L44:
	.align	2, 0
.L43:
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gBattlerControllerFuncs
	.word	SetControllerToPokedude
	.word	gBattlerPositions
	.word	gBattlersCount
.L31:
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L33	@cond_branch
	ldr	r1, .L45
	ldr	r0, .L45+0x4
	b	.L41
.L46:
	.align	2, 0
.L45:
	.word	gBattlerControllerFuncs
	.word	SetControllerToSafari
.L33:
	mov	r0, #0x84
	lsl	r0, r0, #0x2
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L35	@cond_branch
	ldr	r1, .L47
	ldr	r0, .L47+0x4
	b	.L41
.L48:
	.align	2, 0
.L47:
	.word	gBattlerControllerFuncs
	.word	SetControllerToOakOrOldMan
.L35:
	ldr	r1, .L49
	ldr	r0, .L49+0x4
.L41:
	str	r0, [r1]
	add	r2, r1, #0
	ldr	r1, .L49+0x8
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L49+0xc
	str	r0, [r2, #0x4]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	ldr	r1, .L49+0x10
	mov	r0, #0x2
	b	.L40
.L50:
	.align	2, 0
.L49:
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToOpponent
	.word	gBattlersCount
.L30:
	ldr	r1, .L51
	ldr	r0, .L51+0x4
	str	r0, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	and	r3, r3, r2
	cmp	r3, #0
	beq	.L38	@cond_branch
	ldr	r3, .L51+0x8
	ldr	r1, .L51+0xc
	str	r1, [r3]
	ldr	r2, .L51+0x10
	mov	r0, #0x0
	strb	r0, [r2]
	str	r1, [r3, #0x4]
	strb	r4, [r2, #0x1]
	str	r1, [r3, #0x8]
	mov	r0, #0x2
	strb	r0, [r2, #0x2]
	str	r1, [r3, #0xc]
	mov	r0, #0x3
	strb	r0, [r2, #0x3]
	b	.L42
.L52:
	.align	2, 0
.L51:
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gBattlerControllerFuncs
	.word	SetControllerToPokedude
	.word	gBattlerPositions
.L38:
	ldr	r2, .L53
	ldr	r0, .L53+0x4
	str	r0, [r2]
	ldr	r1, .L53+0x8
	strb	r3, [r1]
	ldr	r3, .L53+0xc
	str	r3, [r2, #0x4]
	strb	r4, [r1, #0x1]
	str	r0, [r2, #0x8]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	str	r3, [r2, #0xc]
	mov	r0, #0x3
	strb	r0, [r1, #0x3]
.L42:
	ldr	r1, .L53+0x10
	mov	r0, #0x4
.L40:
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToOpponent
	.word	gBattlersCount
.Lfe4:
	.size	 InitSinglePlayerBtlControllers,.Lfe4-InitSinglePlayerBtlControllers
	.align	2, 0
	.type	 InitLinkBtlControllers,function
	.thumb_func
InitLinkBtlControllers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L114
	ldr	r0, [r4]
	mov	r5, #0x1
	add	r3, r0, #0
	and	r3, r3, r5
	cmp	r3, #0
	bne	.L56	@cond_branch
	mov	r4, #0x4
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L57	@cond_branch
	ldr	r1, .L114+0x4
	ldr	r0, .L114+0x8
	str	r0, [r1]
	ldr	r2, .L114+0xc
	ldr	r0, .L114+0x10
	str	r0, [r2]
	ldr	r1, .L114+0x14
	strb	r3, [r1]
	ldr	r0, .L114+0x18
	str	r0, [r2, #0x4]
	strb	r5, [r1, #0x1]
	ldr	r1, .L114+0x1c
	mov	r0, #0x2
	b	.L109
.L115:
	.align	2, 0
.L114:
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToLinkOpponent
	.word	gBattlersCount
.L57:
	ldr	r2, .L116
	ldr	r0, .L116+0x4
	str	r0, [r2, #0x4]
	ldr	r1, .L116+0x8
	strb	r4, [r1, #0x1]
	ldr	r0, .L116+0xc
	str	r0, [r2]
	strb	r5, [r1]
	ldr	r1, .L116+0x10
	mov	r0, #0x2
	b	.L109
.L117:
	.align	2, 0
.L116:
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToLinkOpponent
	.word	gBattlersCount
.L56:
	mov	r5, #0x41
	and	r5, r5, r0
	cmp	r5, #0x1
	bne	.L60	@cond_branch
	mov	r6, #0x4
	add	r3, r6, #0
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L61	@cond_branch
	ldr	r1, .L118
	ldr	r0, .L118+0x4
	str	r0, [r1]
	ldr	r2, .L118+0x8
	ldr	r4, .L118+0xc
	str	r4, [r2]
	ldr	r1, .L118+0x10
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r3, .L118+0x14
	str	r3, [r2, #0x4]
	strb	r5, [r1, #0x1]
	str	r4, [r2, #0x8]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	str	r3, [r2, #0xc]
	mov	r0, #0x3
	strb	r0, [r1, #0x3]
	b	.L110
.L119:
	.align	2, 0
.L118:
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToLinkOpponent
.L61:
	ldr	r2, .L120
	ldr	r0, .L120+0x4
	str	r0, [r2, #0x4]
	ldr	r1, .L120+0x8
	strb	r3, [r1, #0x1]
	ldr	r3, .L120+0xc
	str	r3, [r2]
	strb	r5, [r1]
	str	r0, [r2, #0xc]
	mov	r0, #0x2
	strb	r0, [r1, #0x3]
	str	r3, [r2, #0x8]
	mov	r0, #0x3
	strb	r0, [r1, #0x2]
.L110:
	ldr	r0, .L120+0x10
	strb	r6, [r0]
	b	.L59
.L121:
	.align	2, 0
.L120:
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToLinkOpponent
	.word	gBattlersCount
.L60:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, [r4]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L64	@cond_branch
	ldr	r1, .L122
	ldr	r0, .L122+0x4
	str	r0, [r1]
.L64:
	mov	r0, #0x0
	mov	sl, r0
	ldr	r1, .L122+0x8
	mov	ip, r1
	ldr	r7, .L122+0xc
	mov	r8, r0
	ldr	r6, .L122+0x10
	mov	r4, #0x0
	mov	r2, #0x3
	mov	r9, r2
.L68:
	mov	r1, ip
	add	r0, r4, r1
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0x2
	bgt	.L76	@cond_branch
	cmp	r0, #0x1
	bge	.L73	@cond_branch
	cmp	r0, #0
	beq	.L71	@cond_branch
	b	.L69
.L123:
	.align	2, 0
.L122:
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gLinkPlayers
	.word	gBattlerPositions
	.word	gBattlerPartyIndexes
.L76:
	cmp	r0, #0x3
	bne	.L69	@cond_branch
.L71:
	ldr	r0, .L124
	add	r0, r4, r0
	ldrb	r0, [r0, #0x18]
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	b	.L69
.L125:
	.align	2, 0
.L124:
	.word	gLinkPlayers
.L73:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	BufferBattlePartyCurrentOrderBySide
.L69:
	cmp	sl, r5
	bne	.L77	@cond_branch
	ldr	r0, .L126
	add	r3, r4, r0
	ldrh	r1, [r3, #0x18]
	lsl	r1, r1, #0x2
	ldr	r2, .L126+0x4
	add	r1, r1, r2
	ldr	r2, .L126+0x8
	str	r2, [r1]
	ldrh	r1, [r3, #0x18]
	mov	ip, r0
	cmp	r1, #0x2
	bgt	.L85	@cond_branch
	cmp	r1, #0x1
	bge	.L82	@cond_branch
	cmp	r1, #0
	beq	.L80	@cond_branch
	b	.L67
.L127:
	.align	2, 0
.L126:
	.word	gLinkPlayers
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
.L85:
	cmp	r1, #0x3
	bne	.L67	@cond_branch
.L80:
	mov	r1, ip
	add	r0, r4, r1
	ldrh	r1, [r0, #0x18]
	add	r1, r1, r7
	mov	r2, r8
	strb	r2, [r1]
	ldrh	r0, [r0, #0x18]
	b	.L111
.L82:
	add	r1, r1, r7
	mov	r0, #0x2
	strb	r0, [r1]
	ldrh	r0, [r3, #0x18]
	b	.L112
.L77:
	ldr	r2, .L128
	add	r0, r4, r2
	ldrh	r1, [r0, #0x18]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	mov	ip, r2
	cmp	r0, #0
	bne	.L108	@cond_branch
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L88	@cond_branch
	b	.L87
.L129:
	.align	2, 0
.L128:
	.word	gLinkPlayers
.L108:
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L87	@cond_branch
.L88:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	lsl	r0, r0, #0x2
	ldr	r1, .L130
	add	r0, r0, r1
	ldr	r1, .L130+0x4
	str	r1, [r0]
	ldrh	r1, [r2, #0x18]
	cmp	r1, #0x2
	bgt	.L97	@cond_branch
	cmp	r1, #0x1
	bge	.L94	@cond_branch
	cmp	r1, #0
	beq	.L92	@cond_branch
	b	.L67
.L131:
	.align	2, 0
.L130:
	.word	gBattlerControllerFuncs
	.word	SetControllerToLinkPartner
.L97:
	cmp	r1, #0x3
	bne	.L67	@cond_branch
.L92:
	mov	r2, ip
	add	r0, r4, r2
	ldrh	r1, [r0, #0x18]
	add	r1, r1, r7
	mov	r2, r8
	strb	r2, [r1]
	ldrh	r0, [r0, #0x18]
	b	.L111
.L94:
	add	r1, r1, r7
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L113
.L87:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	lsl	r0, r0, #0x2
	ldr	r1, .L132
	add	r0, r0, r1
	ldr	r1, .L132+0x4
	str	r1, [r0]
	ldrh	r0, [r2, #0x18]
	cmp	r0, #0x2
	bgt	.L106	@cond_branch
	cmp	r0, #0x1
	bge	.L103	@cond_branch
	cmp	r0, #0
	beq	.L101	@cond_branch
	b	.L67
.L133:
	.align	2, 0
.L132:
	.word	gBattlerControllerFuncs
	.word	SetControllerToLinkOpponent
.L106:
	cmp	r0, #0x3
	bne	.L67	@cond_branch
.L101:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	add	r0, r0, r7
	mov	r1, #0x1
	strb	r1, [r0]
	ldrh	r0, [r2, #0x18]
.L111:
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	mov	r1, r8
	strh	r1, [r0]
	b	.L67
.L103:
	add	r0, r0, r7
	mov	r1, r9
	strb	r1, [r0]
.L113:
	ldrh	r0, [r2, #0x18]
.L112:
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	mov	r2, r9
	strh	r2, [r0]
.L67:
	add	r4, r4, #0x1c
	mov	r0, #0x1
	add	sl, sl, r0
	mov	r1, sl
	cmp	r1, #0x3
	bgt	.LCB821
	b	.L68	@long jump
.LCB821:
	ldr	r1, .L134
	mov	r0, #0x4
.L109:
	strb	r0, [r1]
.L59:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L135:
	.align	2, 0
.L134:
	.word	gBattlersCount
.Lfe5:
	.size	 InitLinkBtlControllers,.Lfe5-InitLinkBtlControllers
	.align	2, 0
	.type	 SetBattlePartyIds,function
	.thumb_func
SetBattlePartyIds:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L161
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB851
	b	.L137	@long jump
.LCB851:
	mov	r0, #0x0
	mov	r8, r0
	b	.L158
.L162:
	.align	2, 0
.L161:
	.word	gBattleTypeFlags
.L141:
	mov	r5, #0x0
	mov	r0, #0x1
	add	r0, r0, r8
	mov	sl, r0
	ldr	r0, .L163
	add	r0, r0, r8
	mov	r9, r0
	mov	r0, r8
	lsl	r6, r0, #0x1
	mov	r7, #0x0
.L145:
	mov	r0, r8
	cmp	r0, #0x1
	bgt	.L146	@cond_branch
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L147	@cond_branch
	ldr	r0, .L163+0x4
	b	.L159
.L164:
	.align	2, 0
.L163:
	.word	gBattlerPositions
	.word	gPlayerParty
.L147:
	ldr	r0, .L165
.L159:
	add	r4, r7, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L165+0x4
	cmp	r0, r1
	beq	.L144	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L144	@cond_branch
	ldr	r0, .L165+0x8
	add	r0, r6, r0
	strh	r5, [r0]
	b	.L140
.L166:
	.align	2, 0
.L165:
	.word	gEnemyParty
	.word	0x19d
	.word	gBattlerPartyIndexes
.L146:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L152	@cond_branch
	ldr	r0, .L167
	add	r4, r7, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	b	.L160
.L168:
	.align	2, 0
.L167:
	.word	gPlayerParty
.L152:
	ldr	r0, .L169
	add	r4, r7, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
.L160:
	bl	GetMonData
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L169+0x4
	cmp	r0, r1
	beq	.L144	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L144	@cond_branch
	ldr	r1, .L169+0x8
	mov	r0, r8
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r5
	beq	.L144	@cond_branch
	add	r0, r6, r1
	strh	r5, [r0]
	b	.L140
.L170:
	.align	2, 0
.L169:
	.word	gEnemyParty
	.word	0x19d
	.word	gBattlerPartyIndexes
.L144:
	add	r7, r7, #0x64
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L145	@cond_branch
.L140:
	mov	r8, sl
.L158:
	ldr	r0, .L171
	ldrb	r0, [r0]
	cmp	r8, r0
	bge	.LCB1057
	b	.L141	@long jump
.LCB1057:
.L137:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	gBattlersCount
.Lfe6:
	.size	 SetBattlePartyIds,.Lfe6-SetBattlePartyIds
	.align	2, 0
	.type	 PrepareBufferDataTransfer,function
	.thumb_func
PrepareBufferDataTransfer:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r5, r3, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L191
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L174	@cond_branch
	add	r0, r3, #0
	add	r1, r2, #0
	add	r2, r4, #0
	bl	PrepareBufferDataTransferLink
	b	.L175
.L192:
	.align	2, 0
.L191:
	.word	gBattleTypeFlags
.L174:
	cmp	r5, #0
	beq	.L177	@cond_branch
	cmp	r5, #0x1
	beq	.L183	@cond_branch
	b	.L175
.L177:
	mov	r3, #0x0
	cmp	r3, r2
	bge	.L175	@cond_branch
	ldr	r6, .L193
	ldr	r5, .L193+0x4
.L181:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r1, [r4]
	strb	r1, [r0]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	cmp	r3, r2
	blt	.L181	@cond_branch
	b	.L175
.L194:
	.align	2, 0
.L193:
	.word	gBattleBufferA
	.word	gActiveBattler
.L183:
	mov	r3, #0x0
	cmp	r3, r2
	bge	.L175	@cond_branch
	ldr	r6, .L195
	ldr	r5, .L195+0x4
.L187:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r1, [r4]
	strb	r1, [r0]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	cmp	r3, r2
	blt	.L187	@cond_branch
.L175:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L196:
	.align	2, 0
.L195:
	.word	gBattleBufferB
	.word	gActiveBattler
.Lfe7:
	.size	 PrepareBufferDataTransfer,.Lfe7-PrepareBufferDataTransfer
	.align	2, 0
	.type	 CreateTasksForSendRecvLinkBuffers,function
	.thumb_func
CreateTasksForSendRecvLinkBuffers:
	push	{r4, r5, r6, lr}
	ldr	r0, .L198
	mov	r1, #0x0
	bl	CreateTask
	ldr	r2, .L198+0x4
	strb	r0, [r2]
	ldr	r5, .L198+0x8
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r6, #0x0
	mov	r4, #0x0
	strh	r4, [r0, #0x1e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x20]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x22]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x24]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x26]
	ldr	r0, .L198+0xc
	mov	r1, #0x0
	bl	CreateTask
	ldr	r2, .L198+0x10
	strb	r0, [r2]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x20]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x22]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x24]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x26]
	ldr	r0, .L198+0x14
	strb	r6, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L199:
	.align	2, 0
.L198:
	.word	Task_HandleSendLinkBuffersData
	.word	sLinkSendTaskId
	.word	gTasks
	.word	Task_HandleCopyReceivedLinkBuffersData
	.word	sLinkReceiveTaskId
	.word	sUnused
.Lfe8:
	.size	 CreateTasksForSendRecvLinkBuffers,.Lfe8-CreateTasksForSendRecvLinkBuffers
	.align	2, 0
	.globl	PrepareBufferDataTransferLink
	.type	 PrepareBufferDataTransferLink,function
	.thumb_func
PrepareBufferDataTransferLink:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	ip, r1
	mov	r1, #0x3
	mov	r0, ip
	bic	r0, r0, r1
	add	r0, r0, #0x4
	mov	r8, r0
	ldr	r2, .L207
	ldr	r3, .L207+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	add	r0, r0, r8
	add	r0, r0, #0x9
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	add	r5, r2, #0
	cmp	r0, r1
	ble	.L201	@cond_branch
	ldrh	r0, [r4, #0x24]
	mov	r2, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r2, [r0, #0x24]
.L201:
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	ldr	r4, .L207+0x8
	ldr	r0, [r4]
	add	r0, r0, r1
	strb	r6, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	ldr	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L207+0xc
	ldrb	r0, [r0]
	strb	r0, [r1, #0x1]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	ldr	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L207+0x10
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	ldr	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L207+0x14
	ldrb	r0, [r0]
	strb	r0, [r1, #0x3]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	ldr	r1, [r4]
	add	r0, r0, r1
	mov	r2, r8
	strb	r2, [r0, #0x4]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	ldr	r0, [r4]
	add	r1, r1, r0
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	mov	r2, r8
	and	r0, r0, r2
	asr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	ldr	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L207+0x18
	ldrb	r0, [r0]
	strb	r0, [r1, #0x6]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	ldr	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L207+0x1c
	ldrb	r0, [r0]
	strb	r0, [r1, #0x7]
	mov	r2, #0x0
	cmp	r2, ip
	bge	.L203	@cond_branch
	mov	sl, r5
	add	r6, r3, #0
.L205:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	ldr	r0, [r4]
	add	r1, r2, r1
	add	r1, r1, r0
	mov	r7, r9
	add	r0, r7, r2
	ldrb	r0, [r0]
	strb	r0, [r1, #0x8]
	add	r2, r2, #0x1
	cmp	r2, ip
	blt	.L205	@cond_branch
.L203:
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrh	r0, [r1, #0x24]
	add	r0, r0, r8
	add	r0, r0, #0x8
	strh	r0, [r1, #0x24]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L208:
	.align	2, 0
.L207:
	.word	gTasks
	.word	sLinkSendTaskId
	.word	gLinkBattleSendBuffer
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
	.word	gEffectBattler
.Lfe9:
	.size	 PrepareBufferDataTransferLink,.Lfe9-PrepareBufferDataTransferLink
	.align	2, 0
	.type	 Task_HandleSendLinkBuffersData,function
	.thumb_func
Task_HandleSendLinkBuffersData:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L235
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x1e
	ldrsh	r0, [r0, r2]
	add	r7, r1, #0
	cmp	r0, #0x5
	bls	.LCB1481
	b	.L210	@long jump
.LCB1481:
	lsl	r0, r0, #0x2
	ldr	r1, .L235+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L236:
	.align	2, 0
.L235:
	.word	gTasks
	.word	.L230
	.align	2, 0
	.align	2, 0
.L230:
	.word	.L211
	.word	.L212
	.word	.L215
	.word	.L221
	.word	.L226
	.word	.L228
.L211:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x64
	strh	r1, [r0, #0x1c]
	ldrh	r1, [r0, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x1e]
	b	.L210
.L212:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r7
	ldrh	r0, [r1, #0x1c]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1526
	b	.L210	@long jump
.LCB1526:
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	ldr	r0, .L237
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB1536
	b	.L210	@long jump
.LCB1536:
	b	.L233
.L238:
	.align	2, 0
.L237:
	.word	gReceivedRemoteLinkPlayers
.L215:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L239
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L232	@cond_branch
	cmp	r2, #0x3
	bgt	.L217	@cond_branch
	b	.L210
.L240:
	.align	2, 0
.L239:
	.word	gBattleTypeFlags
.L232:
	cmp	r2, #0x1
	bgt	.LCB1569
	b	.L210	@long jump
.LCB1569:
.L217:
	bl	IsLinkMaster
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L219	@cond_branch
	bl	CheckShouldAdvanceLinkState
	ldr	r0, .L241
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	b	.L234
.L242:
	.align	2, 0
.L241:
	.word	gTasks
.L219:
	ldr	r0, .L243
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	b	.L234
.L244:
	.align	2, 0
.L243:
	.word	gTasks
.L221:
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r7
	mov	r3, #0x26
	ldrsh	r5, [r2, r3]
	mov	r0, #0x24
	ldrsh	r6, [r2, r0]
	mov	ip, r6
	cmp	r5, ip
	beq	.L210	@cond_branch
	ldrh	r0, [r2, #0x22]
	mov	r6, #0x22
	ldrsh	r3, [r2, r6]
	cmp	r3, #0
	bne	.L223	@cond_branch
	cmp	r5, ip
	ble	.L224	@cond_branch
	mov	r6, #0x20
	ldrsh	r0, [r2, r6]
	cmp	r5, r0
	bne	.L224	@cond_branch
	strh	r3, [r2, #0x20]
	strh	r3, [r2, #0x26]
.L224:
	add	r4, r1, r4
	lsl	r4, r4, #0x3
	add	r4, r4, r7
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	ldr	r5, .L245
	ldr	r0, [r5]
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	add	r0, r0, #0x8
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	bl	BitmaskAllOtherLinkPlayers
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x26
	ldrsh	r2, [r4, r1]
	ldr	r1, [r5]
	add	r1, r1, r2
	add	r2, r6, #0
	bl	SendBlock
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	b	.L210
.L246:
	.align	2, 0
.L245:
	.word	gLinkBattleSendBuffer
.L223:
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x22]
	b	.L210
.L226:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L210	@cond_branch
	ldr	r0, .L247
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0x26
	ldrsh	r2, [r1, r3]
	ldr	r0, .L247+0x4
	ldr	r0, [r0]
	add	r2, r2, r0
	ldrb	r0, [r2, #0x4]
	ldrb	r2, [r2, #0x5]
	lsl	r2, r2, #0x8
	mov	r3, #0x5
	strh	r3, [r1, #0x22]
	orr	r0, r0, r2
	ldrh	r6, [r1, #0x26]
	add	r0, r0, r6
	add	r0, r0, #0x8
	strh	r0, [r1, #0x26]
	b	.L233
.L248:
	.align	2, 0
.L247:
	.word	gTasks
	.word	gLinkBattleSendBuffer
.L228:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r7
	ldrh	r0, [r1, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L210	@cond_branch
	mov	r0, #0x5
	strh	r0, [r1, #0x22]
.L233:
	mov	r0, #0x3
.L234:
	strh	r0, [r1, #0x1e]
.L210:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 Task_HandleSendLinkBuffersData,.Lfe10-Task_HandleSendLinkBuffersData
	.align	2, 0
	.globl	TryReceiveLinkBattleData
	.type	 TryReceiveLinkBattleData,function
	.thumb_func
TryReceiveLinkBattleData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L263
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L250	@cond_branch
	ldr	r0, .L263+0x4
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L250	@cond_branch
	ldr	r0, .L263+0x8
	ldr	r1, [r0, #0x14]
	ldr	r0, .L263+0xc
	cmp	r1, r0
	bne	.L250	@cond_branch
	bl	DestroyTask_RfuIdle
	mov	r4, #0x0
	ldr	r0, .L263+0x10
	mov	sl, r0
	b	.L251
.L264:
	.align	2, 0
.L263:
	.word	gReceivedRemoteLinkPlayers
	.word	gBattleTypeFlags
	.word	gLinkPlayers
	.word	0x2211
	.word	gBlockRecvBuffer
.L254:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L265
	lsl	r1, r4, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	and	r0, r0, r1
	add	r1, r4, #0x1
	mov	r9, r1
	cmp	r0, #0
	beq	.L253	@cond_branch
	add	r0, r4, #0
	bl	ResetBlockReceivedFlag
	lsl	r0, r4, #0x8
	mov	r4, sl
	add	r3, r0, r4
	ldr	r1, .L265+0x4
	add	r0, r0, r1
	ldrh	r6, [r0]
	ldr	r7, .L265+0x8
	ldr	r4, .L265+0xc
	mov	ip, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r0, r7
	mov	r0, #0x24
	ldrsh	r1, [r2, r0]
	add	r0, r6, #0
	add	r0, r0, #0x9
	add	r1, r1, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	ble	.L256	@cond_branch
	ldrh	r0, [r2, #0x24]
	strh	r0, [r2, #0x20]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
.L256:
	ldr	r2, .L265+0x10
	mov	r4, ip
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r4, #0x24
	ldrsh	r1, [r0, r4]
	ldr	r0, [r2]
	add	r5, r0, r1
	add	r4, r3, #0
	mov	r2, #0x0
	add	r3, r6, #0
	add	r3, r3, #0x8
	mov	r8, r7
	mov	r7, ip
	cmp	r2, r3
	bge	.L258	@cond_branch
.L260:
	add	r0, r5, r2
	add	r1, r4, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r3
	blt	.L260	@cond_branch
.L258:
	ldrb	r0, [r7]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r8
	ldrh	r0, [r1, #0x24]
	add	r0, r6, r0
	add	r0, r0, #0x8
	strh	r0, [r1, #0x24]
.L253:
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
.L251:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcc	.L254	@cond_branch
.L250:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	gBitTable
	.word	gBlockRecvBuffer+0x4
	.word	gTasks
	.word	sLinkReceiveTaskId
	.word	gLinkBattleRecvBuffer
.Lfe11:
	.size	 TryReceiveLinkBattleData,.Lfe11-TryReceiveLinkBattleData
	.align	2, 0
	.type	 Task_HandleCopyReceivedLinkBuffersData,function
	.thumb_func
Task_HandleCopyReceivedLinkBuffersData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L279
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r0, #0x26
	ldrsh	r2, [r3, r0]
	mov	r4, #0x24
	ldrsh	r0, [r3, r4]
	cmp	r2, r0
	bne	.LCB1945
	b	.L267	@long jump
.LCB1945:
	cmp	r2, r0
	ble	.L269	@cond_branch
	mov	r4, #0x20
	ldrsh	r0, [r3, r4]
	cmp	r2, r0
	bne	.L269	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x20]
	strh	r0, [r3, #0x26]
.L269:
	lsl	r2, r7, #0x2
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r0, #0x26
	ldrsh	r1, [r5, r0]
	ldr	r3, .L279+0x4
	mov	r8, r3
	ldr	r0, [r3]
	add	r3, r1, r0
	ldrb	r4, [r3, #0x1]
	ldrb	r6, [r3, #0x4]
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldrb	r0, [r3]
	mov	r9, r2
	cmp	r0, #0x1
	beq	.L274	@cond_branch
	cmp	r0, #0x1
	bgt	.L278	@cond_branch
	cmp	r0, #0
	beq	.L271	@cond_branch
	b	.L270
.L280:
	.align	2, 0
.L279:
	.word	gTasks
	.word	gLinkBattleRecvBuffer
.L278:
	cmp	r0, #0x2
	beq	.L275	@cond_branch
	b	.L270
.L271:
	ldr	r2, .L281
	ldr	r1, .L281+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L267	@cond_branch
	lsl	r0, r4, #0x9
	ldr	r1, .L281+0x8
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x8
	add	r2, r6, #0
	bl	memcpy
	add	r0, r4, #0
	bl	MarkBattlerReceivedLinkData
	ldr	r0, .L281+0xc
	ldr	r0, [r0]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L270	@cond_branch
	ldr	r2, .L281+0x10
	mov	r4, #0x26
	ldrsh	r0, [r5, r4]
	mov	r3, r8
	ldr	r1, [r3]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	strb	r0, [r2]
	ldr	r2, .L281+0x14
	mov	r4, #0x26
	ldrsh	r0, [r5, r4]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x3]
	strb	r0, [r2]
	ldr	r2, .L281+0x18
	mov	r3, #0x26
	ldrsh	r0, [r5, r3]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x6]
	strb	r0, [r2]
	ldr	r2, .L281+0x1c
	mov	r4, #0x26
	ldrsh	r0, [r5, r4]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x7]
	strb	r0, [r2]
	b	.L270
.L282:
	.align	2, 0
.L281:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gBattleBufferA
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
	.word	gEffectBattler
.L274:
	lsl	r0, r4, #0x9
	ldr	r1, .L283
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x8
	add	r2, r6, #0
	bl	memcpy
	b	.L270
.L284:
	.align	2, 0
.L283:
	.word	gBattleBufferB
.L275:
	ldrb	r2, [r3, #0x8]
	ldr	r3, .L285
	ldr	r1, .L285+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	lsl	r2, r2, #0x2
	ldr	r1, [r0]
	lsl	r1, r1, r2
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
.L270:
	ldr	r0, .L285+0x8
	mov	r2, r9
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	add	r0, r6, r0
	add	r0, r0, #0x8
	strh	r0, [r1, #0x26]
.L267:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L286:
	.align	2, 0
.L285:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gTasks
.Lfe12:
	.size	 Task_HandleCopyReceivedLinkBuffersData,.Lfe12-Task_HandleCopyReceivedLinkBuffersData
	.align	2, 0
	.globl	BtlController_EmitGetMonData
	.type	 BtlController_EmitGetMonData,function
	.thumb_func
BtlController_EmitGetMonData:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L288
	mov	r3, #0x0
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r3, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L289:
	.align	2, 0
.L288:
	.word	sBattleBuffersTransferData
.Lfe13:
	.size	 BtlController_EmitGetMonData,.Lfe13-BtlController_EmitGetMonData
	.align	2, 0
	.type	 BtlController_EmitGetRawMonData,function
	.thumb_func
BtlController_EmitGetRawMonData:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L291
	mov	r4, #0x0
	mov	r3, #0x1
	strb	r3, [r1]
	strb	r5, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r4, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L292:
	.align	2, 0
.L291:
	.word	sBattleBuffersTransferData
.Lfe14:
	.size	 BtlController_EmitGetRawMonData,.Lfe14-BtlController_EmitGetRawMonData
	.align	2, 0
	.globl	BtlController_EmitSetMonData
	.type	 BtlController_EmitSetMonData,function
	.thumb_func
BtlController_EmitSetMonData:
	push	{r4, r5, r6, lr}
	ldr	r4, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	ldr	r0, .L299
	mov	r3, #0x2
	strb	r3, [r0]
	strb	r1, [r0, #0x1]
	strb	r2, [r0, #0x2]
	add	r1, r0, #0
	cmp	r5, #0
	beq	.L295	@cond_branch
	add	r3, r1, #0x3
	add	r2, r5, #0
.L297:
	ldrb	r0, [r4]
	strb	r0, [r3]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L297	@cond_branch
.L295:
	add	r2, r5, #0x3
	add	r0, r6, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	sBattleBuffersTransferData
.Lfe15:
	.size	 BtlController_EmitSetMonData,.Lfe15-BtlController_EmitSetMonData
	.align	2, 0
	.type	 BtlController_EmitSetRawMonData,function
	.thumb_func
BtlController_EmitSetRawMonData:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	ldr	r0, .L307
	mov	r2, #0x3
	strb	r2, [r0]
	strb	r1, [r0, #0x1]
	strb	r4, [r0, #0x2]
	add	r5, r0, #0
	cmp	r4, #0
	beq	.L303	@cond_branch
	add	r1, r5, #0x3
	add	r2, r4, #0
.L305:
	ldrb	r0, [r3]
	strb	r0, [r1]
	add	r3, r3, #0x1
	add	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L305	@cond_branch
.L303:
	add	r2, r4, #0x3
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	sBattleBuffersTransferData
.Lfe16:
	.size	 BtlController_EmitSetRawMonData,.Lfe16-BtlController_EmitSetRawMonData
	.align	2, 0
	.globl	BtlController_EmitLoadMonSprite
	.type	 BtlController_EmitLoadMonSprite,function
	.thumb_func
BtlController_EmitLoadMonSprite:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L310
	mov	r2, #0x4
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L311:
	.align	2, 0
.L310:
	.word	sBattleBuffersTransferData
.Lfe17:
	.size	 BtlController_EmitLoadMonSprite,.Lfe17-BtlController_EmitLoadMonSprite
	.align	2, 0
	.globl	BtlController_EmitSwitchInAnim
	.type	 BtlController_EmitSwitchInAnim,function
	.thumb_func
BtlController_EmitSwitchInAnim:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L313
	mov	r3, #0x5
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r3, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	sBattleBuffersTransferData
.Lfe18:
	.size	 BtlController_EmitSwitchInAnim,.Lfe18-BtlController_EmitSwitchInAnim
	.align	2, 0
	.globl	BtlController_EmitReturnMonToBall
	.type	 BtlController_EmitReturnMonToBall,function
	.thumb_func
BtlController_EmitReturnMonToBall:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L316
	mov	r2, #0x6
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L317:
	.align	2, 0
.L316:
	.word	sBattleBuffersTransferData
.Lfe19:
	.size	 BtlController_EmitReturnMonToBall,.Lfe19-BtlController_EmitReturnMonToBall
	.align	2, 0
	.globl	BtlController_EmitDrawTrainerPic
	.type	 BtlController_EmitDrawTrainerPic,function
	.thumb_func
BtlController_EmitDrawTrainerPic:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L319
	mov	r2, #0x7
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L320:
	.align	2, 0
.L319:
	.word	sBattleBuffersTransferData
.Lfe20:
	.size	 BtlController_EmitDrawTrainerPic,.Lfe20-BtlController_EmitDrawTrainerPic
	.align	2, 0
	.globl	BtlController_EmitTrainerSlide
	.type	 BtlController_EmitTrainerSlide,function
	.thumb_func
BtlController_EmitTrainerSlide:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L322
	mov	r2, #0x8
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	sBattleBuffersTransferData
.Lfe21:
	.size	 BtlController_EmitTrainerSlide,.Lfe21-BtlController_EmitTrainerSlide
	.align	2, 0
	.globl	BtlController_EmitTrainerSlideBack
	.type	 BtlController_EmitTrainerSlideBack,function
	.thumb_func
BtlController_EmitTrainerSlideBack:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L325
	mov	r2, #0x9
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L326:
	.align	2, 0
.L325:
	.word	sBattleBuffersTransferData
.Lfe22:
	.size	 BtlController_EmitTrainerSlideBack,.Lfe22-BtlController_EmitTrainerSlideBack
	.align	2, 0
	.globl	BtlController_EmitFaintAnimation
	.type	 BtlController_EmitFaintAnimation,function
	.thumb_func
BtlController_EmitFaintAnimation:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L328
	mov	r2, #0xa
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L329:
	.align	2, 0
.L328:
	.word	sBattleBuffersTransferData
.Lfe23:
	.size	 BtlController_EmitFaintAnimation,.Lfe23-BtlController_EmitFaintAnimation
	.align	2, 0
	.type	 BtlController_EmitPaletteFade,function
	.thumb_func
BtlController_EmitPaletteFade:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L331
	mov	r2, #0xb
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L332:
	.align	2, 0
.L331:
	.word	sBattleBuffersTransferData
.Lfe24:
	.size	 BtlController_EmitPaletteFade,.Lfe24-BtlController_EmitPaletteFade
	.align	2, 0
	.type	 BtlController_EmitSuccessBallThrowAnim,function
	.thumb_func
BtlController_EmitSuccessBallThrowAnim:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L334
	mov	r2, #0xc
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L335:
	.align	2, 0
.L334:
	.word	sBattleBuffersTransferData
.Lfe25:
	.size	 BtlController_EmitSuccessBallThrowAnim,.Lfe25-BtlController_EmitSuccessBallThrowAnim
	.align	2, 0
	.globl	BtlController_EmitBallThrowAnim
	.type	 BtlController_EmitBallThrowAnim,function
	.thumb_func
BtlController_EmitBallThrowAnim:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L337
	mov	r2, #0xd
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L338:
	.align	2, 0
.L337:
	.word	sBattleBuffersTransferData
.Lfe26:
	.size	 BtlController_EmitBallThrowAnim,.Lfe26-BtlController_EmitBallThrowAnim
	.align	2, 0
	.type	 BtlController_EmitPause,function
	.thumb_func
BtlController_EmitPause:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r1, .L345
	mov	r0, #0xe
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L341	@cond_branch
	add	r1, r5, #0x2
	add	r3, r0, #0
.L343:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L343	@cond_branch
.L341:
	lsl	r2, r4, #0x1
	add	r2, r2, r4
	add	r2, r2, #0x2
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L346:
	.align	2, 0
.L345:
	.word	sBattleBuffersTransferData
.Lfe27:
	.size	 BtlController_EmitPause,.Lfe27-BtlController_EmitPause
	.align	2, 0
	.globl	BtlController_EmitMoveAnimation
	.type	 BtlController_EmitMoveAnimation,function
	.thumb_func
BtlController_EmitMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x1c]
	ldr	r5, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r7, .L350
	mov	r0, #0x0
	mov	ip, r0
	mov	r0, #0xf
	strb	r0, [r7]
	strb	r1, [r7, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r7, #0x2]
	strb	r2, [r7, #0x3]
	strb	r3, [r7, #0x4]
	mov	r6, #0xff
	lsl	r6, r6, #0x8
	lsr	r3, r3, #0x8
	strb	r3, [r7, #0x5]
	strb	r4, [r7, #0x6]
	add	r0, r4, #0
	and	r0, r0, r6
	asr	r0, r0, #0x8
	strb	r0, [r7, #0x7]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r4
	asr	r0, r0, #0x10
	strb	r0, [r7, #0x8]
	lsr	r4, r4, #0x18
	strb	r4, [r7, #0x9]
	strb	r5, [r7, #0xa]
	ldr	r0, .L350+0x4
	ldrb	r0, [r0]
	strb	r0, [r7, #0xb]
	mov	r0, ip
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L348	@cond_branch
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L348	@cond_branch
	ldr	r0, .L350+0x8
	ldrh	r0, [r0]
	strb	r0, [r7, #0xc]
	and	r6, r6, r0
	lsr	r0, r6, #0x8
	strb	r0, [r7, #0xd]
	add	r4, r7, #0
	b	.L349
.L351:
	.align	2, 0
.L350:
	.word	sBattleBuffersTransferData
	.word	gMultiHitCounter
	.word	gBattleWeather
.L348:
	ldr	r0, .L352
	mov	r1, #0x0
	strb	r1, [r0, #0xc]
	strb	r1, [r0, #0xd]
	add	r4, r0, #0
.L349:
	mov	r0, #0x0
	strb	r0, [r4, #0xe]
	strb	r0, [r4, #0xf]
	add	r0, r4, #0
	add	r0, r0, #0x10
	ldr	r1, [sp, #0x24]
	mov	r2, #0x1c
	bl	memcpy
	mov	r0, r8
	add	r1, r4, #0
	mov	r2, #0x2c
	bl	PrepareBufferDataTransfer
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L353:
	.align	2, 0
.L352:
	.word	sBattleBuffersTransferData
.Lfe28:
	.size	 BtlController_EmitMoveAnimation,.Lfe28-BtlController_EmitMoveAnimation
	.align	2, 0
	.globl	BtlController_EmitPrintString
	.type	 BtlController_EmitPrintString,function
	.thumb_func
BtlController_EmitPrintString:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L365
	mov	r0, #0x10
	strb	r0, [r2]
	ldr	r0, .L365+0x4
	ldrb	r0, [r0]
	strb	r0, [r2, #0x1]
	strb	r1, [r2, #0x2]
	lsr	r1, r1, #0x8
	strb	r1, [r2, #0x3]
	add	r0, r2, #0x4
	mov	ip, r0
	ldr	r4, .L365+0x8
	ldrh	r0, [r4]
	strh	r0, [r2, #0x4]
	ldr	r0, .L365+0xc
	ldrh	r0, [r0]
	mov	r1, ip
	strh	r0, [r1, #0x2]
	ldr	r0, .L365+0x10
	ldrh	r0, [r0]
	strh	r0, [r1, #0x4]
	ldr	r0, .L365+0x14
	ldrb	r0, [r0]
	strb	r0, [r1, #0x6]
	ldr	r0, .L365+0x18
	ldrb	r0, [r0, #0x17]
	strb	r0, [r1, #0x7]
	ldr	r0, .L365+0x1c
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x52
	ldrb	r1, [r1]
	mov	r3, ip
	strb	r1, [r3, #0x8]
	add	r0, r0, #0xad
	ldrb	r0, [r0]
	strb	r0, [r3, #0x9]
	ldr	r0, .L365+0x20
	ldrb	r0, [r0]
	strb	r0, [r3, #0xa]
	ldr	r3, .L365+0x24
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x2]
	mov	r7, ip
	strb	r0, [r7, #0xb]
	mov	r3, #0x0
	mov	r9, r2
	ldr	r0, .L365+0x28
	mov	r8, r0
	add	r2, r2, #0x10
	ldr	r0, .L365+0x2c
	add	r4, r0, #0
	add	r4, r4, #0x20
.L358:
	add	r1, r2, r3
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #0x58
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L358	@cond_branch
	mov	r3, #0x0
	mov	r5, ip
	add	r5, r5, #0x10
	mov	r4, ip
	add	r4, r4, #0x20
	ldr	r6, .L365+0x30
	mov	r2, ip
	add	r2, r2, #0x30
.L363:
	add	r1, r5, r3
	ldr	r7, .L365+0x34
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r4, r3
	add	r0, r3, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r2, r3
	mov	r7, r8
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0xf
	ble	.L363	@cond_branch
	mov	r0, sl
	mov	r1, r9
	mov	r2, #0x44
	bl	PrepareBufferDataTransfer
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L366:
	.align	2, 0
.L365:
	.word	sBattleBuffersTransferData
	.word	gBattleOutcome
	.word	gCurrentMove
	.word	gChosenMove
	.word	gLastUsedItem
	.word	gLastUsedAbility
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gPotentialItemEffectBattler
	.word	gBattleMoves
	.word	gBattleTextBuff3
	.word	gBattleMons
	.word	gBattleTextBuff2
	.word	gBattleTextBuff1
.Lfe29:
	.size	 BtlController_EmitPrintString,.Lfe29-BtlController_EmitPrintString
	.align	2, 0
	.globl	BtlController_EmitPrintSelectionString
	.type	 BtlController_EmitPrintSelectionString,function
	.thumb_func
BtlController_EmitPrintSelectionString:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L378
	mov	r0, #0x11
	strb	r0, [r2]
	strb	r0, [r2, #0x1]
	strb	r1, [r2, #0x2]
	lsr	r1, r1, #0x8
	strb	r1, [r2, #0x3]
	add	r0, r2, #0x4
	mov	ip, r0
	ldr	r0, .L378+0x4
	ldrh	r0, [r0]
	strh	r0, [r2, #0x4]
	ldr	r0, .L378+0x8
	ldrh	r0, [r0]
	mov	r1, ip
	strh	r0, [r1, #0x2]
	ldr	r0, .L378+0xc
	ldrh	r0, [r0]
	strh	r0, [r1, #0x4]
	ldr	r0, .L378+0x10
	ldrb	r0, [r0]
	strb	r0, [r1, #0x6]
	ldr	r0, .L378+0x14
	ldrb	r0, [r0, #0x17]
	strb	r0, [r1, #0x7]
	ldr	r0, .L378+0x18
	ldr	r0, [r0]
	add	r0, r0, #0x52
	ldrb	r0, [r0]
	strb	r0, [r1, #0x8]
	mov	r3, #0x0
	mov	r9, r2
	ldr	r7, .L378+0x1c
	mov	r8, r7
	mov	r4, r9
	add	r4, r4, #0x10
	ldr	r0, .L378+0x20
	add	r2, r0, #0
	add	r2, r2, #0x20
.L371:
	add	r1, r4, r3
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x58
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L371	@cond_branch
	mov	r3, #0x0
	mov	r5, ip
	add	r5, r5, #0x10
	mov	r4, ip
	add	r4, r4, #0x20
	ldr	r6, .L378+0x24
	mov	r2, ip
	add	r2, r2, #0x30
.L376:
	add	r1, r5, r3
	ldr	r7, .L378+0x28
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r4, r3
	add	r0, r3, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r2, r3
	mov	r7, r8
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0xf
	ble	.L376	@cond_branch
	mov	r0, sl
	mov	r1, r9
	mov	r2, #0x44
	bl	PrepareBufferDataTransfer
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L379:
	.align	2, 0
.L378:
	.word	sBattleBuffersTransferData
	.word	gCurrentMove
	.word	gChosenMove
	.word	gLastUsedItem
	.word	gLastUsedAbility
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattleTextBuff3
	.word	gBattleMons
	.word	gBattleTextBuff2
	.word	gBattleTextBuff1
.Lfe30:
	.size	 BtlController_EmitPrintSelectionString,.Lfe30-BtlController_EmitPrintSelectionString
	.align	2, 0
	.globl	BtlController_EmitChooseAction
	.type	 BtlController_EmitChooseAction,function
	.thumb_func
BtlController_EmitChooseAction:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L381
	mov	r3, #0x12
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L382:
	.align	2, 0
.L381:
	.word	sBattleBuffersTransferData
.Lfe31:
	.size	 BtlController_EmitChooseAction,.Lfe31-BtlController_EmitChooseAction
	.align	2, 0
	.type	 BtlController_EmitUnknownYesNoBox,function
	.thumb_func
BtlController_EmitUnknownYesNoBox:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L384
	mov	r2, #0x13
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L385:
	.align	2, 0
.L384:
	.word	sBattleBuffersTransferData
.Lfe32:
	.size	 BtlController_EmitUnknownYesNoBox,.Lfe32-BtlController_EmitUnknownYesNoBox
	.align	2, 0
	.globl	BtlController_EmitChooseMove
	.type	 BtlController_EmitChooseMove,function
	.thumb_func
BtlController_EmitChooseMove:
	push	{r4, r5, r6, lr}
	add	r5, r3, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L392
	mov	r4, #0x0
	mov	r0, #0x14
	strb	r0, [r3]
	strb	r1, [r3, #0x1]
	strb	r2, [r3, #0x2]
	strb	r4, [r3, #0x3]
	mov	r2, #0x0
	add	r1, r3, #0
	add	r4, r1, #0x4
.L390:
	add	r0, r5, r2
	ldrb	r0, [r0]
	strb	r0, [r4]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x13
	bls	.L390	@cond_branch
	add	r0, r6, #0
	mov	r2, #0x18
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L393:
	.align	2, 0
.L392:
	.word	sBattleBuffersTransferData
.Lfe33:
	.size	 BtlController_EmitChooseMove,.Lfe33-BtlController_EmitChooseMove
	.align	2, 0
	.globl	BtlController_EmitChooseItem
	.type	 BtlController_EmitChooseItem,function
	.thumb_func
BtlController_EmitChooseItem:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L400
	mov	r0, #0x15
	strb	r0, [r1]
	mov	r2, #0x0
	add	r3, r1, #0x1
.L398:
	add	r0, r4, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L398	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L401:
	.align	2, 0
.L400:
	.word	sBattleBuffersTransferData
.Lfe34:
	.size	 BtlController_EmitChooseItem,.Lfe34-BtlController_EmitChooseItem
	.align	2, 0
	.globl	BtlController_EmitChoosePokemon
	.type	 BtlController_EmitChoosePokemon,function
	.thumb_func
BtlController_EmitChoosePokemon:
	push	{r4, r5, r6, lr}
	ldr	r6, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L408
	mov	r0, #0x16
	strb	r0, [r4]
	strb	r1, [r4, #0x1]
	strb	r2, [r4, #0x2]
	strb	r3, [r4, #0x3]
	mov	r2, #0x0
	add	r1, r4, #0
	add	r3, r1, #0x4
.L406:
	add	r0, r6, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L406	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x8
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L409:
	.align	2, 0
.L408:
	.word	sBattleBuffersTransferData
.Lfe35:
	.size	 BtlController_EmitChoosePokemon,.Lfe35-BtlController_EmitChoosePokemon
	.align	2, 0
	.type	 BtlController_EmitCmd23,function
	.thumb_func
BtlController_EmitCmd23:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L411
	mov	r2, #0x17
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L412:
	.align	2, 0
.L411:
	.word	sBattleBuffersTransferData
.Lfe36:
	.size	 BtlController_EmitCmd23,.Lfe36-BtlController_EmitCmd23
	.align	2, 0
	.globl	BtlController_EmitHealthBarUpdate
	.type	 BtlController_EmitHealthBarUpdate,function
	.thumb_func
BtlController_EmitHealthBarUpdate:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L414
	mov	r4, #0x0
	mov	r2, #0x18
	strb	r2, [r3]
	strb	r4, [r3, #0x1]
	strb	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0xff
	lsl	r2, r2, #0x8
	and	r1, r1, r2
	asr	r1, r1, #0x8
	strb	r1, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L415:
	.align	2, 0
.L414:
	.word	sBattleBuffersTransferData
.Lfe37:
	.size	 BtlController_EmitHealthBarUpdate,.Lfe37-BtlController_EmitHealthBarUpdate
	.align	2, 0
	.globl	BtlController_EmitExpUpdate
	.type	 BtlController_EmitExpUpdate,function
	.thumb_func
BtlController_EmitExpUpdate:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L417
	mov	r3, #0x19
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	and	r2, r2, r3
	asr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L418:
	.align	2, 0
.L417:
	.word	sBattleBuffersTransferData
.Lfe38:
	.size	 BtlController_EmitExpUpdate,.Lfe38-BtlController_EmitExpUpdate
	.align	2, 0
	.globl	BtlController_EmitStatusIconUpdate
	.type	 BtlController_EmitStatusIconUpdate,function
	.thumb_func
BtlController_EmitStatusIconUpdate:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L420
	mov	r3, #0x1a
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	mov	r6, #0xff
	lsl	r6, r6, #0x8
	add	r3, r4, #0
	and	r3, r3, r6
	lsr	r3, r3, #0x8
	strb	r3, [r1, #0x2]
	mov	r5, #0xff
	lsl	r5, r5, #0x10
	add	r3, r4, #0
	and	r3, r3, r5
	lsr	r3, r3, #0x10
	strb	r3, [r1, #0x3]
	lsr	r4, r4, #0x18
	strb	r4, [r1, #0x4]
	strb	r2, [r1, #0x5]
	add	r3, r2, #0
	and	r3, r3, r6
	lsr	r3, r3, #0x8
	strb	r3, [r1, #0x6]
	add	r3, r2, #0
	and	r3, r3, r5
	lsr	r3, r3, #0x10
	strb	r3, [r1, #0x7]
	lsr	r2, r2, #0x18
	strb	r2, [r1, #0x8]
	mov	r2, #0x9
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L421:
	.align	2, 0
.L420:
	.word	sBattleBuffersTransferData
.Lfe39:
	.size	 BtlController_EmitStatusIconUpdate,.Lfe39-BtlController_EmitStatusIconUpdate
	.align	2, 0
	.globl	BtlController_EmitStatusAnimation
	.type	 BtlController_EmitStatusAnimation,function
	.thumb_func
BtlController_EmitStatusAnimation:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L423
	mov	r3, #0x1b
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	and	r3, r3, r2
	lsr	r3, r3, #0x8
	strb	r3, [r1, #0x3]
	mov	r3, #0xff
	lsl	r3, r3, #0x10
	and	r3, r3, r2
	lsr	r3, r3, #0x10
	strb	r3, [r1, #0x4]
	lsr	r2, r2, #0x18
	strb	r2, [r1, #0x5]
	mov	r2, #0x6
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L424:
	.align	2, 0
.L423:
	.word	sBattleBuffersTransferData
.Lfe40:
	.size	 BtlController_EmitStatusAnimation,.Lfe40-BtlController_EmitStatusAnimation
	.align	2, 0
	.type	 BtlController_EmitStatusXor,function
	.thumb_func
BtlController_EmitStatusXor:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L426
	mov	r2, #0x1c
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L427:
	.align	2, 0
.L426:
	.word	sBattleBuffersTransferData
.Lfe41:
	.size	 BtlController_EmitStatusXor,.Lfe41-BtlController_EmitStatusXor
	.align	2, 0
	.globl	BtlController_EmitDataTransfer
	.type	 BtlController_EmitDataTransfer,function
	.thumb_func
BtlController_EmitDataTransfer:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r1, .L434
	mov	r0, #0x1d
	strb	r0, [r1]
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x3]
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L430	@cond_branch
	add	r1, r5, #0x4
	add	r3, r4, #0
.L432:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L432	@cond_branch
.L430:
	add	r2, r4, #0x4
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	sBattleBuffersTransferData
.Lfe42:
	.size	 BtlController_EmitDataTransfer,.Lfe42-BtlController_EmitDataTransfer
	.align	2, 0
	.type	 BtlController_EmitDMA3Transfer,function
	.thumb_func
BtlController_EmitDMA3Transfer:
	push	{r4, r5, r6, lr}
	add	r4, r3, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	ldr	r2, .L442
	mov	r0, #0x1e
	strb	r0, [r2]
	strb	r1, [r2, #0x1]
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	add	r0, r1, #0
	and	r0, r0, r3
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r2, #0x3]
	lsr	r1, r1, #0x18
	strb	r1, [r2, #0x4]
	strb	r5, [r2, #0x5]
	add	r0, r5, #0
	and	r0, r0, r3
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x6]
	add	r1, r2, #0
	cmp	r5, #0
	beq	.L438	@cond_branch
	add	r3, r1, #0x7
	add	r2, r5, #0
.L440:
	ldrb	r0, [r4]
	strb	r0, [r3]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L440	@cond_branch
.L438:
	add	r2, r5, #0x7
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L443:
	.align	2, 0
.L442:
	.word	sBattleBuffersTransferData
.Lfe43:
	.size	 BtlController_EmitDMA3Transfer,.Lfe43-BtlController_EmitDMA3Transfer
	.align	2, 0
	.type	 BtlController_EmitPlayBGM,function
	.thumb_func
BtlController_EmitPlayBGM:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r1, .L450
	mov	r0, #0x1f
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x2]
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L446	@cond_branch
	add	r1, r5, #0x3
	add	r3, r4, #0
.L448:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L448	@cond_branch
.L446:
	add	r2, r4, #0x3
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L451:
	.align	2, 0
.L450:
	.word	sBattleBuffersTransferData
.Lfe44:
	.size	 BtlController_EmitPlayBGM,.Lfe44-BtlController_EmitPlayBGM
	.align	2, 0
	.type	 BtlController_EmitCmd32,function
	.thumb_func
BtlController_EmitCmd32:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r1, .L458
	mov	r0, #0x20
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x2]
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L454	@cond_branch
	add	r1, r5, #0x3
	add	r3, r4, #0
.L456:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L456	@cond_branch
.L454:
	add	r2, r4, #0x3
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L459:
	.align	2, 0
.L458:
	.word	sBattleBuffersTransferData
.Lfe45:
	.size	 BtlController_EmitCmd32,.Lfe45-BtlController_EmitCmd32
	.align	2, 0
	.globl	BtlController_EmitTwoReturnValues
	.type	 BtlController_EmitTwoReturnValues,function
	.thumb_func
BtlController_EmitTwoReturnValues:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L461
	mov	r3, #0x21
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L462:
	.align	2, 0
.L461:
	.word	sBattleBuffersTransferData
.Lfe46:
	.size	 BtlController_EmitTwoReturnValues,.Lfe46-BtlController_EmitTwoReturnValues
	.align	2, 0
	.globl	BtlController_EmitChosenMonReturnValue
	.type	 BtlController_EmitChosenMonReturnValue,function
	.thumb_func
BtlController_EmitChosenMonReturnValue:
	push	{r4, r5, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L469
	mov	r0, #0x22
	strb	r0, [r2]
	strb	r1, [r2, #0x1]
	mov	r3, #0x0
	add	r1, r2, #0x2
.L467:
	add	r0, r4, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r1, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L467	@cond_branch
	add	r0, r5, #0
	add	r1, r2, #0
	mov	r2, #0x5
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L470:
	.align	2, 0
.L469:
	.word	sBattleBuffersTransferData
.Lfe47:
	.size	 BtlController_EmitChosenMonReturnValue,.Lfe47-BtlController_EmitChosenMonReturnValue
	.align	2, 0
	.globl	BtlController_EmitOneReturnValue
	.type	 BtlController_EmitOneReturnValue,function
	.thumb_func
BtlController_EmitOneReturnValue:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L472
	mov	r4, #0x0
	mov	r2, #0x23
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L473:
	.align	2, 0
.L472:
	.word	sBattleBuffersTransferData
.Lfe48:
	.size	 BtlController_EmitOneReturnValue,.Lfe48-BtlController_EmitOneReturnValue
	.align	2, 0
	.globl	BtlController_EmitOneReturnValue_Duplicate
	.type	 BtlController_EmitOneReturnValue_Duplicate,function
	.thumb_func
BtlController_EmitOneReturnValue_Duplicate:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L475
	mov	r4, #0x0
	mov	r2, #0x24
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L476:
	.align	2, 0
.L475:
	.word	sBattleBuffersTransferData
.Lfe49:
	.size	 BtlController_EmitOneReturnValue_Duplicate,.Lfe49-BtlController_EmitOneReturnValue_Duplicate
	.align	2, 0
	.type	 BtlController_EmitClearUnkVar,function
	.thumb_func
BtlController_EmitClearUnkVar:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L478
	mov	r2, #0x25
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	sBattleBuffersTransferData
.Lfe50:
	.size	 BtlController_EmitClearUnkVar,.Lfe50-BtlController_EmitClearUnkVar
	.align	2, 0
	.type	 BtlController_EmitSetUnkVar,function
	.thumb_func
BtlController_EmitSetUnkVar:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L481
	mov	r2, #0x26
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L482:
	.align	2, 0
.L481:
	.word	sBattleBuffersTransferData
.Lfe51:
	.size	 BtlController_EmitSetUnkVar,.Lfe51-BtlController_EmitSetUnkVar
	.align	2, 0
	.type	 BtlController_EmitClearUnkFlag,function
	.thumb_func
BtlController_EmitClearUnkFlag:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L484
	mov	r2, #0x27
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L485:
	.align	2, 0
.L484:
	.word	sBattleBuffersTransferData
.Lfe52:
	.size	 BtlController_EmitClearUnkFlag,.Lfe52-BtlController_EmitClearUnkFlag
	.align	2, 0
	.type	 BtlController_EmitToggleUnkFlag,function
	.thumb_func
BtlController_EmitToggleUnkFlag:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L487
	mov	r2, #0x28
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	sBattleBuffersTransferData
.Lfe53:
	.size	 BtlController_EmitToggleUnkFlag,.Lfe53-BtlController_EmitToggleUnkFlag
	.align	2, 0
	.globl	BtlController_EmitHitAnimation
	.type	 BtlController_EmitHitAnimation,function
	.thumb_func
BtlController_EmitHitAnimation:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L490
	mov	r2, #0x29
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L491:
	.align	2, 0
.L490:
	.word	sBattleBuffersTransferData
.Lfe54:
	.size	 BtlController_EmitHitAnimation,.Lfe54-BtlController_EmitHitAnimation
	.align	2, 0
	.globl	BtlController_EmitCantSwitch
	.type	 BtlController_EmitCantSwitch,function
	.thumb_func
BtlController_EmitCantSwitch:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L493
	mov	r2, #0x2a
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L494:
	.align	2, 0
.L493:
	.word	sBattleBuffersTransferData
.Lfe55:
	.size	 BtlController_EmitCantSwitch,.Lfe55-BtlController_EmitCantSwitch
	.align	2, 0
	.globl	BtlController_EmitPlaySE
	.type	 BtlController_EmitPlaySE,function
	.thumb_func
BtlController_EmitPlaySE:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L496
	mov	r4, #0x0
	mov	r2, #0x2b
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	sBattleBuffersTransferData
.Lfe56:
	.size	 BtlController_EmitPlaySE,.Lfe56-BtlController_EmitPlaySE
	.align	2, 0
	.globl	BtlController_EmitPlayFanfare
	.type	 BtlController_EmitPlayFanfare,function
	.thumb_func
BtlController_EmitPlayFanfare:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L499
	mov	r4, #0x0
	mov	r2, #0x2c
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	sBattleBuffersTransferData
.Lfe57:
	.size	 BtlController_EmitPlayFanfare,.Lfe57-BtlController_EmitPlayFanfare
	.align	2, 0
	.globl	BtlController_EmitFaintingCry
	.type	 BtlController_EmitFaintingCry,function
	.thumb_func
BtlController_EmitFaintingCry:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L502
	mov	r2, #0x2d
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L503:
	.align	2, 0
.L502:
	.word	sBattleBuffersTransferData
.Lfe58:
	.size	 BtlController_EmitFaintingCry,.Lfe58-BtlController_EmitFaintingCry
	.align	2, 0
	.globl	BtlController_EmitIntroSlide
	.type	 BtlController_EmitIntroSlide,function
	.thumb_func
BtlController_EmitIntroSlide:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L505
	mov	r2, #0x2e
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L506:
	.align	2, 0
.L505:
	.word	sBattleBuffersTransferData
.Lfe59:
	.size	 BtlController_EmitIntroSlide,.Lfe59-BtlController_EmitIntroSlide
	.align	2, 0
	.globl	BtlController_EmitIntroTrainerBallThrow
	.type	 BtlController_EmitIntroTrainerBallThrow,function
	.thumb_func
BtlController_EmitIntroTrainerBallThrow:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L508
	mov	r2, #0x2f
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L509:
	.align	2, 0
.L508:
	.word	sBattleBuffersTransferData
.Lfe60:
	.size	 BtlController_EmitIntroTrainerBallThrow,.Lfe60-BtlController_EmitIntroTrainerBallThrow
	.align	2, 0
	.globl	BtlController_EmitDrawPartyStatusSummary
	.type	 BtlController_EmitDrawPartyStatusSummary,function
	.thumb_func
BtlController_EmitDrawPartyStatusSummary:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, .L516
	mov	r3, #0x30
	strb	r3, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, #0x80
	and	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x1f
	strb	r0, [r1, #0x2]
	strb	r3, [r1, #0x3]
	mov	r2, #0x0
	add	r3, r1, #0x4
.L514:
	add	r0, r4, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2f
	ble	.L514	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x34
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L517:
	.align	2, 0
.L516:
	.word	sBattleBuffersTransferData
.Lfe61:
	.size	 BtlController_EmitDrawPartyStatusSummary,.Lfe61-BtlController_EmitDrawPartyStatusSummary
	.align	2, 0
	.globl	BtlController_EmitHidePartyStatusSummary
	.type	 BtlController_EmitHidePartyStatusSummary,function
	.thumb_func
BtlController_EmitHidePartyStatusSummary:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L519
	mov	r2, #0x31
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	sBattleBuffersTransferData
.Lfe62:
	.size	 BtlController_EmitHidePartyStatusSummary,.Lfe62-BtlController_EmitHidePartyStatusSummary
	.align	2, 0
	.globl	BtlController_EmitEndBounceEffect
	.type	 BtlController_EmitEndBounceEffect,function
	.thumb_func
BtlController_EmitEndBounceEffect:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L522
	mov	r2, #0x32
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L523:
	.align	2, 0
.L522:
	.word	sBattleBuffersTransferData
.Lfe63:
	.size	 BtlController_EmitEndBounceEffect,.Lfe63-BtlController_EmitEndBounceEffect
	.align	2, 0
	.globl	BtlController_EmitSpriteInvisibility
	.type	 BtlController_EmitSpriteInvisibility,function
	.thumb_func
BtlController_EmitSpriteInvisibility:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L525
	mov	r2, #0x33
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L526:
	.align	2, 0
.L525:
	.word	sBattleBuffersTransferData
.Lfe64:
	.size	 BtlController_EmitSpriteInvisibility,.Lfe64-BtlController_EmitSpriteInvisibility
	.align	2, 0
	.globl	BtlController_EmitBattleAnimation
	.type	 BtlController_EmitBattleAnimation,function
	.thumb_func
BtlController_EmitBattleAnimation:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L528
	mov	r3, #0x34
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L529:
	.align	2, 0
.L528:
	.word	sBattleBuffersTransferData
.Lfe65:
	.size	 BtlController_EmitBattleAnimation,.Lfe65-BtlController_EmitBattleAnimation
	.align	2, 0
	.globl	BtlController_EmitLinkStandbyMsg
	.type	 BtlController_EmitLinkStandbyMsg,function
	.thumb_func
BtlController_EmitLinkStandbyMsg:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L531
	mov	r2, #0x35
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L532:
	.align	2, 0
.L531:
	.word	sBattleBuffersTransferData
.Lfe66:
	.size	 BtlController_EmitLinkStandbyMsg,.Lfe66-BtlController_EmitLinkStandbyMsg
	.align	2, 0
	.globl	BtlController_EmitResetActionMoveSelection
	.type	 BtlController_EmitResetActionMoveSelection,function
	.thumb_func
BtlController_EmitResetActionMoveSelection:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L534
	mov	r2, #0x36
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L535:
	.align	2, 0
.L534:
	.word	sBattleBuffersTransferData
.Lfe67:
	.size	 BtlController_EmitResetActionMoveSelection,.Lfe67-BtlController_EmitResetActionMoveSelection
	.align	2, 0
	.globl	BtlController_EmitEndLinkBattle
	.type	 BtlController_EmitEndLinkBattle,function
	.thumb_func
BtlController_EmitEndLinkBattle:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L537
	mov	r2, #0x37
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L538:
	.align	2, 0
.L537:
	.word	sBattleBuffersTransferData
.Lfe68:
	.size	 BtlController_EmitEndLinkBattle,.Lfe68-BtlController_EmitEndLinkBattle
.text
	.align	2, 0 @ Don't pad with nop

