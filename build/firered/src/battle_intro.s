@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	1, 0
	.type	 sBgCnt,object
	.size	 sBgCnt,2
sBgCnt:
	.short	0x0
	.section .rodata
	.align	2, 0
	.type	 sBattleIntroSlideFuncs,object
sBattleIntroSlideFuncs:
	.word	BattleIntroSlide1
	.word	BattleIntroSlide1
	.word	BattleIntroSlide2
	.word	BattleIntroSlide2
	.word	BattleIntroSlide2
	.word	BattleIntroSlide1
	.word	BattleIntroSlide1
	.word	BattleIntroSlide1
	.word	BattleIntroSlide3
	.word	BattleIntroSlide3
	.size	 sBattleIntroSlideFuncs,40
.text
	.align	2, 0
	.globl	SetAnimBgAttribute
	.type	 SetAnimBgAttribute,function
	.thumb_func
SetAnimBgAttribute:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	cmp	r6, #0x3
	bls	.LCB16
	b	.L5	@long jump
.LCB16:
	ldr	r0, .L18
	add	r0, r6, r0
	ldrb	r0, [r0]
	bl	GetGpuReg
	ldr	r1, .L18+0x4
	strh	r0, [r1]
	cmp	r5, #0x6
	bhi	.L6	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L18+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L19:
	.align	2, 0
.L18:
	.word	gBattleAnimRegOffsBgCnt
	.word	sBgCnt
	.word	.L14
	.align	2, 0
	.align	2, 0
.L14:
	.word	.L7
	.word	.L8
	.word	.L9
	.word	.L10
	.word	.L11
	.word	.L12
	.word	.L13
.L7:
	ldr	r2, .L20
	lsl	r3, r4, #0x6
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2, #0x1]
	b	.L6
.L21:
	.align	2, 0
.L20:
	.word	sBgCnt
.L8:
	ldr	r3, .L22
	mov	r0, #0x1
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x5
	ldrb	r2, [r3, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	b	.L16
.L23:
	.align	2, 0
.L22:
	.word	sBgCnt
.L9:
	ldr	r3, .L24
	mov	r0, #0x1
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x6
	ldrb	r2, [r3]
	mov	r0, #0x41
	neg	r0, r0
	b	.L17
.L25:
	.align	2, 0
.L24:
	.word	sBgCnt
.L10:
	ldr	r3, .L26
	mov	r0, #0x3
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0xd
	neg	r0, r0
	b	.L17
.L27:
	.align	2, 0
.L26:
	.word	sBgCnt
.L11:
	ldr	r3, .L28
	mov	r0, #0x3
	add	r1, r4, #0
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x4
	neg	r0, r0
.L17:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L6
.L29:
	.align	2, 0
.L28:
	.word	sBgCnt
.L12:
	ldr	r2, .L30
	lsl	r3, r4, #0x7
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
	b	.L6
.L31:
	.align	2, 0
.L30:
	.word	sBgCnt
.L13:
	ldr	r3, .L32
	mov	r0, #0x1f
	add	r1, r4, #0
	and	r1, r1, r0
	ldrb	r2, [r3, #0x1]
	mov	r0, #0x20
	neg	r0, r0
.L16:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x1]
.L6:
	ldr	r0, .L32+0x4
	add	r0, r6, r0
	ldrb	r0, [r0]
	ldr	r1, .L32
	ldrh	r1, [r1]
	bl	SetGpuReg
.L5:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	sBgCnt
	.word	gBattleAnimRegOffsBgCnt
.Lfe1:
	.size	 SetAnimBgAttribute,.Lfe1-SetAnimBgAttribute
	.align	2, 0
	.globl	GetAnimBgAttribute
	.type	 GetAnimBgAttribute,function
	.thumb_func
GetAnimBgAttribute:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	cmp	r2, #0x3
	bhi	.L35	@cond_branch
	ldr	r0, .L47
	add	r0, r2, r0
	ldrb	r0, [r0]
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	cmp	r4, #0x6
	bhi	.L35	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L47+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L48:
	.align	2, 0
.L47:
	.word	gBattleIntroRegOffsBgCnt
	.word	.L44
	.align	2, 0
	.align	2, 0
.L44:
	.word	.L37
	.word	.L38
	.word	.L39
	.word	.L40
	.word	.L41
	.word	.L42
	.word	.L43
.L37:
	ldr	r0, [sp]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x1e
	b	.L46
.L38:
	ldr	r0, [sp]
	lsl	r0, r0, #0x12
	lsr	r0, r0, #0x1f
	b	.L46
.L39:
	ldr	r0, [sp]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1f
	b	.L46
.L40:
	ldr	r0, [sp]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	b	.L46
.L41:
	ldr	r0, [sp]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	b	.L46
.L42:
	ldr	r0, [sp]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x1f
	b	.L46
.L43:
	ldr	r0, [sp]
	lsl	r0, r0, #0x13
	lsr	r0, r0, #0x1b
	b	.L46
.L35:
	mov	r0, #0x0
.L46:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 GetAnimBgAttribute,.Lfe2-GetAnimBgAttribute
	.align	2, 0
	.globl	HandleIntroSlide
	.type	 HandleIntroSlide,function
	.thumb_func
HandleIntroSlide:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L55
	ldr	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L50	@cond_branch
	ldr	r0, .L55+0x4
	b	.L54
.L56:
	.align	2, 0
.L55:
	.word	gBattleTypeFlags
	.word	BattleIntroSlideLink
.L50:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L52	@cond_branch
	ldr	r0, .L57
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L52	@cond_branch
	mov	r4, #0x3
	ldr	r0, .L57+0x4
	b	.L54
.L58:
	.align	2, 0
.L57:
	.word	gGameVersion
	.word	BattleIntroSlide2
.L52:
	ldr	r1, .L59
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
.L54:
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L59+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	strh	r4, [r1, #0xa]
	strh	r0, [r1, #0xc]
	strh	r0, [r1, #0xe]
	strh	r0, [r1, #0x10]
	strh	r0, [r1, #0x12]
	strh	r0, [r1, #0x14]
	pop	{r4}
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	sBattleIntroSlideFuncs
	.word	gTasks
.Lfe3:
	.size	 HandleIntroSlide,.Lfe3-HandleIntroSlide
	.align	2, 0
	.globl	BattleIntroSlideEnd
	.type	 BattleIntroSlideEnd,function
	.thumb_func
BattleIntroSlideEnd:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	ldr	r0, .L62
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L62+0x4
	strh	r1, [r0]
	ldr	r0, .L62+0x8
	strh	r1, [r0]
	ldr	r0, .L62+0xc
	strh	r1, [r0]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r4, .L62+0x10
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	0x3f3f
.Lfe4:
	.size	 BattleIntroSlideEnd,.Lfe4-BattleIntroSlideEnd
	.align	2, 0
	.type	 BattleIntroSlide1,function
	.thumb_func
BattleIntroSlide1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L98
	ldrh	r0, [r1]
	add	r0, r0, #0x6
	strh	r0, [r1]
	ldr	r1, .L98+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	mov	r8, r1
	cmp	r0, #0x4
	bls	.LCB473
	b	.L65	@long jump
.LCB473:
	lsl	r0, r0, #0x2
	ldr	r1, .L98+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L99:
	.align	2, 0
.L98:
	.word	gBattle_BG1_X
	.word	gTasks
	.word	.L93
	.align	2, 0
	.align	2, 0
.L93:
	.word	.L66
	.word	.L69
	.word	.L71
	.word	.L73
	.word	.L92
.L66:
	ldr	r0, .L100
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L67	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	mov	r1, #0x10
	b	.L96
.L101:
	.align	2, 0
.L100:
	.word	gBattleTypeFlags
.L67:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	mov	r1, #0x1
.L96:
	strh	r1, [r0, #0xc]
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L65
.L69:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	mov	r3, r8
	add	r1, r0, r3
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB543
	b	.L65	@long jump
.LCB543:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	b	.L65
.L71:
	ldr	r1, .L102
	ldrh	r0, [r1]
	sub	r0, r0, #0xff
	strh	r0, [r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x6
	cmp	r0, r1
	beq	.LCB569
	b	.L65	@long jump
.LCB569:
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r8
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0xf0
	strh	r0, [r1, #0xc]
	mov	r0, #0x20
	strh	r0, [r1, #0xe]
	ldr	r2, .L102+0x4
	ldrh	r1, [r2]
	ldr	r0, .L102+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	b	.L65
.L103:
	.align	2, 0
.L102:
	.word	gBattle_WIN0V
	.word	gIntroSlideFlags
	.word	0xfffe
.L73:
	lsl	r0, r4, #0x2
	add	r1, r0, r4
	lsl	r1, r1, #0x3
	mov	r5, r8
	add	r2, r1, r5
	ldrh	r3, [r2, #0xe]
	mov	r5, #0xe
	ldrsh	r1, [r2, r5]
	mov	ip, r0
	cmp	r1, #0
	beq	.L74	@cond_branch
	sub	r0, r3, #0x1
	strh	r0, [r2, #0xe]
	b	.L75
.L74:
	mov	r1, #0xa
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x1
	bne	.L76	@cond_branch
	ldr	r2, .L104
	ldrh	r1, [r2]
	ldr	r0, .L104+0x4
	cmp	r1, r0
	beq	.L75	@cond_branch
	sub	r0, r1, #0x2
	b	.L97
.L105:
	.align	2, 0
.L104:
	.word	gBattle_BG1_Y
	.word	0xffb0
.L76:
	ldr	r2, .L106
	ldrh	r1, [r2]
	ldr	r0, .L106+0x4
	cmp	r1, r0
	beq	.L75	@cond_branch
	sub	r0, r1, #0x1
.L97:
	strh	r0, [r2]
.L75:
	ldr	r2, .L106+0x8
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L80	@cond_branch
	ldr	r3, .L106+0xc
	add	r0, r1, r3
	strh	r0, [r2]
.L80:
	mov	r5, ip
	add	r0, r5, r4
	lsl	r0, r0, #0x3
	mov	r2, r8
	add	r1, r0, r2
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L81	@cond_branch
	sub	r0, r2, #0x2
	strh	r0, [r1, #0xc]
.L81:
	mov	r3, #0x0
	ldr	r5, .L106+0x10
	mov	r9, r5
	ldr	r7, .L106+0x14
	mov	r6, r9
	add	r5, r1, #0
.L85:
	lsl	r2, r3, #0x1
	ldrb	r1, [r6, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r7
	ldrh	r0, [r5, #0xc]
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x4f
	ble	.L85	@cond_branch
	cmp	r3, #0x9f
	bgt	.L95	@cond_branch
	ldr	r7, .L106+0x14
	ldr	r6, .L106+0x10
	ldr	r1, .L106+0x18
	mov	r2, ip
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r5, r0, r1
.L89:
	lsl	r2, r3, #0x1
	ldrb	r1, [r6, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r7
	ldrh	r0, [r5, #0xc]
	neg	r0, r0
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x9f
	ble	.L89	@cond_branch
.L95:
	mov	r3, ip
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	mov	r5, r8
	add	r1, r0, r5
	mov	r0, #0xc
	ldrsh	r2, [r1, r0]
	cmp	r2, #0
	bne	.L65	@cond_branch
	mov	r0, #0x3
	mov	r3, r9
	strb	r0, [r3, #0x15]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	str	r2, [sp]
	ldr	r1, .L106+0x1c
	ldr	r2, .L106+0x20
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r1, #0x9c
	lsl	r1, r1, #0x8
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r1, #0xbc
	lsl	r1, r1, #0x7
	mov	r0, #0xc
	bl	SetGpuReg
	b	.L65
.L107:
	.align	2, 0
.L106:
	.word	gBattle_BG1_Y
	.word	0xffc8
	.word	gBattle_WIN0V
	.word	-0x3fc
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	gTasks
	.word	0x600e000
	.word	0x5000200
.L92:
	add	r0, r4, #0
	bl	BattleIntroSlideEnd
.L65:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 BattleIntroSlide1,.Lfe5-BattleIntroSlide1
	.align	2, 0
	.type	 BattleIntroSlide2,function
	.thumb_func
BattleIntroSlide2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L154
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x3
	beq	.L112	@cond_branch
	cmp	r0, #0x3
	bgt	.L115	@cond_branch
	cmp	r0, #0x2
	beq	.L111	@cond_branch
	b	.L109
.L155:
	.align	2, 0
.L154:
	.word	gTasks
.L115:
	cmp	r0, #0x4
	bne	.L109	@cond_branch
.L111:
	ldr	r1, .L156
	ldrh	r0, [r1]
	add	r0, r0, #0x8
	b	.L151
.L157:
	.align	2, 0
.L156:
	.word	gBattle_BG1_X
.L112:
	ldr	r1, .L158
	ldrh	r0, [r1]
	add	r0, r0, #0x6
.L151:
	strh	r0, [r1]
.L109:
	lsl	r0, r5, #0x2
	add	r1, r0, r5
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	mov	r3, #0xa
	ldrsh	r1, [r4, r3]
	add	r6, r0, #0
	cmp	r1, #0x4
	bne	.L116	@cond_branch
	ldr	r7, .L158+0x4
	ldrh	r0, [r4, #0x14]
	bl	Cos2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L117	@cond_branch
	ldr	r1, .L158+0x8
	add	r0, r0, r1
.L117:
	asr	r0, r0, #0x9
	sub	r0, r0, #0x8
	strh	r0, [r7]
	ldrh	r1, [r4, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xb3
	bgt	.L118	@cond_branch
	add	r0, r1, #0x4
	b	.L152
.L159:
	.align	2, 0
.L158:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	0x1ff
.L118:
	add	r0, r1, #0x6
.L152:
	strh	r0, [r4, #0x14]
	ldr	r2, .L160
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	mov	r0, #0x14
	ldrsh	r1, [r3, r0]
	mov	r0, #0xb4
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L116	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x14]
.L116:
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x4
	bls	.LCB951
	b	.L121	@long jump
.LCB951:
	lsl	r0, r0, #0x2
	ldr	r1, .L160+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L161:
	.align	2, 0
.L160:
	.word	gTasks
	.word	.L147
	.align	2, 0
	.align	2, 0
.L147:
	.word	.L122
	.word	.L125
	.word	.L127
	.word	.L129
	.word	.L146
.L122:
	ldr	r1, .L162
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r3, #0x10
	strh	r3, [r2, #0x10]
	ldr	r0, .L162+0x4
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L123	@cond_branch
	strh	r3, [r2, #0xc]
	b	.L153
.L163:
	.align	2, 0
.L162:
	.word	gTasks
	.word	gBattleTypeFlags
.L123:
	mov	r0, #0x1
	strh	r0, [r2, #0xc]
.L153:
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	b	.L121
.L125:
	ldr	r0, .L164
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1017
	b	.L121	@long jump
.LCB1017:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	b	.L121
.L165:
	.align	2, 0
.L164:
	.word	gTasks
.L127:
	ldr	r1, .L166
	ldrh	r0, [r1]
	sub	r0, r0, #0xff
	strh	r0, [r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x6
	cmp	r0, r1
	beq	.LCB1049
	b	.L121	@long jump
.LCB1049:
	ldr	r0, .L166+0x4
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0xf0
	strh	r0, [r1, #0xc]
	mov	r0, #0x20
	strh	r0, [r1, #0xe]
	mov	r0, #0x1
	strh	r0, [r1, #0x12]
	ldr	r2, .L166+0x8
	ldrh	r1, [r2]
	ldr	r0, .L166+0xc
	and	r0, r0, r1
	strh	r0, [r2]
	b	.L121
.L167:
	.align	2, 0
.L166:
	.word	gBattle_WIN0V
	.word	gTasks
	.word	gIntroSlideFlags
	.word	0xfffe
.L129:
	ldr	r0, .L168
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L130	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L132	@cond_branch
	ldr	r1, .L168+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0xf
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L132
.L169:
	.align	2, 0
.L168:
	.word	gTasks
	.word	0x1842
.L130:
	ldrh	r2, [r1, #0x10]
	mov	r0, #0x1f
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L132	@cond_branch
	ldrh	r0, [r1, #0x12]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L132	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xff
	strh	r0, [r1, #0x10]
	mov	r0, #0x4
	strh	r0, [r1, #0x12]
.L132:
	ldr	r2, .L170
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L134	@cond_branch
	ldr	r3, .L170+0x4
	add	r0, r1, r3
	strh	r0, [r2]
.L134:
	ldr	r0, .L170+0x8
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L135	@cond_branch
	sub	r0, r2, #0x2
	strh	r0, [r1, #0xc]
.L135:
	mov	r3, #0x0
	ldr	r0, .L170+0xc
	mov	r8, r0
	ldr	r2, .L170+0x10
	mov	ip, r2
	mov	r7, r8
	add	r4, r1, #0
.L139:
	lsl	r2, r3, #0x1
	ldrb	r1, [r7, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, ip
	ldrh	r0, [r4, #0xc]
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x4f
	ble	.L139	@cond_branch
	cmp	r3, #0x9f
	bgt	.L150	@cond_branch
	ldr	r0, .L170+0x10
	mov	ip, r0
	ldr	r7, .L170+0xc
	ldr	r1, .L170+0x8
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
.L143:
	lsl	r2, r3, #0x1
	ldrb	r1, [r7, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, ip
	ldrh	r0, [r4, #0xc]
	neg	r0, r0
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x9f
	ble	.L143	@cond_branch
.L150:
	ldr	r1, .L170+0x8
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r3, #0xc
	ldrsh	r2, [r1, r3]
	cmp	r2, #0
	bne	.L121	@cond_branch
	mov	r0, #0x3
	mov	r3, r8
	strb	r0, [r3, #0x15]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	str	r2, [sp]
	ldr	r1, .L170+0x14
	ldr	r2, .L170+0x18
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r1, #0x9c
	lsl	r1, r1, #0x8
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r1, #0xbc
	lsl	r1, r1, #0x7
	mov	r0, #0xc
	bl	SetGpuReg
	b	.L121
.L171:
	.align	2, 0
.L170:
	.word	gBattle_WIN0V
	.word	-0x3fc
	.word	gTasks
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	0x600e000
	.word	0x5000200
.L146:
	add	r0, r5, #0
	bl	BattleIntroSlideEnd
.L121:
	ldr	r0, .L172
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x4
	beq	.L149	@cond_branch
	ldrh	r1, [r1, #0x10]
	mov	r0, #0x52
	bl	SetGpuReg
.L149:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gTasks
.Lfe6:
	.size	 BattleIntroSlide2,.Lfe6-BattleIntroSlide2
	.align	2, 0
	.type	 BattleIntroSlide3,function
	.thumb_func
BattleIntroSlide3:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L205
	ldrh	r0, [r1]
	add	r0, r0, #0x8
	strh	r0, [r1]
	ldr	r1, .L205+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r4, r1, #0
	cmp	r0, #0x4
	bls	.LCB1345
	b	.L175	@long jump
.LCB1345:
	lsl	r0, r0, #0x2
	ldr	r1, .L205+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L206:
	.align	2, 0
.L205:
	.word	gBattle_BG1_X
	.word	gTasks
	.word	.L200
	.align	2, 0
	.align	2, 0
.L200:
	.word	.L176
	.word	.L179
	.word	.L181
	.word	.L183
	.word	.L199
.L176:
	ldr	r1, .L207
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r4, .L207+0x4
	mov	r0, #0x52
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L207+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	strh	r4, [r2, #0x10]
	ldr	r0, .L207+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L177	@cond_branch
	mov	r0, #0x10
	b	.L204
.L208:
	.align	2, 0
.L207:
	.word	0x1842
	.word	0x808
	.word	gTasks
	.word	gBattleTypeFlags
.L177:
	mov	r0, #0x1
.L204:
	strh	r0, [r2, #0xc]
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	b	.L175
.L179:
	ldr	r0, .L209
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1424
	b	.L175	@long jump
.LCB1424:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	b	.L175
.L210:
	.align	2, 0
.L209:
	.word	gTasks
.L181:
	ldr	r1, .L211
	ldrh	r0, [r1]
	sub	r0, r0, #0xff
	strh	r0, [r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x6
	cmp	r0, r1
	beq	.LCB1456
	b	.L175	@long jump
.LCB1456:
	ldr	r0, .L211+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0xf0
	strh	r0, [r1, #0xc]
	mov	r0, #0x20
	strh	r0, [r1, #0xe]
	mov	r0, #0x1
	strh	r0, [r1, #0x12]
	ldr	r2, .L211+0x8
	ldrh	r1, [r2]
	ldr	r0, .L211+0xc
	and	r0, r0, r1
	strh	r0, [r2]
	b	.L175
.L212:
	.align	2, 0
.L211:
	.word	gBattle_WIN0V
	.word	gTasks
	.word	gIntroSlideFlags
	.word	0xfffe
.L183:
	lsl	r0, r5, #0x2
	add	r1, r0, r5
	lsl	r1, r1, #0x3
	add	r2, r1, r4
	ldrh	r3, [r2, #0xe]
	mov	r6, #0xe
	ldrsh	r1, [r2, r6]
	mov	ip, r0
	cmp	r1, #0
	beq	.L184	@cond_branch
	sub	r0, r3, #0x1
	strh	r0, [r2, #0xe]
	b	.L185
.L184:
	ldrh	r1, [r2, #0x10]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L185	@cond_branch
	ldrh	r0, [r2, #0x12]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x12]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L185	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0xff
	strh	r0, [r2, #0x10]
	mov	r0, #0x6
	strh	r0, [r2, #0x12]
.L185:
	ldr	r2, .L213
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L187	@cond_branch
	ldr	r3, .L213+0x4
	add	r0, r1, r3
	strh	r0, [r2]
.L187:
	mov	r6, ip
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L188	@cond_branch
	sub	r0, r2, #0x2
	strh	r0, [r1, #0xc]
.L188:
	mov	r3, #0x0
	ldr	r6, .L213+0x8
	mov	r8, r6
	ldr	r7, .L213+0xc
	add	r4, r1, #0
.L192:
	lsl	r2, r3, #0x1
	ldrb	r1, [r6, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r7
	ldrh	r0, [r4, #0xc]
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x4f
	ble	.L192	@cond_branch
	cmp	r3, #0x9f
	bgt	.L203	@cond_branch
	ldr	r7, .L213+0xc
	ldr	r6, .L213+0x8
	ldr	r1, .L213+0x10
	mov	r2, ip
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
.L196:
	lsl	r2, r3, #0x1
	ldrb	r1, [r6, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r7
	ldrh	r0, [r4, #0xc]
	neg	r0, r0
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x9f
	ble	.L196	@cond_branch
.L203:
	ldr	r1, .L213+0x10
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r3, #0xc
	ldrsh	r2, [r1, r3]
	cmp	r2, #0
	bne	.L175	@cond_branch
	mov	r0, #0x3
	mov	r6, r8
	strb	r0, [r6, #0x15]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	str	r2, [sp]
	ldr	r1, .L213+0x14
	ldr	r2, .L213+0x18
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r1, #0x9c
	lsl	r1, r1, #0x8
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r1, #0xbc
	lsl	r1, r1, #0x7
	mov	r0, #0xc
	bl	SetGpuReg
	b	.L175
.L214:
	.align	2, 0
.L213:
	.word	gBattle_WIN0V
	.word	-0x3fc
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	gTasks
	.word	0x600e000
	.word	0x5000200
.L199:
	add	r0, r5, #0
	bl	BattleIntroSlideEnd
.L175:
	ldr	r0, .L215
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x4
	beq	.L202	@cond_branch
	ldrh	r1, [r1, #0x10]
	mov	r0, #0x52
	bl	SetGpuReg
.L202:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L216:
	.align	2, 0
.L215:
	.word	gTasks
.Lfe7:
	.size	 BattleIntroSlide3,.Lfe7-BattleIntroSlide3
	.align	2, 0
	.type	 BattleIntroSlideLink,function
	.thumb_func
BattleIntroSlideLink:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L245
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r7, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	cmp	r0, #0x1
	ble	.L218	@cond_branch
	mov	r2, #0x10
	ldrsh	r0, [r7, r2]
	cmp	r0, #0
	bne	.L218	@cond_branch
	ldr	r2, .L245+0x4
	ldrh	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0
	bne	.L220	@cond_branch
	cmp	r1, #0x4f
	bhi	.L219	@cond_branch
.L220:
	add	r0, r1, #0x3
	strh	r0, [r2]
	ldr	r1, .L245+0x8
	ldrh	r0, [r1]
	sub	r0, r0, #0x3
	strh	r0, [r1]
	b	.L218
.L246:
	.align	2, 0
.L245:
	.word	gTasks
	.word	gBattle_BG1_X
	.word	gBattle_BG2_X
.L219:
	str	r5, [sp]
	ldr	r1, .L247
	ldr	r4, .L247+0x4
	mov	r0, sp
	add	r2, r4, #0
	bl	CpuSet
	str	r5, [sp, #0x4]
	add	r0, sp, #0x4
	ldr	r1, .L247+0x8
	add	r2, r4, #0
	bl	CpuSet
	mov	r0, #0x1
	strh	r0, [r7, #0x10]
.L218:
	ldr	r0, .L247+0xc
	lsl	r2, r6, #0x2
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0x8
	ldrsh	r1, [r1, r3]
	mov	r9, r0
	add	r5, r2, #0
	cmp	r1, #0x4
	bls	.LCB1799
	b	.L222	@long jump
.LCB1799:
	lsl	r0, r1, #0x2
	ldr	r1, .L247+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L248:
	.align	2, 0
.L247:
	.word	0x600e000
	.word	0x5000200
	.word	0x600f000
	.word	gTasks
	.word	.L242
	.align	2, 0
	.align	2, 0
.L242:
	.word	.L223
	.word	.L224
	.word	.L226
	.word	.L228
	.word	.L241
.L223:
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	mov	r1, #0x20
	strh	r1, [r0, #0xc]
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L222
.L224:
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	mov	r2, r9
	add	r1, r0, r2
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1847
	b	.L222	@long jump
.LCB1847:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	ldr	r4, .L249
	ldr	r5, .L249+0x4
	ldr	r0, [r5]
	add	r0, r0, #0x7d
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r3, [r1, #0x1]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	mov	r3, #0x8
	mov	r9, r3
	mov	r3, r9
	orr	r0, r0, r3
	strb	r0, [r1, #0x1]
	ldr	r3, [r5]
	add	r0, r3, #0
	add	r0, r0, #0x7d
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0x1c
	add	r1, r1, r4
	mov	r8, r1
	add	r0, r0, r8
	ldr	r6, .L249+0x8
	str	r6, [r0]
	add	r3, r3, #0x7e
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	and	r2, r2, r1
	mov	r3, r9
	orr	r2, r2, r3
	strb	r2, [r0, #0x1]
	ldr	r0, [r5]
	add	r0, r0, #0x7e
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	str	r6, [r0]
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	ldr	r1, .L249+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	b	.L222
.L250:
	.align	2, 0
.L249:
	.word	gSprites
	.word	gBattleStruct
	.word	SpriteCB_VsLetterInit
	.word	0x3f06
.L226:
	ldr	r1, .L251
	ldrh	r0, [r1]
	sub	r0, r0, #0xff
	strh	r0, [r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x6
	cmp	r0, r1
	beq	.LCB1939
	b	.L222	@long jump
.LCB1939:
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r9
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0xf0
	strh	r0, [r1, #0xc]
	mov	r0, #0x20
	strh	r0, [r1, #0xe]
	ldr	r2, .L251+0x4
	ldrh	r1, [r2]
	ldr	r0, .L251+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	b	.L222
.L252:
	.align	2, 0
.L251:
	.word	gBattle_WIN0V
	.word	gIntroSlideFlags
	.word	0xfffe
.L228:
	ldr	r2, .L253
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L229	@cond_branch
	ldr	r3, .L253+0x4
	add	r0, r1, r3
	strh	r0, [r2]
.L229:
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	mov	r2, r9
	add	r1, r0, r2
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L230	@cond_branch
	sub	r0, r2, #0x2
	strh	r0, [r1, #0xc]
.L230:
	mov	r3, #0x0
	ldr	r0, .L253+0x8
	mov	ip, r0
	ldr	r2, .L253+0xc
	mov	r8, r2
	mov	r7, ip
	add	r4, r1, #0
.L234:
	lsl	r2, r3, #0x1
	ldrb	r1, [r7, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r8
	ldrh	r0, [r4, #0xc]
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x4f
	ble	.L234	@cond_branch
	cmp	r3, #0x9f
	bgt	.L244	@cond_branch
	ldr	r0, .L253+0xc
	mov	r8, r0
	ldr	r7, .L253+0x8
	ldr	r1, .L253+0x10
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
.L238:
	lsl	r2, r3, #0x1
	ldrb	r1, [r7, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r8
	ldrh	r0, [r4, #0xc]
	neg	r0, r0
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x9f
	ble	.L238	@cond_branch
.L244:
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	mov	r2, r9
	add	r1, r0, r2
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L222	@cond_branch
	mov	r0, #0x3
	mov	r2, ip
	strb	r0, [r2, #0x15]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r1, #0x9c
	lsl	r1, r1, #0x8
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r1, #0xbc
	lsl	r1, r1, #0x7
	mov	r0, #0xc
	bl	SetGpuReg
	b	.L222
.L254:
	.align	2, 0
.L253:
	.word	gBattle_WIN0V
	.word	-0x3fc
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	gTasks
.L241:
	add	r0, r6, #0
	bl	BattleIntroSlideEnd
.L222:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 BattleIntroSlideLink,.Lfe8-BattleIntroSlideLink
	.align	2, 0
	.globl	CopyBattlerSpriteToBg
	.type	 CopyBattlerSpriteToBg,function
	.thumb_func
CopyBattlerSpriteToBg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	str	r0, [sp]
	add	r6, r2, #0
	add	r4, r3, #0
	ldr	r0, [sp, #0x24]
	ldr	r7, [sp, #0x28]
	ldr	r2, [sp, #0x2c]
	mov	r9, r2
	ldr	r5, [sp, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r4, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L266
	ldr	r2, [r1]
	lsl	r4, r4, #0x2
	add	r2, r2, #0x4
	add	r2, r2, r4
	ldr	r1, .L266+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0xb
	ldr	r0, [r2]
	add	r0, r0, r1
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r1, r7, #0
	bl	CpuSet
	ldr	r1, [sp]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r1, r7, #0
	add	r3, r5, #0
	bl	LoadBgTiles
	add	r0, r6, #0
	add	r0, r0, #0x8
	cmp	r6, r0
	bge	.L257	@cond_branch
	mov	ip, r0
	mov	r2, r8
	lsl	r7, r2, #0x1
.L259:
	mov	r1, r8
	add	r2, r1, #0
	add	r2, r2, #0x8
	add	r4, r6, #0x1
	cmp	r1, r2
	bge	.L258	@cond_branch
	mov	r0, sl
	lsl	r3, r0, #0xc
	lsl	r0, r6, #0x6
	add	r0, r0, r9
	add	r6, r7, r0
	sub	r1, r2, r1
.L263:
	add	r0, r5, #0
	orr	r0, r0, r3
	strh	r0, [r6]
	add	r5, r5, #0x1
	add	r6, r6, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L263	@cond_branch
.L258:
	add	r6, r4, #0
	cmp	r6, ip
	blt	.L259	@cond_branch
.L257:
	ldr	r1, [sp]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r1, r9
	mov	r3, #0x0
	bl	LoadBgTilemap
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L267:
	.align	2, 0
.L266:
	.word	gMonSpritesGfxPtr
	.word	gBattleMonForms
.Lfe9:
	.size	 CopyBattlerSpriteToBg,.Lfe9-CopyBattlerSpriteToBg
	.align	2, 0
	.type	 DrawBattlerOnBgDMA,function
	.thumb_func
DrawBattlerOnBgDMA:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x24]
	ldr	r5, [sp, #0x28]
	mov	r8, r5
	ldr	r5, [sp, #0x2c]
	ldr	r6, [sp, #0x30]
	mov	r9, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	mov	r7, r8
	lsl	r7, r7, #0x10
	lsr	r6, r7, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, r9
	lsl	r0, r0, #0x18
	mov	r9, r0
	ldr	r4, .L279
	ldr	r0, .L279+0x4
	ldr	r0, [r0]
	lsr	r2, r2, #0x16
	add	r0, r0, #0x4
	add	r0, r0, r2
	lsr	r3, r3, #0xd
	ldr	r0, [r0]
	add	r0, r0, r3
	str	r0, [r4]
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	add	r6, r6, r0
	str	r6, [r4, #0x4]
	ldr	r0, .L279+0x8
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	add	r2, r7, #0
	lsr	r2, r2, #0x15
	mov	r6, r9
	lsr	r6, r6, #0xf
	sub	r4, r2, r6
	lsr	r0, r1, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x8
	cmp	r0, r1
	bge	.L270	@cond_branch
	mov	r9, r1
	mov	r7, ip
	lsl	r7, r7, #0x1
	mov	r8, r7
	lsl	r5, r5, #0xb
	str	r5, [sp]
.L272:
	mov	r2, ip
	add	r3, r2, #0
	add	r3, r3, #0x8
	add	r5, r0, #0x1
	cmp	r2, r3
	bge	.L271	@cond_branch
	mov	r1, sl
	lsl	r6, r1, #0xc
	lsl	r0, r0, #0x6
	mov	r7, #0xc0
	lsl	r7, r7, #0x13
	add	r0, r0, r7
	ldr	r1, [sp]
	add	r0, r1, r0
	mov	r7, r8
	add	r1, r7, r0
	sub	r2, r3, r2
.L276:
	add	r0, r4, #0
	orr	r0, r0, r6
	strh	r0, [r1]
	add	r4, r4, #0x1
	add	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L276	@cond_branch
.L271:
	add	r0, r5, #0
	cmp	r0, r9
	blt	.L272	@cond_branch
.L270:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	0x40000d4
	.word	gMonSpritesGfxPtr
	.word	-0x7ffffc00
.Lfe10:
	.size	 DrawBattlerOnBgDMA,.Lfe10-DrawBattlerOnBgDMA
.text
	.align	2, 0 @ Don't pad with nop

