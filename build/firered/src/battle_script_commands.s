@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gBattleScriptingCommandsTable
	.section .rodata
	.align	2, 0
	.type	 gBattleScriptingCommandsTable,object
gBattleScriptingCommandsTable:
	.word	Cmd_attackcanceler
	.word	Cmd_accuracycheck
	.word	Cmd_attackstring
	.word	Cmd_ppreduce
	.word	Cmd_critcalc
	.word	Cmd_damagecalc
	.word	Cmd_typecalc
	.word	Cmd_adjustnormaldamage
	.word	Cmd_adjustnormaldamage2
	.word	Cmd_attackanimation
	.word	Cmd_waitanimation
	.word	Cmd_healthbarupdate
	.word	Cmd_datahpupdate
	.word	Cmd_critmessage
	.word	Cmd_effectivenesssound
	.word	Cmd_resultmessage
	.word	Cmd_printstring
	.word	Cmd_printselectionstring
	.word	Cmd_waitmessage
	.word	Cmd_printfromtable
	.word	Cmd_printselectionstringfromtable
	.word	Cmd_seteffectwithchance
	.word	Cmd_seteffectprimary
	.word	Cmd_seteffectsecondary
	.word	Cmd_clearstatusfromeffect
	.word	Cmd_tryfaintmon
	.word	Cmd_dofaintanimation
	.word	Cmd_cleareffectsonfaint
	.word	Cmd_jumpifstatus
	.word	Cmd_jumpifstatus2
	.word	Cmd_jumpifability
	.word	Cmd_jumpifsideaffecting
	.word	Cmd_jumpifstat
	.word	Cmd_jumpifstatus3condition
	.word	Cmd_jumpiftype
	.word	Cmd_getexp
	.word	Cmd_checkteamslost
	.word	Cmd_movevaluescleanup
	.word	Cmd_setmultihit
	.word	Cmd_decrementmultihit
	.word	Cmd_goto
	.word	Cmd_jumpifbyte
	.word	Cmd_jumpifhalfword
	.word	Cmd_jumpifword
	.word	Cmd_jumpifarrayequal
	.word	Cmd_jumpifarraynotequal
	.word	Cmd_setbyte
	.word	Cmd_addbyte
	.word	Cmd_subbyte
	.word	Cmd_copyarray
	.word	Cmd_copyarraywithindex
	.word	Cmd_orbyte
	.word	Cmd_orhalfword
	.word	Cmd_orword
	.word	Cmd_bicbyte
	.word	Cmd_bichalfword
	.word	Cmd_bicword
	.word	Cmd_pause
	.word	Cmd_waitstate
	.word	Cmd_healthbar_update
	.word	Cmd_return
	.word	Cmd_end
	.word	Cmd_end2
	.word	Cmd_end3
	.word	Cmd_jumpifaffectedbyprotect
	.word	Cmd_call
	.word	Cmd_jumpiftype2
	.word	Cmd_jumpifabilitypresent
	.word	Cmd_endselectionscript
	.word	Cmd_playanimation
	.word	Cmd_playanimation_var
	.word	Cmd_setgraphicalstatchangevalues
	.word	Cmd_playstatchangeanimation
	.word	Cmd_moveend
	.word	Cmd_typecalc2
	.word	Cmd_returnatktoball
	.word	Cmd_getswitchedmondata
	.word	Cmd_switchindataupdate
	.word	Cmd_switchinanim
	.word	Cmd_jumpifcantswitch
	.word	Cmd_openpartyscreen
	.word	Cmd_switchhandleorder
	.word	Cmd_switchineffects
	.word	Cmd_trainerslidein
	.word	Cmd_playse
	.word	Cmd_fanfare
	.word	Cmd_playfaintcry
	.word	Cmd_endlinkbattle
	.word	Cmd_returntoball
	.word	Cmd_handlelearnnewmove
	.word	Cmd_yesnoboxlearnmove
	.word	Cmd_yesnoboxstoplearningmove
	.word	Cmd_hitanimation
	.word	Cmd_getmoneyreward
	.word	Cmd_updatebattlermoves
	.word	Cmd_swapattackerwithtarget
	.word	Cmd_incrementgamestat
	.word	Cmd_drawpartystatussummary
	.word	Cmd_hidepartystatussummary
	.word	Cmd_jumptocalledmove
	.word	Cmd_statusanimation
	.word	Cmd_status2animation
	.word	Cmd_chosenstatusanimation
	.word	Cmd_yesnobox
	.word	Cmd_cancelallactions
	.word	Cmd_adjustsetdamage
	.word	Cmd_removeitem
	.word	Cmd_atknameinbuff1
	.word	Cmd_drawlvlupbox
	.word	Cmd_resetsentmonsvalue
	.word	Cmd_setatktoplayer0
	.word	Cmd_makevisible
	.word	Cmd_recordlastability
	.word	Cmd_buffermovetolearn
	.word	Cmd_jumpifplayerran
	.word	Cmd_hpthresholds
	.word	Cmd_hpthresholds2
	.word	Cmd_useitemonopponent
	.word	Cmd_various
	.word	Cmd_setprotectlike
	.word	Cmd_tryexplosion
	.word	Cmd_setatkhptozero
	.word	Cmd_jumpifnexttargetvalid
	.word	Cmd_tryhealhalfhealth
	.word	Cmd_trymirrormove
	.word	Cmd_setrain
	.word	Cmd_setreflect
	.word	Cmd_setseeded
	.word	Cmd_manipulatedamage
	.word	Cmd_trysetrest
	.word	Cmd_jumpifnotfirstturn
	.word	Cmd_nop
	.word	Cmd_jumpifcantmakeasleep
	.word	Cmd_stockpile
	.word	Cmd_stockpiletobasedamage
	.word	Cmd_stockpiletohpheal
	.word	Cmd_negativedamage
	.word	Cmd_statbuffchange
	.word	Cmd_normalisebuffs
	.word	Cmd_setbide
	.word	Cmd_confuseifrepeatingattackends
	.word	Cmd_setmultihitcounter
	.word	Cmd_initmultihitstring
	.word	Cmd_forcerandomswitch
	.word	Cmd_tryconversiontypechange
	.word	Cmd_givepaydaymoney
	.word	Cmd_setlightscreen
	.word	Cmd_tryKO
	.word	Cmd_damagetohalftargethp
	.word	Cmd_setsandstorm
	.word	Cmd_weatherdamage
	.word	Cmd_tryinfatuating
	.word	Cmd_updatestatusicon
	.word	Cmd_setmist
	.word	Cmd_setfocusenergy
	.word	Cmd_transformdataexecution
	.word	Cmd_setsubstitute
	.word	Cmd_mimicattackcopy
	.word	Cmd_metronome
	.word	Cmd_dmgtolevel
	.word	Cmd_psywavedamageeffect
	.word	Cmd_counterdamagecalculator
	.word	Cmd_mirrorcoatdamagecalculator
	.word	Cmd_disablelastusedattack
	.word	Cmd_trysetencore
	.word	Cmd_painsplitdmgcalc
	.word	Cmd_settypetorandomresistance
	.word	Cmd_setalwayshitflag
	.word	Cmd_copymovepermanently
	.word	Cmd_trychoosesleeptalkmove
	.word	Cmd_setdestinybond
	.word	Cmd_trysetdestinybondtohappen
	.word	Cmd_remaininghptopower
	.word	Cmd_tryspiteppreduce
	.word	Cmd_healpartystatus
	.word	Cmd_cursetarget
	.word	Cmd_trysetspikes
	.word	Cmd_setforesight
	.word	Cmd_trysetperishsong
	.word	Cmd_rolloutdamagecalculation
	.word	Cmd_jumpifconfusedandstatmaxed
	.word	Cmd_furycuttercalc
	.word	Cmd_friendshiptodamagecalculation
	.word	Cmd_presentdamagecalculation
	.word	Cmd_setsafeguard
	.word	Cmd_magnitudedamagecalculation
	.word	Cmd_jumpifnopursuitswitchdmg
	.word	Cmd_setsunny
	.word	Cmd_maxattackhalvehp
	.word	Cmd_copyfoestats
	.word	Cmd_rapidspinfree
	.word	Cmd_setdefensecurlbit
	.word	Cmd_recoverbasedonsunlight
	.word	Cmd_hiddenpowercalc
	.word	Cmd_selectfirstvalidtarget
	.word	Cmd_trysetfutureattack
	.word	Cmd_trydobeatup
	.word	Cmd_setsemiinvulnerablebit
	.word	Cmd_clearsemiinvulnerablebit
	.word	Cmd_setminimize
	.word	Cmd_sethail
	.word	Cmd_trymemento
	.word	Cmd_setforcedtarget
	.word	Cmd_setcharge
	.word	Cmd_callterrainattack
	.word	Cmd_cureifburnedparalysedorpoisoned
	.word	Cmd_settorment
	.word	Cmd_jumpifnodamage
	.word	Cmd_settaunt
	.word	Cmd_trysethelpinghand
	.word	Cmd_tryswapitems
	.word	Cmd_trycopyability
	.word	Cmd_trywish
	.word	Cmd_trysetroots
	.word	Cmd_doubledamagedealtifdamaged
	.word	Cmd_setyawn
	.word	Cmd_setdamagetohealthdifference
	.word	Cmd_scaledamagebyhealthratio
	.word	Cmd_tryswapabilities
	.word	Cmd_tryimprison
	.word	Cmd_trysetgrudge
	.word	Cmd_weightdamagecalculation
	.word	Cmd_assistattackselect
	.word	Cmd_trysetmagiccoat
	.word	Cmd_trysetsnatch
	.word	Cmd_trygetintimidatetarget
	.word	Cmd_switchoutabilities
	.word	Cmd_jumpifhasnohp
	.word	Cmd_getsecretpowereffect
	.word	Cmd_pickup
	.word	Cmd_docastformchangeanimation
	.word	Cmd_trycastformdatachange
	.word	Cmd_settypebasedhalvers
	.word	Cmd_setweatherballtype
	.word	Cmd_tryrecycleitem
	.word	Cmd_settypetoterrain
	.word	Cmd_pursuitdoubles
	.word	Cmd_snatchsetbattlers
	.word	Cmd_removelightscreenreflect
	.word	Cmd_handleballthrow
	.word	Cmd_givecaughtmon
	.word	Cmd_trysetcaughtmondexflags
	.word	Cmd_displaydexinfo
	.word	Cmd_trygivecaughtmonnick
	.word	Cmd_subattackerhpbydmg
	.word	Cmd_removeattackerstatus1
	.word	Cmd_finishaction
	.word	Cmd_finishturn
	.size	 gBattleScriptingCommandsTable,992
	.align	2, 0
	.type	 sAccuracyStageRatios,object
sAccuracyStageRatios:
	.byte	0x21
	.byte	0x64
	.space	2
	.byte	0x24
	.byte	0x64
	.space	2
	.byte	0x2b
	.byte	0x64
	.space	2
	.byte	0x32
	.byte	0x64
	.space	2
	.byte	0x3c
	.byte	0x64
	.space	2
	.byte	0x4b
	.byte	0x64
	.space	2
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x85
	.byte	0x64
	.space	2
	.byte	0xa6
	.byte	0x64
	.space	2
	.byte	0x2
	.byte	0x1
	.space	2
	.byte	0xe9
	.byte	0x64
	.space	2
	.byte	0x85
	.byte	0x32
	.space	2
	.byte	0x3
	.byte	0x1
	.space	2
	.size	 sAccuracyStageRatios,52
	.align	1, 0
	.type	 sCriticalHitChance,object
sCriticalHitChance:
	.short	0x10
	.short	0x8
	.short	0x4
	.short	0x3
	.short	0x2
	.size	 sCriticalHitChance,10
	.align	2, 0
	.type	 sStatusFlagsForMoveEffects,object
	.size	 sStatusFlagsForMoveEffects,240
sStatusFlagsForMoveEffects:
	.space	4
	.word	0x7
	.word	0x8
	.word	0x10
	.word	0x20
	.word	0x40
	.word	0x80
	.word	0x7
	.word	0x8
	.space	4
	.word	0x70
	.space	4
	.word	0x1000
	.word	0xe000
	.space	60
	.word	0x400000
	.space	8
	.word	0x4000000
	.word	0x8000000
	.space	76
	.word	0xc00
	.space	24
	.align	2, 0
	.type	 sMoveEffectBS_Ptrs,object
sMoveEffectBS_Ptrs:
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectPoison
	.word	BattleScript_MoveEffectBurn
	.word	BattleScript_MoveEffectFreeze
	.word	BattleScript_MoveEffectParalysis
	.word	BattleScript_MoveEffectToxic
	.word	BattleScript_MoveEffectConfusion
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectUproar
	.word	BattleScript_MoveEffectPayDay
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectWrap
	.word	BattleScript_MoveEffectRecoil
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectRecoil
	.size	 sMoveEffectBS_Ptrs,156
	.align	2, 0
	.type	 sUnusedWinTemplate,object
	.size	 sUnusedWinTemplate,8
sUnusedWinTemplate:
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x7
	.byte	0xf
	.byte	0x1f
	.short	0x3f
	.align	1, 0
	.type	 sLevelUpBanner_Pal,object
sLevelUpBanner_Pal:
	.short	0x7fff
	.short	0x7fff
	.short	0x396d
	.short	0x0
	.short	0x7f9a
	.short	0x7737
	.short	0x7fbd
	.short	0x62ad
	.short	0x5a2b
	.short	0x670f
	.short	0x0
	.short	0x0
	.short	0x7f0f
	.short	0x4400
	.short	0x421f
	.short	0x14
	.size	 sLevelUpBanner_Pal,32
	.align	2, 0
	.type	 sLevelUpBanner_Gfx,object
sLevelUpBanner_Gfx:
	.word	0x48010
	.word	0x33333000
	.word	-0x6666cccd
	.word	0x79930399
	.word	0x77937777
	.word	0x1e4003f0
	.word	0xa00997f
	.word	0x1ff001f0
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	-0xfe00f01
	.word	-0xfe00fe6
	.word	-0xfe00fff
	.word	-0xfe00fe1
	.word	0x1ff0f51f
	.word	0x1f01ff0
	.word	0x31f30
	.word	0xa00331e
	.word	0x3f03848
	.word	0x6fd13877
	.word	0x7f444463
	.word	-0x2ffc6fbc
	.word	-0x5fedffb1
	.word	-0xfe00fff
	.word	-0xe00fe1
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	-0xfe00f02
	.word	-0xfe00fe1
	.word	-0x2ee00fe1
	.word	0x3512006f
	.word	-0x2efc6f1f
	.word	0x3303506f
	.word	0x13555555
	.word	0x4fd0ef1b
	.word	0x1e000150
	.word	-0xf04eeab
	.word	-0xfe00fe7
	.word	0x1ff0ff01
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	0x1f01ff0
	.word	-0xf01e010
	.word	-0xfe00fff
	.word	-0xfe00fe1
	.word	0x306fd11f
	.word	0x35405403
	.word	0x31e40
	.size	 sLevelUpBanner_Gfx,200
	.type	 sRubyLevelUpStatBoxStats,object
sRubyLevelUpStatBoxStats:
	.byte	0x3a
	.byte	0x3e
	.byte	0x3b
	.byte	0x3f
	.byte	0x3c
	.byte	0x3d
	.size	 sRubyLevelUpStatBoxStats,6
	.align	2, 0
	.type	 sOamData_MonIconOnLvlUpBanner,object
	.size	 sOamData_MonIconOnLvlUpBanner,8
sOamData_MonIconOnLvlUpBanner:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_MonIconOnLvlUpBanner,object
	.size	 sSpriteTemplate_MonIconOnLvlUpBanner,24
sSpriteTemplate_MonIconOnLvlUpBanner:
	.short	0xd75a
	.short	0xd75a
	.word	sOamData_MonIconOnLvlUpBanner
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_MonIconOnLvlUpBanner
	.align	1, 0
	.type	 sProtectSuccessRates,object
sProtectSuccessRates:
	.short	0xffff
	.short	0x7fff
	.short	0x3fff
	.short	0x1fff
	.size	 sProtectSuccessRates,8
	.align	1, 0
	.type	 sMovesForbiddenToCopy,object
sMovesForbiddenToCopy:
	.short	0x76
	.short	0xa5
	.short	0xa6
	.short	0x66
	.short	0xfffe
	.short	0x44
	.short	0xf3
	.short	0xb6
	.short	0xc5
	.short	0xcb
	.short	0xc2
	.short	0xd6
	.short	0xa8
	.short	0x10a
	.short	0x121
	.short	0x10e
	.short	0x157
	.short	0x10f
	.short	0x108
	.short	0xffff
	.size	 sMovesForbiddenToCopy,40
	.type	 sFlailHpScaleToPowerTable,object
sFlailHpScaleToPowerTable:
	.byte	0x1
	.byte	0xc8
	.byte	0x4
	.byte	0x96
	.byte	0x9
	.byte	0x64
	.byte	0x10
	.byte	0x50
	.byte	0x20
	.byte	0x28
	.byte	0x30
	.byte	0x14
	.size	 sFlailHpScaleToPowerTable,12
	.align	1, 0
	.type	 sNaturePowerMoves,object
sNaturePowerMoves:
	.short	0x4e
	.short	0x4b
	.short	0x59
	.short	0x38
	.short	0x39
	.short	0x3d
	.short	0x9d
	.short	0xf7
	.short	0x81
	.short	0x81
	.size	 sNaturePowerMoves,20
	.align	1, 0
	.type	 sWeightToDamageTable,object
sWeightToDamageTable:
	.short	0x64
	.short	0x14
	.short	0xfa
	.short	0x28
	.short	0x1f4
	.short	0x3c
	.short	0x3e8
	.short	0x50
	.short	0x7d0
	.short	0x64
	.short	0xffff
	.short	0xffff
	.size	 sWeightToDamageTable,24
	.align	2, 0
	.type	 sPickupItems,object
sPickupItems:
	.short	0x8b
	.byte	0xf
	.space	1
	.short	0x85
	.byte	0x19
	.space	1
	.short	0x86
	.byte	0x23
	.space	1
	.short	0x87
	.byte	0x2d
	.space	1
	.short	0x88
	.byte	0x37
	.space	1
	.short	0x89
	.byte	0x41
	.space	1
	.short	0x8c
	.byte	0x4b
	.space	1
	.short	0x12a
	.byte	0x50
	.space	1
	.short	0x45
	.byte	0x55
	.space	1
	.short	0x44
	.byte	0x5a
	.space	1
	.short	0x6e
	.byte	0x5f
	.space	1
	.short	0xa3
	.byte	0x60
	.space	1
	.short	0xa4
	.byte	0x61
	.space	1
	.short	0xa5
	.byte	0x62
	.space	1
	.short	0xa6
	.byte	0x63
	.space	1
	.short	0xa7
	.byte	0x1
	.space	1
	.size	 sPickupItems,64
	.type	 sTerrainToType,object
sTerrainToType:
	.byte	0xc
	.byte	0xc
	.byte	0x4
	.byte	0xb
	.byte	0xb
	.byte	0xb
	.byte	0x5
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.size	 sTerrainToType,10
	.type	 sBallCatchBonuses,object
sBallCatchBonuses:
	.byte	0x14
	.byte	0xf
	.byte	0xa
	.byte	0xf
	.size	 sBallCatchBonuses,4
	.align	2, 0
	.type	 sUnused,object
	.size	 sUnused,4
sUnused:
	.word	-0x8151a0
.text
	.align	2, 0
	.type	 Cmd_attackcanceler,function
	.thumb_func
Cmd_attackcanceler:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L31
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L5	@cond_branch
	ldr	r1, .L31+0x4
	mov	r0, #0xc
	strb	r0, [r1]
	b	.L4
.L32:
	.align	2, 0
.L31:
	.word	gBattleOutcome
	.word	gCurrentActionFuncId
.L5:
	ldr	r2, .L33
	ldr	r0, .L33+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L6	@cond_branch
	ldr	r2, .L33+0x8
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L6	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r1, .L33+0xc
	ldr	r0, .L33+0x10
	b	.L30
.L34:
	.align	2, 0
.L33:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEnd
.L6:
	bl	AtkCanceller_UnableToUseMove
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB70
	b	.L4	@long jump
.LCB70:
	ldr	r0, .L35
	ldrb	r1, [r0]
	str	r2, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB83
	b	.L4	@long jump
.LCB83:
	ldr	r4, .L35+0x4
	ldr	r0, .L35+0x8
	ldrb	r1, [r0]
	ldr	r3, .L35+0xc
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r0, r4, #0
	add	r0, r0, #0x24
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldr	r5, .L35+0x10
	cmp	r0, #0
	bne	.L9	@cond_branch
	ldr	r0, .L35+0x14
	ldrh	r0, [r0]
	cmp	r0, #0xa5
	beq	.L9	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L35+0x18
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L9	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L9	@cond_branch
	ldr	r1, .L35+0x1c
	ldr	r0, .L35+0x20
	str	r0, [r1]
	ldr	r2, .L35+0x24
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L4
.L36:
	.align	2, 0
.L35:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gCurrMovePos
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gCurrentMove
	.word	0x800200
	.word	gBattlescriptCurrInstr
	.word	BattleScript_NoPPForMove
	.word	gMoveResultFlags
.L9:
	ldr	r0, [r5]
	ldr	r1, .L37
	and	r0, r0, r1
	str	r0, [r5]
	mov	r6, #0x80
	lsl	r6, r6, #0x12
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L10	@cond_branch
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L10	@cond_branch
	bl	IsMonDisobedient
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L10	@cond_branch
	cmp	r2, #0x2
	bne	.L14	@cond_branch
	ldr	r0, [r5]
	orr	r0, r0, r6
	str	r0, [r5]
	b	.L4
.L38:
	.align	2, 0
.L37:
	.word	-0x800001
.L14:
	ldr	r0, .L39
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L4
.L40:
	.align	2, 0
.L39:
	.word	gMoveResultFlags
.L10:
	ldr	r2, .L41
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L41+0x4
	ldr	r1, .L41+0x8
	ldrb	r3, [r1]
	lsl	r0, r3, #0x4
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	mov	r8, r1
	mov	r9, r2
	cmp	r0, #0
	bge	.L16	@cond_branch
	ldr	r2, .L41+0xc
	ldr	r0, .L41+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L16	@cond_branch
	ldr	r0, .L41+0x14
	ldrb	r0, [r0]
	ldr	r2, .L41+0x18
	add	r1, r3, #0
	bl	PressurePPLose
	mov	r0, r8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r9
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	bl	BattleScriptPushCursor
	ldr	r1, .L41+0x1c
	ldr	r0, .L41+0x20
	b	.L30
.L42:
	.align	2, 0
.L41:
	.word	gHitMarker
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	0x115
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MagicCoatBounce
.L16:
	mov	r2, #0x0
	ldr	r0, .L43
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L18	@cond_branch
	ldr	r6, .L43+0x4
	ldr	r1, .L43+0x8
	mov	ip, r1
	add	r5, r0, #0
	ldr	r7, .L43+0xc
.L20:
	add	r4, r2, r7
	ldrb	r3, [r4]
	lsl	r0, r3, #0x4
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L19	@cond_branch
	ldr	r0, .L43+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB320
	b	.L29	@long jump
.LCB320:
.L19:
	add	r2, r2, #0x1
	cmp	r2, r5
	blt	.L20	@cond_branch
.L18:
	ldr	r0, .L43+0x14
	mov	r1, r8
	ldrb	r2, [r1]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1e
	cmp	r0, #0
	bge	.L23	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r3
	strb	r0, [r1]
	ldr	r4, .L43+0x18
	mov	r0, #0x1f
	strb	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r1, .L43+0x1c
	ldr	r0, .L43+0x20
	str	r0, [r1]
	mov	r1, r8
	ldrb	r0, [r1]
	ldrb	r1, [r4]
	bl	RecordAbilityBattle
	b	.L4
.L44:
	.align	2, 0
.L43:
	.word	gBattlersCount
	.word	gProtectStructs
	.word	gBattleMoves
	.word	gBattlerByTurnOrder
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TookAttack
.L23:
	lsl	r0, r2, #0x4
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.LCB387
	b	.L25	@long jump
.LCB387:
	ldr	r1, .L45
	ldr	r2, .L45+0x4
	ldrh	r3, [r2]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x2
	and	r0, r0, r1
	add	r4, r2, #0
	cmp	r0, #0
	beq	.L25	@cond_branch
	cmp	r3, #0xae
	bne	.L26	@cond_branch
	ldr	r2, .L45+0x8
	ldr	r0, .L45+0xc
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L26	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L25	@cond_branch
.L26:
	ldrh	r0, [r4]
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L27	@cond_branch
	ldr	r1, .L45+0x8
	ldr	r0, .L45+0xc
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
.L27:
	ldr	r0, .L45+0xc
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	ldr	r2, .L45+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L45+0x14
	ldr	r3, .L45+0x18
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L45+0x1c
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r1, .L45+0x20
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
	b	.L25
.L46:
	.align	2, 0
.L45:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gBattlerTarget
	.word	gLastHitByType
	.word	gBattleCommunication
.L29:
	ldr	r0, .L47
	ldrb	r0, [r0]
	ldr	r2, .L47+0x4
	add	r1, r3, #0
	bl	PressurePPLose
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L47+0x8
	ldrb	r0, [r4]
	strb	r0, [r1, #0x17]
	bl	BattleScriptPushCursor
	ldr	r1, .L47+0xc
	ldr	r0, .L47+0x10
	b	.L30
.L48:
	.align	2, 0
.L47:
	.word	gBattlerAttacker
	.word	0x121
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SnatchedMove
.L25:
	ldr	r1, .L49
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L30:
	str	r0, [r1]
.L4:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gBattlescriptCurrInstr
.Lfe1:
	.size	 Cmd_attackcanceler,.Lfe1-Cmd_attackcanceler
	.align	2, 0
	.type	 JumpIfMoveFailed,function
	.thumb_func
JumpIfMoveFailed:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	ldr	r1, .L55
	ldr	r5, [r1]
	add	r4, r5, r0
	ldr	r0, .L55+0x4
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L52	@cond_branch
	ldr	r1, .L55+0x8
	ldr	r3, .L55+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L55+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldrb	r4, [r5, #0x1]
	ldrb	r0, [r5, #0x2]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	b	.L53
.L56:
	.align	2, 0
.L55:
	.word	gBattlescriptCurrInstr
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gBattlerTarget
	.word	gLastHitByType
.L52:
	bl	TrySetDestinyBondToHappen
	ldr	r0, .L57
	ldrb	r1, [r0]
	str	r6, [sp]
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L51	@cond_branch
.L53:
	ldr	r0, .L57+0x4
	str	r4, [r0]
.L51:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe2:
	.size	 JumpIfMoveFailed,.Lfe2-JumpIfMoveFailed
	.align	2, 0
	.type	 Cmd_jumpifaffectedbyprotect,function
	.thumb_func
Cmd_jumpifaffectedbyprotect:
	push	{lr}
	ldr	r1, .L62
	ldr	r0, .L62+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L60	@cond_branch
	ldr	r2, .L62+0x8
	ldr	r0, .L62+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L60	@cond_branch
	ldr	r2, .L62+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x5
	mov	r1, #0x0
	bl	JumpIfMoveFailed
	ldr	r1, .L62+0x14
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
	b	.L61
.L63:
	.align	2, 0
.L62:
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L60:
	ldr	r1, .L64
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L61:
	pop	{r0}
	bx	r0
.L65:
	.align	2, 0
.L64:
	.word	gBattlescriptCurrInstr
.Lfe3:
	.size	 Cmd_jumpifaffectedbyprotect,.Lfe3-Cmd_jumpifaffectedbyprotect
	.align	2, 0
	.type	 JumpIfMoveAffectedByProtect,function
	.thumb_func
JumpIfMoveAffectedByProtect:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r4, #0x0
	ldr	r1, .L68
	ldr	r0, .L68+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L67	@cond_branch
	ldr	r2, .L68+0x8
	ldr	r0, .L68+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L67	@cond_branch
	ldr	r2, .L68+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x7
	add	r1, r3, #0
	bl	JumpIfMoveFailed
	ldr	r1, .L68+0x14
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
	mov	r4, #0x1
.L67:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L69:
	.align	2, 0
.L68:
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gMoveResultFlags
	.word	gBattleCommunication
.Lfe4:
	.size	 JumpIfMoveAffectedByProtect,.Lfe4-JumpIfMoveAffectedByProtect
	.align	2, 0
	.type	 AccuracyCalcHelper,function
	.thumb_func
AccuracyCalcHelper:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, .L80
	ldr	r3, .L80+0x4
	ldrb	r4, [r3]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r1, [r0]
	mov	r0, #0x18
	and	r1, r1, r0
	add	r6, r2, #0
	cmp	r1, #0
	beq	.L71	@cond_branch
	ldr	r1, .L80+0x8
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L80+0xc
	ldrb	r0, [r0, #0x15]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L76	@cond_branch
.L71:
	ldr	r0, .L80+0x10
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	and	r1, r1, r2
	add	r2, r0, #0
	cmp	r1, #0
	bne	.L72	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L72	@cond_branch
.L79:
	ldr	r0, .L80+0x14
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L76
.L81:
	.align	2, 0
.L80:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gMoveResultFlags
.L72:
	ldr	r0, [r2]
	ldr	r1, .L82
	and	r0, r0, r1
	str	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L73	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L79	@cond_branch
.L73:
	ldr	r0, [r2]
	ldr	r1, .L82+0x4
	and	r0, r0, r1
	str	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L74	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L79	@cond_branch
.L74:
	ldr	r0, [r2]
	ldr	r1, .L82+0x8
	and	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r5, #0x1
	cmp	r0, #0
	bne	.L77	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L77	@cond_branch
	ldr	r0, .L82+0xc
	ldrh	r1, [r0]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L77	@cond_branch
	ldr	r0, .L82+0x10
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x98
	beq	.L76	@cond_branch
.L77:
	ldr	r1, .L82+0x10
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x11
	beq	.L76	@cond_branch
	cmp	r0, #0x4e
	bne	.L75	@cond_branch
.L76:
	mov	r0, #0x7
	add	r1, r5, #0
	bl	JumpIfMoveFailed
	mov	r0, #0x1
	b	.L78
.L83:
	.align	2, 0
.L82:
	.word	-0x10001
	.word	-0x20001
	.word	-0x40001
	.word	gBattleWeather
	.word	gBattleMoves
.L75:
	mov	r0, #0x0
.L78:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 AccuracyCalcHelper,.Lfe5-AccuracyCalcHelper
	.align	2, 0
	.type	 Cmd_accuracycheck,function
	.thumb_func
Cmd_accuracycheck:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L118
	ldr	r0, [r0]
	ldrb	r6, [r0, #0x5]
	ldrb	r0, [r0, #0x6]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldr	r0, .L118+0x4
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L88	@cond_branch
	mov	r0, #0x1
	bl	BtlCtrl_OakOldMan_TestState2Flag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L87	@cond_branch
	ldr	r0, .L118+0x8
	lsl	r1, r6, #0x1
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L87	@cond_branch
	ldr	r0, .L118+0xc
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L86	@cond_branch
.L87:
	ldr	r0, .L118+0x4
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L88	@cond_branch
	mov	r0, #0x2
	bl	BtlCtrl_OakOldMan_TestState2Flag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L88	@cond_branch
	ldr	r0, .L118+0x8
	lsl	r1, r6, #0x1
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L88	@cond_branch
	ldr	r0, .L118+0xc
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L86	@cond_branch
.L88:
	ldr	r0, .L118+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L85	@cond_branch
.L86:
	mov	r0, #0x7
	add	r1, r6, #0
	bl	JumpIfMoveFailed
	b	.L84
.L119:
	.align	2, 0
.L118:
	.word	gBattlescriptCurrInstr
	.word	gBattleTypeFlags
	.word	gBattleMoves
	.word	gBattlerAttacker
.L85:
	add	r0, r6, #0x2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L89	@cond_branch
	ldr	r2, .L120
	ldr	r3, .L120+0x4
	ldrb	r4, [r3]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r1, [r0]
	mov	r0, #0x18
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L90	@cond_branch
	ldr	r0, .L120+0x8
	cmp	r6, r0
	bne	.L90	@cond_branch
	ldr	r1, .L120+0xc
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L120+0x10
	ldrb	r0, [r0, #0x15]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L116	@cond_branch
.L90:
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldr	r1, .L120+0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L92	@cond_branch
	ldr	r3, .L120+0x18
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L84
.L121:
	.align	2, 0
.L120:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	0xffff
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	0x400c0
	.word	gBattlescriptCurrInstr
.L92:
	mov	r0, #0x0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1178
	b	.L84	@long jump
.LCB1178:
.L116:
	ldr	r1, .L122
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
	b	.L84
.L123:
	.align	2, 0
.L122:
	.word	gBattlescriptCurrInstr
.L89:
	cmp	r6, #0
	bne	.L96	@cond_branch
	ldr	r0, .L124
	ldrh	r6, [r0]
.L96:
	ldr	r0, .L124+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L97	@cond_branch
	mov	r1, #0x3f
	mov	sl, r1
	mov	r2, sl
	and	r2, r2, r0
	mov	sl, r2
	b	.L98
.L125:
	.align	2, 0
.L124:
	.word	gCurrentMove
	.word	gBattleStruct
.L97:
	ldr	r1, .L126
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	mov	sl, r0
.L98:
	add	r0, r6, #0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1238
	b	.L84	@long jump
.LCB1238:
	add	r0, r6, #0
	bl	AccuracyCalcHelper
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1245
	b	.L84	@long jump
.LCB1245:
	ldr	r3, .L126+0x4
	ldr	r0, .L126+0x8
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r4, r0
	mul	r4, r4, r2
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L101	@cond_branch
	ldr	r0, .L126+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrb	r5, [r0, #0x1e]
	b	.L102
.L127:
	.align	2, 0
.L126:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
.L101:
	ldr	r0, .L128
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1e]
	add	r0, r0, #0x6
	add	r1, r4, r3
	ldrb	r1, [r1, #0x1f]
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L102:
	lsl	r0, r5, #0x18
	cmp	r0, #0
	bge	.L103	@cond_branch
	mov	r5, #0x0
.L103:
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0xc
	ble	.L104	@cond_branch
	mov	r5, #0xc
.L104:
	ldr	r1, .L128+0x4
	lsl	r4, r6, #0x1
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r7, r0, r1
	ldrb	r3, [r7, #0x3]
	mov	r8, r3
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp, #0x4]
	cmp	r0, #0
	bne	.L105	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L105	@cond_branch
	ldr	r0, .L128+0x8
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L105	@cond_branch
	ldrb	r0, [r7]
	cmp	r0, #0x98
	bne	.L105	@cond_branch
	mov	r0, #0x32
	mov	r8, r0
.L105:
	ldr	r1, .L128+0xc
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x16
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r4, r8
	mul	r4, r4, r1
	ldrb	r1, [r0, #0x1]
	add	r0, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r7, .L128+0x10
	ldr	r0, .L128
	ldrb	r0, [r0]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0xe
	bne	.L106	@cond_branch
	lsl	r0, r4, #0x6
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L106:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L107	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L107	@cond_branch
	ldr	r0, .L128+0x14
	ldrb	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.L107	@cond_branch
	ldr	r0, .L128+0x8
	ldrh	r1, [r0]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L107	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L107:
	ldr	r2, .L128+0x10
	ldr	r0, .L128
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	r9, r2
	cmp	r0, #0x37
	bne	.L108	@cond_branch
	mov	r1, sl
	cmp	r1, #0x8
	bhi	.L108	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L108:
	ldr	r2, .L128+0x14
	mov	r8, r2
	ldrb	r2, [r2]
	mov	r7, #0x58
	mov	r0, r2
	mul	r0, r0, r7
	mov	r3, r9
	add	r1, r0, r3
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L109	@cond_branch
	ldr	r1, .L128+0x18
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x7]
	ldrb	r2, [r0, #0x1a]
	b	.L110
.L129:
	.align	2, 0
.L128:
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gBattleWeather
	.word	sAccuracyStageRatios
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gEnigmaBerries
.L109:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r7
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L110:
	ldr	r0, .L130
	ldr	r1, .L130+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
	cmp	r5, #0x16
	bne	.L111	@cond_branch
	mov	r0, #0x64
	sub	r0, r0, r2
	mul	r0, r0, r4
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L111:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x1
	cmp	r0, r4
	ble	.L112	@cond_branch
	ldr	r2, .L130+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L130+0xc
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L113	@cond_branch
	ldr	r1, .L130+0x10
	ldr	r2, [sp, #0x4]
	add	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x8
	beq	.L114	@cond_branch
	cmp	r0, #0x20
	bne	.L113	@cond_branch
.L114:
	ldr	r1, .L130+0x14
	mov	r0, #0x2
	b	.L117
.L131:
	.align	2, 0
.L130:
	.word	gPotentialItemEffectBattler
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gBattleTypeFlags
	.word	gBattleMoves
	.word	gBattleCommunication
.L113:
	ldr	r1, .L132
	mov	r0, #0x0
.L117:
	strb	r0, [r1, #0x6]
	bl	CheckWonderGuardAndLevitate
.L112:
	mov	r0, #0x7
	add	r1, r6, #0
	bl	JumpIfMoveFailed
.L84:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	gBattleCommunication
.Lfe6:
	.size	 Cmd_accuracycheck,.Lfe6-Cmd_accuracycheck
	.align	2, 0
	.type	 Cmd_attackstring,function
	.thumb_func
Cmd_attackstring:
	push	{r4, r5, lr}
	ldr	r0, .L137
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L134	@cond_branch
	ldr	r4, .L137+0x4
	ldr	r0, [r4]
	mov	r1, #0xc0
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L136	@cond_branch
	ldr	r0, .L137+0x8
	ldrb	r1, [r0]
	mov	r0, #0x4
	bl	PrepareStringBattle
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	orr	r0, r0, r1
	str	r0, [r4]
.L136:
	ldr	r0, .L137+0xc
	ldr	r1, [r0]
	add	r1, r1, #0x1
	str	r1, [r0]
	ldr	r0, .L137+0x10
	strb	r5, [r0, #0x7]
.L134:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L138:
	.align	2, 0
.L137:
	.word	gBattleControllerExecFlags
	.word	gHitMarker
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
.Lfe7:
	.size	 Cmd_attackstring,.Lfe7-Cmd_attackstring
	.align	2, 0
	.type	 Cmd_ppreduce,function
	.thumb_func
Cmd_ppreduce:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r6, #0x1
	ldr	r0, .L154
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB1679
	b	.L139	@long jump
.LCB1679:
	ldr	r1, .L154+0x4
	ldr	r2, .L154+0x8
	ldrb	r3, [r2]
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r4, r0, #0x1f
	mov	r9, r2
	cmp	r4, #0
	bne	.L141	@cond_branch
	ldr	r2, .L154+0xc
	ldr	r0, .L154+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x20
	beq	.L143	@cond_branch
	cmp	r0, #0x20
	bgt	.L149	@cond_branch
	cmp	r0, #0x8
	beq	.L145	@cond_branch
	b	.L146
.L155:
	.align	2, 0
.L154:
	.word	gBattleControllerExecFlags
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
.L149:
	cmp	r0, #0x40
	beq	.L145	@cond_branch
	b	.L146
.L143:
	str	r4, [sp]
	mov	r0, #0x12
	add	r1, r3, #0
	mov	r2, #0x2e
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0x1
	b	.L141
.L145:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x10
	mov	r2, #0x2e
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r6, r0
	b	.L141
.L146:
	ldr	r1, .L156
	mov	r2, r9
	ldrb	r0, [r2]
	ldrb	r7, [r1]
	cmp	r0, r7
	beq	.L141	@cond_branch
	ldr	r2, .L156+0x4
	ldrb	r1, [r1]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x2e
	bne	.L141	@cond_branch
	add	r6, r6, #0x1
.L141:
	ldr	r0, .L156+0x8
	ldr	r4, [r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x4
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L150	@cond_branch
	ldr	r2, .L156+0x4
	ldr	r3, .L156+0xc
	ldr	r1, .L156+0x10
	ldrb	r5, [r1]
	mov	r0, #0x58
	mov	r8, r0
	mov	r0, r8
	mul	r0, r0, r5
	ldrb	r7, [r3]
	add	r0, r0, r7
	mov	r7, #0x24
	add	r7, r7, r2
	mov	ip, r7
	add	r0, r0, ip
	ldrb	r0, [r0]
	mov	r9, r1
	mov	sl, r2
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L150	@cond_branch
	ldr	r0, .L156+0x14
	lsl	r1, r5, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x8
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	ldrb	r1, [r7]
	add	r0, r0, r1
	mov	r1, ip
	add	r2, r0, r1
	ldrb	r0, [r2]
	cmp	r0, r6
	ble	.L151	@cond_branch
	sub	r0, r0, r6
	strb	r0, [r2]
	b	.L152
.L157:
	.align	2, 0
.L156:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gHitMarker
	.word	gCurrMovePos
	.word	gBattlerAttacker
	.word	gProtectStructs
.L151:
	strb	r4, [r2]
.L152:
	mov	r2, r9
	ldrb	r3, [r2]
	mov	r4, #0x58
	mov	r0, r3
	mul	r0, r0, r4
	mov	r1, sl
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L150	@cond_branch
	ldr	r1, .L158
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L158+0x4
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L150	@cond_branch
	ldr	r0, .L158+0x8
	strb	r3, [r0]
	ldrb	r1, [r7]
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r4
	mov	r2, sl
	add	r2, r2, #0x24
	add	r0, r0, r2
	ldrb	r7, [r7]
	add	r0, r0, r7
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	mov	r7, r9
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
.L150:
	ldr	r2, .L158+0xc
	ldr	r0, [r2]
	ldr	r1, .L158+0x10
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L158+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L139:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	gDisableStructs
	.word	gBitTable
	.word	gActiveBattler
	.word	gHitMarker
	.word	-0x801
	.word	gBattlescriptCurrInstr
.Lfe8:
	.size	 Cmd_ppreduce,.Lfe8-Cmd_ppreduce
	.align	2, 0
	.type	 Cmd_critcalc,function
	.thumb_func
Cmd_critcalc:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L179
	ldr	r0, .L179+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0xaf
	bne	.L161	@cond_branch
	ldr	r1, .L179+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r6, [r0, #0x7]
	b	.L162
.L180:
	.align	2, 0
.L179:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gEnigmaBerries
.L161:
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L162:
	ldr	r1, .L181
	ldr	r3, .L181+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r4, .L181+0x8
	ldrb	r1, [r3]
	mov	r0, #0x58
	mov	r7, r1
	mul	r7, r7, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r7, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	neg	r0, r0
	asr	r5, r0, #0x1f
	mov	r0, #0x2
	and	r5, r5, r0
	ldr	r2, .L181+0xc
	ldr	r0, .L181+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	ip, r3
	cmp	r1, #0x2b
	bne	.L165	@cond_branch
	add	r5, r5, #0x1
.L165:
	add	r0, r5, #0
	cmp	r1, #0x4b
	bne	.L166	@cond_branch
	add	r0, r0, #0x1
.L166:
	cmp	r1, #0xc8
	bne	.L167	@cond_branch
	add	r0, r0, #0x1
.L167:
	add	r2, r0, #0
	cmp	r1, #0xd1
	bne	.L168	@cond_branch
	add	r2, r2, #0x1
.L168:
	mov	r1, #0x0
	cmp	r6, #0x3f
	bne	.L169	@cond_branch
	add	r0, r7, r4
	ldrh	r0, [r0]
	cmp	r0, #0x71
	bne	.L169	@cond_branch
	mov	r1, #0x1
.L169:
	lsl	r5, r1, #0x1
	mov	r3, #0x0
	cmp	r6, #0x42
	bne	.L170	@cond_branch
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r0, #0x53
	bne	.L170	@cond_branch
	mov	r3, #0x1
.L170:
	lsl	r1, r3, #0x1
	cmp	r6, #0x29
	bne	.L171	@cond_branch
	add	r0, r5, #0x1
	add	r0, r2, r0
	b	.L177
.L182:
	.align	2, 0
.L181:
	.word	gPotentialItemEffectBattler
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
.L171:
	add	r0, r2, r5
.L177:
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r5, r0, #0
	cmp	r5, #0x4
	bls	.L173	@cond_branch
	mov	r5, #0x4
.L173:
	ldr	r0, .L183
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r4, [r0]
	cmp	r4, #0x4
	beq	.L174	@cond_branch
	cmp	r4, #0x4b
	beq	.L174	@cond_branch
	ldr	r1, .L183+0x4
	mov	r2, ip
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L174	@cond_branch
	ldr	r4, .L183+0x8
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L174	@cond_branch
	bl	Random
	ldr	r2, .L183+0xc
	lsl	r1, r5, #0x1
	add	r1, r1, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L174	@cond_branch
	ldr	r0, [r4]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L175	@cond_branch
	mov	r0, #0x1
	bl	BtlCtrl_OakOldMan_TestState2Flag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L174	@cond_branch
.L175:
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L174	@cond_branch
	ldr	r1, .L183+0x10
	mov	r0, #0x2
	b	.L178
.L184:
	.align	2, 0
.L183:
	.word	gBattlerTarget
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	sCriticalHitChance
	.word	gCritMultiplier
.L174:
	ldr	r1, .L185
	mov	r0, #0x1
.L178:
	strb	r0, [r1]
	ldr	r1, .L185+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	gCritMultiplier
	.word	gBattlescriptCurrInstr
.Lfe9:
	.size	 Cmd_critcalc,.Lfe9-Cmd_critcalc
	.align	2, 0
	.type	 Cmd_damagecalc,function
	.thumb_func
Cmd_damagecalc:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	ldr	r4, .L190
	ldr	r5, .L190+0x4
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	ldr	r6, .L190+0x8
	ldrb	r0, [r6]
	mov	r4, #0x58
	mul	r0, r0, r4
	ldr	r2, .L190+0xc
	add	r0, r0, r2
	ldrb	r1, [r5]
	mul	r1, r1, r4
	add	r1, r1, r2
	ldr	r7, .L190+0x10
	ldrh	r2, [r7]
	ldr	r4, .L190+0x14
	ldrh	r4, [r4]
	str	r4, [sp]
	ldr	r4, .L190+0x18
	ldr	r4, [r4]
	ldrb	r4, [r4, #0x13]
	str	r4, [sp, #0x4]
	ldrb	r4, [r6]
	str	r4, [sp, #0x8]
	ldrb	r4, [r5]
	str	r4, [sp, #0xc]
	bl	CalculateBaseDamage
	ldr	r4, .L190+0x1c
	ldr	r1, .L190+0x20
	ldrb	r1, [r1]
	mul	r1, r1, r0
	ldr	r0, .L190+0x24
	ldrb	r0, [r0, #0xe]
	mov	r3, r1
	mul	r3, r3, r0
	str	r3, [r4]
	ldr	r1, .L190+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L188	@cond_branch
	ldr	r2, .L190+0x2c
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0xd
	bne	.L188	@cond_branch
	lsl	r0, r3, #0x1
	str	r0, [r4]
.L188:
	ldr	r1, .L190+0x30
	ldr	r0, .L190+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L189	@cond_branch
	ldr	r4, .L190+0x1c
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L189:
	ldr	r1, .L190+0x34
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L191:
	.align	2, 0
.L190:
	.word	gSideStatuses
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gCurrentMove
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleMoveDamage
	.word	gCritMultiplier
	.word	gBattleScripting
	.word	gStatuses3
	.word	gBattleMoves
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe10:
	.size	 Cmd_damagecalc,.Lfe10-Cmd_damagecalc
	.align	2, 0
	.globl	AI_CalcDmg
	.type	 AI_CalcDmg,function
	.thumb_func
AI_CalcDmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L195
	add	r0, r5, #0
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x58
	mov	r0, r7
	mul	r0, r0, r1
	ldr	r2, .L195+0x4
	add	r0, r0, r2
	mul	r1, r1, r5
	add	r1, r1, r2
	ldr	r2, .L195+0x8
	mov	r8, r2
	ldrh	r2, [r2]
	ldr	r6, .L195+0xc
	ldrh	r4, [r6]
	str	r4, [sp]
	ldr	r4, .L195+0x10
	ldr	r4, [r4]
	ldrb	r4, [r4, #0x13]
	str	r4, [sp, #0x4]
	str	r7, [sp, #0x8]
	str	r5, [sp, #0xc]
	bl	CalculateBaseDamage
	ldr	r4, .L195+0x14
	mov	r1, #0x0
	strh	r1, [r6]
	ldr	r1, .L195+0x18
	ldrb	r1, [r1]
	mul	r1, r1, r0
	ldr	r0, .L195+0x1c
	ldrb	r0, [r0, #0xe]
	mov	r3, r1
	mul	r3, r3, r0
	str	r3, [r4]
	ldr	r1, .L195+0x20
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L193	@cond_branch
	ldr	r2, .L195+0x24
	mov	r0, r8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0xd
	bne	.L193	@cond_branch
	lsl	r0, r3, #0x1
	str	r0, [r4]
.L193:
	ldr	r0, .L195+0x28
	lsl	r1, r7, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L194	@cond_branch
	ldr	r4, .L195+0x14
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L194:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L196:
	.align	2, 0
.L195:
	.word	gSideStatuses
	.word	gBattleMons
	.word	gCurrentMove
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleMoveDamage
	.word	gCritMultiplier
	.word	gBattleScripting
	.word	gStatuses3
	.word	gBattleMoves
	.word	gProtectStructs
.Lfe11:
	.size	 AI_CalcDmg,.Lfe11-AI_CalcDmg
	.align	2, 0
	.type	 ModulateDmgByType,function
	.thumb_func
ModulateDmgByType:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L214
	ldr	r0, [r5]
	mul	r0, r0, r4
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L198	@cond_branch
	cmp	r4, #0
	beq	.L198	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L198:
	cmp	r4, #0x5
	beq	.L201	@cond_branch
	cmp	r4, #0x5
	bgt	.L211	@cond_branch
	cmp	r4, #0
	beq	.L200	@cond_branch
	b	.L199
.L215:
	.align	2, 0
.L214:
	.word	gBattleMoveDamage
.L211:
	cmp	r4, #0x14
	beq	.L205	@cond_branch
	b	.L199
.L200:
	ldr	r2, .L216
	ldrb	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	mov	r1, #0xfb
	and	r0, r0, r1
	mov	r1, #0xfd
	and	r0, r0, r1
	b	.L212
.L217:
	.align	2, 0
.L216:
	.word	gMoveResultFlags
.L201:
	ldr	r2, .L218
	ldr	r0, .L218+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L199	@cond_branch
	ldr	r2, .L218+0x8
	ldrb	r1, [r2]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L199	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L203	@cond_branch
	mov	r0, #0xfd
	and	r0, r0, r1
	b	.L212
.L219:
	.align	2, 0
.L218:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gMoveResultFlags
.L203:
	mov	r0, #0x4
	b	.L213
.L205:
	ldr	r2, .L220
	ldr	r0, .L220+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L199	@cond_branch
	ldr	r2, .L220+0x8
	ldrb	r1, [r2]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L199	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L207	@cond_branch
	mov	r0, #0xfb
	and	r0, r0, r1
	b	.L212
.L221:
	.align	2, 0
.L220:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gMoveResultFlags
.L207:
	mov	r0, #0x2
.L213:
	orr	r0, r0, r1
.L212:
	strb	r0, [r2]
.L199:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 ModulateDmgByType,.Lfe12-ModulateDmgByType
	.align	2, 0
	.type	 Cmd_typecalc,function
	.thumb_func
Cmd_typecalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r3, #0x0
	ldr	r1, .L244
	ldrh	r0, [r1]
	cmp	r0, #0xa5
	bne	.LCB2615
	b	.L242	@long jump
.LCB2615:
	ldr	r0, .L244+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L224	@cond_branch
	mov	r1, #0x3f
	mov	r8, r1
	and	r1, r1, r0
	mov	r8, r1
	b	.L225
.L245:
	.align	2, 0
.L244:
	.word	gCurrentMove
	.word	gBattleStruct
.L224:
	ldr	r2, .L246
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	r8, r0
.L225:
	ldr	r2, .L246+0x4
	ldr	r0, .L246+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	add	r5, r2, #0
	cmp	r0, r8
	beq	.L227	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r8
	bne	.L226	@cond_branch
.L227:
	ldr	r4, .L246+0xc
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0xa
	str	r3, [sp, #0x4]
	bl	__divsi3
	str	r0, [r4]
	ldr	r3, [sp, #0x4]
.L226:
	ldr	r2, .L246+0x10
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r4, r2, #0
	cmp	r0, #0x1a
	bne	.L228	@cond_branch
	mov	r1, r8
	cmp	r1, #0x4
	bne	.L228	@cond_branch
	ldr	r3, .L246+0x14
	strb	r0, [r3]
	ldr	r2, .L246+0x18
	ldrb	r0, [r2]
	mov	r1, #0x9
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L246+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L246+0x20
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r0, .L246+0x24
	mov	r1, r8
	strb	r1, [r0, #0x6]
	ldrb	r0, [r4]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
	b	.L229
.L247:
	.align	2, 0
.L246:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlerTarget
	.word	gLastUsedAbility
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gLastHitByType
	.word	gBattleCommunication
.L228:
	ldr	r1, .L248
	add	r0, r3, r1
	ldrb	r0, [r0]
	add	r2, r1, #0
	b	.L243
.L249:
	.align	2, 0
.L248:
	.word	gTypeEffectiveness
.L234:
	add	r3, r3, #0x3
	b	.L230
.L233:
	ldr	r5, .L250
	add	r0, r3, r5
	ldrb	r0, [r0]
	cmp	r0, r8
	bne	.L235	@cond_branch
	add	r1, r3, #0x1
	add	r1, r1, r5
	ldr	r2, .L250+0x4
	ldr	r7, .L250+0x8
	ldrb	r0, [r7]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r0, r0, r2
	add	r0, r0, #0x21
	ldrb	r4, [r1]
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L237	@cond_branch
	add	r0, r3, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0]
	str	r2, [sp]
	str	r3, [sp, #0x4]
	bl	ModulateDmgByType
	ldr	r3, [sp, #0x4]
	ldr	r2, [sp]
.L237:
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r1, [r1]
	cmp	r4, r1
	bne	.L235	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L235	@cond_branch
	add	r0, r3, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0]
	str	r3, [sp, #0x4]
	bl	ModulateDmgByType
	ldr	r3, [sp, #0x4]
.L235:
	add	r3, r3, #0x3
	ldr	r5, .L250+0x4
	ldr	r4, .L250+0x8
	ldr	r2, .L250
.L230:
	add	r0, r3, r2
	ldrb	r0, [r0]
.L243:
	cmp	r0, #0xff
	beq	.L229	@cond_branch
	cmp	r0, #0xfe
	bne	.L233	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r5, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L234	@cond_branch
.L229:
	ldr	r2, .L250+0x4
	ldr	r5, .L250+0x8
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r6, [r0]
	cmp	r6, #0x19
	bne	.L240	@cond_branch
	ldr	r0, .L250+0xc
	ldrb	r0, [r0]
	ldr	r7, .L250+0x10
	ldrh	r1, [r7]
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L240	@cond_branch
	ldr	r1, .L250+0x14
	mov	r8, r1
	ldrb	r4, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L241	@cond_branch
	mov	r0, #0x6
	and	r0, r0, r4
	cmp	r0, #0x6
	bne	.L240	@cond_branch
.L241:
	ldr	r2, .L250+0x18
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L240	@cond_branch
	ldr	r3, .L250+0x1c
	strb	r6, [r3]
	mov	r0, #0x1
	orr	r0, r0, r4
	mov	r1, r8
	strb	r0, [r1]
	ldr	r1, .L250+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L250+0x24
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r1, .L250+0x28
	mov	r0, #0x3
	strb	r0, [r1, #0x6]
	ldrb	r0, [r5]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
.L240:
	ldr	r0, .L250+0x14
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L242	@cond_branch
	ldr	r2, .L250+0x2c
	ldr	r0, .L250+0xc
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
.L242:
	ldr	r1, .L250+0x30
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L251:
	.align	2, 0
.L250:
	.word	gTypeEffectiveness
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gMoveResultFlags
	.word	gBattleMoves
	.word	gLastUsedAbility
	.word	gLastLandedMoves
	.word	gLastHitByType
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe13:
	.size	 Cmd_typecalc,.Lfe13-Cmd_typecalc
	.align	2, 0
	.type	 CheckWonderGuardAndLevitate,function
	.thumb_func
CheckWonderGuardAndLevitate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r0, .L274
	ldrh	r1, [r0]
	mov	r9, r0
	cmp	r1, #0xa5
	bne	.LCB3008
	b	.L252	@long jump
.LCB3008:
	ldr	r2, .L274+0x4
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.LCB3019
	b	.L252	@long jump
.LCB3019:
	ldr	r0, .L274+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L255	@cond_branch
	mov	r1, #0x3f
	mov	ip, r1
	mov	r2, ip
	and	r2, r2, r0
	mov	ip, r2
	b	.L256
.L275:
	.align	2, 0
.L274:
	.word	gCurrentMove
	.word	gBattleMoves
	.word	gBattleStruct
.L255:
	ldrb	r1, [r1, #0x2]
	mov	ip, r1
.L256:
	ldr	r2, .L276
	ldr	r3, .L276+0x4
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	add	r7, r2, #0
	mov	r8, r3
	cmp	r1, #0x1a
	bne	.L257	@cond_branch
	mov	r0, ip
	cmp	r0, #0x4
	bne	.L257	@cond_branch
	ldr	r0, .L276+0x8
	strb	r1, [r0]
	ldr	r0, .L276+0xc
	mov	r1, ip
	strb	r1, [r0, #0x6]
	ldrb	r0, [r3]
	mov	r1, #0x1a
	bl	RecordAbilityBattle
	b	.L252
.L277:
	.align	2, 0
.L276:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L257:
	ldr	r1, .L278
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r4, r1, #0
	b	.L273
.L279:
	.align	2, 0
.L278:
	.word	gTypeEffectiveness
.L261:
	add	r0, r5, r4
	ldrb	r0, [r0]
	cmp	r0, ip
	beq	.LCB3112
	b	.L263	@long jump
.LCB3112:
	add	r2, r5, #0x1
	add	r3, r2, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x21
	ldrb	r1, [r3]
	add	r3, r2, #0
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L264	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L264	@cond_branch
	ldr	r2, .L280
	ldrb	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L280+0x4
	ldr	r0, .L280+0x8
	ldrb	r2, [r0]
	lsl	r2, r2, #0x4
	add	r2, r2, r1
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
.L264:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L265	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L265	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L265	@cond_branch
	ldr	r2, .L280
	ldrb	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L280+0x4
	ldr	r0, .L280+0x8
	ldrb	r2, [r0]
	lsl	r2, r2, #0x4
	add	r2, r2, r1
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
.L265:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x21
	ldrb	r1, [r2]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L266	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.L266	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
.L266:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L267	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L267	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.L267	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
.L267:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x21
	ldrb	r1, [r2]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L268	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bne	.L268	@cond_branch
	mov	r0, #0x2
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L268:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L263	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L263	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bne	.L263	@cond_branch
	mov	r0, #0x2
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L263:
	add	r5, r5, #0x3
	add	r0, r5, r4
	ldrb	r0, [r0]
.L273:
	cmp	r0, #0xff
	beq	.L259	@cond_branch
	cmp	r0, #0xfe
	beq	.LCB3362
	b	.L261	@long jump
.LCB3362:
	mov	r2, r8
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L263	@cond_branch
.L259:
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r4, [r0]
	cmp	r4, #0x19
	bne	.L252	@cond_branch
	ldr	r0, .L280+0x8
	ldrb	r0, [r0]
	mov	r2, r9
	ldrh	r1, [r2]
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L252	@cond_branch
	mov	r0, #0x3
	and	r6, r6, r0
	cmp	r6, #0x1
	beq	.L252	@cond_branch
	ldr	r2, .L280+0xc
	mov	r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L252	@cond_branch
	ldr	r0, .L280+0x10
	strb	r4, [r0]
	ldr	r1, .L280+0x14
	mov	r0, #0x3
	strb	r0, [r1, #0x6]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x19
	bl	RecordAbilityBattle
.L252:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L281:
	.align	2, 0
.L280:
	.word	gMoveResultFlags
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gLastUsedAbility
	.word	gBattleCommunication
.Lfe14:
	.size	 CheckWonderGuardAndLevitate,.Lfe14-CheckWonderGuardAndLevitate
	.align	2, 0
	.type	 ModulateDmgByType2,function
	.thumb_func
ModulateDmgByType2:
	push	{r4, r5, r6, r7, lr}
	add	r6, r2, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r7, .L299
	ldr	r0, [r7]
	mul	r0, r0, r4
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r7]
	cmp	r0, #0
	bne	.L283	@cond_branch
	cmp	r4, #0
	beq	.L283	@cond_branch
	mov	r0, #0x1
	str	r0, [r7]
.L283:
	cmp	r4, #0x5
	beq	.L286	@cond_branch
	cmp	r4, #0x5
	bgt	.L296	@cond_branch
	cmp	r4, #0
	beq	.L285	@cond_branch
	b	.L284
.L300:
	.align	2, 0
.L299:
	.word	gBattleMoveDamage
.L296:
	cmp	r4, #0x14
	beq	.L290	@cond_branch
	b	.L284
.L285:
	ldrb	r0, [r6]
	mov	r1, #0x8
	orr	r0, r0, r1
	mov	r1, #0xfb
	and	r0, r0, r1
	mov	r1, #0xfd
	and	r0, r0, r1
	b	.L297
.L286:
	ldr	r0, .L301
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L284	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L284	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L288	@cond_branch
	mov	r0, #0xfd
	and	r0, r0, r1
	b	.L297
.L302:
	.align	2, 0
.L301:
	.word	gBattleMoves
.L288:
	mov	r0, #0x4
	b	.L298
.L290:
	ldr	r0, .L303
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L284	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L284	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L292	@cond_branch
	mov	r0, #0xfb
	and	r0, r0, r1
	b	.L297
.L304:
	.align	2, 0
.L303:
	.word	gBattleMoves
.L292:
	mov	r0, #0x2
.L298:
	orr	r0, r0, r1
.L297:
	strb	r0, [r6]
.L284:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 ModulateDmgByType2,.Lfe15-ModulateDmgByType2
	.align	2, 0
	.globl	TypeCalc
	.type	 TypeCalc,function
	.thumb_func
TypeCalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, sp
	mov	r1, r8
	strb	r1, [r0]
	mov	r2, sl
	cmp	r2, #0xa5
	bne	.L306	@cond_branch
	mov	r0, #0x0
	b	.L323
.L306:
	ldr	r1, .L325
	mov	r3, sl
	lsl	r2, r3, #0x1
	add	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	str	r0, [sp, #0x8]
	ldr	r1, .L325+0x4
	mov	r0, #0x58
	ldr	r3, [sp, #0x4]
	mul	r0, r0, r3
	add	r3, r0, r1
	add	r0, r3, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	str	r2, [sp, #0xc]
	add	r5, r1, #0
	ldr	r1, [sp, #0x8]
	cmp	r0, r1
	beq	.L308	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r1
	bne	.L307	@cond_branch
.L308:
	ldr	r4, .L325+0x8
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L307:
	mov	r0, #0x58
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1a
	bne	.L309	@cond_branch
	ldr	r3, [sp, #0x8]
	cmp	r3, #0x4
	bne	.L309	@cond_branch
	mov	r1, #0x9
	mov	r0, sp
	ldrb	r0, [r0]
	orr	r0, r0, r1
	mov	r1, sp
	strb	r0, [r1]
	b	.L310
.L326:
	.align	2, 0
.L325:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattleMoveDamage
.L309:
	ldr	r1, .L327
	mov	r2, r8
	add	r0, r2, r1
	ldrb	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0xff
	beq	.L310	@cond_branch
	cmp	r0, #0xfe
	bne	.L314	@cond_branch
	mov	r0, #0x58
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	b	.L324
.L328:
	.align	2, 0
.L327:
	.word	gTypeEffectiveness
.L315:
	mov	r0, #0x3
	add	r8, r8, r0
	b	.L311
.L314:
	ldr	r7, .L329
	mov	r1, r8
	add	r0, r1, r7
	ldrb	r0, [r0]
	ldr	r2, [sp, #0x8]
	cmp	r0, r2
	bne	.L316	@cond_branch
	add	r1, r1, #0x1
	add	r1, r1, r7
	ldr	r2, .L329+0x4
	mov	r0, #0x58
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r5, r0, r2
	add	r6, r5, #0
	add	r6, r6, #0x21
	ldrb	r4, [r1]
	ldrb	r0, [r6]
	cmp	r4, r0
	bne	.L318	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0]
	mov	r1, sl
	mov	r2, sp
	bl	ModulateDmgByType2
.L318:
	add	r0, r5, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L316	@cond_branch
	ldrb	r0, [r6]
	cmp	r0, r4
	beq	.L316	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0]
	mov	r1, sl
	mov	r2, sp
	bl	ModulateDmgByType2
.L316:
	mov	r1, #0x3
	add	r8, r8, r1
	ldr	r5, .L329+0x4
	ldr	r2, .L329
.L311:
	mov	r3, r8
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L310	@cond_branch
	cmp	r0, #0xfe
	bne	.L314	@cond_branch
	mov	r0, #0x58
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
.L324:
	add	r1, r5, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L315	@cond_branch
.L310:
	mov	r0, #0x58
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x19
	bne	.L321	@cond_branch
	mov	r0, sp
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L321	@cond_branch
	ldr	r0, [sp, #0x4]
	mov	r1, sl
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bne	.L321	@cond_branch
	mov	r0, sp
	ldrb	r3, [r0]
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L322	@cond_branch
	mov	r0, #0x6
	and	r0, r0, r3
	cmp	r0, #0x6
	bne	.L321	@cond_branch
.L322:
	ldr	r0, .L329+0x8
	ldr	r1, [sp, #0xc]
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L321	@cond_branch
	mov	r0, sp
	mov	r1, #0x1
	orr	r1, r1, r3
	strb	r1, [r0]
.L321:
	mov	r0, sp
	ldrb	r0, [r0]
.L323:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L330:
	.align	2, 0
.L329:
	.word	gTypeEffectiveness
	.word	gBattleMons
	.word	gBattleMoves
.Lfe16:
	.size	 TypeCalc,.Lfe16-TypeCalc
	.align	2, 0
	.globl	AI_TypeCalc
	.type	 AI_TypeCalc,function
	.thumb_func
AI_TypeCalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x4]
	mov	r7, #0x0
	mov	r0, sp
	strb	r7, [r0]
	ldr	r2, .L346
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x6]
	mov	r9, r1
	ldrb	r0, [r0, #0x7]
	mov	r8, r0
	cmp	r6, #0xa5
	bne	.L332	@cond_branch
	mov	r0, #0x0
	b	.L345
.L347:
	.align	2, 0
.L346:
	.word	gSpeciesInfo
.L332:
	ldr	r2, .L348
	lsl	r1, r6, #0x1
	add	r0, r1, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	sl, r0
	str	r1, [sp, #0x8]
	ldr	r3, [sp, #0x4]
	cmp	r3, #0x1a
	bne	.L333	@cond_branch
	cmp	r0, #0x4
	bne	.L333	@cond_branch
	mov	r1, #0x9
	mov	r0, sp
	strb	r1, [r0]
	b	.L334
.L349:
	.align	2, 0
.L348:
	.word	gBattleMoves
.L333:
	ldr	r0, .L350
	add	r1, r7, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L334	@cond_branch
	add	r4, r1, #0
.L337:
	ldrb	r0, [r4]
	cmp	r0, #0xfe
	beq	.L339	@cond_branch
	cmp	r0, sl
	bne	.L339	@cond_branch
	ldrb	r5, [r4, #0x1]
	cmp	r5, r9
	bne	.L340	@cond_branch
	ldrb	r0, [r4, #0x2]
	add	r1, r6, #0
	mov	r2, sp
	bl	ModulateDmgByType2
.L340:
	cmp	r5, r8
	bne	.L339	@cond_branch
	cmp	r9, r8
	beq	.L339	@cond_branch
	ldrb	r0, [r4, #0x2]
	add	r1, r6, #0
	mov	r2, sp
	bl	ModulateDmgByType2
.L339:
	add	r4, r4, #0x3
	add	r7, r7, #0x3
	ldr	r1, .L350
	add	r0, r7, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L337	@cond_branch
.L334:
	ldr	r3, [sp, #0x4]
	cmp	r3, #0x19
	bne	.L343	@cond_branch
	mov	r0, sp
	ldrb	r2, [r0]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L344	@cond_branch
	mov	r0, #0x6
	and	r0, r0, r2
	cmp	r0, #0x6
	bne	.L343	@cond_branch
.L344:
	ldr	r0, .L350+0x4
	ldr	r3, [sp, #0x8]
	add	r1, r3, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L343	@cond_branch
	mov	r0, sp
	mov	r1, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L343:
	mov	r0, sp
	ldrb	r0, [r0]
.L345:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L351:
	.align	2, 0
.L350:
	.word	gTypeEffectiveness
	.word	gBattleMoves
.Lfe17:
	.size	 AI_TypeCalc,.Lfe17-AI_TypeCalc
	.align	2, 0
	.type	 Unused_ApplyRandomDmgMultiplier,function
	.thumb_func
Unused_ApplyRandomDmgMultiplier:
	push	{r4, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L359
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L358	@cond_branch
	mul	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L358	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L358:
	pop	{r4}
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	gBattleMoveDamage
.Lfe18:
	.size	 Unused_ApplyRandomDmgMultiplier,.Lfe18-Unused_ApplyRandomDmgMultiplier
	.align	2, 0
	.type	 Cmd_adjustnormaldamage,function
	.thumb_func
Cmd_adjustnormaldamage:
	push	{r4, r5, r6, r7, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L373
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L364	@cond_branch
	mul	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L364	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L364:
	ldr	r7, .L373+0x4
	ldr	r6, .L373+0x8
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L365	@cond_branch
	ldr	r1, .L373+0xc
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L366
.L374:
	.align	2, 0
.L373:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gEnigmaBerries
.L365:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L366:
	ldr	r1, .L375
	ldr	r5, .L375+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L367	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L367	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemEffectBattle
	ldr	r2, .L375+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L367:
	ldr	r2, .L375+0xc
	ldr	r3, .L375+0x4
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r1, r1, r0
	add	r5, r2, #0
	cmp	r1, #0
	bne	.L368	@cond_branch
	ldr	r2, .L375+0x10
	ldr	r0, .L375+0x14
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x65
	beq	.L369	@cond_branch
	ldr	r0, .L375+0x18
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.L369	@cond_branch
	ldr	r0, .L375+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L368	@cond_branch
.L369:
	ldrb	r0, [r3]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r1, [r0, #0x28]
	ldr	r2, .L375+0x1c
	ldr	r0, [r2]
	cmp	r1, r0
	bgt	.L368	@cond_branch
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldr	r1, .L375+0x18
	ldrb	r3, [r3]
	lsl	r0, r3, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L370	@cond_branch
	ldr	r0, .L375+0x20
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L368
.L376:
	.align	2, 0
.L375:
	.word	gPotentialItemEffectBattler
	.word	gBattlerTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
.L370:
	ldr	r0, .L377
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L368	@cond_branch
	ldr	r2, .L377+0x4
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L377+0x8
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
.L368:
	ldr	r1, .L377+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L378:
	.align	2, 0
.L377:
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe19:
	.size	 Cmd_adjustnormaldamage,.Lfe19-Cmd_adjustnormaldamage
	.align	2, 0
	.type	 Cmd_adjustnormaldamage2,function
	.thumb_func
Cmd_adjustnormaldamage2:
	push	{r4, r5, r6, r7, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L391
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L382	@cond_branch
	mul	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L382	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L382:
	ldr	r7, .L391+0x4
	ldr	r6, .L391+0x8
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L383	@cond_branch
	ldr	r1, .L391+0xc
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L384
.L392:
	.align	2, 0
.L391:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gEnigmaBerries
.L383:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L384:
	ldr	r1, .L393
	ldr	r5, .L393+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L385	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L385	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemEffectBattle
	ldr	r2, .L393+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L385:
	ldr	r4, .L393+0xc
	ldr	r6, .L393+0x4
	ldrb	r2, [r6]
	mov	r7, #0x58
	mov	r3, r2
	mul	r3, r3, r7
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L386	@cond_branch
	ldr	r5, .L393+0x10
	lsl	r0, r2, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.L387	@cond_branch
	ldr	r0, .L393+0x8
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L386	@cond_branch
.L387:
	add	r0, r3, r4
	ldrh	r1, [r0, #0x28]
	ldr	r2, .L393+0x14
	ldr	r0, [r2]
	cmp	r1, r0
	bgt	.L386	@cond_branch
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldrb	r3, [r6]
	lsl	r0, r3, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L388	@cond_branch
	ldr	r0, .L393+0x18
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L386
.L394:
	.align	2, 0
.L393:
	.word	gPotentialItemEffectBattler
	.word	gBattlerTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
.L388:
	ldr	r0, .L395
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L386	@cond_branch
	ldr	r2, .L395+0x4
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L395+0x8
	mov	r0, r3
	mul	r0, r0, r7
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
.L386:
	ldr	r1, .L395+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L396:
	.align	2, 0
.L395:
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe20:
	.size	 Cmd_adjustnormaldamage2,.Lfe20-Cmd_adjustnormaldamage2
	.align	2, 0
	.type	 Cmd_attackanimation,function
	.thumb_func
Cmd_attackanimation:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	ldr	r0, .L406
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB4651
	b	.L397	@long jump
.LCB4651:
	ldr	r0, .L406+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	ldr	r3, .L406+0x8
	cmp	r0, #0
	beq	.L399	@cond_branch
	ldrh	r0, [r3]
	cmp	r0, #0x90
	beq	.L399	@cond_branch
	cmp	r0, #0xa4
	beq	.L399	@cond_branch
	ldr	r4, .L406+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L406+0x10
	str	r0, [r4]
	ldr	r1, .L406+0x14
	ldrb	r0, [r1, #0x18]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x18]
	ldrb	r0, [r1, #0x19]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x19]
	b	.L397
.L407:
	.align	2, 0
.L406:
	.word	gBattleControllerExecFlags
	.word	gHitMarker
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_Pausex20
	.word	gBattleScripting
.L399:
	ldr	r2, .L408
	ldrh	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L402	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L402	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L401	@cond_branch
.L402:
	ldr	r0, .L408+0x4
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0
	bne	.L405	@cond_branch
.L401:
	ldr	r0, .L408+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L403	@cond_branch
	ldr	r1, .L408+0xc
	ldr	r0, .L408+0x10
	mov	r8, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrh	r1, [r3]
	ldr	r6, .L408+0x4
	ldrb	r2, [r6, #0x18]
	ldr	r0, .L408+0x14
	ldrh	r3, [r0]
	ldr	r0, .L408+0x18
	ldr	r0, [r0]
	str	r0, [sp]
	ldr	r5, .L408+0x1c
	mov	r0, r8
	ldrb	r4, [r0]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	str	r0, [sp, #0x4]
	mov	r0, r8
	ldrb	r4, [r0]
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r4, .L408+0x20
	add	r0, r0, r4
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	bl	BtlController_EmitMoveAnimation
	ldrb	r0, [r6, #0x18]
	add	r0, r0, #0x1
	strb	r0, [r6, #0x18]
	ldrb	r0, [r6, #0x19]
	add	r0, r0, #0x1
	strb	r0, [r6, #0x19]
	mov	r1, r8
	ldrb	r0, [r1]
	bl	MarkBattlerForControllerExec
.L405:
	ldr	r1, .L408+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	b	.L397
.L409:
	.align	2, 0
.L408:
	.word	gBattleMoves
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMovePower
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.L403:
	ldr	r4, .L410
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L410+0x4
	str	r0, [r4]
.L397:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L411:
	.align	2, 0
.L410:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_Pausex20
.Lfe21:
	.size	 Cmd_attackanimation,.Lfe21-Cmd_attackanimation
	.align	2, 0
	.type	 Cmd_waitanimation,function
	.thumb_func
Cmd_waitanimation:
	push	{lr}
	ldr	r0, .L414
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L413	@cond_branch
	ldr	r1, .L414+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L413:
	pop	{r0}
	bx	r0
.L415:
	.align	2, 0
.L414:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
.Lfe22:
	.size	 Cmd_waitanimation,.Lfe22-Cmd_waitanimation
	.align	2, 0
	.type	 Cmd_healthbarupdate,function
	.thumb_func
Cmd_healthbarupdate:
	push	{r4, lr}
	ldr	r0, .L424
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L416	@cond_branch
	ldr	r0, .L424+0x4
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L418	@cond_branch
	ldr	r0, .L424+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r2, .L424+0xc
	strb	r0, [r2]
	ldr	r1, .L424+0x10
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L419	@cond_branch
	ldr	r0, .L424+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	beq	.L419	@cond_branch
	ldr	r0, .L424+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L419	@cond_branch
	mov	r0, #0x80
	add	r1, r2, #0
	bl	PrepareStringBattle
	b	.L418
.L425:
	.align	2, 0
.L424:
	.word	gBattleControllerExecFlags
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gDisableStructs
	.word	gHitMarker
.L419:
	ldr	r0, .L426
	ldr	r0, [r0]
	ldr	r1, .L426+0x4
	cmp	r0, r1
	bgt	.L422	@cond_branch
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L422:
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldr	r4, .L426+0x8
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L418	@cond_branch
	ldr	r0, .L426
	ldr	r0, [r0]
	cmp	r0, #0
	ble	.L418	@cond_branch
	ldr	r0, .L426+0xc
	ldrb	r1, [r0, #0x5]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L418:
	ldr	r1, .L426+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L416:
	pop	{r4}
	pop	{r0}
	bx	r0
.L427:
	.align	2, 0
.L426:
	.word	gBattleMoveDamage
	.word	0x2710
	.word	gActiveBattler
	.word	gBattleResults
	.word	gBattlescriptCurrInstr
.Lfe23:
	.size	 Cmd_healthbarupdate,.Lfe23-Cmd_healthbarupdate
	.align	2, 0
	.type	 Cmd_datahpupdate,function
	.thumb_func
Cmd_datahpupdate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L465
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB4999
	b	.L428	@long jump
.LCB4999:
	ldr	r0, .L465+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x13]
	cmp	r1, #0
	beq	.L432	@cond_branch
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L432	@cond_branch
	mov	r6, #0x3f
	and	r6, r6, r1
	b	.L431
.L466:
	.align	2, 0
.L465:
	.word	gBattleControllerExecFlags
	.word	gBattleStruct
.L432:
	ldr	r2, .L467
	ldr	r0, .L467+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r6, [r0, #0x2]
.L431:
	ldr	r0, .L467+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5043
	b	.L434	@long jump
.LCB5043:
	ldr	r0, .L467+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r7, .L467+0x10
	strb	r0, [r7]
	ldr	r1, .L467+0x14
	ldrb	r2, [r7]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L435	@cond_branch
	ldr	r0, .L467+0x18
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r4, r1, r0
	ldrb	r1, [r4, #0xa]
	mov	ip, r0
	cmp	r1, #0
	beq	.L435	@cond_branch
	ldr	r0, .L467+0x1c
	ldr	r3, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r3, r3, r0
	cmp	r3, #0
	bne	.L435	@cond_branch
	add	r5, r1, #0
	ldr	r6, .L467+0x20
	ldr	r4, [r6]
	cmp	r5, r4
	blt	.L436	@cond_branch
	ldr	r0, .L467+0x24
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L437	@cond_branch
	str	r4, [r1]
.L437:
	ldrb	r0, [r7]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r2, [r6]
	ldrb	r0, [r1, #0xa]
	sub	r0, r0, r2
	strb	r0, [r1, #0xa]
	ldr	r1, .L467+0x28
	ldr	r0, [r6]
	str	r0, [r1]
	b	.L438
.L468:
	.align	2, 0
.L467:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMoveDamage
	.word	gSpecialStatuses
	.word	gHpDealt
.L436:
	ldr	r0, .L469
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L439	@cond_branch
	str	r5, [r1]
.L439:
	ldr	r2, .L469+0x4
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r0, [r0, #0xa]
	str	r0, [r2]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	strb	r3, [r0, #0xa]
.L438:
	ldr	r0, .L469+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	beq	.LCB5170
	b	.L459	@long jump
.LCB5170:
	ldr	r4, .L469+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r0, .L469+0x10
	str	r0, [r4]
	b	.L428
.L470:
	.align	2, 0
.L469:
	.word	gSpecialStatuses
	.word	gHpDealt
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SubstituteFade
.L435:
	ldr	r0, .L471
	ldr	r2, [r0]
	ldr	r1, .L471+0x4
	and	r2, r2, r1
	str	r2, [r0]
	ldr	r1, .L471+0x8
	ldr	r5, [r1]
	mov	ip, r0
	add	r7, r1, #0
	cmp	r5, #0
	bge	.L442	@cond_branch
	ldr	r4, .L471+0xc
	ldr	r2, .L471+0x10
	ldrb	r0, [r2]
	mov	r3, #0x58
	mov	r1, r0
	mul	r1, r1, r3
	add	r1, r1, r4
	ldrh	r0, [r1, #0x28]
	sub	r0, r0, r5
	strh	r0, [r1, #0x28]
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r1, r0, r4
	ldrh	r3, [r1, #0x2c]
	ldrh	r0, [r1, #0x28]
	add	r5, r2, #0
	cmp	r0, r3
	bhi	.LCB5225
	b	.L444	@long jump
.LCB5225:
	strh	r3, [r1, #0x28]
	b	.L444
.L472:
	.align	2, 0
.L471:
	.word	gHitMarker
	.word	-0x101
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gActiveBattler
.L442:
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L445	@cond_branch
	mov	r0, #0x21
	neg	r0, r0
	and	r2, r2, r0
	mov	r0, ip
	str	r2, [r0]
	ldr	r5, .L473
	b	.L446
.L474:
	.align	2, 0
.L473:
	.word	gActiveBattler
.L445:
	ldr	r0, .L475
	ldr	r2, .L475+0x4
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r0, r0, r5
	str	r0, [r1]
	ldr	r0, .L475+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	add	r5, r2, #0
	cmp	r0, #0
	bne	.L447	@cond_branch
	ldr	r1, .L475+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldr	r1, .L475+0x10
	b	.L462
.L476:
	.align	2, 0
.L475:
	.word	gTakenDmg
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	gTakenDmgByBattler
	.word	gBattlerAttacker
.L447:
	ldr	r1, .L477
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldr	r1, .L477+0x4
.L462:
	ldrb	r1, [r1]
	strb	r1, [r0]
.L446:
	ldr	r4, .L477+0x8
	ldrb	r0, [r5]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r2, r0, r4
	ldrh	r0, [r2, #0x28]
	ldr	r1, [r7]
	cmp	r0, r1
	ble	.L449	@cond_branch
	sub	r0, r0, r1
	strh	r0, [r2, #0x28]
	ldr	r0, .L477+0xc
	str	r1, [r0]
	add	r7, r0, #0
	b	.L450
.L478:
	.align	2, 0
.L477:
	.word	gTakenDmgByBattler
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gHpDealt
.L449:
	ldr	r2, .L479
	str	r0, [r2]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0x28]
	add	r7, r2, #0
.L450:
	ldr	r2, .L479+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r2, #0x4
	add	r3, r0, r1
	ldr	r0, [r3]
	add	r4, r2, #0
	cmp	r0, #0
	bne	.L451	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L451	@cond_branch
	ldr	r0, [r7]
	str	r0, [r3]
.L451:
	cmp	r6, #0x8
	bhi	.L461	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L452	@cond_branch
	ldr	r0, .L479+0x8
	ldrh	r0, [r0]
	cmp	r0, #0xdc
	beq	.L452	@cond_branch
	ldr	r3, .L479+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r3, #0x4
	add	r0, r0, r1
	ldr	r2, [r7]
	str	r2, [r0]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	str	r2, [r0]
	ldr	r0, .L479+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L453	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L479+0x14
	b	.L463
.L480:
	.align	2, 0
.L479:
	.word	gHpDealt
	.word	gSpecialStatuses
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
.L453:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L481
.L463:
	ldrb	r1, [r2]
	strb	r1, [r0, #0xc]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r2]
	strb	r1, [r0, #0x10]
	b	.L444
.L482:
	.align	2, 0
.L481:
	.word	gBattlerTarget
.L452:
	cmp	r6, #0x8
	bls	.L444	@cond_branch
.L461:
	mov	r1, ip
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L444	@cond_branch
	ldr	r3, .L483
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r3, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldr	r2, [r7]
	str	r2, [r0]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	str	r2, [r0]
	ldr	r0, .L483+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L457	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L483+0x8
	b	.L464
.L484:
	.align	2, 0
.L483:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
.L457:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L485
.L464:
	ldrb	r1, [r2]
	strb	r1, [r0, #0xd]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r2]
	strb	r1, [r0, #0x11]
.L444:
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r1, .L485+0x4
	and	r0, r0, r1
	mov	r1, ip
	str	r0, [r1]
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r1, .L485+0x8
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2a
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	b	.L459
.L486:
	.align	2, 0
.L485:
	.word	gBattlerTarget
	.word	-0x100001
	.word	gBattleMons+0x28
.L434:
	ldr	r0, .L487
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L487+0x4
	strb	r0, [r1]
	ldr	r2, .L487+0x8
	ldrb	r1, [r1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	add	r1, r0, r2
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L459	@cond_branch
	ldr	r0, .L487+0xc
	str	r0, [r1]
.L459:
	ldr	r1, .L487
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L428:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gSpecialStatuses
	.word	0xffff
.Lfe24:
	.size	 Cmd_datahpupdate,.Lfe24-Cmd_datahpupdate
	.align	2, 0
	.type	 Cmd_critmessage,function
	.thumb_func
Cmd_critmessage:
	push	{lr}
	ldr	r0, .L492
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L490	@cond_branch
	ldr	r0, .L492+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L491	@cond_branch
	ldr	r0, .L492+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L491	@cond_branch
	ldr	r0, .L492+0xc
	ldrb	r1, [r0]
	mov	r0, #0xd9
	bl	PrepareStringBattle
	ldr	r1, .L492+0x10
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
.L491:
	ldr	r1, .L492+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L490:
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	gBattleControllerExecFlags
	.word	gCritMultiplier
	.word	gMoveResultFlags
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe25:
	.size	 Cmd_critmessage,.Lfe25-Cmd_critmessage
	.align	2, 0
	.type	 Cmd_effectivenesssound,function
	.thumb_func
Cmd_effectivenesssound:
	push	{r4, lr}
	ldr	r0, .L517
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L494	@cond_branch
	ldr	r4, .L517+0x4
	ldr	r0, .L517+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r1, .L517+0xc
	ldrb	r2, [r1]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L496	@cond_branch
	mov	r0, #0xfe
	and	r0, r0, r2
	cmp	r0, #0x10
	beq	.L505	@cond_branch
	cmp	r0, #0x10
	bgt	.L512	@cond_branch
	cmp	r0, #0x4
	beq	.L499	@cond_branch
	cmp	r0, #0x4
	bgt	.L513	@cond_branch
	cmp	r0, #0x2
	beq	.L498	@cond_branch
	b	.L505
.L518:
	.align	2, 0
.L517:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gMoveResultFlags
.L513:
	cmp	r0, #0x8
	beq	.L496	@cond_branch
	b	.L505
.L512:
	cmp	r0, #0x40
	beq	.L505	@cond_branch
	cmp	r0, #0x40
	bgt	.L505	@cond_branch
	cmp	r0, #0x20
	beq	.L496	@cond_branch
	b	.L505
.L498:
	mov	r0, #0x0
	mov	r1, #0xe
	b	.L515
.L499:
	mov	r0, #0x0
	mov	r1, #0xc
.L515:
	bl	BtlController_EmitPlaySE
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L496
.L505:
	ldrb	r1, [r1]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L506	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xe
	b	.L516
.L506:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L508	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xc
.L516:
	bl	BtlController_EmitPlaySE
	ldr	r0, .L519
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	b	.L496
.L520:
	.align	2, 0
.L519:
	.word	gActiveBattler
.L508:
	mov	r0, #0x28
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L496	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xd
	bl	BtlController_EmitPlaySE
	ldr	r0, .L521
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
.L496:
	ldr	r1, .L521+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L494:
	pop	{r4}
	pop	{r0}
	bx	r0
.L522:
	.align	2, 0
.L521:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.Lfe26:
	.size	 Cmd_effectivenesssound,.Lfe26-Cmd_effectivenesssound
	.align	2, 0
	.type	 Cmd_resultmessage,function
	.thumb_func
Cmd_resultmessage:
	push	{r4, r5, r6, r7, lr}
	mov	r3, #0x0
	ldr	r0, .L556
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB5812
	b	.L523	@long jump
.LCB5812:
	ldr	r1, .L556+0x4
	ldrb	r2, [r1]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r2
	add	r6, r1, #0
	ldr	r7, .L556+0x8
	cmp	r0, #0
	beq	.L525	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L526	@cond_branch
	ldrb	r0, [r7, #0x6]
	cmp	r0, #0x2
	bls	.L525	@cond_branch
.L526:
	ldr	r1, .L556+0xc
	ldrb	r0, [r7, #0x6]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r3, [r0]
	strb	r4, [r7, #0x7]
	b	.L527
.L557:
	.align	2, 0
.L556:
	.word	gBattleControllerExecFlags
	.word	gMoveResultFlags
	.word	gBattleCommunication
	.word	gMissStringIds
.L525:
	mov	r0, #0x1
	strb	r0, [r7, #0x7]
	ldrb	r5, [r6]
	mov	r0, #0xfe
	and	r0, r0, r5
	cmp	r0, #0x10
	beq	.L531	@cond_branch
	cmp	r0, #0x10
	bgt	.L548	@cond_branch
	cmp	r0, #0x4
	beq	.L530	@cond_branch
	cmp	r0, #0x4
	bgt	.L549	@cond_branch
	cmp	r0, #0x2
	beq	.L529	@cond_branch
	b	.L536
.L549:
	cmp	r0, #0x8
	beq	.L554	@cond_branch
	b	.L536
.L548:
	cmp	r0, #0x40
	beq	.L532	@cond_branch
	cmp	r0, #0x40
	bgt	.L550	@cond_branch
	cmp	r0, #0x20
	bne	.LCB5893
	b	.L553	@long jump
.LCB5893:
	b	.L536
.L550:
	cmp	r0, #0x80
	beq	.L535	@cond_branch
	b	.L536
.L529:
	mov	r3, #0xde
	b	.L552
.L530:
	mov	r3, #0xdd
	b	.L552
.L531:
	mov	r3, #0xda
	b	.L552
.L532:
	mov	r3, #0x99
	b	.L552
.L535:
	ldr	r4, .L558
	ldr	r2, .L558+0x4
	ldr	r3, .L558+0x8
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r4]
	ldr	r1, .L558+0xc
	ldrb	r0, [r3]
	strb	r0, [r1]
	mov	r0, #0x3f
	and	r0, r0, r5
	strb	r0, [r6]
	bl	BattleScriptPushCursor
	ldr	r1, .L558+0x10
	ldr	r0, .L558+0x14
	b	.L555
.L559:
	.align	2, 0
.L558:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gPotentialItemEffectBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FocusBandActivates
.L536:
	add	r2, r6, #0
	ldrb	r5, [r2]
	mov	r0, #0x8
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L537	@cond_branch
.L554:
	mov	r3, #0x1b
	b	.L552
.L537:
	mov	r0, #0x10
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L539	@cond_branch
	mov	r0, #0xef
	and	r0, r0, r5
	mov	r1, #0xfd
	and	r0, r0, r1
	mov	r1, #0xfb
	and	r0, r0, r1
	strb	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L560
	ldr	r0, .L560+0x4
	b	.L555
.L561:
	.align	2, 0
.L560:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_OneHitKOMsg
.L539:
	mov	r0, #0x40
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L541	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r5
	strb	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L562
	ldr	r0, .L562+0x4
	b	.L555
.L563:
	.align	2, 0
.L562:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_EnduredMsg
.L541:
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L543	@cond_branch
	ldr	r4, .L564
	ldr	r2, .L564+0x4
	ldr	r3, .L564+0x8
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r4]
	ldr	r1, .L564+0xc
	ldrb	r0, [r3]
	strb	r0, [r1]
	mov	r0, #0x3f
	and	r0, r0, r5
	strb	r0, [r6]
	bl	BattleScriptPushCursor
	ldr	r1, .L564+0x10
	ldr	r0, .L564+0x14
	b	.L555
.L565:
	.align	2, 0
.L564:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gPotentialItemEffectBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FocusBandActivates
.L543:
	mov	r0, #0x20
	and	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L545	@cond_branch
.L553:
	mov	r3, #0xe5
	b	.L552
.L545:
	strb	r0, [r7, #0x7]
.L527:
	cmp	r3, #0
	beq	.L551	@cond_branch
.L552:
	add	r0, r3, #0
	ldr	r1, .L566
	ldrb	r1, [r1]
	bl	PrepareStringBattle
.L551:
	ldr	r1, .L566+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L555:
	str	r0, [r1]
.L523:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L567:
	.align	2, 0
.L566:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe27:
	.size	 Cmd_resultmessage,.Lfe27-Cmd_resultmessage
	.align	2, 0
	.type	 Cmd_printstring,function
	.thumb_func
Cmd_printstring:
	push	{r4, lr}
	ldr	r0, .L570
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L569	@cond_branch
	ldr	r4, .L570+0x4
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1]
	ldrb	r1, [r1, #0x2]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r1, .L570+0x8
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	ldr	r1, .L570+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
.L569:
	pop	{r4}
	pop	{r0}
	bx	r0
.L571:
	.align	2, 0
.L570:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBattleCommunication
.Lfe28:
	.size	 Cmd_printstring,.Lfe28-Cmd_printstring
	.align	2, 0
	.type	 Cmd_printselectionstring,function
	.thumb_func
Cmd_printselectionstring:
	push	{r4, r5, lr}
	ldr	r5, .L573
	ldr	r0, .L573+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L573+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	BtlController_EmitPrintSelectionString
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	ldr	r1, .L573+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L574:
	.align	2, 0
.L573:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
.Lfe29:
	.size	 Cmd_printselectionstring,.Lfe29-Cmd_printselectionstring
	.align	2, 0
	.type	 Cmd_waitmessage,function
	.thumb_func
Cmd_waitmessage:
	push	{r4, r5, r6, lr}
	ldr	r0, .L580
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L576	@cond_branch
	ldr	r6, .L580+0x4
	ldrb	r0, [r6, #0x7]
	cmp	r0, #0
	bne	.L577	@cond_branch
	ldr	r1, .L580+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	b	.L576
.L581:
	.align	2, 0
.L580:
	.word	gBattleControllerExecFlags
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L577:
	ldr	r5, .L582
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r3, .L582+0x4
	ldrh	r0, [r3]
	add	r0, r0, #0x1
	strh	r0, [r3]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r1
	bcc	.L576	@cond_branch
	mov	r1, #0x0
	strh	r4, [r3]
	add	r0, r2, #0x3
	str	r0, [r5]
	strb	r1, [r6, #0x7]
.L576:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L583:
	.align	2, 0
.L582:
	.word	gBattlescriptCurrInstr
	.word	gPauseCounterBattle
.Lfe30:
	.size	 Cmd_waitmessage,.Lfe30-Cmd_waitmessage
	.align	2, 0
	.type	 Cmd_printfromtable,function
	.thumb_func
Cmd_printfromtable:
	push	{r4, r5, lr}
	ldr	r0, .L586
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L585	@cond_branch
	ldr	r4, .L586+0x4
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r5, .L586+0x8
	ldrb	r0, [r5, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L586+0xc
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	mov	r0, #0x1
	strb	r0, [r5, #0x7]
.L585:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L587:
	.align	2, 0
.L586:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gBattlerAttacker
.Lfe31:
	.size	 Cmd_printfromtable,.Lfe31-Cmd_printfromtable
	.align	2, 0
	.type	 Cmd_printselectionstringfromtable,function
	.thumb_func
Cmd_printselectionstringfromtable:
	push	{r4, r5, r6, lr}
	ldr	r0, .L590
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L589	@cond_branch
	ldr	r5, .L590+0x4
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r6, .L590+0x8
	ldrb	r0, [r6, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r4, .L590+0xc
	ldr	r0, .L590+0x10
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrh	r1, [r1]
	mov	r0, #0x0
	bl	BtlController_EmitPrintSelectionString
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x5
	str	r0, [r5]
	mov	r0, #0x1
	strb	r0, [r6, #0x7]
.L589:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L591:
	.align	2, 0
.L590:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattlerAttacker
.Lfe32:
	.size	 Cmd_printselectionstringfromtable,.Lfe32-Cmd_printselectionstringfromtable
	.align	2, 0
	.globl	GetBattlerTurnOrderNum
	.type	 GetBattlerTurnOrderNum,function
	.thumb_func
GetBattlerTurnOrderNum:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	ldr	r0, .L599
	ldrb	r3, [r0]
	cmp	r1, r3
	bge	.L594	@cond_branch
	ldr	r4, .L599+0x4
	ldrb	r0, [r4]
	cmp	r0, r2
	beq	.L594	@cond_branch
.L595:
	add	r1, r1, #0x1
	cmp	r1, r3
	bge	.L594	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L595	@cond_branch
.L594:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L600:
	.align	2, 0
.L599:
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
.Lfe33:
	.size	 GetBattlerTurnOrderNum,.Lfe33-GetBattlerTurnOrderNum
	.align	2, 0
	.globl	SetMoveEffect
	.type	 SetMoveEffect,function
	.thumb_func
SetMoveEffect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	mov	r0, #0x0
	mov	sl, r0
	mov	r7, #0x0
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	ldr	r1, .L808
	ldrb	r3, [r1, #0x3]
	mov	r0, #0x40
	and	r0, r0, r3
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L602	@cond_branch
	ldr	r2, .L808+0x4
	ldr	r0, .L808+0x8
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0xbf
	and	r0, r0, r3
	strb	r0, [r6, #0x3]
	mov	r7, #0x40
	ldr	r1, .L808+0xc
	ldr	r0, .L808+0x10
	b	.L800
.L809:
	.align	2, 0
.L808:
	.word	gBattleCommunication
	.word	gEffectBattler
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattlerTarget
.L602:
	ldr	r2, .L810
	ldr	r0, .L810+0x4
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r1, .L810+0x8
	ldr	r0, .L810+0xc
.L800:
	ldrb	r0, [r0]
	strb	r0, [r1, #0x17]
	mov	r9, r2
	ldr	r0, .L810+0x10
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L604	@cond_branch
	ldrb	r0, [r6, #0x3]
	cmp	r0, #0x1
	beq	.L604	@cond_branch
	mov	r2, r9
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB6510
	bl	.L793	@far jump
.LCB6510:
.L604:
	ldr	r3, .L810+0x14
	ldr	r2, .L810
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	r9, r2
	cmp	r0, #0x13
	bne	.L605	@cond_branch
	ldr	r0, .L810+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L605	@cond_branch
	cmp	r4, #0
	bne	.L605	@cond_branch
	ldr	r0, .L810+0x1c
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0x9
	bhi	.LCB6540
	bl	.L793	@far jump
.LCB6540:
.L605:
	mov	r3, r9
	ldrb	r0, [r3]
	bl	GetBattlerPosition
	ldr	r2, .L810+0x20
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L606	@cond_branch
	ldr	r0, .L810+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L606	@cond_branch
	cmp	r4, #0
	bne	.L606	@cond_branch
	ldr	r0, .L810+0x1c
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0x7
	bhi	.LCB6577
	bl	.L793	@far jump
.LCB6577:
.L606:
	ldr	r3, .L810+0x14
	ldr	r2, .L810
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x28]
	mov	r9, r2
	mov	r8, r3
	cmp	r0, #0
	bne	.L607	@cond_branch
	ldr	r0, .L810+0x1c
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0xb
	beq	.L607	@cond_branch
	cmp	r0, #0x1f
	beq	.LCB6600
	bl	.L793	@far jump
.LCB6600:
.L607:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, r8
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L608	@cond_branch
	cmp	r7, #0x40
	beq	.LCB6619
	bl	.L793	@far jump
.LCB6619:
.L608:
	ldr	r0, .L810+0x1c
	ldrb	r1, [r0, #0x3]
	add	r6, r0, #0
	cmp	r1, #0x6
	bls	.LCB6628
	b	.L609	@long jump
.LCB6628:
	ldr	r1, .L810+0x24
	ldrb	r0, [r6, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0x10
	bne	.LCB6636
	b	.L638	@long jump
.LCB6636:
	cmp	r0, #0x10
	bhi	.L679	@cond_branch
	cmp	r0, #0x7
	beq	.L611	@cond_branch
	cmp	r0, #0x8
	bne	.LCB6642
	b	.L624	@long jump
.LCB6642:
	b	.L610
.L811:
	.align	2, 0
.L810:
	.word	gEffectBattler
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	gBattlerAttacker
	.word	gBattleTypeFlags
	.word	gBattleMons
	.word	gHitMarker
	.word	gBattleCommunication
	.word	gSideStatuses
	.word	sStatusFlagsForMoveEffects
.L679:
	cmp	r0, #0x40
	bne	.LCB6662
	b	.L657	@long jump
.LCB6662:
	cmp	r0, #0x40
	bhi	.L680	@cond_branch
	cmp	r0, #0x20
	bne	.LCB6666
	b	.L650	@long jump
.LCB6666:
	b	.L610
.L680:
	cmp	r0, #0x80
	bne	.LCB6671
	b	.L665	@long jump
.LCB6671:
	b	.L610
.L611:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x2b
	beq	.L612	@cond_branch
	ldr	r0, .L812
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L812+0x4
	ldrb	r3, [r1]
	add	r7, r0, #0
	mov	ip, r1
	cmp	r3, #0
	beq	.L619	@cond_branch
	mov	r4, r8
	ldr	r0, [r4, #0x50]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L619	@cond_branch
	add	r1, r7, #0
	mov	r6, r8
	add	r6, r6, #0x50
	mov	r5, #0x58
	mov	r4, #0x70
.L615:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r3
	bcs	.L619	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L615	@cond_branch
	b	.L619
.L813:
	.align	2, 0
.L812:
	.word	gActiveBattler
	.word	gBattlersCount
.L612:
	ldr	r0, .L814
	ldr	r2, .L814+0x4
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r7, r0, #0
	mov	ip, r2
.L619:
	mov	r0, r9
	ldrb	r2, [r0]
	mov	r0, #0x58
	mov	r1, r2
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB6766
	b	.L610	@long jump
.LCB6766:
	ldrb	r0, [r7]
	mov	r3, ip
	ldrb	r3, [r3]
	cmp	r0, r3
	beq	.LCB6778
	b	.L610	@long jump
.LCB6778:
	mov	r4, r8
	add	r0, r1, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x48
	bne	.LCB6786
	b	.L610	@long jump
.LCB6786:
	cmp	r0, #0xf
	bne	.LCB6788
	b	.L610	@long jump
.LCB6788:
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	b	.L801
.L815:
	.align	2, 0
.L814:
	.word	gActiveBattler
	.word	gBattlersCount
.L624:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, #0x11
	bne	.L625	@cond_branch
	cmp	r4, #0x1
	beq	.L626	@cond_branch
	cmp	r5, #0x80
	bne	.L625	@cond_branch
.L626:
	ldr	r0, .L816
	strb	r1, [r0]
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r1, #0x11
	bl	RecordAbilityBattle
	ldr	r4, .L816+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L816+0x8
.L807:
	str	r0, [r4]
	ldr	r2, .L816+0xc
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB6841
	b	.L802	@long jump
.LCB6841:
	b	.L668
.L817:
	.align	2, 0
.L816:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PSNPrevention
	.word	gHitMarker
.L625:
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	cmp	r1, #0x3
	beq	.L630	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L630	@cond_branch
	cmp	r1, #0x8
	beq	.L630	@cond_branch
	cmp	r0, #0x8
	bne	.L629	@cond_branch
.L630:
	ldr	r0, .L818
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L629	@cond_branch
	cmp	r4, #0x1
	bne	.LCB6889
	b	.L672	@long jump
.LCB6889:
	cmp	r5, #0x80
	bne	.LCB6891
	b	.L672	@long jump
.LCB6891:
.L629:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r1, r1, r0
	mov	r4, r8
	add	r3, r1, r4
	add	r0, r3, #0
	add	r0, r0, #0x21
	ldrb	r4, [r0]
	cmp	r4, #0x3
	bne	.LCB6909
	b	.L610	@long jump
.LCB6909:
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.LCB6916
	b	.L610	@long jump
.LCB6916:
	cmp	r4, #0x8
	bne	.LCB6918
	b	.L610	@long jump
.LCB6918:
	cmp	r0, #0x8
	bne	.LCB6920
	b	.L610	@long jump
.LCB6920:
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB6926
	b	.L610	@long jump
.LCB6926:
	add	r0, r3, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x11
	bne	.LCB6933
	b	.L610	@long jump
.LCB6933:
	b	.L801
.L819:
	.align	2, 0
.L818:
	.word	gHitMarker
.L638:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, #0x29
	bne	.L639	@cond_branch
	cmp	r4, #0x1
	beq	.L640	@cond_branch
	cmp	r5, #0x80
	bne	.L639	@cond_branch
.L640:
	ldr	r0, .L820
	strb	r1, [r0]
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r1, #0x29
	bl	RecordAbilityBattle
	ldr	r4, .L820+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L820+0x8
	b	.L807
.L821:
	.align	2, 0
.L820:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BRNPrevention
.L639:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r2, r8
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L644	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.L643	@cond_branch
.L644:
	ldr	r0, .L822
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L643	@cond_branch
	cmp	r4, #0x1
	beq	.L645	@cond_branch
	cmp	r5, #0x80
	bne	.L643	@cond_branch
.L645:
	ldr	r4, .L822+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L822+0x8
	b	.L803
.L823:
	.align	2, 0
.L822:
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BRNPrevention
.L643:
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r1, #0x58
	mov	r2, r0
	mul	r2, r2, r1
	mov	r4, r8
	add	r1, r2, r4
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.LCB7055
	b	.L610	@long jump
.LCB7055:
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.LCB7062
	b	.L610	@long jump
.LCB7062:
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x29
	bne	.LCB7069
	b	.L610	@long jump
.LCB7069:
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7075
	b	.L610	@long jump
.LCB7075:
	b	.L801
.L650:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L651	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L651	@cond_branch
	ldr	r0, .L824
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L651	@cond_branch
	mov	r1, #0x0
	str	r1, [sp, #0x4]
.L651:
	ldr	r4, .L824+0x4
	ldr	r0, .L824+0x8
	ldrb	r3, [r0]
	mov	r0, #0x58
	mov	r2, r3
	mul	r2, r2, r0
	add	r1, r2, r4
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xf
	bne	.LCB7125
	b	.L610	@long jump
.LCB7125:
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xf
	bne	.LCB7132
	b	.L610	@long jump
.LCB7132:
	add	r0, r4, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7138
	b	.L610	@long jump
.LCB7138:
	ldr	r2, [sp, #0x4]
	cmp	r2, #0
	bne	.LCB7141
	b	.L610	@long jump
.LCB7141:
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x28
	bne	.LCB7148
	b	.L610	@long jump
.LCB7148:
	add	r0, r3, #0
	bl	CancelMultiTurnMoves
	mov	r3, #0x1
	mov	sl, r3
	b	.L610
.L825:
	.align	2, 0
.L824:
	.word	gBattleWeather
	.word	gBattleMons
	.word	gEffectBattler
.L657:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	mov	r2, r8
	add	r0, r1, r2
	add	r0, r0, #0x20
	ldrb	r2, [r0]
	cmp	r2, #0x7
	bne	.L658	@cond_branch
	cmp	r4, #0x1
	beq	.L660	@cond_branch
	cmp	r5, #0x80
	beq	.LCB7182
	b	.L610	@long jump
.LCB7182:
.L660:
	ldr	r0, .L826
	strb	r2, [r0]
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r1, #0x7
	bl	RecordAbilityBattle
	ldr	r4, .L826+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L826+0x8
	b	.L807
.L827:
	.align	2, 0
.L826:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PRLZPrevention
.L658:
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7216
	b	.L610	@long jump
.LCB7216:
	mov	r4, #0x1
	mov	sl, r4
	b	.L610
.L665:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, #0x11
	bne	.L666	@cond_branch
	cmp	r4, #0x1
	beq	.L667	@cond_branch
	cmp	r5, #0x80
	bne	.L666	@cond_branch
.L667:
	ldr	r0, .L828
	strb	r1, [r0]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, #0x11
	bl	RecordAbilityBattle
	ldr	r4, .L828+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L828+0x8
	str	r0, [r4]
	ldr	r2, .L828+0xc
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L668	@cond_branch
.L802:
	mov	r0, #0x1
	strb	r0, [r6, #0x5]
	ldr	r0, .L828+0x10
	and	r1, r1, r0
	str	r1, [r2]
	bl	.L601	@ far jump
.L829:
	.align	2, 0
.L828:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PSNPrevention
	.word	gHitMarker
	.word	-0x2001
.L668:
	strb	r0, [r6, #0x5]
	bl	.L601	@ far jump
.L666:
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	cmp	r1, #0x3
	beq	.L671	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L671	@cond_branch
	cmp	r1, #0x8
	beq	.L671	@cond_branch
	cmp	r0, #0x8
	bne	.L670	@cond_branch
.L671:
	ldr	r0, .L830
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L670	@cond_branch
	cmp	r4, #0x1
	beq	.L672	@cond_branch
	cmp	r5, #0x80
	bne	.L670	@cond_branch
.L672:
	ldr	r4, .L830+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L830+0x8
.L803:
	str	r0, [r4]
	ldr	r1, .L830+0xc
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	bl	.L601	@ far jump
.L831:
	.align	2, 0
.L830:
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PSNPrevention
	.word	gBattleCommunication
.L670:
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r6, #0x58
	mul	r0, r0, r6
	mov	r2, r8
	add	r2, r2, #0x4c
	add	r5, r0, r2
	ldr	r4, [r5]
	cmp	r4, #0
	bne	.L610	@cond_branch
	mov	r3, r8
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r3, [r0]
	cmp	r3, #0x3
	beq	.L674	@cond_branch
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L674	@cond_branch
	cmp	r3, #0x8
	beq	.L674	@cond_branch
	cmp	r0, #0x8
	beq	.L674	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x11
	beq	.L610	@cond_branch
	mov	r4, r9
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x9
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
.L801:
	mov	r0, #0x1
	mov	sl, r0
	b	.L610
.L674:
	ldr	r0, .L832
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L610:
	mov	r1, sl
	cmp	r1, #0x1
	beq	.LCB7413
	b	.L681	@long jump
.LCB7413:
	ldr	r0, .L832+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L832+0x8
	ldr	r0, .L832+0xc
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r3, [r0]
	cmp	r3, #0x7
	bne	.L682	@cond_branch
	bl	Random
	ldr	r2, .L832+0x10
	ldr	r1, .L832+0x14
	ldrb	r3, [r1]
	mov	r1, #0x58
	mul	r3, r3, r1
	add	r2, r2, #0x4c
	add	r3, r3, r2
	mov	r1, #0x3
	and	r1, r1, r0
	add	r1, r1, #0x2
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	b	.L683
.L833:
	.align	2, 0
.L832:
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	sStatusFlagsForMoveEffects
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gEffectBattler
.L682:
	ldr	r2, .L834
	ldr	r0, .L834+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r2, r2, #0x4c
	add	r1, r1, r2
	ldr	r0, [r1]
	orr	r0, r0, r3
	str	r0, [r1]
.L683:
	ldr	r2, .L834+0x8
	ldr	r1, .L834+0xc
	ldr	r5, .L834+0x10
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r4, .L834+0x14
	ldr	r1, .L834+0x4
	ldrb	r0, [r1]
	strb	r0, [r4]
	ldrb	r1, [r1]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r1, .L834+0x18
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r2, .L834+0x1c
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L684	@cond_branch
	mov	r0, #0x1
	strb	r0, [r5, #0x5]
	ldr	r0, .L834+0x20
	and	r1, r1, r0
	str	r1, [r2]
	b	.L685
.L835:
	.align	2, 0
.L834:
	.word	gBattleMons
	.word	gEffectBattler
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattleMons+0x4c
	.word	gHitMarker
	.word	-0x2001
.L684:
	strb	r0, [r5, #0x5]
.L685:
	ldr	r0, .L836
	ldrb	r2, [r0, #0x3]
	add	r6, r0, #0
	cmp	r2, #0x2
	beq	.L687	@cond_branch
	cmp	r2, #0x6
	beq	.L687	@cond_branch
	cmp	r2, #0x5
	beq	.L687	@cond_branch
	cmp	r2, #0x3
	beq	.LCB7541
	bl	.L601	@far jump
.LCB7541:
.L687:
	ldr	r0, .L836+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb4
	ldrb	r1, [r6, #0x3]
	strb	r1, [r0]
	ldr	r2, .L836+0x8
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	bl	.L804	@ far jump
.L837:
	.align	2, 0
.L836:
	.word	gBattleCommunication
	.word	gBattleStruct
	.word	gHitMarker
.L681:
	mov	r2, sl
	cmp	r2, #0
	beq	.LCB7568
	bl	.L601	@far jump
.LCB7568:
	bl	.L793	@ far jump
.L609:
	mov	r3, r9
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r1, r1, r0
	ldr	r2, .L838
	ldrb	r3, [r6, #0x3]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB7591
	bl	.L793	@far jump
.LCB7591:
	sub	r0, r3, #0x7
	cmp	r0, #0x34
	bls	.LCB7596
	bl	.L601	@far jump
.LCB7596:
	lsl	r0, r0, #0x2
	ldr	r1, .L838+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L839:
	.align	2, 0
.L838:
	.word	sStatusFlagsForMoveEffects
	.word	.L796
	.align	2, 0
	.align	2, 0
.L796:
	.word	.L694
	.word	.L698
	.word	.L711
	.word	.L705
	.word	.L708
	.word	.L714
	.word	.L715
	.word	.L724
	.word	.L733
	.word	.L733
	.word	.L733
	.word	.L733
	.word	.L733
	.word	.L733
	.word	.L733
	.word	.L742
	.word	.L742
	.word	.L742
	.word	.L742
	.word	.L742
	.word	.L742
	.word	.L742
	.word	.L763
	.word	.L764
	.word	.L765
	.word	.L776
	.word	.L777
	.word	.L778
	.word	.L779
	.word	.L780
	.word	.L783
	.word	.L784
	.word	.L751
	.word	.L751
	.word	.L751
	.word	.L751
	.word	.L751
	.word	.L751
	.word	.L751
	.word	.L760
	.word	.L760
	.word	.L760
	.word	.L760
	.word	.L760
	.word	.L760
	.word	.L760
	.word	.L786
	.word	.L789
	.word	.L601
	.word	.L601
	.word	.L601
	.word	.L601
	.word	.L795
.L694:
	mov	r4, r9
	ldrb	r0, [r4]
	mov	r5, #0x58
	mov	r1, r0
	mul	r1, r1, r5
	mov	r2, r8
	add	r0, r1, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.LCB7629
	bl	.L793	@far jump
.LCB7629:
	mov	r4, r8
	add	r4, r4, #0x50
	add	r0, r1, r4
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB7637
	bl	.L793	@far jump
.LCB7637:
	bl	Random
	mov	r3, r9
	ldrb	r1, [r3]
	mov	r2, r1
	mul	r2, r2, r5
	add	r2, r2, r4
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r1, r1, #0x2
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L840
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L840+0x4
	ldr	r0, .L840+0x8
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	.L805	@ far jump
.L841:
	.align	2, 0
.L840:
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
.L698:
	mov	r0, r9
	ldrb	r2, [r0]
	mov	r6, #0x58
	mov	r0, r2
	mul	r0, r0, r6
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, #0x27
	bne	.L699	@cond_branch
	cmp	r4, #0x1
	beq	.L701	@cond_branch
	cmp	r5, #0x80
	beq	.LCB7696
	bl	.L793	@far jump
.LCB7696:
.L701:
	ldr	r0, .L842
	strb	r1, [r0]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, #0x27
	bl	RecordAbilityBattle
	ldr	r1, .L842+0x4
	ldr	r0, .L842+0x8
	str	r0, [r1]
	bl	.L601	@ far jump
.L843:
	.align	2, 0
.L842:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlinchPrevention
.L699:
	add	r0, r2, #0
	bl	GetBattlerTurnOrderNum
	ldr	r1, .L844
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bhi	.LCB7733
	bl	.L793	@far jump
.LCB7733:
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r2, r0
	mul	r2, r2, r6
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r1, .L844+0x4
	ldr	r0, .L844+0x8
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	orr	r1, r1, r0
	str	r1, [r2]
	bl	.L793	@ far jump
.L845:
	.align	2, 0
.L844:
	.word	gCurrentTurnActionNumber
	.word	sStatusFlagsForMoveEffects
	.word	gBattleCommunication
.L705:
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r5, #0x58
	mul	r0, r0, r5
	mov	r4, r8
	add	r4, r4, #0x50
	add	r2, r0, r4
	ldr	r1, [r2]
	mov	r0, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB7773
	bl	.L793	@far jump
.LCB7773:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r1, .L846
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L846+0x4
	ldrh	r1, [r1]
	strh	r1, [r0]
	bl	Random
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r2, r1
	mul	r2, r2, r5
	add	r2, r2, r4
	mov	r1, #0x3
	and	r1, r1, r0
	add	r1, r1, #0x2
	lsl	r1, r1, #0x4
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L846+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L846+0xc
	ldr	r0, .L846+0x10
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	.L805	@ far jump
.L847:
	.align	2, 0
.L846:
	.word	gLockedMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
.L708:
	ldr	r5, .L848
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L709	@cond_branch
	ldr	r4, .L848+0x4
	ldrh	r3, [r4]
	ldr	r2, .L848+0x8
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r3, r0
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r3, r0
	bls	.L709	@cond_branch
	ldr	r3, .L848+0xc
	add	r0, r3, #0
	strh	r0, [r4]
.L709:
	ldr	r4, .L848+0x10
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L848+0x14
	ldr	r0, .L848+0x18
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L805
.L849:
	.align	2, 0
.L848:
	.word	gBattlerAttacker
	.word	gPaydayMoney
	.word	gBattleMons
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
.L711:
	mov	r4, r9
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, r8
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7898
	b	.L793	@long jump
.LCB7898:
	bl	Random
	ldr	r4, .L850
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	add	r0, r0, #0x3
	strb	r0, [r4, #0x3]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	b	.L601
.L851:
	.align	2, 0
.L850:
	.word	gBattleCommunication
.L714:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L852
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L852+0x4
	ldrh	r1, [r1]
	strh	r1, [r0]
	ldr	r0, .L852+0x8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	b	.L793
.L853:
	.align	2, 0
.L852:
	.word	gLockedMoves
	.word	gCurrentMove
	.word	gProtectStructs
.L715:
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r6, #0x58
	mul	r0, r0, r6
	mov	r4, r8
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r5, [r0]
	mov	r0, #0xe0
	lsl	r0, r0, #0x8
	and	r5, r5, r0
	cmp	r5, #0
	beq	.LCB7979
	b	.L793	@long jump
.LCB7979:
	bl	Random
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r2, r1
	mul	r2, r2, r6
	add	r2, r2, r4
	mov	r1, #0x3
	and	r1, r1, r0
	add	r1, r1, #0x3
	lsl	r1, r1, #0xd
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r3, r9
	ldrb	r1, [r3]
	ldr	r2, .L854
	ldr	r0, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r6, .L854+0x4
	ldrh	r0, [r6]
	strb	r0, [r1, #0x4]
	ldrb	r1, [r3]
	ldr	r0, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r6]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	ldrb	r1, [r3]
	ldr	r0, [r2]
	add	r1, r1, r0
	ldr	r0, .L854+0x8
	ldrb	r0, [r0]
	strb	r0, [r1, #0x14]
	ldr	r4, .L854+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L854+0x10
	ldr	r2, .L854+0x14
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r4]
	strb	r5, [r2, #0x5]
	ldr	r3, .L854+0x18
	ldrh	r0, [r3]
	ldrh	r4, [r6]
	cmp	r0, r4
	bne	.LCB8047
	b	.L601	@long jump
.LCB8047:
	add	r1, r2, #0
	add	r2, r6, #0
.L720:
	ldrb	r0, [r1, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.LCB8063
	b	.L601	@long jump
.LCB8063:
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldrh	r4, [r2]
	cmp	r0, r4
	bne	.L720	@cond_branch
	b	.L601
.L855:
	.align	2, 0
.L854:
	.word	gBattleStruct
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
	.word	gTrappingMoves
.L724:
	ldr	r1, .L856
	ldr	r0, .L856+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	bge	.L725	@cond_branch
	add	r0, r0, #0x3
.L725:
	asr	r0, r0, #0x2
	str	r0, [r1]
	cmp	r0, #0
	bne	.L726	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L726:
	ldr	r4, .L856+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L856+0xc
	ldr	r0, .L856+0x10
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L805
.L857:
	.align	2, 0
.L856:
	.word	gBattleMoveDamage
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
.L733:
	ldrb	r1, [r6, #0x3]
	add	r1, r1, #0xf2
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x10
	add	r2, r7, #0
	mov	r3, #0x0
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB8145
	b	.L793	@long jump
.LCB8145:
	ldr	r2, .L858
	ldrb	r1, [r6, #0x3]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
	strb	r3, [r2, #0x11]
	ldr	r4, .L858+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L858+0x8
	b	.L805
.L859:
	.align	2, 0
.L858:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatUp
.L742:
	mov	r0, #0x70
	neg	r0, r0
	ldrb	r1, [r6, #0x3]
	add	r1, r1, #0xeb
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r7, #0
	mov	r3, #0x0
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB8187
	b	.L793	@long jump
.LCB8187:
	ldr	r2, .L860
	ldrb	r1, [r6, #0x3]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
	strb	r3, [r2, #0x11]
	ldr	r4, .L860+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L860+0x8
	b	.L805
.L861:
	.align	2, 0
.L860:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatDown
.L751:
	ldrb	r1, [r6, #0x3]
	add	r1, r1, #0xda
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x20
	add	r2, r7, #0
	mov	r3, #0x0
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB8227
	b	.L793	@long jump
.LCB8227:
	ldr	r2, .L862
	ldrb	r1, [r6, #0x3]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
	strb	r3, [r2, #0x11]
	ldr	r4, .L862+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L862+0x8
	b	.L805
.L863:
	.align	2, 0
.L862:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatUp
.L760:
	mov	r0, #0x60
	neg	r0, r0
	ldrb	r1, [r6, #0x3]
	add	r1, r1, #0xd3
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r7, #0
	mov	r3, #0x0
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB8269
	b	.L793	@long jump
.LCB8269:
	ldr	r2, .L864
	ldrb	r1, [r6, #0x3]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
	strb	r3, [r2, #0x11]
	ldr	r4, .L864+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L864+0x8
	b	.L805
.L865:
	.align	2, 0
.L864:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatDown
.L763:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L866
	mov	r3, r9
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x19]
	ldr	r1, .L866+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L866+0x8
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L793
.L867:
	.align	2, 0
.L866:
	.word	gDisableStructs
	.word	gLockedMoves
	.word	gCurrentMove
.L764:
	ldr	r0, .L868
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x10
.L806:
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L793
.L869:
	.align	2, 0
.L868:
	.word	gBattlerAttacker
.L765:
	ldr	r5, .L870
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8366
	b	.L793	@long jump
.LCB8366:
	ldr	r4, .L870+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L767	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L870+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L769	@cond_branch
	ldr	r0, .L870+0xc
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.LCB8397
	b	.L793	@long jump
.LCB8397:
.L767:
	ldr	r0, .L870
	ldr	r0, [r0]
	ldr	r1, .L870+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L769	@cond_branch
	ldr	r0, .L870+0xc
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L769	@cond_branch
	ldr	r0, .L870+0x10
	add	r0, r0, #0x29
	add	r0, r6, r0
	ldrb	r1, [r0]
	ldr	r3, .L870+0x14
	ldr	r2, .L870+0x18
	ldr	r0, .L870+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB8432
	b	.L793	@long jump
.LCB8432:
.L769:
	ldr	r2, .L870+0x1c
	ldr	r1, .L870+0x20
	ldrb	r0, [r1]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x2e]
	add	r7, r1, #0
	mov	r8, r2
	cmp	r0, #0
	beq	.L771	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x3c
	bne	.L771	@cond_branch
	ldr	r1, .L870+0x24
	ldr	r0, .L870+0x28
	str	r0, [r1]
	ldr	r1, .L870+0x2c
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	b	.L601
.L871:
	.align	2, 0
.L870:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	0x902
	.word	gTrainerBattleOpponent_A
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StickyHoldActivates
	.word	gLastUsedAbility
.L771:
	ldr	r4, .L872
	mov	sl, r4
	ldrb	r2, [r4]
	mov	r0, #0x58
	mov	r9, r0
	mov	r0, r9
	mul	r0, r0, r2
	add	r0, r0, r8
	ldrh	r4, [r0, #0x2e]
	cmp	r4, #0
	beq	.LCB8503
	b	.L793	@long jump
.LCB8503:
	ldrb	r0, [r7]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	ldrh	r3, [r0, #0x2e]
	add	r1, r3, #0
	cmp	r1, #0xaf
	bne	.LCB8513
	b	.L793	@long jump
.LCB8513:
	add	r0, r3, #0
	sub	r0, r0, #0x79
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xb
	bhi	.LCB8519
	b	.L793	@long jump
.LCB8519:
	cmp	r1, #0
	bne	.LCB8521
	b	.L793	@long jump
.LCB8521:
	ldr	r5, .L872+0x4
	lsl	r0, r2, #0x1
	add	r0, r0, #0xd0
	ldr	r1, [r5]
	add	r1, r1, r0
	ldr	r2, .L872+0x8
	strh	r3, [r1]
	strh	r3, [r2]
	ldrb	r0, [r7]
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r8
	mov	r6, #0x0
	strh	r4, [r0, #0x2e]
	ldr	r4, .L872+0xc
	mov	r1, sl
	ldrb	r0, [r1]
	strb	r0, [r4]
	str	r2, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	mov	r2, sl
	ldrb	r0, [r2]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r7]
	strb	r0, [r4]
	ldrb	r0, [r7]
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	mov	r1, r8
	add	r1, r1, #0x2e
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r4, .L872+0x10
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L872+0x14
	str	r0, [r4]
	ldrb	r0, [r7]
	ldr	r1, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc8
	strb	r6, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc9
	strb	r6, [r0]
	b	.L601
.L873:
	.align	2, 0
.L872:
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gLastUsedItem
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ItemSteal
.L776:
	ldr	r3, .L874
	ldrb	r1, [r3]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L874+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L874+0x8
	ldrb	r1, [r1]
	strb	r1, [r0, #0x14]
	b	.L793
.L875:
	.align	2, 0
.L874:
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattlerAttacker
.L777:
	ldr	r0, .L876
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	b	.L806
.L877:
	.align	2, 0
.L876:
	.word	gBattlerTarget
.L778:
	ldr	r4, .L878
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L878+0x4
	b	.L805
.L879:
	.align	2, 0
.L878:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AllStatsUp
.L779:
	ldr	r4, .L880
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L880+0x4
	b	.L805
.L881:
	.align	2, 0
.L880:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RapidSpinAway
.L780:
	ldr	r6, .L882
	ldrb	r0, [r6]
	mov	r2, #0x58
	mul	r0, r0, r2
	mov	r1, r8
	add	r1, r1, #0x4c
	add	r5, r0, r1
	ldr	r4, [r5]
	mov	r0, #0x40
	and	r0, r0, r4
	cmp	r0, #0
	bne	.LCB8700
	b	.L793	@long jump
.LCB8700:
	mov	r0, #0x41
	neg	r0, r0
	and	r4, r4, r0
	str	r4, [r5]
	ldr	r4, .L882+0x4
	ldrb	r0, [r6]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r4, .L882+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L882+0xc
	b	.L805
.L883:
	.align	2, 0
.L882:
	.word	gBattlerTarget
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetPRLZHeal
.L783:
	ldr	r4, .L884
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L884+0x4
	b	.L805
.L885:
	.align	2, 0
.L884:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AtkDefDown
.L784:
	ldr	r4, .L886
	ldr	r0, .L886+0x4
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L785	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L785:
	ldr	r4, .L886+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L886+0xc
	ldr	r0, .L886+0x10
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L805
.L887:
	.align	2, 0
.L886:
	.word	gBattleMoveDamage
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
.L786:
	mov	r4, r9
	ldrb	r0, [r4]
	mov	r5, #0x58
	mul	r0, r0, r5
	mov	r4, r8
	add	r4, r4, #0x50
	add	r2, r0, r4
	ldr	r1, [r2]
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8807
	b	.L793	@long jump
.LCB8807:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r1, .L888
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L888+0x4
	ldrh	r1, [r1]
	strh	r1, [r0]
	bl	Random
	mov	r3, r9
	ldrb	r1, [r3]
	mov	r2, r1
	mul	r2, r2, r5
	add	r2, r2, r4
	mov	r1, #0x1
	and	r1, r1, r0
	add	r1, r1, #0x2
	lsl	r1, r1, #0xa
	ldr	r0, [r2]
.L804:
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L601
.L889:
	.align	2, 0
.L888:
	.word	gLockedMoves
	.word	gCurrentMove
.L789:
	mov	r5, r9
	ldrb	r3, [r5]
	mov	r4, #0x58
	mov	r0, r3
	mul	r0, r0, r4
	mov	r2, r8
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r2, [r0]
	cmp	r2, #0x3c
	bne	.L790	@cond_branch
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0
	beq	.L793	@cond_branch
	ldr	r0, .L890
	strb	r2, [r0]
	ldr	r1, .L890+0x4
	ldr	r0, .L890+0x8
	str	r0, [r1]
	ldrb	r0, [r5]
	mov	r1, #0x3c
	bl	RecordAbilityBattle
	b	.L601
.L891:
	.align	2, 0
.L890:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StickyHoldActivates
.L790:
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0
	beq	.L793	@cond_branch
	add	r0, r3, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L892
	mov	r3, r9
	ldrb	r0, [r3]
	mul	r0, r0, r4
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
	ldrb	r0, [r3]
	mul	r0, r0, r4
	add	r0, r0, r8
	mov	r5, #0x0
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldr	r2, .L892+0x4
	add	r2, r2, #0x29
	add	r2, r6, r2
	ldr	r3, .L892+0x8
	ldr	r1, .L892+0xc
	mov	r4, r9
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r4, .L892+0x10
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L892+0x14
	str	r0, [r4]
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r2, .L892+0x18
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc8
	strb	r5, [r0]
	mov	r3, r9
	ldrb	r0, [r3]
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc9
	strb	r5, [r0]
	b	.L601
.L893:
	.align	2, 0
.L892:
	.word	gLastUsedItem
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
	.word	BattleScript_KnockedOff
	.word	gBattleStruct
.L793:
	ldr	r1, .L894
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	b	.L601
.L895:
	.align	2, 0
.L894:
	.word	gBattlescriptCurrInstr
.L795:
	ldr	r4, .L896
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L896+0x4
.L805:
	str	r0, [r4]
.L601:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L897:
	.align	2, 0
.L896:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SAtkDown2
.Lfe34:
	.size	 SetMoveEffect,.Lfe34-SetMoveEffect
	.align	2, 0
	.type	 Cmd_seteffectwithchance,function
	.thumb_func
Cmd_seteffectwithchance:
	push	{r4, lr}
	ldr	r2, .L908
	ldr	r0, .L908+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x20
	bne	.L899	@cond_branch
	ldr	r2, .L908+0x8
	ldr	r0, .L908+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	lsl	r4, r0, #0x1
	b	.L900
.L909:
	.align	2, 0
.L908:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
.L899:
	ldr	r2, .L910
	ldr	r0, .L910+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0, #0x5]
.L900:
	ldr	r3, .L910+0x8
	ldrb	r2, [r3, #0x3]
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L901	@cond_branch
	ldr	r0, .L910+0xc
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L901	@cond_branch
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r3, #0x3]
	b	.L907
.L911:
	.align	2, 0
.L910:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleCommunication
	.word	gMoveResultFlags
.L901:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r4
	bhi	.L903	@cond_branch
	ldr	r0, .L912
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0
	beq	.L903	@cond_branch
	ldr	r0, .L912+0x4
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L903	@cond_branch
	cmp	r4, #0x63
	bls	.L904	@cond_branch
.L907:
	mov	r0, #0x0
	mov	r1, #0x80
	bl	SetMoveEffect
	b	.L902
.L913:
	.align	2, 0
.L912:
	.word	gBattleCommunication
	.word	gMoveResultFlags
.L904:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	b	.L902
.L903:
	ldr	r1, .L914
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L902:
	ldr	r0, .L914+0x4
	mov	r1, #0x0
	strb	r1, [r0, #0x3]
	ldr	r0, .L914+0x8
	strb	r1, [r0, #0x16]
	pop	{r4}
	pop	{r0}
	bx	r0
.L915:
	.align	2, 0
.L914:
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gBattleScripting
.Lfe35:
	.size	 Cmd_seteffectwithchance,.Lfe35-Cmd_seteffectwithchance
	.align	2, 0
	.type	 Cmd_seteffectprimary,function
	.thumb_func
Cmd_seteffectprimary:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	bl	SetMoveEffect
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 Cmd_seteffectprimary,.Lfe36-Cmd_seteffectprimary
	.align	2, 0
	.type	 Cmd_seteffectsecondary,function
	.thumb_func
Cmd_seteffectsecondary:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 Cmd_seteffectsecondary,.Lfe37-Cmd_seteffectsecondary
	.align	2, 0
	.type	 Cmd_clearstatusfromeffect,function
	.thumb_func
Cmd_clearstatusfromeffect:
	push	{lr}
	ldr	r0, .L922
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r2, .L922+0x4
	strb	r0, [r2]
	ldr	r3, .L922+0x8
	ldrb	r0, [r3, #0x3]
	cmp	r0, #0x6
	bhi	.L919	@cond_branch
	ldr	r1, .L922+0xc
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x4c
	b	.L921
.L923:
	.align	2, 0
.L922:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleCommunication
	.word	gBattleMons
.L919:
	ldr	r1, .L924
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
.L921:
	add	r2, r2, r1
	ldr	r1, .L924+0x4
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L924+0x8
	mov	r2, #0x0
	strb	r2, [r0, #0x3]
	ldr	r1, .L924+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	ldr	r0, .L924+0x10
	strb	r2, [r0, #0x16]
	pop	{r0}
	bx	r0
.L925:
	.align	2, 0
.L924:
	.word	gBattleMons
	.word	sStatusFlagsForMoveEffects
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
.Lfe38:
	.size	 Cmd_clearstatusfromeffect,.Lfe38-Cmd_clearstatusfromeffect
	.align	2, 0
	.type	 Cmd_tryfaintmon,function
	.thumb_func
Cmd_tryfaintmon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L942
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x2]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L927	@cond_branch
	ldrb	r0, [r2, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L942+0x4
	strb	r0, [r5]
	ldr	r2, .L942+0x8
	ldr	r1, .L942+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9288
	b	.L933	@long jump
.LCB9288:
	ldr	r1, [r6]
	ldrb	r4, [r1, #0x3]
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	bl	BattleScriptPop
	str	r4, [r6]
	ldrb	r0, [r5]
	bl	GetBattlerSide
	ldr	r1, .L942+0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r2, [r0]
	ldr	r1, .L942+0x14
	and	r1, r1, r2
	strh	r1, [r0]
	b	.L930
.L943:
	.align	2, 0
.L942:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gHitMarker
	.word	gBitTable
	.word	gSideStatuses
	.word	0xfdff
.L927:
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x1
	bne	.L931	@cond_branch
	ldr	r1, .L944
	ldr	r0, .L944+0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L944+0x8
	ldrb	r0, [r0]
	mov	r9, r0
	ldr	r4, .L944+0xc
	b	.L941
.L945:
	.align	2, 0
.L944:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	BattleScript_FaintAttacker
.L931:
	ldr	r1, .L946
	ldr	r0, .L946+0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L946+0x8
	ldrb	r0, [r0]
	mov	r9, r0
	ldr	r4, .L946+0xc
.L941:
	mov	r8, r1
	ldr	r0, .L946+0x10
	ldrb	r1, [r0]
	ldr	r2, .L946+0x14
	mov	r7, r8
	ldrb	r3, [r7]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r2, [r0]
	and	r1, r1, r2
	cmp	r1, #0
	beq	.LCB9380
	b	.L933	@long jump
.LCB9380:
	ldr	r1, .L946+0x18
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.LCB9389
	b	.L933	@long jump
.LCB9389:
	ldr	r5, .L946+0x1c
	lsl	r1, r2, #0x1c
	ldr	r0, [r5]
	orr	r0, r0, r1
	str	r0, [r5]
	ldr	r0, [r6]
	add	r0, r0, #0x7
	bl	BattleScriptPush
	str	r4, [r6]
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L934	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [r5]
	ldr	r1, .L946+0x20
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L935	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L935:
	ldrb	r0, [r7]
	bl	AdjustFriendshipOnBattleFaint
	b	.L936
.L947:
	.align	2, 0
.L946:
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	BattleScript_FaintTarget
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gHitMarker
	.word	gBattleResults
.L934:
	ldr	r4, .L948
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0xfe
	bhi	.L937	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r4, #0x1]
.L937:
	ldr	r1, .L948+0x4
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L948+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	strh	r0, [r4, #0x20]
	ldr	r0, .L948+0xc
	ldr	r0, [r0]
	mov	r3, #0xc1
	lsl	r3, r3, #0x1
	add	r1, r0, r3
	ldr	r0, .L948+0x10
	ldrb	r0, [r0]
	strb	r0, [r1]
.L936:
	ldr	r2, .L948+0x14
	ldr	r1, [r2]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L938	@cond_branch
	ldr	r6, .L948+0x18
	ldr	r0, .L948+0x10
	ldrb	r0, [r0]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L938	@cond_branch
	mov	r0, #0x41
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r4, .L948+0x1c
	ldr	r0, [r4]
	bl	BattleScriptPush
	ldr	r1, .L948+0x20
	mov	r0, r9
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	str	r0, [r1]
	ldr	r0, .L948+0x24
	str	r0, [r4]
.L938:
	ldr	r1, .L948+0x28
	ldr	r6, .L948+0x2c
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9524
	b	.L930	@long jump
.LCB9524:
	ldr	r0, .L948+0x14
	ldr	r5, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r5, r5, r0
	cmp	r5, #0
	beq	.LCB9531
	b	.L930	@long jump
.LCB9531:
	ldr	r0, .L948+0x10
	mov	r8, r0
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L930	@cond_branch
	ldr	r1, .L948+0x18
	mov	r9, r1
	mov	r2, r8
	ldrb	r1, [r2]
	mov	r7, #0x58
	mov	r2, r1
	mul	r2, r2, r7
	mov	r3, r9
	add	r0, r2, r3
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L930	@cond_branch
	ldr	r0, .L948+0x30
	ldrh	r0, [r0]
	cmp	r0, #0xa5
	beq	.L930	@cond_branch
	ldr	r0, .L948+0xc
	ldr	r0, [r0]
	add	r0, r1, r0
	add	r0, r0, #0x80
	ldrb	r4, [r0]
	add	r0, r4, r2
	mov	r6, r9
	add	r6, r6, #0x24
	add	r0, r0, r6
	strb	r5, [r0]
	ldr	r5, .L948+0x1c
	ldr	r0, [r5]
	bl	BattleScriptPush
	ldr	r0, .L948+0x34
	str	r0, [r5]
	ldr	r5, .L948+0x38
	mov	r1, r8
	ldrb	r0, [r1]
	strb	r0, [r5]
	add	r1, r4, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	add	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L948+0x3c
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	lsl	r4, r4, #0x1
	mov	r2, r8
	ldrb	r0, [r2]
	mul	r0, r0, r7
	add	r0, r4, r0
	mov	r2, r9
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r3, r8
	ldrb	r0, [r3]
	mul	r0, r0, r7
	add	r4, r4, r0
	add	r4, r4, r2
	ldrh	r0, [r4]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	b	.L930
.L949:
	.align	2, 0
.L948:
	.word	gBattleResults
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	gBattleMoveDamage
	.word	BattleScript_DestinyBondTakesLife
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gCurrentMove
	.word	BattleScript_GrudgeTakesPp
	.word	gActiveBattler
	.word	gBattleTextBuff1
.L933:
	ldr	r0, [r6]
	add	r0, r0, #0x7
	str	r0, [r6]
.L930:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 Cmd_tryfaintmon,.Lfe39-Cmd_tryfaintmon
	.align	2, 0
	.type	 Cmd_dofaintanimation,function
	.thumb_func
Cmd_dofaintanimation:
	push	{r4, r5, lr}
	ldr	r0, .L952
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L951	@cond_branch
	ldr	r5, .L952+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L952+0x8
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitFaintAnimation
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L951:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L953:
	.align	2, 0
.L952:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe40:
	.size	 Cmd_dofaintanimation,.Lfe40-Cmd_dofaintanimation
	.align	2, 0
	.type	 Cmd_cleareffectsonfaint,function
	.thumb_func
Cmd_cleareffectsonfaint:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L956
	ldr	r6, [r0]
	cmp	r6, #0
	bne	.L955	@cond_branch
	ldr	r5, .L956+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L956+0x8
	strb	r0, [r4]
	ldr	r1, .L956+0xc
	ldrb	r0, [r4]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	str	r6, [r0]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	bl	FaintClearSetData
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L955:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L957:
	.align	2, 0
.L956:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
.Lfe41:
	.size	 Cmd_cleareffectsonfaint,.Lfe41-Cmd_cleareffectsonfaint
	.align	2, 0
	.type	 Cmd_jumpifstatus,function
	.thumb_func
Cmd_jumpifstatus:
	push	{r4, r5, lr}
	ldr	r5, .L961
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	add	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	add	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	add	r4, r4, r1
	ldrb	r3, [r2, #0x6]
	ldrb	r1, [r2, #0x7]
	lsl	r1, r1, #0x8
	add	r3, r3, r1
	ldrb	r1, [r2, #0x8]
	lsl	r1, r1, #0x10
	add	r3, r3, r1
	ldrb	r1, [r2, #0x9]
	lsl	r1, r1, #0x18
	add	r3, r3, r1
	ldr	r2, .L961+0x4
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L959	@cond_branch
	add	r0, r1, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L959	@cond_branch
	str	r3, [r5]
	b	.L960
.L962:
	.align	2, 0
.L961:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L959:
	ldr	r1, .L963
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L960:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L964:
	.align	2, 0
.L963:
	.word	gBattlescriptCurrInstr
.Lfe42:
	.size	 Cmd_jumpifstatus,.Lfe42-Cmd_jumpifstatus
	.align	2, 0
	.type	 Cmd_jumpifstatus2,function
	.thumb_func
Cmd_jumpifstatus2:
	push	{r4, r5, lr}
	ldr	r5, .L968
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	add	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	add	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	add	r4, r4, r1
	ldrb	r3, [r2, #0x6]
	ldrb	r1, [r2, #0x7]
	lsl	r1, r1, #0x8
	add	r3, r3, r1
	ldrb	r1, [r2, #0x8]
	lsl	r1, r1, #0x10
	add	r3, r3, r1
	ldrb	r1, [r2, #0x9]
	lsl	r1, r1, #0x18
	add	r3, r3, r1
	ldr	r2, .L968+0x4
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L966	@cond_branch
	add	r0, r1, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L966	@cond_branch
	str	r3, [r5]
	b	.L967
.L969:
	.align	2, 0
.L968:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L966:
	ldr	r1, .L970
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L967:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L971:
	.align	2, 0
.L970:
	.word	gBattlescriptCurrInstr
.Lfe43:
	.size	 Cmd_jumpifstatus2,.Lfe43-Cmd_jumpifstatus2
	.align	2, 0
	.type	 Cmd_jumpifability,function
	.thumb_func
Cmd_jumpifability:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r6, .L984
	ldr	r2, [r6]
	ldrb	r5, [r2, #0x2]
	mov	r8, r5
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	add	r7, r1, r0
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x8
	bne	.L973	@cond_branch
	ldr	r0, .L984+0x4
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xd
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L981	@cond_branch
	ldr	r1, .L984+0x8
	strb	r5, [r1]
	str	r7, [r6]
	sub	r4, r4, #0x1
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	b	.L983
.L985:
	.align	2, 0
.L984:
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gLastUsedAbility
.L973:
	cmp	r0, #0x9
	bne	.L977	@cond_branch
	ldr	r0, .L986
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xc
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L981	@cond_branch
	ldr	r1, .L986+0x4
	strb	r5, [r1]
	str	r7, [r6]
	sub	r4, r4, #0x1
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	b	.L983
.L987:
	.align	2, 0
.L986:
	.word	gBattlerAttacker
	.word	gLastUsedAbility
.L977:
	ldrb	r0, [r2, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L988
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, r8
	bne	.L981	@cond_branch
	ldr	r0, .L988+0x4
	strb	r1, [r0]
	str	r7, [r6]
	ldrb	r1, [r0]
	add	r0, r4, #0
.L983:
	bl	RecordAbilityBattle
	ldr	r0, .L988+0x8
	strb	r4, [r0, #0x15]
	b	.L976
.L989:
	.align	2, 0
.L988:
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gBattleScripting
.L981:
	ldr	r0, [r6]
	add	r0, r0, #0x7
	str	r0, [r6]
.L976:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 Cmd_jumpifability,.Lfe44-Cmd_jumpifability
	.align	2, 0
	.type	 Cmd_jumpifsideaffecting,function
	.thumb_func
Cmd_jumpifsideaffecting:
	push	{r4, r5, r6, lr}
	ldr	r0, .L996
	ldr	r0, [r0]
	ldrb	r4, [r0, #0x1]
	cmp	r4, #0x1
	bne	.L991	@cond_branch
	ldr	r0, .L996+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	b	.L995
.L997:
	.align	2, 0
.L996:
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
.L991:
	ldr	r0, .L998
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r4, #0x1
.L995:
	and	r4, r4, r0
	ldr	r6, .L998+0x4
	ldr	r3, [r6]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r1, [r3, #0x4]
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x18
	add	r5, r1, r0
	ldr	r1, .L998+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L993	@cond_branch
	str	r5, [r6]
	b	.L994
.L999:
	.align	2, 0
.L998:
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	gSideStatuses
.L993:
	add	r0, r3, #0
	add	r0, r0, #0x8
	str	r0, [r6]
.L994:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 Cmd_jumpifsideaffecting,.Lfe45-Cmd_jumpifsideaffecting
	.align	2, 0
	.type	 Cmd_jumpifstat,function
	.thumb_func
Cmd_jumpifstat:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r4, .L1019
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1019+0x4
	ldr	r3, [r4]
	mov	r1, #0x58
	mul	r0, r0, r1
	ldrb	r1, [r3, #0x3]
	add	r0, r0, r1
	add	r2, r2, #0x18
	add	r0, r0, r2
	ldrb	r2, [r0]
	ldrb	r0, [r3, #0x2]
	cmp	r0, #0x5
	bhi	.L1001	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1019+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1020:
	.align	2, 0
.L1019:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	.L1014
	.align	2, 0
	.align	2, 0
.L1014:
	.word	.L1002
	.word	.L1004
	.word	.L1006
	.word	.L1008
	.word	.L1010
	.word	.L1012
.L1002:
	ldr	r0, .L1021
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	bne	.L1001	@cond_branch
	b	.L1018
.L1022:
	.align	2, 0
.L1021:
	.word	gBattlescriptCurrInstr
.L1004:
	ldr	r0, .L1023
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	beq	.L1001	@cond_branch
	b	.L1018
.L1024:
	.align	2, 0
.L1023:
	.word	gBattlescriptCurrInstr
.L1006:
	ldr	r0, .L1025
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	bls	.L1001	@cond_branch
	b	.L1018
.L1026:
	.align	2, 0
.L1025:
	.word	gBattlescriptCurrInstr
.L1008:
	ldr	r0, .L1027
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	bcs	.L1001	@cond_branch
	b	.L1018
.L1028:
	.align	2, 0
.L1027:
	.word	gBattlescriptCurrInstr
.L1010:
	ldr	r0, .L1029
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1001	@cond_branch
	b	.L1018
.L1030:
	.align	2, 0
.L1029:
	.word	gBattlescriptCurrInstr
.L1012:
	ldr	r0, .L1031
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L1001	@cond_branch
.L1018:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L1001:
	cmp	r5, #0
	beq	.L1016	@cond_branch
	ldr	r3, .L1031
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	b	.L1017
.L1032:
	.align	2, 0
.L1031:
	.word	gBattlescriptCurrInstr
.L1016:
	ldr	r1, .L1033
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
.L1017:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1034:
	.align	2, 0
.L1033:
	.word	gBattlescriptCurrInstr
.Lfe46:
	.size	 Cmd_jumpifstat,.Lfe46-Cmd_jumpifstat
	.align	2, 0
	.type	 Cmd_jumpifstatus3condition,function
	.thumb_func
Cmd_jumpifstatus3condition:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1043
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L1043+0x4
	strb	r0, [r5]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	add	r6, r1, r0
	ldrb	r1, [r2, #0x7]
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0xa]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r0, [r2, #0x6]
	cmp	r0, #0
	beq	.L1036	@cond_branch
	ldr	r0, .L1043+0x8
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L1040	@cond_branch
	b	.L1042
.L1044:
	.align	2, 0
.L1043:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
.L1036:
	ldr	r0, .L1045
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L1040	@cond_branch
.L1042:
	str	r3, [r4]
	b	.L1039
.L1046:
	.align	2, 0
.L1045:
	.word	gStatuses3
.L1040:
	add	r0, r2, #0
	add	r0, r0, #0xb
	str	r0, [r4]
.L1039:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 Cmd_jumpifstatus3condition,.Lfe47-Cmd_jumpifstatus3condition
	.align	2, 0
	.type	 Cmd_jumpiftype,function
	.thumb_func
Cmd_jumpiftype:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1051
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [r4]
	ldrb	r5, [r3, #0x2]
	ldrb	r2, [r3, #0x3]
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x8
	add	r2, r2, r1
	ldrb	r1, [r3, #0x5]
	lsl	r1, r1, #0x10
	add	r2, r2, r1
	ldrb	r1, [r3, #0x6]
	lsl	r1, r1, #0x18
	add	r6, r2, r1
	ldr	r2, .L1051+0x4
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r5
	beq	.L1049	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r5
	bne	.L1048	@cond_branch
.L1049:
	str	r6, [r4]
	b	.L1050
.L1052:
	.align	2, 0
.L1051:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L1048:
	add	r0, r3, #0x7
	str	r0, [r4]
.L1050:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 Cmd_jumpiftype,.Lfe48-Cmd_jumpiftype
	.align	2, 0
	.type	 Cmd_getexp,function
	.thumb_func
Cmd_getexp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	ldr	r0, .L1121
	ldr	r0, [r0]
	add	r0, r0, #0x50
	mov	r9, r0
	ldr	r0, .L1121+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L1121+0x8
	strb	r0, [r1]
	ldr	r2, .L1121+0xc
	mov	r1, #0x2
	and	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r0, .L1121+0x10
	ldrb	r0, [r0, #0x1c]
	cmp	r0, #0x6
	bls	.LCB10535
	bl	.L1054	@far jump
.LCB10535:
	lsl	r0, r0, #0x2
	ldr	r1, .L1121+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1122:
	.align	2, 0
.L1121:
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	gBattlerFainted
	.word	gSentPokesToOpponent
	.word	gBattleScripting
	.word	.L1116
	.align	2, 0
	.align	2, 0
.L1116:
	.word	.L1055
	.word	.L1059
	.word	.L1076
	.word	.L1099
	.word	.L1102
	.word	.L1109
	.word	.L1114
.L1055:
	ldr	r4, .L1123
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB10567
	bl	.L1112	@far jump
.LCB10567:
	ldr	r0, .L1123+0x4
	ldr	r0, [r0]
	ldr	r1, .L1123+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB10573
	bl	.L1112	@far jump
.LCB10573:
	ldr	r1, .L1123+0xc
	ldrb	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1c]
	ldr	r0, .L1123+0x10
	ldr	r2, [r0]
	add	r2, r2, #0xdf
	ldr	r3, .L1123+0x14
	ldr	r1, .L1123+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	.L1054	@ far jump
.L1124:
	.align	2, 0
.L1123:
	.word	gBattlerFainted
	.word	gBattleTypeFlags
	.word	0x80982
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBitTable
	.word	gBattlerPartyIndexes
.L1059:
	mov	r5, #0x0
	mov	r7, #0x0
.L1063:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L1125
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1062	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1062	@cond_branch
	ldr	r0, .L1125+0x4
	lsl	r1, r7, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1066	@cond_branch
	add	r5, r5, #0x1
.L1066:
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L1067	@cond_branch
	ldr	r0, .L1125+0x8
	ldr	r0, [r0]
	ldr	r2, .L1125+0xc
	add	r0, r0, r2
	ldrb	r4, [r0]
	b	.L1068
.L1126:
	.align	2, 0
.L1125:
	.word	gPlayerParty
	.word	gBitTable
	.word	gSaveBlock1Ptr
	.word	0x312e
.L1067:
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L1068:
	cmp	r4, #0x19
	bne	.L1062	@cond_branch
	add	r6, r6, #0x1
.L1062:
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L1063	@cond_branch
	ldr	r3, .L1127
	ldr	r2, .L1127+0x4
	ldr	r0, .L1127+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r2, [r0, #0x9]
	add	r1, r1, #0x2a
	ldrb	r0, [r1]
	mul	r0, r0, r2
	mov	r1, #0x7
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r6, #0
	beq	.L1071	@cond_branch
	lsr	r4, r0, #0x11
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__divsi3
	mov	r1, r9
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1072	@cond_branch
	mov	r0, #0x1
	strh	r0, [r1]
.L1072:
	ldr	r5, .L1127+0xc
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__divsi3
	strh	r0, [r5]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1074	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5]
	b	.L1074
.L1128:
	.align	2, 0
.L1127:
	.word	gSpeciesInfo
	.word	gBattleMons
	.word	gBattlerFainted
	.word	gExpShareExp
.L1071:
	add	r0, r1, #0
	add	r1, r5, #0
	bl	__divsi3
	mov	r2, r9
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1075	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
.L1075:
	ldr	r0, .L1129
	strh	r6, [r0]
.L1074:
	ldr	r1, .L1129+0x4
	ldrb	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strb	r0, [r1, #0x1c]
	ldr	r1, .L1129+0x8
	ldr	r0, [r1]
	strb	r2, [r0, #0x10]
	ldr	r0, [r1]
	add	r0, r0, #0x53
	mov	r4, r8
	strb	r4, [r0]
.L1076:
	ldr	r0, .L1129+0xc
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB10789
	b	.L1054	@long jump
.LCB10789:
	ldr	r0, .L1129+0x8
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1129+0x10
	add	r0, r0, r1
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L1078	@cond_branch
	ldr	r0, .L1129+0x14
	ldr	r0, [r0]
	ldr	r1, .L1129+0x18
	add	r0, r0, r1
	ldrb	r4, [r0]
	b	.L1079
.L1130:
	.align	2, 0
.L1129:
	.word	gExpShareExp
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattleControllerExecFlags
	.word	gPlayerParty
	.word	gSaveBlock1Ptr
	.word	0x312e
.L1078:
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L1079:
	ldr	r5, .L1131
	cmp	r4, #0x19
	beq	.L1080	@cond_branch
	ldr	r0, [r5]
	add	r1, r0, #0
	add	r1, r1, #0x53
	ldrb	r0, [r1]
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L1080	@cond_branch
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L1131+0x4
	b	.L1118
.L1132:
	.align	2, 0
.L1131:
	.word	gBattleStruct
	.word	gBattleScripting
.L1080:
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1133
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x64
	bne	.L1082	@cond_branch
	ldr	r1, [r5]
	add	r1, r1, #0x53
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L1133+0x4
	mov	r2, #0x0
.L1118:
	mov	r0, #0x5
	strb	r0, [r1, #0x1c]
	ldr	r0, .L1133+0x8
	str	r2, [r0]
	b	.L1054
.L1134:
	.align	2, 0
.L1133:
	.word	gPlayerParty
	.word	gBattleScripting
	.word	gBattleMoveDamage
.L1082:
	ldr	r0, .L1135
	ldr	r0, [r0]
	ldr	r1, .L1135+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1084	@cond_branch
	ldr	r0, .L1135+0x8
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L1084	@cond_branch
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	bne	.L1084	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r0, .L1135+0xc
	bl	PlayBGM
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x12]
.L1084:
	ldr	r5, .L1135+0x10
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1135+0x14
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.LCB10942
	b	.L1085	@long jump
.LCB10942:
	ldr	r0, [r5]
	add	r0, r0, #0x53
	ldrb	r0, [r0]
	mov	r3, #0x1
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L1086	@cond_branch
	ldr	r1, .L1135+0x18
	mov	r2, r9
	ldrh	r0, [r2]
	str	r0, [r1]
	mov	r9, r1
	b	.L1087
.L1136:
	.align	2, 0
.L1135:
	.word	gBattleTypeFlags
	.word	0x10008
	.word	gBattleMons
	.word	0x137
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gBattleMoveDamage
.L1086:
	ldr	r0, .L1137
	str	r3, [r0]
	mov	r9, r0
.L1087:
	cmp	r4, #0x19
	bne	.L1088	@cond_branch
	ldr	r0, .L1137+0x4
	ldrh	r1, [r0]
	mov	r2, r9
	ldr	r0, [r2]
	add	r0, r0, r1
	str	r0, [r2]
.L1088:
	cmp	r4, #0x28
	bne	.L1089	@cond_branch
	mov	r4, r9
	ldr	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
.L1089:
	ldr	r5, .L1137+0x8
	ldr	r0, [r5]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1090	@cond_branch
	ldr	r4, .L1137
	ldr	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
.L1090:
	ldr	r0, .L1137+0xc
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1137+0x10
	add	r0, r0, r1
	bl	IsTradedMon
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1091	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1091	@cond_branch
	ldr	r4, .L1137
	ldr	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	mov	r7, #0xa5
	lsl	r7, r7, #0x1
	mov	r9, r4
	b	.L1092
.L1138:
	.align	2, 0
.L1137:
	.word	gBattleMoveDamage
	.word	gExpShareExp
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	gPlayerParty
.L1091:
	ldr	r7, .L1139
	ldr	r0, .L1139+0x4
	mov	r9, r0
.L1092:
	ldr	r0, .L1139+0x8
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1093	@cond_branch
	ldr	r0, .L1139+0xc
	ldr	r1, .L1139+0x10
	ldr	r4, [r1]
	ldrh	r0, [r0, #0x4]
	add	r5, r1, #0
	ldr	r3, .L1139+0x14
	ldr	r2, .L1139+0x18
	ldrb	r1, [r4, #0x10]
	cmp	r0, r1
	bne	.L1094	@cond_branch
	ldrb	r1, [r2]
	ldr	r0, [r3, #0x8]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1094	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x8f
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L1098
.L1140:
	.align	2, 0
.L1139:
	.word	0x149
	.word	gBattleMoveDamage
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBitTable
	.word	gAbsentBattlerFlags
.L1094:
	ldrb	r2, [r2]
	ldr	r0, [r3]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L1096	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, #0x8f
	strb	r2, [r0]
	b	.L1098
.L1096:
	ldr	r0, [r5]
	add	r0, r0, #0x8f
	mov	r1, #0x2
	b	.L1119
.L1093:
	ldr	r0, .L1141
	ldr	r0, [r0]
	add	r0, r0, #0x8f
.L1119:
	strb	r1, [r0]
.L1098:
	ldr	r1, .L1141+0x4
	mov	r2, #0x0
	mov	ip, r2
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r5, #0x4
	strb	r5, [r1, #0x1]
	ldr	r6, .L1141
	ldr	r2, [r6]
	mov	r4, #0x8f
	add	r4, r4, r2
	mov	r8, r4
	ldrb	r0, [r4]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2, #0x10]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L1141+0x8
	strb	r3, [r1]
	mov	r0, ip
	strb	r0, [r1, #0x1]
	strb	r7, [r1, #0x2]
	mov	r4, #0xff
	lsl	r4, r4, #0x8
	and	r7, r7, r4
	asr	r0, r7, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x4]
	ldr	r1, .L1141+0xc
	strb	r3, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	strb	r5, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x3]
	mov	r0, r9
	ldr	r2, [r0]
	strb	r2, [r1, #0x4]
	add	r0, r2, #0
	and	r0, r0, r4
	asr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r2
	asr	r0, r0, #0x10
	strb	r0, [r1, #0x6]
	lsr	r2, r2, #0x18
	strb	r2, [r1, #0x7]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x8]
	mov	r2, r8
	ldrb	r1, [r2]
	mov	r0, #0xd
	bl	PrepareStringBattle
	ldr	r0, [r6]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1141+0x10
	add	r0, r0, r1
	ldr	r3, .L1141+0x14
	ldr	r1, .L1141+0x18
	ldrb	r2, [r1]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1]
	bl	MonGainEVs
.L1085:
	ldr	r0, .L1141
	ldr	r1, [r0]
	add	r1, r1, #0x53
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	b	.L1101
.L1142:
	.align	2, 0
.L1141:
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gBattleTextBuff3
	.word	gPlayerParty
	.word	gBattleMons
	.word	gBattlerFainted
.L1099:
	ldr	r0, .L1143
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.LCB11261
	b	.L1054	@long jump
.LCB11261:
	ldr	r1, .L1143+0x4
	ldr	r7, .L1143+0x8
	ldr	r0, [r7]
	add	r0, r0, #0x8f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	strb	r2, [r0]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L1143+0xc
	add	r0, r0, r5
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1101	@cond_branch
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x64
	beq	.L1101	@cond_branch
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3a
	bl	GetMonData
	ldr	r4, .L1143+0x10
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3b
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x2]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3c
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x4]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3d
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x6]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3e
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x8]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3f
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0xa]
	ldr	r4, .L1143+0x14
	ldr	r1, [r7]
	add	r0, r1, #0
	add	r0, r0, #0x8f
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrb	r1, [r1, #0x10]
	ldr	r0, .L1143+0x18
	ldrh	r2, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitExpUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1101:
	ldr	r1, .L1143+0x1c
	ldrb	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1c]
	b	.L1054
.L1144:
	.align	2, 0
.L1143:
	.word	gBattleControllerExecFlags
	.word	gBattleBufferB
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleMoveDamage
	.word	gBattleScripting
.L1102:
	ldr	r0, .L1145
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB11405
	b	.L1054	@long jump
.LCB11405:
	ldr	r1, .L1145+0x4
	ldr	r0, .L1145+0x8
	ldr	r4, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x8f
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r3, .L1145+0xc
	ldrb	r2, [r1]
	lsl	r1, r2, #0x9
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0x21
	beq	.LCB11422
	b	.L1104	@long jump
.LCB11422:
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0xb
	beq	.LCB11429
	b	.L1104	@long jump
.LCB11429:
	ldr	r0, .L1145+0x10
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1105	@cond_branch
	ldr	r0, .L1145+0x14
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrb	r4, [r4, #0x10]
	cmp	r0, r4
	bne	.L1105	@cond_branch
	add	r1, r0, #0
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1145+0x18
	add	r0, r0, r1
	add	r1, r2, #0
	bl	HandleLowHpMusicChange
.L1105:
	ldr	r1, .L1145+0x1c
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r6, .L1145+0x4
	ldrb	r0, [r6]
	strb	r0, [r1, #0x2]
	ldr	r4, .L1145+0x8
	mov	r9, r4
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x10]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r4, .L1145+0x20
	strb	r3, [r4]
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	mov	r0, #0x3
	strb	r0, [r4, #0x3]
	ldrb	r0, [r2, #0x10]
	mov	r1, #0x64
	mov	r8, r1
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	ldr	r7, .L1145+0x18
	add	r0, r0, r7
	mov	r1, #0x38
	bl	GetMonData
	strb	r0, [r4, #0x4]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r4, #0x5]
	bl	BattleScriptPushCursor
	ldr	r2, .L1145+0x24
	ldr	r1, .L1145+0x28
	mov	r4, r9
	ldr	r5, [r4]
	ldrb	r0, [r5, #0x10]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1145+0x2c
	ldr	r0, .L1145+0x30
	str	r0, [r1]
	ldr	r4, .L1145+0x34
	ldr	r2, .L1145+0xc
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x2
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r2, r2, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	str	r3, [r4]
	ldrb	r0, [r5, #0x10]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	mov	r1, #0x0
	bl	AdjustFriendship
	ldr	r1, .L1145+0x14
	mov	r2, r9
	ldr	r0, [r2]
	ldrb	r2, [r0, #0x10]
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L1106	@cond_branch
	ldr	r4, .L1145+0x38
	ldrh	r0, [r4, #0x28]
	cmp	r0, #0
	beq	.L1106	@cond_branch
	mov	r0, r8
	mul	r0, r0, r2
	add	r0, r0, r7
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r4, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r4, #0x28]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r4, #0x2c]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3b
	bl	GetMonData
	strh	r0, [r4, #0x2]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3c
	bl	GetMonData
	strh	r0, [r4, #0x4]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3d
	bl	GetMonData
	strh	r0, [r4, #0x6]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3d
	bl	GetMonData
	strh	r0, [r4, #0x6]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3e
	bl	GetMonData
	strh	r0, [r4, #0x8]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3f
	bl	GetMonData
	strh	r0, [r4, #0xa]
.L1106:
	ldr	r0, .L1145+0x14
	ldr	r7, .L1145+0x8
	ldr	r1, [r7]
	ldrb	r2, [r1, #0x10]
	ldrh	r0, [r0, #0x4]
	cmp	r0, r2
	beq	.LCB11666
	b	.L1120	@long jump
.LCB11666:
	ldr	r6, .L1145+0x38
	mov	r4, #0xd8
	add	r4, r4, r6
	mov	r8, r4
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1120	@cond_branch
	ldr	r0, .L1145+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1120	@cond_branch
	mov	r5, #0x64
	mov	r0, r2
	mul	r0, r0, r5
	ldr	r4, .L1145+0x18
	add	r0, r0, r4
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r6, #0
	add	r1, r1, #0xda
	strb	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r6, #0
	add	r1, r1, #0xdc
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3b
	bl	GetMonData
	add	r1, r6, #0
	add	r1, r1, #0xb2
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3c
	bl	GetMonData
	add	r1, r6, #0
	add	r1, r1, #0xb4
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3d
	bl	GetMonData
	mov	r2, #0xb6
	add	r2, r2, r6
	mov	r8, r2
	strh	r0, [r2]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3e
	bl	GetMonData
	add	r1, r6, #0
	add	r1, r1, #0xb8
	strh	r0, [r1]
	b	.L1120
.L1146:
	.align	2, 0
.L1145:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleBufferB
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gLeveledUpInBattle
	.word	gBitTable
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LevelUp
	.word	gBattleMoveDamage
	.word	gBattleMons
.L1104:
	ldr	r1, .L1147
	mov	r0, #0x0
	str	r0, [r1]
.L1120:
	ldr	r1, .L1147+0x4
	mov	r0, #0x5
	strb	r0, [r1, #0x1c]
	b	.L1054
.L1148:
	.align	2, 0
.L1147:
	.word	gBattleMoveDamage
	.word	gBattleScripting
.L1109:
	ldr	r0, .L1149
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L1110	@cond_branch
	ldr	r1, .L1149+0x4
	mov	r0, #0x3
	strb	r0, [r1, #0x1c]
	b	.L1054
.L1150:
	.align	2, 0
.L1149:
	.word	gBattleMoveDamage
	.word	gBattleScripting
.L1110:
	ldr	r2, .L1151
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x5
	bhi	.L1112	@cond_branch
	ldr	r1, .L1151+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x1c]
	b	.L1054
.L1152:
	.align	2, 0
.L1151:
	.word	gBattleStruct
	.word	gBattleScripting
.L1112:
	ldr	r1, .L1153
	mov	r0, #0x6
	strb	r0, [r1, #0x1c]
	b	.L1054
.L1154:
	.align	2, 0
.L1153:
	.word	gBattleScripting
.L1114:
	ldr	r0, .L1155
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L1054	@cond_branch
	ldr	r4, .L1155+0x4
	ldr	r2, .L1155+0x8
	ldrb	r0, [r2]
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r4
	mov	r3, #0x0
	strh	r5, [r0, #0x2e]
	ldrb	r0, [r2]
	mul	r0, r0, r1
	add	r0, r0, r4
	add	r0, r0, #0x20
	strb	r3, [r0]
	ldr	r1, .L1155+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1054:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1156:
	.align	2, 0
.L1155:
	.word	gBattleControllerExecFlags
	.word	gBattleMons
	.word	gBattlerFainted
	.word	gBattlescriptCurrInstr
.Lfe49:
	.size	 Cmd_getexp,.Lfe49-Cmd_getexp
	.align	2, 0
	.type	 Cmd_checkteamslost,function
	.thumb_func
Cmd_checkteamslost:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x0
	ldr	r0, .L1194
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB11912
	b	.L1157	@long jump
.LCB11912:
	mov	r5, #0x0
.L1162:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L1194+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1161	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1161	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L1161:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L1162	@cond_branch
	cmp	r6, #0
	bne	.L1165	@cond_branch
	ldr	r0, .L1194+0x8
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
.L1165:
	mov	r6, #0x0
	mov	r5, #0x0
.L1169:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L1194+0xc
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1168	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1168	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L1168:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L1169	@cond_branch
	ldr	r2, .L1194+0x8
	cmp	r6, #0
	bne	.L1172	@cond_branch
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L1172:
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L1173	@cond_branch
	ldr	r0, .L1194+0x10
	ldr	r1, [r0]
	mov	r2, #0x2
	and	r1, r1, r2
	mov	r8, r0
	cmp	r1, #0
	beq	.L1173	@cond_branch
	mov	r3, #0x0
	mov	r5, #0x0
	ldr	r0, .L1194+0x14
	ldrb	r1, [r0]
	mov	ip, r0
	ldr	r7, .L1194+0x18
	cmp	r3, r1
	bge	.L1175	@cond_branch
	ldr	r0, .L1194+0x1c
	mov	r6, #0x80
	lsl	r6, r6, #0x15
	ldr	r4, [r0]
	add	r2, r1, #0
	ldr	r1, .L1194+0x20
.L1177:
	add	r0, r6, #0
	lsl	r0, r0, r5
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1176	@cond_branch
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1176	@cond_branch
	add	r3, r3, #0x1
.L1176:
	add	r1, r1, #0x28
	add	r5, r5, #0x2
	cmp	r5, r2
	blt	.L1177	@cond_branch
.L1175:
	mov	r2, #0x0
	mov	r5, #0x1
	mov	r0, ip
	ldrb	r1, [r0]
	cmp	r5, r1
	bge	.L1181	@cond_branch
	ldr	r0, .L1194+0x1c
	mov	r4, #0x80
	lsl	r4, r4, #0x15
	mov	ip, r4
	ldr	r6, [r0]
	ldr	r0, .L1194+0x20
	add	r4, r1, #0
	add	r1, r0, #0
	add	r1, r1, #0x14
.L1183:
	mov	r0, ip
	lsl	r0, r0, r5
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L1182	@cond_branch
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1182	@cond_branch
	add	r2, r2, #0x1
.L1182:
	add	r1, r1, #0x28
	add	r5, r5, #0x2
	cmp	r5, r4
	blt	.L1183	@cond_branch
.L1181:
	mov	r1, r8
	ldr	r0, [r1]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1186	@cond_branch
	add	r0, r2, r3
	cmp	r0, #0x1
	bgt	.L1193	@cond_branch
	b	.L1190
.L1195:
	.align	2, 0
.L1194:
	.word	gBattleControllerExecFlags
	.word	gPlayerParty
	.word	gBattleOutcome
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gHitMarker
	.word	gSpecialStatuses
.L1186:
	cmp	r2, #0
	beq	.L1190	@cond_branch
	cmp	r3, #0
	beq	.L1190	@cond_branch
.L1193:
	ldr	r2, [r7]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r7]
	b	.L1157
.L1190:
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	b	.L1157
.L1173:
	ldr	r1, .L1196
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1157:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1197:
	.align	2, 0
.L1196:
	.word	gBattlescriptCurrInstr
.Lfe50:
	.size	 Cmd_checkteamslost,.Lfe50-Cmd_checkteamslost
	.align	2, 0
	.type	 MoveValuesCleanUp,function
	.thumb_func
MoveValuesCleanUp:
	ldr	r1, .L1199
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1199+0x4
	mov	r2, #0x0
	mov	r1, #0x1
	strb	r1, [r0, #0xe]
	ldr	r0, .L1199+0x8
	strb	r1, [r0]
	ldr	r0, .L1199+0xc
	strb	r2, [r0, #0x3]
	strb	r2, [r0, #0x6]
	ldr	r2, .L1199+0x10
	ldr	r0, [r2]
	sub	r1, r1, #0x42
	and	r0, r0, r1
	ldr	r1, .L1199+0x14
	and	r0, r0, r1
	str	r0, [r2]
	bx	lr
.L1200:
	.align	2, 0
.L1199:
	.word	gMoveResultFlags
	.word	gBattleScripting
	.word	gCritMultiplier
	.word	gBattleCommunication
	.word	gHitMarker
	.word	-0x4001
.Lfe51:
	.size	 MoveValuesCleanUp,.Lfe51-MoveValuesCleanUp
	.align	2, 0
	.type	 Cmd_movevaluescleanup,function
	.thumb_func
Cmd_movevaluescleanup:
	push	{lr}
	bl	MoveValuesCleanUp
	ldr	r1, .L1202
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1203:
	.align	2, 0
.L1202:
	.word	gBattlescriptCurrInstr
.Lfe52:
	.size	 Cmd_movevaluescleanup,.Lfe52-Cmd_movevaluescleanup
	.align	2, 0
	.type	 Cmd_setmultihit,function
	.thumb_func
Cmd_setmultihit:
	ldr	r3, .L1205
	ldr	r2, .L1205+0x4
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x1]
	strb	r1, [r3]
	add	r0, r0, #0x2
	str	r0, [r2]
	bx	lr
.L1206:
	.align	2, 0
.L1205:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.Lfe53:
	.size	 Cmd_setmultihit,.Lfe53-Cmd_setmultihit
	.align	2, 0
	.type	 Cmd_decrementmultihit,function
	.thumb_func
Cmd_decrementmultihit:
	push	{lr}
	ldr	r1, .L1210
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1208	@cond_branch
	ldr	r1, .L1210+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L1209
.L1211:
	.align	2, 0
.L1210:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.L1208:
	ldr	r3, .L1212
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
.L1209:
	pop	{r0}
	bx	r0
.L1213:
	.align	2, 0
.L1212:
	.word	gBattlescriptCurrInstr
.Lfe54:
	.size	 Cmd_decrementmultihit,.Lfe54-Cmd_decrementmultihit
	.align	2, 0
	.type	 Cmd_goto,function
	.thumb_func
Cmd_goto:
	ldr	r3, .L1215
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L1216:
	.align	2, 0
.L1215:
	.word	gBattlescriptCurrInstr
.Lfe55:
	.size	 Cmd_goto,.Lfe55-Cmd_goto
	.align	2, 0
	.type	 Cmd_jumpifbyte,function
	.thumb_func
Cmd_jumpifbyte:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1234
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r2, [r1, #0x7]
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xb
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L1218	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L1234+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1235:
	.align	2, 0
.L1234:
	.word	gBattlescriptCurrInstr
	.word	.L1231
	.align	2, 0
	.align	2, 0
.L1231:
	.word	.L1219
	.word	.L1221
	.word	.L1223
	.word	.L1225
	.word	.L1227
	.word	.L1229
.L1219:
	ldrb	r0, [r5]
	cmp	r0, r4
	bne	.L1218	@cond_branch
	b	.L1233
.L1221:
	ldrb	r0, [r5]
	cmp	r0, r4
	beq	.L1218	@cond_branch
	b	.L1233
.L1223:
	ldrb	r0, [r5]
	cmp	r0, r4
	bls	.L1218	@cond_branch
	b	.L1233
.L1225:
	ldrb	r0, [r5]
	cmp	r0, r4
	bcs	.L1218	@cond_branch
	b	.L1233
.L1227:
	ldrb	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L1218	@cond_branch
	b	.L1233
.L1229:
	ldrb	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L1218	@cond_branch
.L1233:
	str	r2, [r3]
.L1218:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 Cmd_jumpifbyte,.Lfe56-Cmd_jumpifbyte
	.align	2, 0
	.type	 Cmd_jumpifhalfword,function
	.thumb_func
Cmd_jumpifhalfword:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1253
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r2, [r1, #0x8]
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xc
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L1237	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L1253+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1254:
	.align	2, 0
.L1253:
	.word	gBattlescriptCurrInstr
	.word	.L1250
	.align	2, 0
	.align	2, 0
.L1250:
	.word	.L1238
	.word	.L1240
	.word	.L1242
	.word	.L1244
	.word	.L1246
	.word	.L1248
.L1238:
	ldrh	r0, [r5]
	cmp	r0, r4
	bne	.L1237	@cond_branch
	b	.L1252
.L1240:
	ldrh	r0, [r5]
	cmp	r0, r4
	beq	.L1237	@cond_branch
	b	.L1252
.L1242:
	ldrh	r0, [r5]
	cmp	r0, r4
	bls	.L1237	@cond_branch
	b	.L1252
.L1244:
	ldrh	r0, [r5]
	cmp	r0, r4
	bcs	.L1237	@cond_branch
	b	.L1252
.L1246:
	ldrh	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L1237	@cond_branch
	b	.L1252
.L1248:
	ldrh	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L1237	@cond_branch
.L1252:
	str	r2, [r3]
.L1237:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 Cmd_jumpifhalfword,.Lfe57-Cmd_jumpifhalfword
	.align	2, 0
	.type	 Cmd_jumpifword,function
	.thumb_func
Cmd_jumpifword:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1272
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldrb	r2, [r1, #0xa]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xd]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xe
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L1256	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L1272+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1273:
	.align	2, 0
.L1272:
	.word	gBattlescriptCurrInstr
	.word	.L1269
	.align	2, 0
	.align	2, 0
.L1269:
	.word	.L1257
	.word	.L1259
	.word	.L1261
	.word	.L1263
	.word	.L1265
	.word	.L1267
.L1257:
	ldr	r0, [r5]
	cmp	r0, r4
	bne	.L1256	@cond_branch
	b	.L1271
.L1259:
	ldr	r0, [r5]
	cmp	r0, r4
	beq	.L1256	@cond_branch
	b	.L1271
.L1261:
	ldr	r0, [r5]
	cmp	r0, r4
	bls	.L1256	@cond_branch
	b	.L1271
.L1263:
	ldr	r0, [r5]
	cmp	r0, r4
	bcs	.L1256	@cond_branch
	b	.L1271
.L1265:
	ldr	r0, [r5]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1256	@cond_branch
	b	.L1271
.L1267:
	ldr	r0, [r5]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L1256	@cond_branch
.L1271:
	str	r2, [r3]
.L1256:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 Cmd_jumpifword,.Lfe58-Cmd_jumpifword
	.align	2, 0
	.type	 Cmd_jumpifarrayequal,function
	.thumb_func
Cmd_jumpifarrayequal:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L1283
	ldr	r3, [r2]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r5, r1, r0
	ldrb	r1, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x18
	add	r4, r1, r0
	ldrb	r6, [r3, #0x9]
	ldrb	r1, [r3, #0xa]
	ldrb	r0, [r3, #0xb]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0xc]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0xd]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	mov	ip, r1
	mov	r1, #0x0
	cmp	r1, r6
	bcs	.L1276	@cond_branch
	ldrb	r0, [r5]
	ldrb	r7, [r4]
	cmp	r0, r7
	beq	.L1279	@cond_branch
	add	r0, r3, #0
	b	.L1282
.L1284:
	.align	2, 0
.L1283:
	.word	gBattlescriptCurrInstr
.L1279:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcs	.L1276	@cond_branch
	ldrb	r0, [r5]
	ldrb	r3, [r4]
	cmp	r0, r3
	beq	.L1279	@cond_branch
	ldr	r0, [r2]
.L1282:
	add	r0, r0, #0xe
	str	r0, [r2]
.L1276:
	cmp	r1, r6
	bne	.L1281	@cond_branch
	mov	r7, ip
	str	r7, [r2]
.L1281:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 Cmd_jumpifarrayequal,.Lfe59-Cmd_jumpifarrayequal
	.align	2, 0
	.type	 Cmd_jumpifarraynotequal,function
	.thumb_func
Cmd_jumpifarraynotequal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, #0x0
	ldr	r3, .L1295
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r4, r2, r0
	ldrb	r6, [r1, #0x9]
	ldrb	r2, [r1, #0xa]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xd]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	mov	ip, r2
	mov	r1, #0x0
	cmp	r7, r6
	bcs	.L1287	@cond_branch
.L1289:
	ldrb	r0, [r5]
	ldrb	r2, [r4]
	cmp	r0, r2
	bne	.L1290	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L1290:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcc	.L1289	@cond_branch
.L1287:
	cmp	r7, r6
	beq	.L1292	@cond_branch
	mov	r0, ip
	b	.L1294
.L1296:
	.align	2, 0
.L1295:
	.word	gBattlescriptCurrInstr
.L1292:
	ldr	r0, [r3]
	add	r0, r0, #0xe
.L1294:
	str	r0, [r3]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 Cmd_jumpifarraynotequal,.Lfe60-Cmd_jumpifarraynotequal
	.align	2, 0
	.type	 Cmd_setbyte,function
	.thumb_func
Cmd_setbyte:
	ldr	r3, .L1298
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1299:
	.align	2, 0
.L1298:
	.word	gBattlescriptCurrInstr
.Lfe61:
	.size	 Cmd_setbyte,.Lfe61-Cmd_setbyte
	.align	2, 0
	.type	 Cmd_addbyte,function
	.thumb_func
Cmd_addbyte:
	ldr	r3, .L1301
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	ldrb	r2, [r1]
	add	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1302:
	.align	2, 0
.L1301:
	.word	gBattlescriptCurrInstr
.Lfe62:
	.size	 Cmd_addbyte,.Lfe62-Cmd_addbyte
	.align	2, 0
	.type	 Cmd_subbyte,function
	.thumb_func
Cmd_subbyte:
	ldr	r3, .L1304
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r2, #0x5]
	sub	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1305:
	.align	2, 0
.L1304:
	.word	gBattlescriptCurrInstr
.Lfe63:
	.size	 Cmd_subbyte,.Lfe63-Cmd_subbyte
	.align	2, 0
	.type	 Cmd_copyarray,function
	.thumb_func
Cmd_copyarray:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1312
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r6, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x9]
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L1308	@cond_branch
.L1310:
	add	r0, r6, r2
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L1310	@cond_branch
.L1308:
	ldr	r0, [r3]
	add	r0, r0, #0xa
	str	r0, [r3]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1313:
	.align	2, 0
.L1312:
	.word	gBattlescriptCurrInstr
.Lfe64:
	.size	 Cmd_copyarray,.Lfe64-Cmd_copyarray
	.align	2, 0
	.type	 Cmd_copyarraywithindex,function
	.thumb_func
Cmd_copyarraywithindex:
	push	{r4, r5, r6, r7, lr}
	ldr	r3, .L1320
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r7, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r6, r2, r0
	ldrb	r2, [r1, #0x9]
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0xd]
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L1316	@cond_branch
.L1318:
	add	r0, r7, r2
	ldrb	r1, [r5]
	add	r1, r2, r1
	add	r1, r6, r1
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L1318	@cond_branch
.L1316:
	ldr	r0, [r3]
	add	r0, r0, #0xe
	str	r0, [r3]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1321:
	.align	2, 0
.L1320:
	.word	gBattlescriptCurrInstr
.Lfe65:
	.size	 Cmd_copyarraywithindex,.Lfe65-Cmd_copyarraywithindex
	.align	2, 0
	.type	 Cmd_orbyte,function
	.thumb_func
Cmd_orbyte:
	ldr	r3, .L1323
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r2, #0x5]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1324:
	.align	2, 0
.L1323:
	.word	gBattlescriptCurrInstr
.Lfe66:
	.size	 Cmd_orbyte,.Lfe66-Cmd_orbyte
	.align	2, 0
	.type	 Cmd_orhalfword,function
	.thumb_func
Cmd_orhalfword:
	push	{r4, lr}
	ldr	r4, .L1326
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	ldrb	r1, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrh	r0, [r2]
	orr	r1, r1, r0
	strh	r1, [r2]
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1327:
	.align	2, 0
.L1326:
	.word	gBattlescriptCurrInstr
.Lfe67:
	.size	 Cmd_orhalfword,.Lfe67-Cmd_orhalfword
	.align	2, 0
	.type	 Cmd_orword,function
	.thumb_func
Cmd_orword:
	push	{r4, lr}
	ldr	r4, .L1329
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r3, r3, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r3, r3, r0
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	ldr	r0, [r4]
	add	r0, r0, #0x9
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1330:
	.align	2, 0
.L1329:
	.word	gBattlescriptCurrInstr
.Lfe68:
	.size	 Cmd_orword,.Lfe68-Cmd_orword
	.align	2, 0
	.type	 Cmd_bicbyte,function
	.thumb_func
Cmd_bicbyte:
	ldr	r3, .L1332
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r2, [r2, #0x5]
	ldrb	r0, [r1]
	bic	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1333:
	.align	2, 0
.L1332:
	.word	gBattlescriptCurrInstr
.Lfe69:
	.size	 Cmd_bicbyte,.Lfe69-Cmd_bicbyte
	.align	2, 0
	.type	 Cmd_bichalfword,function
	.thumb_func
Cmd_bichalfword:
	push	{r4, lr}
	ldr	r4, .L1335
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r2, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrh	r0, [r1]
	bic	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1336:
	.align	2, 0
.L1335:
	.word	gBattlescriptCurrInstr
.Lfe70:
	.size	 Cmd_bichalfword,.Lfe70-Cmd_bichalfword
	.align	2, 0
	.type	 Cmd_bicword,function
	.thumb_func
Cmd_bicword:
	push	{r4, lr}
	ldr	r4, .L1338
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r3, r3, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r3, r3, r0
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
	ldr	r0, [r4]
	add	r0, r0, #0x9
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1339:
	.align	2, 0
.L1338:
	.word	gBattlescriptCurrInstr
.Lfe71:
	.size	 Cmd_bicword,.Lfe71-Cmd_bicword
	.align	2, 0
	.type	 Cmd_pause,function
	.thumb_func
Cmd_pause:
	push	{r4, r5, lr}
	ldr	r0, .L1343
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L1341	@cond_branch
	ldr	r5, .L1343+0x4
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r3, .L1343+0x8
	ldrh	r0, [r3]
	add	r0, r0, #0x1
	strh	r0, [r3]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r1
	bcc	.L1341	@cond_branch
	strh	r4, [r3]
	add	r0, r2, #0x3
	str	r0, [r5]
.L1341:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1344:
	.align	2, 0
.L1343:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gPauseCounterBattle
.Lfe72:
	.size	 Cmd_pause,.Lfe72-Cmd_pause
	.align	2, 0
	.type	 Cmd_waitstate,function
	.thumb_func
Cmd_waitstate:
	push	{lr}
	ldr	r0, .L1347
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1346	@cond_branch
	ldr	r1, .L1347+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L1346:
	pop	{r0}
	bx	r0
.L1348:
	.align	2, 0
.L1347:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
.Lfe73:
	.size	 Cmd_waitstate,.Lfe73-Cmd_waitstate
	.align	2, 0
	.type	 Cmd_healthbar_update,function
	.thumb_func
Cmd_healthbar_update:
	push	{lr}
	ldr	r0, .L1353
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L1350	@cond_branch
	ldr	r0, .L1353+0x4
	ldr	r1, .L1353+0x8
	b	.L1352
.L1354:
	.align	2, 0
.L1353:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerTarget
.L1350:
	ldr	r0, .L1355
	ldr	r1, .L1355+0x4
.L1352:
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldr	r0, .L1355+0x8
	ldrh	r1, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldr	r0, .L1355
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1355+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1356:
	.align	2, 0
.L1355:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe74:
	.size	 Cmd_healthbar_update,.Lfe74-Cmd_healthbar_update
	.align	2, 0
	.type	 Cmd_return,function
	.thumb_func
Cmd_return:
	push	{lr}
	bl	BattleScriptPop
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 Cmd_return,.Lfe75-Cmd_return
	.align	2, 0
	.type	 Cmd_end,function
	.thumb_func
Cmd_end:
	ldr	r0, .L1359
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L1359+0x4
	strb	r1, [r0]
	ldr	r1, .L1359+0x8
	mov	r0, #0xb
	strb	r0, [r1]
	bx	lr
.L1360:
	.align	2, 0
.L1359:
	.word	gMoveResultFlags
	.word	gActiveBattler
	.word	gCurrentActionFuncId
.Lfe76:
	.size	 Cmd_end,.Lfe76-Cmd_end
	.align	2, 0
	.type	 Cmd_end2,function
	.thumb_func
Cmd_end2:
	ldr	r1, .L1362
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L1362+0x4
	mov	r0, #0xb
	strb	r0, [r1]
	bx	lr
.L1363:
	.align	2, 0
.L1362:
	.word	gActiveBattler
	.word	gCurrentActionFuncId
.Lfe77:
	.size	 Cmd_end2,.Lfe77-Cmd_end2
	.align	2, 0
	.type	 Cmd_end3,function
	.thumb_func
Cmd_end3:
	push	{lr}
	bl	BattleScriptPop
	ldr	r3, .L1366
	ldr	r0, [r3]
	ldr	r0, [r0, #0xc]
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1365	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L1365:
	ldr	r2, .L1366+0x4
	ldr	r0, [r3]
	ldr	r1, [r0, #0xc]
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	pop	{r0}
	bx	r0
.L1367:
	.align	2, 0
.L1366:
	.word	gBattleResources
	.word	gBattleMainFunc
.Lfe78:
	.size	 Cmd_end3,.Lfe78-Cmd_end3
	.align	2, 0
	.type	 Cmd_call,function
	.thumb_func
Cmd_call:
	push	{r4, lr}
	ldr	r4, .L1369
	ldr	r0, [r4]
	add	r0, r0, #0x5
	bl	BattleScriptPush
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1370:
	.align	2, 0
.L1369:
	.word	gBattlescriptCurrInstr
.Lfe79:
	.size	 Cmd_call,.Lfe79-Cmd_call
	.align	2, 0
	.type	 Cmd_jumpiftype2,function
	.thumb_func
Cmd_jumpiftype2:
	push	{r4, lr}
	ldr	r4, .L1375
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [r4]
	ldr	r2, .L1375+0x4
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r2, [r3, #0x2]
	ldrb	r1, [r1]
	cmp	r2, r1
	beq	.L1373	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r2, r0
	bne	.L1372	@cond_branch
.L1373:
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1374
.L1376:
	.align	2, 0
.L1375:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L1372:
	add	r0, r3, #0x7
	str	r0, [r4]
.L1374:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 Cmd_jumpiftype2,.Lfe80-Cmd_jumpiftype2
	.align	2, 0
	.type	 Cmd_jumpifabilitypresent,function
	.thumb_func
Cmd_jumpifabilitypresent:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L1380
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x1]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1378	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1379
.L1381:
	.align	2, 0
.L1380:
	.word	gBattlescriptCurrInstr
.L1378:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1379:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 Cmd_jumpifabilitypresent,.Lfe81-Cmd_jumpifabilitypresent
	.align	2, 0
	.type	 Cmd_endselectionscript,function
	.thumb_func
Cmd_endselectionscript:
	ldr	r0, .L1383
	ldrb	r0, [r0]
	ldr	r1, .L1383+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x54
	mov	r1, #0x1
	strb	r1, [r0]
	bx	lr
.L1384:
	.align	2, 0
.L1383:
	.word	gBattlerAttacker
	.word	gBattleStruct
.Lfe82:
	.size	 Cmd_endselectionscript,.Lfe82-Cmd_endselectionscript
	.align	2, 0
	.type	 Cmd_playanimation,function
	.thumb_func
Cmd_playanimation:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1397
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L1397+0x4
	strb	r0, [r6]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r5, [r2, #0x2]
	add	r0, r5, #0
	cmp	r0, #0x1
	beq	.L1387	@cond_branch
	cmp	r0, #0x11
	beq	.L1387	@cond_branch
	cmp	r0, #0x2
	beq	.L1387	@cond_branch
	cmp	r0, #0x19
	bne	.L1386	@cond_branch
.L1387:
	ldr	r4, .L1397
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x2]
	ldrh	r2, [r3]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldr	r0, .L1397+0x4
	ldrb	r0, [r0]
	b	.L1395
.L1398:
	.align	2, 0
.L1397:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L1386:
	ldr	r0, .L1399
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1389	@cond_branch
	add	r0, r2, #0x7
	bl	BattleScriptPush
	ldr	r0, .L1399+0x4
	b	.L1396
.L1400:
	.align	2, 0
.L1399:
	.word	gHitMarker
	.word	BattleScript_Pausex20
.L1389:
	add	r0, r5, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L1393	@cond_branch
	ldr	r1, .L1401
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1401+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1393	@cond_branch
	add	r0, r2, #0x7
	b	.L1396
.L1402:
	.align	2, 0
.L1401:
	.word	gStatuses3
	.word	0x400c0
.L1393:
	ldrb	r1, [r2, #0x2]
	ldrh	r2, [r3]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldrb	r0, [r6]
.L1395:
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x7
.L1396:
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 Cmd_playanimation,.Lfe83-Cmd_playanimation
	.align	2, 0
	.type	 Cmd_playanimation_var,function
	.thumb_func
Cmd_playanimation_var:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L1414
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r7, .L1414+0x4
	strb	r0, [r7]
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	add	r4, r1, r0
	ldrb	r5, [r3]
	add	r0, r5, #0
	cmp	r0, #0x1
	beq	.L1405	@cond_branch
	cmp	r0, #0x11
	beq	.L1405	@cond_branch
	cmp	r0, #0x2
	bne	.L1404	@cond_branch
.L1405:
	ldrb	r1, [r3]
	ldrh	r2, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldr	r0, .L1414+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1414
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L1406
.L1415:
	.align	2, 0
.L1414:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L1404:
	ldr	r0, .L1416
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1407	@cond_branch
	add	r0, r2, #0
	b	.L1413
.L1417:
	.align	2, 0
.L1416:
	.word	gHitMarker
.L1407:
	add	r0, r5, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L1411	@cond_branch
	ldr	r1, .L1418
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1418+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1411	@cond_branch
	add	r0, r2, #0
	b	.L1413
.L1419:
	.align	2, 0
.L1418:
	.word	gStatuses3
	.word	0x400c0
.L1411:
	ldrb	r1, [r3]
	ldrh	r2, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r6]
.L1413:
	add	r0, r0, #0xa
	str	r0, [r6]
.L1406:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 Cmd_playanimation_var,.Lfe84-Cmd_playanimation_var
	.align	2, 0
	.type	 Cmd_setgraphicalstatchangevalues,function
	.thumb_func
Cmd_setgraphicalstatchangevalues:
	push	{r4, lr}
	mov	r3, #0x0
	ldr	r1, .L1429
	ldrb	r0, [r1, #0x1a]
	mov	r2, #0xf0
	and	r2, r2, r0
	add	r4, r1, #0
	cmp	r2, #0x20
	beq	.L1423	@cond_branch
	cmp	r2, #0x20
	bgt	.L1428	@cond_branch
	cmp	r2, #0x10
	beq	.L1422	@cond_branch
	b	.L1421
.L1430:
	.align	2, 0
.L1429:
	.word	gBattleScripting
.L1428:
	cmp	r2, #0x90
	beq	.L1424	@cond_branch
	cmp	r2, #0xa0
	beq	.L1425	@cond_branch
	b	.L1421
.L1422:
	mov	r3, #0xf
	b	.L1421
.L1423:
	mov	r3, #0x27
	b	.L1421
.L1424:
	mov	r3, #0x16
	b	.L1421
.L1425:
	mov	r3, #0x2e
.L1421:
	ldrb	r1, [r4, #0x1a]
	mov	r0, #0xf
	and	r0, r0, r1
	add	r0, r3, r0
	sub	r0, r0, #0x1
	mov	r1, #0x0
	strb	r0, [r4, #0x10]
	strb	r1, [r4, #0x11]
	ldr	r1, .L1431
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1432:
	.align	2, 0
.L1431:
	.word	gBattlescriptCurrInstr
.Lfe85:
	.size	 Cmd_setgraphicalstatchangevalues,.Lfe85-Cmd_setgraphicalstatchangevalues
	.align	2, 0
	.type	 Cmd_playstatchangeanimation,function
	.thumb_func
Cmd_playstatchangeanimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r7, #0x0
	mov	r0, #0x0
	mov	r8, r0
	mov	r3, #0x0
	ldr	r5, .L1474
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	str	r3, [sp]
	bl	GetBattlerForBattleScript
	ldr	r2, .L1474+0x4
	strb	r0, [r2]
	ldr	r0, [r5]
	ldrb	r4, [r0, #0x2]
	ldrb	r1, [r0, #0x3]
	mov	r0, #0x1
	and	r0, r0, r1
	ldr	r3, [sp]
	cmp	r0, #0
	beq	.L1434	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	mov	r1, #0x15
	cmp	r0, #0
	beq	.L1435	@cond_branch
	mov	r1, #0x2d
.L1435:
	cmp	r4, #0
	beq	.L1468	@cond_branch
	mov	r0, #0x1
	mov	sl, r0
	ldr	r0, .L1474+0x8
	mov	r9, r0
	lsl	r5, r1, #0x10
.L1439:
	add	r0, r4, #0
	mov	r1, sl
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1440	@cond_branch
	ldr	r0, .L1474
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x3]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1441	@cond_branch
	ldr	r0, .L1474+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r7, r0
	b	.L1470
.L1475:
	.align	2, 0
.L1474:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons+0x18
.L1441:
	ldr	r6, .L1476
	ldrb	r0, [r6]
	str	r3, [sp]
	bl	GetBattlerPosition
	mov	r1, sl
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1476+0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x4]
	ldr	r3, [sp]
	cmp	r0, #0
	bne	.L1440	@cond_branch
	ldr	r0, .L1476+0x8
	ldrb	r2, [r6]
	mov	r1, #0x58
	mul	r2, r2, r1
	add	r0, r2, r0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1d
	beq	.L1440	@cond_branch
	cmp	r0, #0x49
	beq	.L1440	@cond_branch
	cmp	r0, #0x33
	bne	.L1445	@cond_branch
	cmp	r7, #0x6
	beq	.L1440	@cond_branch
.L1445:
	cmp	r0, #0x34
	bne	.L1446	@cond_branch
	cmp	r7, #0x1
	beq	.L1440	@cond_branch
.L1446:
	add	r0, r7, r2
.L1470:
	add	r0, r0, r9
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	ble	.L1440	@cond_branch
	lsr	r0, r5, #0x10
	mov	r8, r0
	add	r3, r3, #0x1
.L1440:
	lsr	r4, r4, #0x1
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r5, r5, r1
	add	r7, r7, #0x1
	cmp	r4, #0
	bne	.L1439	@cond_branch
.L1468:
	ldr	r0, .L1476+0xc
	mov	r9, r0
	cmp	r3, #0x1
	ble	.L1452	@cond_branch
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x3]
	mov	r0, #0x2
	and	r0, r0, r1
	mov	r1, #0x39
	mov	r8, r1
	cmp	r0, #0
	beq	.L1452	@cond_branch
	mov	r0, #0x3a
	b	.L1471
.L1477:
	.align	2, 0
.L1476:
	.word	gActiveBattler
	.word	gSideTimers
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L1434:
	mov	r0, #0x2
	and	r0, r0, r1
	mov	r1, #0xe
	cmp	r0, #0
	beq	.L1453	@cond_branch
	mov	r1, #0x26
.L1453:
	mov	r9, r5
	cmp	r4, #0
	beq	.L1469	@cond_branch
	ldr	r6, .L1478
	add	r5, r2, #0
	lsl	r2, r1, #0x10
.L1457:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1458	@cond_branch
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r7, r0
	add	r0, r0, r6
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xb
	bgt	.L1458	@cond_branch
	lsr	r1, r2, #0x10
	mov	r8, r1
	add	r3, r3, #0x1
.L1458:
	lsr	r4, r4, #0x1
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r2, r2, r0
	add	r7, r7, #0x1
	cmp	r4, #0
	bne	.L1457	@cond_branch
.L1469:
	cmp	r3, #0x1
	ble	.L1452	@cond_branch
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r1, [r0, #0x3]
	mov	r0, #0x2
	and	r0, r0, r1
	mov	r1, #0x37
	mov	r8, r1
	cmp	r0, #0
	beq	.L1452	@cond_branch
	mov	r0, #0x38
.L1471:
	mov	r8, r0
.L1452:
	mov	r1, r9
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x3]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1463	@cond_branch
	cmp	r3, #0x1
	bgt	.L1463	@cond_branch
	add	r0, r2, #0x4
	mov	r1, r9
	b	.L1472
.L1479:
	.align	2, 0
.L1478:
	.word	gBattleMons+0x18
.L1463:
	cmp	r3, #0
	beq	.L1465	@cond_branch
	ldr	r4, .L1480
	ldrb	r0, [r4, #0x1b]
	cmp	r0, #0
	bne	.L1465	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, r8
	str	r3, [sp]
	bl	BtlController_EmitBattleAnimation
	ldr	r0, .L1480+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r0, .L1480+0x8
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x3]
	mov	r0, #0x4
	and	r0, r0, r1
	ldr	r3, [sp]
	cmp	r0, #0
	beq	.L1466	@cond_branch
	cmp	r3, #0x1
	ble	.L1466	@cond_branch
	mov	r0, #0x1
	strb	r0, [r4, #0x1b]
.L1466:
	ldr	r1, .L1480+0x8
	b	.L1473
.L1481:
	.align	2, 0
.L1480:
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L1465:
	mov	r1, r9
.L1473:
	ldr	r0, [r1]
	add	r0, r0, #0x4
.L1472:
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 Cmd_playstatchangeanimation,.Lfe86-Cmd_playstatchangeanimation
	.align	2, 0
	.type	 Cmd_moveend,function
	.thumb_func
Cmd_moveend:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	mov	r0, #0x0
	mov	sl, r0
	ldr	r2, .L1581
	ldrh	r1, [r2]
	ldr	r0, .L1581+0x4
	mov	r3, #0x0
	str	r3, [sp, #0x18]
	cmp	r1, r0
	beq	.L1484	@cond_branch
	ldrh	r2, [r2]
	str	r2, [sp, #0x18]
.L1484:
	ldr	r0, .L1581+0x8
	ldr	r0, [r0]
	ldrb	r4, [r0, #0x1]
	str	r4, [sp, #0x10]
	ldrb	r0, [r0, #0x2]
	str	r0, [sp, #0x14]
	ldr	r1, .L1581+0xc
	ldr	r0, .L1581+0x10
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L1485	@cond_branch
	ldr	r1, .L1581+0x14
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x7]
	b	.L1575
.L1582:
	.align	2, 0
.L1581:
	.word	gChosenMove
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gEnigmaBerries
.L1485:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1575:
	str	r0, [sp, #0x8]
	ldr	r1, .L1583
	ldr	r0, .L1583+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, #0xc8
	ldr	r1, [r1]
	add	r0, r1, r0
	str	r0, [sp, #0xc]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L1487	@cond_branch
	mov	r5, #0x3f
	and	r5, r5, r0
	str	r5, [sp, #0x4]
	b	.L1488
.L1584:
	.align	2, 0
.L1583:
	.word	gBattleStruct
	.word	gBattlerAttacker
.L1572:
	ldr	r4, .L1585
	strb	r2, [r4]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1576
.L1586:
	.align	2, 0
.L1585:
	.word	gActiveBattler
.L1573:
	ldr	r4, .L1587
	strb	r2, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r0, [r1]
	ldr	r2, .L1587+0x4
	and	r0, r0, r2
	str	r0, [r1]
	b	.L1576
.L1588:
	.align	2, 0
.L1587:
	.word	gActiveBattler
	.word	-0x400c1
.L1574:
	strb	r2, [r7]
	ldr	r0, [r5]
	orr	r0, r0, r6
	str	r0, [r5]
	ldr	r0, .L1589
	strb	r4, [r0, #0x14]
	bl	MoveValuesCleanUp
	ldr	r2, .L1589+0x4
	mov	r0, r8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	bl	BattleScriptPush
	ldr	r1, .L1589+0x8
	ldr	r0, .L1589+0xc
	bl	.L1577	@ far jump
.L1590:
	.align	2, 0
.L1589:
	.word	gBattleScripting
	.word	gBattleScriptsForMoveEffects
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlushMessageBox
.L1487:
	ldr	r2, .L1591
	ldr	r0, .L1591+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	str	r0, [sp, #0x4]
.L1488:
	ldr	r1, .L1591+0x8
	mov	ip, r1
	b	.L1489
.L1592:
	.align	2, 0
.L1591:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleScripting
.L1570:
	mov	r2, sl
	cmp	r2, #0
	beq	.LCB14697
	bl	.L1490	@far jump
.LCB14697:
.L1489:
	mov	r3, ip
	ldrb	r0, [r3, #0x14]
	cmp	r0, #0x11
	bls	.LCB14704
	bl	.L1492	@far jump
.LCB14704:
	lsl	r0, r0, #0x2
	ldr	r1, .L1593
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1594:
	.align	2, 0
.L1593:
	.word	.L1564
	.align	2, 0
	.align	2, 0
.L1564:
	.word	.L1493
	.word	.L1496
	.word	.L1498
	.word	.L1500
	.word	.L1502
	.word	.L1505
	.word	.L1507
	.word	.L1518
	.word	.L1530
	.word	.L1532
	.word	.L1535
	.word	.L1525
	.word	.L1528
	.word	.L1537
	.word	.L1544
	.word	.L1557
	.word	.L1559
	.word	.L1492
.L1493:
	ldr	r6, .L1595
	ldr	r5, .L1595+0x4
	ldrb	r3, [r5]
	mov	r7, #0x58
	mov	r2, r3
	mul	r2, r2, r7
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14736
	b	.L1533	@long jump
.LCB14736:
	add	r0, r2, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB14742
	b	.L1533	@long jump
.LCB14742:
	ldr	r0, .L1595+0x8
	ldrb	r1, [r0]
	cmp	r1, r3
	bne	.LCB14752
	b	.L1533	@long jump
.LCB14752:
	add	r0, r1, #0
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.LCB14766
	b	.L1533	@long jump
.LCB14766:
	ldr	r0, .L1595+0xc
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB14774
	b	.L1533	@long jump
.LCB14774:
	ldr	r2, .L1595+0x10
	ldrb	r3, [r5]
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1495	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB14791
	b	.L1533	@long jump
.LCB14791:
.L1495:
	ldr	r2, .L1595+0x14
	ldr	r0, .L1595+0x18
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.LCB14804
	b	.L1533	@long jump
.LCB14804:
	mov	r0, r3
	mul	r0, r0, r7
	add	r1, r0, r6
	ldrb	r2, [r1, #0x19]
	mov	r0, #0x19
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xb
	ble	.LCB14811
	b	.L1533	@long jump
.LCB14811:
	add	r0, r2, #0x1
	strb	r0, [r1, #0x19]
	bl	BattleScriptPushCursor
	ldr	r1, .L1595+0x1c
	ldr	r0, .L1595+0x20
	str	r0, [r1]
	b	.L1579
.L1596:
	.align	2, 0
.L1595:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RageIsBuilding
.L1496:
	ldr	r4, .L1597
	ldr	r6, .L1597+0x4
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	ip, r5
	mov	r1, ip
	mul	r1, r1, r2
	add	r7, r4, #0
	add	r7, r7, #0x4c
	add	r5, r1, r7
	ldr	r3, [r5]
	mov	r0, #0x20
	and	r0, r0, r3
	cmp	r0, #0
	bne	.LCB14849
	b	.L1533	@long jump
.LCB14849:
	add	r0, r1, r4
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB14855
	b	.L1533	@long jump
.LCB14855:
	ldr	r0, .L1597+0x8
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.LCB14865
	b	.L1533	@long jump
.LCB14865:
	ldr	r0, .L1597+0xc
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.LCB14874
	b	.L1533	@long jump
.LCB14874:
	ldr	r0, .L1597+0x10
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB14882
	b	.L1533	@long jump
.LCB14882:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0xa
	beq	.LCB14885
	b	.L1533	@long jump
.LCB14885:
	mov	r0, #0x21
	neg	r0, r0
	and	r3, r3, r0
	str	r3, [r5]
	ldr	r4, .L1597+0x14
	ldrb	r0, [r6]
	strb	r0, [r4]
	ldrb	r0, [r6]
	mov	r1, ip
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	bl	BattleScriptPushCursor
	ldr	r1, .L1597+0x18
	ldr	r0, .L1597+0x1c
	str	r0, [r1]
	mov	r2, #0x1
	mov	sl, r2
	b	.L1533
.L1598:
	.align	2, 0
.L1597:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DefrostedViaFireMove
.L1498:
	ldr	r0, .L1599
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x7
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB14942
	b	.L1533	@long jump
.LCB14942:
	mov	r3, #0x1
	mov	sl, r3
	b	.L1533
.L1600:
	.align	2, 0
.L1599:
	.word	gBattlerTarget
.L1500:
	ldr	r0, .L1601
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x4
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	b	.L1580
.L1602:
	.align	2, 0
.L1601:
	.word	gBattlerTarget
.L1502:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x5
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB14985
	b	.L1533	@long jump
.LCB14985:
	mov	r5, #0x1
	mov	sl, r5
	ldr	r0, .L1603
	mov	ip, r0
	b	.L1492
.L1604:
	.align	2, 0
.L1603:
	.word	gBattleScripting
.L1505:
	ldr	r0, .L1605
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB15013
	b	.L1533	@long jump
.LCB15013:
	mov	r1, #0x1
	mov	sl, r1
	b	.L1533
.L1606:
	.align	2, 0
.L1605:
	.word	gBattlerAttacker
.L1507:
	ldr	r0, .L1607
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1508	@cond_branch
	ldr	r2, [sp, #0x8]
	cmp	r2, #0x1d
	bne	.L1508	@cond_branch
	ldr	r0, .L1607+0x4
	ldrh	r2, [r0]
	add	r3, r0, #0
	cmp	r2, #0xa5
	beq	.L1508	@cond_branch
	ldr	r4, [sp, #0xc]
	ldrh	r1, [r4]
	cmp	r1, #0
	beq	.L1509	@cond_branch
	ldr	r0, .L1607+0x8
	cmp	r1, r0
	bne	.L1508	@cond_branch
.L1509:
	cmp	r2, #0xe2
	bne	.L1510	@cond_branch
	ldr	r0, .L1607+0xc
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB15064
	b	.L1558	@long jump
.LCB15064:
.L1510:
	ldrh	r0, [r3]
	ldr	r1, [sp, #0xc]
	strh	r0, [r1]
.L1508:
	mov	r4, #0x0
	ldr	r2, .L1607+0x10
	ldr	r3, .L1607+0x14
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldr	r5, [sp, #0xc]
	ldrh	r1, [r5]
	mov	r9, r3
	cmp	r0, r1
	beq	.L1512	@cond_branch
	mov	r6, r9
	mov	r3, #0x58
	add	r5, r1, #0
.L1513:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L1512	@cond_branch
	lsl	r0, r4, #0x1
	ldrb	r1, [r6]
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r5
	bne	.L1513	@cond_branch
.L1512:
	cmp	r4, #0x4
	bne	.L1517	@cond_branch
	mov	r0, #0x0
	ldr	r1, [sp, #0xc]
	strh	r0, [r1]
.L1517:
	mov	r2, ip
	ldrb	r0, [r2, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r2, #0x14]
	b	.L1492
.L1608:
	.align	2, 0
.L1607:
	.word	gHitMarker
	.word	gChosenMove
	.word	0xffff
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
.L1518:
	mov	r4, #0x0
	ldr	r0, .L1609
	ldrb	r3, [r0]
	cmp	r4, r3
	blt	.LCB15151
	b	.L1539	@long jump
.LCB15151:
	ldr	r7, .L1609+0x4
	mov	r6, #0x0
	mov	r3, #0xd0
	add	r5, r0, #0
	ldr	r2, .L1609+0x8
.L1522:
	ldr	r0, [r7]
	add	r0, r0, r3
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L1521	@cond_branch
	strh	r1, [r2, #0x2e]
	strh	r6, [r0]
.L1521:
	add	r3, r3, #0x2
	add	r2, r2, #0x58
	add	r4, r4, #0x1
	ldrb	r0, [r5]
	cmp	r4, r0
	blt	.L1522	@cond_branch
	b	.L1539
.L1610:
	.align	2, 0
.L1609:
	.word	gBattlersCount
	.word	gBattleStruct
	.word	gBattleMons
.L1525:
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1533	@cond_branch
	mov	r2, #0x1
	mov	sl, r2
	ldr	r3, .L1611
	mov	ip, r3
	b	.L1492
.L1612:
	.align	2, 0
.L1611:
	.word	gBattleScripting
.L1528:
	mov	r0, #0x4
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ItemBattleEffects
.L1580:
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1533	@cond_branch
.L1579:
	mov	r4, #0x1
	mov	sl, r4
	b	.L1533
.L1530:
	ldr	r1, .L1613
	ldr	r0, .L1613+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1613+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB15244
	b	.L1558	@long jump
.LCB15244:
	ldr	r0, .L1613+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB15250
	b	.L1572	@long jump
.LCB15250:
	b	.L1558
.L1614:
	.align	2, 0
.L1613:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	0x400c0
	.word	gHitMarker
.L1532:
	ldr	r0, .L1615
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1534	@cond_branch
	ldr	r1, .L1615+0x4
	ldr	r0, .L1615+0x8
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1615+0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1534	@cond_branch
	add	r0, r2, #0
	bl	WasUnableToUseMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1533	@cond_branch
.L1534:
	ldr	r4, .L1615+0x10
	ldr	r5, .L1615+0x8
	ldrb	r0, [r5]
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, .L1615+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L1615+0x14
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1615+0x18
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1576:
	ldr	r1, .L1615+0x1c
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	b	.L1482
.L1616:
	.align	2, 0
.L1615:
	.word	gMoveResultFlags
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	0x400c0
	.word	gActiveBattler
	.word	-0x400c1
	.word	gSpecialStatuses
	.word	gBattleScripting
.L1533:
	ldr	r1, .L1617
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	mov	ip, r1
	b	.L1492
.L1618:
	.align	2, 0
.L1617:
	.word	gBattleScripting
.L1535:
	ldr	r0, .L1619
	ldr	r6, .L1619+0x4
	ldrb	r2, [r6]
	lsl	r3, r2, #0x2
	add	r1, r3, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1539	@cond_branch
	ldr	r0, .L1619+0x8
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L1539	@cond_branch
	ldr	r5, .L1619+0xc
	add	r0, r3, r5
	ldr	r0, [r0]
	ldr	r1, .L1619+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB15384
	b	.L1573	@long jump
.LCB15384:
	b	.L1539
.L1620:
	.align	2, 0
.L1619:
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gStatuses3
	.word	0x400c0
.L1537:
	mov	r4, #0x0
	ldr	r0, .L1621
	ldrb	r2, [r0]
	cmp	r4, r2
	bge	.L1539	@cond_branch
	ldr	r2, .L1621+0x4
	ldr	r5, .L1621+0x8
	add	r3, r0, #0
	ldr	r1, .L1621+0xc
.L1541:
	ldrb	r0, [r2, #0xa]
	cmp	r0, #0
	bne	.L1540	@cond_branch
	ldr	r0, [r1]
	and	r0, r0, r5
	str	r0, [r1]
.L1540:
	add	r2, r2, #0x1c
	add	r1, r1, #0x58
	add	r4, r4, #0x1
	ldrb	r0, [r3]
	cmp	r4, r0
	blt	.L1541	@cond_branch
.L1539:
	mov	r1, ip
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	b	.L1492
.L1622:
	.align	2, 0
.L1621:
	.word	gBattlersCount
	.word	gDisableStructs
	.word	-0x1000001
	.word	gBattleMons+0x50
.L1544:
	ldr	r1, .L1623
	ldr	r3, [r1]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r0, r0, r3
	ldr	r2, .L1623+0x4
	mov	r9, r2
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L1545	@cond_branch
	ldr	r0, .L1623+0x8
	ldrb	r2, [r2]
	strb	r2, [r0]
	ldr	r1, .L1623+0xc
	ldrb	r0, [r1]
	mov	r4, r9
	strb	r0, [r4]
	strb	r2, [r1]
	ldr	r0, .L1623+0x10
	and	r3, r3, r0
	str	r3, [r5]
.L1545:
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1546	@cond_branch
	ldr	r0, .L1623+0x14
	mov	r2, r9
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, .L1623+0x18
	ldrh	r0, [r0]
	strh	r0, [r1]
.L1546:
	ldr	r0, .L1623+0x1c
	ldrb	r1, [r0]
	ldr	r2, .L1623+0x20
	mov	r3, r9
	ldrb	r4, [r3]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r3, [r0]
	and	r1, r1, r3
	add	r6, r2, #0
	cmp	r1, #0
	beq	.LCB15511
	b	.L1547	@long jump
.LCB15511:
	ldr	r0, .L1623+0x24
	ldr	r1, [r0]
	add	r1, r1, #0x91
	ldrb	r1, [r1]
	and	r1, r1, r3
	add	r7, r0, #0
	cmp	r1, #0
	beq	.LCB15519
	b	.L1547	@long jump
.LCB15519:
	ldr	r0, .L1623+0x28
	ldr	r2, [sp, #0x18]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r1, [r1]
	mov	r8, r0
	cmp	r1, #0x7f
	bne	.LCB15531
	b	.L1547	@long jump
.LCB15531:
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1548	@cond_branch
	ldr	r0, .L1623+0x2c
	lsl	r1, r4, #0x1
	add	r1, r1, r0
	ldr	r0, .L1623+0x18
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r0, .L1623+0x30
	mov	r3, r9
	ldrb	r1, [r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, .L1623+0x34
	ldrh	r0, [r0]
	strh	r0, [r1]
	b	.L1549
.L1624:
	.align	2, 0
.L1623:
	.word	gHitMarker
	.word	gBattlerAttacker
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	-0x1001
	.word	gLastPrintedMoves
	.word	gChosenMove
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleStruct
	.word	gBattleMoves
	.word	gLastMoves
	.word	gLastResultingMoves
	.word	gCurrentMove
.L1548:
	ldr	r1, .L1625
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldr	r1, .L1625+0x4
	strh	r1, [r0]
	ldr	r1, .L1625+0x8
	mov	r4, r9
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x1
	neg	r1, r1
	strh	r1, [r0]
.L1549:
	ldr	r2, .L1625+0xc
	ldrb	r3, [r2]
	lsl	r0, r3, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	ldr	r1, [r5]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1550	@cond_branch
	ldr	r0, .L1625+0x10
	add	r0, r3, r0
	mov	r3, r9
	ldrb	r1, [r3]
	strb	r1, [r0]
.L1550:
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1551	@cond_branch
	ldr	r0, .L1625+0x14
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1551	@cond_branch
	ldr	r0, .L1625+0x18
	ldrh	r3, [r0]
	ldr	r0, .L1625+0x4
	cmp	r3, r0
	bne	.L1552	@cond_branch
	ldr	r1, .L1625+0x1c
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r3, [r0]
	b	.L1547
.L1626:
	.align	2, 0
.L1625:
	.word	gLastMoves
	.word	0xffff
	.word	gLastResultingMoves
	.word	gBattlerTarget
	.word	gLastHitBy
	.word	gMoveResultFlags
	.word	gChosenMove
	.word	gLastLandedMoves
.L1552:
	ldr	r0, .L1627
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r4, .L1627+0x4
	ldrh	r0, [r4]
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r3, [r0, #0x13]
	cmp	r3, #0
	beq	.L1554	@cond_branch
	ldr	r0, .L1627+0x8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	mov	r0, #0x3f
	and	r0, r0, r3
	b	.L1578
.L1628:
	.align	2, 0
.L1627:
	.word	gLastLandedMoves
	.word	gCurrentMove
	.word	gLastHitByType
.L1554:
	ldr	r0, .L1629
	ldrb	r2, [r2]
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x2]
	strh	r0, [r2]
	b	.L1547
.L1630:
	.align	2, 0
.L1629:
	.word	gLastHitByType
.L1551:
	ldr	r0, .L1631
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, .L1631+0x4
.L1578:
	strh	r0, [r1]
.L1547:
	mov	r4, ip
	ldrb	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x14]
	b	.L1492
.L1632:
	.align	2, 0
.L1631:
	.word	gLastLandedMoves
	.word	0xffff
.L1557:
	ldr	r0, .L1633
	ldrb	r1, [r0]
	ldr	r7, .L1633+0x4
	ldr	r2, .L1633+0x8
	ldrb	r3, [r2]
	lsl	r0, r3, #0x2
	add	r0, r0, r7
	ldr	r4, [r0]
	and	r1, r1, r4
	mov	r9, r2
	cmp	r1, #0
	bne	.L1558	@cond_branch
	ldr	r6, .L1633+0xc
	ldr	r5, [r6]
	add	r0, r5, #0
	add	r0, r0, #0x91
	ldrb	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L1558	@cond_branch
	ldr	r1, .L1633+0x10
	ldr	r2, [sp, #0x18]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1558	@cond_branch
	ldr	r0, .L1633+0x14
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1558	@cond_branch
	ldr	r4, .L1633+0x18
	ldrb	r0, [r4]
	cmp	r3, r0
	beq	.L1558	@cond_branch
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1558	@cond_branch
	ldr	r0, .L1633+0x1c
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1558	@cond_branch
	lsl	r1, r2, #0x1
	add	r1, r1, r5
	add	r1, r1, #0x98
	ldr	r3, .L1633+0x20
	ldrh	r0, [r3]
	strb	r0, [r1]
	ldrb	r1, [r4]
	ldr	r0, [r6]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	add	r1, r1, #0x99
	ldrh	r0, [r3]
	lsr	r0, r0, #0x8
	strb	r0, [r1]
	ldrb	r0, [r4]
	mov	r2, r9
	ldrb	r1, [r2]
	ldr	r2, [r6]
	lsl	r0, r0, #0x3
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0xe0
	ldrh	r1, [r3]
	strb	r1, [r0]
	ldrb	r1, [r4]
	mov	r4, r9
	ldrb	r0, [r4]
	ldr	r2, [r6]
	lsl	r1, r1, #0x3
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0xe1
	ldrh	r0, [r3]
	lsr	r0, r0, #0x8
	strb	r0, [r1]
.L1558:
	mov	r5, ip
	ldrb	r0, [r5, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x14]
	b	.L1492
.L1634:
	.align	2, 0
.L1633:
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gBattleMoves
	.word	gHitMarker
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gChosenMove
.L1559:
	ldr	r5, .L1635
	ldr	r2, [r5]
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L1560	@cond_branch
	ldr	r0, .L1635+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1560	@cond_branch
	ldr	r1, .L1635+0x8
	ldr	r0, .L1635+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1560	@cond_branch
	ldr	r0, .L1635+0x10
	mov	r9, r0
	ldr	r1, .L1635+0x14
	mov	r8, r1
	ldrh	r0, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x8
	bne	.L1560	@cond_branch
	mov	r6, #0x80
	lsl	r6, r6, #0x2
	add	r4, r6, #0
	and	r4, r4, r2
	cmp	r4, #0
	bne	.L1560	@cond_branch
	ldr	r7, .L1635+0x18
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1635+0x1c
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.LCB15939
	bl	.L1574	@far jump
.LCB15939:
	ldr	r0, [r5]
	orr	r0, r0, r6
	str	r0, [r5]
	ldr	r2, .L1635+0x20
	mov	ip, r2
.L1560:
	mov	r3, ip
	ldrb	r0, [r3, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r3, #0x14]
.L1492:
	ldr	r4, [sp, #0x10]
	cmp	r4, #0x1
	bne	.L1566	@cond_branch
	mov	r5, sl
	cmp	r5, #0
	bne	.L1566	@cond_branch
	mov	r0, #0x11
	mov	r1, ip
	strb	r0, [r1, #0x14]
.L1566:
	ldr	r2, [sp, #0x10]
	cmp	r2, #0x2
	bne	.L1491	@cond_branch
	ldr	r4, [sp, #0x14]
	mov	r3, ip
	ldrb	r3, [r3, #0x14]
	cmp	r4, r3
	bne	.L1491	@cond_branch
	mov	r0, #0x11
	mov	r4, ip
	strb	r0, [r4, #0x14]
.L1491:
	mov	r5, ip
	ldrb	r0, [r5, #0x14]
	cmp	r0, #0x11
	beq	.LCB15987
	bl	.L1570	@far jump
.LCB15987:
.L1490:
	mov	r1, ip
	ldrb	r0, [r1, #0x14]
	cmp	r0, #0x11
	bne	.L1482	@cond_branch
	mov	r2, sl
	cmp	r2, #0
	bne	.L1482	@cond_branch
	ldr	r1, .L1635+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x3
.L1577:
	str	r0, [r1]
.L1482:
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1636:
	.align	2, 0
.L1635:
	.word	gHitMarker
	.word	gBattleTypeFlags
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe87:
	.size	 Cmd_moveend,.Lfe87-Cmd_moveend
	.align	2, 0
	.type	 Cmd_typecalc2,function
	.thumb_func
Cmd_typecalc2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r4, #0x0
	mov	r5, #0x0
	ldr	r2, .L1662
	ldr	r0, .L1662+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	r8, r0
	ldr	r2, .L1662+0x8
	ldr	r3, .L1662+0xc
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	ip, r2
	add	r7, r3, #0
	cmp	r0, #0x1a
	bne	.L1638	@cond_branch
	mov	r1, r8
	cmp	r1, #0x4
	bne	.L1638	@cond_branch
	ldr	r3, .L1662+0x10
	strb	r0, [r3]
	ldr	r2, .L1662+0x14
	ldrb	r0, [r2]
	mov	r1, #0x9
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1662+0x18
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r4, [r0]
	ldr	r0, .L1662+0x1c
	mov	r2, r8
	strb	r2, [r0, #0x6]
	ldrb	r0, [r7]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
	b	.L1639
.L1663:
	.align	2, 0
.L1662:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastUsedAbility
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gBattleCommunication
.L1659:
.L1660:
	ldr	r0, .L1664
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1639
.L1665:
	.align	2, 0
.L1664:
	.word	gMoveResultFlags
.L1638:
	ldr	r1, .L1666
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r6, r1, #0
	b	.L1661
.L1667:
	.align	2, 0
.L1666:
	.word	gTypeEffectiveness
.L1643:
	add	r0, r5, r6
	ldrb	r0, [r0]
	cmp	r0, r8
	bne	.L1646	@cond_branch
	add	r2, r5, #0x1
	add	r3, r2, r6
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r0, r0, #0x21
	ldrb	r1, [r3]
	add	r3, r2, #0
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1647	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	cmp	r1, #0
	beq	.L1659	@cond_branch
	cmp	r1, #0x5
	bne	.L1649	@cond_branch
	mov	r0, #0x4
	orr	r4, r4, r0
.L1649:
	cmp	r1, #0x14
	bne	.L1647	@cond_branch
	mov	r0, #0x2
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L1647:
	add	r2, r3, r6
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L1646	@cond_branch
	add	r0, r0, #0x21
	ldrb	r1, [r0]
	cmp	r1, r2
	beq	.L1652	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1660	@cond_branch
.L1652:
	cmp	r1, r2
	beq	.L1653	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bne	.L1653	@cond_branch
	mov	r0, #0x4
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L1653:
	add	r2, r3, r6
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L1646	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L1646	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.L1646	@cond_branch
	mov	r0, #0x2
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L1646:
	add	r5, r5, #0x3
	add	r0, r5, r6
	ldrb	r0, [r0]
.L1661:
	cmp	r0, #0xff
	beq	.L1639	@cond_branch
	cmp	r0, #0xfe
	bne	.L1643	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1646	@cond_branch
.L1639:
	ldr	r2, .L1668
	ldr	r0, .L1668+0x4
	mov	r8, r0
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r6, [r0]
	cmp	r6, #0x19
	bne	.L1656	@cond_branch
	mov	r5, #0x29
	and	r5, r5, r4
	cmp	r5, #0
	bne	.L1656	@cond_branch
	ldr	r0, .L1668+0x8
	ldrb	r0, [r0]
	ldr	r7, .L1668+0xc
	ldrh	r1, [r7]
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bne	.L1656	@cond_branch
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1657	@cond_branch
	mov	r0, #0x6
	and	r4, r4, r0
	cmp	r4, #0x6
	bne	.L1656	@cond_branch
.L1657:
	ldr	r2, .L1668+0x10
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L1656	@cond_branch
	ldr	r3, .L1668+0x14
	strb	r6, [r3]
	ldr	r2, .L1668+0x18
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1668+0x1c
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r5, [r0]
	ldr	r1, .L1668+0x20
	mov	r0, #0x3
	strb	r0, [r1, #0x6]
	ldrb	r0, [r2]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
.L1656:
	ldr	r0, .L1668+0x18
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1658	@cond_branch
	ldr	r2, .L1668+0x24
	ldr	r0, .L1668+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
.L1658:
	ldr	r1, .L1668+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1669:
	.align	2, 0
.L1668:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gBattleMoves
	.word	gLastUsedAbility
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe88:
	.size	 Cmd_typecalc2,.Lfe88-Cmd_typecalc2
	.align	2, 0
	.type	 Cmd_returnatktoball,function
	.thumb_func
Cmd_returnatktoball:
	push	{r4, lr}
	ldr	r4, .L1672
	ldr	r0, .L1672+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r2, .L1672+0x8
	ldr	r1, .L1672+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1671	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitReturnMonToBall
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1671:
	ldr	r1, .L1672+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1673:
	.align	2, 0
.L1672:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe89:
	.size	 Cmd_returnatktoball,.Lfe89-Cmd_returnatktoball
	.align	2, 0
	.type	 Cmd_getswitchedmondata,function
	.thumb_func
Cmd_getswitchedmondata:
	push	{r4, r5, lr}
	ldr	r0, .L1676
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1674	@cond_branch
	ldr	r5, .L1676+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1676+0x8
	strb	r0, [r4]
	ldr	r3, .L1676+0xc
	ldrb	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r3
	ldr	r1, .L1676+0x10
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldr	r1, .L1676+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitGetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L1674:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1677:
	.align	2, 0
.L1676:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBitTable
.Lfe90:
	.size	 Cmd_getswitchedmondata,.Lfe90-Cmd_getswitchedmondata
	.align	2, 0
	.type	 Cmd_switchindataupdate,function
	.thumb_func
Cmd_switchindataupdate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x58
	ldr	r0, .L1692
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB16571
	b	.L1678	@long jump
.LCB16571:
	ldr	r0, .L1692+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1692+0x8
	strb	r0, [r4]
	ldr	r6, .L1692+0xc
	ldrb	r0, [r4]
	mov	r5, #0x58
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	mov	r0, sp
	mov	r2, #0x58
	bl	memcpy
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r3, r0, r6
	mov	r2, #0x0
	ldr	r5, .L1692+0x10
	add	r7, r4, #0
.L1683:
	add	r0, r3, r2
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x4
	add	r1, r2, r1
	add	r1, r1, r5
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x57
	bls	.L1683	@cond_branch
	ldr	r4, .L1692+0xc
	ldrb	r0, [r7]
	mov	r6, #0x58
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r4
	ldr	r3, .L1692+0x14
	ldrh	r1, [r2]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x6]
	add	r2, r2, #0x21
	strb	r0, [r2]
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r4
	ldrh	r2, [r1]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x7]
	add	r1, r1, #0x22
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r4
	ldrh	r0, [r1]
	ldrb	r1, [r1, #0x17]
	lsr	r1, r1, #0x7
	bl	GetAbilityBySpecies
	ldrb	r1, [r7]
	mul	r1, r1, r6
	add	r1, r1, r4
	add	r1, r1, #0x20
	strb	r0, [r1]
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L1692+0x18
	add	r0, r0, #0x29
	add	r0, r2, r0
	ldrb	r1, [r0]
	ldr	r3, .L1692+0x1c
	ldr	r2, .L1692+0x20
	ldrb	r5, [r7]
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r1, r1, r0
	mov	ip, r4
	cmp	r1, #0
	beq	.L1685	@cond_branch
	mov	r0, r5
	mul	r0, r0, r6
	add	r0, r0, ip
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
.L1685:
	ldr	r2, .L1692+0x24
	ldr	r0, .L1692+0x28
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x7f
	bne	.L1686	@cond_branch
	mov	r2, #0x0
	add	r4, r7, #0
	mov	r6, #0x58
	mov	r5, ip
	add	r5, r5, #0x18
	add	r3, sp, #0x18
.L1690:
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r2, r1
	add	r1, r1, r5
	add	r0, r3, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L1690	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [sp, #0x50]
	str	r1, [r0]
.L1686:
	bl	SwitchInClearSetData
	ldr	r0, .L1692+0x2c
	ldr	r3, .L1692+0x8
	ldrb	r2, [r3]
	strb	r2, [r0, #0x17]
	ldr	r1, .L1692+0x30
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	ldr	r2, .L1692+0x20
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L1692+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1678:
	add	sp, sp, #0x58
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1693:
	.align	2, 0
.L1692:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleBufferB
	.word	gSpeciesInfo
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleScripting
	.word	gBattleTextBuff1
.Lfe91:
	.size	 Cmd_switchindataupdate,.Lfe91-Cmd_switchindataupdate
	.align	2, 0
	.type	 Cmd_switchinanim,function
	.thumb_func
Cmd_switchinanim:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1697
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1694	@cond_branch
	ldr	r0, .L1697+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L1697+0x8
	strb	r0, [r6]
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1696	@cond_branch
	ldr	r0, .L1697+0xc
	ldr	r0, [r0]
	ldr	r1, .L1697+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1696	@cond_branch
	ldr	r4, .L1697+0x14
	ldrb	r0, [r6]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r6]
	mul	r1, r1, r5
	add	r4, r4, #0x48
	add	r1, r1, r4
	ldr	r2, [r1]
	mov	r1, #0x2
	bl	HandleSetPokedexFlag
.L1696:
	ldr	r2, .L1697+0x18
	ldr	r1, .L1697+0x1c
	ldr	r5, .L1697+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1697+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r4, .L1697+0x4
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x2]
	mov	r0, #0x0
	bl	BtlController_EmitSwitchInAnim
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
.L1694:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1698:
	.align	2, 0
.L1697:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	0x1aa02
	.word	gBattleMons
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe92:
	.size	 Cmd_switchinanim,.Lfe92-Cmd_switchinanim
	.align	2, 0
	.type	 Cmd_jumpifcantswitch,function
	.thumb_func
Cmd_jumpifcantswitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L1731
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r1
	bl	GetBattlerForBattleScript
	ldr	r3, .L1731+0x4
	strb	r0, [r3]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1700	@cond_branch
	ldr	r1, .L1731+0x8
	ldrb	r3, [r3]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1731+0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1701	@cond_branch
	ldr	r1, .L1731+0x10
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1700	@cond_branch
.L1701:
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1702
.L1732:
	.align	2, 0
.L1731:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	0x400e000
	.word	gStatuses3
.L1700:
	ldr	r5, .L1733
	ldr	r0, [r5]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1703	@cond_branch
	ldr	r4, .L1733+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1733+0x8
	mov	r8, r1
	cmp	r0, #0x1
	bne	.L1704	@cond_branch
	ldr	r0, .L1733+0xc
	mov	r8, r0
.L1704:
	mov	r5, #0x0
	ldrb	r0, [r4]
	bl	GetBattlerMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetLinkTrainerFlankId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1706	@cond_branch
	mov	r5, #0x3
.L1706:
	add	r6, r5, #0x3
	cmp	r5, r6
	bge	.L1708	@cond_branch
	ldr	r7, .L1733+0x10
.L1710:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1709	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1709	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1709	@cond_branch
	ldr	r0, .L1733+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, r5
	bne	.L1708	@cond_branch
.L1709:
	add	r5, r5, #0x1
	cmp	r5, r6
	blt	.L1710	@cond_branch
.L1708:
	cmp	r5, r6
	beq	.L1730	@cond_branch
	b	.L1728
.L1734:
	.align	2, 0
.L1733:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L1703:
	ldr	r0, .L1735
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bne	.L1716	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, [r5]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1717	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L1718
.L1736:
	.align	2, 0
.L1735:
	.word	gActiveBattler
.L1717:
	add	r6, r7, #0
.L1718:
	ldr	r0, .L1737
	mov	r8, r0
	b	.L1719
.L1738:
	.align	2, 0
.L1737:
	.word	gEnemyParty
.L1716:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, [r5]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1720	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L1721
.L1720:
	add	r6, r7, #0
.L1721:
	ldr	r1, .L1739
	mov	r8, r1
.L1719:
	mov	r5, #0x0
.L1725:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1724	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1724	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1724	@cond_branch
	ldr	r1, .L1739+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L1724	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	bne	.L1723	@cond_branch
.L1724:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L1725	@cond_branch
.L1723:
	cmp	r5, #0x6
	bne	.L1728	@cond_branch
.L1730:
	ldr	r3, .L1739+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1702
.L1740:
	.align	2, 0
.L1739:
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
.L1728:
	ldr	r1, .L1741
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
.L1702:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1742:
	.align	2, 0
.L1741:
	.word	gBattlescriptCurrInstr
.Lfe93:
	.size	 Cmd_jumpifcantswitch,.Lfe93-Cmd_jumpifcantswitch
	.align	2, 0
	.type	 ChooseMonToSendOut,function
	.thumb_func
ChooseMonToSendOut:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r4, .L1744
	ldrb	r0, [r4]
	ldr	r5, .L1744+0x4
	ldr	r1, [r5]
	add	r1, r0, r1
	add	r1, r1, #0x58
	ldr	r3, .L1744+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, #0x60
	ldr	r0, [r5]
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	BtlController_EmitChoosePokemon
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1745:
	.align	2, 0
.L1744:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
.Lfe94:
	.size	 ChooseMonToSendOut,.Lfe94-ChooseMonToSendOut
	.align	2, 0
	.type	 Cmd_openpartyscreen,function
	.thumb_func
Cmd_openpartyscreen:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r7, #0x0
	mov	r0, #0x0
	mov	r9, r0
	ldr	r6, .L1829
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r8, r1
	ldrb	r1, [r2, #0x1]
	add	r0, r1, #0
	mov	ip, r6
	cmp	r0, #0x5
	beq	.LCB17305
	b	.L1747	@long jump
.LCB17305:
	ldr	r0, .L1829+0x4
	ldr	r0, [r0]
	mov	r1, #0x41
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.L1748	@cond_branch
	ldr	r1, .L1829+0x8
	strb	r7, [r1]
	ldr	r0, .L1829+0xc
	ldrb	r0, [r0]
	cmp	r7, r0
	bcc	.LCB17322
	b	.L1759	@long jump
.LCB17322:
	ldr	r7, .L1829+0x10
	ldr	r6, .L1829+0x14
	add	r4, r1, #0
	ldr	r2, .L1829+0x18
	mov	r8, r2
.L1752:
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r7]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1753	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1754	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r2, r8
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r7]
	bic	r0, r0, r1
	str	r0, [r7]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1751
.L1830:
	.align	2, 0
.L1829:
	.word	gBattlescriptCurrInstr
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gHitMarker
	.word	gBitTable
	.word	gAbsentBattlerFlags
.L1754:
	ldr	r5, .L1831
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1751	@cond_branch
	mov	r0, #0x6
	bl	ChooseMonToSendOut
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1751
.L1832:
	.align	2, 0
.L1831:
	.word	gSpecialStatuses
.L1753:
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1751:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1833
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1752	@cond_branch
	b	.L1759
.L1834:
	.align	2, 0
.L1833:
	.word	gBattlersCount
.L1748:
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB17459
	b	.L1759	@long jump
.LCB17459:
	ldr	r0, .L1835
	mov	r8, r0
	ldr	r0, [r0]
	lsr	r5, r0, #0x1c
	ldr	r6, .L1835+0x4
	ldr	r0, [r6]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1761	@cond_branch
	ldr	r4, .L1835+0x8
	strb	r7, [r4]
	mov	r0, #0x0
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1762	@cond_branch
	ldr	r2, .L1835+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	mov	r2, r8
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCantSwitch
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1761
.L1836:
	.align	2, 0
.L1835:
	.word	gHitMarker
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
.L1762:
	ldr	r6, .L1837
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1764	@cond_branch
	ldr	r0, .L1837+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5e
	ldrb	r0, [r0]
	bl	ChooseMonToSendOut
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1761
.L1838:
	.align	2, 0
.L1837:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L1764:
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	mov	r0, #0x1
	mov	r9, r0
.L1761:
	ldr	r6, .L1839
	ldr	r0, [r6, #0x8]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1766	@cond_branch
	ldr	r0, [r6]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1766	@cond_branch
	ldr	r4, .L1839+0x4
	mov	r0, #0x2
	strb	r0, [r4]
	mov	r0, #0x2
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1767	@cond_branch
	ldr	r2, .L1839+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1839+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCantSwitch
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1766
.L1840:
	.align	2, 0
.L1839:
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L1767:
	ldr	r6, .L1841
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1769	@cond_branch
	ldr	r0, .L1841+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	bl	ChooseMonToSendOut
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1766
.L1842:
	.align	2, 0
.L1841:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L1769:
	mov	r0, #0x1
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1766	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1766:
	ldr	r6, .L1843
	ldr	r0, [r6, #0x4]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1772	@cond_branch
	ldr	r4, .L1843+0x4
	mov	r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1773	@cond_branch
	ldr	r2, .L1843+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1843+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCantSwitch
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1772
.L1844:
	.align	2, 0
.L1843:
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L1773:
	ldr	r6, .L1845
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1775	@cond_branch
	ldr	r0, .L1845+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5f
	ldrb	r0, [r0]
	bl	ChooseMonToSendOut
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1772
.L1846:
	.align	2, 0
.L1845:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L1775:
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	mov	r0, #0x2
	mov	r2, r9
	orr	r2, r2, r0
	mov	r9, r2
.L1772:
	ldr	r6, .L1847
	ldr	r0, [r6, #0xc]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1777	@cond_branch
	ldr	r0, [r6, #0x4]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1777	@cond_branch
	ldr	r4, .L1847+0x4
	mov	r0, #0x3
	strb	r0, [r4]
	mov	r0, #0x3
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1778	@cond_branch
	ldr	r2, .L1847+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1847+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCantSwitch
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1777
.L1848:
	.align	2, 0
.L1847:
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L1778:
	ldr	r6, .L1849
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1780	@cond_branch
	ldr	r0, .L1849+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5d
	ldrb	r0, [r0]
	bl	ChooseMonToSendOut
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1777
.L1850:
	.align	2, 0
.L1849:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L1780:
	mov	r0, #0x2
	mov	r1, r9
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1777	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1777:
	ldr	r1, .L1851
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1783	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x28
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1783	@cond_branch
	cmp	r5, #0
	beq	.L1783	@cond_branch
	ldr	r0, .L1851+0x4
	ldrb	r1, [r0]
	ldr	r0, .L1851+0x8
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1785	@cond_branch
	ldr	r1, .L1851+0xc
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L1786
.L1852:
	.align	2, 0
.L1851:
	.word	gSpecialStatuses
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gActiveBattler
.L1785:
	ldr	r0, .L1853
	strb	r1, [r0]
.L1786:
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitLinkStandbyMsg
	ldr	r0, .L1853
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
.L1783:
	ldr	r1, .L1853+0x4
	ldrb	r0, [r1, #0x14]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1759	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x3c
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1759	@cond_branch
	cmp	r5, #0
	beq	.L1759	@cond_branch
	ldr	r0, .L1853+0x8
	ldrb	r0, [r0]
	ldr	r1, .L1853+0xc
	ldr	r1, [r1, #0x4]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1789	@cond_branch
	ldr	r1, .L1853
	mov	r0, #0x3
	b	.L1828
.L1854:
	.align	2, 0
.L1853:
	.word	gActiveBattler
	.word	gSpecialStatuses
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L1789:
	ldr	r1, .L1855
	mov	r0, #0x1
.L1828:
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitLinkStandbyMsg
	ldr	r0, .L1855
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
.L1759:
	ldr	r1, .L1855+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	b	.L1791
.L1856:
	.align	2, 0
.L1855:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L1747:
	cmp	r0, #0x6
	beq	.LCB18024
	b	.L1792	@long jump
.LCB18024:
	ldr	r0, .L1857
	ldr	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18031
	b	.L1793	@long jump
.LCB18031:
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB18036
	b	.L1794	@long jump
.LCB18036:
	ldr	r7, .L1857+0x4
	ldr	r0, [r7]
	lsr	r5, r0, #0x1c
	ldr	r4, .L1857+0x8
	ldr	r0, [r4, #0x8]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1795	@cond_branch
	ldr	r0, [r4]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1795	@cond_branch
	ldr	r6, .L1857+0xc
	mov	r0, #0x2
	strb	r0, [r6]
	ldr	r0, .L1857+0x10
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x2
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1796	@cond_branch
	ldr	r2, .L1857+0x14
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r7]
	bic	r0, r0, r1
	str	r0, [r7]
	mov	r0, #0x0
	bl	BtlController_EmitCantSwitch
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
	b	.L1795
.L1858:
	.align	2, 0
.L1857:
	.word	gBattleTypeFlags
	.word	gHitMarker
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleBufferB
	.word	gAbsentBattlerFlags
.L1796:
	ldr	r4, .L1859
	ldrb	r0, [r6]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1795	@cond_branch
	ldr	r0, .L1859+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	bl	ChooseMonToSendOut
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
.L1795:
	ldr	r4, .L1859+0x8
	ldr	r0, [r4, #0xc]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1799	@cond_branch
	ldr	r0, [r4, #0x4]
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L1799	@cond_branch
	ldr	r5, .L1859+0xc
	mov	r0, #0x3
	strb	r0, [r5]
	ldr	r0, .L1859+0x10
	ldr	r2, .L1859+0x14
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x3
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1800	@cond_branch
	ldr	r2, .L1859+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1859+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCantSwitch
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	b	.L1799
.L1860:
	.align	2, 0
.L1859:
	.word	gSpecialStatuses
	.word	gBattleStruct
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleBufferB
	.word	0x201
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L1800:
	ldr	r4, .L1861
	ldrb	r0, [r5]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1799	@cond_branch
	ldr	r0, .L1861+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5d
	ldrb	r0, [r0]
	bl	ChooseMonToSendOut
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
.L1799:
	ldr	r1, .L1861+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	mov	ip, r1
	b	.L1804
.L1862:
	.align	2, 0
.L1861:
	.word	gSpecialStatuses
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.L1794:
.L1793:
	add	r0, r2, #0x6
	str	r0, [r6]
.L1804:
	ldr	r0, .L1863
	ldr	r0, [r0]
	lsr	r5, r0, #0x1c
	ldr	r1, .L1863+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r4, .L1863+0x8
	ldr	r2, [r4]
	and	r2, r2, r5
	ldr	r6, .L1863+0xc
	cmp	r2, #0
	bne	.L1806	@cond_branch
	add	r7, r6, #0
	ldrb	r0, [r6]
	cmp	r2, r0
	bcs	.L1806	@cond_branch
	add	r3, r1, #0
.L1807:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	ldrb	r2, [r3]
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1806	@cond_branch
	ldrb	r0, [r7]
	cmp	r2, r0
	bcc	.L1807	@cond_branch
.L1806:
	ldrb	r0, [r1]
	ldrb	r6, [r6]
	cmp	r0, r6
	beq	.LCB18313
	b	.L1791	@long jump
.LCB18313:
	mov	r1, r8
	mov	r2, ip
	str	r1, [r2]
	b	.L1791
.L1864:
	.align	2, 0
.L1863:
	.word	gHitMarker
	.word	gBattlerFainted
	.word	gBitTable
	.word	gBattlersCount
.L1792:
	mov	r0, #0x80
	and	r0, r0, r1
	mov	r5, #0x1
	cmp	r0, #0
	beq	.L1812	@cond_branch
	mov	r5, #0x0
.L1812:
	mov	r0, #0x7f
	and	r0, r0, r1
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1865
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L1814	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, #0x6
	str	r0, [r6]
	b	.L1791
.L1866:
	.align	2, 0
.L1865:
	.word	gSpecialStatuses
.L1814:
	add	r0, r7, #0
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1816	@cond_branch
	ldr	r2, .L1867
	strb	r7, [r2]
	ldr	r3, .L1867+0x4
	ldr	r4, .L1867+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r1, [r3]
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r3, .L1867+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
	mov	r0, r8
	str	r0, [r6]
	b	.L1791
.L1868:
	.align	2, 0
.L1867:
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gHitMarker
.L1816:
	ldr	r4, .L1869
	strb	r7, [r4]
	ldrb	r0, [r4]
	ldr	r3, .L1869+0x4
	ldr	r1, [r3]
	add	r1, r0, r1
	add	r1, r1, #0x58
	ldr	r2, .L1869+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldr	r3, [r3]
	add	r0, r0, r3
	add	r0, r0, #0x5c
	ldrb	r2, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x60
	add	r3, r3, r0
	str	r3, [sp]
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r3, #0x0
	bl	BtlController_EmitChoosePokemon
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r6]
	add	r0, r0, #0x6
	str	r0, [r6]
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1818	@cond_branch
	ldr	r1, .L1869+0xc
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xfe
	bhi	.L1818	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
.L1818:
	ldr	r0, .L1869+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1819	@cond_branch
	ldr	r1, .L1869
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1869+0x14
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1791	@cond_branch
	add	r4, r1, #0
.L1823:
	ldrb	r0, [r4]
	cmp	r0, r7
	beq	.L1822	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1822:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1869+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1823	@cond_branch
	b	.L1791
.L1870:
	.align	2, 0
.L1869:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gBattleResults
	.word	gBattleTypeFlags
	.word	gBattlersCount
.L1819:
	add	r0, r7, #0
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r4, .L1871
	strb	r0, [r4]
	ldr	r0, .L1871+0x4
	ldrb	r1, [r0]
	ldr	r2, .L1871+0x8
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1827	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	strb	r3, [r4]
.L1827:
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1791:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1872:
	.align	2, 0
.L1871:
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
.Lfe95:
	.size	 Cmd_openpartyscreen,.Lfe95-Cmd_openpartyscreen
	.align	2, 0
	.type	 Cmd_switchhandleorder,function
	.thumb_func
Cmd_switchhandleorder:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1891
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB18598
	b	.L1873	@long jump
.LCB18598:
	ldr	r4, .L1891+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r7, .L1891+0x8
	strb	r0, [r7]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x1
	beq	.L1883	@cond_branch
	cmp	r0, #0x1
	bgt	.L1890	@cond_branch
	cmp	r0, #0
	beq	.L1876	@cond_branch
	b	.L1875
.L1892:
	.align	2, 0
.L1891:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L1890:
	cmp	r0, #0x2
	beq	.L1885	@cond_branch
	b	.L1875
.L1876:
	mov	r3, #0x0
	ldr	r0, .L1893
	ldrb	r1, [r0]
	cmp	r3, r1
	blt	.LCB18639
	b	.L1875	@long jump
.LCB18639:
	ldr	r6, .L1893+0x4
	ldr	r2, .L1893+0x8
	mov	r5, #0x80
	lsl	r5, r5, #0x2
	add	r4, r0, #0
.L1880:
	ldrb	r0, [r2]
	cmp	r0, #0x22
	bne	.L1879	@cond_branch
	ldr	r0, [r6]
	add	r0, r3, r0
	add	r0, r0, #0x5c
	ldrb	r1, [r2, #0x1]
	strb	r1, [r0]
.L1879:
	add	r2, r2, r5
	add	r3, r3, #0x1
	ldrb	r0, [r4]
	cmp	r3, r0
	blt	.L1880	@cond_branch
	b	.L1875
.L1894:
	.align	2, 0
.L1893:
	.word	gBattlersCount
	.word	gBattleStruct
	.word	gBattleBufferB
.L1883:
	ldr	r0, .L1895
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18686
	b	.L1875	@long jump
.LCB18686:
	ldrb	r0, [r7]
	bl	UpdatePartyOwnerOnSwitch_NonMulti
	b	.L1875
.L1896:
	.align	2, 0
.L1895:
	.word	gBattleTypeFlags
.L1885:
	ldr	r1, .L1897
	ldr	r4, .L1897+0x4
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r2, r4, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	ldr	r6, .L1897+0x8
	ldr	r1, [r6]
	add	r1, r0, r1
	add	r1, r1, #0x5c
	lsl	r0, r0, #0x9
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L1897+0xc
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1886	@cond_branch
	ldrb	r0, [r7]
	ldr	r2, [r6]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r2, [r1]
	mov	r0, #0xf
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r7]
	ldr	r2, [r6]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	lsl	r0, r0, #0x9
	add	r5, r4, #0x2
	add	r0, r0, r5
	ldrb	r2, [r0]
	mov	r3, #0xf0
	add	r0, r3, #0
	and	r0, r0, r2
	ldrb	r2, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	ldr	r2, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x61
	lsl	r1, r1, #0x9
	add	r4, r4, #0x3
	mov	ip, r4
	add	r1, r1, ip
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r0, [r7]
	mov	r4, #0x2
	eor	r0, r0, r4
	ldr	r2, [r6]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r2, [r1]
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r7]
	eor	r0, r0, r4
	ldr	r2, [r6]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r0, r0, r5
	ldrb	r0, [r0]
	and	r3, r3, r0
	lsr	r3, r3, #0x4
	ldrb	r0, [r1]
	orr	r3, r3, r0
	strb	r3, [r1]
	ldrb	r0, [r7]
	eor	r4, r4, r0
	ldr	r0, [r6]
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	add	r1, r1, r0
	add	r1, r1, #0x62
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r0, r0, ip
	ldrb	r0, [r0]
	strb	r0, [r1]
	b	.L1887
.L1898:
	.align	2, 0
.L1897:
	.word	gBattleCommunication
	.word	gBattleBufferB
	.word	gBattleStruct
	.word	gBattleTypeFlags
.L1886:
	ldrb	r0, [r7]
	bl	UpdatePartyOwnerOnSwitch_NonMulti
.L1887:
	ldr	r1, .L1899
	mov	r5, #0xfd
	strb	r5, [r1]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	ldr	r4, .L1899+0x4
	ldr	r3, .L1899+0x8
	ldrb	r0, [r3]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r3]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r2, .L1899+0xc
	strb	r5, [r2]
	mov	r0, #0x7
	strb	r0, [r2, #0x1]
	ldr	r3, .L1899+0x10
	ldrb	r0, [r3]
	strb	r0, [r2, #0x2]
	ldr	r1, .L1899+0x14
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2, #0x3]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r2, #0x4]
.L1875:
	ldr	r1, .L1899+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
.L1873:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1900:
	.align	2, 0
.L1899:
	.word	gBattleTextBuff1
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleTextBuff2
	.word	gActiveBattler
	.word	gBattleBufferB
	.word	gBattlescriptCurrInstr
.Lfe96:
	.size	 Cmd_switchhandleorder,.Lfe96-Cmd_switchhandleorder
	.align	2, 0
	.type	 Cmd_switchineffects,function
	.thumb_func
Cmd_switchineffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r6, .L1930
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1930+0x4
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	UpdateSentPokesToOpponentValue
	ldr	r2, .L1930+0x8
	ldr	r1, .L1930+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1930+0x10
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r5, .L1930+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r5
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	mov	r8, r0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1902	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r5
	ldrh	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1902	@cond_branch
	ldr	r1, .L1930+0x18
	mov	r9, r1
	ldrb	r2, [r4]
	mov	r7, #0x58
	mov	r0, r2
	mul	r0, r0, r7
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1902	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1902	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1a
	beq	.L1902	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r5
	ldrh	r2, [r0]
	mov	r1, r8
	orr	r1, r1, r2
	strh	r1, [r0]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r2, .L1930+0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0xa]
	mov	r1, #0x5
	sub	r1, r1, r0
	lsl	r1, r1, #0x19
	lsr	r1, r1, #0x18
	ldr	r5, .L1930+0x20
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2c]
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L1903	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L1903:
	ldr	r0, .L1930+0x24
	ldrb	r1, [r4]
	strb	r1, [r0, #0x17]
	bl	BattleScriptPushCursor
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L1904	@cond_branch
	ldr	r0, .L1930+0x28
	str	r0, [r6]
	b	.L1908
.L1931:
	.align	2, 0
.L1930:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gHitMarker
	.word	gBitTable
	.word	gSpecialStatuses
	.word	gSideStatuses
	.word	gBattleMons
	.word	gSideTimers
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	BattleScript_SpikesOnTarget
.L1904:
	cmp	r0, #0x1
	bne	.L1906	@cond_branch
	ldr	r0, .L1932
	str	r0, [r6]
	b	.L1908
.L1933:
	.align	2, 0
.L1932:
	.word	BattleScript_SpikesOnAttacker
.L1906:
	ldr	r0, .L1934
	str	r0, [r6]
	b	.L1908
.L1935:
	.align	2, 0
.L1934:
	.word	BattleScript_SpikesOnFaintedBattler
.L1902:
	ldr	r1, .L1936
	ldr	r5, .L1936+0x4
	ldrb	r2, [r5]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x36
	bne	.L1909	@cond_branch
	ldr	r1, .L1936+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x18]
.L1909:
	ldrb	r1, [r5]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB19136
	b	.L1908	@long jump
.LCB19136:
	ldrb	r1, [r5]
	mov	r0, #0x0
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1908	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerSide
	ldr	r1, .L1936+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r2, [r0]
	ldr	r1, .L1936+0x10
	and	r1, r1, r2
	strh	r1, [r0]
	mov	r4, #0x0
	ldr	r0, .L1936+0x14
	ldrb	r3, [r0]
	cmp	r4, r3
	bge	.L1912	@cond_branch
	ldr	r6, .L1936+0x18
	ldr	r3, .L1936+0x1c
	mov	r2, #0xc
	add	r1, r0, #0
.L1914:
	add	r0, r4, r6
	ldrb	r0, [r0]
	ldrb	r7, [r5]
	cmp	r0, r7
	bne	.L1913	@cond_branch
	add	r0, r4, r3
	strb	r2, [r0]
.L1913:
	add	r4, r4, #0x1
	ldrb	r0, [r1]
	cmp	r4, r0
	blt	.L1914	@cond_branch
.L1912:
	mov	r4, #0x0
	ldr	r0, .L1936+0x14
	ldrb	r0, [r0]
	cmp	r4, r0
	bge	.L1918	@cond_branch
	ldr	r6, .L1936+0x20
	ldr	r5, .L1936
.L1920:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, #0xa8
	ldr	r1, [r6]
	add	r1, r1, r0
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x28]
	strh	r0, [r1]
	add	r4, r4, #0x1
	ldr	r0, .L1936+0x14
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L1920	@cond_branch
.L1918:
	ldr	r0, .L1936+0x24
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x5
	bne	.L1922	@cond_branch
	ldr	r0, .L1936+0x28
	ldr	r0, [r0]
	lsr	r4, r0, #0x1c
	ldr	r1, .L1936+0x2c
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, .L1936+0x30
	b	.L1929
.L1937:
	.align	2, 0
.L1936:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gSideStatuses
	.word	0xfdff
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
	.word	gActionsByTurnOrder
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	gHitMarker
	.word	gBattlerFainted
	.word	gBitTable
.L1926:
	ldr	r0, .L1938
	ldrb	r3, [r1]
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L1922	@cond_branch
	add	r0, r3, #0x1
	strb	r0, [r1]
.L1929:
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r3, [r0]
	add	r0, r4, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1926	@cond_branch
	ldr	r0, .L1938+0x4
	ldrb	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L1926	@cond_branch
.L1922:
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L1908:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1939:
	.align	2, 0
.L1938:
	.word	gBattlersCount
	.word	gAbsentBattlerFlags
.Lfe97:
	.size	 Cmd_switchineffects,.Lfe97-Cmd_switchineffects
	.align	2, 0
	.type	 Cmd_trainerslidein,function
	.thumb_func
Cmd_trainerslidein:
	push	{lr}
	ldr	r0, .L1944
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L1941	@cond_branch
	mov	r0, #0x0
	b	.L1943
.L1945:
	.align	2, 0
.L1944:
	.word	gBattlescriptCurrInstr
.L1941:
	mov	r0, #0x1
.L1943:
	bl	GetBattlerAtPosition
	ldr	r1, .L1946
	strb	r0, [r1]
	mov	r0, #0x0
	bl	BtlController_EmitTrainerSlide
	ldr	r0, .L1946
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1946+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1947:
	.align	2, 0
.L1946:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.Lfe98:
	.size	 Cmd_trainerslidein,.Lfe98-Cmd_trainerslidein
	.align	2, 0
	.type	 Cmd_playse,function
	.thumb_func
Cmd_playse:
	push	{r4, r5, lr}
	ldr	r5, .L1949
	ldr	r0, .L1949+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L1949+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	BtlController_EmitPlaySE
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1950:
	.align	2, 0
.L1949:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe99:
	.size	 Cmd_playse,.Lfe99-Cmd_playse
	.align	2, 0
	.type	 Cmd_fanfare,function
	.thumb_func
Cmd_fanfare:
	push	{r4, r5, lr}
	ldr	r5, .L1952
	ldr	r0, .L1952+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L1952+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	BtlController_EmitPlayFanfare
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1953:
	.align	2, 0
.L1952:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe100:
	.size	 Cmd_fanfare,.Lfe100-Cmd_fanfare
	.align	2, 0
	.type	 Cmd_playfaintcry,function
	.thumb_func
Cmd_playfaintcry:
	push	{r4, r5, lr}
	ldr	r5, .L1955
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1955+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitFaintingCry
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1956:
	.align	2, 0
.L1955:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe101:
	.size	 Cmd_playfaintcry,.Lfe101-Cmd_playfaintcry
	.align	2, 0
	.type	 Cmd_endlinkbattle,function
	.thumb_func
Cmd_endlinkbattle:
	push	{r4, lr}
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r4, .L1958
	strb	r0, [r4]
	ldr	r0, .L1958+0x4
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitEndLinkBattle
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1958+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1959:
	.align	2, 0
.L1958:
	.word	gActiveBattler
	.word	gBattleOutcome
	.word	gBattlescriptCurrInstr
.Lfe102:
	.size	 Cmd_endlinkbattle,.Lfe102-Cmd_endlinkbattle
	.align	2, 0
	.type	 Cmd_returntoball,function
	.thumb_func
Cmd_returntoball:
	push	{r4, r5, lr}
	ldr	r5, .L1961
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1961+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitReturnMonToBall
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1962:
	.align	2, 0
.L1961:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe103:
	.size	 Cmd_returntoball,.Lfe103-Cmd_returntoball
	.align	2, 0
	.type	 Cmd_handlelearnnewmove,function
	.thumb_func
Cmd_handlelearnnewmove:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1975
	ldr	r2, [r0]
	ldrb	r6, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r6, r6, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r6, r6, r0
	ldrb	r4, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r0, .L1975+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1975+0x8
	add	r0, r0, r1
	ldrb	r1, [r2, #0x9]
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L1975+0xc
	cmp	r5, r0
	bne	.L1965	@cond_branch
	add	r7, r5, #0
.L1966:
	ldr	r0, .L1975+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1975+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r7
	beq	.L1966	@cond_branch
.L1965:
	cmp	r5, #0
	bne	.L1968	@cond_branch
	ldr	r0, .L1975
	str	r4, [r0]
	b	.L1969
.L1976:
	.align	2, 0
.L1975:
	.word	gBattlescriptCurrInstr
	.word	gBattleStruct
	.word	gPlayerParty
	.word	0xfffe
.L1968:
	ldr	r0, .L1977
	cmp	r5, r0
	bne	.L1970	@cond_branch
	ldr	r1, .L1977+0x4
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L1969
.L1978:
	.align	2, 0
.L1977:
	.word	0xffff
	.word	gBattlescriptCurrInstr
.L1970:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L1979
	strb	r0, [r1]
	ldr	r2, .L1979+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldr	r1, .L1979+0x8
	ldr	r1, [r1]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L1972	@cond_branch
	ldr	r4, .L1979+0xc
	mov	r0, #0x58
	mov	r2, r3
	mul	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1972	@cond_branch
	add	r0, r2, r4
	add	r1, r5, #0
	bl	GiveMoveToBattleMon
.L1972:
	ldr	r0, .L1979+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1973	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	ldr	r1, .L1979
	strb	r0, [r1]
	ldr	r2, .L1979+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldr	r1, .L1979+0x8
	ldr	r1, [r1]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L1973	@cond_branch
	ldr	r4, .L1979+0xc
	mov	r0, #0x58
	mov	r2, r3
	mul	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1973	@cond_branch
	add	r0, r2, r4
	add	r1, r5, #0
	bl	GiveMoveToBattleMon
.L1973:
	ldr	r0, .L1979+0x14
	str	r6, [r0]
.L1969:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1980:
	.align	2, 0
.L1979:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
.Lfe104:
	.size	 Cmd_handlelearnnewmove,.Lfe104-Cmd_handlelearnnewmove
	.align	2, 0
	.type	 Cmd_yesnoboxlearnmove,function
	.thumb_func
Cmd_yesnoboxlearnmove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r0, .L2009
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L2009+0x4
	ldrb	r1, [r0, #0x1f]
	add	r2, r0, #0
	cmp	r1, #0x5
	bls	.LCB19781
	b	.L1982	@long jump
.LCB19781:
	lsl	r0, r1, #0x2
	ldr	r1, .L2009+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2010:
	.align	2, 0
.L2009:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	.L2005
	.align	2, 0
	.align	2, 0
.L2005:
	.word	.L1983
	.word	.L1984
	.word	.L1992
	.word	.L1994
	.word	.L2002
	.word	.L2003
.L1983:
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L2011
	mov	r1, #0xe
	bl	BattlePutTextOnWindow
	ldr	r1, .L2011+0x4
	ldrb	r0, [r1, #0x1f]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1f]
	ldr	r0, .L2011+0x8
	strb	r4, [r0, #0x1]
	bl	BattleCreateYesNoCursorAt
	b	.L1982
.L2012:
	.align	2, 0
.L2011:
	.word	gText_BattleYesNoChoice
	.word	gBattleScripting
	.word	gBattleCommunication
.L1984:
	ldr	r0, .L2013
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1985	@cond_branch
	ldr	r4, .L2013+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L1985	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L1985:
	ldr	r0, .L2013
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1986	@cond_branch
	ldr	r4, .L2013+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L1986	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L1986:
	ldr	r0, .L2013
	ldrh	r1, [r0, #0x2e]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1987	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L2013+0x4
	ldrb	r4, [r0, #0x1]
	cmp	r4, #0
	bne	.L2008	@cond_branch
	str	r5, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L2007
.L2014:
	.align	2, 0
.L2013:
	.word	gMain
	.word	gBattleCommunication
.L1987:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB19938
	b	.L1982	@long jump
.LCB19938:
	mov	r0, #0x5
	bl	PlaySE
.L2008:
	ldr	r1, .L2015
	mov	r0, #0x4
	strb	r0, [r1, #0x1f]
	b	.L1982
.L2016:
	.align	2, 0
.L2015:
	.word	gBattleScripting
.L1992:
	ldr	r0, .L2017
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19962
	b	.L1982	@long jump
.LCB19962:
	bl	FreeAllWindowBuffers
	ldr	r0, .L2017+0x4
	ldr	r1, .L2017+0x8
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x10]
	ldr	r2, .L2017+0xc
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L2017+0x10
	ldr	r4, .L2017+0x14
	ldrh	r4, [r4]
	str	r4, [sp]
	bl	ShowSelectMovePokemonSummaryScreen
.L2007:
	ldr	r1, .L2017+0x18
	ldrb	r0, [r1, #0x1f]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1f]
	b	.L1982
.L2018:
	.align	2, 0
.L2017:
	.word	gPaletteFade
	.word	gPlayerParty
	.word	gBattleStruct
	.word	gPlayerPartyCount
	.word	ReshowBattleScreenAfterMenu
	.word	gMoveToLearn
	.word	gBattleScripting
.L1994:
	ldr	r0, .L2019
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20010
	b	.L1982	@long jump
.LCB20010:
	ldr	r0, .L2019+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L2019+0x8
	cmp	r1, r0
	beq	.LCB20015
	b	.L1982	@long jump
.LCB20015:
	bl	GetMoveSlotToReplace
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bne	.L1996	@cond_branch
	ldr	r0, .L2019+0xc
	strb	r5, [r0, #0x1f]
	b	.L1982
.L2020:
	.align	2, 0
.L2019:
	.word	gPaletteFade
	.word	gMain
	.word	BattleMainCB2
	.word	gBattleScripting
.L1996:
	ldr	r6, .L2021
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r7, .L2021+0x4
	add	r0, r0, r7
	add	r1, r5, #0
	add	r1, r1, #0xd
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	bl	IsHMMove2
	cmp	r0, #0
	beq	.L1998	@cond_branch
	ldr	r0, .L2021+0x8
	ldr	r1, .L2021+0xc
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r1, .L2021+0x10
	mov	r0, #0x5
	strb	r0, [r1, #0x1f]
	b	.L1982
.L2022:
	.align	2, 0
.L2021:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	0x13f
	.word	gActiveBattler
	.word	gBattleScripting
.L1998:
	ldr	r3, .L2023
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	ldr	r1, .L2023+0x4
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	add	r1, r5, #0
	bl	RemoveMonPPBonus
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	ldr	r7, .L2023+0x8
	ldrh	r1, [r7]
	add	r2, r5, #0
	bl	SetMonMoveSlot
	ldr	r0, .L2023+0xc
	ldr	r1, [r6]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L2000	@cond_branch
	ldr	r4, .L2023+0x10
	ldr	r0, [r4, #0x50]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2000	@cond_branch
	ldr	r0, .L2023+0x14
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L2023+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2000	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	RemoveBattleMonPPBonus
	ldrh	r1, [r7]
	add	r0, r4, #0
	add	r2, r5, #0
	bl	SetBattleMonMoveSlot
.L2000:
	ldr	r0, .L2023+0x1c
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1982	@cond_branch
	ldr	r2, .L2023+0xc
	ldr	r0, .L2023+0x20
	ldr	r1, [r0]
	ldrh	r0, [r2, #0x4]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L1982	@cond_branch
	ldr	r4, .L2023+0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1982	@cond_branch
	ldr	r0, .L2023+0x14
	add	r0, r0, #0x50
	ldrb	r1, [r0]
	lsr	r1, r1, #0x4
	ldr	r2, .L2023+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1982	@cond_branch
	add	r4, r4, #0xb0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	RemoveBattleMonPPBonus
	ldr	r0, .L2023+0x8
	ldrh	r1, [r0]
	add	r0, r4, #0
	add	r2, r5, #0
	bl	SetBattleMonMoveSlot
	b	.L1982
.L2024:
	.align	2, 0
.L2023:
	.word	gBattlescriptCurrInstr
	.word	gBattleTextBuff2
	.word	gMoveToLearn
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L2002:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r1, .L2025
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L1982
.L2026:
	.align	2, 0
.L2025:
	.word	gBattlescriptCurrInstr
.L2003:
	ldr	r0, .L2027
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1982	@cond_branch
	mov	r0, #0x2
	strb	r0, [r2, #0x1f]
.L1982:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2028:
	.align	2, 0
.L2027:
	.word	gBattleControllerExecFlags
.Lfe105:
	.size	 Cmd_yesnoboxlearnmove,.Lfe105-Cmd_yesnoboxlearnmove
	.align	2, 0
	.type	 Cmd_yesnoboxstoplearningmove,function
	.thumb_func
Cmd_yesnoboxstoplearningmove:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L2042
	ldrb	r4, [r5, #0x1f]
	cmp	r4, #0
	beq	.L2031	@cond_branch
	cmp	r4, #0x1
	beq	.L2032	@cond_branch
	b	.L2030
.L2043:
	.align	2, 0
.L2042:
	.word	gBattleScripting
.L2031:
	str	r4, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L2044
	mov	r1, #0xe
	bl	BattlePutTextOnWindow
	ldrb	r0, [r5, #0x1f]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x1f]
	ldr	r0, .L2044+0x4
	strb	r4, [r0, #0x1]
	bl	BattleCreateYesNoCursorAt
	b	.L2030
.L2045:
	.align	2, 0
.L2044:
	.word	gText_BattleYesNoChoice
	.word	gBattleCommunication
.L2032:
	ldr	r0, .L2046
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2033	@cond_branch
	ldr	r4, .L2046+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L2033	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2033:
	ldr	r0, .L2046
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2034	@cond_branch
	ldr	r4, .L2046+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L2034	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2034:
	ldr	r0, .L2046
	ldrh	r1, [r0, #0x2e]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2035	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L2046+0x4
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L2036	@cond_branch
	ldr	r3, .L2046+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2037
.L2047:
	.align	2, 0
.L2046:
	.word	gMain
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L2036:
	ldr	r1, .L2048
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2037:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	b	.L2030
.L2049:
	.align	2, 0
.L2048:
	.word	gBattlescriptCurrInstr
.L2035:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2030	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r3, .L2050
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	str	r4, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
.L2030:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2051:
	.align	2, 0
.L2050:
	.word	gBattlescriptCurrInstr
.Lfe106:
	.size	 Cmd_yesnoboxstoplearningmove,.Lfe106-Cmd_yesnoboxstoplearningmove
	.align	2, 0
	.type	 Cmd_hitanimation,function
	.thumb_func
Cmd_hitanimation:
	push	{r4, lr}
	ldr	r4, .L2058
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r2, .L2058+0x4
	strb	r0, [r2]
	ldr	r0, .L2058+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2055	@cond_branch
	ldr	r0, .L2058+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2056	@cond_branch
	ldr	r1, .L2058+0x10
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2056	@cond_branch
	ldr	r0, .L2058+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L2055	@cond_branch
.L2056:
	mov	r0, #0x0
	bl	BtlController_EmitHitAnimation
	ldr	r0, .L2058+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2058
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	b	.L2054
.L2059:
	.align	2, 0
.L2058:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gMoveResultFlags
	.word	gHitMarker
	.word	gBattleMons
	.word	gDisableStructs
.L2055:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
.L2054:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe107:
	.size	 Cmd_hitanimation,.Lfe107-Cmd_hitanimation
	.align	2, 0
	.type	 Cmd_getmoneyreward,function
	.thumb_func
Cmd_getmoneyreward:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r0, .L2084
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB20605
	b	.L2061	@long jump
.LCB20605:
	ldr	r0, .L2084+0x4
	ldrh	r2, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	cmp	r2, r1
	bne	.L2062	@cond_branch
	ldr	r0, .L2084+0x8
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0x94
	ldrb	r2, [r0]
	ldr	r0, .L2084+0xc
	ldr	r0, [r0]
	add	r0, r0, #0x4a
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r4, r2
	mul	r4, r4, r0
	ldr	r0, .L2084+0x10
	mov	r8, r0
	b	.L2063
.L2085:
	.align	2, 0
.L2084:
	.word	gBattleOutcome
	.word	gTrainerBattleOpponent_A
	.word	gBattleResources
	.word	gBattleStruct
	.word	gSaveBlock1Ptr
.L2062:
	ldr	r2, .L2086
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r3, r0, #0x3
	add	r4, r3, r2
	ldrb	r1, [r4]
	cmp	r1, #0x1
	beq	.L2068	@cond_branch
	cmp	r1, #0x1
	bgt	.L2071	@cond_branch
	cmp	r1, #0
	beq	.L2065	@cond_branch
	b	.L2064
.L2087:
	.align	2, 0
.L2086:
	.word	gTrainers
.L2071:
	cmp	r1, #0x2
	beq	.L2067	@cond_branch
	cmp	r1, #0x3
	beq	.L2068	@cond_branch
	b	.L2064
.L2065:
	add	r0, r2, #0
	add	r0, r0, #0x24
	add	r0, r3, r0
	ldr	r1, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	sub	r0, r0, #0x8
	b	.L2083
.L2067:
	add	r0, r2, #0
	add	r0, r0, #0x24
	add	r0, r3, r0
	ldr	r1, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	sub	r0, r0, #0x8
	b	.L2083
.L2068:
	add	r0, r2, #0
	add	r0, r0, #0x24
	add	r0, r3, r0
	ldr	r1, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	sub	r0, r0, #0x10
.L2083:
	ldrb	r5, [r0, #0x2]
.L2064:
	ldr	r0, .L2088
	lsl	r1, r6, #0x2
	add	r3, r1, r0
	ldrb	r1, [r3]
	ldr	r7, .L2088+0x4
	mov	ip, r0
	lsl	r4, r5, #0x2
	ldr	r5, .L2088+0x8
	ldr	r0, .L2088+0xc
	mov	r8, r0
	cmp	r1, #0xff
	beq	.L2073	@cond_branch
	ldr	r2, .L2088+0x10
	ldr	r0, .L2088+0x14
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0x1]
	add	r1, r3, #0
.L2075:
	ldrb	r0, [r1]
	cmp	r0, r2
	beq	.L2073	@cond_branch
	add	r1, r1, #0x4
	add	r6, r6, #0x1
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L2075	@cond_branch
.L2073:
	ldr	r0, [r7]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	mov	r3, r4
	mul	r3, r3, r0
	lsl	r0, r6, #0x2
	add	r0, r0, ip
	ldrb	r2, [r0, #0x1]
	ldr	r0, [r5]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2078	@cond_branch
	lsl	r0, r2, #0x1
	mov	r4, r3
	mul	r4, r4, r0
	b	.L2063
.L2089:
	.align	2, 0
.L2088:
	.word	gTrainerMoneyTable
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	gSaveBlock1Ptr
	.word	gTrainers
	.word	gTrainerBattleOpponent_A
.L2078:
	mov	r4, r3
	mul	r4, r4, r2
.L2063:
	mov	r1, r8
	ldr	r0, [r1]
	mov	r1, #0xa4
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	add	r1, r4, #0
	bl	AddMoney
	b	.L2080
.L2061:
	bl	ComputeWhiteOutMoneyLoss
	add	r4, r0, #0
.L2080:
	ldr	r1, .L2090
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x4
	strb	r0, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x3]
	strb	r4, [r1, #0x4]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r4
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r4
	lsr	r0, r0, #0x10
	strb	r0, [r1, #0x6]
	lsr	r0, r4, #0x18
	strb	r0, [r1, #0x7]
	mov	r0, #0xff
	strb	r0, [r1, #0x8]
	cmp	r4, #0
	beq	.L2081	@cond_branch
	ldr	r1, .L2090+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2082
.L2091:
	.align	2, 0
.L2090:
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L2081:
	ldr	r3, .L2092
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2082:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2093:
	.align	2, 0
.L2092:
	.word	gBattlescriptCurrInstr
.Lfe108:
	.size	 Cmd_getmoneyreward,.Lfe108-Cmd_getmoneyreward
	.align	2, 0
	.type	 Cmd_updatebattlermoves,function
	.thumb_func
Cmd_updatebattlermoves:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L2106
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L2106+0x4
	strb	r0, [r6]
	ldr	r5, .L2106+0x8
	ldrb	r0, [r5]
	mov	r8, r4
	cmp	r0, #0
	beq	.L2096	@cond_branch
	cmp	r0, #0x1
	beq	.L2097	@cond_branch
	b	.L2095
.L2107:
	.align	2, 0
.L2106:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleCommunication
.L2096:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BtlController_EmitGetMonData
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L2095
.L2097:
	ldr	r0, .L2108
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2095	@cond_branch
	ldrb	r0, [r6]
	lsl	r0, r0, #0x9
	ldr	r1, .L2108+0x4
	add	r0, r0, r1
	mov	ip, r0
	mov	r2, #0x0
	add	r4, r6, #0
	mov	r5, #0x58
	ldr	r6, .L2108+0x8
	add	r7, r6, #0
	sub	r7, r7, #0x18
	mov	r3, ip
	add	r3, r3, #0xc
.L2102:
	lsl	r1, r2, #0x1
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r7
	ldrh	r0, [r3]
	strh	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r2, r1
	add	r1, r1, r6
	mov	r0, ip
	add	r0, r0, #0x24
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L2102	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L2095:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2109:
	.align	2, 0
.L2108:
	.word	gBattleControllerExecFlags
	.word	gBattleBufferB+0x4
	.word	gBattleMons+0x24
.Lfe109:
	.size	 Cmd_updatebattlermoves,.Lfe109-Cmd_updatebattlermoves
	.align	2, 0
	.type	 Cmd_swapattackerwithtarget,function
	.thumb_func
Cmd_swapattackerwithtarget:
	push	{lr}
	ldr	r0, .L2114
	ldr	r2, .L2114+0x4
	ldrb	r3, [r2]
	strb	r3, [r0]
	ldr	r1, .L2114+0x8
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	ldr	r2, .L2114+0xc
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2111	@cond_branch
	ldr	r0, .L2114+0x10
	and	r1, r1, r0
	b	.L2113
.L2115:
	.align	2, 0
.L2114:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gHitMarker
	.word	-0x1001
.L2111:
	orr	r1, r1, r3
.L2113:
	str	r1, [r2]
	ldr	r1, .L2116
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2117:
	.align	2, 0
.L2116:
	.word	gBattlescriptCurrInstr
.Lfe110:
	.size	 Cmd_swapattackerwithtarget,.Lfe110-Cmd_swapattackerwithtarget
	.align	2, 0
	.type	 Cmd_incrementgamestat,function
	.thumb_func
Cmd_incrementgamestat:
	push	{lr}
	ldr	r0, .L2120
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2119	@cond_branch
	ldr	r0, .L2120+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	IncrementGameStat
.L2119:
	ldr	r1, .L2120+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2121:
	.align	2, 0
.L2120:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe111:
	.size	 Cmd_incrementgamestat,.Lfe111-Cmd_incrementgamestat
	.align	2, 0
	.type	 Cmd_drawpartystatussummary,function
	.thumb_func
Cmd_drawpartystatussummary:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x30
	ldr	r0, .L2135
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2122	@cond_branch
	ldr	r0, .L2135+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L2135+0x8
	strb	r0, [r1]
	ldrb	r0, [r1]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L2135+0xc
	mov	r8, r1
	cmp	r0, #0
	bne	.L2124	@cond_branch
	ldr	r0, .L2135+0x10
	mov	r8, r0
.L2124:
	mov	r7, #0x0
	add	r6, sp, #0x4
	mov	r5, sp
.L2129:
	mov	r0, #0x64
	mul	r0, r0, r7
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L2131	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L2135+0x14
	cmp	r0, r1
	bne	.L2130	@cond_branch
.L2131:
	ldr	r0, .L2135+0x18
	strh	r0, [r5]
	mov	r0, #0x0
	b	.L2134
.L2136:
	.align	2, 0
.L2135:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x19d
	.word	0xffff
.L2130:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
.L2134:
	str	r0, [r6]
	add	r6, r6, #0x8
	add	r5, r5, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L2129	@cond_branch
	mov	r0, #0x0
	mov	r1, sp
	mov	r2, #0x1
	bl	BtlController_EmitDrawPartyStatusSummary
	ldr	r0, .L2137
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2137+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L2122:
	add	sp, sp, #0x30
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2138:
	.align	2, 0
.L2137:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.Lfe112:
	.size	 Cmd_drawpartystatussummary,.Lfe112-Cmd_drawpartystatussummary
	.align	2, 0
	.type	 Cmd_hidepartystatussummary,function
	.thumb_func
Cmd_hidepartystatussummary:
	push	{r4, r5, lr}
	ldr	r5, .L2140
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2140+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitHidePartyStatusSummary
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2141:
	.align	2, 0
.L2140:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe113:
	.size	 Cmd_hidepartystatussummary,.Lfe113-Cmd_hidepartystatussummary
	.align	2, 0
	.type	 Cmd_jumptocalledmove,function
	.thumb_func
Cmd_jumptocalledmove:
	push	{r4, lr}
	ldr	r0, .L2145
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0
	beq	.L2143	@cond_branch
	ldr	r0, .L2145+0x4
	ldr	r1, .L2145+0x8
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L2144
.L2146:
	.align	2, 0
.L2145:
	.word	gBattlescriptCurrInstr
	.word	gCurrentMove
	.word	gCalledMove
.L2143:
	ldr	r2, .L2147
	ldr	r1, .L2147+0x4
	ldr	r0, .L2147+0x8
	ldrh	r0, [r0]
	strh	r0, [r1]
	strh	r0, [r2]
	add	r0, r1, #0
.L2144:
	ldr	r3, .L2147+0xc
	ldr	r2, .L2147+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2148:
	.align	2, 0
.L2147:
	.word	gChosenMove
	.word	gCurrentMove
	.word	gCalledMove
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
.Lfe114:
	.size	 Cmd_jumptocalledmove,.Lfe114-Cmd_jumptocalledmove
	.align	2, 0
	.type	 Cmd_statusanimation,function
	.thumb_func
Cmd_statusanimation:
	push	{r4, lr}
	ldr	r0, .L2152
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2150	@cond_branch
	ldr	r0, .L2152+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2152+0x8
	strb	r0, [r4]
	ldr	r1, .L2152+0xc
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2152+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2151	@cond_branch
	ldr	r0, .L2152+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L2151	@cond_branch
	ldr	r0, .L2152+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2151	@cond_branch
	ldr	r1, .L2152+0x1c
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitStatusAnimation
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L2151:
	ldr	r1, .L2152+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L2150:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2153:
	.align	2, 0
.L2152:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
	.word	0x400c0
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMons
.Lfe115:
	.size	 Cmd_statusanimation,.Lfe115-Cmd_statusanimation
	.align	2, 0
	.type	 Cmd_status2animation,function
	.thumb_func
Cmd_status2animation:
	push	{r4, r5, lr}
	ldr	r0, .L2157
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2155	@cond_branch
	ldr	r4, .L2157+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L2157+0x8
	strb	r0, [r5]
	ldr	r1, [r4]
	ldrb	r3, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r1, .L2157+0xc
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2157+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2156	@cond_branch
	ldr	r0, .L2157+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L2156	@cond_branch
	ldr	r0, .L2157+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2156	@cond_branch
	ldr	r1, .L2157+0x1c
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r2, [r0]
	and	r2, r2, r3
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitStatusAnimation
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
.L2156:
	ldr	r1, .L2157+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
.L2155:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2158:
	.align	2, 0
.L2157:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
	.word	0x400c0
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMons
.Lfe116:
	.size	 Cmd_status2animation,.Lfe116-Cmd_status2animation
	.align	2, 0
	.type	 Cmd_chosenstatusanimation,function
	.thumb_func
Cmd_chosenstatusanimation:
	push	{r4, r5, lr}
	ldr	r0, .L2162
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2160	@cond_branch
	ldr	r4, .L2162+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L2162+0x8
	strb	r0, [r5]
	ldr	r4, [r4]
	ldrb	r2, [r4, #0x3]
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x6]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L2162+0xc
	ldrb	r3, [r5]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2162+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2161	@cond_branch
	ldr	r0, .L2162+0x14
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L2161	@cond_branch
	ldr	r0, .L2162+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2161	@cond_branch
	ldrb	r1, [r4, #0x2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusAnimation
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
.L2161:
	ldr	r1, .L2162+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
.L2160:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2163:
	.align	2, 0
.L2162:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
	.word	0x400c0
	.word	gDisableStructs
	.word	gHitMarker
.Lfe117:
	.size	 Cmd_chosenstatusanimation,.Lfe117-Cmd_chosenstatusanimation
	.align	2, 0
	.type	 Cmd_yesnobox,function
	.thumb_func
Cmd_yesnobox:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L2176
	ldrb	r4, [r5]
	cmp	r4, #0
	beq	.L2166	@cond_branch
	cmp	r4, #0x1
	beq	.L2167	@cond_branch
	b	.L2165
.L2177:
	.align	2, 0
.L2176:
	.word	gBattleCommunication
.L2166:
	str	r4, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L2178
	mov	r1, #0xe
	bl	BattlePutTextOnWindow
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	strb	r4, [r5, #0x1]
	bl	BattleCreateYesNoCursorAt
	b	.L2165
.L2179:
	.align	2, 0
.L2178:
	.word	gText_BattleYesNoChoice
.L2167:
	ldr	r0, .L2180
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2168	@cond_branch
	ldrb	r0, [r5, #0x1]
	cmp	r0, #0
	beq	.L2168	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r5, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2168:
	ldr	r0, .L2180
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2169	@cond_branch
	ldr	r4, .L2180+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L2169	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2169:
	ldr	r0, .L2180
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2170	@cond_branch
	ldr	r0, .L2180+0x4
	mov	r4, #0x1
	strb	r4, [r0, #0x1]
	b	.L2175
.L2181:
	.align	2, 0
.L2180:
	.word	gMain
	.word	gBattleCommunication
.L2170:
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2165	@cond_branch
.L2175:
	mov	r0, #0x5
	bl	PlaySE
	str	r4, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r1, .L2182
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2165:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2183:
	.align	2, 0
.L2182:
	.word	gBattlescriptCurrInstr
.Lfe118:
	.size	 Cmd_yesnobox,.Lfe118-Cmd_yesnobox
	.align	2, 0
	.type	 Cmd_cancelallactions,function
	.thumb_func
Cmd_cancelallactions:
	push	{r4, r5, lr}
	mov	r1, #0x0
	ldr	r2, .L2190
	ldr	r5, .L2190+0x4
	ldrb	r0, [r2]
	cmp	r1, r0
	bge	.L2186	@cond_branch
	ldr	r4, .L2190+0x8
	mov	r3, #0xc
.L2188:
	add	r0, r1, r4
	strb	r3, [r0]
	add	r1, r1, #0x1
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L2188	@cond_branch
.L2186:
	ldr	r0, [r5]
	add	r0, r0, #0x1
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2191:
	.align	2, 0
.L2190:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gActionsByTurnOrder
.Lfe119:
	.size	 Cmd_cancelallactions,.Lfe119-Cmd_cancelallactions
	.align	2, 0
	.type	 Cmd_adjustsetdamage,function
	.thumb_func
Cmd_adjustsetdamage:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L2201
	ldr	r6, .L2201+0x4
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L2193	@cond_branch
	ldr	r1, .L2201+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L2194
.L2202:
	.align	2, 0
.L2201:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gEnigmaBerries
.L2193:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L2194:
	ldr	r1, .L2203
	ldr	r5, .L2203+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L2195	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L2195	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemEffectBattle
	ldr	r2, .L2203+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L2195:
	ldr	r2, .L2203+0xc
	ldr	r3, .L2203+0x4
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r1, r1, r0
	add	r5, r2, #0
	cmp	r1, #0
	bne	.L2196	@cond_branch
	ldr	r2, .L2203+0x10
	ldr	r0, .L2203+0x14
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x65
	beq	.L2197	@cond_branch
	ldr	r0, .L2203+0x18
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.L2197	@cond_branch
	ldr	r0, .L2203+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L2196	@cond_branch
.L2197:
	ldrb	r0, [r3]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r1, [r0, #0x28]
	ldr	r2, .L2203+0x1c
	ldr	r0, [r2]
	cmp	r1, r0
	bgt	.L2196	@cond_branch
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldr	r1, .L2203+0x18
	ldrb	r3, [r3]
	lsl	r0, r3, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L2198	@cond_branch
	ldr	r0, .L2203+0x20
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2196
.L2204:
	.align	2, 0
.L2203:
	.word	gPotentialItemEffectBattler
	.word	gBattlerTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
.L2198:
	ldr	r0, .L2205
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L2196	@cond_branch
	ldr	r2, .L2205+0x4
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2205+0x8
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
.L2196:
	ldr	r1, .L2205+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2206:
	.align	2, 0
.L2205:
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe120:
	.size	 Cmd_adjustsetdamage,.Lfe120-Cmd_adjustsetdamage
	.align	2, 0
	.type	 Cmd_removeitem,function
	.thumb_func
Cmd_removeitem:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L2208
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L2208+0x4
	strb	r0, [r5]
	ldr	r1, .L2208+0x8
	ldrb	r4, [r5]
	lsl	r0, r4, #0x1
	add	r0, r0, #0xb8
	ldr	r1, [r1]
	add	r1, r1, r0
	ldr	r2, .L2208+0xc
	mov	r3, #0x58
	mov	r0, r4
	mul	r0, r0, r3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r2, r2, #0x2e
	add	r0, r0, r2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r6]
	add	r0, r0, #0x2
	str	r0, [r6]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2209:
	.align	2, 0
.L2208:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons
.Lfe121:
	.size	 Cmd_removeitem,.Lfe121-Cmd_removeitem
	.align	2, 0
	.type	 Cmd_atknameinbuff1,function
	.thumb_func
Cmd_atknameinbuff1:
	ldr	r1, .L2211
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	ldr	r2, .L2211+0x4
	ldrb	r0, [r2]
	strb	r0, [r1, #0x2]
	ldr	r3, .L2211+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L2211+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2212:
	.align	2, 0
.L2211:
	.word	gBattleTextBuff1
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
.Lfe122:
	.size	 Cmd_atknameinbuff1,.Lfe122-Cmd_atknameinbuff1
	.align	2, 0
	.type	 Cmd_drawlvlupbox,function
	.thumb_func
Cmd_drawlvlupbox:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L2238
	ldrb	r1, [r0, #0x1e]
	add	r4, r0, #0
	cmp	r1, #0
	bne	.L2214	@cond_branch
	bl	IsMonGettingExpSentOut
	cmp	r0, #0
	beq	.L2215	@cond_branch
	mov	r0, #0x3
	b	.L2236
.L2239:
	.align	2, 0
.L2238:
	.word	gBattleScripting
.L2215:
	mov	r0, #0x1
.L2236:
	strb	r0, [r4, #0x1e]
.L2214:
	ldrb	r0, [r4, #0x1e]
	sub	r0, r0, #0x1
	cmp	r0, #0x9
	bls	.LCB22174
	b	.L2217	@long jump
.LCB22174:
	lsl	r0, r0, #0x2
	ldr	r1, .L2240
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2241:
	.align	2, 0
.L2240:
	.word	.L2234
	.align	2, 0
	.align	2, 0
.L2234:
	.word	.L2218
	.word	.L2219
	.word	.L2221
	.word	.L2222
	.word	.L2224
	.word	.L2226
	.word	.L2224
	.word	.L2228
	.word	.L2230
	.word	.L2232
.L2218:
	ldr	r1, .L2242
	mov	r0, #0x60
	strh	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x7
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	bl	ShowBg
	bl	InitLevelUpBanner
	ldr	r1, .L2242+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x1e]
	b	.L2217
.L2243:
	.align	2, 0
.L2242:
	.word	gBattle_BG2_Y
	.word	gBattleScripting
.L2219:
	bl	SlideInLevelUpBanner
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB22221
	b	.L2217	@long jump
.LCB22221:
	ldr	r1, .L2244
	mov	r0, #0x3
	strb	r0, [r1, #0x1e]
	b	.L2217
.L2245:
	.align	2, 0
.L2244:
	.word	gBattleScripting
.L2221:
	ldr	r1, .L2246
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L2246+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x7
	mov	r2, #0x1
	bl	SetBgAttribute
	mov	r0, #0x1
	mov	r1, #0x7
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x80
	str	r0, [sp]
	mov	r0, #0x12
	mov	r1, #0x7
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	HandleBattleWindow
	ldr	r1, .L2246+0x8
	mov	r0, #0x4
	strb	r0, [r1, #0x1e]
	b	.L2217
.L2247:
	.align	2, 0
.L2246:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattleScripting
.L2222:
	bl	DrawLevelUpWindow1
	mov	r0, #0xc
	bl	PutWindowTilemap
	mov	r0, #0xc
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L2237
.L2224:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L2217	@cond_branch
	ldr	r0, .L2248
	strh	r1, [r0]
	b	.L2237
.L2249:
	.align	2, 0
.L2248:
	.word	gBattle_BG1_Y
.L2226:
	ldr	r0, .L2250
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	beq	.L2217	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	DrawLevelUpWindow2
	mov	r0, #0xc
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L2237
.L2251:
	.align	2, 0
.L2250:
	.word	gMain
.L2228:
	ldr	r0, .L2252
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	beq	.L2217	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x81
	str	r0, [sp]
	mov	r0, #0x12
	mov	r1, #0x7
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	HandleBattleWindow
.L2237:
	ldr	r1, .L2252+0x4
	ldrb	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1e]
	b	.L2217
.L2253:
	.align	2, 0
.L2252:
	.word	gMain
	.word	gBattleScripting
.L2230:
	bl	SlideOutLevelUpBanner
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2217	@cond_branch
	mov	r0, #0xd
	bl	ClearWindowTilemap
	mov	r0, #0xd
	mov	r1, #0x1
	bl	CopyWindowToVram
	mov	r0, #0xc
	bl	ClearWindowTilemap
	mov	r0, #0xc
	mov	r1, #0x1
	bl	CopyWindowToVram
	mov	r0, #0x2
	mov	r1, #0x7
	mov	r2, #0x2
	bl	SetBgAttribute
	mov	r0, #0x2
	bl	ShowBg
	ldr	r1, .L2254
	mov	r0, #0xa
	strb	r0, [r1, #0x1e]
	b	.L2217
.L2255:
	.align	2, 0
.L2254:
	.word	gBattleScripting
.L2232:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2217	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x7
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x1
	mov	r1, #0x7
	mov	r2, #0x1
	bl	SetBgAttribute
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	ldr	r1, .L2256
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2217:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L2257:
	.align	2, 0
.L2256:
	.word	gBattlescriptCurrInstr
.Lfe123:
	.size	 Cmd_drawlvlupbox,.Lfe123-Cmd_drawlvlupbox
	.align	2, 0
	.type	 DrawLevelUpWindow1,function
	.thumb_func
DrawLevelUpWindow1:
	push	{lr}
	add	sp, sp, #-0x14
	ldr	r0, .L2259
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2259+0x4
	add	r0, r0, r1
	add	r1, sp, #0x8
	bl	GetMonLevelUpWindowStats
	ldr	r0, .L2259+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x10]
	mov	r0, #0xd
	str	r0, [sp]
	mov	r0, #0xf
	str	r0, [sp, #0x4]
	mov	r0, #0xc
	add	r2, sp, #0x8
	mov	r3, #0xe
	bl	DrawLevelUpWindowPg1
	add	sp, sp, #0x14
	pop	{r0}
	bx	r0
.L2260:
	.align	2, 0
.L2259:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gBattleResources
.Lfe124:
	.size	 DrawLevelUpWindow1,.Lfe124-DrawLevelUpWindow1
	.align	2, 0
	.type	 DrawLevelUpWindow2,function
	.thumb_func
DrawLevelUpWindow2:
	push	{lr}
	add	sp, sp, #-0x10
	ldr	r0, .L2262
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2262+0x4
	add	r0, r0, r1
	add	r1, sp, #0x4
	bl	GetMonLevelUpWindowStats
	mov	r0, #0xf
	str	r0, [sp]
	mov	r0, #0xc
	add	r1, sp, #0x4
	mov	r2, #0xe
	mov	r3, #0xd
	bl	DrawLevelUpWindowPg2
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L2263:
	.align	2, 0
.L2262:
	.word	gBattleStruct
	.word	gPlayerParty
.Lfe125:
	.size	 DrawLevelUpWindow2,.Lfe125-DrawLevelUpWindow2
	.align	2, 0
	.type	 InitLevelUpBanner,function
	.thumb_func
InitLevelUpBanner:
	push	{lr}
	ldr	r1, .L2265
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L2265+0x4
	mov	r2, #0xd0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L2265+0x8
	mov	r1, #0x60
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L2265+0xc
	mov	r0, #0xd
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToWindowPixelBuffer
	mov	r0, #0xd
	bl	PutWindowTilemap
	mov	r0, #0xd
	mov	r1, #0x3
	bl	CopyWindowToVram
	bl	PutMonIconOnLvlUpBanner
	pop	{r0}
	bx	r0
.L2266:
	.align	2, 0
.L2265:
	.word	gBattle_BG2_Y
	.word	gBattle_BG2_X
	.word	sLevelUpBanner_Pal
	.word	sLevelUpBanner_Gfx
.Lfe126:
	.size	 InitLevelUpBanner,.Lfe126-InitLevelUpBanner
	.align	2, 0
	.type	 SlideInLevelUpBanner,function
	.thumb_func
SlideInLevelUpBanner:
	push	{r4, r5, lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2268	@cond_branch
	mov	r0, #0x1
	b	.L2273
.L2268:
	ldr	r4, .L2274
	ldrh	r1, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x2
	cmp	r1, r5
	bne	.L2269	@cond_branch
	mov	r0, #0x0
	b	.L2273
.L2275:
	.align	2, 0
.L2274:
	.word	gBattle_BG2_X
.L2269:
	mov	r0, #0xd0
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L2270	@cond_branch
	bl	DrawLevelUpBannerText
.L2270:
	ldrh	r0, [r4]
	add	r0, r0, #0x8
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	ldr	r1, .L2276
	cmp	r0, r1
	bls	.L2271	@cond_branch
	strh	r5, [r4]
.L2271:
	ldrh	r1, [r4]
	eor	r1, r1, r5
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L2273:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L2277:
	.align	2, 0
.L2276:
	.word	0x1ff0000
.Lfe127:
	.size	 SlideInLevelUpBanner,.Lfe127-SlideInLevelUpBanner
	.align	2, 0
	.type	 DrawLevelUpBannerText,function
	.thumb_func
DrawLevelUpBannerText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r6, .L2283
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L2283+0x4
	add	r0, r0, r4
	mov	r1, #0x38
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	ldr	r6, .L2283+0x8
	add	r1, r6, #0
	bl	GetMonNickname
	str	r6, [sp]
	mov	r1, sp
	mov	r4, #0x0
	mov	r0, #0xd
	strb	r0, [r1, #0x4]
	mov	r0, sp
	strb	r4, [r0, #0x5]
	mov	r5, #0x20
	strb	r5, [r0, #0x6]
	strb	r4, [r0, #0x7]
	strb	r5, [r0, #0x8]
	strb	r4, [r0, #0x9]
	strb	r4, [r0, #0xa]
	strb	r4, [r0, #0xb]
	mov	r3, sp
	ldrb	r2, [r3, #0xc]
	mov	r1, #0x10
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	mov	r2, sp
	mov	r0, #0x10
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	mov	r0, sp
	strb	r5, [r0, #0xd]
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r0, #0xf9
	strb	r0, [r6]
	add	r6, r6, #0x1
	mov	r0, #0x5
	strb	r0, [r6]
	add	r6, r6, #0x1
	strb	r4, [r6]
	add	r6, r6, #0x1
	add	r4, r6, #0
	add	r0, r4, #0
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r6, r0, #0
	mov	r1, #0x0
	mov	r2, #0x5
	bl	StringFill
	add	r6, r4, #0x4
	cmp	r7, #0xff
	beq	.L2279	@cond_branch
	cmp	r7, #0
	bne	.L2280	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, #0xc
	bl	WriteColorChangeControlCode
	add	r6, r0, #0
	mov	r1, #0x1
	mov	r2, #0xd
	bl	WriteColorChangeControlCode
	add	r6, r0, #0
	mov	r0, #0xb5
	b	.L2282
.L2284:
	.align	2, 0
.L2283:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gStringVar4
.L2280:
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, #0xe
	bl	WriteColorChangeControlCode
	add	r6, r0, #0
	mov	r1, #0x1
	mov	r2, #0xf
	bl	WriteColorChangeControlCode
	add	r6, r0, #0
	mov	r0, #0xb6
.L2282:
	strb	r0, [r6]
	add	r6, r6, #0x1
	mov	r0, #0xff
	strb	r0, [r6]
.L2279:
	mov	r0, sp
	mov	r1, #0xa
	strb	r1, [r0, #0x7]
	strb	r1, [r0, #0x9]
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r0, #0xd
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe128:
	.size	 DrawLevelUpBannerText,.Lfe128-DrawLevelUpBannerText
	.align	2, 0
	.type	 SlideOutLevelUpBanner,function
	.thumb_func
SlideOutLevelUpBanner:
	push	{lr}
	ldr	r0, .L2291
	ldrh	r1, [r0]
	mov	r3, #0xd0
	lsl	r3, r3, #0x1
	add	r2, r0, #0
	cmp	r1, r3
	bne	.L2286	@cond_branch
	mov	r0, #0x0
	b	.L2290
.L2292:
	.align	2, 0
.L2291:
	.word	gBattle_BG2_X
.L2286:
	ldrh	r0, [r2]
	add	r1, r0, #0
	sub	r1, r1, #0x10
	ldr	r0, .L2293
	cmp	r1, r0
	bgt	.L2287	@cond_branch
	strh	r3, [r2]
	b	.L2288
.L2294:
	.align	2, 0
.L2293:
	.word	0x19f
.L2287:
	strh	r1, [r2]
.L2288:
	ldrh	r1, [r2]
	mov	r0, #0xd0
	lsl	r0, r0, #0x1
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L2290:
	pop	{r1}
	bx	r1
.Lfe129:
	.size	 SlideOutLevelUpBanner,.Lfe129-SlideOutLevelUpBanner
	.align	2, 0
	.type	 PutMonIconOnLvlUpBanner,function
	.thumb_func
PutMonIconOnLvlUpBanner:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x10
	ldr	r0, .L2296
	mov	r8, r0
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L2296+0x4
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, r8
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x1
	bl	GetMonIconPtr
	str	r0, [sp]
	ldr	r5, .L2296+0x8
	ldr	r0, [sp, #0x4]
	and	r0, r0, r5
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	ldr	r1, .L2296+0xc
	and	r0, r0, r1
	ldr	r1, .L2296+0x10
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	bl	GetValidMonIconPalettePtr
	str	r0, [sp, #0x8]
	add	r4, sp, #0x8
	ldr	r0, [r4, #0x4]
	and	r0, r0, r5
	ldr	r1, .L2296+0x14
	orr	r0, r0, r1
	str	r0, [r4, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	add	r0, r4, #0
	bl	LoadSpritePalette
	ldr	r0, .L2296+0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	mov	r2, #0xa
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2296+0x1c
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, .L2296+0x20
	ldrh	r0, [r0]
	strh	r0, [r1, #0x30]
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2297:
	.align	2, 0
.L2296:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	-0x10000
	.word	0xffff
	.word	-0x28a60000
	.word	0xd75a
	.word	sSpriteTemplate_MonIconOnLvlUpBanner
	.word	gSprites
	.word	gBattle_BG2_X
.Lfe130:
	.size	 PutMonIconOnLvlUpBanner,.Lfe130-PutMonIconOnLvlUpBanner
	.align	2, 0
	.type	 SpriteCB_MonIconOnLvlUpBanner,function
	.thumb_func
SpriteCB_MonIconOnLvlUpBanner:
	push	{r4, lr}
	add	r2, r0, #0
	ldr	r0, .L2302
	ldrh	r1, [r2, #0x30]
	ldrh	r0, [r0]
	sub	r1, r1, r0
	strh	r1, [r2, #0x24]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	beq	.L2299	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2, #0x2e]
	b	.L2300
.L2303:
	.align	2, 0
.L2302:
	.word	gBattle_BG2_X
.L2299:
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L2300	@cond_branch
	add	r0, r2, #0
	bl	DestroySprite
	ldr	r4, .L2304
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
.L2300:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2305:
	.align	2, 0
.L2304:
	.word	0xd75a
.Lfe131:
	.size	 SpriteCB_MonIconOnLvlUpBanner,.Lfe131-SpriteCB_MonIconOnLvlUpBanner
	.align	2, 0
	.globl	IsMonGettingExpSentOut
	.type	 IsMonGettingExpSentOut,function
	.thumb_func
IsMonGettingExpSentOut:
	push	{lr}
	ldr	r3, .L2311
	ldr	r0, .L2311+0x4
	ldr	r0, [r0]
	ldrh	r1, [r3]
	ldrb	r2, [r0, #0x10]
	cmp	r1, r2
	beq	.L2310	@cond_branch
	ldr	r0, .L2311+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2308	@cond_branch
	ldrh	r0, [r3, #0x4]
	cmp	r0, r2
	bne	.L2308	@cond_branch
.L2310:
	mov	r0, #0x1
	b	.L2309
.L2312:
	.align	2, 0
.L2311:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBattleTypeFlags
.L2308:
	mov	r0, #0x0
.L2309:
	pop	{r1}
	bx	r1
.Lfe132:
	.size	 IsMonGettingExpSentOut,.Lfe132-IsMonGettingExpSentOut
	.align	2, 0
	.type	 Cmd_resetsentmonsvalue,function
	.thumb_func
Cmd_resetsentmonsvalue:
	push	{lr}
	bl	ResetSentPokesToOpponentValue
	ldr	r1, .L2314
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2315:
	.align	2, 0
.L2314:
	.word	gBattlescriptCurrInstr
.Lfe133:
	.size	 Cmd_resetsentmonsvalue,.Lfe133-Cmd_resetsentmonsvalue
	.align	2, 0
	.type	 Cmd_setatktoplayer0,function
	.thumb_func
Cmd_setatktoplayer0:
	push	{lr}
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L2317
	strb	r0, [r1]
	ldr	r1, .L2317+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2318:
	.align	2, 0
.L2317:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe134:
	.size	 Cmd_setatktoplayer0,.Lfe134-Cmd_setatktoplayer0
	.align	2, 0
	.type	 Cmd_makevisible,function
	.thumb_func
Cmd_makevisible:
	push	{r4, r5, lr}
	ldr	r5, .L2320
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2320+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2321:
	.align	2, 0
.L2320:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe135:
	.size	 Cmd_makevisible,.Lfe135-Cmd_makevisible
	.align	2, 0
	.type	 Cmd_recordlastability,function
	.thumb_func
Cmd_recordlastability:
	push	{r4, lr}
	ldr	r4, .L2323
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L2323+0x4
	strb	r0, [r1]
	ldrb	r0, [r1]
	ldr	r1, .L2323+0x8
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2324:
	.align	2, 0
.L2323:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gLastUsedAbility
.Lfe136:
	.size	 Cmd_recordlastability,.Lfe136-Cmd_recordlastability
	.align	2, 0
	.globl	BufferMoveToLearnIntoBattleTextBuff2
	.type	 BufferMoveToLearnIntoBattleTextBuff2,function
	.thumb_func
BufferMoveToLearnIntoBattleTextBuff2:
	ldr	r2, .L2326
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x2
	strb	r0, [r2, #0x1]
	ldr	r0, .L2326+0x4
	ldrh	r1, [r0]
	strb	r1, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	bx	lr
.L2327:
	.align	2, 0
.L2326:
	.word	gBattleTextBuff2
	.word	gMoveToLearn
.Lfe137:
	.size	 BufferMoveToLearnIntoBattleTextBuff2,.Lfe137-BufferMoveToLearnIntoBattleTextBuff2
	.align	2, 0
	.type	 Cmd_buffermovetolearn,function
	.thumb_func
Cmd_buffermovetolearn:
	push	{lr}
	bl	BufferMoveToLearnIntoBattleTextBuff2
	ldr	r1, .L2329
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2330:
	.align	2, 0
.L2329:
	.word	gBattlescriptCurrInstr
.Lfe138:
	.size	 Cmd_buffermovetolearn,.Lfe138-Cmd_buffermovetolearn
	.align	2, 0
	.type	 Cmd_jumpifplayerran,function
	.thumb_func
Cmd_jumpifplayerran:
	push	{lr}
	ldr	r0, .L2334
	ldrb	r0, [r0]
	bl	TryRunFromBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2332	@cond_branch
	ldr	r3, .L2334+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2333
.L2335:
	.align	2, 0
.L2334:
	.word	gBattlerFainted
	.word	gBattlescriptCurrInstr
.L2332:
	ldr	r1, .L2336
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2333:
	pop	{r0}
	bx	r0
.L2337:
	.align	2, 0
.L2336:
	.word	gBattlescriptCurrInstr
.Lfe139:
	.size	 Cmd_jumpifplayerran,.Lfe139-Cmd_jumpifplayerran
	.align	2, 0
	.type	 Cmd_hpthresholds,function
	.thumb_func
Cmd_hpthresholds:
	push	{r4, r5, r6, lr}
	ldr	r0, .L2349
	ldr	r4, [r0]
	mov	r6, #0x1
	and	r4, r4, r6
	cmp	r4, #0
	bne	.L2339	@cond_branch
	ldr	r0, .L2349+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L2349+0x8
	strb	r0, [r1]
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2349+0xc
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r5, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r5
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	cmp	r0, #0
	bne	.L2340	@cond_branch
	mov	r0, #0x1
.L2340:
	cmp	r0, #0x45
	bgt	.L2342	@cond_branch
	cmp	r5, #0
	bne	.L2341	@cond_branch
.L2342:
	ldr	r0, .L2349+0x10
	ldr	r0, [r0]
	add	r0, r0, #0xad
	strb	r4, [r0]
	b	.L2339
.L2350:
	.align	2, 0
.L2349:
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleStruct
.L2341:
	cmp	r0, #0x27
	ble	.L2344	@cond_branch
	ldr	r0, .L2351
	ldr	r0, [r0]
	add	r0, r0, #0xad
	strb	r6, [r0]
	b	.L2339
.L2352:
	.align	2, 0
.L2351:
	.word	gBattleStruct
.L2344:
	cmp	r0, #0x9
	ble	.L2346	@cond_branch
	ldr	r0, .L2353
	ldr	r0, [r0]
	add	r0, r0, #0xad
	mov	r1, #0x2
	b	.L2348
.L2354:
	.align	2, 0
.L2353:
	.word	gBattleStruct
.L2346:
	ldr	r0, .L2355
	ldr	r0, [r0]
	add	r0, r0, #0xad
	mov	r1, #0x3
.L2348:
	strb	r1, [r0]
.L2339:
	ldr	r1, .L2355+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2356:
	.align	2, 0
.L2355:
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe140:
	.size	 Cmd_hpthresholds,.Lfe140-Cmd_hpthresholds
	.align	2, 0
	.type	 Cmd_hpthresholds2,function
	.thumb_func
Cmd_hpthresholds2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L2366
	ldr	r7, [r0]
	mov	r0, #0x1
	mov	r8, r0
	and	r7, r7, r0
	cmp	r7, #0
	bne	.L2358	@cond_branch
	ldr	r0, .L2366+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	add	r4, r0, #0
	ldr	r0, .L2366+0x8
	strb	r4, [r0]
	mov	r0, #0x1
	eor	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L2366+0xc
	ldr	r6, [r1]
	lsr	r0, r0, #0x17
	add	r0, r0, r6
	add	r0, r0, #0xa8
	ldrb	r5, [r0]
	ldr	r1, .L2366+0x10
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r4, [r0, #0x28]
	sub	r1, r5, r4
	mov	r0, #0x64
	mul	r0, r0, r1
	add	r1, r5, #0
	bl	__divsi3
	add	r1, r0, #0
	cmp	r4, r5
	bcc	.L2359	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0xad
	strb	r7, [r0]
	b	.L2358
.L2367:
	.align	2, 0
.L2366:
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons
.L2359:
	cmp	r0, #0x1d
	bgt	.L2361	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0xad
	mov	r1, r8
	strb	r1, [r0]
	b	.L2358
.L2361:
	cmp	r1, #0x45
	bgt	.L2363	@cond_branch
	add	r1, r6, #0
	add	r1, r1, #0xad
	mov	r0, #0x2
	b	.L2365
.L2363:
	add	r1, r6, #0
	add	r1, r1, #0xad
	mov	r0, #0x3
.L2365:
	strb	r0, [r1]
.L2358:
	ldr	r1, .L2368
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2369:
	.align	2, 0
.L2368:
	.word	gBattlescriptCurrInstr
.Lfe141:
	.size	 Cmd_hpthresholds2,.Lfe141-Cmd_hpthresholds2
	.align	2, 0
	.type	 Cmd_useitemonopponent,function
	.thumb_func
Cmd_useitemonopponent:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r2, .L2371
	ldr	r1, .L2371+0x4
	ldrb	r0, [r1]
	strb	r0, [r2]
	ldr	r2, .L2371+0x8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r1, .L2371+0xc
	add	r0, r0, r1
	ldr	r1, .L2371+0x10
	ldrh	r1, [r1]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0x1
	str	r3, [sp]
	mov	r3, #0x0
	bl	PokemonUseItemEffects
	ldr	r1, .L2371+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L2372:
	.align	2, 0
.L2371:
	.word	gBattlerInMenuId
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe142:
	.size	 Cmd_useitemonopponent,.Lfe142-Cmd_useitemonopponent
	.align	2, 0
	.type	 Cmd_various,function
	.thumb_func
Cmd_various:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	ldr	r4, .L2439
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L2439+0x4
	strb	r0, [r1]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0xc
	bls	.LCB23580
	b	.L2374	@long jump
.LCB23580:
	lsl	r0, r0, #0x2
	ldr	r1, .L2439+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2440:
	.align	2, 0
.L2439:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	.L2434
	.align	2, 0
	.align	2, 0
.L2434:
	.word	.L2375
	.word	.L2376
	.word	.L2379
	.word	.L2380
	.word	.L2381
	.word	.L2384
	.word	.L2385
	.word	.L2397
	.word	.L2399
	.word	.L2406
	.word	.L2408
	.word	.L2411
	.word	.L2432
.L2375:
	ldr	r0, .L2441
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	b	.L2374
.L2442:
	.align	2, 0
.L2441:
	.word	gActiveBattler
.L2376:
	ldr	r1, .L2443
	ldr	r4, .L2443+0x4
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldrb	r0, [r1]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2443+0x8
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L2377	@cond_branch
	ldr	r1, .L2443+0xc
	ldrb	r2, [r2, #0x9]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L2377	@cond_branch
	strb	r2, [r4]
	b	.L2374
.L2444:
	.align	2, 0
.L2443:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gSideTimers
	.word	gBattleMons
.L2377:
	ldr	r0, .L2445
	ldr	r1, .L2445+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
	b	.L2374
.L2446:
	.align	2, 0
.L2445:
	.word	gBattlerTarget
	.word	gActiveBattler
.L2379:
	bl	IsRunningFromBattleImpossible
	ldr	r1, .L2447
	strb	r0, [r1]
	b	.L2374
.L2448:
	.align	2, 0
.L2447:
	.word	gBattleCommunication
.L2380:
	ldr	r0, .L2449
	ldrh	r0, [r0]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L2449+0x4
	strb	r0, [r1]
	b	.L2374
.L2450:
	.align	2, 0
.L2449:
	.word	gCurrentMove
	.word	gBattlerTarget
.L2381:
	ldr	r2, .L2451
	ldr	r1, .L2451+0x4
	ldr	r0, .L2451+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	ldr	r2, [r2]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L2382	@cond_branch
	ldr	r1, .L2451+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L2374
.L2452:
	.align	2, 0
.L2451:
	.word	gHitMarker
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleCommunication
.L2382:
	ldr	r0, .L2453
	strb	r2, [r0]
	b	.L2374
.L2454:
	.align	2, 0
.L2453:
	.word	gBattleCommunication
.L2384:
	ldr	r4, .L2455
	ldr	r3, .L2455+0x4
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	b	.L2374
.L2456:
	.align	2, 0
.L2455:
	.word	gSpecialStatuses
	.word	gActiveBattler
.L2385:
	ldr	r4, .L2457
	ldr	r1, .L2457+0x4
	ldr	r0, [r1]
	ldrh	r3, [r4]
	ldrb	r2, [r0, #0x10]
	add	r5, r1, #0
	cmp	r3, r2
	beq	.L2436	@cond_branch
	ldrh	r0, [r4, #0x4]
	cmp	r0, r2
	beq	.LCB23793
	b	.L2374	@long jump
.LCB23793:
	cmp	r3, r0
	bne	.L2388	@cond_branch
.L2436:
	ldr	r1, .L2457+0x8
	mov	r0, #0x0
	b	.L2437
.L2458:
	.align	2, 0
.L2457:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gActiveBattler
.L2388:
	ldr	r1, .L2459
	mov	r0, #0x2
.L2437:
	strb	r0, [r1]
	mov	r8, r1
	mov	r0, r8
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1
	add	r0, r0, #0xc8
	ldr	r1, [r5]
	add	r3, r1, r0
	mov	r7, #0x0
	ldr	r1, .L2459+0x4
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldrh	r2, [r3]
	cmp	r0, r2
	beq	.L2391	@cond_branch
	mov	r5, r8
	mov	r4, #0x58
	add	r2, r1, #0
.L2392:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L2391	@cond_branch
	lsl	r1, r7, #0x1
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1]
	ldrh	r1, [r3]
	cmp	r0, r1
	bne	.L2392	@cond_branch
.L2391:
	cmp	r7, #0x4
	beq	.LCB23869
	b	.L2374	@long jump
.LCB23869:
	mov	r0, #0x0
	strh	r0, [r3]
	b	.L2374
.L2460:
	.align	2, 0
.L2459:
	.word	gActiveBattler
	.word	gBattleMons
.L2397:
	ldr	r0, .L2461
	ldr	r0, [r0]
	mov	r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0x8
	beq	.LCB23888
	b	.L2374	@long jump
.LCB23888:
	ldr	r1, .L2461+0x4
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	bne	.LCB23894
	b	.L2374	@long jump
.LCB23894:
	add	r0, r1, #0
	add	r0, r0, #0x80
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.LCB23901
	b	.L2374	@long jump
.LCB23901:
	ldr	r0, .L2461+0x8
	ldr	r1, [r0]
	ldr	r2, .L2461+0xc
	and	r1, r1, r2
	str	r1, [r0]
	b	.L2374
.L2462:
	.align	2, 0
.L2461:
	.word	gBattleTypeFlags
	.word	gBattleMons
	.word	gHitMarker
	.word	-0x400001
.L2399:
	mov	r7, #0x0
	ldr	r2, .L2463
	strb	r7, [r2, #0x5]
	ldr	r1, .L2463+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r8, r1
	ldr	r0, .L2463+0x8
	mov	r4, r8
	ldrb	r5, [r0]
	ldr	r6, .L2463+0xc
	ldr	r3, .L2463+0x10
.L2403:
	ldrb	r0, [r4]
	cmp	r0, r5
	bcs	.L2404	@cond_branch
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L2404	@cond_branch
	ldr	r0, [r3]
	ldrb	r1, [r2, #0x5]
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
.L2404:
	add	r3, r3, #0x4
	ldrb	r0, [r4]
	add	r0, r0, #0x2
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L2403	@cond_branch
	b	.L2374
.L2464:
	.align	2, 0
.L2463:
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBitTable
.L2406:
	ldr	r4, .L2465
	mov	r0, #0x1
	strb	r0, [r4]
	ldr	r0, .L2465+0x4
	add	r0, r0, #0x58
	b	.L2438
.L2466:
	.align	2, 0
.L2465:
	.word	gActiveBattler
	.word	gBattleMons
.L2408:
	ldr	r0, .L2467
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bhi	.LCB24014
	b	.L2374	@long jump
.LCB24014:
	ldr	r4, .L2467+0x4
	mov	r0, #0x3
	strb	r0, [r4]
	ldr	r0, .L2467+0x8
	mov	r1, #0x84
	lsl	r1, r1, #0x1
	add	r0, r0, r1
.L2438:
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB24029
	b	.L2374	@long jump
.LCB24029:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitReturnMonToBall
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L2374
.L2468:
	.align	2, 0
.L2467:
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gBattleMons
.L2411:
	ldr	r0, .L2469
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	mov	r8, r1
	mov	r7, #0x0
	ldr	r0, .L2469+0x4
	mov	ip, r0
	ldrb	r2, [r0]
	cmp	r8, r2
	bge	.L2413	@cond_branch
	ldr	r4, .L2469+0x8
	add	r3, r4, #0
	add	r3, r3, #0x50
	add	r6, r4, #0
	add	r6, r6, #0x20
	mov	r5, #0x0
.L2415:
	ldrb	r0, [r6]
	cmp	r0, #0x2b
	beq	.L2414	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x4c
	add	r2, r5, r2
	ldr	r0, [r2]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, [r3]
	ldr	r1, .L2469+0xc
	and	r0, r0, r1
	str	r0, [r3]
.L2414:
	add	r3, r3, #0x58
	add	r6, r6, #0x58
	add	r5, r5, #0x58
	add	r7, r7, #0x1
	mov	r0, ip
	ldrb	r0, [r0]
	cmp	r7, r0
	blt	.L2415	@cond_branch
.L2413:
	mov	r7, #0x0
	ldr	r1, .L2469+0x10
	mov	r9, r1
.L2421:
	mov	r0, #0x64
	mov	r4, r7
	mul	r4, r4, r0
	ldr	r0, .L2469+0x14
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	add	r1, r0, #0
	str	r1, [sp, #0x4]
	cmp	r5, #0
	beq	.L2420	@cond_branch
	cmp	r5, r9
	beq	.L2420	@cond_branch
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2420	@cond_branch
	add	r0, r5, #0
	add	r1, r6, #0
	bl	GetAbilityBySpecies
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2b
	beq	.L2420	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r7
	mov	r2, r8
	orr	r2, r2, r0
	mov	r8, r2
.L2420:
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L2421	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	beq	.L2424	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r4, .L2469+0x18
	strb	r0, [r4]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r1, r8
	lsl	r2, r1, #0x18
	lsr	r2, r2, #0x18
	add	r0, sp, #0x4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2469
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L2424:
	mov	r1, #0x0
	mov	r8, r1
	mov	r7, #0x0
	ldr	r2, .L2469+0x10
	mov	r9, r2
.L2428:
	mov	r0, #0x64
	mov	r4, r7
	mul	r4, r4, r0
	ldr	r0, .L2469+0x1c
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	add	r1, r0, #0
	str	r1, [sp, #0x4]
	cmp	r5, #0
	beq	.L2427	@cond_branch
	cmp	r5, r9
	beq	.L2427	@cond_branch
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2427	@cond_branch
	add	r0, r5, #0
	add	r1, r6, #0
	bl	GetAbilityBySpecies
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2b
	beq	.L2427	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r7
	mov	r1, r8
	orr	r1, r1, r0
	mov	r8, r1
.L2427:
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L2428	@cond_branch
	mov	r2, r8
	cmp	r2, #0
	beq	.L2374	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r4, .L2469+0x18
	strb	r0, [r4]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r0, r8
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	add	r1, sp, #0x4
	str	r1, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2469
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2374
.L2470:
	.align	2, 0
.L2469:
	.word	gBattleCommunication
	.word	gBattlersCount
	.word	gBattleMons
	.word	-0x8000001
	.word	0x19d
	.word	gPlayerParty
	.word	gActiveBattler
	.word	gEnemyParty
.L2432:
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2373	@cond_branch
.L2374:
	ldr	r1, .L2471
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
.L2373:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2472:
	.align	2, 0
.L2471:
	.word	gBattlescriptCurrInstr
.Lfe143:
	.size	 Cmd_various,.Lfe143-Cmd_various
	.align	2, 0
	.type	 Cmd_setprotectlike,function
	.thumb_func
Cmd_setprotectlike:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x1
	ldr	r2, .L2480
	ldr	r1, .L2480+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r8, r1
	ldr	r7, .L2480+0x8
	cmp	r0, #0xb6
	beq	.L2474	@cond_branch
	cmp	r0, #0xc5
	beq	.L2474	@cond_branch
	cmp	r0, #0xcb
	beq	.L2474	@cond_branch
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x0
	strb	r1, [r0, #0x8]
.L2474:
	ldr	r0, .L2480+0xc
	ldrb	r1, [r0]
	ldr	r0, .L2480+0x10
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L2475	@cond_branch
	mov	r6, #0x0
.L2475:
	ldr	r2, .L2480+0x14
	mov	r5, r8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r4, [r0, #0x8]
	lsl	r4, r4, #0x1
	add	r4, r4, r2
	bl	Random
	ldrh	r1, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bcc	.L2476	@cond_branch
	cmp	r6, #0
	beq	.L2476	@cond_branch
	ldr	r4, .L2480+0x18
	ldr	r3, .L2480+0x1c
	ldrh	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	cmp	r0, #0x6f
	bne	.L2477	@cond_branch
	ldr	r0, .L2480+0x20
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L2480+0x24
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
.L2477:
	ldrh	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	cmp	r0, #0x74
	bne	.L2478	@cond_branch
	ldr	r0, .L2480+0x20
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L2480+0x24
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L2478:
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x8]
	b	.L2479
.L2481:
	.align	2, 0
.L2480:
	.word	gLastResultingMoves
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	sProtectSuccessRates
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleCommunication
.L2476:
	ldr	r2, .L2482
	ldr	r0, .L2482+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x8]
	ldr	r1, .L2482+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	ldr	r2, .L2482+0xc
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L2479:
	ldr	r1, .L2482+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2483:
	.align	2, 0
.L2482:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
.Lfe144:
	.size	 Cmd_setprotectlike,.Lfe144-Cmd_setprotectlike
	.align	2, 0
	.type	 Cmd_tryexplosion,function
	.thumb_func
Cmd_tryexplosion:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L2501
	ldr	r2, [r0]
	cmp	r2, #0
	bne	.L2484	@cond_branch
	ldr	r1, .L2501+0x4
	strb	r2, [r1]
	ldr	r0, .L2501+0x8
	ldrb	r3, [r0]
	add	r5, r1, #0
	mov	r8, r0
	ldr	r6, .L2501+0xc
	cmp	r2, r3
	bcs	.L2487	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x6
	beq	.L2487	@cond_branch
	add	r2, r3, #0
	add	r4, r6, #0
	mov	r3, #0x58
.L2488:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r2
	bcs	.L2487	@cond_branch
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bne	.L2488	@cond_branch
.L2487:
	ldrb	r0, [r5]
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L2492	@cond_branch
	ldr	r4, .L2501+0x10
	ldr	r7, .L2501+0x14
	ldrb	r0, [r7]
	strb	r0, [r4]
	ldr	r2, .L2501+0x18
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	str	r0, [r2]
	ldr	r1, .L2501+0x1c
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2501+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r5]
	mov	r2, r8
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L2484	@cond_branch
	add	r3, r5, #0
	ldrb	r5, [r7]
	ldr	r7, .L2501+0x24
	add	r4, r0, #0
	ldr	r6, .L2501+0x28
.L2496:
	ldrb	r2, [r3]
	cmp	r2, r5
	beq	.L2495	@cond_branch
	ldrb	r0, [r6]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2484	@cond_branch
.L2495:
	add	r0, r2, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcc	.L2496	@cond_branch
	b	.L2484
.L2502:
	.align	2, 0
.L2501:
	.word	gBattleControllerExecFlags
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	0x7fff
	.word	gBattlescriptCurrInstr
	.word	gBitTable
	.word	gAbsentBattlerFlags
.L2492:
	ldr	r1, .L2503
	mov	r0, #0x6
	strb	r0, [r1]
	ldrb	r0, [r5]
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r1, r1, r6
	add	r1, r1, #0x20
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	ldr	r1, .L2503+0x4
	ldr	r0, .L2503+0x8
	str	r0, [r1]
.L2484:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2504:
	.align	2, 0
.L2503:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DampStopsExplosion
.Lfe145:
	.size	 Cmd_tryexplosion,.Lfe145-Cmd_tryexplosion
	.align	2, 0
	.type	 Cmd_setatkhptozero,function
	.thumb_func
Cmd_setatkhptozero:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L2507
	ldr	r3, [r0]
	cmp	r3, #0
	bne	.L2505	@cond_branch
	ldr	r4, .L2507+0x4
	ldr	r0, .L2507+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r1, .L2507+0xc
	ldrb	r0, [r4]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	strh	r3, [r0, #0x28]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r1, r1, #0x28
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2a
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2507+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2505:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L2508:
	.align	2, 0
.L2507:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.Lfe146:
	.size	 Cmd_setatkhptozero,.Lfe146-Cmd_setatkhptozero
	.align	2, 0
	.type	 Cmd_jumpifnexttargetvalid,function
	.thumb_func
Cmd_jumpifnexttargetvalid:
	push	{r4, r5, r6, r7, lr}
	ldr	r3, .L2522
	ldr	r2, [r3]
	ldrb	r4, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r0, .L2522+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L2510	@cond_branch
	ldr	r0, .L2522+0x8
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r2, .L2522+0xc
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r3, r0, #0
	ldr	r6, .L2522+0x10
	ldr	r5, .L2522+0x14
	ldr	r0, .L2522+0x18
	mov	ip, r0
	ldrb	r0, [r2]
	cmp	r1, r0
	bne	.L2521	@cond_branch
.L2513:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L2513	@cond_branch
.L2521:
	ldrb	r0, [r6]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2513	@cond_branch
	ldrb	r0, [r3]
	mov	r2, ip
	ldrb	r2, [r2]
	cmp	r0, r2
	bcc	.L2517	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	b	.L2519
.L2523:
	.align	2, 0
.L2522:
	.word	gBattlescriptCurrInstr
	.word	gBattleTypeFlags
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlersCount
.L2517:
	str	r4, [r7]
	b	.L2519
.L2510:
	add	r0, r2, #0x5
	str	r0, [r3]
.L2519:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe147:
	.size	 Cmd_jumpifnexttargetvalid,.Lfe147-Cmd_jumpifnexttargetvalid
	.align	2, 0
	.type	 Cmd_tryhealhalfhealth,function
	.thumb_func
Cmd_tryhealhalfhealth:
	push	{r4, r5, r6, lr}
	ldr	r4, .L2529
	ldr	r1, [r4]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	ldr	r3, .L2529+0x4
	cmp	r0, #0x1
	bne	.L2525	@cond_branch
	ldr	r0, .L2529+0x8
	ldrb	r0, [r0]
	strb	r0, [r3]
.L2525:
	ldr	r1, .L2529+0xc
	ldr	r6, .L2529+0x10
	ldrb	r0, [r3]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L2526	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L2526:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	bne	.L2527	@cond_branch
	str	r2, [r4]
	b	.L2528
.L2530:
	.align	2, 0
.L2529:
	.word	gBattlescriptCurrInstr
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
.L2527:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L2528:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe148:
	.size	 Cmd_tryhealhalfhealth,.Lfe148-Cmd_tryhealhalfhealth
	.align	2, 0
	.type	 Cmd_trymirrormove,function
	.thumb_func
Cmd_trymirrormove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r2, .L2549
	ldr	r0, .L2549+0x4
	mov	sl, r0
	mov	r1, #0x0
	add	r0, sp, #0x4
.L2535:
	strh	r1, [r0]
	sub	r0, r0, #0x2
	cmp	r0, sp
	bge	.L2535	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
	mov	r5, #0x0
	ldrb	r1, [r2]
	cmp	r5, r1
	bge	.L2538	@cond_branch
	ldr	r0, .L2549+0x8
	ldrb	r6, [r0]
	ldr	r2, .L2549+0xc
	mov	r9, r2
	lsl	r4, r6, #0x3
	mov	r2, sp
	ldr	r0, .L2549+0x4
	mov	ip, r0
	add	r7, r1, #0
.L2540:
	cmp	r5, r6
	beq	.L2539	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r4, r0
	add	r1, r0, #0
	add	r1, r1, #0xe0
	ldrb	r3, [r1]
	add	r0, r0, #0xe1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	cmp	r3, #0
	beq	.L2539	@cond_branch
	cmp	r3, r9
	beq	.L2539	@cond_branch
	strh	r3, [r2]
	add	r2, r2, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
.L2539:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, r7
	blt	.L2540	@cond_branch
.L2538:
	ldr	r1, .L2549+0x8
	ldrb	r0, [r1]
	mov	r2, sl
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x98
	ldrb	r3, [r1]
	add	r0, r0, #0x99
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	cmp	r3, #0
	beq	.L2544	@cond_branch
	ldr	r0, .L2549+0xc
	cmp	r3, r0
	beq	.L2544	@cond_branch
	ldr	r2, .L2549+0x10
	ldr	r0, [r2]
	ldr	r1, .L2549+0x14
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L2549+0x18
	strh	r3, [r4]
	b	.L2548
.L2550:
	.align	2, 0
.L2549:
	.word	gBattlersCount
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	0xffff
	.word	gHitMarker
	.word	-0x401
	.word	gCurrentMove
.L2544:
	mov	r0, r8
	cmp	r0, #0
	beq	.L2546	@cond_branch
	ldr	r2, .L2551
	ldr	r0, [r2]
	ldr	r1, .L2551+0x4
	and	r0, r0, r1
	str	r0, [r2]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, r8
	bl	__modsi3
	add	r5, r0, #0
	ldr	r4, .L2551+0x8
	lsl	r0, r5, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4]
.L2548:
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L2551+0xc
	strb	r0, [r1]
	ldr	r5, .L2551+0x10
	ldr	r3, .L2551+0x14
	ldr	r2, .L2551+0x18
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r5]
	b	.L2545
.L2552:
	.align	2, 0
.L2551:
	.word	gHitMarker
	.word	-0x401
	.word	gCurrentMove
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
.L2546:
	ldr	r2, .L2553
	ldr	r0, .L2553+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L2553+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2545:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2554:
	.align	2, 0
.L2553:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe149:
	.size	 Cmd_trymirrormove,.Lfe149-Cmd_trymirrormove
	.align	2, 0
	.type	 Cmd_setrain,function
	.thumb_func
Cmd_setrain:
	push	{lr}
	ldr	r2, .L2558
	ldrh	r0, [r2]
	mov	r1, #0x7
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2556	@cond_branch
	ldr	r2, .L2558+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2558+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L2557
.L2559:
	.align	2, 0
.L2558:
	.word	gBattleWeather
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L2556:
	mov	r0, #0x1
	strh	r0, [r2]
	ldr	r0, .L2560
	strb	r1, [r0, #0x5]
	ldr	r0, .L2560+0x4
	add	r0, r0, #0x28
	mov	r1, #0x5
	strb	r1, [r0]
.L2557:
	ldr	r1, .L2560+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2561:
	.align	2, 0
.L2560:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe150:
	.size	 Cmd_setrain,.Lfe150-Cmd_setrain
	.align	2, 0
	.type	 Cmd_setreflect,function
	.thumb_func
Cmd_setreflect:
	push	{r4, r5, r6, lr}
	ldr	r6, .L2568
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	ldr	r4, .L2568+0x4
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r1, [r1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2563	@cond_branch
	ldr	r2, .L2568+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2568+0xc
	mov	r0, #0x0
	b	.L2567
.L2569:
	.align	2, 0
.L2568:
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L2563:
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	ldr	r4, .L2570
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x5
	strb	r1, [r0]
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r6]
	strb	r1, [r0, #0x1]
	ldr	r0, .L2570+0x4
	ldr	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2565	@cond_branch
	mov	r0, #0x1
	bl	CountAliveMonsInBattle
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bne	.L2565	@cond_branch
	ldr	r0, .L2570+0x8
	strb	r1, [r0, #0x5]
	b	.L2564
.L2571:
	.align	2, 0
.L2570:
	.word	gSideTimers
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L2565:
	ldr	r1, .L2572
	mov	r0, #0x1
.L2567:
	strb	r0, [r1, #0x5]
.L2564:
	ldr	r1, .L2572+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2573:
	.align	2, 0
.L2572:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe151:
	.size	 Cmd_setreflect,.Lfe151-Cmd_setreflect
	.align	2, 0
	.type	 Cmd_setseeded,function
	.thumb_func
Cmd_setseeded:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r7, .L2581
	ldrb	r5, [r7]
	mov	r0, #0x29
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L2576	@cond_branch
	ldr	r0, .L2581+0x4
	mov	r9, r0
	ldr	r1, .L2581+0x8
	mov	r8, r1
	ldrb	r4, [r1]
	lsl	r0, r4, #0x2
	mov	r2, r9
	add	r6, r0, r2
	ldr	r2, [r6]
	mov	r0, #0x4
	mov	ip, r0
	add	r3, r2, #0
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L2575	@cond_branch
.L2576:
	mov	r0, #0x1
	orr	r0, r0, r5
	strb	r0, [r7]
	ldr	r1, .L2581+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2577
.L2582:
	.align	2, 0
.L2581:
	.word	gMoveResultFlags
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gBattleCommunication
.L2575:
	ldr	r1, .L2583
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xc
	beq	.L2579	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bne	.L2578	@cond_branch
.L2579:
	mov	r0, #0x1
	orr	r0, r0, r5
	strb	r0, [r7]
	ldr	r1, .L2583+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L2577
.L2584:
	.align	2, 0
.L2583:
	.word	gBattleMons
	.word	gBattleCommunication
.L2578:
	ldr	r0, .L2585
	ldrb	r0, [r0]
	orr	r2, r2, r0
	str	r2, [r6]
	mov	r2, r8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldr	r0, [r1]
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L2585+0x4
	strb	r3, [r0, #0x5]
.L2577:
	ldr	r1, .L2585+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2586:
	.align	2, 0
.L2585:
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe152:
	.size	 Cmd_setseeded,.Lfe152-Cmd_setseeded
	.align	2, 0
	.type	 Cmd_manipulatedamage,function
	.thumb_func
Cmd_manipulatedamage:
	push	{r4, lr}
	ldr	r1, .L2598
	ldr	r0, [r1]
	ldrb	r2, [r0, #0x1]
	add	r4, r1, #0
	cmp	r2, #0x1
	beq	.L2590	@cond_branch
	cmp	r2, #0x1
	bgt	.L2596	@cond_branch
	cmp	r2, #0
	beq	.L2589	@cond_branch
	b	.L2588
.L2599:
	.align	2, 0
.L2598:
	.word	gBattlescriptCurrInstr
.L2596:
	cmp	r2, #0x2
	beq	.L2593	@cond_branch
	b	.L2588
.L2589:
	ldr	r1, .L2600
	ldr	r0, [r1]
	neg	r0, r0
	b	.L2597
.L2601:
	.align	2, 0
.L2600:
	.word	gBattleMoveDamage
.L2590:
	ldr	r3, .L2602
	ldr	r0, [r3]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	str	r0, [r3]
	cmp	r0, #0
	bne	.L2591	@cond_branch
	str	r2, [r3]
.L2591:
	ldr	r2, .L2602+0x4
	ldr	r0, .L2602+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2c]
	lsr	r1, r0, #0x1
	ldr	r0, [r3]
	cmp	r1, r0
	bge	.L2588	@cond_branch
	str	r1, [r3]
	b	.L2588
.L2603:
	.align	2, 0
.L2602:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
.L2593:
	ldr	r1, .L2604
	ldr	r0, [r1]
	lsl	r0, r0, #0x1
.L2597:
	str	r0, [r1]
.L2588:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2605:
	.align	2, 0
.L2604:
	.word	gBattleMoveDamage
.Lfe153:
	.size	 Cmd_manipulatedamage,.Lfe153-Cmd_manipulatedamage
	.align	2, 0
	.type	 Cmd_trysetrest,function
	.thumb_func
Cmd_trysetrest:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L2611
	mov	ip, r0
	ldr	r1, [r0]
	ldrb	r6, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r6, r6, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r6, r6, r0
	ldr	r5, .L2611+0x4
	ldr	r2, .L2611+0x8
	ldr	r0, .L2611+0xc
	ldrb	r0, [r0]
	strb	r0, [r2]
	strb	r0, [r5]
	ldr	r4, .L2611+0x10
	ldr	r1, .L2611+0x14
	ldrb	r0, [r2]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2c]
	neg	r0, r0
	str	r0, [r4]
	ldrb	r0, [r2]
	mov	r4, r0
	mul	r4, r4, r3
	add	r0, r4, r1
	ldrh	r3, [r0, #0x28]
	add	r7, r5, #0
	add	r5, r2, #0
	add	r2, r1, #0
	ldrh	r0, [r0, #0x2c]
	cmp	r3, r0
	bne	.L2607	@cond_branch
	mov	r0, ip
	str	r6, [r0]
	b	.L2608
.L2612:
	.align	2, 0
.L2611:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
.L2607:
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0xf8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2609	@cond_branch
	ldr	r1, .L2613
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2610
.L2614:
	.align	2, 0
.L2613:
	.word	gBattleCommunication
.L2609:
	ldr	r0, .L2615
	strb	r1, [r0, #0x5]
.L2610:
	ldrb	r0, [r5]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r2, r2, #0x4c
	add	r0, r0, r2
	mov	r1, #0x3
	str	r1, [r0]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2615+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2608:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2616:
	.align	2, 0
.L2615:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe154:
	.size	 Cmd_trysetrest,.Lfe154-Cmd_trysetrest
	.align	2, 0
	.type	 Cmd_jumpifnotfirstturn,function
	.thumb_func
Cmd_jumpifnotfirstturn:
	push	{r4, r5, lr}
	ldr	r5, .L2620
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x1]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r2, .L2620+0x4
	ldr	r0, .L2620+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0
	beq	.L2618	@cond_branch
	add	r0, r4, #0x5
	str	r0, [r5]
	b	.L2619
.L2621:
	.align	2, 0
.L2620:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBattlerAttacker
.L2618:
	str	r3, [r5]
.L2619:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe155:
	.size	 Cmd_jumpifnotfirstturn,.Lfe155-Cmd_jumpifnotfirstturn
	.align	2, 0
	.type	 Cmd_nop,function
	.thumb_func
Cmd_nop:
	ldr	r1, .L2623
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2624:
	.align	2, 0
.L2623:
	.word	gBattlescriptCurrInstr
.Lfe156:
	.size	 Cmd_nop,.Lfe156-Cmd_nop
	.align	2, 0
	.globl	UproarWakeUpCheck
	.type	 UproarWakeUpCheck,function
	.thumb_func
UproarWakeUpCheck:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r2, #0x0
	ldr	r0, .L2642
	ldrb	r1, [r0]
	mov	r8, r0
	cmp	r2, r1
	bge	.L2627	@cond_branch
	ldr	r0, .L2642+0x4
	mov	ip, r0
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, ip
	add	r5, r0, #0
	add	r5, r5, #0x20
	add	r4, r1, #0
	mov	r3, #0x0
	ldr	r6, .L2642+0x8
	ldr	r7, .L2642+0xc
.L2629:
	mov	r0, ip
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2628	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0x2b
	beq	.L2628	@cond_branch
	mov	r3, #0x0
	strb	r2, [r6, #0x17]
	ldr	r1, .L2642+0x10
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L2640	@cond_branch
	cmp	r0, r2
	beq	.L2641	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7, #0x5]
	b	.L2627
.L2643:
	.align	2, 0
.L2642:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	gBattlerTarget
.L2628:
	add	r3, r3, #0x58
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L2629	@cond_branch
.L2627:
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r2, r1
	beq	.L2637	@cond_branch
	mov	r0, #0x1
	b	.L2639
.L2641:
	ldr	r0, .L2644
	strb	r3, [r0, #0x5]
	b	.L2627
.L2645:
	.align	2, 0
.L2644:
	.word	gBattleCommunication
.L2640:
	strb	r2, [r1]
	b	.L2627
.L2637:
	mov	r0, #0x0
.L2639:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe157:
	.size	 UproarWakeUpCheck,.Lfe157-UproarWakeUpCheck
	.align	2, 0
	.type	 Cmd_jumpifcantmakeasleep,function
	.thumb_func
Cmd_jumpifcantmakeasleep:
	push	{r4, r5, r6, lr}
	ldr	r5, .L2652
	ldr	r1, [r5]
	ldrb	r4, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r6, .L2652+0x4
	ldrb	r0, [r6]
	bl	UproarWakeUpCheck
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2647	@cond_branch
	str	r4, [r5]
	b	.L2648
.L2653:
	.align	2, 0
.L2652:
	.word	gBattlescriptCurrInstr
	.word	gBattlerTarget
.L2647:
	ldr	r1, .L2654
	ldrb	r3, [r6]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r1, r0, #0
	cmp	r1, #0xf
	beq	.L2650	@cond_branch
	cmp	r1, #0x48
	bne	.L2649	@cond_branch
.L2650:
	ldr	r2, .L2654+0x4
	strb	r0, [r2]
	ldr	r1, .L2654+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	str	r4, [r5]
	ldrb	r1, [r2]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	b	.L2648
.L2655:
	.align	2, 0
.L2654:
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L2649:
	ldr	r0, [r5]
	add	r0, r0, #0x5
	str	r0, [r5]
.L2648:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe158:
	.size	 Cmd_jumpifcantmakeasleep,.Lfe158-Cmd_jumpifcantmakeasleep
	.align	2, 0
	.type	 Cmd_stockpile,function
	.thumb_func
Cmd_stockpile:
	push	{r4, r5, lr}
	ldr	r5, .L2659
	ldr	r4, .L2659+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r5
	ldrb	r0, [r1, #0x9]
	cmp	r0, #0x3
	bne	.L2657	@cond_branch
	ldr	r2, .L2659+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2659+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2658
.L2660:
	.align	2, 0
.L2659:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L2657:
	add	r0, r0, #0x1
	mov	r3, #0x0
	strb	r0, [r1, #0x9]
	ldr	r2, .L2661
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x1
	strb	r0, [r2, #0x1]
	strb	r0, [r2, #0x2]
	strb	r0, [r2, #0x3]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x9]
	strb	r0, [r2, #0x4]
	mov	r0, #0xff
	strb	r0, [r2, #0x5]
	ldr	r0, .L2661+0x4
	strb	r3, [r0, #0x5]
.L2658:
	ldr	r1, .L2661+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2662:
	.align	2, 0
.L2661:
	.word	gBattleTextBuff1
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe159:
	.size	 Cmd_stockpile,.Lfe159-Cmd_stockpile
	.align	2, 0
	.type	 Cmd_stockpiletobasedamage,function
	.thumb_func
Cmd_stockpiletobasedamage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r3, .L2668
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r7, .L2668+0x4
	ldr	r6, .L2668+0x8
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0, #0x9]
	cmp	r0, #0
	bne	.L2664	@cond_branch
	str	r2, [r3]
	b	.L2665
.L2669:
	.align	2, 0
.L2668:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBattlerAttacker
.L2664:
	ldr	r0, .L2670
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	beq	.L2666	@cond_branch
	ldr	r0, .L2670+0x4
	mov	r8, r0
	ldr	r4, .L2670+0x8
	ldr	r5, .L2670+0xc
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	ldrb	r0, [r6]
	mov	r4, #0x58
	mul	r0, r0, r4
	ldr	r2, .L2670+0x10
	add	r0, r0, r2
	ldrb	r1, [r5]
	mul	r1, r1, r4
	add	r1, r1, r2
	ldr	r2, .L2670+0x14
	ldrh	r2, [r2]
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	ldrb	r4, [r6]
	str	r4, [sp, #0x8]
	ldrb	r4, [r5]
	str	r4, [sp, #0xc]
	bl	CalculateBaseDamage
	ldrb	r2, [r6]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r1, [r1, #0x9]
	mov	r3, r0
	mul	r3, r3, r1
	mov	r1, r8
	str	r3, [r1]
	ldr	r2, .L2670+0x18
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0, #0x9]
	strb	r0, [r2, #0x18]
	ldr	r1, .L2670+0x1c
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L2666	@cond_branch
	lsl	r0, r3, #0x4
	sub	r0, r0, r3
	mov	r1, #0xa
	bl	__divsi3
	mov	r1, r8
	str	r0, [r1]
.L2666:
	ldr	r2, .L2670+0x20
	ldr	r0, .L2670+0x24
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	ldr	r1, .L2670+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2665:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2671:
	.align	2, 0
.L2670:
	.word	gBattleCommunication
	.word	gBattleMoveDamage
	.word	gSideStatuses
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gCurrentMove
	.word	gBattleScripting
	.word	gProtectStructs
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe160:
	.size	 Cmd_stockpiletobasedamage,.Lfe160-Cmd_stockpiletobasedamage
	.align	2, 0
	.type	 Cmd_stockpiletohpheal,function
	.thumb_func
Cmd_stockpiletohpheal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L2678
	ldr	r1, [r7]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r0, .L2678+0x4
	mov	r8, r0
	ldr	r6, .L2678+0x8
	ldrb	r3, [r6]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	mov	r1, r8
	add	r4, r0, r1
	ldrb	r1, [r4, #0x9]
	cmp	r1, #0
	bne	.L2673	@cond_branch
	str	r2, [r7]
	ldr	r0, .L2678+0xc
	strb	r1, [r0, #0x5]
	b	.L2674
.L2679:
	.align	2, 0
.L2678:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleCommunication
.L2673:
	ldr	r1, .L2680
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2c]
	ldrh	r3, [r1, #0x28]
	cmp	r0, r3
	bne	.L2675	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4, #0x9]
	str	r2, [r7]
	ldr	r1, .L2680+0x4
	ldrb	r0, [r6]
	strb	r0, [r1]
	ldr	r1, .L2680+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2674
.L2681:
	.align	2, 0
.L2680:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleCommunication
.L2675:
	ldr	r5, .L2682
	ldrh	r0, [r1, #0x2c]
	ldrb	r1, [r4, #0x9]
	mov	r2, #0x3
	sub	r2, r2, r1
	mov	r4, #0x1
	add	r1, r4, #0
	lsl	r1, r1, r2
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L2677	@cond_branch
	str	r4, [r5]
.L2677:
	ldr	r0, [r5]
	neg	r0, r0
	str	r0, [r5]
	ldr	r3, .L2682+0x4
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x9]
	mov	r2, #0x0
	strb	r0, [r3, #0x18]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	strb	r2, [r0, #0x9]
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	ldr	r1, .L2682+0x8
	ldrb	r0, [r6]
	strb	r0, [r1]
.L2674:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2683:
	.align	2, 0
.L2682:
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	gBattlerTarget
.Lfe161:
	.size	 Cmd_stockpiletohpheal,.Lfe161-Cmd_stockpiletohpheal
	.align	2, 0
	.type	 Cmd_negativedamage,function
	.thumb_func
Cmd_negativedamage:
	push	{lr}
	ldr	r2, .L2686
	ldr	r0, .L2686+0x4
	ldr	r0, [r0]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	neg	r0, r0
	str	r0, [r2]
	cmp	r0, #0
	bne	.L2685	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r2]
.L2685:
	ldr	r1, .L2686+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2687:
	.align	2, 0
.L2686:
	.word	gBattleMoveDamage
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
.Lfe162:
	.size	 Cmd_negativedamage,.Lfe162-Cmd_negativedamage
	.align	2, 0
	.type	 ChangeStatBuffs,function
	.thumb_func
ChangeStatBuffs:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r0, #0x0
	mov	r9, r0
	mov	sl, r0
	mov	r0, #0x40
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2689	@cond_branch
	ldr	r0, .L2733
	ldr	r1, .L2733+0x4
	b	.L2729
.L2734:
	.align	2, 0
.L2733:
	.word	gActiveBattler
	.word	gBattlerAttacker
.L2689:
	ldr	r0, .L2735
	ldr	r1, .L2735+0x4
.L2729:
	ldrb	r1, [r1]
	strb	r1, [r0]
	mov	r0, #0xbf
	and	r5, r5, r0
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2691	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L2691:
	mov	r0, #0x7f
	and	r5, r5, r0
	mov	r0, #0x20
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2692	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
.L2692:
	mov	r0, #0xdf
	and	r5, r5, r0
	ldr	r1, .L2735+0x8
	mov	r4, #0x0
	mov	r2, #0xfd
	strb	r2, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	strb	r7, [r1, #0x2]
	mov	r3, #0x1
	neg	r3, r3
	mov	ip, r3
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	lsl	r0, r6, #0x18
	cmp	r0, #0
	blt	.LCB26510
	b	.L2693	@long jump
.LCB26510:
	ldr	r4, .L2735+0xc
	ldr	r1, .L2735
	ldrb	r0, [r1]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L2694	@cond_branch
	mov	r2, r9
	cmp	r2, #0
	bne	.L2694	@cond_branch
	ldr	r0, .L2735+0x10
	ldrh	r0, [r0]
	cmp	r0, #0xae
	beq	.L2699	@cond_branch
	cmp	r5, #0x1
	bne	.L2732	@cond_branch
	ldr	r4, .L2735+0x14
	ldr	r3, .L2735
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L2696	@cond_branch
	ldr	r0, .L2735+0x18
	mov	r4, r8
	str	r4, [r0]
	b	.L2732
.L2736:
	.align	2, 0
.L2735:
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L2696:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r1, .L2737
	ldr	r6, .L2737+0x4
	ldrb	r0, [r6]
	strb	r0, [r1, #0x17]
	ldr	r1, .L2737+0x8
	ldr	r0, .L2737+0xc
	str	r0, [r1]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2732
.L2738:
	.align	2, 0
.L2737:
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MistProtected
.L2694:
	ldr	r0, .L2739
	ldrh	r0, [r0]
	cmp	r0, #0xae
	beq	.L2699	@cond_branch
	mov	r0, sl
	cmp	r0, #0x1
	beq	.L2699	@cond_branch
	mov	r0, #0x0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2699	@cond_branch
	ldr	r1, .L2739+0x4
	ldr	r0, .L2739+0x8
	str	r0, [r1]
.L2732:
	mov	r0, #0x1
	b	.L2728
.L2740:
	.align	2, 0
.L2739:
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ButItFailed
.L2699:
	ldr	r2, .L2741
	ldr	r1, .L2741+0x4
	ldrb	r3, [r1]
	mov	r4, #0x58
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	sl, r2
	cmp	r0, #0x1d
	beq	.L2702	@cond_branch
	cmp	r0, #0x49
	bne	.L2701	@cond_branch
.L2702:
	mov	r0, r9
	cmp	r0, #0
	bne	.L2701	@cond_branch
	ldr	r0, .L2741+0x8
	ldrh	r0, [r0]
	cmp	r0, #0xae
	beq	.L2701	@cond_branch
	cmp	r5, #0x1
	bne	.L2732	@cond_branch
	ldr	r4, .L2741+0xc
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L2704	@cond_branch
	ldr	r0, .L2741+0x10
	mov	r1, r8
	str	r1, [r0]
	b	.L2732
.L2742:
	.align	2, 0
.L2741:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L2704:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r1, .L2743
	ldr	r2, .L2743+0x4
	ldrb	r0, [r2]
	strb	r0, [r1, #0x17]
	ldr	r1, .L2743+0x8
	ldr	r0, .L2743+0xc
	str	r0, [r1]
	ldr	r1, .L2743+0x10
	ldrb	r0, [r2]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	ldr	r6, .L2743+0x4
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2732
.L2744:
	.align	2, 0
.L2743:
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityNoStatLoss
	.word	gLastUsedAbility
.L2701:
	ldr	r1, .L2745
	ldrb	r0, [r1]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x33
	bne	.L2707	@cond_branch
	mov	r2, r9
	cmp	r2, #0
	bne	.L2707	@cond_branch
	cmp	r7, #0x6
	bne	.L2707	@cond_branch
	cmp	r5, #0x1
	bne	.L2732	@cond_branch
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r1, .L2745+0x4
	ldr	r3, .L2745
	ldrb	r0, [r3]
	strb	r0, [r1, #0x17]
	ldr	r1, .L2745+0x8
	ldr	r0, .L2745+0xc
	str	r0, [r1]
	ldr	r1, .L2745+0x10
	ldrb	r0, [r3]
	mul	r0, r0, r4
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r3]
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	b	.L2732
.L2746:
	.align	2, 0
.L2745:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityNoSpecificStatLoss
	.word	gLastUsedAbility
.L2707:
	ldr	r4, .L2747
	ldrb	r0, [r4]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x34
	bne	.L2710	@cond_branch
	mov	r0, r9
	cmp	r0, #0
	bne	.L2710	@cond_branch
	cmp	r7, #0x1
	bne	.L2710	@cond_branch
	cmp	r5, #0x1
	beq	.LCB26826
	b	.L2732	@long jump
.LCB26826:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r1, .L2747+0x4
	ldr	r2, .L2747
	ldrb	r0, [r2]
	strb	r0, [r1, #0x17]
	ldr	r1, .L2747+0x8
	ldr	r0, .L2747+0xc
	str	r0, [r1]
	ldr	r1, .L2747+0x10
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	b	.L2732
.L2748:
	.align	2, 0
.L2747:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityNoSpecificStatLoss
	.word	gLastUsedAbility
.L2710:
	ldr	r3, .L2749
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x13
	bne	.L2713	@cond_branch
	cmp	r5, #0
	bne	.LCB26877
	b	.L2732	@long jump
.LCB26877:
.L2713:
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x1c
	mov	r1, #0x7
	and	r0, r0, r1
	neg	r0, r0
	lsl	r0, r0, #0x18
	ldr	r3, .L2749+0x4
	mov	r4, #0x0
	mov	r1, #0xfd
	strb	r1, [r3]
	mov	r2, #0x1
	lsr	r6, r0, #0x18
	asr	r0, r0, #0x18
	sub	r1, r1, #0xff
	cmp	r0, r1
	bne	.L2715	@cond_branch
	strb	r4, [r3, #0x1]
	mov	r0, #0xd3
	strb	r0, [r3, #0x2]
	strb	r4, [r3, #0x3]
	mov	r2, #0x4
.L2715:
	add	r0, r2, r3
	strb	r4, [r0]
	add	r2, r2, #0x1
	add	r1, r2, r3
	mov	r0, #0xd4
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r0, r2, r3
	strb	r4, [r0]
	add	r2, r2, #0x1
	add	r1, r2, r3
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r4, .L2749
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r7, r0
	mov	r1, sl
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L2731	@cond_branch
	mov	r1, #0x0
	ldr	r0, .L2749+0x8
	ldrb	r0, [r0]
	ldr	r3, .L2749+0xc
	mov	r8, r3
	cmp	r0, r2
	bne	.L2718	@cond_branch
	mov	r1, #0x1
.L2718:
	mov	r4, r8
	strb	r1, [r4, #0x5]
	b	.L2719
.L2750:
	.align	2, 0
.L2749:
	.word	gActiveBattler
	.word	gBattleTextBuff2
	.word	gBattlerTarget
	.word	gBattleCommunication
.L2693:
	asr	r6, r0, #0x1c
	mov	r0, #0x7
	and	r6, r6, r0
	ldr	r3, .L2751
	strb	r2, [r3]
	mov	r2, #0x1
	cmp	r6, #0x2
	bne	.L2720	@cond_branch
	strb	r4, [r3, #0x1]
	mov	r0, #0xd1
	strb	r0, [r3, #0x2]
	strb	r4, [r3, #0x3]
	mov	r2, #0x4
.L2720:
	add	r0, r2, r3
	strb	r4, [r0]
	add	r2, r2, #0x1
	add	r1, r2, r3
	mov	r0, #0xd2
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r0, r2, r3
	strb	r4, [r0]
	add	r2, r2, #0x1
	add	r1, r2, r3
	ldrb	r0, [r1]
	mov	r2, ip
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r2, .L2751+0x4
	ldr	r4, .L2751+0x8
	ldrb	r3, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r7, r0
	add	r1, r2, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	sl, r2
	cmp	r0, #0xc
	bne	.L2721	@cond_branch
.L2731:
	ldr	r1, .L2751+0xc
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	mov	r8, r1
	b	.L2719
.L2752:
	.align	2, 0
.L2751:
	.word	gBattleTextBuff2
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattleCommunication
.L2721:
	mov	r1, #0x0
	ldr	r0, .L2753
	ldrb	r0, [r0]
	ldr	r2, .L2753+0x4
	mov	r8, r2
	cmp	r0, r3
	bne	.L2723	@cond_branch
	mov	r1, #0x1
.L2723:
	mov	r3, r8
	strb	r1, [r3, #0x5]
.L2719:
	ldr	r2, .L2753+0x8
	ldrb	r0, [r2]
	mov	r4, #0x58
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r7, r1
	mov	r3, sl
	add	r3, r3, #0x18
	add	r1, r1, r3
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x18
	ldrb	r6, [r1]
	add	r0, r0, r6
	strb	r0, [r1]
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r7, r0
	add	r1, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bge	.L2724	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L2724:
	ldr	r1, .L2753+0x8
	ldrb	r0, [r1]
	mul	r0, r0, r4
	add	r0, r7, r0
	add	r1, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xc
	ble	.L2725	@cond_branch
	mov	r0, #0xc
	strb	r0, [r1]
.L2725:
	mov	r2, r8
	ldrb	r0, [r2, #0x5]
	cmp	r0, #0x2
	bne	.L2727	@cond_branch
	mov	r3, #0x1
	and	r3, r3, r5
	cmp	r3, #0
	beq	.L2726	@cond_branch
	ldr	r0, .L2753+0xc
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
.L2726:
	mov	r4, r8
	ldrb	r0, [r4, #0x5]
	cmp	r0, #0x2
	bne	.L2727	@cond_branch
	cmp	r3, #0
	bne	.LCB27121
	b	.L2732	@long jump
.LCB27121:
.L2727:
	mov	r0, #0x0
.L2728:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2754:
	.align	2, 0
.L2753:
	.word	gBattlerTarget
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gMoveResultFlags
.Lfe163:
	.size	 ChangeStatBuffs,.Lfe163-ChangeStatBuffs
	.align	2, 0
	.type	 Cmd_statbuffchange,function
	.thumb_func
Cmd_statbuffchange:
	push	{r4, r5, lr}
	ldr	r5, .L2757
	ldr	r2, [r5]
	ldrb	r3, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r0, .L2757+0x4
	ldrb	r4, [r0, #0x1a]
	mov	r0, #0xf0
	and	r0, r0, r4
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0xf
	and	r1, r1, r4
	ldrb	r2, [r2, #0x1]
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2756	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, #0x6
	str	r0, [r5]
.L2756:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2758:
	.align	2, 0
.L2757:
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
.Lfe164:
	.size	 Cmd_statbuffchange,.Lfe164-Cmd_statbuffchange
	.align	2, 0
	.type	 Cmd_normalisebuffs,function
	.thumb_func
Cmd_normalisebuffs:
	push	{r4, r5, r6, r7, lr}
	mov	r2, #0x0
	ldr	r0, .L2770
	ldrb	r1, [r0]
	ldr	r0, .L2770+0x4
	mov	ip, r0
	cmp	r2, r1
	bge	.L2761	@cond_branch
	ldr	r0, .L2770+0x8
	mov	r4, #0x6
	add	r5, r1, #0
	mov	r7, #0x58
	add	r6, r0, #0
	add	r6, r6, #0x18
.L2763:
	add	r3, r2, #0x1
	mov	r1, #0x7
	mov	r0, r2
	mul	r0, r0, r7
	add	r0, r0, r6
	add	r0, r0, #0x7
.L2767:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L2767	@cond_branch
	add	r2, r3, #0
	cmp	r2, r5
	blt	.L2763	@cond_branch
.L2761:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2771:
	.align	2, 0
.L2770:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.Lfe165:
	.size	 Cmd_normalisebuffs,.Lfe165-Cmd_normalisebuffs
	.align	2, 0
	.type	 Cmd_setbide,function
	.thumb_func
Cmd_setbide:
	push	{r4, r5, lr}
	ldr	r4, .L2773
	ldr	r3, .L2773+0x4
	ldrb	r0, [r3]
	mov	r5, #0x58
	mov	r2, r0
	mul	r2, r2, r5
	add	r4, r4, #0x50
	add	r2, r2, r4
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L2773+0x8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L2773+0xc
	ldrh	r1, [r1]
	mov	r2, #0x0
	strh	r1, [r0]
	ldr	r1, .L2773+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	str	r2, [r0]
	ldrb	r0, [r3]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L2773+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2774:
	.align	2, 0
.L2773:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gLockedMoves
	.word	gCurrentMove
	.word	gTakenDmg
	.word	gBattlescriptCurrInstr
.Lfe166:
	.size	 Cmd_setbide,.Lfe166-Cmd_setbide
	.align	2, 0
	.type	 Cmd_confuseifrepeatingattackends,function
	.thumb_func
Cmd_confuseifrepeatingattackends:
	push	{lr}
	ldr	r1, .L2777
	ldr	r0, .L2777+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2776	@cond_branch
	ldr	r1, .L2777+0x8
	mov	r0, #0x75
	strb	r0, [r1, #0x3]
.L2776:
	ldr	r1, .L2777+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2778:
	.align	2, 0
.L2777:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe167:
	.size	 Cmd_confuseifrepeatingattackends,.Lfe167-Cmd_confuseifrepeatingattackends
	.align	2, 0
	.type	 Cmd_setmultihitcounter,function
	.thumb_func
Cmd_setmultihitcounter:
	push	{r4, r5, lr}
	ldr	r0, .L2784
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x1]
	cmp	r1, #0
	beq	.L2780	@cond_branch
	ldr	r0, .L2784+0x4
	strb	r1, [r0]
	b	.L2781
.L2785:
	.align	2, 0
.L2784:
	.word	gBattlescriptCurrInstr
	.word	gMultiHitCounter
.L2780:
	ldr	r4, .L2786
	bl	Random
	mov	r5, #0x3
	and	r0, r0, r5
	strb	r0, [r4]
	cmp	r0, #0x1
	bls	.L2782	@cond_branch
	bl	Random
	and	r0, r0, r5
.L2782:
	add	r0, r0, #0x2
	strb	r0, [r4]
.L2781:
	ldr	r1, .L2786+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2787:
	.align	2, 0
.L2786:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.Lfe168:
	.size	 Cmd_setmultihitcounter,.Lfe168-Cmd_setmultihitcounter
	.align	2, 0
	.type	 Cmd_initmultihitstring,function
	.thumb_func
Cmd_initmultihitstring:
	ldr	r1, .L2789
	mov	r2, #0x0
	mov	r0, #0xfd
	strb	r0, [r1, #0x8]
	mov	r0, #0x1
	strb	r0, [r1, #0x9]
	strb	r0, [r1, #0xa]
	strb	r0, [r1, #0xb]
	strb	r2, [r1, #0xc]
	mov	r0, #0xff
	strb	r0, [r1, #0xd]
	ldr	r1, .L2789+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2790:
	.align	2, 0
.L2789:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe169:
	.size	 Cmd_initmultihitstring,.Lfe169-Cmd_initmultihitstring
	.align	2, 0
	.type	 TryDoForceSwitchOut,function
	.thumb_func
TryDoForceSwitchOut:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L2797
	ldr	r7, .L2797+0x4
	ldrb	r0, [r7]
	mov	r5, #0x58
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	add	r1, r1, #0x2a
	ldr	r4, .L2797+0x8
	ldrb	r3, [r4]
	mov	r0, r3
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L2792	@cond_branch
	ldr	r0, .L2797+0xc
	ldr	r1, [r0]
	add	r1, r3, r1
	add	r1, r1, #0x58
	ldr	r2, .L2797+0x10
	lsl	r0, r3, #0x1
	b	.L2796
.L2798:
	.align	2, 0
.L2797:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
.L2792:
	bl	Random
	mov	r3, #0xff
	and	r3, r3, r0
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r2, [r0]
	ldrb	r4, [r4]
	mov	r0, r4
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	add	r2, r2, r1
	mov	r0, r3
	mul	r0, r0, r2
	asr	r0, r0, #0x8
	add	r0, r0, #0x1
	lsr	r1, r1, #0x2
	cmp	r0, r1
	bhi	.L2794	@cond_branch
	ldr	r3, .L2799
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	mov	r0, #0x0
	b	.L2795
.L2800:
	.align	2, 0
.L2799:
	.word	gBattlescriptCurrInstr
.L2794:
	ldr	r0, .L2801
	ldr	r1, [r0]
	add	r1, r4, r1
	add	r1, r1, #0x58
	ldr	r2, .L2801+0x4
	lsl	r0, r4, #0x1
.L2796:
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L2801+0x8
	ldr	r0, .L2801+0xc
	str	r0, [r1]
	mov	r0, #0x1
.L2795:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2802:
	.align	2, 0
.L2801:
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SuccessForceOut
.Lfe170:
	.size	 TryDoForceSwitchOut,.Lfe170-TryDoForceSwitchOut
	.align	2, 0
	.type	 Cmd_forcerandomswitch,function
	.thumb_func
Cmd_forcerandomswitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L2850
	ldr	r0, [r4]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB27593
	b	.L2804	@long jump
.LCB27593:
	ldr	r5, .L2850+0x4
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L2850+0x8
	mov	r8, r1
	cmp	r0, #0
	bne	.L2805	@cond_branch
	ldr	r0, .L2850+0xc
	mov	r8, r0
.L2805:
	ldr	r0, [r4]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2807	@cond_branch
	mov	r7, #0x0
	mov	r6, #0x0
	ldrb	r0, [r5]
	bl	GetBattlerMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetLinkTrainerFlankId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L2808	@cond_branch
	mov	r6, #0x3
.L2808:
	add	r5, r6, #0
	add	r0, r5, #0x3
	cmp	r5, r0
	bge	.L2815	@cond_branch
.L2812:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2811	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L2811	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2811	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L2811:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r6, #0x3
	cmp	r5, r0
	blt	.L2812	@cond_branch
	b	.L2815
.L2851:
	.align	2, 0
.L2850:
	.word	gBattleTypeFlags
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gPlayerParty
.L2807:
	mov	r7, #0x0
	mov	r5, #0x0
.L2819:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2818	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L2818	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2818	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L2818:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L2819	@cond_branch
.L2815:
	cmp	r7, #0x1
	bhi	.L2824	@cond_branch
	ldr	r0, .L2852
	ldr	r0, [r0]
	mov	r1, #0x41
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L2823	@cond_branch
.L2824:
	cmp	r7, #0x2
	bhi	.L2822	@cond_branch
	ldr	r0, .L2852
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2822	@cond_branch
	mov	r0, #0x40
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2822	@cond_branch
.L2823:
	ldr	r3, .L2852+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2849
.L2853:
	.align	2, 0
.L2852:
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
.L2822:
	bl	TryDoForceSwitchOut
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB27780
	b	.L2849	@long jump
.LCB27780:
	ldr	r0, .L2854
	ldr	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2827	@cond_branch
.L2828:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L2854+0x4
	ldrb	r0, [r0]
	bl	GetBattlerMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetLinkTrainerFlankId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L2831	@cond_branch
	add	r0, r6, #0x3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L2830
.L2855:
	.align	2, 0
.L2854:
	.word	gBattleTypeFlags
	.word	gBattlerTarget
.L2831:
	add	r5, r6, #0
.L2830:
	ldr	r4, .L2856
	ldr	r0, .L2856+0x4
	ldrb	r2, [r0]
	lsl	r1, r2, #0x1
	add	r1, r1, r4
	lsl	r0, r5, #0x10
	lsr	r3, r0, #0x10
	ldrh	r1, [r1]
	cmp	r3, r1
	beq	.L2828	@cond_branch
	mov	r0, #0x2
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r3, r0
	beq	.L2828	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2828	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L2828	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2828	@cond_branch
	b	.L2835
.L2857:
	.align	2, 0
.L2856:
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
.L2827:
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2836	@cond_branch
	ldr	r6, .L2858
.L2837:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x6
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L2858+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r6
	add	r2, r5, #0
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L2837	@cond_branch
	mov	r0, #0x2
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L2837	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2837	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L2837	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2837	@cond_branch
	b	.L2835
.L2859:
	.align	2, 0
.L2858:
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
.L2836:
	ldr	r6, .L2860
.L2843:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x6
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L2860+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L2843	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2843	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L2843	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2843	@cond_branch
.L2835:
	ldr	r4, .L2860+0x4
	ldrb	r0, [r4]
	ldr	r1, .L2860+0x8
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	strb	r5, [r0]
	bl	IsMultiBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2848	@cond_branch
	ldrb	r0, [r4]
	bl	UpdatePartyOwnerOnSwitch_NonMulti
.L2848:
	ldrb	r0, [r4]
	add	r1, r5, #0
	mov	r2, #0x0
	bl	SwitchPartyOrderLinkMulti
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r1, r5, #0
	mov	r2, #0x1
	bl	SwitchPartyOrderLinkMulti
	b	.L2849
.L2861:
	.align	2, 0
.L2860:
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gBattleStruct
.L2804:
	bl	TryDoForceSwitchOut
.L2849:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe171:
	.size	 Cmd_forcerandomswitch,.Lfe171-Cmd_forcerandomswitch
	.align	2, 0
	.type	 Cmd_tryconversiontypechange,function
	.thumb_func
Cmd_tryconversiontypechange:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	ldr	r2, .L2893
	ldr	r3, .L2893+0x4
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r8, r2
	cmp	r0, #0
	beq	.L2864	@cond_branch
	mov	r5, #0x58
	add	r2, r1, #0
.L2866:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bhi	.L2864	@cond_branch
	lsl	r1, r6, #0x1
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L2866	@cond_branch
.L2864:
	mov	r3, #0x0
	cmp	r3, r6
	bcs	.L2869	@cond_branch
	ldr	r0, .L2893+0x8
	mov	sl, r0
	ldr	r5, .L2893
	mov	ip, r5
	ldr	r7, .L2893+0x4
	ldrb	r0, [r7]
	mov	r4, #0x58
	mov	r5, r0
	mul	r5, r5, r4
	mov	r0, #0xc
	add	r0, r0, ip
	mov	r9, r0
.L2871:
	lsl	r0, r3, #0x1
	add	r0, r0, r5
	add	r0, r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrb	r2, [r0, #0x2]
	cmp	r2, #0x9
	bne	.L2872	@cond_branch
	mov	r0, r8
	add	r1, r5, r0
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L2874	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L2873	@cond_branch
.L2874:
	mov	r2, #0x7
	b	.L2872
.L2894:
	.align	2, 0
.L2893:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
.L2873:
	mov	r2, #0x0
.L2872:
	ldrb	r0, [r7]
	mul	r0, r0, r4
	add	r0, r0, ip
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	cmp	r2, r1
	beq	.L2870	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r2, r0
	bne	.L2869	@cond_branch
.L2870:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r6
	bcc	.L2871	@cond_branch
.L2869:
	cmp	r3, r6
	bne	.L2878	@cond_branch
	ldr	r3, .L2895
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2879
.L2896:
	.align	2, 0
.L2895:
	.word	gBattlescriptCurrInstr
.L2878:
	mov	r7, #0x3
	ldr	r5, .L2897
	mov	r9, r5
.L2883:
	bl	Random
	add	r3, r0, #0
	and	r3, r3, r7
	cmp	r3, r6
	bcs	.L2883	@cond_branch
	ldr	r4, .L2897+0x4
	lsl	r1, r3, #0x1
	ldr	r3, .L2897+0x8
	ldrb	r2, [r3]
	mov	r0, #0x58
	mov	r5, r2
	mul	r5, r5, r0
	add	r1, r1, r5
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r2, [r0, #0x2]
	mov	r8, r4
	add	r4, r3, #0
	cmp	r2, #0x9
	bne	.L2882	@cond_branch
	mov	r0, r8
	add	r2, r5, r0
	add	r0, r2, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L2889	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L2888	@cond_branch
.L2889:
	mov	r2, #0x7
	b	.L2882
.L2898:
	.align	2, 0
.L2897:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattlerAttacker
.L2888:
	mov	r2, #0x0
.L2882:
	ldrb	r0, [r4]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r0, r0, r8
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r5, [r1]
	cmp	r2, r5
	beq	.L2883	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L2883	@cond_branch
	strb	r2, [r1]
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r8
	add	r0, r0, #0x22
	strb	r2, [r0]
	ldr	r1, .L2899
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L2899+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2879:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2900:
	.align	2, 0
.L2899:
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.Lfe172:
	.size	 Cmd_tryconversiontypechange,.Lfe172-Cmd_tryconversiontypechange
	.align	2, 0
	.type	 Cmd_givepaydaymoney,function
	.thumb_func
Cmd_givepaydaymoney:
	push	{r4, r5, lr}
	ldr	r0, .L2904
	ldr	r0, [r0]
	mov	r5, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L2902	@cond_branch
	ldr	r1, .L2904+0x4
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L2902	@cond_branch
	add	r1, r0, #0
	ldr	r0, .L2904+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L2904+0xc
	ldr	r0, [r0]
	mov	r1, #0xa4
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	add	r1, r4, #0
	bl	AddMoney
	ldr	r1, .L2904+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	strb	r5, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x3]
	strb	r4, [r1, #0x4]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r4, r4, r0
	lsr	r4, r4, #0x8
	strb	r4, [r1, #0x5]
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	ldr	r4, .L2904+0x14
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L2904+0x18
	str	r0, [r4]
	b	.L2903
.L2905:
	.align	2, 0
.L2904:
	.word	gBattleTypeFlags
	.word	gPaydayMoney
	.word	gBattleStruct
	.word	gSaveBlock1Ptr
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PrintPayDayMoneyString
.L2902:
	ldr	r1, .L2906
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2903:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2907:
	.align	2, 0
.L2906:
	.word	gBattlescriptCurrInstr
.Lfe173:
	.size	 Cmd_givepaydaymoney,.Lfe173-Cmd_givepaydaymoney
	.align	2, 0
	.type	 Cmd_setlightscreen,function
	.thumb_func
Cmd_setlightscreen:
	push	{r4, r5, r6, lr}
	ldr	r5, .L2914
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	ldr	r4, .L2914+0x4
	mov	r6, #0x1
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r1, [r1]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2909	@cond_branch
	ldr	r2, .L2914+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2914+0xc
	mov	r0, #0x0
	b	.L2913
.L2915:
	.align	2, 0
.L2914:
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L2909:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r0, [r1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	ldr	r4, .L2916
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x5
	strb	r1, [r0, #0x2]
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r5]
	strb	r1, [r0, #0x3]
	ldr	r0, .L2916+0x4
	ldr	r0, [r0]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L2911	@cond_branch
	mov	r0, #0x1
	bl	CountAliveMonsInBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L2911	@cond_branch
	ldr	r1, .L2916+0x8
	mov	r0, #0x4
	b	.L2913
.L2917:
	.align	2, 0
.L2916:
	.word	gSideTimers
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L2911:
	ldr	r1, .L2918
	mov	r0, #0x3
.L2913:
	strb	r0, [r1, #0x5]
	ldr	r1, .L2918+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2919:
	.align	2, 0
.L2918:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe174:
	.size	 Cmd_setlightscreen,.Lfe174-Cmd_setlightscreen
	.align	2, 0
	.type	 Cmd_tryKO,function
	.thumb_func
Cmd_tryKO:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r7, .L2945
	ldr	r6, .L2945+0x4
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L2921	@cond_branch
	ldr	r1, .L2945+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L2922
.L2946:
	.align	2, 0
.L2945:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gEnigmaBerries
.L2921:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L2922:
	ldr	r1, .L2947
	ldr	r5, .L2947+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L2923	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L2923	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemEffectBattle
	ldr	r2, .L2947+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L2923:
	ldr	r1, .L2947+0xc
	ldr	r2, .L2947+0x4
	ldrb	r3, [r2]
	mov	r6, #0x58
	mov	r0, r3
	mul	r0, r0, r6
	add	r5, r0, r1
	add	r0, r5, #0
	add	r0, r0, #0x20
	ldrb	r4, [r0]
	mov	r8, r1
	mov	r9, r2
	cmp	r4, #0x5
	bne	.L2924	@cond_branch
	ldr	r2, .L2947+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L2947+0x14
	strb	r4, [r0]
	ldr	r1, .L2947+0x18
	ldr	r0, .L2947+0x1c
	str	r0, [r1]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, #0x5
	bl	RecordAbilityBattle
	b	.L2925
.L2948:
	.align	2, 0
.L2947:
	.word	gPotentialItemEffectBattler
	.word	gBattlerTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gMoveResultFlags
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SturdyPreventsOHKO
.L2924:
	ldr	r1, .L2949
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2926	@cond_branch
	ldr	r1, .L2949+0x4
	ldr	r0, .L2949+0x8
	ldrh	r0, [r0]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldr	r7, .L2949+0xc
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r8
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	add	r1, r5, #0
	add	r1, r1, #0x2a
	ldrb	r1, [r1]
	sub	r0, r0, r1
	ldrb	r2, [r2, #0x3]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x1
	cmp	r0, r4
	blt	.LCB28785
	b	.L2934	@long jump
.LCB28785:
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r8
	add	r1, r1, #0x2a
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r0, r0, r8
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	mov	r4, #0x1
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L2929	@cond_branch
	b	.L2934
.L2950:
	.align	2, 0
.L2949:
	.word	gStatuses3
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlerAttacker
.L2926:
	ldr	r1, .L2951
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L2951+0x4
	ldrb	r0, [r0, #0x15]
	add	r7, r1, #0
	ldrb	r3, [r7]
	cmp	r0, r3
	bne	.L2930	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r8
	add	r0, r0, #0x2a
	add	r1, r5, #0
	add	r1, r1, #0x2a
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L2942	@cond_branch
.L2930:
	ldr	r1, .L2951+0x8
	ldr	r0, .L2951+0xc
	ldrh	r0, [r0]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldr	r6, .L2951+0x10
	ldrb	r0, [r7]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	ldr	r0, .L2951+0x14
	mov	r8, r0
	ldrb	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	sub	r1, r1, r0
	ldrb	r2, [r2, #0x3]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x1
	cmp	r0, r4
	bge	.L2932	@cond_branch
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	add	r1, r1, #0x2a
	mov	r2, r8
	ldrb	r0, [r2]
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	mov	r4, #0x1
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L2929	@cond_branch
.L2932:
	mov	r4, #0x0
.L2929:
	ldr	r3, .L2951+0x10
	mov	r8, r3
	ldr	r0, .L2951+0x14
	mov	r9, r0
	cmp	r4, #0
	beq	.L2934	@cond_branch
.L2942:
	ldr	r0, .L2951+0x18
	mov	r1, r9
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L2935	@cond_branch
	ldr	r1, .L2951+0x1c
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x28]
	sub	r0, r0, #0x1
	str	r0, [r1]
	ldr	r2, .L2951+0x20
	ldrb	r0, [r2]
	mov	r1, #0x40
	b	.L2943
.L2952:
	.align	2, 0
.L2951:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
.L2935:
	ldr	r0, .L2953
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L2937	@cond_branch
	ldr	r1, .L2953+0x4
	mov	r3, #0x58
	mov	r0, r2
	mul	r0, r0, r3
	add	r0, r0, r8
	ldrh	r0, [r0, #0x28]
	sub	r0, r0, #0x1
	str	r0, [r1]
	ldr	r2, .L2953+0x8
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2953+0xc
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
	b	.L2936
.L2954:
	.align	2, 0
.L2953:
	.word	gSpecialStatuses
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
	.word	gLastUsedItem
.L2937:
	ldr	r1, .L2955
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x28]
	str	r0, [r1]
	ldr	r2, .L2955+0x4
	ldrb	r0, [r2]
	mov	r1, #0x10
.L2943:
	orr	r0, r0, r1
	strb	r0, [r2]
.L2936:
	ldr	r1, .L2955+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2925
.L2956:
	.align	2, 0
.L2955:
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
.L2934:
	ldr	r2, .L2957
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r3, .L2957+0x4
	ldr	r0, .L2957+0x8
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2a
	ldr	r0, .L2957+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L2940	@cond_branch
	ldr	r1, .L2957+0x10
	mov	r0, #0x0
	b	.L2944
.L2958:
	.align	2, 0
.L2957:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleCommunication
.L2940:
	ldr	r1, .L2959
	mov	r0, #0x1
.L2944:
	strb	r0, [r1, #0x5]
	ldr	r3, .L2959+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2925:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2960:
	.align	2, 0
.L2959:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe175:
	.size	 Cmd_tryKO,.Lfe175-Cmd_tryKO
	.align	2, 0
	.type	 Cmd_damagetohalftargethp,function
	.thumb_func
Cmd_damagetohalftargethp:
	push	{lr}
	ldr	r3, .L2963
	ldr	r2, .L2963+0x4
	ldr	r0, .L2963+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	lsr	r0, r0, #0x1
	str	r0, [r3]
	cmp	r0, #0
	bne	.L2962	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L2962:
	ldr	r1, .L2963+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2964:
	.align	2, 0
.L2963:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe176:
	.size	 Cmd_damagetohalftargethp,.Lfe176-Cmd_damagetohalftargethp
	.align	2, 0
	.type	 Cmd_setsandstorm,function
	.thumb_func
Cmd_setsandstorm:
	push	{lr}
	ldr	r2, .L2968
	ldrh	r1, [r2]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2966	@cond_branch
	ldr	r2, .L2968+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2968+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L2967
.L2969:
	.align	2, 0
.L2968:
	.word	gBattleWeather
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L2966:
	mov	r0, #0x8
	strh	r0, [r2]
	ldr	r1, .L2970
	mov	r0, #0x3
	strb	r0, [r1, #0x5]
	ldr	r0, .L2970+0x4
	add	r0, r0, #0x28
	mov	r1, #0x5
	strb	r1, [r0]
.L2967:
	ldr	r1, .L2970+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2971:
	.align	2, 0
.L2970:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe177:
	.size	 Cmd_setsandstorm,.Lfe177-Cmd_setsandstorm
	.align	2, 0
	.type	 Cmd_weatherdamage,function
	.thumb_func
Cmd_weatherdamage:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L2987
	ldr	r0, [r0]
	mov	r1, #0xa0
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	cmp	r0, r1
	bne	.L2973	@cond_branch
	ldr	r0, .L2987+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB29234
	b	.L2985	@long jump
.LCB29234:
.L2973:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB29248
	b	.L2974	@long jump
.LCB29248:
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB29259
	b	.L2974	@long jump
.LCB29259:
	ldr	r2, .L2987+0x8
	ldrh	r1, [r2]
	mov	r0, #0x18
	and	r0, r0, r1
	ldr	r5, .L2987+0x4
	add	r4, r2, #0
	cmp	r0, #0
	beq	.L2975	@cond_branch
	ldr	r0, .L2987+0xc
	ldrb	r2, [r5]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r3, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x5
	beq	.L2976	@cond_branch
	cmp	r0, #0x8
	beq	.L2976	@cond_branch
	cmp	r0, #0x4
	beq	.L2976	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x5
	beq	.L2976	@cond_branch
	cmp	r0, #0x8
	beq	.L2976	@cond_branch
	cmp	r0, #0x4
	beq	.L2976	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x8
	beq	.L2976	@cond_branch
	ldr	r0, .L2987+0x10
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2976	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2976	@cond_branch
	ldr	r1, .L2987+0x14
	ldrh	r0, [r3, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L2975	@cond_branch
	mov	r0, #0x1
	b	.L2986
.L2988:
	.align	2, 0
.L2987:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gBattleWeather
	.word	gBattleMons
	.word	gStatuses3
	.word	gBattleMoveDamage
.L2976:
	ldr	r1, .L2989
	mov	r0, #0x0
.L2986:
	str	r0, [r1]
.L2975:
	ldrh	r1, [r4]
	mov	r4, #0x80
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2983	@cond_branch
	ldr	r1, .L2989+0x4
	ldrb	r3, [r5]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r2, r0, r1
	add	r0, r2, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xf
	beq	.L2980	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xf
	beq	.L2980	@cond_branch
	ldr	r0, .L2989+0x8
	lsl	r1, r3, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r1, #0
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L2980	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2980	@cond_branch
	ldr	r1, .L2989
	ldrh	r0, [r2, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L2983	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
	b	.L2983
.L2990:
	.align	2, 0
.L2989:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gStatuses3
.L2980:
	ldr	r1, .L2991
	mov	r0, #0x0
	str	r0, [r1]
	b	.L2983
.L2992:
	.align	2, 0
.L2991:
	.word	gBattleMoveDamage
.L2974:
	ldr	r1, .L2993
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r5, .L2993+0x4
.L2983:
	ldr	r0, .L2993+0x8
	ldrb	r1, [r0]
	ldr	r2, .L2993+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2984	@cond_branch
.L2985:
	ldr	r1, .L2993
	mov	r0, #0x0
	str	r0, [r1]
.L2984:
	ldr	r1, .L2993+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2994:
	.align	2, 0
.L2993:
	.word	gBattleMoveDamage
	.word	gBattlerAttacker
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe178:
	.size	 Cmd_weatherdamage,.Lfe178-Cmd_weatherdamage
	.align	2, 0
	.type	 Cmd_tryinfatuating,function
	.thumb_func
Cmd_tryinfatuating:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L3007
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2996	@cond_branch
	ldr	r1, .L3007+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3007+0x8
	b	.L3005
.L3008:
	.align	2, 0
.L3007:
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L2996:
	ldr	r1, .L3009
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3009+0x4
.L3005:
	add	r5, r1, r0
	ldr	r4, .L3009+0x8
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2998	@cond_branch
	ldr	r1, .L3009
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3009+0xc
	b	.L3006
.L3010:
	.align	2, 0
.L3009:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerTarget
	.word	gPlayerParty
.L2998:
	ldr	r1, .L3011
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3011+0x4
.L3006:
	add	r4, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetMonData
	mov	r9, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r7, r0, #0
	ldr	r5, .L3011+0x8
	ldrb	r0, [r5]
	mov	r6, #0x58
	mul	r0, r0, r6
	ldr	r1, .L3011+0xc
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r2, [r0]
	cmp	r2, #0xc
	bne	.L3000	@cond_branch
	ldr	r1, .L3011+0x10
	ldr	r0, .L3011+0x14
	str	r0, [r1]
	ldr	r0, .L3011+0x18
	strb	r2, [r0]
	ldrb	r0, [r5]
	mov	r1, #0xc
	bl	RecordAbilityBattle
	b	.L3001
.L3012:
	.align	2, 0
.L3011:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ObliviousPreventsAttraction
	.word	gLastUsedAbility
.L3000:
	mov	r0, sl
	mov	r1, r9
	bl	GetGenderFromSpeciesAndPersonality
	add	r4, r0, #0
	mov	r0, r8
	add	r1, r7, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L3003	@cond_branch
	ldrb	r0, [r5]
	mul	r0, r0, r6
	ldr	r4, .L3013
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3003	@cond_branch
	mov	r0, sl
	mov	r1, r9
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L3003	@cond_branch
	mov	r0, r8
	add	r1, r7, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L3002	@cond_branch
.L3003:
	ldr	r3, .L3013+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3001
.L3014:
	.align	2, 0
.L3013:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L3002:
	ldrb	r0, [r5]
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r4
	ldr	r1, .L3015
	ldr	r0, .L3015+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3015+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3001:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3016:
	.align	2, 0
.L3015:
	.word	gBitTable
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe179:
	.size	 Cmd_tryinfatuating,.Lfe179-Cmd_tryinfatuating
	.align	2, 0
	.type	 Cmd_updatestatusicon,function
	.thumb_func
Cmd_updatestatusicon:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L3032
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.LCB29722
	b	.L3017	@long jump
.LCB29722:
	ldr	r5, .L3032+0x4
	ldr	r2, [r5]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0xd
	bne	.L3019	@cond_branch
	ldr	r2, .L3032+0x8
	strb	r1, [r2]
	ldr	r0, .L3032+0xc
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L3029	@cond_branch
	ldr	r7, .L3032+0x10
	add	r4, r2, #0
	ldr	r5, .L3032+0x14
	add	r6, r5, #0
	add	r6, r6, #0x50
.L3023:
	ldr	r0, .L3032+0x18
	ldrb	r1, [r0]
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3022	@cond_branch
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r0, r5, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r2, r2, r6
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L3022:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L3032+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L3023	@cond_branch
	b	.L3029
.L3033:
	.align	2, 0
.L3032:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBitTable
	.word	gBattleMons
	.word	gAbsentBattlerFlags
.L3019:
	cmp	r0, #0x4
	bne	.L3027	@cond_branch
	ldr	r4, .L3034
	ldr	r5, .L3034+0x4
	ldrb	r0, [r5]
	strb	r0, [r4]
	ldr	r6, .L3034+0x8
	ldrb	r1, [r6]
	ldr	r7, .L3034+0xc
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3028	@cond_branch
	ldr	r3, .L3034+0x10
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L3028:
	ldr	r0, .L3034+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3029	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	strb	r0, [r4]
	ldrb	r1, [r6]
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3029	@cond_branch
	ldr	r3, .L3034+0x10
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L3029:
	ldr	r1, .L3034+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	b	.L3017
.L3035:
	.align	2, 0
.L3034:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
.L3027:
	ldrb	r0, [r2, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L3036
	strb	r0, [r4]
	ldr	r3, .L3036+0x4
	ldrb	r1, [r4]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L3017:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3037:
	.align	2, 0
.L3036:
	.word	gActiveBattler
	.word	gBattleMons
.Lfe180:
	.size	 Cmd_updatestatusicon,.Lfe180-Cmd_updatestatusicon
	.align	2, 0
	.type	 Cmd_setmist,function
	.thumb_func
Cmd_setmist:
	push	{r4, r5, r6, lr}
	ldr	r6, .L3041
	ldr	r4, .L3041+0x4
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L3039	@cond_branch
	ldr	r2, .L3041+0x8
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L3041+0xc
	strb	r5, [r0, #0x5]
	b	.L3040
.L3042:
	.align	2, 0
.L3041:
	.word	gSideTimers
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3039:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x5
	strb	r1, [r0, #0x4]
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r4]
	strb	r1, [r0, #0x5]
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r2, .L3043
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	mov	r3, #0x0
	orr	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, .L3043+0x4
	strb	r3, [r0, #0x5]
.L3040:
	ldr	r1, .L3043+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3044:
	.align	2, 0
.L3043:
	.word	gSideStatuses
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe181:
	.size	 Cmd_setmist,.Lfe181-Cmd_setmist
	.align	2, 0
	.type	 Cmd_setfocusenergy,function
	.thumb_func
Cmd_setfocusenergy:
	push	{lr}
	ldr	r1, .L3048
	ldr	r0, .L3048+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0xd
	add	r2, r1, #0
	and	r2, r2, r3
	cmp	r2, #0
	beq	.L3046	@cond_branch
	ldr	r2, .L3048+0x8
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3048+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L3047
.L3049:
	.align	2, 0
.L3048:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3046:
	orr	r1, r1, r3
	str	r1, [r0]
	ldr	r0, .L3050
	strb	r2, [r0, #0x5]
.L3047:
	ldr	r1, .L3050+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3051:
	.align	2, 0
.L3050:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe182:
	.size	 Cmd_setfocusenergy,.Lfe182-Cmd_setfocusenergy
	.align	2, 0
	.type	 Cmd_transformdataexecution,function
	.thumb_func
Cmd_transformdataexecution:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L3070
	ldr	r2, .L3070+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L3070+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r7, .L3070+0xc
	ldr	r0, .L3070+0x10
	mov	ip, r0
	ldrb	r1, [r0]
	mov	r6, #0x58
	mov	r0, r1
	mul	r0, r0, r6
	add	r5, r7, #0
	add	r5, r5, #0x50
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r4, #0x80
	lsl	r4, r4, #0xe
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L3054	@cond_branch
	ldr	r0, .L3070+0x14
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	ldr	r0, .L3070+0x18
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L3053	@cond_branch
.L3054:
	ldr	r2, .L3070+0x1c
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3070+0x20
	mov	r0, #0x1
	b	.L3068
.L3071:
	.align	2, 0
.L3070:
	.word	gChosenMove
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gStatuses3
	.word	0x400c0
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3053:
	ldr	r3, .L3072
	ldrb	r0, [r3]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	ldr	r0, [r1]
	orr	r0, r0, r4
	str	r0, [r1]
	ldr	r4, .L3072+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x4]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0xb]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r2, ip
	ldrb	r1, [r2]
	mul	r1, r1, r6
	add	r2, r7, #0
	add	r2, r2, #0x48
	add	r1, r1, r2
	ldr	r1, [r1]
	str	r1, [r0]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x18]
	mov	r0, #0xf
	and	r0, r0, r2
	strb	r0, [r1, #0x18]
	ldr	r1, .L3072+0x8
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	mov	r2, ip
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r0, [r3]
	mul	r0, r0, r6
	add	r5, r0, r7
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r2, r0, r7
	mov	r4, #0x0
	add	r6, r3, #0
	ldr	r0, .L3072+0xc
	mov	r8, r0
.L3059:
	add	r0, r5, r4
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x23
	bls	.L3059	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L3072+0x10
	ldr	r3, .L3072+0x14
	add	r5, r3, #0
	add	r5, r5, #0x18
.L3064:
	lsl	r1, r4, #0x1
	ldrb	r2, [r6]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x4]
	cmp	r1, #0x4
	bhi	.L3065	@cond_branch
	add	r0, r4, r2
	add	r0, r0, r5
	b	.L3069
.L3073:
	.align	2, 0
.L3072:
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gBattleTextBuff1
	.word	gActiveBattler
	.word	gBattleMoves
	.word	gBattleMons+0xc
.L3065:
	add	r0, r4, r2
	add	r0, r0, r5
	mov	r1, #0x5
.L3069:
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L3064	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r8
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitResetActionMoveSelection
	mov	r2, r8
	ldrb	r0, [r2]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L3074
	mov	r0, #0x0
.L3068:
	strb	r0, [r1, #0x5]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3075:
	.align	2, 0
.L3074:
	.word	gBattleCommunication
.Lfe183:
	.size	 Cmd_transformdataexecution,.Lfe183-Cmd_transformdataexecution
	.align	2, 0
	.type	 Cmd_setsubstitute,function
	.thumb_func
Cmd_setsubstitute:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L3081
	ldr	r6, .L3081+0x4
	ldrb	r0, [r6]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r3, r0, r7
	ldrh	r0, [r3, #0x2c]
	lsr	r1, r0, #0x2
	add	r2, r1, #0
	cmp	r1, #0
	bne	.L3077	@cond_branch
	mov	r2, #0x1
.L3077:
	ldrh	r0, [r3, #0x28]
	cmp	r0, r2
	bhi	.L3078	@cond_branch
	ldr	r1, .L3081+0x8
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r1, .L3081+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L3079
.L3082:
	.align	2, 0
.L3081:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleCommunication
.L3078:
	ldr	r4, .L3083
	str	r1, [r4]
	cmp	r1, #0
	bne	.L3080	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L3080:
	ldrb	r0, [r6]
	mov	r2, r0
	mul	r2, r2, r5
	add	r3, r7, #0
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	orr	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r3
	ldr	r0, [r1]
	ldr	r2, .L3083+0x4
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r2, .L3083+0x8
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r4]
	mov	r2, #0x0
	strb	r1, [r0, #0xa]
	ldr	r0, .L3083+0xc
	strb	r2, [r0, #0x5]
	ldr	r2, .L3083+0x10
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	orr	r0, r0, r1
	str	r0, [r2]
.L3079:
	ldr	r1, .L3083+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3084:
	.align	2, 0
.L3083:
	.word	gBattleMoveDamage
	.word	-0xe001
	.word	gDisableStructs
	.word	gBattleCommunication
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
.Lfe184:
	.size	 Cmd_setsubstitute,.Lfe184-Cmd_setsubstitute
	.align	2, 0
	.type	 IsMoveUncopyableByMimic,function
	.thumb_func
IsMoveUncopyableByMimic:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r3, #0x0
	ldr	r0, .L3093
	ldrh	r1, [r0]
	ldr	r4, .L3093+0x4
	add	r5, r0, #0
	cmp	r1, r4
	beq	.L3087	@cond_branch
	cmp	r1, r2
	beq	.L3087	@cond_branch
	add	r1, r5, #0
.L3088:
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	ldrh	r0, [r1]
	cmp	r0, r4
	beq	.L3087	@cond_branch
	cmp	r0, r2
	bne	.L3088	@cond_branch
.L3087:
	lsl	r0, r3, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L3093+0x4
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L3094:
	.align	2, 0
.L3093:
	.word	sMovesForbiddenToCopy
	.word	0xfffe
.Lfe185:
	.size	 IsMoveUncopyableByMimic,.Lfe185-IsMoveUncopyableByMimic
	.align	2, 0
	.type	 Cmd_mimicattackcopy,function
	.thumb_func
Cmd_mimicattackcopy:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L3109
	ldr	r1, .L3109+0x4
	add	r7, r1, #0
	strh	r7, [r0]
	ldr	r5, .L3109+0x8
	ldr	r6, .L3109+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	bl	IsMoveUncopyableByMimic
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3097	@cond_branch
	ldr	r3, .L3109+0x10
	ldr	r2, .L3109+0x14
	ldrb	r1, [r2]
	mov	r0, #0x58
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	and	r1, r1, r0
	mov	ip, r3
	mov	r9, r2
	cmp	r1, #0
	bne	.L3097	@cond_branch
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L3097	@cond_branch
	cmp	r1, r7
	bne	.L3096	@cond_branch
.L3097:
	ldr	r3, .L3109+0x18
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3098
.L3110:
	.align	2, 0
.L3109:
	.word	gChosenMove
	.word	0xffff
	.word	gLastMoves
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3096:
	mov	r2, #0x0
	mov	r3, ip
	add	r3, r3, #0xc
	add	r0, r4, r3
	ldrh	r0, [r0]
	ldr	r4, .L3111
	mov	sl, r4
	cmp	r0, r1
	beq	.L3100	@cond_branch
	mov	r8, r3
	add	r7, r5, #0
	add	r5, r6, #0
	mov	r4, r9
	mov	r3, #0x58
.L3101:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L3100	@cond_branch
	lsl	r1, r2, #0x1
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r1, [r1]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L3101	@cond_branch
.L3100:
	cmp	r2, #0x4
	bne	.L3105	@cond_branch
	ldr	r5, .L3111+0x4
	ldrb	r1, [r5]
	lsl	r1, r1, #0x1
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r1, r1, r0
	mov	r0, ip
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldr	r2, .L3111+0x8
	ldr	r3, .L3111+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r4, .L3111+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r4, [r0, #0x4]
	cmp	r4, #0x4
	bhi	.L3106	@cond_branch
	mov	r1, r9
	ldrb	r0, [r1]
	mul	r0, r0, r6
	ldrb	r1, [r5]
	add	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x24
	add	r0, r0, r1
	strb	r4, [r0]
	b	.L3107
.L3112:
	.align	2, 0
.L3111:
	.word	gBattlescriptCurrInstr
	.word	gCurrMovePos
	.word	gLastMoves
	.word	gBattlerTarget
	.word	gBattleMoves
.L3106:
	mov	r4, r9
	ldrb	r0, [r4]
	mul	r0, r0, r6
	ldrb	r1, [r5]
	add	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x24
	add	r0, r0, r1
	mov	r1, #0x5
	strb	r1, [r0]
.L3107:
	ldr	r1, .L3113
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3113+0x4
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldrb	r4, [r2, #0x18]
	lsr	r3, r4, #0x4
	ldr	r1, .L3113+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	orr	r1, r1, r3
	lsl	r1, r1, #0x4
	mov	r0, #0xf
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r2, #0x18]
	mov	r4, sl
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L3098
.L3114:
	.align	2, 0
.L3113:
	.word	gBattleTextBuff1
	.word	gDisableStructs
	.word	gBitTable
.L3105:
	mov	r0, sl
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r2, sl
	str	r1, [r2]
.L3098:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe186:
	.size	 Cmd_mimicattackcopy,.Lfe186-Cmd_mimicattackcopy
	.align	2, 0
	.type	 Cmd_metronome,function
	.thumb_func
Cmd_metronome:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L3133
	mov	r6, #0xb1
	lsl	r6, r6, #0x1
	ldr	r5, .L3133+0x4
	ldr	r0, .L3133+0x8
	mov	r8, r0
.L3118:
	bl	Random
	ldr	r2, .L3133+0xc
	add	r1, r2, #0
	and	r0, r0, r1
	add	r0, r0, #0x1
	strh	r0, [r7]
	cmp	r0, r6
	bhi	.L3118	@cond_branch
	mov	r0, #0x3
.L3122:
	sub	r0, r0, #0x1
	cmp	r0, #0
	bge	.L3122	@cond_branch
	ldr	r4, .L3133
	ldrh	r2, [r4]
	ldr	r3, .L3133+0x10
	sub	r0, r5, #0x2
.L3125:
	add	r0, r0, #0x2
	ldrh	r1, [r0]
	cmp	r1, r2
	beq	.L3126	@cond_branch
	cmp	r1, r3
	bne	.L3125	@cond_branch
.L3126:
	ldr	r0, .L3133+0x10
	cmp	r1, r0
	bne	.L3118	@cond_branch
	ldr	r2, .L3133+0x14
	ldr	r0, [r2]
	ldr	r1, .L3133+0x18
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L3133+0x1c
	ldr	r2, .L3133+0x20
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	mov	r1, r8
	str	r0, [r1]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3133+0x24
	strb	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3134:
	.align	2, 0
.L3133:
	.word	gCurrentMove
	.word	sMovesForbiddenToCopy
	.word	gBattlescriptCurrInstr
	.word	0x1ff
	.word	0xffff
	.word	gHitMarker
	.word	-0x401
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
	.word	gBattlerTarget
.Lfe187:
	.size	 Cmd_metronome,.Lfe187-Cmd_metronome
	.align	2, 0
	.type	 Cmd_dmgtolevel,function
	.thumb_func
Cmd_dmgtolevel:
	ldr	r3, .L3136
	ldr	r2, .L3136+0x4
	ldr	r0, .L3136+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	str	r0, [r3]
	ldr	r1, .L3136+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L3137:
	.align	2, 0
.L3136:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe188:
	.size	 Cmd_dmgtolevel,.Lfe188-Cmd_dmgtolevel
	.align	2, 0
	.type	 Cmd_psywavedamageeffect,function
	.thumb_func
Cmd_psywavedamageeffect:
	push	{r4, lr}
	mov	r4, #0xf
.L3139:
	bl	Random
	add	r3, r4, #0
	and	r3, r3, r0
	cmp	r3, #0xa
	bgt	.L3139	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r3, r0, #0x1
	ldr	r4, .L3143
	ldr	r2, .L3143+0x4
	ldr	r0, .L3143+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x32
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	ldr	r1, .L3143+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3144:
	.align	2, 0
.L3143:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe189:
	.size	 Cmd_psywavedamageeffect,.Lfe189-Cmd_psywavedamageeffect
	.align	2, 0
	.type	 Cmd_counterdamagecalculator,function
	.thumb_func
Cmd_counterdamagecalculator:
	push	{r4, r5, r6, lr}
	ldr	r4, .L3150
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L3150+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0, #0xc]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r0, r5, #0x4
	add	r0, r1, r0
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L3146	@cond_branch
	cmp	r6, r2
	beq	.L3146	@cond_branch
	ldr	r6, .L3150+0x8
	add	r0, r1, r5
	ldrb	r0, [r0, #0xc]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L3146	@cond_branch
	ldr	r1, .L3150+0xc
	lsl	r0, r3, #0x1
	str	r0, [r1]
	ldr	r1, .L3150+0x10
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L3147	@cond_branch
	ldrb	r1, [r1, #0x9]
	mov	r0, r1
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L3147	@cond_branch
	ldr	r0, .L3150+0x14
	strb	r1, [r0]
	b	.L3148
.L3151:
	.align	2, 0
.L3150:
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gSideTimers
	.word	gBattlerTarget
.L3147:
	ldr	r2, .L3152
	ldr	r1, .L3152+0x4
	ldr	r0, .L3152+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xc]
	strb	r0, [r2]
.L3148:
	ldr	r1, .L3152+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3149
.L3153:
	.align	2, 0
.L3152:
	.word	gBattlerTarget
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3146:
	ldr	r2, .L3154
	ldr	r0, .L3154+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L3154+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3149:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3155:
	.align	2, 0
.L3154:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe190:
	.size	 Cmd_counterdamagecalculator,.Lfe190-Cmd_counterdamagecalculator
	.align	2, 0
	.type	 Cmd_mirrorcoatdamagecalculator,function
	.thumb_func
Cmd_mirrorcoatdamagecalculator:
	push	{r4, r5, r6, lr}
	ldr	r4, .L3161
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L3161+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0, #0xd]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r0, r5, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L3157	@cond_branch
	cmp	r6, r2
	beq	.L3157	@cond_branch
	ldr	r6, .L3161+0x8
	add	r0, r1, r5
	ldrb	r0, [r0, #0xd]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L3157	@cond_branch
	ldr	r1, .L3161+0xc
	lsl	r0, r3, #0x1
	str	r0, [r1]
	ldr	r1, .L3161+0x10
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L3158	@cond_branch
	ldrb	r1, [r1, #0x9]
	mov	r0, r1
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L3158	@cond_branch
	ldr	r0, .L3161+0x14
	strb	r1, [r0]
	b	.L3159
.L3162:
	.align	2, 0
.L3161:
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gSideTimers
	.word	gBattlerTarget
.L3158:
	ldr	r2, .L3163
	ldr	r1, .L3163+0x4
	ldr	r0, .L3163+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xd]
	strb	r0, [r2]
.L3159:
	ldr	r1, .L3163+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3160
.L3164:
	.align	2, 0
.L3163:
	.word	gBattlerTarget
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3157:
	ldr	r2, .L3165
	ldr	r0, .L3165+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L3165+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3160:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3166:
	.align	2, 0
.L3165:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe191:
	.size	 Cmd_mirrorcoatdamagecalculator,.Lfe191-Cmd_mirrorcoatdamagecalculator
	.align	2, 0
	.type	 Cmd_disablelastusedattack,function
	.thumb_func
Cmd_disablelastusedattack:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r4, #0x0
	ldr	r2, .L3176
	ldr	r3, .L3176+0x4
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r7, r2, #0
	add	r7, r7, #0xc
	add	r0, r0, r7
	ldr	r5, .L3176+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r0]
	mov	r9, r2
	add	r6, r3, #0
	ldr	r2, .L3176+0xc
	mov	r8, r2
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L3169	@cond_branch
	mov	ip, r6
	mov	r3, #0x58
.L3170:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L3169	@cond_branch
	lsl	r2, r4, #0x1
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, r1
	mul	r0, r0, r3
	add	r2, r2, r0
	add	r2, r2, r7
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L3170	@cond_branch
.L3169:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L3174	@cond_branch
	cmp	r4, #0x4
	beq	.L3174	@cond_branch
	mov	r5, #0x58
	mov	r0, r1
	mul	r0, r0, r5
	add	r0, r4, r0
	mov	r1, r9
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3174	@cond_branch
	ldr	r1, .L3176+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	lsl	r2, r4, #0x1
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r2, r0
	mov	r3, r9
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r2, r0
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	mul	r1, r1, r5
	add	r2, r2, r1
	add	r2, r2, r3
	ldrh	r1, [r2]
	strh	r1, [r0, #0x4]
	bl	Random
	ldrb	r2, [r6]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	mov	r2, #0x3
	and	r2, r2, r0
	add	r2, r2, #0x2
	ldrb	r3, [r1, #0xb]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r3, [r1, #0xb]
	lsl	r2, r3, #0x1c
	lsr	r2, r2, #0x18
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldr	r1, .L3176+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3175
.L3177:
	.align	2, 0
.L3176:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastMoves
	.word	gDisableStructs
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L3174:
	ldr	r3, .L3178
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3175:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3179:
	.align	2, 0
.L3178:
	.word	gBattlescriptCurrInstr
.Lfe192:
	.size	 Cmd_disablelastusedattack,.Lfe192-Cmd_disablelastusedattack
	.align	2, 0
	.type	 Cmd_trysetencore,function
	.thumb_func
Cmd_trysetencore:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r5, #0x0
	ldr	r3, .L3191
	ldr	r4, .L3191+0x4
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r6, r3, #0
	add	r6, r6, #0xc
	add	r0, r0, r6
	ldr	r2, .L3191+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r0, [r0]
	mov	sl, r3
	mov	r8, r2
	ldr	r2, .L3191+0xc
	mov	r9, r2
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L3182	@cond_branch
	mov	ip, r4
	add	r7, r6, #0
	mov	r6, r8
	mov	r3, #0x58
.L3183:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bgt	.L3182	@cond_branch
	lsl	r2, r5, #0x1
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, r1
	mul	r0, r0, r3
	add	r2, r2, r0
	add	r2, r2, r7
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L3183	@cond_branch
.L3182:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r2, [r0]
	cmp	r2, #0xa5
	beq	.L3188	@cond_branch
	cmp	r2, #0xe3
	beq	.L3188	@cond_branch
	cmp	r2, #0x77
	bne	.L3187	@cond_branch
.L3188:
	mov	r5, #0x4
.L3187:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r2, r9
	add	r3, r0, r2
	ldrh	r0, [r3, #0x6]
	cmp	r0, #0
	bne	.L3189	@cond_branch
	cmp	r5, #0x4
	beq	.L3189	@cond_branch
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r5, r2
	mov	r1, sl
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3189	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	sub	r1, r1, #0x18
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r3, #0x6]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	strb	r5, [r0, #0xc]
	bl	Random
	ldrb	r2, [r4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	mov	r2, #0x3
	and	r2, r2, r0
	add	r2, r2, #0x3
	ldrb	r3, [r1, #0xe]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrb	r3, [r1, #0xe]
	lsl	r2, r3, #0x1c
	lsr	r2, r2, #0x18
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldr	r1, .L3191+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3190
.L3192:
	.align	2, 0
.L3191:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastMoves
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.L3189:
	ldr	r3, .L3193
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3190:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3194:
	.align	2, 0
.L3193:
	.word	gBattlescriptCurrInstr
.Lfe193:
	.size	 Cmd_trysetencore,.Lfe193-Cmd_trysetencore
	.align	2, 0
	.type	 Cmd_painsplitdmgcalc,function
	.thumb_func
Cmd_painsplitdmgcalc:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L3198
	ldr	r0, .L3198+0x4
	mov	ip, r0
	ldrb	r0, [r0]
	mov	r7, #0x58
	mov	r2, r0
	mul	r2, r2, r7
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3196	@cond_branch
	ldr	r5, .L3198+0x8
	ldrb	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	ldrh	r3, [r0, #0x28]
	add	r0, r2, r6
	ldrh	r1, [r0, #0x28]
	add	r3, r3, r1
	asr	r3, r3, #0x1
	ldr	r4, .L3198+0xc
	sub	r1, r1, r3
	str	r1, [r4]
	ldr	r2, .L3198+0x10
	strb	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	asr	r0, r0, #0x8
	strb	r0, [r2, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	asr	r0, r0, #0x10
	strb	r0, [r2, #0x2]
	lsr	r1, r1, #0x18
	strb	r1, [r2, #0x3]
	ldrb	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	sub	r0, r0, r3
	str	r0, [r4]
	ldr	r2, .L3198+0x14
	mov	r0, ip
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, .L3198+0x18
	str	r1, [r0]
	ldr	r1, .L3198+0x1c
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3197
.L3199:
	.align	2, 0
.L3198:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	gSpecialStatuses
	.word	0xffff
	.word	gBattlescriptCurrInstr
.L3196:
	ldr	r3, .L3200
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3197:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3201:
	.align	2, 0
.L3200:
	.word	gBattlescriptCurrInstr
.Lfe194:
	.size	 Cmd_painsplitdmgcalc,.Lfe194-Cmd_painsplitdmgcalc
	.align	2, 0
	.type	 Cmd_settypetorandomresistance,function
	.thumb_func
Cmd_settypetorandomresistance:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r1, .L3233
	ldr	r4, .L3233+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r2, r0, r1
	ldrh	r1, [r2]
	cmp	r1, #0
	beq	.L3231	@cond_branch
	ldr	r0, .L3233+0x8
	cmp	r1, r0
	beq	.L3231	@cond_branch
	ldrh	r0, [r2]
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3206	@cond_branch
	ldr	r1, .L3233+0xc
	ldr	r2, .L3233+0x10
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3206	@cond_branch
.L3231:
	ldr	r3, .L3233+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3202
.L3234:
	.align	2, 0
.L3233:
	.word	gLastLandedMoves
	.word	gBattlerAttacker
	.word	0xffff
	.word	gBattleMons
	.word	gLastHitBy
	.word	gBattlescriptCurrInstr
.L3229:
	mov	r0, ip
	strb	r5, [r0]
	mov	r1, sl
	ldrb	r0, [r1]
	mul	r0, r0, r2
	add	r0, r0, r7
	add	r0, r0, #0x22
	strb	r5, [r0]
	ldr	r1, .L3235
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r5, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L3235+0x4
	b	.L3232
.L3236:
	.align	2, 0
.L3235:
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L3230:
	mov	r0, r8
	add	r0, r0, #0x1
	add	r0, r0, r3
	ldrb	r2, [r0]
	strb	r2, [r4]
	mov	r4, sl
	ldrb	r0, [r4]
	mul	r0, r0, r6
	ldr	r7, .L3237
	add	r0, r0, r7
	add	r0, r0, #0x22
	strb	r2, [r0]
	ldr	r1, .L3237+0x4
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	mov	r1, ip
.L3232:
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3202
.L3238:
	.align	2, 0
.L3237:
	.word	gBattleMons
	.word	gBattleTextBuff1
.L3206:
	mov	r4, #0x0
	mov	r8, r4
	mov	r7, #0x7f
	mov	r9, r7
.L3212:
	bl	Random
	mov	r4, r9
	and	r4, r4, r0
	cmp	r4, #0x70
	bhi	.L3212	@cond_branch
	lsl	r0, r4, #0x1
	add	r4, r0, r4
	ldr	r6, .L3239
	add	r3, r4, r6
	ldr	r1, .L3239+0x4
	ldr	r2, .L3239+0x8
	ldrb	r5, [r2]
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrb	r1, [r3]
	mov	sl, r2
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L3210	@cond_branch
	add	r0, r4, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bhi	.L3210	@cond_branch
	ldr	r7, .L3239+0xc
	mov	r2, #0x58
	mov	r0, r5
	mul	r0, r0, r2
	add	r3, r0, r7
	mov	r0, #0x21
	add	r0, r0, r3
	mov	ip, r0
	add	r0, r4, #0x1
	add	r0, r0, r6
	ldrb	r5, [r0]
	mov	r1, ip
	ldrb	r0, [r1]
	add	r1, r5, #0
	cmp	r0, r1
	beq	.L3210	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r1
	bne	.L3229	@cond_branch
.L3210:
	mov	r7, #0x1
	add	r8, r8, r7
	ldr	r0, .L3239+0x10
	cmp	r8, r0
	ble	.L3212	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
	ldr	r1, .L3239+0x14
	mov	ip, r1
	ldr	r3, .L3239
	add	r0, r4, #0x1
	add	r0, r0, r3
	mov	r9, r0
	add	r5, r3, #0
.L3221:
	ldrb	r1, [r5]
	cmp	r1, #0xff
	bgt	.L3225	@cond_branch
	cmp	r1, #0xfe
	bge	.L3220	@cond_branch
.L3225:
	mov	r4, sl
	ldrb	r2, [r4]
	lsl	r0, r2, #0x1
	ldr	r7, .L3239+0x4
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L3220	@cond_branch
	ldrb	r0, [r5, #0x2]
	cmp	r0, #0x5
	bhi	.L3220	@cond_branch
	mov	r6, #0x58
	mov	r0, r2
	mul	r0, r0, r6
	ldr	r1, .L3239+0xc
	add	r2, r0, r1
	add	r4, r2, #0
	add	r4, r4, #0x21
	ldrb	r0, [r4]
	mov	r7, r9
	ldrb	r1, [r7]
	cmp	r0, r1
	beq	.L3220	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.LCB32148
	b	.L3230	@long jump
.LCB32148:
.L3220:
	add	r5, r5, #0x3
	mov	r0, #0x3
	add	r8, r8, r0
	ldr	r0, .L3239+0x18
	cmp	r8, r0
	bls	.L3221	@cond_branch
	mov	r1, ip
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r4, ip
	str	r1, [r4]
.L3202:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3240:
	.align	2, 0
.L3239:
	.word	gTypeEffectiveness
	.word	gLastHitByType
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	0x3e7
	.word	gBattlescriptCurrInstr
	.word	0x14f
.Lfe195:
	.size	 Cmd_settypetorandomresistance,.Lfe195-Cmd_settypetorandomresistance
	.align	2, 0
	.type	 Cmd_setalwayshitflag,function
	.thumb_func
Cmd_setalwayshitflag:
	push	{r4, lr}
	ldr	r4, .L3242
	ldr	r3, .L3242+0x4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x10
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r2, .L3242+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L3242+0xc
	ldrb	r1, [r1]
	strb	r1, [r0, #0x15]
	ldr	r1, .L3242+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3243:
	.align	2, 0
.L3242:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe196:
	.size	 Cmd_setalwayshitflag,.Lfe196-Cmd_setalwayshitflag
	.align	2, 0
	.type	 Cmd_copymovepermanently,function
	.thumb_func
Cmd_copymovepermanently:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	ldr	r0, .L3261
	ldr	r1, .L3261+0x4
	add	r5, r1, #0
	strh	r5, [r0]
	ldr	r3, .L3261+0x8
	ldr	r2, .L3261+0xc
	ldrb	r1, [r2]
	mov	r0, #0x58
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	and	r1, r1, r0
	mov	ip, r3
	mov	sl, r2
	cmp	r1, #0
	beq	.LCB32269
	b	.L3245	@long jump
.LCB32269:
	ldr	r0, .L3261+0x10
	ldr	r2, .L3261+0x14
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r9, r0
	mov	r8, r2
	cmp	r1, #0xa5
	bne	.LCB32281
	b	.L3245	@long jump
.LCB32281:
	cmp	r1, #0
	bne	.LCB32283
	b	.L3245	@long jump
.LCB32283:
	cmp	r1, r5
	bne	.LCB32287
	b	.L3245	@long jump
.LCB32287:
	cmp	r1, #0xa6
	bne	.LCB32289
	b	.L3245	@long jump
.LCB32289:
	mov	r7, #0x0
	mov	r5, r9
	mov	r0, ip
	add	r0, r0, #0xc
	add	r1, r4, r0
	mov	r3, r8
.L3249:
	ldrh	r2, [r1]
	cmp	r2, #0xa6
	beq	.L3248	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L3247	@cond_branch
.L3248:
	add	r1, r1, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L3249	@cond_branch
.L3247:
	cmp	r7, #0x4
	beq	.LCB32331
	b	.L3245	@long jump
.LCB32331:
	ldr	r4, .L3261+0x18
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	mov	r2, sl
	ldrb	r0, [r2]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r1, r1, r0
	mov	r6, ip
	add	r6, r6, #0xc
	add	r1, r1, r6
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	strh	r0, [r1]
	mov	r1, sl
	ldrb	r0, [r1]
	mov	r2, r0
	mul	r2, r2, r3
	ldrb	r4, [r4]
	add	r2, r2, r4
	mov	r5, ip
	add	r5, r5, #0x24
	add	r2, r2, r5
	ldr	r4, .L3261+0x1c
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x4]
	strb	r0, [r2]
	ldr	r1, .L3261+0x20
	mov	r2, sl
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r7, #0x0
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r4, r0, r5
	add	r3, r0, #0
	add	r2, sp, #0x4
	add	r5, sp, #0xc
.L3258:
	add	r0, r3, r6
	ldrh	r0, [r0]
	strh	r0, [r2]
	add	r1, r5, r7
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #0x1
	add	r3, r3, #0x2
	add	r2, r2, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L3258	@cond_branch
	add	r2, sp, #0x4
	mov	r0, sl
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r0, r0, #0x3b
	ldrb	r0, [r0]
	strb	r0, [r2, #0xc]
	str	r2, [sp]
	mov	r0, #0x0
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BtlController_EmitSetMonData
	ldr	r0, .L3261+0x20
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L3261+0x24
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldr	r3, .L3261+0x10
	ldr	r2, .L3261+0x14
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3261+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3260
.L3262:
	.align	2, 0
.L3261:
	.word	gChosenMove
	.word	0xffff
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gLastPrintedMoves
	.word	gBattlerTarget
	.word	gCurrMovePos
	.word	gBattleMoves
	.word	gActiveBattler
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L3245:
	ldr	r3, .L3263
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3260:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3264:
	.align	2, 0
.L3263:
	.word	gBattlescriptCurrInstr
.Lfe197:
	.size	 Cmd_copymovepermanently,.Lfe197-Cmd_copymovepermanently
	.align	2, 0
	.type	 IsTwoTurnsMove,function
	.thumb_func
IsTwoTurnsMove:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L3270
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1]
	cmp	r0, #0x91
	beq	.L3267	@cond_branch
	cmp	r0, #0x27
	beq	.L3267	@cond_branch
	cmp	r0, #0x4b
	beq	.L3267	@cond_branch
	cmp	r0, #0x97
	beq	.L3267	@cond_branch
	cmp	r0, #0x9b
	beq	.L3267	@cond_branch
	cmp	r0, #0x1a
	bne	.L3266	@cond_branch
.L3267:
	mov	r0, #0x1
	b	.L3269
.L3271:
	.align	2, 0
.L3270:
	.word	gBattleMoves
.L3266:
	mov	r0, #0x0
.L3269:
	pop	{r1}
	bx	r1
.Lfe198:
	.size	 IsTwoTurnsMove,.Lfe198-IsTwoTurnsMove
	.align	2, 0
	.type	 IsInvalidForSleepTalkOrAssist,function
	.thumb_func
IsInvalidForSleepTalkOrAssist:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L3274	@cond_branch
	cmp	r1, #0xd6
	beq	.L3274	@cond_branch
	mov	r0, #0x89
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L3274	@cond_branch
	cmp	r1, #0x77
	beq	.L3274	@cond_branch
	cmp	r1, #0x76
	bne	.L3273	@cond_branch
.L3274:
	mov	r0, #0x1
	b	.L3276
.L3273:
	mov	r0, #0x0
.L3276:
	pop	{r1}
	bx	r1
.Lfe199:
	.size	 IsInvalidForSleepTalkOrAssist,.Lfe199-IsInvalidForSleepTalkOrAssist
	.align	2, 0
	.type	 AttacksThisTurn,function
	.thumb_func
AttacksThisTurn:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	ldr	r1, .L3283
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r3, r1, #0
	cmp	r0, #0x97
	bne	.L3278	@cond_branch
	ldr	r0, .L3283+0x4
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3279	@cond_branch
.L3278:
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r0, #0x91
	beq	.L3280	@cond_branch
	cmp	r0, #0x27
	beq	.L3280	@cond_branch
	cmp	r0, #0x4b
	beq	.L3280	@cond_branch
	cmp	r0, #0x97
	beq	.L3280	@cond_branch
	cmp	r0, #0x9b
	beq	.L3280	@cond_branch
	cmp	r0, #0x1a
	bne	.L3279	@cond_branch
.L3280:
	ldr	r0, .L3283+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3279	@cond_branch
	mov	r0, #0x1
	b	.L3282
.L3284:
	.align	2, 0
.L3283:
	.word	gBattleMoves
	.word	gBattleWeather
	.word	gHitMarker
.L3279:
	mov	r0, #0x2
.L3282:
	pop	{r1}
	bx	r1
.Lfe200:
	.size	 AttacksThisTurn,.Lfe200-AttacksThisTurn
	.align	2, 0
	.type	 Cmd_trychoosesleeptalkmove,function
	.thumb_func
Cmd_trychoosesleeptalkmove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r0, .L3300
	mov	r9, r0
	mov	r1, #0x58
	mov	r8, r1
	ldr	r7, .L3300+0x4
	mov	r0, #0x84
	lsl	r0, r0, #0x1
	mov	sl, r0
.L3289:
	lsl	r4, r5, #0x1
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r4, r0
	add	r0, r0, r7
	ldrh	r0, [r0]
	bl	IsInvalidForSleepTalkOrAssist
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3291	@cond_branch
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r4, r0
	add	r0, r0, r7
	ldrh	r1, [r0]
	cmp	r1, sl
	beq	.L3291	@cond_branch
	cmp	r1, #0xfd
	beq	.L3291	@cond_branch
	add	r0, r1, #0
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3288	@cond_branch
.L3291:
	ldr	r1, .L3300+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L3288:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L3289	@cond_branch
	ldr	r0, .L3300
	ldrb	r0, [r0]
	add	r1, r6, #0
	mov	r2, #0xfd
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xf
	bne	.L3293	@cond_branch
	ldr	r1, .L3300+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3294
.L3301:
	.align	2, 0
.L3300:
	.word	gBattlerAttacker
	.word	gBattleMons+0xc
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.L3293:
	mov	r7, #0x3
	ldr	r4, .L3302
.L3295:
	bl	Random
	add	r5, r7, #0
	and	r5, r5, r0
	lsl	r0, r5, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L3295	@cond_branch
	ldr	r4, .L3302+0x4
	ldr	r2, .L3302+0x8
	lsl	r1, r5, #0x1
	ldr	r0, .L3302+0xc
	ldrb	r3, [r0]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r2, r2, #0xc
	add	r1, r1, r2
	ldrh	r0, [r1]
	strh	r0, [r4]
	ldr	r0, .L3302+0x10
	strb	r5, [r0]
	ldr	r2, .L3302+0x14
	ldr	r0, [r2]
	ldr	r1, .L3302+0x18
	and	r0, r0, r1
	str	r0, [r2]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3302+0x1c
	strb	r0, [r1]
	ldr	r3, .L3302+0x20
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3294:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3303:
	.align	2, 0
.L3302:
	.word	gBitTable
	.word	gCalledMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gCurrMovePos
	.word	gHitMarker
	.word	-0x401
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe201:
	.size	 Cmd_trychoosesleeptalkmove,.Lfe201-Cmd_trychoosesleeptalkmove
	.align	2, 0
	.type	 Cmd_setdestinybond,function
	.thumb_func
Cmd_setdestinybond:
	ldr	r1, .L3305
	ldr	r0, .L3305+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3305+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L3306:
	.align	2, 0
.L3305:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe202:
	.size	 Cmd_setdestinybond,.Lfe202-Cmd_setdestinybond
	.align	2, 0
	.type	 TrySetDestinyBondToHappen,function
	.thumb_func
TrySetDestinyBondToHappen:
	push	{r4, r5, lr}
	ldr	r0, .L3309
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L3309+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L3309+0x8
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3308	@cond_branch
	cmp	r5, r3
	beq	.L3308	@cond_branch
	ldr	r2, .L3309+0xc
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3308	@cond_branch
	mov	r0, #0x40
	orr	r1, r1, r0
	str	r1, [r2]
.L3308:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3310:
	.align	2, 0
.L3309:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gHitMarker
.Lfe203:
	.size	 TrySetDestinyBondToHappen,.Lfe203-TrySetDestinyBondToHappen
	.align	2, 0
	.type	 Cmd_trysetdestinybondtohappen,function
	.thumb_func
Cmd_trysetdestinybondtohappen:
	push	{lr}
	bl	TrySetDestinyBondToHappen
	ldr	r1, .L3312
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3313:
	.align	2, 0
.L3312:
	.word	gBattlescriptCurrInstr
.Lfe204:
	.size	 Cmd_trysetdestinybondtohappen,.Lfe204-Cmd_trysetdestinybondtohappen
	.align	2, 0
	.type	 Cmd_remaininghptopower,function
	.thumb_func
Cmd_remaininghptopower:
	push	{lr}
	ldr	r2, .L3321
	ldr	r0, .L3321+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	mov	r2, #0x28
	ldrsh	r0, [r1, r2]
	mov	r2, #0x2c
	ldrsh	r1, [r1, r2]
	mov	r2, #0x30
	bl	GetScaledHPFraction
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r3, #0x0
	ldr	r0, .L3321+0x8
	ldrb	r2, [r0]
	cmp	r1, r2
	ble	.L3316	@cond_branch
	add	r2, r0, #0
.L3317:
	add	r3, r3, #0x2
	cmp	r3, #0xb
	bgt	.L3316	@cond_branch
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r1, r0
	bgt	.L3317	@cond_branch
.L3316:
	ldr	r2, .L3321+0xc
	ldr	r1, .L3321+0x8
	add	r0, r3, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldr	r1, .L3321+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3322:
	.align	2, 0
.L3321:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	sFlailHpScaleToPowerTable
	.word	gDynamicBasePower
	.word	gBattlescriptCurrInstr
.Lfe205:
	.size	 Cmd_remaininghptopower,.Lfe205-Cmd_remaininghptopower
	.align	2, 0
	.type	 Cmd_tryspiteppreduce,function
	.thumb_func
Cmd_tryspiteppreduce:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, .L3337
	ldr	r1, .L3337+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r4
	ldrh	r2, [r0]
	mov	r8, r1
	cmp	r2, #0
	bne	.LCB33052
	b	.L3324	@long jump
.LCB33052:
	ldr	r0, .L3337+0x8
	cmp	r2, r0
	bne	.LCB33057
	b	.L3324	@long jump
.LCB33057:
	mov	r7, #0x0
	ldr	r0, .L3337+0xc
	mov	r1, #0x58
	mul	r1, r1, r3
	add	r3, r0, #0
	add	r3, r3, #0xc
	add	r1, r1, r3
	ldrh	r1, [r1]
	cmp	r2, r1
	beq	.L3326	@cond_branch
	add	r6, r4, #0
	mov	r5, r8
	add	r4, r3, #0
	mov	r3, #0x58
.L3327:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L3326	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x1
	add	r2, r2, r6
	lsl	r1, r7, #0x1
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L3327	@cond_branch
.L3326:
	cmp	r7, #0x4
	bne	.LCB33106
	b	.L3331	@long jump
.LCB33106:
	mov	r4, r8
	ldrb	r0, [r4]
	mov	r1, #0x58
	mov	r9, r1
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r7, r0
	ldr	r1, .L3337+0xc
	add	r1, r1, #0x24
	mov	sl, r1
	add	r0, r0, sl
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.LCB33123
	b	.L3331	@long jump
.LCB33123:
	bl	Random
	mov	r1, #0x3
	and	r1, r1, r0
	add	r6, r1, #0x2
	ldrb	r0, [r4]
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r7, r0
	add	r0, r0, sl
	ldrb	r0, [r0]
	cmp	r0, r6
	bge	.L3332	@cond_branch
	add	r6, r0, #0
.L3332:
	ldr	r1, .L3337+0x10
	mov	r5, #0xfd
	strb	r5, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldr	r2, .L3337
	mov	r3, r8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r4, .L3337+0x14
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	strb	r5, [r4]
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	strb	r6, [r4, #0x4]
	sub	r0, r0, #0x2
	strb	r0, [r4, #0x5]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, r9
	mul	r1, r1, r0
	add	r1, r7, r1
	add	r1, r1, sl
	ldrb	r0, [r1]
	sub	r0, r0, r6
	strb	r0, [r1]
	ldr	r4, .L3337+0x18
	mov	r3, r8
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldr	r1, .L3337+0x1c
	ldrb	r3, [r4]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L3337+0x20
	lsl	r0, r7, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3333	@cond_branch
	mov	r2, r9
	mul	r2, r2, r3
	ldr	r0, .L3337+0xc
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3333	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, sl
	add	r0, r2, r3
	add	r0, r0, r7
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L3333:
	ldr	r1, .L3337+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r1, .L3337+0xc
	ldr	r0, .L3337+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r7, r0
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L3336	@cond_branch
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	b	.L3336
.L3338:
	.align	2, 0
.L3337:
	.word	gLastMoves
	.word	gBattlerTarget
	.word	0xffff
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.L3331:
.L3324:
	ldr	r3, .L3339
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3336:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3340:
	.align	2, 0
.L3339:
	.word	gBattlescriptCurrInstr
.Lfe206:
	.size	 Cmd_tryspiteppreduce,.Lfe206-Cmd_tryspiteppreduce
	.align	2, 0
	.type	 Cmd_healpartystatus,function
	.thumb_func
Cmd_healpartystatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	mov	r8, r4
	ldr	r0, .L3365
	ldrh	r0, [r0]
	cmp	r0, #0xd7
	beq	.LCB33328
	b	.L3342	@long jump
.LCB33328:
	ldr	r6, .L3365+0x4
	mov	r0, r8
	strb	r0, [r6, #0x5]
	ldr	r5, .L3365+0x8
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L3365+0xc
	mov	sl, r1
	cmp	r0, #0
	bne	.L3343	@cond_branch
	ldr	r2, .L3365+0x10
	mov	sl, r2
.L3343:
	ldr	r4, .L3365+0x14
	ldrb	r3, [r5]
	mov	r7, #0x58
	mov	r2, r3
	mul	r2, r2, r7
	add	r0, r2, r4
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0x2b
	beq	.L3345	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	mov	r1, r8
	str	r1, [r0]
	ldrb	r0, [r5]
	mov	r2, r0
	mul	r2, r2, r7
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L3365+0x18
	and	r0, r0, r1
	str	r0, [r2]
	b	.L3346
.L3366:
	.align	2, 0
.L3365:
	.word	gCurrentMove
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleMons
	.word	-0x8000001
.L3345:
	ldrb	r1, [r1]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	ldrb	r0, [r6, #0x5]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r6, #0x5]
.L3346:
	ldr	r7, .L3367
	ldr	r0, .L3367+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r2, #0x2
	mov	r9, r2
	mov	r1, r9
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L3367+0x8
	strb	r0, [r1, #0x17]
	strb	r0, [r7]
	ldr	r0, .L3367+0xc
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3347	@cond_branch
	ldr	r0, .L3367+0x10
	ldrb	r2, [r0]
	ldr	r1, .L3367+0x14
	ldrb	r3, [r7]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L3347	@cond_branch
	ldr	r5, .L3367+0x18
	mov	r6, #0x58
	mov	r4, r3
	mul	r4, r4, r6
	add	r0, r4, r5
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0x2b
	beq	.L3348	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x4c
	add	r0, r4, r0
	str	r2, [r0]
	ldrb	r0, [r7]
	mov	r2, r0
	mul	r2, r2, r6
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L3367+0x1c
	and	r0, r0, r1
	str	r0, [r2]
	b	.L3347
.L3368:
	.align	2, 0
.L3367:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	-0x8000001
.L3348:
	ldrb	r1, [r1]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	ldr	r1, .L3369
	ldrb	r0, [r1, #0x5]
	mov	r2, r9
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L3347:
	mov	r6, #0x0
	ldr	r7, .L3369+0x4
.L3353:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r5, #0
	beq	.L3352	@cond_branch
	ldr	r0, .L3369+0x8
	cmp	r5, r0
	beq	.L3352	@cond_branch
	ldr	r2, .L3369+0xc
	ldr	r0, .L3369+0x10
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L3355	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r1
	b	.L3364
.L3370:
	.align	2, 0
.L3369:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	0x19d
	.word	gBattlerPartyIndexes
	.word	gBattlerAttacker
.L3355:
	ldr	r0, .L3371
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3357	@cond_branch
	ldr	r0, .L3371+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L3357	@cond_branch
	ldr	r0, .L3371+0x8
	ldrb	r1, [r0]
	ldr	r2, .L3371+0xc
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3357	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r3
.L3364:
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	b	.L3356
.L3372:
	.align	2, 0
.L3371:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L3357:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetAbilityBySpecies
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L3356:
	cmp	r0, #0x2b
	beq	.L3352	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r6
	mov	r1, r8
	orr	r1, r1, r0
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L3352:
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L3353	@cond_branch
	b	.L3361
.L3342:
	ldr	r1, .L3373
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	mov	r2, #0x3f
	mov	r8, r2
	ldr	r3, .L3373+0x4
	ldr	r2, .L3373+0x8
	ldrb	r0, [r2]
	mov	r5, #0x58
	mul	r0, r0, r5
	mov	r1, #0x4c
	add	r1, r1, r3
	mov	r9, r1
	add	r0, r0, r9
	str	r4, [r0]
	ldrb	r0, [r2]
	mov	r1, r0
	mul	r1, r1, r5
	add	r7, r3, #0
	add	r7, r7, #0x50
	add	r1, r1, r7
	ldr	r0, [r1]
	ldr	r6, .L3373+0xc
	and	r0, r0, r6
	str	r0, [r1]
	ldrb	r0, [r2]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r4, .L3373+0x10
	strb	r0, [r4]
	ldr	r0, .L3373+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3361	@cond_branch
	ldr	r0, .L3373+0x18
	ldrb	r2, [r0]
	ldr	r1, .L3373+0x1c
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L3361	@cond_branch
	mov	r0, r3
	mul	r0, r0, r5
	add	r0, r0, r9
	str	r2, [r0]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r7
	ldr	r0, [r1]
	and	r0, r0, r6
	str	r0, [r1]
.L3361:
	mov	r2, r8
	cmp	r2, #0
	beq	.L3363	@cond_branch
	ldr	r4, .L3373+0x10
	ldr	r0, .L3373+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	add	r0, sp, #0x4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L3363:
	ldr	r1, .L3373+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3374:
	.align	2, 0
.L3373:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x8000001
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe207:
	.size	 Cmd_healpartystatus,.Lfe207-Cmd_healpartystatus
	.align	2, 0
	.type	 Cmd_cursetarget,function
	.thumb_func
Cmd_cursetarget:
	push	{r4, r5, lr}
	ldr	r5, .L3379
	ldr	r0, .L3379+0x4
	ldrb	r0, [r0]
	mov	r4, #0x58
	mov	r1, r0
	mul	r1, r1, r4
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0x15
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L3376	@cond_branch
	ldr	r3, .L3379+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3377
.L3380:
	.align	2, 0
.L3379:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3376:
	orr	r2, r2, r3
	str	r2, [r1]
	ldr	r1, .L3381
	ldr	r0, .L3381+0x4
	ldrb	r0, [r0]
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L3378	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L3378:
	ldr	r1, .L3381+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3377:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3382:
	.align	2, 0
.L3381:
	.word	gBattleMoveDamage
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe208:
	.size	 Cmd_cursetarget,.Lfe208-Cmd_cursetarget
	.align	2, 0
	.type	 Cmd_trysetspikes,function
	.thumb_func
Cmd_trysetspikes:
	push	{r4, lr}
	ldr	r4, .L3386
	ldrb	r0, [r4]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L3386+0x4
	lsl	r2, r0, #0x1
	add	r0, r2, r0
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0xa]
	cmp	r0, #0x3
	bne	.L3384	@cond_branch
	ldr	r2, .L3386+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L3386+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3385
.L3387:
	.align	2, 0
.L3386:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L3384:
	ldr	r1, .L3388
	add	r1, r2, r1
	ldrh	r2, [r1]
	mov	r0, #0x10
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strb	r0, [r3, #0xa]
	ldr	r1, .L3388+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3385:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3389:
	.align	2, 0
.L3388:
	.word	gSideStatuses
	.word	gBattlescriptCurrInstr
.Lfe209:
	.size	 Cmd_trysetspikes,.Lfe209-Cmd_trysetspikes
	.align	2, 0
	.type	 Cmd_setforesight,function
	.thumb_func
Cmd_setforesight:
	ldr	r1, .L3391
	ldr	r0, .L3391+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3391+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L3392:
	.align	2, 0
.L3391:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe210:
	.size	 Cmd_setforesight,.Lfe210-Cmd_setforesight
	.align	2, 0
	.type	 Cmd_trysetperishsong,function
	.thumb_func
Cmd_trysetperishsong:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	mov	r3, #0x0
	ldr	r0, .L3404
	add	r7, r0, #0
	ldr	r0, .L3404+0x4
	mov	r8, r0
	ldrb	r1, [r7]
	cmp	r6, r1
	bge	.L3395	@cond_branch
	mov	r5, #0x20
	ldr	r0, .L3404+0x8
	mov	ip, r0
	ldr	r0, .L3404+0xc
	add	r4, r0, #0
	add	r4, r4, #0xf
	ldr	r2, .L3404+0x10
.L3397:
	ldr	r1, [r2]
	add	r0, r1, #0
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L3399	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, ip
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x2b
	bne	.L3398	@cond_branch
.L3399:
	add	r6, r6, #0x1
	b	.L3396
.L3405:
	.align	2, 0
.L3404:
	.word	gBattlersCount
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gDisableStructs
	.word	gStatuses3
.L3398:
	orr	r1, r1, r5
	str	r1, [r2]
	mov	r0, #0x33
	strb	r0, [r4]
.L3396:
	add	r4, r4, #0x1c
	add	r2, r2, #0x4
	add	r3, r3, #0x1
	ldrb	r0, [r7]
	cmp	r3, r0
	blt	.L3397	@cond_branch
.L3395:
	mov	r1, r8
	ldrb	r0, [r1]
	bl	PressurePPLoseOnUsingPerishSong
	ldr	r0, .L3406
	ldrb	r0, [r0]
	cmp	r6, r0
	bne	.L3402	@cond_branch
	ldr	r3, .L3406+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3403
.L3407:
	.align	2, 0
.L3406:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.L3402:
	ldr	r1, .L3408
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3403:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3409:
	.align	2, 0
.L3408:
	.word	gBattlescriptCurrInstr
.Lfe211:
	.size	 Cmd_trysetperishsong,.Lfe211-Cmd_trysetperishsong
	.align	2, 0
	.type	 Cmd_rolloutdamagecalculation,function
	.thumb_func
Cmd_rolloutdamagecalculation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L3421
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3411	@cond_branch
	ldr	r0, .L3421+0x4
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	ldr	r1, .L3421+0x8
	ldr	r0, .L3421+0xc
	str	r0, [r1]
	b	.L3412
.L3422:
	.align	2, 0
.L3421:
	.word	gMoveResultFlags
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveMissedPause
.L3411:
	ldr	r2, .L3423
	ldr	r1, .L3423+0x4
	ldrb	r3, [r1]
	mov	r5, #0x58
	mov	r0, r3
	mul	r0, r0, r5
	add	r4, r2, #0
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r7, #0x80
	lsl	r7, r7, #0x5
	and	r0, r0, r7
	add	r6, r1, #0
	mov	r9, r2
	ldr	r1, .L3423+0x8
	mov	ip, r1
	ldr	r2, .L3423+0xc
	mov	r8, r2
	cmp	r0, #0
	bne	.L3413	@cond_branch
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r2, [r0, #0x11]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x5
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r2, [r0, #0x11]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x50
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r4
	ldr	r0, [r1]
	orr	r0, r0, r7
	str	r0, [r1]
	ldr	r1, .L3423+0x10
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, r8
	ldrh	r1, [r2]
	strh	r1, [r0]
.L3413:
	ldrb	r0, [r6]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, ip
	ldrb	r3, [r2, #0x11]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x11]
	cmp	r1, #0
	bne	.L3414	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r4
	ldr	r0, [r1]
	ldr	r2, .L3423+0x14
	and	r0, r0, r2
	str	r0, [r1]
.L3414:
	ldr	r3, .L3423+0x18
	ldr	r2, .L3423+0x1c
	mov	r0, r8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	strh	r0, [r3]
	mov	r2, #0x1
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, ip
	add	r4, r0, r1
	ldrb	r0, [r4, #0x11]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	mov	r1, #0x5
	sub	r1, r1, r0
	ldr	r7, .L3423+0x20
	add	r5, r3, #0
	cmp	r2, r1
	bge	.L3416	@cond_branch
	add	r1, r5, #0
	add	r3, r4, #0
	mov	r4, #0x5
.L3418:
	ldrh	r0, [r1]
	lsl	r0, r0, #0x1
	strh	r0, [r1]
	add	r2, r2, #0x1
	ldrb	r0, [r3, #0x11]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	sub	r0, r4, r0
	cmp	r2, r0
	blt	.L3418	@cond_branch
.L3416:
	ldrb	r1, [r6]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, r9
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x17
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3420	@cond_branch
	ldrh	r0, [r5]
	lsl	r0, r0, #0x1
	strh	r0, [r5]
.L3420:
	ldr	r0, [r7]
	add	r0, r0, #0x1
	str	r0, [r7]
.L3412:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3424:
	.align	2, 0
.L3423:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gCurrentMove
	.word	gLockedMoves
	.word	-0x1001
	.word	gDynamicBasePower
	.word	gBattleMoves
	.word	gBattlescriptCurrInstr
.Lfe212:
	.size	 Cmd_rolloutdamagecalculation,.Lfe212-Cmd_rolloutdamagecalculation
	.align	2, 0
	.type	 Cmd_jumpifconfusedandstatmaxed,function
	.thumb_func
Cmd_jumpifconfusedandstatmaxed:
	push	{r4, r5, lr}
	ldr	r5, .L3428
	ldr	r0, .L3428+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	ldr	r4, .L3428+0x8
	cmp	r0, #0
	beq	.L3426	@cond_branch
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x1]
	add	r0, r0, r3
	add	r1, r5, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.L3426	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L3427
.L3429:
	.align	2, 0
.L3428:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3426:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L3427:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe213:
	.size	 Cmd_jumpifconfusedandstatmaxed,.Lfe213-Cmd_jumpifconfusedandstatmaxed
	.align	2, 0
	.type	 Cmd_furycuttercalc,function
	.thumb_func
Cmd_furycuttercalc:
	push	{r4, r5, lr}
	ldr	r0, .L3439
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3431	@cond_branch
	ldr	r2, .L3439+0x4
	ldr	r0, .L3439+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x10]
	ldr	r1, .L3439+0xc
	ldr	r0, .L3439+0x10
	str	r0, [r1]
	b	.L3432
.L3440:
	.align	2, 0
.L3439:
	.word	gMoveResultFlags
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveMissedPause
.L3431:
	ldr	r5, .L3441
	ldr	r4, .L3441+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r5
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0x5
	beq	.L3433	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
.L3433:
	ldr	r3, .L3441+0x8
	ldr	r2, .L3441+0xc
	ldr	r0, .L3441+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	strh	r0, [r3]
	mov	r2, #0x1
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r4, .L3441+0x14
	ldrb	r1, [r0, #0x10]
	cmp	r2, r1
	bge	.L3435	@cond_branch
	add	r1, r3, #0
	add	r3, r0, #0
.L3437:
	ldrh	r0, [r1]
	lsl	r0, r0, #0x1
	strh	r0, [r1]
	add	r2, r2, #0x1
	ldrb	r0, [r3, #0x10]
	cmp	r2, r0
	blt	.L3437	@cond_branch
.L3435:
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
.L3432:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3442:
	.align	2, 0
.L3441:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gDynamicBasePower
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
.Lfe214:
	.size	 Cmd_furycuttercalc,.Lfe214-Cmd_furycuttercalc
	.align	2, 0
	.type	 Cmd_friendshiptodamagecalculation,function
	.thumb_func
Cmd_friendshiptodamagecalculation:
	push	{r4, lr}
	ldr	r2, .L3447
	ldr	r0, .L3447+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x79
	bne	.L3444	@cond_branch
	ldr	r4, .L3447+0x8
	ldr	r2, .L3447+0xc
	ldr	r0, .L3447+0x10
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2b
	ldrb	r1, [r0]
	b	.L3446
.L3448:
	.align	2, 0
.L3447:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gDynamicBasePower
	.word	gBattleMons
	.word	gBattlerAttacker
.L3444:
	ldr	r4, .L3449
	ldr	r2, .L3449+0x4
	ldr	r0, .L3449+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	mov	r1, #0xff
	sub	r1, r1, r0
.L3446:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x19
	bl	__divsi3
	strh	r0, [r4]
	ldr	r1, .L3449+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3450:
	.align	2, 0
.L3449:
	.word	gDynamicBasePower
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe215:
	.size	 Cmd_friendshiptodamagecalculation,.Lfe215-Cmd_friendshiptodamagecalculation
	.align	2, 0
	.type	 Cmd_presentdamagecalculation,function
	.thumb_func
Cmd_presentdamagecalculation:
	push	{r4, lr}
	bl	Random
	mov	r4, #0xff
	and	r4, r4, r0
	cmp	r4, #0x65
	bgt	.L3452	@cond_branch
	ldr	r1, .L3464
	mov	r0, #0x28
	strh	r0, [r1]
	b	.L3453
.L3465:
	.align	2, 0
.L3464:
	.word	gDynamicBasePower
.L3452:
	cmp	r4, #0xb1
	bgt	.L3454	@cond_branch
	ldr	r1, .L3466
	mov	r0, #0x50
	strh	r0, [r1]
	b	.L3453
.L3467:
	.align	2, 0
.L3466:
	.word	gDynamicBasePower
.L3454:
	cmp	r4, #0xcb
	bgt	.L3456	@cond_branch
	ldr	r1, .L3468
	mov	r0, #0x78
	strh	r0, [r1]
	b	.L3453
.L3469:
	.align	2, 0
.L3468:
	.word	gDynamicBasePower
.L3456:
	ldr	r3, .L3470
	ldr	r2, .L3470+0x4
	ldr	r0, .L3470+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r3]
	cmp	r0, #0
	bne	.L3458	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L3458:
	ldr	r0, [r3]
	neg	r0, r0
	str	r0, [r3]
.L3453:
	cmp	r4, #0xcb
	bgt	.L3459	@cond_branch
	ldr	r1, .L3470+0xc
	ldr	r0, .L3470+0x10
	b	.L3463
.L3471:
	.align	2, 0
.L3470:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_HitFromCritCalc
.L3459:
	ldr	r2, .L3472
	ldr	r0, .L3472+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2c]
	ldrh	r0, [r0, #0x28]
	cmp	r1, r0
	bne	.L3461	@cond_branch
	ldr	r1, .L3472+0x8
	ldr	r0, .L3472+0xc
	b	.L3463
.L3473:
	.align	2, 0
.L3472:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AlreadyAtFullHp
.L3461:
	ldr	r2, .L3474
	ldrb	r1, [r2]
	mov	r0, #0xf7
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3474+0x4
	ldr	r0, .L3474+0x8
.L3463:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3475:
	.align	2, 0
.L3474:
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PresentHealTarget
.Lfe216:
	.size	 Cmd_presentdamagecalculation,.Lfe216-Cmd_presentdamagecalculation
	.align	2, 0
	.type	 Cmd_setsafeguard,function
	.thumb_func
Cmd_setsafeguard:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L3479
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	ldr	r4, .L3479+0x4
	mov	r6, #0x1
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r1, [r1]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3477	@cond_branch
	ldr	r2, .L3479+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3479+0xc
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L3478
.L3480:
	.align	2, 0
.L3479:
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3477:
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r0, [r1]
	mov	r2, #0x20
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	ldr	r5, .L3481
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r4, #0x5
	strb	r4, [r0, #0x6]
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r7]
	strb	r1, [r0, #0x7]
	ldr	r0, .L3481+0x4
	strb	r4, [r0, #0x5]
.L3478:
	ldr	r1, .L3481+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3482:
	.align	2, 0
.L3481:
	.word	gSideTimers
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe217:
	.size	 Cmd_setsafeguard,.Lfe217-Cmd_setsafeguard
	.align	2, 0
	.type	 Cmd_magnitudedamagecalculation,function
	.thumb_func
Cmd_magnitudedamagecalculation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x4
	bgt	.L3484	@cond_branch
	ldr	r1, .L3503
	mov	r0, #0xa
	strh	r0, [r1]
	mov	r3, #0x4
	b	.L3485
.L3504:
	.align	2, 0
.L3503:
	.word	gDynamicBasePower
.L3484:
	cmp	r3, #0xe
	bgt	.L3486	@cond_branch
	ldr	r1, .L3505
	mov	r0, #0x1e
	strh	r0, [r1]
	mov	r3, #0x5
	b	.L3485
.L3506:
	.align	2, 0
.L3505:
	.word	gDynamicBasePower
.L3486:
	cmp	r3, #0x22
	bgt	.L3488	@cond_branch
	ldr	r1, .L3507
	mov	r0, #0x32
	strh	r0, [r1]
	mov	r3, #0x6
	b	.L3485
.L3508:
	.align	2, 0
.L3507:
	.word	gDynamicBasePower
.L3488:
	cmp	r3, #0x40
	bgt	.L3490	@cond_branch
	ldr	r1, .L3509
	mov	r0, #0x46
	strh	r0, [r1]
	mov	r3, #0x7
	b	.L3485
.L3510:
	.align	2, 0
.L3509:
	.word	gDynamicBasePower
.L3490:
	cmp	r3, #0x54
	bgt	.L3492	@cond_branch
	ldr	r1, .L3511
	mov	r0, #0x5a
	strh	r0, [r1]
	mov	r3, #0x8
	b	.L3485
.L3512:
	.align	2, 0
.L3511:
	.word	gDynamicBasePower
.L3492:
	cmp	r3, #0x5e
	bgt	.L3494	@cond_branch
	ldr	r1, .L3513
	mov	r0, #0x6e
	strh	r0, [r1]
	mov	r3, #0x9
	b	.L3485
.L3514:
	.align	2, 0
.L3513:
	.word	gDynamicBasePower
.L3494:
	ldr	r1, .L3515
	mov	r0, #0x96
	strh	r0, [r1]
	mov	r3, #0xa
.L3485:
	ldr	r1, .L3515+0x4
	mov	r2, #0x0
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	strb	r0, [r1, #0x2]
	mov	r0, #0x2
	strb	r0, [r1, #0x3]
	strb	r3, [r1, #0x4]
	mov	r0, #0xff
	strb	r0, [r1, #0x5]
	ldr	r1, .L3515+0x8
	strb	r2, [r1]
	ldr	r0, .L3515+0xc
	ldrb	r3, [r0]
	add	r6, r1, #0
	ldr	r0, .L3515+0x10
	mov	r8, r0
	cmp	r2, r3
	bcs	.L3497	@cond_branch
	add	r4, r6, #0
	ldr	r0, .L3515+0x14
	ldrb	r5, [r0]
	ldr	r1, .L3515+0x18
	mov	ip, r1
	ldr	r7, .L3515+0x1c
.L3499:
	ldrb	r2, [r4]
	cmp	r2, r5
	beq	.L3498	@cond_branch
	ldrb	r0, [r7]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3497	@cond_branch
.L3498:
	add	r0, r2, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r3
	bcc	.L3499	@cond_branch
.L3497:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3516:
	.align	2, 0
.L3515:
	.word	gDynamicBasePower
	.word	gBattleTextBuff1
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBitTable
	.word	gAbsentBattlerFlags
.Lfe218:
	.size	 Cmd_magnitudedamagecalculation,.Lfe218-Cmd_magnitudedamagecalculation
	.align	2, 0
	.type	 Cmd_jumpifnopursuitswitchdmg,function
	.thumb_func
Cmd_jumpifnopursuitswitchdmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L3533
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L3518	@cond_branch
	ldr	r0, .L3533+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3519	@cond_branch
	mov	r0, #0x1
	b	.L3532
.L3534:
	.align	2, 0
.L3533:
	.word	gMultiHitCounter
	.word	gBattlerAttacker
.L3519:
	mov	r0, #0x0
	b	.L3532
.L3518:
	ldr	r0, .L3535
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3522	@cond_branch
	mov	r0, #0x3
	b	.L3532
.L3536:
	.align	2, 0
.L3535:
	.word	gBattlerAttacker
.L3522:
	mov	r0, #0x2
.L3532:
	bl	GetBattlerAtPosition
	ldr	r1, .L3537
	strb	r0, [r1]
	ldr	r0, .L3537+0x4
	ldr	r1, .L3537
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB35093
	b	.L3524	@long jump
.LCB35093:
	ldr	r5, .L3537+0x8
	ldr	r0, .L3537+0xc
	ldr	r1, [r0]
	add	r1, r3, r1
	ldrb	r2, [r5]
	ldrb	r1, [r1, #0xc]
	cmp	r2, r1
	bne	.L3524	@cond_branch
	ldr	r4, .L3537+0x10
	mov	r2, #0x58
	mov	r0, r3
	mul	r0, r0, r2
	add	r1, r4, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x27
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3524	@cond_branch
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L3524	@cond_branch
	ldr	r0, .L3537+0x14
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x18]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L3524	@cond_branch
	ldr	r0, .L3537+0x18
	lsl	r1, r3, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0xe4
	bne	.L3524	@cond_branch
	mov	r1, #0x0
	ldr	r0, .L3537+0x1c
	ldr	r2, .L3537+0x20
	mov	r8, r2
	ldr	r7, .L3537+0x24
	mov	sl, r7
	ldr	r2, .L3537+0x28
	mov	r9, r2
	ldr	r7, .L3537+0x2c
	mov	ip, r7
	ldrb	r2, [r0]
	cmp	r1, r2
	bge	.L3526	@cond_branch
	ldr	r6, .L3537+0x30
	ldr	r5, .L3537
	ldr	r4, .L3537+0x34
	mov	r3, #0xb
	add	r2, r0, #0
.L3528:
	add	r0, r1, r6
	ldrb	r0, [r0]
	ldrb	r7, [r5]
	cmp	r0, r7
	bne	.L3527	@cond_branch
	add	r0, r1, r4
	strb	r3, [r0]
.L3527:
	add	r1, r1, #0x1
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L3528	@cond_branch
.L3526:
	mov	r0, #0xe4
	mov	r1, r8
	strh	r0, [r1]
	ldr	r2, .L3537
	ldrb	r0, [r2]
	ldr	r7, .L3537+0xc
	ldr	r1, [r7]
	add	r0, r0, r1
	add	r0, r0, #0x80
	ldrb	r0, [r0]
	mov	r1, r9
	strb	r0, [r1]
	mov	r2, sl
	strb	r0, [r2]
	ldr	r7, .L3537+0x38
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	mov	r0, #0x1
	ldr	r1, .L3537+0x3c
	strb	r0, [r1, #0x18]
	mov	r2, ip
	ldr	r0, [r2]
	ldr	r1, .L3537+0x40
	and	r0, r0, r1
	str	r0, [r2]
	b	.L3531
.L3538:
	.align	2, 0
.L3537:
	.word	gBattlerTarget
	.word	gChosenActionByBattler
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gBattleMons
	.word	gDisableStructs
	.word	gChosenMoveByBattler
	.word	gBattlersCount
	.word	gCurrentMove
	.word	gCurrMovePos
	.word	gChosenMovePos
	.word	gHitMarker
	.word	gBattlerByTurnOrder
	.word	gActionsByTurnOrder
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
	.word	-0x401
.L3524:
	ldr	r3, .L3539
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3531:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3540:
	.align	2, 0
.L3539:
	.word	gBattlescriptCurrInstr
.Lfe219:
	.size	 Cmd_jumpifnopursuitswitchdmg,.Lfe219-Cmd_jumpifnopursuitswitchdmg
	.align	2, 0
	.type	 Cmd_setsunny,function
	.thumb_func
Cmd_setsunny:
	push	{lr}
	ldr	r2, .L3544
	ldrh	r1, [r2]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3542	@cond_branch
	ldr	r2, .L3544+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3544+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L3543
.L3545:
	.align	2, 0
.L3544:
	.word	gBattleWeather
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3542:
	mov	r0, #0x20
	strh	r0, [r2]
	ldr	r1, .L3546
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	ldr	r0, .L3546+0x4
	add	r0, r0, #0x28
	mov	r1, #0x5
	strb	r1, [r0]
.L3543:
	ldr	r1, .L3546+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3547:
	.align	2, 0
.L3546:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe220:
	.size	 Cmd_setsunny,.Lfe220-Cmd_setsunny
	.align	2, 0
	.type	 Cmd_maxattackhalvehp,function
	.thumb_func
Cmd_maxattackhalvehp:
	push	{r4, r5, lr}
	ldr	r5, .L3553
	ldr	r4, .L3553+0x4
	ldrb	r0, [r4]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r2, r0, r5
	ldrh	r0, [r2, #0x2c]
	lsr	r1, r0, #0x1
	cmp	r1, #0
	bne	.L3549	@cond_branch
	mov	r1, #0x1
.L3549:
	mov	r0, #0x19
	ldrsb	r0, [r2, r0]
	cmp	r0, #0xb
	bgt	.L3550	@cond_branch
	ldrh	r0, [r2, #0x28]
	cmp	r0, r1
	bls	.L3550	@cond_branch
	mov	r0, #0xc
	strb	r0, [r2, #0x19]
	ldr	r1, .L3553+0x8
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L3551	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L3551:
	ldr	r1, .L3553+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3552
.L3554:
	.align	2, 0
.L3553:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.L3550:
	ldr	r3, .L3555
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3552:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3556:
	.align	2, 0
.L3555:
	.word	gBattlescriptCurrInstr
.Lfe221:
	.size	 Cmd_maxattackhalvehp,.Lfe221-Cmd_maxattackhalvehp
	.align	2, 0
	.type	 Cmd_copyfoestats,function
	.thumb_func
Cmd_copyfoestats:
	push	{r4, r5, r6, r7, lr}
	mov	r2, #0x0
	ldr	r7, .L3563
	ldr	r6, .L3563+0x4
	mov	r4, #0x58
	ldr	r3, .L3563+0x8
	ldr	r5, .L3563+0xc
.L3561:
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r2, r1
	add	r1, r1, r3
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r0, r2, r0
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L3561	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3564:
	.align	2, 0
.L3563:
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBattleMons+0x18
	.word	gBattlerTarget
.Lfe222:
	.size	 Cmd_copyfoestats,.Lfe222-Cmd_copyfoestats
	.align	2, 0
	.type	 Cmd_rapidspinfree,function
	.thumb_func
Cmd_rapidspinfree:
	push	{r4, r5, r6, lr}
	ldr	r1, .L3573
	ldr	r5, .L3573+0x4
	ldrb	r2, [r5]
	mov	r6, #0x58
	mov	r0, r2
	mul	r0, r0, r6
	add	r4, r1, #0
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0xe0
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3566	@cond_branch
	ldr	r1, .L3573+0x8
	ldr	r3, .L3573+0xc
	ldrb	r0, [r3]
	strb	r0, [r1, #0x17]
	ldrb	r0, [r5]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r4
	ldr	r0, [r1]
	ldr	r2, .L3573+0x10
	and	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r5]
	ldr	r1, .L3573+0x14
	ldr	r2, [r1]
	add	r0, r0, r2
	ldrb	r0, [r0, #0x14]
	strb	r0, [r3]
	ldr	r1, .L3573+0x18
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L3573+0x1c
	ldr	r0, .L3573+0x20
	b	.L3572
.L3574:
	.align	2, 0
.L3573:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattlerTarget
	.word	-0xe001
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WrapFree
.L3566:
	ldr	r4, .L3575
	lsl	r0, r2, #0x2
	add	r3, r0, r4
	ldr	r1, [r3]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3568	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r3]
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x4
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
	bl	BattleScriptPushCursor
	ldr	r1, .L3575+0x4
	ldr	r0, .L3575+0x8
	b	.L3572
.L3576:
	.align	2, 0
.L3575:
	.word	gStatuses3
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LeechSeedFree
.L3568:
	add	r0, r2, #0
	bl	GetBattlerSide
	ldr	r4, .L3577
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3570	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r2, [r0]
	ldr	r1, .L3577+0x4
	and	r1, r1, r2
	mov	r4, #0x0
	strh	r1, [r0]
	ldrb	r0, [r5]
	bl	GetBattlerSide
	ldr	r2, .L3577+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	strb	r4, [r1, #0xa]
	bl	BattleScriptPushCursor
	ldr	r1, .L3577+0xc
	ldr	r0, .L3577+0x10
	b	.L3572
.L3578:
	.align	2, 0
.L3577:
	.word	gSideStatuses
	.word	0xffef
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SpikesFree
.L3570:
	ldr	r1, .L3579
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L3572:
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3580:
	.align	2, 0
.L3579:
	.word	gBattlescriptCurrInstr
.Lfe223:
	.size	 Cmd_rapidspinfree,.Lfe223-Cmd_rapidspinfree
	.align	2, 0
	.type	 Cmd_setdefensecurlbit,function
	.thumb_func
Cmd_setdefensecurlbit:
	ldr	r1, .L3582
	ldr	r0, .L3582+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x17
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3582+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L3583:
	.align	2, 0
.L3582:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe224:
	.size	 Cmd_setdefensecurlbit,.Lfe224-Cmd_setdefensecurlbit
	.align	2, 0
	.type	 Cmd_recoverbasedonsunlight,function
	.thumb_func
Cmd_recoverbasedonsunlight:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L3593
	ldr	r5, .L3593+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	ldr	r7, .L3593+0x8
	ldrb	r0, [r5]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	beq	.L3585	@cond_branch
	ldr	r4, .L3593+0xc
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L3587	@cond_branch
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3587	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3586	@cond_branch
.L3587:
	ldr	r3, .L3593+0x10
	ldr	r2, .L3593+0x8
	ldr	r0, .L3593+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r3]
	add	r1, r3, #0
	b	.L3588
.L3594:
	.align	2, 0
.L3593:
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattleWeather
	.word	gBattleMoveDamage
.L3586:
	ldrh	r1, [r4]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3589	@cond_branch
	ldr	r4, .L3595
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r1, [r0, #0x2c]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0x1e
	bl	__divsi3
	str	r0, [r4]
	add	r1, r4, #0
	b	.L3588
.L3596:
	.align	2, 0
.L3595:
	.word	gBattleMoveDamage
.L3589:
	ldr	r1, .L3597
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r1]
.L3588:
	add	r2, r1, #0
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L3591	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L3591:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldr	r1, .L3597+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3592
.L3598:
	.align	2, 0
.L3597:
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.L3585:
	ldr	r3, .L3599
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3592:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3600:
	.align	2, 0
.L3599:
	.word	gBattlescriptCurrInstr
.Lfe225:
	.size	 Cmd_recoverbasedonsunlight,.Lfe225-Cmd_recoverbasedonsunlight
	.align	2, 0
	.type	 Cmd_hiddenpowercalc,function
	.thumb_func
Cmd_hiddenpowercalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r2, .L3603
	ldr	r0, .L3603+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1, #0x14]
	mov	r9, r0
	mov	r7, r9
	lsl	r7, r7, #0x1b
	add	r0, r7, #0
	lsr	r0, r0, #0x1b
	mov	r9, r0
	mov	r4, #0x2
	mov	r2, r9
	and	r2, r2, r4
	asr	r2, r2, #0x1
	ldrh	r7, [r1, #0x14]
	mov	r8, r7
	mov	r0, r8
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	mov	r8, r0
	and	r0, r0, r4
	orr	r2, r2, r0
	ldrb	r6, [r1, #0x15]
	lsl	r6, r6, #0x19
	lsr	r6, r6, #0x1b
	add	r0, r6, #0
	and	r0, r0, r4
	lsl	r0, r0, #0x1
	orr	r2, r2, r0
	ldr	r5, [r1, #0x14]
	lsl	r5, r5, #0xc
	lsr	r5, r5, #0x1b
	add	r0, r5, #0
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	orr	r2, r2, r0
	ldrh	r3, [r1, #0x16]
	lsl	r3, r3, #0x17
	lsr	r3, r3, #0x1b
	add	r0, r3, #0
	and	r0, r0, r4
	lsl	r0, r0, #0x3
	orr	r2, r2, r0
	ldrb	r1, [r1, #0x17]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	add	r0, r1, #0
	and	r0, r0, r4
	lsl	r0, r0, #0x4
	orr	r2, r2, r0
	mov	r0, #0x1
	add	r4, r0, #0
	mov	r7, r9
	and	r4, r4, r7
	mov	r7, r8
	and	r7, r7, r0
	lsl	r7, r7, #0x1
	orr	r4, r4, r7
	and	r6, r6, r0
	lsl	r6, r6, #0x2
	orr	r4, r4, r6
	and	r5, r5, r0
	lsl	r5, r5, #0x3
	orr	r4, r4, r5
	and	r3, r3, r0
	lsl	r3, r3, #0x4
	orr	r4, r4, r3
	and	r1, r1, r0
	lsl	r1, r1, #0x5
	orr	r4, r4, r1
	ldr	r5, .L3603+0x8
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	mov	r1, #0x3f
	bl	__divsi3
	add	r0, r0, #0x1e
	strh	r0, [r5]
	ldr	r6, .L3603+0xc
	ldr	r5, [r6]
	lsl	r0, r4, #0x4
	sub	r0, r0, r4
	mov	r1, #0x3f
	bl	__divsi3
	add	r0, r0, #0x1
	strb	r0, [r5, #0x13]
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0x8
	bls	.L3602	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x13]
.L3602:
	ldr	r2, [r6]
	ldrb	r0, [r2, #0x13]
	mov	r1, #0xc0
	orr	r0, r0, r1
	strb	r0, [r2, #0x13]
	ldr	r1, .L3603+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3604:
	.align	2, 0
.L3603:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe226:
	.size	 Cmd_hiddenpowercalc,.Lfe226-Cmd_hiddenpowercalc
	.align	2, 0
	.type	 Cmd_selectfirstvalidtarget,function
	.thumb_func
Cmd_selectfirstvalidtarget:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L3613
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L3613+0x4
	ldrb	r1, [r1]
	add	r6, r0, #0
	ldr	r0, .L3613+0x8
	mov	r8, r0
	cmp	r1, #0
	beq	.L3607	@cond_branch
	add	r3, r6, #0
	ldr	r0, .L3613+0xc
	ldrb	r5, [r0]
	ldr	r0, .L3613+0x10
	mov	ip, r0
	add	r4, r1, #0
	ldr	r7, .L3613+0x14
.L3609:
	ldrb	r2, [r3]
	cmp	r2, r5
	beq	.L3608	@cond_branch
	ldrb	r0, [r7]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3607	@cond_branch
.L3608:
	add	r0, r2, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcc	.L3609	@cond_branch
.L3607:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3614:
	.align	2, 0
.L3613:
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBitTable
	.word	gAbsentBattlerFlags
.Lfe227:
	.size	 Cmd_selectfirstvalidtarget,.Lfe227-Cmd_selectfirstvalidtarget
	.align	2, 0
	.type	 Cmd_trysetfutureattack,function
	.thumb_func
Cmd_trysetfutureattack:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	ldr	r0, .L3621
	mov	r8, r0
	ldr	r7, .L3621+0x4
	ldrb	r1, [r7]
	add	r0, r1, r0
	ldrb	r6, [r0]
	cmp	r6, #0
	beq	.L3616	@cond_branch
	ldr	r3, .L3621+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3617
.L3622:
	.align	2, 0
.L3621:
	.word	gWishFutureKnock
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3616:
	lsl	r1, r1, #0x1
	mov	r0, r8
	add	r0, r0, #0x18
	add	r1, r1, r0
	ldr	r2, .L3623
	mov	r9, r2
	ldrh	r0, [r2]
	strh	r0, [r1]
	mov	r0, r8
	add	r0, r0, #0x4
	ldrb	r4, [r7]
	add	r0, r0, r4
	ldr	r5, .L3623+0x4
	ldrb	r1, [r5]
	strb	r1, [r0]
	ldrb	r0, [r7]
	add	r0, r0, r8
	mov	r1, #0x3
	strb	r1, [r0]
	ldr	r4, .L3623+0x8
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	mov	r1, #0x1
	mov	sl, r1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	ldrb	r0, [r5]
	mov	r4, #0x58
	mul	r0, r0, r4
	ldr	r2, .L3623+0xc
	add	r0, r0, r2
	ldrb	r1, [r7]
	mul	r1, r1, r4
	add	r1, r1, r2
	mov	r4, r9
	ldrh	r2, [r4]
	str	r6, [sp]
	str	r6, [sp, #0x4]
	ldrb	r4, [r5]
	str	r4, [sp, #0x8]
	ldrb	r4, [r7]
	str	r4, [sp, #0xc]
	bl	CalculateBaseDamage
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	mov	r2, r8
	add	r2, r2, #0x8
	add	r1, r1, r2
	str	r0, [r1]
	ldr	r1, .L3623+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L3618	@cond_branch
	ldrb	r4, [r7]
	lsl	r4, r4, #0x2
	add	r4, r4, r2
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L3618:
	mov	r0, r9
	ldrh	r1, [r0]
	ldr	r0, .L3623+0x14
	cmp	r1, r0
	bne	.L3619	@cond_branch
	ldr	r0, .L3623+0x18
	mov	r1, sl
	strb	r1, [r0, #0x5]
	b	.L3620
.L3624:
	.align	2, 0
.L3623:
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gBattleMons
	.word	gProtectStructs
	.word	0x161
	.word	gBattleCommunication
.L3619:
	ldr	r1, .L3625
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
.L3620:
	ldr	r1, .L3625+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3617:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3626:
	.align	2, 0
.L3625:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe228:
	.size	 Cmd_trysetfutureattack,.Lfe228-Cmd_trysetfutureattack
	.align	2, 0
	.type	 Cmd_trydobeatup,function
	.thumb_func
Cmd_trydobeatup:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L3644
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r7, .L3644+0x4
	cmp	r0, #0
	bne	.L3628	@cond_branch
	ldr	r7, .L3644+0x8
.L3628:
	ldr	r2, .L3644+0xc
	ldr	r0, .L3644+0x10
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L3630	@cond_branch
	ldr	r3, .L3644+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	b	.L3643
.L3645:
	.align	2, 0
.L3644:
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3630:
	ldr	r6, .L3646
	ldrb	r0, [r6]
	mov	r8, r0
	cmp	r0, #0x5
	bls	.LCB36320
	b	.L3638	@long jump
.LCB36320:
	add	r4, r6, #0
	mov	r5, #0x64
.L3635:
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L3634	@cond_branch
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L3634	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L3646+0x4
	cmp	r0, r1
	beq	.L3634	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r0, #0
	beq	.L3633	@cond_branch
.L3634:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	add	r6, r4, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bls	.L3635	@cond_branch
.L3633:
	ldr	r1, .L3646
	mov	r9, r1
	ldrb	r2, [r1]
	cmp	r2, #0x5
	bls	.LCB36383
	b	.L3638	@long jump
.LCB36383:
	ldr	r1, .L3646+0x8
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r6, .L3646+0xc
	ldrb	r0, [r6]
	strb	r0, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3646+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	ldr	r2, .L3646+0x14
	mov	r8, r2
	ldr	r5, .L3646+0x18
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r4, #0x64
	mul	r0, r0, r4
	add	r0, r7, r0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r3, [r1, #0x1]
	mov	r2, r8
	str	r3, [r2]
	ldr	r2, .L3646+0x1c
	ldr	r0, .L3646+0x20
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	mul	r0, r0, r3
	mov	r1, r8
	str	r0, [r1]
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r7, r0
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x1
	mov	r1, #0x5
	bl	__udivsi3
	add	r0, r0, #0x2
	mov	r2, r8
	ldr	r1, [r2]
	mul	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L3646+0x24
	ldr	r1, .L3646+0x28
	ldrb	r2, [r1]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r2, [r1]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r1, [r1, #0x2]
	bl	__divsi3
	mov	r1, r8
	str	r0, [r1]
	mov	r1, #0x32
	bl	__divsi3
	add	r2, r0, #0x2
	mov	r0, r8
	str	r2, [r0]
	ldr	r1, .L3646+0x2c
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L3639	@cond_branch
	lsl	r0, r2, #0x4
	sub	r0, r0, r2
	mov	r1, #0xa
	bl	__divsi3
	mov	r1, r8
	str	r0, [r1]
.L3639:
	mov	r2, r9
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	b	.L3631
.L3647:
	.align	2, 0
.L3646:
	.word	gBattleCommunication
	.word	0x19d
	.word	gBattleTextBuff1
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleMoveDamage
	.word	gSpeciesInfo
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gProtectStructs
.L3638:
	mov	r0, r8
	cmp	r0, #0
	beq	.L3641	@cond_branch
	ldr	r3, .L3648
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	b	.L3643
.L3649:
	.align	2, 0
.L3648:
	.word	gBattlescriptCurrInstr
.L3641:
	ldr	r3, .L3650
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
.L3643:
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3631:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3651:
	.align	2, 0
.L3650:
	.word	gBattlescriptCurrInstr
.Lfe229:
	.size	 Cmd_trydobeatup,.Lfe229-Cmd_trydobeatup
	.align	2, 0
	.type	 Cmd_setsemiinvulnerablebit,function
	.thumb_func
Cmd_setsemiinvulnerablebit:
	push	{lr}
	ldr	r0, .L3662
	ldrh	r1, [r0]
	cmp	r1, #0x5b
	beq	.L3656	@cond_branch
	cmp	r1, #0x5b
	bgt	.L3660	@cond_branch
	cmp	r1, #0x13
	beq	.L3655	@cond_branch
	b	.L3653
.L3663:
	.align	2, 0
.L3662:
	.word	gCurrentMove
.L3660:
	ldr	r0, .L3664
	cmp	r1, r0
	beq	.L3657	@cond_branch
	add	r0, r0, #0x31
	cmp	r1, r0
	bne	.L3653	@cond_branch
.L3655:
	ldr	r2, .L3664+0x4
	ldr	r0, .L3664+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x40
	b	.L3661
.L3665:
	.align	2, 0
.L3664:
	.word	0x123
	.word	gStatuses3
	.word	gBattlerAttacker
.L3656:
	ldr	r2, .L3666
	ldr	r0, .L3666+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	b	.L3661
.L3667:
	.align	2, 0
.L3666:
	.word	gStatuses3
	.word	gBattlerAttacker
.L3657:
	ldr	r2, .L3668
	ldr	r0, .L3668+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0xb
.L3661:
	orr	r0, r0, r2
	str	r0, [r1]
.L3653:
	ldr	r1, .L3668+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3669:
	.align	2, 0
.L3668:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe230:
	.size	 Cmd_setsemiinvulnerablebit,.Lfe230-Cmd_setsemiinvulnerablebit
	.align	2, 0
	.type	 Cmd_clearsemiinvulnerablebit,function
	.thumb_func
Cmd_clearsemiinvulnerablebit:
	push	{lr}
	ldr	r0, .L3680
	ldrh	r1, [r0]
	cmp	r1, #0x5b
	beq	.L3674	@cond_branch
	cmp	r1, #0x5b
	bgt	.L3678	@cond_branch
	cmp	r1, #0x13
	beq	.L3673	@cond_branch
	b	.L3671
.L3681:
	.align	2, 0
.L3680:
	.word	gCurrentMove
.L3678:
	ldr	r0, .L3682
	cmp	r1, r0
	beq	.L3675	@cond_branch
	add	r0, r0, #0x31
	cmp	r1, r0
	bne	.L3671	@cond_branch
.L3673:
	ldr	r2, .L3682+0x4
	ldr	r0, .L3682+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x41
	neg	r2, r2
	b	.L3679
.L3683:
	.align	2, 0
.L3682:
	.word	0x123
	.word	gStatuses3
	.word	gBattlerAttacker
.L3674:
	ldr	r2, .L3684
	ldr	r0, .L3684+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x81
	neg	r2, r2
	b	.L3679
.L3685:
	.align	2, 0
.L3684:
	.word	gStatuses3
	.word	gBattlerAttacker
.L3675:
	ldr	r2, .L3686
	ldr	r0, .L3686+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	ldr	r2, .L3686+0x8
.L3679:
	and	r0, r0, r2
	str	r0, [r1]
.L3671:
	ldr	r1, .L3686+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3687:
	.align	2, 0
.L3686:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	-0x40001
	.word	gBattlescriptCurrInstr
.Lfe231:
	.size	 Cmd_clearsemiinvulnerablebit,.Lfe231-Cmd_clearsemiinvulnerablebit
	.align	2, 0
	.type	 Cmd_setminimize,function
	.thumb_func
Cmd_setminimize:
	push	{lr}
	ldr	r0, .L3690
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3689	@cond_branch
	ldr	r2, .L3690+0x4
	ldr	r0, .L3690+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	orr	r0, r0, r2
	str	r0, [r1]
.L3689:
	ldr	r1, .L3690+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3691:
	.align	2, 0
.L3690:
	.word	gHitMarker
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe232:
	.size	 Cmd_setminimize,.Lfe232-Cmd_setminimize
	.align	2, 0
	.type	 Cmd_sethail,function
	.thumb_func
Cmd_sethail:
	push	{lr}
	ldr	r3, .L3695
	ldrh	r1, [r3]
	mov	r2, #0x80
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3693	@cond_branch
	ldr	r2, .L3695+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3695+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L3694
.L3696:
	.align	2, 0
.L3695:
	.word	gBattleWeather
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3693:
	strh	r2, [r3]
	ldr	r0, .L3697
	mov	r1, #0x5
	strb	r1, [r0, #0x5]
	ldr	r0, .L3697+0x4
	add	r0, r0, #0x28
	strb	r1, [r0]
.L3694:
	ldr	r1, .L3697+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3698:
	.align	2, 0
.L3697:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe233:
	.size	 Cmd_sethail,.Lfe233-Cmd_sethail
	.align	2, 0
	.type	 Cmd_trymemento,function
	.thumb_func
Cmd_trymemento:
	push	{r4, lr}
	ldr	r2, .L3702
	ldr	r0, .L3702+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	mov	r0, #0x19
	ldrsb	r0, [r1, r0]
	add	r3, r2, #0
	cmp	r0, #0
	bne	.L3700	@cond_branch
	mov	r0, #0x1c
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bne	.L3700	@cond_branch
	ldr	r0, .L3702+0x8
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	beq	.L3700	@cond_branch
	ldr	r3, .L3702+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3701
.L3703:
	.align	2, 0
.L3702:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L3700:
	ldr	r4, .L3704
	ldr	r0, .L3704+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r2, .L3704+0x8
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x28]
	str	r0, [r2]
	ldr	r1, .L3704+0xc
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L3704+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3701:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3705:
	.align	2, 0
.L3704:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	0x7fff
	.word	gBattlescriptCurrInstr
.Lfe234:
	.size	 Cmd_trymemento,.Lfe234-Cmd_trymemento
	.align	2, 0
	.type	 Cmd_setforcedtarget,function
	.thumb_func
Cmd_setforcedtarget:
	push	{r4, r5, lr}
	ldr	r4, .L3707
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r5, .L3707+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r4]
	strb	r0, [r1, #0x9]
	ldr	r1, .L3707+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3708:
	.align	2, 0
.L3707:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
.Lfe235:
	.size	 Cmd_setforcedtarget,.Lfe235-Cmd_setforcedtarget
	.align	2, 0
	.type	 Cmd_setcharge,function
	.thumb_func
Cmd_setcharge:
	push	{r4, lr}
	ldr	r0, .L3710
	ldr	r3, .L3710+0x4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r4, .L3710+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0, #0x12]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x12]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0, #0x12]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x12]
	ldr	r1, .L3710+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3711:
	.align	2, 0
.L3710:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.Lfe236:
	.size	 Cmd_setcharge,.Lfe236-Cmd_setcharge
	.align	2, 0
	.type	 Cmd_callterrainattack,function
	.thumb_func
Cmd_callterrainattack:
	push	{r4, lr}
	ldr	r2, .L3713
	ldr	r0, [r2]
	ldr	r1, .L3713+0x4
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L3713+0x8
	ldr	r1, .L3713+0xc
	ldr	r0, .L3713+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3713+0x14
	strb	r0, [r1]
	ldr	r3, .L3713+0x18
	ldr	r2, .L3713+0x1c
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	bl	BattleScriptPush
	ldr	r1, .L3713+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3714:
	.align	2, 0
.L3713:
	.word	gHitMarker
	.word	-0x401
	.word	gCurrentMove
	.word	sNaturePowerMoves
	.word	gBattleTerrain
	.word	gBattlerTarget
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
	.word	gBattlescriptCurrInstr
.Lfe237:
	.size	 Cmd_callterrainattack,.Lfe237-Cmd_callterrainattack
	.align	2, 0
	.type	 Cmd_cureifburnedparalysedorpoisoned,function
	.thumb_func
Cmd_cureifburnedparalysedorpoisoned:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L3718
	ldr	r3, .L3718+0x4
	ldrb	r0, [r3]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r5, r1, #0
	add	r5, r5, #0x4c
	add	r2, r0, r5
	ldr	r0, [r2]
	mov	r1, #0xd8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3716	@cond_branch
	mov	r0, #0x0
	str	r0, [r2]
	ldr	r1, .L3718+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r4, .L3718+0xc
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L3717
.L3719:
	.align	2, 0
.L3718:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L3716:
	ldr	r3, .L3720
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3717:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3721:
	.align	2, 0
.L3720:
	.word	gBattlescriptCurrInstr
.Lfe238:
	.size	 Cmd_cureifburnedparalysedorpoisoned,.Lfe238-Cmd_cureifburnedparalysedorpoisoned
	.align	2, 0
	.type	 Cmd_settorment,function
	.thumb_func
Cmd_settorment:
	push	{lr}
	ldr	r1, .L3725
	ldr	r0, .L3725+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x18
	cmp	r1, #0
	bge	.L3723	@cond_branch
	ldr	r3, .L3725+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3724
.L3726:
	.align	2, 0
.L3725:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3723:
	orr	r1, r1, r2
	str	r1, [r0]
	ldr	r1, .L3727
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3724:
	pop	{r0}
	bx	r0
.L3728:
	.align	2, 0
.L3727:
	.word	gBattlescriptCurrInstr
.Lfe239:
	.size	 Cmd_settorment,.Lfe239-Cmd_settorment
	.align	2, 0
	.type	 Cmd_jumpifnodamage,function
	.thumb_func
Cmd_jumpifnodamage:
	push	{lr}
	ldr	r2, .L3733
	ldr	r0, .L3733+0x4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r0, r2, #0x4
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L3731	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L3730	@cond_branch
.L3731:
	ldr	r1, .L3733+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3732
.L3734:
	.align	2, 0
.L3733:
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3730:
	ldr	r3, .L3735
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3732:
	pop	{r0}
	bx	r0
.L3736:
	.align	2, 0
.L3735:
	.word	gBattlescriptCurrInstr
.Lfe240:
	.size	 Cmd_jumpifnodamage,.Lfe240-Cmd_jumpifnodamage
	.align	2, 0
	.type	 Cmd_settaunt,function
	.thumb_func
Cmd_settaunt:
	push	{r4, lr}
	ldr	r4, .L3740
	ldr	r3, .L3740+0x4
	ldrb	r0, [r3]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r4
	ldrb	r1, [r2, #0x13]
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	bne	.L3738	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x13]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0, #0x13]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x13]
	ldr	r1, .L3740+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3739
.L3741:
	.align	2, 0
.L3740:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3738:
	ldr	r3, .L3742
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3739:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3743:
	.align	2, 0
.L3742:
	.word	gBattlescriptCurrInstr
.Lfe241:
	.size	 Cmd_settaunt,.Lfe241-Cmd_settaunt
	.align	2, 0
	.type	 Cmd_trysethelpinghand,function
	.thumb_func
Cmd_trysethelpinghand:
	push	{r4, lr}
	ldr	r4, .L3747
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r3, .L3747+0x4
	strb	r0, [r3]
	ldr	r0, .L3747+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3745	@cond_branch
	ldr	r0, .L3747+0xc
	ldrb	r1, [r0]
	ldr	r2, .L3747+0x10
	ldrb	r3, [r3]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3745	@cond_branch
	ldr	r1, .L3747+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	blt	.L3745	@cond_branch
	lsl	r0, r3, #0x4
	add	r2, r0, r1
	ldrb	r1, [r2]
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	blt	.L3745	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3747+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3746
.L3748:
	.align	2, 0
.L3747:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.L3745:
	ldr	r3, .L3749
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3746:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3750:
	.align	2, 0
.L3749:
	.word	gBattlescriptCurrInstr
.Lfe242:
	.size	 Cmd_trysethelpinghand,.Lfe242-Cmd_trysethelpinghand
	.align	2, 0
	.type	 Cmd_tryswapitems,function
	.thumb_func
Cmd_tryswapitems:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, .L3770
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3759	@cond_branch
	ldr	r0, .L3770+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3752	@cond_branch
	ldr	r0, [r4]
	ldr	r1, .L3770+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3752	@cond_branch
	ldr	r0, .L3770+0xc
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L3759	@cond_branch
.L3752:
	ldr	r6, .L3770+0x4
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r7, .L3770+0x10
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L3770
	ldr	r0, [r0]
	ldr	r1, .L3770+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3755	@cond_branch
	ldr	r0, .L3770+0xc
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L3755	@cond_branch
	ldr	r0, .L3770+0x14
	add	r2, r0, #0
	add	r2, r2, #0x29
	add	r0, r4, r2
	ldrb	r1, [r0]
	ldr	r4, .L3770+0x18
	ldr	r3, .L3770+0x1c
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3759	@cond_branch
	add	r0, r5, r2
	ldrb	r1, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3759	@cond_branch
.L3755:
	ldr	r0, .L3770+0x20
	mov	r8, r0
	ldr	r1, .L3770+0x4
	ldrb	r4, [r1]
	mov	r5, #0x58
	mov	r0, r4
	mul	r0, r0, r5
	add	r0, r0, r8
	mov	r9, r0
	ldrh	r3, [r0, #0x2e]
	add	r1, r3, #0
	cmp	r1, #0
	bne	.L3760	@cond_branch
	ldr	r0, .L3770+0x10
	ldrb	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	beq	.L3759	@cond_branch
.L3760:
	cmp	r1, #0xaf
	beq	.L3759	@cond_branch
	ldr	r7, .L3770+0x10
	ldrb	r0, [r7]
	mul	r0, r0, r5
	mov	r2, r8
	add	r1, r0, r2
	ldrh	r2, [r1, #0x2e]
	cmp	r2, #0xaf
	beq	.L3759	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0x79
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xb
	bls	.L3759	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #0x79
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xb
	bhi	.L3758	@cond_branch
.L3759:
	ldr	r3, .L3770+0x24
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3754
.L3771:
	.align	2, 0
.L3770:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	0x902
	.word	gTrainerBattleOpponent_A
	.word	gBattlerTarget
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L3758:
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x3c
	bne	.L3762	@cond_branch
	ldr	r1, .L3772
	ldr	r0, .L3772+0x4
	str	r0, [r1]
	ldr	r1, .L3772+0x8
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	b	.L3754
.L3773:
	.align	2, 0
.L3772:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StickyHoldActivates
	.word	gLastUsedAbility
.L3762:
	ldr	r3, .L3774
	mov	sl, r3
	lsl	r0, r4, #0x1
	add	r0, r0, #0xd0
	ldr	r1, [r3]
	add	r6, r1, r0
	mov	r0, r9
	ldrh	r0, [r0, #0x2e]
	mov	r9, r0
	strh	r2, [r6]
	ldr	r1, .L3774+0x4
	ldrb	r0, [r1]
	mul	r0, r0, r5
	add	r0, r0, r8
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r8
	mov	r2, r9
	strh	r2, [r0, #0x2e]
	ldr	r4, .L3774+0x8
	ldr	r3, .L3774+0x4
	ldrb	r0, [r3]
	strb	r0, [r4]
	str	r6, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldr	r1, .L3774+0x4
	ldrb	r0, [r1]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r7]
	strb	r0, [r4]
	ldrb	r0, [r7]
	mul	r0, r0, r5
	mov	r1, r8
	add	r1, r1, #0x2e
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r7]
	mov	r2, sl
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc8
	mov	r3, #0x0
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc9
	strb	r3, [r0]
	ldr	r1, .L3774+0x4
	ldrb	r0, [r1]
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc8
	strb	r3, [r0]
	ldr	r2, .L3774+0x4
	ldrb	r0, [r2]
	mov	r3, sl
	ldr	r1, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc9
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L3774+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r1, .L3774+0x10
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r2, #0xa
	strb	r2, [r1, #0x1]
	ldrh	r0, [r6]
	strb	r0, [r1, #0x2]
	ldrh	r0, [r6]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3774+0x14
	strb	r3, [r1]
	strb	r2, [r1, #0x1]
	mov	r2, r9
	strb	r2, [r1, #0x2]
	mov	r3, r9
	lsr	r0, r3, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x4]
	cmp	r3, #0
	beq	.L3768	@cond_branch
	ldrh	r0, [r6]
	cmp	r0, #0
	beq	.L3766	@cond_branch
	ldr	r1, .L3774+0x18
	mov	r0, #0x2
	b	.L3769
.L3775:
	.align	2, 0
.L3774:
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gBattleCommunication
.L3768:
	ldrh	r0, [r6]
	cmp	r0, #0
	beq	.L3766	@cond_branch
	ldr	r0, .L3776
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	b	.L3754
.L3777:
	.align	2, 0
.L3776:
	.word	gBattleCommunication
.L3766:
	ldr	r1, .L3778
	mov	r0, #0x1
.L3769:
	strb	r0, [r1, #0x5]
.L3754:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3779:
	.align	2, 0
.L3778:
	.word	gBattleCommunication
.Lfe243:
	.size	 Cmd_tryswapitems,.Lfe243-Cmd_tryswapitems
	.align	2, 0
	.type	 Cmd_trycopyability,function
	.thumb_func
Cmd_trycopyability:
	push	{r4, lr}
	ldr	r3, .L3783
	ldr	r4, .L3783+0x4
	ldrb	r0, [r4]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	add	r0, r1, #0
	cmp	r0, #0
	beq	.L3781	@cond_branch
	cmp	r0, #0x19
	beq	.L3781	@cond_branch
	ldr	r0, .L3783+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	strb	r1, [r0]
	ldr	r1, .L3783+0xc
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L3783+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3782
.L3784:
	.align	2, 0
.L3783:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
.L3781:
	ldr	r3, .L3785
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3782:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3786:
	.align	2, 0
.L3785:
	.word	gBattlescriptCurrInstr
.Lfe244:
	.size	 Cmd_trycopyability,.Lfe244-Cmd_trycopyability
	.align	2, 0
	.type	 Cmd_trywish,function
	.thumb_func
Cmd_trywish:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L3800
	ldr	r2, [r7]
	ldrb	r3, [r2, #0x1]
	cmp	r3, #0
	beq	.L3789	@cond_branch
	cmp	r3, #0x1
	beq	.L3792	@cond_branch
	b	.L3788
.L3801:
	.align	2, 0
.L3800:
	.word	gBattlescriptCurrInstr
.L3789:
	ldr	r1, .L3802
	ldr	r4, .L3802+0x4
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r5, [r4]
	add	r3, r0, r5
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L3799	@cond_branch
	mov	r0, #0x2
	strb	r0, [r3]
	ldrb	r0, [r4]
	add	r1, r1, #0x24
	add	r1, r0, r1
	ldr	r2, .L3802+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r0, [r7]
	add	r0, r0, #0x6
	b	.L3798
.L3803:
	.align	2, 0
.L3802:
	.word	gWishFutureKnock
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
.L3792:
	ldr	r1, .L3804
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r4, .L3804+0x4
	ldrb	r0, [r4]
	strb	r0, [r1, #0x2]
	ldr	r0, .L3804+0x8
	add	r0, r0, #0x24
	ldrb	r5, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3804+0xc
	ldr	r6, .L3804+0x10
	ldrb	r0, [r4]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L3793	@cond_branch
	str	r3, [r1]
.L3793:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	bne	.L3794	@cond_branch
.L3799:
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r7]
	b	.L3788
.L3805:
	.align	2, 0
.L3804:
	.word	gBattleTextBuff1
	.word	gBattlerTarget
	.word	gWishFutureKnock
	.word	gBattleMoveDamage
	.word	gBattleMons
.L3794:
	add	r0, r2, #0x6
.L3798:
	str	r0, [r7]
.L3788:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe245:
	.size	 Cmd_trywish,.Lfe245-Cmd_trywish
	.align	2, 0
	.type	 Cmd_trysetroots,function
	.thumb_func
Cmd_trysetroots:
	push	{lr}
	ldr	r1, .L3809
	ldr	r0, .L3809+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L3807	@cond_branch
	ldr	r3, .L3809+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3808
.L3810:
	.align	2, 0
.L3809:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3807:
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L3811
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3808:
	pop	{r0}
	bx	r0
.L3812:
	.align	2, 0
.L3811:
	.word	gBattlescriptCurrInstr
.Lfe246:
	.size	 Cmd_trysetroots,.Lfe246-Cmd_trysetroots
	.align	2, 0
	.type	 Cmd_doubledamagedealtifdamaged,function
	.thumb_func
Cmd_doubledamagedealtifdamaged:
	push	{lr}
	ldr	r3, .L3817
	ldr	r0, .L3817+0x4
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r0, r3, #0x4
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L3816	@cond_branch
	add	r0, r2, r3
	ldr	r1, .L3817+0x8
	ldrb	r0, [r0, #0xc]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L3815	@cond_branch
.L3816:
	add	r0, r3, #0
	add	r0, r0, #0x8
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L3814	@cond_branch
	add	r0, r2, r3
	ldr	r1, .L3817+0x8
	ldrb	r0, [r0, #0xd]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L3814	@cond_branch
.L3815:
	ldr	r1, .L3817+0xc
	mov	r0, #0x2
	strb	r0, [r1, #0xe]
.L3814:
	ldr	r1, .L3817+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3818:
	.align	2, 0
.L3817:
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe247:
	.size	 Cmd_doubledamagedealtifdamaged,.Lfe247-Cmd_doubledamagedealtifdamaged
	.align	2, 0
	.type	 Cmd_setyawn,function
	.thumb_func
Cmd_setyawn:
	push	{r4, lr}
	ldr	r1, .L3823
	ldr	r0, .L3823+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r4, r0, r1
	ldr	r2, [r4]
	mov	r0, #0xc0
	lsl	r0, r0, #0x5
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L3821	@cond_branch
	ldr	r1, .L3823+0x8
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3820	@cond_branch
.L3821:
	ldr	r3, .L3823+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3822
.L3824:
	.align	2, 0
.L3823:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L3820:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r2, r2, r0
	str	r2, [r4]
	ldr	r1, .L3825
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3822:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3826:
	.align	2, 0
.L3825:
	.word	gBattlescriptCurrInstr
.Lfe248:
	.size	 Cmd_setyawn,.Lfe248-Cmd_setyawn
	.align	2, 0
	.type	 Cmd_setdamagetohealthdifference,function
	.thumb_func
Cmd_setdamagetohealthdifference:
	push	{lr}
	ldr	r2, .L3830
	ldr	r0, .L3830+0x4
	ldrb	r0, [r0]
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r3, r0, r2
	ldr	r0, .L3830+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrh	r0, [r3, #0x28]
	ldrh	r2, [r1, #0x28]
	cmp	r0, r2
	bhi	.L3828	@cond_branch
	ldr	r3, .L3830+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3829
.L3831:
	.align	2, 0
.L3830:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3828:
	ldr	r2, .L3832
	ldrh	r0, [r3, #0x28]
	ldrh	r1, [r1, #0x28]
	sub	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3832+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3829:
	pop	{r0}
	bx	r0
.L3833:
	.align	2, 0
.L3832:
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe249:
	.size	 Cmd_setdamagetohealthdifference,.Lfe249-Cmd_setdamagetohealthdifference
	.align	2, 0
	.type	 Cmd_scaledamagebyhealthratio,function
	.thumb_func
Cmd_scaledamagebyhealthratio:
	push	{r4, lr}
	ldr	r4, .L3837
	ldrh	r0, [r4]
	cmp	r0, #0
	bne	.L3835	@cond_branch
	ldr	r2, .L3837+0x4
	ldr	r0, .L3837+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r3, [r0, #0x1]
	ldr	r2, .L3837+0xc
	ldr	r0, .L3837+0x10
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1, #0x28]
	mul	r0, r0, r3
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L3835	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4]
.L3835:
	ldr	r1, .L3837+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3838:
	.align	2, 0
.L3837:
	.word	gDynamicBasePower
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe250:
	.size	 Cmd_scaledamagebyhealthratio,.Lfe250-Cmd_scaledamagebyhealthratio
	.align	2, 0
	.type	 Cmd_tryswapabilities,function
	.thumb_func
Cmd_tryswapabilities:
	push	{r4, r5, r6, lr}
	ldr	r5, .L3844
	ldr	r0, .L3844+0x4
	ldrb	r0, [r0]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r2, r0, #0
	add	r2, r2, #0x20
	ldrb	r1, [r2]
	cmp	r1, #0
	bne	.L3842	@cond_branch
	ldr	r0, .L3844+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3841	@cond_branch
.L3842:
	cmp	r1, #0x19
	beq	.L3841	@cond_branch
	ldr	r6, .L3844+0x8
	ldrb	r0, [r6]
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r3, [r0]
	cmp	r3, #0x19
	beq	.L3841	@cond_branch
	ldr	r0, .L3844+0xc
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3840	@cond_branch
.L3841:
	ldr	r3, .L3844+0x10
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3843
.L3845:
	.align	2, 0
.L3844:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
.L3840:
	ldrb	r1, [r2]
	strb	r3, [r2]
	ldrb	r0, [r6]
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x20
	strb	r1, [r0]
	ldr	r1, .L3846
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3843:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3847:
	.align	2, 0
.L3846:
	.word	gBattlescriptCurrInstr
.Lfe251:
	.size	 Cmd_tryswapabilities,.Lfe251-Cmd_tryswapabilities
	.align	2, 0
	.type	 Cmd_tryimprison,function
	.thumb_func
Cmd_tryimprison:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r1, .L3874
	ldr	r4, .L3874+0x4
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3849	@cond_branch
	b	.L3872
.L3875:
	.align	2, 0
.L3874:
	.word	gStatuses3
	.word	gBattlerAttacker
.L3871:
	ldr	r0, .L3876
	mov	r2, r9
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L3876+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3852
.L3877:
	.align	2, 0
.L3876:
	.word	gStatuses3
	.word	gBattlescriptCurrInstr
.L3849:
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r0, [r4]
	bl	PressurePPLoseOnUsingImprison
	mov	r6, #0x0
	b	.L3873
.L3854:
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r8, r0
	beq	.L3853	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L3878
	mov	r9, r7
	ldr	r0, .L3878+0x4
	mov	ip, r0
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r2, ip
	add	r2, r2, #0xc
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r3, r0, r2
	mov	r5, r6
	mul	r5, r5, r1
.L3859:
	mov	r2, #0x0
	ldrh	r1, [r3]
	mov	r0, ip
	add	r0, r0, #0xc
	add	r0, r5, r0
.L3863:
	ldrh	r7, [r0]
	cmp	r1, r7
	bne	.L3862	@cond_branch
	cmp	r1, #0
	bne	.L3861	@cond_branch
.L3862:
	add	r0, r0, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L3863	@cond_branch
.L3861:
	cmp	r2, #0x4
	bne	.L3857	@cond_branch
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L3859	@cond_branch
.L3857:
	cmp	r4, #0x4
	bne	.L3871	@cond_branch
.L3853:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L3873:
	ldr	r0, .L3878+0x8
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.L3854	@cond_branch
.L3852:
	ldr	r0, .L3878+0x8
	ldrb	r0, [r0]
	cmp	r6, r0
	bne	.L3850	@cond_branch
.L3872:
	ldr	r3, .L3878+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3850:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3879:
	.align	2, 0
.L3878:
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.Lfe252:
	.size	 Cmd_tryimprison,.Lfe252-Cmd_tryimprison
	.align	2, 0
	.type	 Cmd_trysetgrudge,function
	.thumb_func
Cmd_trysetgrudge:
	push	{lr}
	ldr	r1, .L3883
	ldr	r0, .L3883+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x7
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L3881	@cond_branch
	ldr	r3, .L3883+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3882
.L3884:
	.align	2, 0
.L3883:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3881:
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L3885
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3882:
	pop	{r0}
	bx	r0
.L3886:
	.align	2, 0
.L3885:
	.word	gBattlescriptCurrInstr
.Lfe253:
	.size	 Cmd_trysetgrudge,.Lfe253-Cmd_trysetgrudge
	.align	2, 0
	.type	 Cmd_weightdamagecalculation,function
	.thumb_func
Cmd_weightdamagecalculation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r5, #0x0
	ldr	r2, .L3896
	ldrh	r0, [r2]
	ldr	r1, .L3896+0x4
	cmp	r0, r1
	beq	.L3894	@cond_branch
	add	r6, r2, #0
	ldr	r0, .L3896+0x8
	mov	r8, r0
	add	r7, r1, #0
	add	r4, r6, #0
.L3891:
	ldr	r0, .L3896+0xc
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetPokedexHeightWeight
	ldrh	r1, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bhi	.L3889	@cond_branch
	add	r4, r4, #0x4
	add	r5, r5, #0x2
	ldrh	r0, [r4]
	cmp	r0, r7
	bne	.L3891	@cond_branch
.L3889:
	lsl	r0, r5, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	ldr	r0, .L3896+0x4
	cmp	r1, r0
	beq	.L3894	@cond_branch
	ldr	r0, .L3896+0x10
	add	r1, r5, #0x1
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L3895
.L3897:
	.align	2, 0
.L3896:
	.word	sWeightToDamageTable
	.word	0xffff
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gDynamicBasePower
.L3894:
	ldr	r1, .L3898
	mov	r0, #0x78
	strh	r0, [r1]
.L3895:
	ldr	r1, .L3898+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3899:
	.align	2, 0
.L3898:
	.word	gDynamicBasePower
	.word	gBattlescriptCurrInstr
.Lfe254:
	.size	 Cmd_weightdamagecalculation,.Lfe254-Cmd_weightdamagecalculation
	.align	2, 0
	.type	 Cmd_assistattackselect,function
	.thumb_func
Cmd_assistattackselect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	sl, r0
	ldr	r0, .L3928
	ldr	r0, [r0]
	add	r0, r0, #0x18
	str	r0, [sp, #0x4]
	ldr	r0, .L3928+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r0, .L3928+0x8
	str	r0, [sp]
	cmp	r1, #0
	beq	.L3901	@cond_branch
	ldr	r1, .L3928+0xc
	str	r1, [sp]
.L3901:
	mov	r2, #0x0
.L3906:
	ldr	r1, .L3928+0x10
	ldr	r0, .L3928+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r1, r2, #0x1
	str	r1, [sp, #0x8]
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L3905	@cond_branch
	mov	r0, #0x64
	mov	r6, r2
	mul	r6, r6, r0
	ldr	r0, [sp]
	add	r4, r0, r6
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L3905	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L3928+0x14
	cmp	r0, r1
	beq	.L3905	@cond_branch
	mov	r5, #0x0
	ldr	r1, .L3928+0x18
	mov	r8, r1
	mov	r9, r6
	mov	r1, sl
	lsl	r0, r1, #0x1
	ldr	r1, [sp, #0x4]
	add	r6, r0, r1
.L3913:
	mov	r7, #0x0
	add	r1, r5, #0
	add	r1, r1, #0xd
	ldr	r0, [sp]
	add	r0, r0, r9
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	bl	IsInvalidForSleepTalkOrAssist
	lsl	r0, r0, #0x18
	add	r1, r5, #0x1
	cmp	r0, #0
	bne	.L3912	@cond_branch
	ldr	r0, .L3928+0x1c
	ldrh	r2, [r0]
	add	r3, r0, #0
	cmp	r2, r8
	beq	.L3927	@cond_branch
	cmp	r4, r2
	beq	.L3916	@cond_branch
	ldr	r5, .L3928+0x18
	add	r2, r3, #0
.L3917:
	add	r2, r2, #0x2
	add	r7, r7, #0x1
	ldrh	r0, [r2]
	cmp	r0, r5
	beq	.L3927	@cond_branch
	cmp	r4, r0
	bne	.L3917	@cond_branch
.L3916:
	lsl	r0, r7, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, r8
	bne	.L3912	@cond_branch
.L3927:
	cmp	r4, #0
	beq	.L3912	@cond_branch
	strh	r4, [r6]
	add	r6, r6, #0x2
	mov	r0, #0x1
	add	sl, sl, r0
.L3912:
	add	r5, r1, #0
	cmp	r5, #0x3
	ble	.L3913	@cond_branch
.L3905:
	ldr	r2, [sp, #0x8]
	cmp	r2, #0x5
	ble	.L3906	@cond_branch
	mov	r1, sl
	cmp	r1, #0
	beq	.L3925	@cond_branch
	ldr	r2, .L3928+0x20
	ldr	r0, [r2]
	ldr	r1, .L3928+0x24
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L3928+0x28
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	mov	r0, sl
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	lsl	r0, r0, #0x1
	ldr	r1, [sp, #0x4]
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3928+0x2c
	strb	r0, [r1]
	ldr	r1, .L3928+0x30
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3926
.L3929:
	.align	2, 0
.L3928:
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
	.word	0x19d
	.word	0xffff
	.word	sMovesForbiddenToCopy
	.word	gHitMarker
	.word	-0x401
	.word	gCalledMove
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3925:
	ldr	r3, .L3930
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3926:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3931:
	.align	2, 0
.L3930:
	.word	gBattlescriptCurrInstr
.Lfe255:
	.size	 Cmd_assistattackselect,.Lfe255-Cmd_assistattackselect
	.align	2, 0
	.type	 Cmd_trysetmagiccoat,function
	.thumb_func
Cmd_trysetmagiccoat:
	push	{lr}
	ldr	r1, .L3935
	ldr	r3, .L3935+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r2, .L3935+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L3935+0xc
	ldrb	r1, [r0]
	ldr	r0, .L3935+0x10
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L3933	@cond_branch
	ldr	r3, .L3935+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3934
.L3936:
	.align	2, 0
.L3935:
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.L3933:
	ldr	r0, .L3937
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x10
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L3937+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3934:
	pop	{r0}
	bx	r0
.L3938:
	.align	2, 0
.L3937:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe256:
	.size	 Cmd_trysetmagiccoat,.Lfe256-Cmd_trysetmagiccoat
	.align	2, 0
	.type	 Cmd_trysetsnatch,function
	.thumb_func
Cmd_trysetsnatch:
	push	{lr}
	ldr	r2, .L3942
	ldr	r3, .L3942+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L3942+0x8
	ldrb	r1, [r0]
	ldr	r0, .L3942+0xc
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L3940	@cond_branch
	ldr	r3, .L3942+0x10
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3941
.L3943:
	.align	2, 0
.L3942:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.L3940:
	ldr	r0, .L3944
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L3944+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3941:
	pop	{r0}
	bx	r0
.L3945:
	.align	2, 0
.L3944:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe257:
	.size	 Cmd_trysetsnatch,.Lfe257-Cmd_trysetsnatch
	.align	2, 0
	.type	 Cmd_trygetintimidatetarget,function
	.thumb_func
Cmd_trygetintimidatetarget:
	push	{r4, r5, r6, lr}
	ldr	r4, .L3957
	ldr	r0, .L3957+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xd8
	ldrb	r0, [r0]
	strb	r0, [r4, #0x17]
	ldrb	r0, [r4, #0x17]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L3957+0x8
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x9
	strb	r0, [r2, #0x1]
	ldr	r3, .L3957+0xc
	ldrb	r1, [r4, #0x17]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r2, #0x2]
	mov	r0, #0xff
	strb	r0, [r2, #0x3]
	ldr	r2, .L3957+0x10
	ldr	r1, .L3957+0x14
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L3956	@cond_branch
	add	r4, r2, #0
	ldr	r6, .L3957+0x18
.L3950:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r5
	beq	.L3949	@cond_branch
	ldr	r0, .L3957+0x1c
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r1, r1, r0
	ldr	r2, .L3957+0x14
	cmp	r1, #0
	beq	.L3948	@cond_branch
.L3949:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L3957+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r1, #0
	ldrb	r1, [r2]
	cmp	r0, r1
	bcc	.L3950	@cond_branch
.L3948:
	ldr	r0, .L3957+0x10
	ldrb	r0, [r0]
	ldrb	r2, [r2]
	cmp	r0, r2
	bcc	.L3954	@cond_branch
.L3956:
	ldr	r3, .L3957+0x20
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3955
.L3958:
	.align	2, 0
.L3957:
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBitTable
	.word	gAbsentBattlerFlags
	.word	gBattlescriptCurrInstr
.L3954:
	ldr	r1, .L3959
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3955:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3960:
	.align	2, 0
.L3959:
	.word	gBattlescriptCurrInstr
.Lfe258:
	.size	 Cmd_trygetintimidatetarget,.Lfe258-Cmd_trygetintimidatetarget
	.align	2, 0
	.type	 Cmd_switchoutabilities,function
	.thumb_func
Cmd_switchoutabilities:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L3966
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L3966+0x4
	strb	r0, [r4]
	ldr	r3, .L3966+0x8
	ldrb	r0, [r4]
	mov	r6, #0x58
	mov	r1, r0
	mul	r1, r1, r6
	add	r0, r1, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1e
	bne	.L3962	@cond_branch
	add	r3, r3, #0x4c
	add	r1, r1, r3
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r2, .L3966+0xc
	ldrb	r1, [r4]
	ldr	r0, .L3966+0x10
	ldr	r0, [r0]
	add	r0, r1, r0
	add	r0, r0, #0x58
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0]
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r3
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L3962:
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3967:
	.align	2, 0
.L3966:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBitTable
	.word	gBattleStruct
.Lfe259:
	.size	 Cmd_switchoutabilities,.Lfe259-Cmd_switchoutabilities
	.align	2, 0
	.type	 Cmd_jumpifhasnohp,function
	.thumb_func
Cmd_jumpifhasnohp:
	push	{r4, lr}
	ldr	r4, .L3971
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L3971+0x4
	strb	r0, [r1]
	ldr	r2, .L3971+0x8
	ldrb	r1, [r1]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L3969	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L3970
.L3972:
	.align	2, 0
.L3971:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
.L3969:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L3970:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe260:
	.size	 Cmd_jumpifhasnohp,.Lfe260-Cmd_jumpifhasnohp
	.align	2, 0
	.type	 Cmd_getsecretpowereffect,function
	.thumb_func
Cmd_getsecretpowereffect:
	push	{lr}
	ldr	r0, .L3986
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bhi	.L3983	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L3986+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L3987:
	.align	2, 0
.L3986:
	.word	gBattleTerrain
	.word	.L3984
	.align	2, 0
	.align	2, 0
.L3984:
	.word	.L3975
	.word	.L3976
	.word	.L3977
	.word	.L3978
	.word	.L3979
	.word	.L3980
	.word	.L3981
	.word	.L3982
.L3975:
	ldr	r1, .L3988
	mov	r0, #0x2
	b	.L3985
.L3989:
	.align	2, 0
.L3988:
	.word	gBattleCommunication
.L3976:
	ldr	r1, .L3990
	mov	r0, #0x1
	b	.L3985
.L3991:
	.align	2, 0
.L3990:
	.word	gBattleCommunication
.L3977:
	ldr	r1, .L3992
	mov	r0, #0x1b
	b	.L3985
.L3993:
	.align	2, 0
.L3992:
	.word	gBattleCommunication
.L3978:
	ldr	r1, .L3994
	mov	r0, #0x17
	b	.L3985
.L3995:
	.align	2, 0
.L3994:
	.word	gBattleCommunication
.L3979:
	ldr	r1, .L3996
	mov	r0, #0x16
	b	.L3985
.L3997:
	.align	2, 0
.L3996:
	.word	gBattleCommunication
.L3980:
	ldr	r1, .L3998
	mov	r0, #0x18
	b	.L3985
.L3999:
	.align	2, 0
.L3998:
	.word	gBattleCommunication
.L3981:
	ldr	r1, .L4000
	mov	r0, #0x7
	b	.L3985
.L4001:
	.align	2, 0
.L4000:
	.word	gBattleCommunication
.L3982:
	ldr	r1, .L4002
	mov	r0, #0x8
	b	.L3985
.L4003:
	.align	2, 0
.L4002:
	.word	gBattleCommunication
.L3983:
	ldr	r1, .L4004
	mov	r0, #0x5
.L3985:
	strb	r0, [r1, #0x3]
	ldr	r1, .L4004+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L4005:
	.align	2, 0
.L4004:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe261:
	.size	 Cmd_getsecretpowereffect,.Lfe261-Cmd_getsecretpowereffect
	.align	2, 0
	.type	 Cmd_pickup,function
	.thumb_func
Cmd_pickup:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r7, #0x0
	ldr	r0, .L4022
	mov	r8, r0
.L4010:
	mov	r0, #0x64
	mov	r4, r7
	mul	r4, r4, r0
	ldr	r0, .L4022+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L4011	@cond_branch
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x17]
	b	.L4012
.L4023:
	.align	2, 0
.L4022:
	.word	gSpeciesInfo
	.word	gPlayerParty
.L4011:
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x16]
.L4012:
	add	r4, r7, #0x1
	cmp	r0, #0x35
	bne	.L4009	@cond_branch
	cmp	r5, #0
	beq	.L4009	@cond_branch
	ldr	r0, .L4024
	cmp	r5, r0
	beq	.L4009	@cond_branch
	cmp	r6, #0
	bne	.L4009	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L4009	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	ldr	r1, .L4024+0x4
	b	.L4021
.L4025:
	.align	2, 0
.L4024:
	.word	0x19d
	.word	sPickupItems
.L4016:
	add	r1, r1, #0x4
	add	r2, r2, #0x1
	cmp	r2, #0xe
	bhi	.L4015	@cond_branch
.L4021:
	ldrb	r0, [r1, #0x2]
	cmp	r0, r3
	ble	.L4016	@cond_branch
.L4015:
	mov	r0, #0x64
	mul	r0, r0, r7
	ldr	r1, .L4026
	add	r0, r0, r1
	lsl	r2, r2, #0x2
	ldr	r1, .L4026+0x4
	add	r2, r2, r1
	mov	r1, #0xc
	bl	SetMonData
.L4009:
	add	r7, r4, #0
	cmp	r7, #0x5
	ble	.L4010	@cond_branch
	ldr	r1, .L4026+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4027:
	.align	2, 0
.L4026:
	.word	gPlayerParty
	.word	sPickupItems
	.word	gBattlescriptCurrInstr
.Lfe262:
	.size	 Cmd_pickup,.Lfe262-Cmd_pickup
	.align	2, 0
	.type	 Cmd_docastformchangeanimation,function
	.thumb_func
Cmd_docastformchangeanimation:
	push	{r4, lr}
	ldr	r4, .L4030
	ldr	r0, .L4030+0x4
	ldrb	r0, [r0, #0x17]
	strb	r0, [r4]
	ldr	r1, .L4030+0x8
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	ldr	r3, .L4030+0xc
	cmp	r0, #0
	beq	.L4029	@cond_branch
	ldr	r0, [r3]
	add	r0, r0, #0x7f
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L4029:
	ldr	r0, [r3]
	add	r0, r0, #0x7f
	ldrb	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitBattleAnimation
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4030+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4031:
	.align	2, 0
.L4030:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattleMons
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe263:
	.size	 Cmd_docastformchangeanimation,.Lfe263-Cmd_docastformchangeanimation
	.align	2, 0
	.type	 Cmd_trycastformdatachange,function
	.thumb_func
Cmd_trycastformdatachange:
	push	{r4, lr}
	ldr	r1, .L4034
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r0, .L4034+0x4
	ldrb	r0, [r0, #0x17]
	bl	CastformDataTypeChange
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L4033	@cond_branch
	ldr	r0, .L4034+0x8
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L4034+0xc
	ldr	r0, [r0]
	add	r0, r0, #0x7f
	sub	r1, r4, #0x1
	strb	r1, [r0]
.L4033:
	pop	{r4}
	pop	{r0}
	bx	r0
.L4035:
	.align	2, 0
.L4034:
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
	.word	BattleScript_CastformChange
	.word	gBattleStruct
.Lfe264:
	.size	 Cmd_trycastformdatachange,.Lfe264-Cmd_trycastformdatachange
	.align	2, 0
	.type	 Cmd_settypebasedhalvers,function
	.thumb_func
Cmd_settypebasedhalvers:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r2, .L4044
	ldr	r0, .L4044+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0xc9
	bne	.L4037	@cond_branch
	ldr	r1, .L4044+0x8
	ldr	r0, .L4044+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L4039	@cond_branch
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r0, .L4044+0x10
	strb	r4, [r0, #0x5]
	b	.L4043
.L4045:
	.align	2, 0
.L4044:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattleCommunication
.L4037:
	ldr	r1, .L4046
	ldr	r0, .L4046+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0xa
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L4039	@cond_branch
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L4046+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	mov	r4, #0x1
.L4039:
	cmp	r4, #0
	beq	.L4041	@cond_branch
.L4043:
	ldr	r1, .L4046+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4042
.L4047:
	.align	2, 0
.L4046:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L4041:
	ldr	r3, .L4048
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4042:
	pop	{r4}
	pop	{r0}
	bx	r0
.L4049:
	.align	2, 0
.L4048:
	.word	gBattlescriptCurrInstr
.Lfe265:
	.size	 Cmd_settypebasedhalvers,.Lfe265-Cmd_settypebasedhalvers
	.align	2, 0
	.type	 Cmd_setweatherballtype,function
	.thumb_func
Cmd_setweatherballtype:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4051	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4051	@cond_branch
	ldr	r2, .L4062
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L4052	@cond_branch
	ldr	r1, .L4062+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0xe]
.L4052:
	ldrh	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4053	@cond_branch
	ldr	r0, .L4062+0x8
	ldr	r1, [r0]
	mov	r0, #0x8b
	b	.L4061
.L4063:
	.align	2, 0
.L4062:
	.word	gBattleWeather
	.word	gBattleScripting
	.word	gBattleStruct
.L4053:
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4055	@cond_branch
	ldr	r0, .L4064
	ldr	r1, [r0]
	mov	r0, #0x85
	b	.L4061
.L4065:
	.align	2, 0
.L4064:
	.word	gBattleStruct
.L4055:
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4057	@cond_branch
	ldr	r0, .L4066
	ldr	r1, [r0]
	mov	r0, #0x8a
	b	.L4061
.L4067:
	.align	2, 0
.L4066:
	.word	gBattleStruct
.L4057:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4059	@cond_branch
	ldr	r0, .L4068
	ldr	r1, [r0]
	mov	r0, #0x8f
	b	.L4061
.L4069:
	.align	2, 0
.L4068:
	.word	gBattleStruct
.L4059:
	ldr	r0, .L4070
	ldr	r1, [r0]
	mov	r0, #0x80
.L4061:
	strb	r0, [r1, #0x13]
.L4051:
	ldr	r1, .L4070+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L4071:
	.align	2, 0
.L4070:
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe266:
	.size	 Cmd_setweatherballtype,.Lfe266-Cmd_setweatherballtype
	.align	2, 0
	.type	 Cmd_tryrecycleitem,function
	.thumb_func
Cmd_tryrecycleitem:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r7, .L4075
	ldr	r0, .L4075+0x4
	ldrb	r0, [r0]
	strb	r0, [r7]
	ldr	r1, .L4075+0x8
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, #0xb8
	ldr	r1, [r1]
	add	r6, r1, r0
	ldrh	r5, [r6]
	cmp	r5, #0
	beq	.L4073	@cond_branch
	ldr	r4, .L4075+0xc
	mov	r3, #0x58
	mov	r0, r2
	mul	r0, r0, r3
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	bne	.L4073	@cond_branch
	ldr	r1, .L4075+0x10
	strh	r5, [r1]
	strh	r0, [r6]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r4
	ldrh	r1, [r1]
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r1, r4, #0
	add	r1, r1, #0x2e
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4075+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4074
.L4076:
	.align	2, 0
.L4075:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.L4073:
	ldr	r3, .L4077
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4074:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4078:
	.align	2, 0
.L4077:
	.word	gBattlescriptCurrInstr
.Lfe267:
	.size	 Cmd_tryrecycleitem,.Lfe267-Cmd_tryrecycleitem
	.align	2, 0
	.type	 Cmd_settypetoterrain,function
	.thumb_func
Cmd_settypetoterrain:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L4082
	mov	r8, r0
	ldr	r7, .L4082+0x4
	ldrb	r0, [r7]
	mov	r6, #0x58
	mul	r0, r0, r6
	mov	r1, r8
	add	r3, r0, r1
	mov	r0, #0x21
	add	r0, r0, r3
	mov	ip, r0
	ldr	r5, .L4082+0x8
	ldr	r4, .L4082+0xc
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r2, [r0]
	mov	r1, ip
	ldrb	r0, [r1]
	add	r1, r2, #0
	cmp	r0, r1
	beq	.L4080	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L4080	@cond_branch
	mov	r0, ip
	strb	r2, [r0]
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	strb	r0, [r1]
	ldr	r1, .L4082+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L4082+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4081
.L4083:
	.align	2, 0
.L4082:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	sTerrainToType
	.word	gBattleTerrain
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L4080:
	ldr	r3, .L4084
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4081:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4085:
	.align	2, 0
.L4084:
	.word	gBattlescriptCurrInstr
.Lfe268:
	.size	 Cmd_settypetoterrain,.Lfe268-Cmd_settypetoterrain
	.align	2, 0
	.type	 Cmd_pursuitdoubles,function
	.thumb_func
Cmd_pursuitdoubles:
	push	{r4, r5, r6, lr}
	ldr	r5, .L4089
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r4, .L4089+0x4
	strb	r0, [r4]
	ldr	r0, .L4089+0x8
	ldr	r0, [r0]
	mov	r6, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L4087	@cond_branch
	ldr	r0, .L4089+0xc
	ldrb	r1, [r0]
	ldr	r2, .L4089+0x10
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L4087	@cond_branch
	ldr	r0, .L4089+0x14
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L4087	@cond_branch
	ldr	r1, .L4089+0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r2, [r0]
	cmp	r2, #0xe4
	bne	.L4087	@cond_branch
	ldr	r0, .L4089+0x1c
	add	r0, r3, r0
	mov	r1, #0xb
	strb	r1, [r0]
	ldr	r0, .L4089+0x20
	strh	r2, [r0]
	ldr	r1, .L4089+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r0, .L4089+0x28
	strb	r6, [r0, #0x18]
	ldrb	r1, [r5]
	add	r0, r0, #0x20
	strb	r1, [r0]
	ldrb	r0, [r4]
	strb	r0, [r5]
	b	.L4088
.L4090:
	.align	2, 0
.L4089:
	.word	gBattlerAttacker
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gChosenActionByBattler
	.word	gChosenMoveByBattler
	.word	gActionsByTurnOrder
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
.L4087:
	ldr	r3, .L4091
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4088:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4092:
	.align	2, 0
.L4091:
	.word	gBattlescriptCurrInstr
.Lfe269:
	.size	 Cmd_pursuitdoubles,.Lfe269-Cmd_pursuitdoubles
	.align	2, 0
	.type	 Cmd_snatchsetbattlers,function
	.thumb_func
Cmd_snatchsetbattlers:
	push	{r4, lr}
	ldr	r1, .L4096
	ldr	r3, .L4096+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r2, .L4096+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r1, #0
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L4094	@cond_branch
	ldr	r1, .L4096+0xc
	ldrb	r0, [r1, #0x17]
	strb	r0, [r2]
	strb	r0, [r3]
	b	.L4095
.L4097:
	.align	2, 0
.L4096:
	.word	gEffectBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleScripting
.L4094:
	ldr	r1, .L4098
	ldrb	r0, [r1, #0x17]
	strb	r0, [r2]
.L4095:
	ldrb	r0, [r4]
	strb	r0, [r1, #0x17]
	ldr	r1, .L4098+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4099:
	.align	2, 0
.L4098:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe270:
	.size	 Cmd_snatchsetbattlers,.Lfe270-Cmd_snatchsetbattlers
	.align	2, 0
	.type	 Cmd_removelightscreenreflect,function
	.thumb_func
Cmd_removelightscreenreflect:
	push	{r4, lr}
	ldr	r0, .L4104
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L4104+0x4
	lsl	r3, r0, #0x1
	add	r0, r3, r0
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L4102	@cond_branch
	ldrb	r1, [r4, #0x2]
	cmp	r1, #0
	beq	.L4101	@cond_branch
.L4102:
	ldr	r2, .L4104+0x8
	add	r2, r3, r2
	ldrh	r1, [r2]
	ldr	r0, .L4104+0xc
	and	r0, r0, r1
	mov	r3, #0x0
	ldr	r1, .L4104+0x10
	and	r0, r0, r1
	strh	r0, [r2]
	strb	r3, [r4]
	strb	r3, [r4, #0x2]
	ldr	r1, .L4104+0x14
	mov	r0, #0x1
	strb	r0, [r1, #0x18]
	strb	r0, [r1, #0x19]
	b	.L4103
.L4105:
	.align	2, 0
.L4104:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gSideStatuses
	.word	0xfffe
	.word	0xfffd
	.word	gBattleScripting
.L4101:
	ldr	r0, .L4106
	strb	r1, [r0, #0x18]
	strb	r1, [r0, #0x19]
.L4103:
	ldr	r1, .L4106+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4107:
	.align	2, 0
.L4106:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe271:
	.size	 Cmd_removelightscreenreflect,.Lfe271-Cmd_removelightscreenreflect
	.align	2, 0
	.type	 Cmd_handleballthrow,function
	.thumb_func
Cmd_handleballthrow:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	ldr	r0, .L4166
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB40706
	b	.L4108	@long jump
.LCB40706:
	ldr	r5, .L4166+0x4
	ldr	r0, .L4166+0x8
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r6, .L4166+0xc
	mov	r1, #0x1
	eor	r0, r0, r1
	strb	r0, [r6]
	ldr	r0, .L4166+0x10
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4110	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x6
	bl	BtlController_EmitBallThrowAnim
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4166+0x14
	ldr	r0, .L4166+0x18
	b	.L4162
.L4167:
	.align	2, 0
.L4166:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	BattleScript_GhostBallDodge
.L4110:
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4112	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x5
	bl	BtlController_EmitBallThrowAnim
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4168
	ldr	r0, .L4168+0x4
	b	.L4162
.L4169:
	.align	2, 0
.L4168:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TrainerBallBlock
.L4112:
	mov	r0, #0x81
	lsl	r0, r0, #0x9
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L4114	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x4
	bl	BtlController_EmitBallThrowAnim
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4170
	ldr	r0, .L4170+0x4
	b	.L4162
.L4171:
	.align	2, 0
.L4170:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_OldMan_Pokedude_CaughtMessage
.L4114:
	ldr	r0, .L4172
	ldrh	r0, [r0]
	cmp	r0, #0x5
	bne	.L4116	@cond_branch
	ldr	r0, .L4172+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x7c
	ldrb	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r0, r1, #0x8
	sub	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L4117
.L4173:
	.align	2, 0
.L4172:
	.word	gLastUsedItem
	.word	gBattleStruct
.L4116:
	ldr	r3, .L4174
	ldr	r2, .L4174+0x4
	ldrb	r1, [r6]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r5, [r0, #0x8]
.L4117:
	ldr	r2, .L4174+0x8
	ldrh	r0, [r2]
	cmp	r0, #0x5
	bhi	.LCB40842
	b	.L4118	@long jump
.LCB40842:
	sub	r0, r0, #0x6
	cmp	r0, #0x6
	bls	.LCB40847
	b	.L4140	@long jump
.LCB40847:
	lsl	r0, r0, #0x2
	ldr	r1, .L4174+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L4175:
	.align	2, 0
.L4174:
	.word	gSpeciesInfo
	.word	gBattleMons
	.word	gLastUsedItem
	.word	.L4138
	.align	2, 0
	.align	2, 0
.L4138:
	.word	.L4120
	.word	.L4124
	.word	.L4127
	.word	.L4131
	.word	.L4134
	.word	.L4164
	.word	.L4164
.L4120:
	ldr	r2, .L4176
	ldr	r0, .L4176+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	cmp	r1, #0xb
	beq	.L4163	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xb
	beq	.L4163	@cond_branch
	cmp	r1, #0x6
	beq	.L4163	@cond_branch
	cmp	r0, #0x6
	beq	.L4163	@cond_branch
	b	.L4164
.L4177:
	.align	2, 0
.L4176:
	.word	gBattleMons
	.word	gBattlerTarget
.L4124:
	bl	GetCurrentMapType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0xa
	cmp	r0, #0x5
	bne	.L4140	@cond_branch
	mov	r4, #0x23
	b	.L4140
.L4127:
	ldr	r2, .L4178
	ldr	r0, .L4178+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	cmp	r1, #0x27
	bhi	.L4164	@cond_branch
	mov	r0, #0x28
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x9
	bhi	.L4140	@cond_branch
.L4164:
	mov	r4, #0xa
	b	.L4140
.L4179:
	.align	2, 0
.L4178:
	.word	gBattleMons
	.word	gBattlerTarget
.L4131:
	ldr	r2, .L4180
	ldr	r0, .L4180+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	mov	r4, #0xa
	cmp	r0, #0
	beq	.L4140	@cond_branch
.L4163:
	mov	r4, #0x1e
	b	.L4140
.L4181:
	.align	2, 0
.L4180:
	.word	gBattleMons
	.word	gBattlerTarget
.L4134:
	ldr	r0, .L4182
	ldrb	r0, [r0, #0x13]
	add	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x28
	bls	.L4140	@cond_branch
	mov	r4, #0x28
	b	.L4140
.L4183:
	.align	2, 0
.L4182:
	.word	gBattleResults
.L4118:
	ldr	r1, .L4184
	ldrh	r0, [r2]
	sub	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0]
.L4140:
	mov	r0, r5
	mul	r0, r0, r4
	mov	r1, #0xa
	bl	__divsi3
	ldr	r5, .L4184+0x4
	ldr	r1, .L4184+0x8
	ldrb	r2, [r1]
	mov	r1, #0x58
	mov	r4, r2
	mul	r4, r4, r1
	add	r3, r4, r5
	ldrh	r2, [r3, #0x2c]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	ldrh	r2, [r3, #0x28]
	lsl	r2, r2, #0x1
	sub	r2, r1, r2
	mul	r0, r0, r2
	bl	__divsi3
	add	r6, r0, #0
	add	r5, r5, #0x4c
	add	r4, r4, r5
	ldr	r4, [r4]
	mov	r0, #0x27
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L4141	@cond_branch
	lsl	r6, r6, #0x1
.L4141:
	mov	r0, #0xd8
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L4142	@cond_branch
	lsl	r0, r6, #0x4
	sub	r0, r0, r6
	mov	r1, #0xa
	bl	__udivsi3
	add	r6, r0, #0
.L4142:
	ldr	r1, .L4184+0xc
	ldrh	r0, [r1]
	cmp	r0, #0x5
	beq	.L4143	@cond_branch
	cmp	r0, #0x1
	bne	.L4144	@cond_branch
	ldr	r0, .L4184+0x10
	ldrb	r1, [r0, #0x5]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	b	.L4143
.L4185:
	.align	2, 0
.L4184:
	.word	sBallCatchBonuses
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastUsedItem
	.word	gBattleResults
.L4144:
	ldr	r0, .L4186
	ldrh	r1, [r1]
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x34
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L4143	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L4143:
	cmp	r6, #0xfe
	bls	.L4147	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x4
	bl	BtlController_EmitBallThrowAnim
	ldr	r0, .L4186+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4186+0x8
	ldr	r0, .L4186+0xc
	str	r0, [r1]
	ldr	r1, .L4186+0x10
	ldr	r0, .L4186+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L4186+0x18
	add	r0, r0, r1
	ldr	r2, .L4186+0x1c
	mov	r1, #0x26
	bl	SetMonData
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L4165	@cond_branch
	b	.L4159
.L4187:
	.align	2, 0
.L4186:
	.word	gBattleResults
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SuccessBallThrow
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gLastUsedItem
.L4147:
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	add	r1, r6, #0
	bl	__udivsi3
	bl	Sqrt
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	Sqrt
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L4188
	add	r1, r6, #0
	bl	__udivsi3
	add	r6, r0, #0
	mov	r4, #0x0
	b	.L4151
.L4189:
	.align	2, 0
.L4188:
	.word	0xffff0
.L4153:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L4151:
	cmp	r4, #0x3
	bhi	.L4152	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcc	.L4153	@cond_branch
.L4152:
	ldr	r5, .L4190
	ldrh	r0, [r5]
	cmp	r0, #0x1
	bne	.L4157	@cond_branch
	mov	r4, #0x4
.L4157:
	mov	r0, #0x0
	add	r1, r4, #0
	bl	BtlController_EmitBallThrowAnim
	ldr	r0, .L4190+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	cmp	r4, #0x4
	bne	.L4158	@cond_branch
	ldr	r1, .L4190+0x8
	ldr	r0, .L4190+0xc
	str	r0, [r1]
	ldr	r1, .L4190+0x10
	ldr	r0, .L4190+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L4190+0x18
	add	r0, r0, r1
	mov	r1, #0x26
	add	r2, r5, #0
	bl	SetMonData
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L4159	@cond_branch
.L4165:
	ldr	r1, .L4190+0x1c
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L4108
.L4191:
	.align	2, 0
.L4190:
	.word	gLastUsedItem
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SuccessBallThrow
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gBattleCommunication
.L4159:
	ldr	r1, .L4192
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L4108
.L4193:
	.align	2, 0
.L4192:
	.word	gBattleCommunication
.L4158:
	ldr	r0, .L4194
	strb	r4, [r0, #0x5]
	ldr	r1, .L4194+0x4
	ldr	r0, .L4194+0x8
.L4162:
	str	r0, [r1]
.L4108:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4195:
	.align	2, 0
.L4194:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ShakeBallThrow
.Lfe272:
	.size	 Cmd_handleballthrow,.Lfe272-Cmd_handleballthrow
	.align	2, 0
	.type	 Cmd_givecaughtmon,function
	.thumb_func
Cmd_givecaughtmon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L4201
	mov	r9, r0
	ldr	r5, .L4201+0x4
	ldrb	r0, [r5]
	mov	r6, #0x1
	eor	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r1, .L4201+0x8
	mov	r8, r1
	add	r0, r0, r8
	bl	GiveMonToPlayer
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4197	@cond_branch
	bl	ShouldShowBoxWasFullMessage
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L4198	@cond_branch
	ldr	r0, .L4201+0xc
	strb	r1, [r0, #0x5]
	ldr	r4, .L4201+0x10
	ldr	r0, .L4201+0x14
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldrb	r0, [r5]
	eor	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldr	r2, .L4201+0x18
	mov	r1, #0x2
	bl	GetMonData
	b	.L4199
.L4202:
	.align	2, 0
.L4201:
	.word	gBattlerPartyIndexes
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gBattleCommunication
	.word	gStringVar1
	.word	0x4037
	.word	gStringVar2
.L4198:
	ldr	r4, .L4203
	ldr	r0, .L4203+0x4
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldrb	r0, [r5]
	eor	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldr	r2, .L4203+0x8
	mov	r1, #0x2
	bl	GetMonData
	ldr	r4, .L4203+0xc
	bl	GetPCBoxToSendMon
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldr	r1, .L4203+0x10
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
.L4199:
	ldr	r0, .L4203+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4197	@cond_branch
	ldr	r1, .L4203+0x10
	ldrb	r0, [r1, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x5]
.L4197:
	ldr	r2, .L4203+0x18
	ldr	r3, .L4203+0x1c
	ldr	r0, .L4203+0x20
	ldrb	r0, [r0]
	mov	r1, #0x1
	eor	r1, r1, r0
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r2, #0x28]
	ldr	r0, .L4203+0x24
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L4203+0x28
	add	r0, r0, r1
	add	r2, r2, #0x2a
	mov	r1, #0x2
	bl	GetMonData
	ldr	r1, .L4203+0x2c
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4204:
	.align	2, 0
.L4203:
	.word	gStringVar1
	.word	0x4037
	.word	gStringVar2
	.word	gStringVar3
	.word	gBattleCommunication
	.word	0x835
	.word	gBattleResults
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlescriptCurrInstr
.Lfe273:
	.size	 Cmd_givecaughtmon,.Lfe273-Cmd_givecaughtmon
	.align	2, 0
	.type	 Cmd_trysetcaughtmondexflags,function
	.thumb_func
Cmd_trysetcaughtmondexflags:
	push	{r4, r5, lr}
	ldr	r4, .L4208
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonData
	add	r4, r0, #0
	add	r0, r5, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4206	@cond_branch
	ldr	r3, .L4208+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4207
.L4209:
	.align	2, 0
.L4208:
	.word	gEnemyParty
	.word	gBattlescriptCurrInstr
.L4206:
	add	r0, r5, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	add	r2, r4, #0
	bl	HandleSetPokedexFlag
	ldr	r1, .L4210
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L4207:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4211:
	.align	2, 0
.L4210:
	.word	gBattlescriptCurrInstr
.Lfe274:
	.size	 Cmd_trysetcaughtmondexflags,.Lfe274-Cmd_trysetcaughtmondexflags
	.align	2, 0
	.type	 Cmd_displaydexinfo,function
	.thumb_func
Cmd_displaydexinfo:
	push	{r4, r5, lr}
	add	sp, sp, #-0x18
	ldr	r0, .L4228
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L4228+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bls	.LCB41569
	b	.L4213	@long jump
.LCB41569:
	lsl	r0, r0, #0x2
	ldr	r1, .L4228+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L4229:
	.align	2, 0
.L4228:
	.word	gEnemyParty
	.word	gBattleCommunication
	.word	.L4224
	.align	2, 0
	.align	2, 0
.L4224:
	.word	.L4214
	.word	.L4215
	.word	.L4217
	.word	.L4219
	.word	.L4220
	.word	.L4222
.L4214:
	mov	r0, #0x1
	neg	r0, r0
	ldr	r1, .L4230
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L4226
.L4231:
	.align	2, 0
.L4230:
	.word	0x7fff
.L4215:
	ldr	r0, .L4232
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB41615
	b	.L4213	@long jump
.LCB41615:
	bl	FreeAllWindowBuffers
	add	r0, r5, #0
	bl	DexScreen_RegisterMonToPokedex
	ldr	r1, .L4232+0x4
	strb	r0, [r1, #0x1]
	b	.L4227
.L4233:
	.align	2, 0
.L4232:
	.word	gPaletteFade
	.word	gBattleCommunication
.L4217:
	ldr	r0, .L4234
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB41640
	b	.L4213	@long jump
.LCB41640:
	ldr	r0, .L4234+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L4234+0x8
	cmp	r1, r0
	bne	.L4213	@cond_branch
	ldr	r2, .L4234+0xc
	ldr	r4, .L4234+0x10
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L4213	@cond_branch
	str	r0, [sp, #0x10]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L4234+0x14
	add	r0, sp, #0x10
	bl	CpuSet
	ldr	r0, .L4234+0x18
	bl	SetVBlankCallback
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L4213
.L4235:
	.align	2, 0
.L4234:
	.word	gPaletteFade
	.word	gMain
	.word	BattleMainCB2
	.word	gTasks
	.word	gBattleCommunication
	.word	0x5006000
	.word	VBlankCB_Battle
.L4219:
	bl	InitBattleBgsVideo
	bl	LoadBattleTextboxAndBackground
	ldr	r1, .L4236
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	b	.L4226
.L4237:
	.align	2, 0
.L4236:
	.word	gBattle_BG3_X
.L4220:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L4213	@cond_branch
	ldr	r0, .L4238
	add	r1, r0, #0
	add	r1, r1, #0xac
	ldr	r1, [r1]
	add	r0, r0, #0xa0
	ldr	r2, [r0]
	mov	r0, #0x78
	str	r0, [sp]
	mov	r0, #0x40
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	ldr	r0, .L4238+0x4
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	mov	r3, #0x1
	bl	CreateMonPicSprite_HandleDeoxys
	str	r4, [sp, #0x14]
	add	r0, sp, #0x14
	ldr	r1, .L4238+0x8
	ldr	r2, .L4238+0xc
	bl	CpuSet
	ldr	r0, .L4238+0x10
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
.L4226:
	ldr	r1, .L4238+0x14
.L4227:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L4213
.L4239:
	.align	2, 0
.L4238:
	.word	gBattleMons
	.word	0xffff
	.word	gPlttBufferFaded
	.word	0x5000080
	.word	0x1ffff
	.word	gBattleCommunication
.L4222:
	ldr	r0, .L4240
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4213	@cond_branch
	ldr	r1, .L4240+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L4213:
	add	sp, sp, #0x18
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4241:
	.align	2, 0
.L4240:
	.word	gPaletteFade
	.word	gBattlescriptCurrInstr
.Lfe275:
	.size	 Cmd_displaydexinfo,.Lfe275-Cmd_displaydexinfo
	.align	2, 0
	.globl	HandleBattleWindow
	.type	 HandleBattleWindow,function
	.thumb_func
HandleBattleWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r4, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x10]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x1c]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x14]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	mov	r1, #0x0
	add	r0, sp, #0xc
	strh	r1, [r0]
	ldr	r6, [sp, #0x10]
	cmp	r6, r3
	ble	.LCB41830
	b	.L4244	@long jump
.LCB41830:
.L4246:
	mov	r4, r8
	add	r0, r6, #0x1
	str	r0, [sp, #0x18]
	ldr	r2, [sp, #0x1c]
	cmp	r4, r2
	bgt	.L4245	@cond_branch
	add	r5, sp, #0xc
	lsl	r7, r6, #0x18
	mov	r9, r7
.L4250:
	ldr	r0, [sp, #0x10]
	cmp	r6, r0
	bne	.L4251	@cond_branch
	cmp	r4, r8
	bne	.L4252	@cond_branch
	ldr	r0, .L4273
	b	.L4272
.L4274:
	.align	2, 0
.L4273:
	.word	0x1022
.L4252:
	ldr	r2, [sp, #0x1c]
	cmp	r4, r2
	bne	.L4254	@cond_branch
	ldr	r0, .L4275
	b	.L4272
.L4276:
	.align	2, 0
.L4275:
	.word	0x1024
.L4254:
	ldr	r0, .L4277
	b	.L4272
.L4278:
	.align	2, 0
.L4277:
	.word	0x1023
.L4251:
	ldr	r7, [sp, #0x14]
	cmp	r6, r7
	bne	.L4257	@cond_branch
	cmp	r4, r8
	bne	.L4258	@cond_branch
	ldr	r0, .L4279
	b	.L4272
.L4280:
	.align	2, 0
.L4279:
	.word	0x1028
.L4258:
	ldr	r0, [sp, #0x1c]
	cmp	r4, r0
	bne	.L4260	@cond_branch
	ldr	r0, .L4281
	b	.L4272
.L4282:
	.align	2, 0
.L4281:
	.word	0x102a
.L4260:
	ldr	r0, .L4283
	b	.L4272
.L4284:
	.align	2, 0
.L4283:
	.word	0x1029
.L4257:
	cmp	r4, r8
	bne	.L4263	@cond_branch
	ldr	r0, .L4285
	b	.L4272
.L4286:
	.align	2, 0
.L4285:
	.word	0x1025
.L4263:
	ldr	r2, [sp, #0x1c]
	cmp	r4, r2
	bne	.L4265	@cond_branch
	ldr	r0, .L4287
	b	.L4272
.L4288:
	.align	2, 0
.L4287:
	.word	0x1027
.L4265:
	ldr	r0, .L4289
.L4272:
	strh	r0, [r5]
	mov	r1, #0x1
	mov	r0, sl
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4267	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5]
.L4267:
	mov	r0, #0x80
	mov	r7, sl
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L4268	@cond_branch
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	add	r1, sp, #0xc
	mov	r7, r9
	lsr	r3, r7, #0x18
	bl	CopyToBgTilemapBufferRect_ChangePalette
	b	.L4249
.L4290:
	.align	2, 0
.L4289:
	.word	0x1026
.L4268:
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	mov	r7, r9
	lsr	r3, r7, #0x18
	bl	CopyToBgTilemapBufferRect_ChangePalette
.L4249:
	add	r4, r4, #0x1
	ldr	r0, [sp, #0x1c]
	cmp	r4, r0
	ble	.L4250	@cond_branch
.L4245:
	ldr	r6, [sp, #0x18]
	ldr	r2, [sp, #0x14]
	cmp	r6, r2
	bgt	.LCB42020
	b	.L4246	@long jump
.LCB42020:
.L4244:
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe276:
	.size	 HandleBattleWindow,.Lfe276-HandleBattleWindow
	.align	2, 0
	.globl	BattleCreateYesNoCursorAt
	.type	 BattleCreateYesNoCursorAt,function
	.thumb_func
BattleCreateYesNoCursorAt:
	push	{lr}
	add	sp, sp, #-0x10
	add	r0, sp, #0xc
	mov	r2, #0x1
	strh	r2, [r0]
	mov	r1, #0x2
	strh	r1, [r0, #0x2]
	ldr	r0, .L4292
	ldrb	r3, [r0, #0x1]
	lsl	r3, r3, #0x19
	mov	r0, #0x90
	lsl	r0, r0, #0x14
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	str	r2, [sp]
	str	r1, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	mov	r2, #0x18
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L4293:
	.align	2, 0
.L4292:
	.word	gBattleCommunication
.Lfe277:
	.size	 BattleCreateYesNoCursorAt,.Lfe277-BattleCreateYesNoCursorAt
	.align	2, 0
	.globl	BattleDestroyYesNoCursorAt
	.type	 BattleDestroyYesNoCursorAt,function
	.thumb_func
BattleDestroyYesNoCursorAt:
	push	{lr}
	add	sp, sp, #-0x10
	add	r0, sp, #0xc
	mov	r1, #0x20
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	ldr	r0, .L4295
	ldrb	r3, [r0, #0x1]
	lsl	r3, r3, #0x19
	mov	r0, #0x90
	lsl	r0, r0, #0x14
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	mov	r2, #0x18
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L4296:
	.align	2, 0
.L4295:
	.word	gBattleCommunication
.Lfe278:
	.size	 BattleDestroyYesNoCursorAt,.Lfe278-BattleDestroyYesNoCursorAt
	.align	2, 0
	.type	 Cmd_trygivecaughtmonnick,function
	.thumb_func
Cmd_trygivecaughtmonnick:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L4318
	ldrb	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0x4
	bls	.LCB42131
	b	.L4298	@long jump
.LCB42131:
	lsl	r0, r1, #0x2
	ldr	r1, .L4318+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L4319:
	.align	2, 0
.L4318:
	.word	gBattleCommunication
	.word	.L4315
	.align	2, 0
	.align	2, 0
.L4315:
	.word	.L4299
	.word	.L4300
	.word	.L4308
	.word	.L4310
	.word	.L4312
.L4299:
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L4320
	mov	r1, #0xe
	bl	BattlePutTextOnWindow
	ldr	r1, .L4320+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	bl	BattleCreateYesNoCursorAt
	b	.L4298
.L4321:
	.align	2, 0
.L4320:
	.word	gText_BattleYesNoChoice
	.word	gBattleCommunication
.L4300:
	ldr	r0, .L4322
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4301	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L4301	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L4301:
	ldr	r0, .L4322
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4302	@cond_branch
	ldr	r4, .L4322+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L4302	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L4302:
	ldr	r0, .L4322
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4303	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L4322+0x4
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L4317	@cond_branch
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	b	.L4298
.L4323:
	.align	2, 0
.L4322:
	.word	gMain
	.word	gBattleCommunication
.L4303:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB42275
	b	.L4298	@long jump
.LCB42275:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L4324
.L4317:
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L4298
.L4325:
	.align	2, 0
.L4324:
	.word	gBattleCommunication
.L4308:
	ldr	r0, .L4326
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB42299
	b	.L4298	@long jump
.LCB42299:
	ldr	r7, .L4326+0x4
	ldr	r0, .L4326+0x8
	mov	sl, r0
	ldrb	r0, [r0]
	mov	r4, #0x1
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, #0x64
	mov	r9, r1
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	ldr	r1, .L4326+0xc
	mov	r8, r1
	add	r0, r0, r8
	ldr	r1, .L4326+0x10
	ldr	r2, [r1]
	add	r2, r2, #0x6d
	mov	r1, #0x2
	bl	GetMonData
	bl	FreeAllWindowBuffers
	mov	r2, sl
	ldrb	r0, [r2]
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	mov	r1, #0xb
	bl	GetMonData
	add	r6, r0, #0
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r2, sl
	ldrb	r0, [r2]
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	bl	GetMonGender
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r2, sl
	ldrb	r0, [r2]
	eor	r4, r4, r0
	lsl	r4, r4, #0x1
	add	r4, r4, r7
	ldrh	r0, [r4]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonData
	ldr	r2, .L4326+0x10
	ldr	r1, [r2]
	add	r1, r1, #0x6d
	str	r0, [sp]
	ldr	r0, .L4326+0x14
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	add	r2, r6, #0
	add	r3, r5, #0
	bl	DoNamingScreen
	ldr	r1, .L4326+0x18
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L4298
.L4327:
	.align	2, 0
.L4326:
	.word	gPaletteFade
	.word	gBattlerPartyIndexes
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gBattleStruct
	.word	BattleMainCB2
	.word	gBattleCommunication
.L4310:
	ldr	r0, .L4328
	ldr	r1, [r0, #0x4]
	ldr	r0, .L4328+0x4
	cmp	r1, r0
	bne	.L4298	@cond_branch
	ldr	r0, .L4328+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4298	@cond_branch
	ldr	r2, .L4328+0xc
	ldr	r0, .L4328+0x10
	ldrb	r1, [r0]
	mov	r0, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L4328+0x14
	add	r0, r0, r1
	ldr	r1, .L4328+0x18
	ldr	r2, [r1]
	add	r2, r2, #0x6d
	mov	r1, #0x2
	bl	SetMonData
	b	.L4313
.L4329:
	.align	2, 0
.L4328:
	.word	gMain
	.word	BattleMainCB2
	.word	gPaletteFade
	.word	gBattlerPartyIndexes
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gBattleStruct
.L4312:
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L4313	@cond_branch
	ldr	r1, .L4330
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4298
.L4331:
	.align	2, 0
.L4330:
	.word	gBattlescriptCurrInstr
.L4313:
	ldr	r3, .L4332
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4298:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4333:
	.align	2, 0
.L4332:
	.word	gBattlescriptCurrInstr
.Lfe279:
	.size	 Cmd_trygivecaughtmonnick,.Lfe279-Cmd_trygivecaughtmonnick
	.align	2, 0
	.type	 Cmd_subattackerhpbydmg,function
	.thumb_func
Cmd_subattackerhpbydmg:
	ldr	r2, .L4335
	ldr	r0, .L4335+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldr	r0, .L4335+0x8
	ldr	r2, [r0]
	ldrh	r0, [r1, #0x28]
	sub	r0, r0, r2
	strh	r0, [r1, #0x28]
	ldr	r1, .L4335+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L4336:
	.align	2, 0
.L4335:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe280:
	.size	 Cmd_subattackerhpbydmg,.Lfe280-Cmd_subattackerhpbydmg
	.align	2, 0
	.type	 Cmd_removeattackerstatus1,function
	.thumb_func
Cmd_removeattackerstatus1:
	ldr	r1, .L4338
	ldr	r0, .L4338+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r1, .L4338+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L4339:
	.align	2, 0
.L4338:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe281:
	.size	 Cmd_removeattackerstatus1,.Lfe281-Cmd_removeattackerstatus1
	.align	2, 0
	.type	 Cmd_finishaction,function
	.thumb_func
Cmd_finishaction:
	ldr	r1, .L4341
	mov	r0, #0xc
	strb	r0, [r1]
	bx	lr
.L4342:
	.align	2, 0
.L4341:
	.word	gCurrentActionFuncId
.Lfe282:
	.size	 Cmd_finishaction,.Lfe282-Cmd_finishaction
	.align	2, 0
	.type	 Cmd_finishturn,function
	.thumb_func
Cmd_finishturn:
	ldr	r1, .L4344
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r1, .L4344+0x4
	ldr	r0, .L4344+0x8
	ldrb	r0, [r0]
	strb	r0, [r1]
	bx	lr
.L4345:
	.align	2, 0
.L4344:
	.word	gCurrentActionFuncId
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
.Lfe283:
	.size	 Cmd_finishturn,.Lfe283-Cmd_finishturn
.text
	.align	2, 0 @ Don't pad with nop

