@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sTransitionData,object
	.size	 sTransitionData,4
sTransitionData:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sBigPokeball_Gfx,object
sBigPokeball_Gfx:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x10000000
	.word	-0x100000
	.word	0x19fff000
	.word	0x0
	.word	0x0
	.word	-0x10000000
	.word	-0x10000
	.word	0x19fffff0
	.word	0x11119fff
	.word	0x1111119f
	.word	0x11111111
	.word	0x0
	.word	-0x1000
	.word	-0x60000001
	.word	0x111111ff
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	-0x10
	.word	-0x1
	.word	0x11111119
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x10000000
	.word	0x0
	.word	-0x10000000
	.word	-0x1000000
	.word	0x1fff0000
	.word	0x119ff000
	.word	0x1111fff0
	.word	0x111119ff
	.word	0x1111119f
	.word	0x1119fff0
	.word	0x111111ff
	.word	0x11111119
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x10000000
	.word	-0x1000000
	.word	0x1ff00000
	.word	0x11ff0000
	.word	0x1119f000
	.word	0x11119f00
	.word	0x11111ff0
	.word	0x111111ff
	.word	0x1111111f
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x1000000
	.word	0x1ff00000
	.word	0x19f00000
	.word	0x11ff0000
	.word	0x111ff000
	.word	0x1119f000
	.word	0x1111ff00
	.word	0x11111ff0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x1000000
	.word	-0x61000000
	.word	0x1ff00000
	.word	0x111119f0
	.word	0x111111ff
	.word	0x1111111f
	.word	0x1111111f
	.word	0x11111119
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x1ff00000
	.word	0x11ff0000
	.word	0x11ff0000
	.word	0x119f0000
	.word	0x111ff000
	.word	0x111ff000
	.word	0x1119f000
	.word	0x1111ff00
	.word	0x1111ff00
	.word	0x1111ff00
	.word	0x11111f00
	.word	0x11111ff0
	.word	0x11111ff0
	.word	0x11111ff0
	.word	0x111119f0
	.word	0x111119f0
	.word	0x111111f0
	.word	0x111111ff
	.word	0x111111ff
	.word	0x1111119f
	.word	0x1111119f
	.word	0x1111119f
	.word	-0x1
	.word	-0x1000
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	-0x1
	.word	-0x1
	.word	-0x1000
	.word	-0x1
	.word	0x4444448f
	.word	0x4444448f
	.word	0x4444448f
	.word	0x444444ff
	.word	0x444444ff
	.word	0x444444f0
	.word	-0x1
	.word	-0x1
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444af0
	.word	0x44444af0
	.word	0x44444ff0
	.word	0x44444ff0
	.word	0x44444ff0
	.word	0x4444af00
	.word	0x4444ff00
	.word	0x4444ff00
	.word	0x4444ff00
	.word	0x444af000
	.word	0x444ff000
	.word	0x444ff000
	.word	0x44af0000
	.word	0x44ff0000
	.word	0x4aff0000
	.word	0x4ff00000
	.word	0x4ff00000
	.word	-0x51000000
	.word	-0x1000000
	.word	-0x10000000
	.word	-0x10000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x4444444a
	.word	0x4444444f
	.word	0x444444af
	.word	0x444444ff
	.word	0x44444af0
	.word	0x44444ff0
	.word	0x4444ff00
	.word	0x444af000
	.word	0x444ff000
	.word	0x44ff0000
	.word	0x4af00000
	.word	0x4ff00000
	.word	-0x1000000
	.word	-0x10000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x4444444f
	.word	0x444444ff
	.word	0x44444ff0
	.word	0x4444af00
	.word	0x444af000
	.word	0x44ff0000
	.word	0x4ff00000
	.word	-0x1000000
	.word	-0x10000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x4444444f
	.word	0x44444aff
	.word	0x4444fff0
	.word	0x44aff000
	.word	0x4fff0000
	.word	-0x1000000
	.word	-0x10000000
	.word	0x0
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x4444444a
	.word	0x444444ff
	.word	0x444afff0
	.word	0x4afff000
	.word	-0x100000
	.word	-0x10000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x44444444
	.word	0x4444444f
	.word	0x4444afff
	.word	0x4afffff0
	.word	-0x10000
	.word	-0x10000000
	.word	0x0
	.word	0x0
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x4444aaff
	.word	-0x1
	.word	-0x1000
	.word	0x0
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444aaa
	.word	-0x1
	.word	-0x10
	.word	0x11111111
	.word	0x11111111
	.word	-0x6eeeeeef
	.word	-0x6eeeeef
	.word	-0x6eeeef
	.word	-0x6eeef
	.word	-0x6eef
	.word	0x4ffff111
	.word	-0x6eeef
	.word	-0x6f
	.word	-0x1
	.word	0x557fffff
	.word	0x44445fff
	.word	0x444444af
	.word	0x44444444
	.word	0x44444444
	.word	0x44ffff11
	.word	0x44afff91
	.word	0x4447fff1
	.word	0x4444fff1
	.word	0x4444fff9
	.word	0x44447fff
	.word	0x4444afff
	.word	0x44445fff
	.word	-0xabbbc
	.word	0x44aff444
	.word	0x4444af44
	.word	0x44444af4
	.word	0x444444f5
	.word	0x444444af
	.word	0x4444444f
	.word	0x4444444f
	.word	0x44444fff
	.word	0x44444fff
	.word	0x4444afff
	.word	0x44447ff7
	.word	0x4444fffa
	.word	0x4447fff4
	.word	0x444fffa4
	.word	0x44ffff44
	.word	0x4444444f
	.word	0x4444444f
	.word	0x444444af
	.word	0x444444f5
	.word	0x44444af4
	.word	0x4444af44
	.word	0x44aff444
	.word	-0xabbbc
	.word	0x4ffffa44
	.word	-0x8bbc
	.word	-0x8bbbc
	.word	-0x8bbbbc
	.word	-0x8bbbbbc
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x4444444f
	.word	0x444447ff
	.word	0x557fffff
	.word	-0x1
	.word	-0x8c
	.word	-0x85bbc
	.size	 sBigPokeball_Gfx,1408
	.align	2, 0
	.type	 sSlidingPokeball_Tilemap,object
sSlidingPokeball_Tilemap:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.size	 sSlidingPokeball_Tilemap,64
	.type	 sSlidingPokeball_Gfx,object
sSlidingPokeball_Gfx:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1f
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x1f
	.byte	0x11
	.byte	0x0
	.byte	0xf0
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x19
	.byte	0x11
	.byte	0xff
	.byte	0x19
	.byte	0x11
	.byte	0x11
	.byte	0x19
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xff
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x91
	.byte	0xff
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0x91
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x91
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0xf1
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x1f
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x19
	.byte	0x11
	.byte	0x11
	.byte	0xf0
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf0
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x90
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x1f
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x1f
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf0
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0xf9
	.byte	0xff
	.byte	0x11
	.byte	0x91
	.byte	0xff
	.byte	0x46
	.byte	0x11
	.byte	0xf1
	.byte	0x6f
	.byte	0xfa
	.byte	0xff
	.byte	0xff
	.byte	0x4f
	.byte	0x4f
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xff
	.byte	0x9f
	.byte	0x11
	.byte	0x11
	.byte	0x64
	.byte	0xff
	.byte	0x19
	.byte	0x11
	.byte	0xaf
	.byte	0xf6
	.byte	0x1f
	.byte	0x11
	.byte	0xf4
	.byte	0xf4
	.byte	0xff
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0xf1
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0x91
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x9
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf1
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf1
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xf
	.byte	0xf0
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x4f
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x4f
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xa0
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf0
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf0
	.byte	0x4a
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x4f
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0xaf
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0xff
	.byte	0x4f
	.byte	0x4f
	.byte	0x44
	.byte	0xf4
	.byte	0x6f
	.byte	0xfa
	.byte	0x44
	.byte	0x64
	.byte	0xff
	.byte	0x46
	.byte	0x44
	.byte	0x44
	.byte	0xf6
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf4
	.byte	0xf4
	.byte	0xff
	.byte	0xff
	.byte	0xaf
	.byte	0xf6
	.byte	0x4f
	.byte	0x44
	.byte	0x64
	.byte	0xff
	.byte	0x46
	.byte	0x44
	.byte	0xff
	.byte	0x6f
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xf
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf4
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf4
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xa
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf
	.byte	0x44
	.byte	0x44
	.byte	0xa4
	.byte	0xf
	.byte	0x44
	.byte	0x44
	.byte	0xf4
	.byte	0x0
	.byte	0x44
	.byte	0x44
	.byte	0xfa
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x4f
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4f
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x4a
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0x4a
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0xff
	.byte	0x5a
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xa4
	.byte	0x44
	.byte	0x44
	.byte	0xa4
	.byte	0xff
	.byte	0x44
	.byte	0xa5
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x44
	.byte	0xf
	.byte	0x0
	.byte	0x44
	.byte	0xf4
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sSlidingPokeball_Gfx,512
	.align	2, 0
	.type	 sMugshotBanner_Gfx,object
sMugshotBanner_Gfx:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x11111111
	.word	0x22222222
	.word	0x33333333
	.word	0x44444444
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	-0x77777778
	.word	-0x77777778
	.word	-0x77777778
	.word	-0x77777778
	.word	-0x77777778
	.word	-0x77777778
	.word	-0x66666667
	.word	-0x66666667
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	-0x1
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	-0x1
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x0
	.word	0x0
	.word	0x11111111
	.word	0x22222222
	.word	0x33333333
	.word	0x44444444
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x22222223
	.word	-0x22222223
	.word	-0x22222223
	.word	-0x22222223
	.word	-0x22222223
	.word	-0x22222223
	.word	-0x11111112
	.word	-0x11111112
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x1
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x1
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.size	 sMugshotBanner_Gfx,480
	.type	 sUnusedBrendan_Gfx,object
sUnusedBrendan_Gfx:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x99
	.byte	0x0
	.byte	0x55
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x55
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x99
	.byte	0xcc
	.byte	0x88
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x55
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0xcc
	.byte	0xcc
	.byte	0x88
	.byte	0x44
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0xee
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0xee
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x55
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x99
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x55
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x88
	.byte	0xdd
	.byte	0x44
	.byte	0xff
	.byte	0x88
	.byte	0xdd
	.byte	0x44
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x44
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x44
	.byte	0x88
	.byte	0x44
	.byte	0x22
	.byte	0x33
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0xdd
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0xdd
	.byte	0xcc
	.byte	0xcc
	.byte	0xdd
	.byte	0xcc
	.byte	0xcc
	.byte	0xcc
	.byte	0xdd
	.byte	0xcc
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x88
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x88
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x33
	.byte	0xdd
	.byte	0x88
	.byte	0x88
	.byte	0x99
	.byte	0xdd
	.byte	0x88
	.byte	0x88
	.byte	0x99
	.byte	0xdd
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x22
	.byte	0x22
	.byte	0x88
	.byte	0x88
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0xff
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0xff
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0xff
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x99
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x99
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x33
	.byte	0xee
	.byte	0xff
	.byte	0x88
	.byte	0x33
	.byte	0xee
	.byte	0xff
	.byte	0x44
	.byte	0x33
	.byte	0xee
	.byte	0x55
	.byte	0x44
	.byte	0x33
	.byte	0xee
	.byte	0x55
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x44
	.byte	0x33
	.byte	0x22
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x33
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x33
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x44
	.byte	0x33
	.byte	0x11
	.byte	0xee
	.byte	0x55
	.byte	0x11
	.byte	0xff
	.byte	0xee
	.byte	0x55
	.byte	0x11
	.byte	0xff
	.byte	0xee
	.byte	0xff
	.byte	0x11
	.byte	0x33
	.byte	0xee
	.byte	0xff
	.byte	0x11
	.byte	0x33
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x44
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x44
	.byte	0xff
	.byte	0x11
	.byte	0x33
	.byte	0x88
	.byte	0x0
	.byte	0x22
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x44
	.byte	0xdd
	.byte	0x0
	.byte	0xff
	.byte	0x44
	.byte	0xdd
	.byte	0xff
	.byte	0x88
	.byte	0xdd
	.byte	0xdd
	.byte	0x33
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x33
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x66
	.byte	0xff
	.byte	0x44
	.byte	0xff
	.byte	0x66
	.byte	0xff
	.byte	0x44
	.byte	0xff
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0xff
	.byte	0xbb
	.byte	0x0
	.byte	0xdd
	.byte	0xaa
	.byte	0xaa
	.byte	0xff
	.byte	0xdd
	.byte	0xaa
	.byte	0xaa
	.byte	0xff
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x44
	.byte	0xcc
	.byte	0xcc
	.byte	0x44
	.byte	0x44
	.byte	0xcc
	.byte	0xcc
	.byte	0x44
	.byte	0xdd
	.byte	0xcc
	.byte	0xdd
	.byte	0x44
	.byte	0x33
	.byte	0x44
	.byte	0xee
	.byte	0x55
	.byte	0x33
	.byte	0x44
	.byte	0xee
	.byte	0x55
	.byte	0x44
	.byte	0x55
	.byte	0x99
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xdd
	.byte	0x0
	.byte	0xff
	.byte	0xdd
	.byte	0x88
	.byte	0x0
	.byte	0xff
	.byte	0xdd
	.byte	0x88
	.byte	0x44
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0xdd
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0xdd
	.byte	0x88
	.byte	0x55
	.byte	0x88
	.byte	0xdd
	.byte	0x88
	.byte	0x55
	.byte	0x88
	.byte	0xdd
	.byte	0xff
	.byte	0x55
	.byte	0x55
	.byte	0x88
	.byte	0xff
	.byte	0x55
	.byte	0x55
	.byte	0x88
	.byte	0xff
	.byte	0x55
	.byte	0x55
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x55
	.byte	0xbb
	.byte	0xcc
	.byte	0xcc
	.byte	0xdd
	.byte	0xaa
	.byte	0xcc
	.byte	0xcc
	.byte	0xdd
	.byte	0xaa
	.byte	0xcc
	.byte	0xdd
	.byte	0xaa
	.byte	0xaa
	.byte	0xcc
	.byte	0xdd
	.byte	0xaa
	.byte	0xaa
	.byte	0x88
	.byte	0xaa
	.byte	0xaa
	.byte	0x88
	.byte	0xaa
	.byte	0xaa
	.byte	0x44
	.byte	0x55
	.byte	0xaa
	.byte	0xaa
	.byte	0x44
	.byte	0x55
	.byte	0xaa
	.byte	0x44
	.byte	0x55
	.byte	0x66
	.byte	0xaa
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0xaa
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0x88
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x88
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x55
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x55
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x55
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0xdd
	.byte	0x66
	.byte	0xff
	.byte	0xff
	.byte	0xdd
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xdd
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xdd
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0xdd
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0xdd
	.byte	0xff
	.byte	0x0
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x88
	.byte	0xff
	.byte	0x22
	.byte	0x44
	.byte	0x88
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0xdd
	.byte	0x44
	.byte	0xff
	.byte	0xff
	.byte	0xdd
	.byte	0x44
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x88
	.byte	0xbb
	.byte	0xbb
	.byte	0xff
	.byte	0x88
	.byte	0xbb
	.byte	0xbb
	.byte	0x0
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0x0
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0x44
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0x44
	.byte	0xbb
	.byte	0xbb
	.byte	0x88
	.byte	0x44
	.byte	0xbb
	.byte	0xbb
	.byte	0x88
	.byte	0x0
	.byte	0xff
	.byte	0x44
	.byte	0xbb
	.byte	0xbb
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0xbb
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0xdd
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0xdd
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0xdd
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0xaa
	.byte	0xdd
	.byte	0xdd
	.byte	0xff
	.byte	0x44
	.byte	0xdd
	.byte	0xdd
	.byte	0xff
	.byte	0x44
	.byte	0xdd
	.byte	0x44
	.byte	0x44
	.byte	0xbb
	.byte	0xdd
	.byte	0x44
	.byte	0x44
	.byte	0xbb
	.byte	0xdd
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0xaa
	.byte	0x66
	.byte	0xbb
	.byte	0xbb
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0x44
	.byte	0xff
	.byte	0x88
	.byte	0x66
	.byte	0x44
	.byte	0xff
	.byte	0x88
	.byte	0x66
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x66
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xcc
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0xcc
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0xcc
	.byte	0x88
	.byte	0x0
	.byte	0x66
	.byte	0xdd
	.byte	0xcc
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0xcc
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0xcc
	.size	 sUnusedBrendan_Gfx,2048
	.type	 sUnusedLass_Gfx,object
sUnusedLass_Gfx:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x66
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x66
	.byte	0xff
	.byte	0x0
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0xff
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0xff
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x33
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x33
	.byte	0x66
	.byte	0x88
	.byte	0x11
	.byte	0x11
	.byte	0x88
	.byte	0x88
	.byte	0x11
	.byte	0x11
	.byte	0x88
	.byte	0x88
	.byte	0x11
	.byte	0x11
	.byte	0x88
	.byte	0x66
	.byte	0x33
	.byte	0x11
	.byte	0x88
	.byte	0x66
	.byte	0x55
	.byte	0xff
	.byte	0x88
	.byte	0x66
	.byte	0x55
	.byte	0xff
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0x11
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x88
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x88
	.byte	0x11
	.byte	0x22
	.byte	0x33
	.byte	0x66
	.byte	0x66
	.byte	0xff
	.byte	0x55
	.byte	0x66
	.byte	0x66
	.byte	0xff
	.byte	0x55
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x11
	.byte	0xee
	.byte	0x66
	.byte	0x88
	.byte	0x11
	.byte	0xee
	.byte	0x66
	.byte	0x33
	.byte	0x22
	.byte	0xee
	.byte	0xff
	.byte	0x33
	.byte	0x22
	.byte	0xee
	.byte	0xff
	.byte	0x44
	.byte	0x22
	.byte	0x11
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x66
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x66
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0xdd
	.byte	0x33
	.byte	0x22
	.byte	0xee
	.byte	0x22
	.byte	0xff
	.byte	0xff
	.byte	0xee
	.byte	0x22
	.byte	0xff
	.byte	0xff
	.byte	0xee
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0xee
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0xff
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0xff
	.byte	0x33
	.byte	0x44
	.byte	0x88
	.byte	0x88
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x33
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x33
	.byte	0x44
	.byte	0xcc
	.byte	0xcc
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x22
	.byte	0x33
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x11
	.byte	0x44
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x0
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x44
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x33
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x99
	.byte	0x99
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x99
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x99
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x55
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x44
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x44
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0x99
	.byte	0x99
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0x55
	.byte	0x33
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x33
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x66
	.byte	0x99
	.byte	0x88
	.byte	0x44
	.byte	0x44
	.byte	0x55
	.byte	0x33
	.byte	0x33
	.byte	0x55
	.byte	0x55
	.byte	0x33
	.byte	0x33
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x33
	.byte	0x55
	.byte	0x44
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x44
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x55
	.byte	0x66
	.byte	0x66
	.byte	0x0
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x99
	.byte	0x77
	.byte	0x33
	.byte	0x44
	.byte	0x99
	.byte	0x77
	.byte	0x33
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x66
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x66
	.byte	0x0
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x11
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x66
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0xee
	.byte	0x66
	.byte	0x55
	.byte	0xee
	.byte	0xee
	.byte	0x66
	.byte	0x55
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0x99
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0xff
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0xff
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x99
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x99
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x44
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x44
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x44
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x44
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.size	 sUnusedLass_Gfx,2048
	.align	2, 0
	.type	 sGridSquare_Gfx,object
sGridSquare_Gfx:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x1
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x1
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x1
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x1
	.word	-0x1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xffff01
	.word	-0xffff01
	.word	-0xffff01
	.word	-0xffff01
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xffff01
	.word	-0xffff01
	.word	-0xffff01
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xfff01
	.word	-0xfff01
	.word	-0xfff01
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xfff01
	.word	-0xfff01
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xff001
	.word	-0xff001
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xff001
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.size	 sGridSquare_Gfx,480
	.align	2, 0
	.type	 sTasks_Intro,object
sTasks_Intro:
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.word	Task_Intro
	.size	 sTasks_Intro,72
	.align	2, 0
	.type	 sTasks_Main,object
sTasks_Main:
	.word	Task_Blur
	.word	Task_Swirl
	.word	Task_Shuffle
	.word	Task_BigPokeball
	.word	Task_PokeballsTrail
	.word	Task_ClockwiseWipe
	.word	Task_Ripple
	.word	Task_Wave
	.word	Task_Slice
	.word	Task_WhiteBarsFade
	.word	Task_GridSquares
	.word	Task_AngledWipes
	.word	Task_Lorelei
	.word	Task_Bruno
	.word	Task_Agatha
	.word	Task_Lance
	.word	Task_Blue
	.word	Task_Spiral
	.size	 sTasks_Main,72
	.align	2, 0
	.type	 sTaskHandlers,object
sTaskHandlers:
	.word	Transition_StartIntro
	.word	Transition_WaitForIntro
	.word	Transition_StartMain
	.word	Transition_WaitForMain
	.size	 sTaskHandlers,16
	.align	2, 0
	.type	 sBlur_Funcs,object
sBlur_Funcs:
	.word	Blur_Init
	.word	Blur_Main
	.word	Blur_End
	.size	 sBlur_Funcs,12
	.align	2, 0
	.type	 sSwirl_Funcs,object
sSwirl_Funcs:
	.word	Swirl_Init
	.word	Swirl_End
	.size	 sSwirl_Funcs,8
	.align	2, 0
	.type	 sShuffle_Funcs,object
sShuffle_Funcs:
	.word	Shuffle_Init
	.word	Shuffle_End
	.size	 sShuffle_Funcs,8
	.align	2, 0
	.type	 sBigPokeball_Funcs,object
sBigPokeball_Funcs:
	.word	BigPokeball_Init
	.word	BigPokeball_SetGfx
	.word	PatternWeave_Blend1
	.word	PatternWeave_Blend2
	.word	PatternWeave_FinishAppear
	.word	PatternWeave_CircularMask
	.size	 sBigPokeball_Funcs,24
	.align	2, 0
	.type	 sPokeballsTrail_Funcs,object
sPokeballsTrail_Funcs:
	.word	PokeballsTrail_Init
	.word	PokeballsTrail_Main
	.word	PokeballsTrail_End
	.size	 sPokeballsTrail_Funcs,12
	.align	1, 0
	.type	 sPokeballsTrail_StartXCoords,object
sPokeballsTrail_StartXCoords:
	.short	-0x10
	.short	0x100
	.size	 sPokeballsTrail_StartXCoords,4
	.align	1, 0
	.type	 sPokeballsTrail_Delays,object
	.size	 sPokeballsTrail_Delays,10
sPokeballsTrail_Delays:
	.short	0x0
	.short	0x10
	.short	0x20
	.short	0x8
	.short	0x18
	.align	1, 0
	.type	 sPokeballsTrail_Speeds,object
sPokeballsTrail_Speeds:
	.short	0x8
	.short	-0x8
	.size	 sPokeballsTrail_Speeds,4
	.align	2, 0
	.type	 sClockwiseWipe_Funcs,object
sClockwiseWipe_Funcs:
	.word	ClockwiseWipe_Init
	.word	ClockwiseWipe_TopRight
	.word	ClockwiseWipe_Right
	.word	ClockwiseWipe_Bottom
	.word	ClockwiseWipe_Left
	.word	ClockwiseWipe_TopLeft
	.word	ClockwiseWipe_End
	.size	 sClockwiseWipe_Funcs,28
	.align	2, 0
	.type	 sRipple_Funcs,object
sRipple_Funcs:
	.word	Ripple_Init
	.word	Ripple_Main
	.size	 sRipple_Funcs,8
	.align	2, 0
	.type	 sWave_Funcs,object
sWave_Funcs:
	.word	Wave_Init
	.word	Wave_Main
	.word	Wave_End
	.size	 sWave_Funcs,12
	.align	1, 0
	.type	 sSpiral_AngleData,object
sSpiral_AngleData:
	.short	0x0
	.short	0x26e
	.short	0x100
	.short	0x69
	.short	0x0
	.short	-0x69
	.short	-0x100
	.short	-0x266e
	.short	0x0
	.short	0x26e
	.short	0x100
	.short	0x69
	.short	0x0
	.short	-0x69
	.short	-0x100
	.short	-0x266e
	.size	 sSpiral_AngleData,32
	.align	2, 0
	.type	 sSpiral_Funcs,object
sSpiral_Funcs:
	.word	Spiral_Init
	.word	Spiral_End
	.size	 sSpiral_Funcs,8
	.align	2, 0
	.type	 sMugshot_Funcs,object
sMugshot_Funcs:
	.word	Mugshot_Init
	.word	Mugshot_SetGfx
	.word	Mugshot_ShowBanner
	.word	Mugshot_StartOpponentSlide
	.word	Mugshot_WaitStartPlayerSlide
	.word	Mugshot_WaitPlayerSlide
	.word	Mugshot_GradualWhiteFade
	.word	Mugshot_InitFadeWhiteToBlack
	.word	Mugshot_FadeToBlack
	.word	Mugshot_End
	.size	 sMugshot_Funcs,40
	.type	 sMugshotsTrainerPicIDsTable,object
	.size	 sMugshotsTrainerPicIDsTable,5
sMugshotsTrainerPicIDsTable:
	.byte	0x70
	.byte	0x71
	.byte	0x72
	.byte	0x73
	.byte	0x7d
	.align	1, 0
	.type	 sMugshotsOpponentRotationScales,object
	.size	 sMugshotsOpponentRotationScales,20
sMugshotsOpponentRotationScales:
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.align	1, 0
	.type	 sMugshotsOpponentCoords,object
	.size	 sMugshotsOpponentCoords,20
sMugshotsOpponentCoords:
	.short	-0x8
	.short	0x0
	.short	-0xa
	.short	0x0
	.short	0x0
	.short	0x0
	.short	-0x20
	.short	0x0
	.short	0x0
	.short	0x0
	.align	2, 0
	.type	 sMugshotTrainerPicFuncs,object
sMugshotTrainerPicFuncs:
	.word	MugshotTrainerPic_Pause
	.word	MugshotTrainerPic_Init
	.word	MugshotTrainerPic_Slide
	.word	MugshotTrainerPic_SlideSlow
	.word	MugshotTrainerPic_Pause
	.word	MugshotTrainerPic_SlideOffscreen
	.word	MugshotTrainerPic_Pause
	.size	 sMugshotTrainerPicFuncs,28
	.align	1, 0
	.type	 sTrainerPicSlideSpeeds,object
sTrainerPicSlideSpeeds:
	.short	0xc
	.short	-0xc
	.size	 sTrainerPicSlideSpeeds,4
	.align	1, 0
	.type	 sTrainerPicSlideAccels,object
sTrainerPicSlideAccels:
	.short	-0x1
	.short	0x1
	.size	 sTrainerPicSlideAccels,4
	.align	2, 0
	.type	 sSlice_Funcs,object
sSlice_Funcs:
	.word	Slice_Init
	.word	Slice_Main
	.word	Slice_End
	.size	 sSlice_Funcs,12
	.align	2, 0
	.type	 sWhiteBarsFade_Funcs,object
sWhiteBarsFade_Funcs:
	.word	WhiteBarsFade_Init
	.word	WhiteBarsFade_StartBars
	.word	WhiteBarsFade_WaitBars
	.word	WhiteBarsFade_BlendToBlack
	.word	WhiteBarsFade_End
	.size	 sWhiteBarsFade_Funcs,20
	.align	1, 0
	.type	 sWhiteBarsFade_StartDelays,object
	.size	 sWhiteBarsFade_StartDelays,12
sWhiteBarsFade_StartDelays:
	.short	0x0
	.short	0x9
	.short	0xf
	.short	0x6
	.short	0xc
	.short	0x3
	.align	2, 0
	.type	 sGridSquares_Funcs,object
sGridSquares_Funcs:
	.word	GridSquares_Init
	.word	GridSquares_Main
	.word	GridSquares_End
	.size	 sGridSquares_Funcs,12
	.align	2, 0
	.type	 sAngledWipes_Funcs,object
sAngledWipes_Funcs:
	.word	AngledWipes_Init
	.word	AngledWipes_SetWipeData
	.word	AngledWipes_DoWipe
	.word	AngledWipes_TryEnd
	.word	AngledWipes_StartNext
	.size	 sAngledWipes_Funcs,20
	.align	1, 0
	.type	 sAngledWipes_MoveData,object
	.size	 sAngledWipes_MoveData,70
sAngledWipes_MoveData:
	.short	0x38
	.short	0x0
	.short	0x0
	.short	0xa0
	.short	0x0
	.short	0x68
	.short	0xa0
	.short	0xf0
	.short	0x58
	.short	0x1
	.short	0xf0
	.short	0x48
	.short	0x38
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x20
	.short	0x90
	.short	0xa0
	.short	0x0
	.short	0x90
	.short	0xa0
	.short	0xb8
	.short	0x0
	.short	0x1
	.short	0x38
	.short	0x0
	.short	0xa8
	.short	0xa0
	.short	0x0
	.short	0xa8
	.short	0xa0
	.short	0x30
	.short	0x0
	.short	0x1
	.align	1, 0
	.type	 sAngledWipes_EndDelays,object
	.size	 sAngledWipes_EndDelays,14
sAngledWipes_EndDelays:
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x0
	.align	2, 0
	.type	 sTransitionIntroFuncs,object
sTransitionIntroFuncs:
	.word	TransitionIntro_FadeToGray
	.word	TransitionIntro_FadeFromGray
	.size	 sTransitionIntroFuncs,8
	.align	2, 0
	.type	 sSpriteImage_Pokeball,object
sSpriteImage_Pokeball:
	.word	sSlidingPokeball_Gfx
	.short	0x200
	.space	2
	.size	 sSpriteImage_Pokeball,8
	.align	2, 0
	.type	 sSpriteAnim_Pokeball,object
sSpriteAnim_Pokeball:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_Pokeball,8
	.align	2, 0
	.type	 sSpriteAnimTable_Pokeball,object
sSpriteAnimTable_Pokeball:
	.word	sSpriteAnim_Pokeball
	.size	 sSpriteAnimTable_Pokeball,4
	.align	2, 0
	.type	 sSpriteAffineAnim_Pokeball1,object
sSpriteAffineAnim_Pokeball1:
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSpriteAffineAnim_Pokeball1,16
	.align	2, 0
	.type	 sSpriteAffineAnim_Pokeball2,object
sSpriteAffineAnim_Pokeball2:
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSpriteAffineAnim_Pokeball2,16
	.align	2, 0
	.type	 sSpriteAffineAnimTable_Pokeball,object
sSpriteAffineAnimTable_Pokeball:
	.word	sSpriteAffineAnim_Pokeball1
	.word	sSpriteAffineAnim_Pokeball2
	.size	 sSpriteAffineAnimTable_Pokeball,8
	.align	2, 0
	.type	 sSpriteTemplate_Pokeball,object
	.size	 sSpriteTemplate_Pokeball,24
sSpriteTemplate_Pokeball:
	.short	0xffff
	.short	0x1009
	.word	gObjectEventBaseOam_32x32
	.word	sSpriteAnimTable_Pokeball
	.word	sSpriteImage_Pokeball
	.word	sSpriteAffineAnimTable_Pokeball
	.word	SpriteCB_FldEffPokeballTrail
	.align	2, 0
	.type	 sOam_UnusedBrendanLass,object
	.size	 sOam_UnusedBrendanLass,8
sOam_UnusedBrendanLass:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sImageTable_UnusedBrendan,object
sImageTable_UnusedBrendan:
	.word	sUnusedBrendan_Gfx
	.short	0x800
	.space	2
	.size	 sImageTable_UnusedBrendan,8
	.align	2, 0
	.type	 sImageTable_UnusedLass,object
sImageTable_UnusedLass:
	.word	sUnusedLass_Gfx
	.short	0x800
	.space	2
	.size	 sImageTable_UnusedLass,8
	.align	2, 0
	.type	 sSpriteAnim_UnusedBrendanLass,object
sSpriteAnim_UnusedBrendanLass:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_UnusedBrendanLass,8
	.align	2, 0
	.type	 sSpriteAnimTable_UnusedBrendanLass,object
sSpriteAnimTable_UnusedBrendanLass:
	.word	sSpriteAnim_UnusedBrendanLass
	.size	 sSpriteAnimTable_UnusedBrendanLass,4
	.align	2, 0
	.type	 sSpriteTemplate_UnusedBrendanLass,object
sSpriteTemplate_UnusedBrendanLass:
	.short	0xffff
	.short	0x100a
	.word	sOam_UnusedBrendanLass
	.word	sSpriteAnimTable_UnusedBrendanLass
	.word	sImageTable_UnusedBrendan
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_MugshotTrainerPic
	.short	0xffff
	.short	0x100a
	.word	sOam_UnusedBrendanLass
	.word	sSpriteAnimTable_UnusedBrendanLass
	.word	sImageTable_UnusedLass
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_MugshotTrainerPic
	.size	 sSpriteTemplate_UnusedBrendanLass,48
	.align	1, 0
	.type	 sFieldEffectPal_Pokeball,object
sFieldEffectPal_Pokeball:
	.short	0x76ac
	.short	0x3e
	.short	0x5b5d
	.short	0x4adb
	.short	0x7fff
	.short	0x779b
	.short	0x7337
	.short	0x6ed3
	.short	0x5a6c
	.short	0x12
	.short	0x6318
	.short	0x539d
	.short	0x433b
	.short	0x36da
	.short	0x2a79
	.short	0x0
	.size	 sFieldEffectPal_Pokeball,32
	.globl	gSpritePalette_Pokeball
	.align	2, 0
	.type	 gSpritePalette_Pokeball,object
	.size	 gSpritePalette_Pokeball,8
gSpritePalette_Pokeball:
	.word	sFieldEffectPal_Pokeball
	.short	0x1009
	.space	2
	.align	1, 0
	.type	 sMugshotPal_Lorelei,object
sMugshotPal_Lorelei:
	.short	0x18d5
	.short	0x39ce
	.short	0x4a52
	.short	0x5ad6
	.short	0x6b5a
	.short	0x5c17
	.short	0x6459
	.short	0x6c9b
	.short	0x74dd
	.short	0x7d1f
	.short	0x6acd
	.short	0x730f
	.short	0x7b51
	.short	0x7f93
	.short	0x7fd5
	.short	0x7fff
	.size	 sMugshotPal_Lorelei,32
	.align	1, 0
	.type	 sMugshotPal_Bruno,object
sMugshotPal_Bruno:
	.short	0x18d5
	.short	0x39ce
	.short	0x4a52
	.short	0x5ad6
	.short	0x6b5a
	.short	0x741
	.short	0x13a4
	.short	0x1bc6
	.short	0x27e9
	.short	0x3fef
	.short	0x45fc
	.short	0x4e3e
	.short	0x567f
	.short	0x5ebf
	.short	0x66ff
	.short	0x45fc
	.size	 sMugshotPal_Bruno,32
	.align	1, 0
	.type	 sMugshotPal_Agatha,object
sMugshotPal_Agatha:
	.short	0x18d5
	.short	0x39ce
	.short	0x4a52
	.short	0x5ad6
	.short	0x6b5a
	.short	0x555f
	.short	0x5d9f
	.short	0x65df
	.short	0x6e1f
	.short	0x765f
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sMugshotPal_Agatha,32
	.align	1, 0
	.type	 sMugshotPal_Lance,object
sMugshotPal_Lance:
	.short	0x18d5
	.short	0x39ce
	.short	0x4a52
	.short	0x5ad6
	.short	0x6b5a
	.short	0x4000
	.short	0x4842
	.short	0x5084
	.short	0x58c6
	.short	0x6108
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sMugshotPal_Lance,32
	.align	1, 0
	.type	 sMugshotPal_Blue,object
sMugshotPal_Blue:
	.short	0x18d5
	.short	0x39ce
	.short	0x4a52
	.short	0x5ad6
	.short	0x6b5a
	.short	0x2318
	.short	0x2b5a
	.short	0x339c
	.short	0x3bde
	.short	0x43ff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sMugshotPal_Blue,32
	.align	1, 0
	.type	 sMugshotPal_Red,object
sMugshotPal_Red:
	.short	0x6acd
	.short	0x730f
	.short	0x7b51
	.short	0x7f93
	.short	0x7fd5
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sMugshotPal_Red,32
	.align	1, 0
	.type	 sMugshotPal_Green,object
sMugshotPal_Green:
	.short	0x45fc
	.short	0x4e3e
	.short	0x567f
	.short	0x5ebf
	.short	0x66ff
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sMugshotPal_Green,32
	.align	2, 0
	.type	 sOpponentMugshotsPals,object
	.size	 sOpponentMugshotsPals,20
sOpponentMugshotsPals:
	.word	sMugshotPal_Lorelei
	.word	sMugshotPal_Bruno
	.word	sMugshotPal_Agatha
	.word	sMugshotPal_Lance
	.word	sMugshotPal_Blue
	.align	2, 0
	.type	 sPlayerMugshotsPals,object
	.size	 sPlayerMugshotsPals,8
sPlayerMugshotsPals:
	.word	sMugshotPal_Red
	.word	sMugshotPal_Green
	.align	1, 0
	.type	 sUnusedTrainerPalette,object
sUnusedTrainerPalette:
	.short	0x530e
	.short	0x677f
	.short	0x4a9b
	.short	0x3a19
	.short	0x296f
	.short	0x3d27
	.short	0x30e5
	.short	0x28a3
	.short	0x1c82
	.short	0x779b
	.short	0x2f1f
	.short	0x2e77
	.short	0x2d9f
	.short	0x2118
	.short	0x7fff
	.short	0x0
	.size	 sUnusedTrainerPalette,32
	.align	2, 0
	.type	 sSpritePalette_UnusedTrainer,object
	.size	 sSpritePalette_UnusedTrainer,8
sSpritePalette_UnusedTrainer:
	.word	sUnusedTrainerPalette
	.short	0x100a
	.space	2
	.align	1, 0
	.type	 sBigPokeball_Tilemap,object
sBigPokeball_Tilemap:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x3
	.short	0x4
	.short	0x5
	.short	0x6
	.short	0x406
	.short	0x405
	.short	0x404
	.short	0x403
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x7
	.short	0x8
	.short	0x9
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x409
	.short	0x408
	.short	0x407
	.short	0x400
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xa
	.short	0xb
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x40b
	.short	0x40a
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xd
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x40d
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xe
	.short	0xf
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x40f
	.short	0x40e
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x10
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x410
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x11
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x24
	.short	0x25
	.short	0x425
	.short	0x424
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x411
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x12
	.short	0x13
	.short	0x13
	.short	0x13
	.short	0x13
	.short	0x13
	.short	0x26
	.short	0x27
	.short	0x427
	.short	0x426
	.short	0x413
	.short	0x413
	.short	0x413
	.short	0x413
	.short	0x413
	.short	0x412
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x14
	.short	0x15
	.short	0x15
	.short	0x15
	.short	0x15
	.short	0x15
	.short	0x28
	.short	0x29
	.short	0x429
	.short	0x428
	.short	0x415
	.short	0x415
	.short	0x415
	.short	0x415
	.short	0x415
	.short	0x414
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x16
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2a
	.short	0x2b
	.short	0x42b
	.short	0x42a
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x416
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x17
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x417
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x18
	.short	0x19
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x419
	.short	0x418
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1a
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x41a
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1b
	.short	0x1c
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x41c
	.short	0x41b
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1d
	.short	0x1e
	.short	0x1f
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x41f
	.short	0x41e
	.short	0x41d
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x20
	.short	0x21
	.short	0x22
	.short	0x23
	.short	0x423
	.short	0x422
	.short	0x421
	.short	0x420
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sBigPokeball_Tilemap,1200
	.align	1, 0
	.type	 sMugshotsTilemap,object
sMugshotsTilemap:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x6
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x6
	.short	0x6
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x6
	.short	0x3
	.short	0x3
	.short	0x4
	.short	0x4
	.short	0x7
	.short	0x4
	.short	0x7
	.short	0x7
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x7
	.short	0x7
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x7
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x7
	.short	0x804
	.short	0x804
	.short	0x7
	.short	0x7
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x7
	.short	0x7
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x7
	.short	0x7
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x7
	.short	0x7
	.short	0x804
	.short	0x804
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x6
	.short	0x6
	.short	0x803
	.short	0x803
	.short	0x6
	.short	0x803
	.short	0x803
	.short	0x6
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x9
	.short	0xd
	.short	0x9
	.short	0x9
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0xd
	.short	0xd
	.short	0x9
	.short	0xd
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0xd
	.short	0xd
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0xa
	.short	0xa
	.short	0xe
	.short	0xe
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xe
	.short	0xe
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xe
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xe
	.short	0xe
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xa
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0xe
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0xe
	.short	0xe
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0xe
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0xe
	.short	0xe
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0xd
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0xd
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0xd
	.short	0x809
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x800
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sMugshotsTilemap,1280
.text
	.align	2, 0
	.globl	BattleTransition_StartOnField
	.type	 BattleTransition_StartOnField,function
	.thumb_func
BattleTransition_StartOnField:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L5
	mov	r0, #0x3c
	bl	AllocZeroed
	str	r0, [r5]
	ldr	r1, .L5+0x4
	ldr	r0, .L5+0x8
	str	r0, [r1, #0x4]
	add	r0, r4, #0
	bl	LaunchBattleTransitionTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	sTransitionData
	.word	gMain
	.word	CB2_OverworldBasic
.Lfe1:
	.size	 BattleTransition_StartOnField,.Lfe1-BattleTransition_StartOnField
	.align	2, 0
	.type	 BattleTransition_Start,function
	.thumb_func
BattleTransition_Start:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	LaunchBattleTransitionTask
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 BattleTransition_Start,.Lfe2-BattleTransition_Start
	.align	2, 0
	.globl	IsBattleTransitionDone
	.type	 IsBattleTransitionDone,function
	.thumb_func
IsBattleTransitionDone:
	push	{r4, r5, lr}
	ldr	r0, .L12
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L12+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x26
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L9	@cond_branch
	mov	r0, #0x0
	b	.L11
.L13:
	.align	2, 0
.L12:
	.word	Task_BattleTransition
	.word	gTasks
.L9:
	bl	InitTransitionData
	ldr	r4, .L14
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	add	r0, r5, #0
	bl	DestroyTask
	mov	r0, #0x1
.L11:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L15:
	.align	2, 0
.L14:
	.word	sTransitionData
.Lfe3:
	.size	 IsBattleTransitionDone,.Lfe3-IsBattleTransitionDone
	.align	2, 0
	.type	 LaunchBattleTransitionTask,function
	.thumb_func
LaunchBattleTransitionTask:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L17
	mov	r1, #0x2
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L17+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0xa]
	pop	{r4}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	Task_BattleTransition
	.word	gTasks
.Lfe4:
	.size	 LaunchBattleTransitionTask,.Lfe4-LaunchBattleTransitionTask
	.align	2, 0
	.type	 Task_BattleTransition,function
	.thumb_func
Task_BattleTransition:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L24
	ldr	r2, .L24+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L20:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L20	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	sTaskHandlers
	.word	gTasks
.Lfe5:
	.size	 Task_BattleTransition,.Lfe5-Task_BattleTransition
	.align	2, 0
	.type	 Transition_StartIntro,function
	.thumb_func
Transition_StartIntro:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetWeatherScreenFadeOut
	ldr	r0, .L30
	ldr	r1, .L30+0x4
	ldr	r2, .L30+0x8
	bl	CpuSet
	ldr	r1, .L30+0xc
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L27	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	b	.L29
.L31:
	.align	2, 0
.L30:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000100
	.word	sTasks_Intro
.L27:
	mov	r1, #0x4
	bl	CreateTask
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
.L29:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 Transition_StartIntro,.Lfe6-Transition_StartIntro
	.align	2, 0
	.type	 Transition_WaitForIntro,function
	.thumb_func
Transition_WaitForIntro:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L36
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L33	@cond_branch
	mov	r0, #0x0
	b	.L35
.L37:
	.align	2, 0
.L36:
	.word	sTasks_Intro
.L33:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
.L35:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 Transition_WaitForIntro,.Lfe7-Transition_WaitForIntro
	.align	2, 0
	.type	 Transition_StartMain,function
	.thumb_func
Transition_StartMain:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L39
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	CreateTask
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L40:
	.align	2, 0
.L39:
	.word	sTasks_Main
.Lfe8:
	.size	 Transition_StartMain,.Lfe8-Transition_StartMain
	.align	2, 0
	.type	 Transition_WaitForMain,function
	.thumb_func
Transition_WaitForMain:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	ldr	r1, .L43
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L42	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x26]
.L42:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L44:
	.align	2, 0
.L43:
	.word	sTasks_Main
.Lfe9:
	.size	 Transition_WaitForMain,.Lfe9-Transition_WaitForMain
	.align	2, 0
	.type	 Task_Intro,function
	.thumb_func
Task_Intro:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r1, .L49
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0x8]
	mov	r3, #0x8
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L46	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	CreateIntroTask
	b	.L47
.L50:
	.align	2, 0
.L49:
	.word	gTasks
.L46:
	bl	IsIntroTaskDone
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L47	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
.L47:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 Task_Intro,.Lfe10-Task_Intro
	.align	2, 0
	.type	 Task_Blur,function
	.thumb_func
Task_Blur:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L56
	ldr	r2, .L56+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L52:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L52	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	sBlur_Funcs
	.word	gTasks
.Lfe11:
	.size	 Task_Blur,.Lfe11-Task_Blur
	.align	2, 0
	.type	 Blur_Init,function
	.thumb_func
Blur_Init:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x40
	bl	SetGpuRegBits
	mov	r0, #0xc
	mov	r1, #0x40
	bl	SetGpuRegBits
	mov	r0, #0xe
	mov	r1, #0x40
	bl	SetGpuRegBits
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 Blur_Init,.Lfe12-Blur_Init
	.align	2, 0
	.type	 Blur_Main,function
	.thumb_func
Blur_Main:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldrh	r0, [r4, #0xa]
	mov	r1, #0xa
	ldrsh	r2, [r4, r1]
	cmp	r2, #0
	beq	.L60	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L61
.L60:
	mov	r0, #0x2
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L62	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	str	r2, [sp]
	add	r0, r1, #0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L62:
	ldrh	r1, [r4, #0xc]
	mov	r0, #0xf
	and	r0, r0, r1
	lsl	r1, r0, #0x4
	orr	r1, r1, r0
	mov	r0, #0x4c
	bl	SetGpuReg
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xe
	ble	.L61	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L61:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 Blur_Main,.Lfe13-Blur_Main
	.align	2, 0
	.type	 Blur_End,function
	.thumb_func
Blur_End:
	push	{lr}
	ldr	r0, .L66
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L65	@cond_branch
	ldr	r0, .L66+0x4
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L65:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L67:
	.align	2, 0
.L66:
	.word	gPaletteFade
	.word	Task_Blur
.Lfe14:
	.size	 Blur_End,.Lfe14-Blur_End
	.align	2, 0
	.type	 Task_Swirl,function
	.thumb_func
Task_Swirl:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L73
	ldr	r2, .L73+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L69:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L69	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	sSwirl_Funcs
	.word	gTasks
.Lfe15:
	.size	 Task_Swirl,.Lfe15-Task_Swirl
	.align	2, 0
	.type	 Swirl_Init,function
	.thumb_func
Swirl_Init:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	mov	r0, #0x1
	neg	r0, r0
	mov	r4, #0x0
	str	r4, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L76
	ldr	r1, .L76+0x4
	ldr	r1, [r1]
	mov	r2, #0x14
	ldrsh	r1, [r1, r2]
	str	r4, [sp]
	mov	r2, #0xa0
	str	r2, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x2
	bl	SetSinWave
	ldr	r0, .L76+0x8
	bl	SetVBlankCallback
	ldr	r0, .L76+0xc
	bl	SetHBlankCallback
	mov	r0, #0x3
	bl	EnableInterrupts
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L77:
	.align	2, 0
.L76:
	.word	gScanlineEffectRegBuffers+0x780
	.word	sTransitionData
	.word	VBlankCB_Swirl
	.word	HBlankCB_Swirl
.Lfe16:
	.size	 Swirl_Init,.Lfe16-Swirl_Init
	.align	2, 0
	.type	 Swirl_End,function
	.thumb_func
Swirl_End:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	ldr	r4, .L80
	ldr	r2, [r4]
	ldrb	r1, [r2]
	mov	r1, #0x0
	strb	r1, [r2]
	ldrh	r1, [r0, #0xa]
	add	r1, r1, #0x4
	strh	r1, [r0, #0xa]
	ldrh	r1, [r0, #0xc]
	add	r1, r1, #0x8
	strh	r1, [r0, #0xc]
	ldr	r3, .L80+0x4
	ldr	r1, [r4]
	mov	r2, #0x14
	ldrsh	r1, [r1, r2]
	mov	r5, #0xa
	ldrsh	r2, [r0, r5]
	mov	r5, #0xc
	ldrsh	r0, [r0, r5]
	str	r0, [sp]
	mov	r0, #0xa0
	str	r0, [sp, #0x4]
	add	r0, r3, #0
	mov	r3, #0x2
	bl	SetSinWave
	ldr	r0, .L80+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L79	@cond_branch
	ldr	r0, .L80+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L79:
	ldr	r0, [r4]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L81:
	.align	2, 0
.L80:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
	.word	gPaletteFade
	.word	Task_Swirl
.Lfe17:
	.size	 Swirl_End,.Lfe17-Swirl_End
	.align	2, 0
	.type	 VBlankCB_Swirl,function
	.thumb_func
VBlankCB_Swirl:
	push	{lr}
	bl	VBlankCB_BattleTransition
	ldr	r0, .L84
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L83	@cond_branch
	ldr	r1, .L84+0x4
	ldr	r0, .L84+0x8
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L84+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L83:
	pop	{r0}
	bx	r0
.L85:
	.align	2, 0
.L84:
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
.Lfe18:
	.size	 VBlankCB_Swirl,.Lfe18-VBlankCB_Swirl
	.align	2, 0
	.type	 HBlankCB_Swirl,function
	.thumb_func
HBlankCB_Swirl:
	ldr	r1, .L87
	ldr	r0, .L87+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L87+0x8
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	bx	lr
.L88:
	.align	2, 0
.L87:
	.word	gScanlineEffectRegBuffers
	.word	0x4000006
	.word	0x4000014
.Lfe19:
	.size	 HBlankCB_Swirl,.Lfe19-HBlankCB_Swirl
	.align	2, 0
	.type	 Task_Shuffle,function
	.thumb_func
Task_Shuffle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L94
	ldr	r2, .L94+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L90:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L90	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	sShuffle_Funcs
	.word	gTasks
.Lfe20:
	.size	 Task_Shuffle,.Lfe20-Task_Shuffle
	.align	2, 0
	.type	 Shuffle_Init,function
	.thumb_func
Shuffle_Init:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L97
	ldr	r1, [r0]
	ldr	r0, .L97+0x4
	mov	r2, #0x16
	ldrsh	r1, [r1, r2]
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	bl	memset
	ldr	r0, .L97+0x8
	bl	SetVBlankCallback
	ldr	r0, .L97+0xc
	bl	SetHBlankCallback
	mov	r0, #0x3
	bl	EnableInterrupts
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.L98:
	.align	2, 0
.L97:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers+0x780
	.word	VBlankCB_Shuffle
	.word	HBlankCB_Shuffle
.Lfe21:
	.size	 Shuffle_Init,.Lfe21-Shuffle_Init
	.align	2, 0
	.type	 Shuffle_End,function
	.thumb_func
Shuffle_End:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L106
	ldr	r2, [r1]
	ldrb	r1, [r2]
	mov	r1, #0x0
	strb	r1, [r2]
	ldrh	r4, [r0, #0xa]
	ldrh	r2, [r0, #0xc]
	lsl	r3, r2, #0x10
	asr	r3, r3, #0x18
	mov	r5, #0x84
	lsl	r5, r5, #0x5
	add	r1, r4, r5
	strh	r1, [r0, #0xa]
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	add	r2, r2, r1
	strh	r2, [r0, #0xc]
	mov	r5, #0x0
	lsl	r7, r3, #0x10
.L103:
	lsr	r0, r4, #0x8
	asr	r1, r7, #0x10
	bl	Sin
	ldr	r1, .L106+0x4
	lsl	r2, r5, #0x1
	add	r2, r2, r1
	ldr	r6, .L106
	ldr	r1, [r6]
	ldrh	r1, [r1, #0x16]
	add	r0, r0, r1
	strh	r0, [r2]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, #0x84
	lsl	r1, r1, #0x5
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r5, #0x9f
	bls	.L103	@cond_branch
	ldr	r0, .L106+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L105	@cond_branch
	ldr	r0, .L106+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L105:
	ldr	r0, [r6]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L107:
	.align	2, 0
.L106:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
	.word	gPaletteFade
	.word	Task_Shuffle
.Lfe22:
	.size	 Shuffle_End,.Lfe22-Shuffle_End
	.align	2, 0
	.type	 VBlankCB_Shuffle,function
	.thumb_func
VBlankCB_Shuffle:
	push	{lr}
	bl	VBlankCB_BattleTransition
	ldr	r0, .L110
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L109	@cond_branch
	ldr	r1, .L110+0x4
	ldr	r0, .L110+0x8
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L110+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L109:
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
.Lfe23:
	.size	 VBlankCB_Shuffle,.Lfe23-VBlankCB_Shuffle
	.align	2, 0
	.type	 HBlankCB_Shuffle,function
	.thumb_func
HBlankCB_Shuffle:
	ldr	r1, .L113
	ldr	r0, .L113+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L113+0x8
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	bx	lr
.L114:
	.align	2, 0
.L113:
	.word	gScanlineEffectRegBuffers
	.word	0x4000006
	.word	0x4000016
.Lfe24:
	.size	 HBlankCB_Shuffle,.Lfe24-HBlankCB_Shuffle
	.align	2, 0
	.type	 Task_BigPokeball,function
	.thumb_func
Task_BigPokeball:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L120
	ldr	r2, .L120+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L116:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L116	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	sBigPokeball_Funcs
	.word	gTasks
.Lfe25:
	.size	 Task_BigPokeball,.Lfe25-Task_BigPokeball
	.align	2, 0
	.type	 BigPokeball_Init,function
	.thumb_func
BigPokeball_Init:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	mov	r1, #0x0
	mov	r0, #0x10
	strh	r0, [r4, #0xa]
	strh	r1, [r4, #0xc]
	strh	r1, [r4, #0x10]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	strh	r0, [r4, #0x12]
	ldr	r0, .L128
	ldr	r2, [r0]
	mov	r0, #0x3f
	strh	r0, [r2, #0x2]
	strh	r1, [r2, #0x4]
	mov	r0, #0xf0
	strh	r0, [r2, #0x6]
	mov	r0, #0xa0
	strh	r0, [r2, #0x8]
	ldr	r0, .L128+0x4
	strh	r0, [r2, #0xe]
	ldrh	r0, [r4, #0xa]
	lsl	r0, r0, #0x8
	ldrh	r1, [r4, #0xc]
	orr	r0, r0, r1
	strh	r0, [r2, #0x10]
	mov	r1, #0x0
	add	r5, sp, #0x4
	add	r6, sp, #0x8
	ldr	r3, .L128+0x8
	mov	r2, #0xf0
.L126:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x9f
	bls	.L126	@cond_branch
	ldr	r0, .L128+0xc
	bl	SetVBlankCallback
	add	r0, r5, #0
	add	r1, r6, #0
	bl	GetBg0TilesDst
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, [sp, #0x4]
	ldr	r2, .L128+0x10
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L128+0x14
	ldr	r1, [sp, #0x8]
	mov	r2, #0xb0
	lsl	r2, r2, #0x2
	bl	CpuSet
	ldr	r0, .L128+0x18
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L129:
	.align	2, 0
.L128:
	.word	sTransitionData
	.word	0x3f41
	.word	gScanlineEffectRegBuffers+0x780
	.word	VBlankCB_PatternWeave
	.word	0x1000400
	.word	sBigPokeball_Gfx
	.word	sFieldEffectPal_Pokeball
.Lfe26:
	.size	 BigPokeball_Init,.Lfe26-BigPokeball_Init
	.align	2, 0
	.type	 BigPokeball_SetGfx,function
	.thumb_func
BigPokeball_SetGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	add	r7, r0, #0
	ldr	r5, .L141
	add	r1, sp, #0xc
	add	r0, sp, #0x8
	bl	GetBg0TilesDst
	mov	r1, #0x0
	ldr	r0, [sp, #0x8]
	mov	r9, r0
	ldr	r6, .L141+0x4
	mov	r8, r6
	mov	r0, #0xf0
	lsl	r0, r0, #0x8
	mov	ip, r0
.L134:
	mov	r0, #0x0
	lsl	r3, r1, #0x10
	asr	r4, r3, #0xb
.L138:
	lsl	r2, r0, #0x10
	asr	r2, r2, #0x10
	add	r1, r4, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r9
	ldrh	r0, [r5]
	mov	r6, ip
	orr	r0, r0, r6
	strh	r0, [r1]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	add	r5, r5, #0x2
	lsr	r0, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0x1d
	ble	.L138	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r3, r1
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L134	@cond_branch
	mov	r6, #0x10
	ldrsh	r2, [r7, r6]
	mov	r1, #0x12
	ldrsh	r0, [r7, r1]
	str	r0, [sp]
	mov	r0, #0xa0
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r1, #0x0
	mov	r3, #0x84
	bl	SetSinWave
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x8]
	mov	r0, #0x1
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L142:
	.align	2, 0
.L141:
	.word	sBigPokeball_Tilemap
	.word	gScanlineEffectRegBuffers
.Lfe27:
	.size	 BigPokeball_SetGfx,.Lfe27-BigPokeball_SetGfx
	.align	2, 0
	.type	 PatternWeave_Blend1,function
	.thumb_func
PatternWeave_Blend1:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	ldr	r2, .L147
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldrh	r1, [r3, #0xe]
	mov	r4, #0xe
	ldrsh	r0, [r3, r4]
	add	r4, r2, #0
	cmp	r0, #0
	beq	.L145	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L144	@cond_branch
.L145:
	ldrh	r0, [r3, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
.L144:
	ldr	r2, [r4]
	ldrh	r0, [r3, #0xa]
	lsl	r0, r0, #0x8
	ldrh	r1, [r3, #0xc]
	orr	r0, r0, r1
	strh	r0, [r2, #0x10]
	mov	r5, #0xc
	ldrsh	r0, [r3, r5]
	cmp	r0, #0xf
	ble	.L146	@cond_branch
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
.L146:
	ldrh	r0, [r3, #0x10]
	add	r0, r0, #0xc
	strh	r0, [r3, #0x10]
	ldr	r0, .L147+0x4
	add	r1, r0, #0
	ldrh	r5, [r3, #0x12]
	add	r1, r1, r5
	strh	r1, [r3, #0x12]
	ldr	r0, .L147+0x8
	mov	r5, #0x10
	ldrsh	r2, [r3, r5]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, #0xa0
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r3, #0x84
	bl	SetSinWave
	ldr	r1, [r4]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L148:
	.align	2, 0
.L147:
	.word	sTransitionData
	.word	-0x180
	.word	gScanlineEffectRegBuffers
.Lfe28:
	.size	 PatternWeave_Blend1,.Lfe28-PatternWeave_Blend1
	.align	2, 0
	.type	 PatternWeave_Blend2,function
	.thumb_func
PatternWeave_Blend2:
	push	{r4, lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	ldr	r2, .L156
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldrh	r1, [r3, #0xe]
	mov	r4, #0xe
	ldrsh	r0, [r3, r4]
	cmp	r0, #0
	beq	.L151	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L150	@cond_branch
.L151:
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	mov	r0, #0x2
	strh	r0, [r3, #0xe]
.L150:
	ldr	r2, [r2]
	ldrh	r0, [r3, #0xa]
	lsl	r0, r0, #0x8
	ldrh	r1, [r3, #0xc]
	orr	r0, r0, r1
	strh	r0, [r2, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L152	@cond_branch
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
.L152:
	ldrh	r1, [r3, #0x12]
	mov	r2, #0x12
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L153	@cond_branch
	ldrh	r0, [r3, #0x10]
	add	r0, r0, #0xc
	strh	r0, [r3, #0x10]
	ldr	r4, .L156+0x4
	add	r0, r1, r4
	b	.L155
.L157:
	.align	2, 0
.L156:
	.word	sTransitionData
	.word	-0x180
.L153:
	mov	r0, #0x0
.L155:
	strh	r0, [r3, #0x12]
	ldr	r0, .L158
	mov	r1, #0x10
	ldrsh	r2, [r3, r1]
	ldrh	r1, [r3, #0x12]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, #0xa0
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r3, #0x84
	bl	SetSinWave
	ldr	r0, .L158+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r1}
	bx	r1
.L159:
	.align	2, 0
.L158:
	.word	gScanlineEffectRegBuffers
	.word	sTransitionData
.Lfe29:
	.size	 PatternWeave_Blend2,.Lfe29-PatternWeave_Blend2
	.align	2, 0
	.type	 PatternWeave_FinishAppear,function
	.thumb_func
PatternWeave_FinishAppear:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldr	r0, .L164
	ldr	r0, [r0]
	ldrb	r1, [r0]
	mov	r2, #0x0
	strb	r2, [r0]
	ldrh	r1, [r4, #0x12]
	mov	r3, #0x12
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	ble	.L161	@cond_branch
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0xc
	strh	r0, [r4, #0x10]
	ldr	r2, .L164+0x4
	add	r0, r1, r2
	strh	r0, [r4, #0x12]
	b	.L162
.L165:
	.align	2, 0
.L164:
	.word	sTransitionData
	.word	-0x180
.L161:
	strh	r2, [r4, #0x12]
.L162:
	ldr	r0, .L166
	mov	r3, #0x10
	ldrsh	r2, [r4, r3]
	ldrh	r1, [r4, #0x12]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	str	r1, [sp]
	mov	r5, #0xa0
	str	r5, [sp, #0x4]
	mov	r1, #0x0
	mov	r3, #0x84
	bl	SetSinWave
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bgt	.L163	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x8]
	strh	r5, [r4, #0xa]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	strh	r1, [r4, #0xe]
.L163:
	ldr	r0, .L166+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L167:
	.align	2, 0
.L166:
	.word	gScanlineEffectRegBuffers
	.word	sTransitionData
.Lfe30:
	.size	 PatternWeave_FinishAppear,.Lfe30-PatternWeave_FinishAppear
	.align	2, 0
	.type	 PatternWeave_CircularMask,function
	.thumb_func
PatternWeave_CircularMask:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L174
	ldr	r0, [r0]
	ldrb	r1, [r0]
	mov	r3, #0x0
	strb	r3, [r0]
	ldrh	r2, [r4, #0xc]
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	ldr	r0, .L174+0x4
	cmp	r1, r0
	bgt	.L169	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r2, r1
	strh	r0, [r4, #0xc]
.L169:
	ldrh	r1, [r4, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L170	@cond_branch
	ldrh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	sub	r0, r1, r0
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L170	@cond_branch
	strh	r3, [r4, #0xa]
.L170:
	ldr	r0, .L174+0x8
	mov	r1, #0xa
	ldrsh	r3, [r4, r1]
	mov	r1, #0x78
	mov	r2, #0x50
	bl	SetCircularMask
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L172	@cond_branch
	ldr	r1, .L174+0xc
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L174+0x10
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L174+0x14
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	FadeScreenBlack
	ldr	r0, .L174+0x18
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L172:
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L173	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	ldr	r0, .L174+0x1c
	bl	SetVBlankCallback
.L173:
	ldr	r0, .L174
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L175:
	.align	2, 0
.L174:
	.word	sTransitionData
	.word	0x7ff
	.word	gScanlineEffectRegBuffers
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	Task_BigPokeball
	.word	VBlankCB_CircularMask
.Lfe31:
	.size	 PatternWeave_CircularMask,.Lfe31-PatternWeave_CircularMask
	.align	2, 0
	.type	 VBlankCB_SetWinAndBlend,function
	.thumb_func
VBlankCB_SetWinAndBlend:
	push	{r4, lr}
	ldr	r1, .L178
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L178+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L178+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	VBlankCB_BattleTransition
	ldr	r4, .L178+0xc
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L177	@cond_branch
	ldr	r1, .L178+0x10
	ldr	r0, .L178+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L178+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L177:
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x10]
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L179:
	.align	2, 0
.L178:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
.Lfe32:
	.size	 VBlankCB_SetWinAndBlend,.Lfe32-VBlankCB_SetWinAndBlend
	.align	2, 0
	.type	 VBlankCB_PatternWeave,function
	.thumb_func
VBlankCB_PatternWeave:
	push	{lr}
	bl	VBlankCB_SetWinAndBlend
	ldr	r1, .L181
	ldr	r0, .L181+0x4
	str	r0, [r1]
	ldr	r0, .L181+0x8
	str	r0, [r1, #0x4]
	ldr	r0, .L181+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L182:
	.align	2, 0
.L181:
	.word	0x40000b0
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x4000010
	.word	-0x5dbfffff
.Lfe33:
	.size	 VBlankCB_PatternWeave,.Lfe33-VBlankCB_PatternWeave
	.align	2, 0
	.type	 VBlankCB_CircularMask,function
	.thumb_func
VBlankCB_CircularMask:
	push	{lr}
	bl	VBlankCB_SetWinAndBlend
	ldr	r1, .L184
	ldr	r0, .L184+0x4
	str	r0, [r1]
	ldr	r0, .L184+0x8
	str	r0, [r1, #0x4]
	ldr	r0, .L184+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L185:
	.align	2, 0
.L184:
	.word	0x40000b0
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe34:
	.size	 VBlankCB_CircularMask,.Lfe34-VBlankCB_CircularMask
	.align	2, 0
	.type	 Task_PokeballsTrail,function
	.thumb_func
Task_PokeballsTrail:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L191
	ldr	r2, .L191+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L187:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L192:
	.align	2, 0
.L191:
	.word	sPokeballsTrail_Funcs
	.word	gTasks
.Lfe35:
	.size	 Task_PokeballsTrail,.Lfe35-Task_PokeballsTrail
	.align	2, 0
	.type	 PokeballsTrail_Init,function
	.thumb_func
PokeballsTrail_Init:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r0, sp, #0x4
	add	r1, sp, #0x8
	bl	GetBg0TilesDst
	ldr	r0, .L194
	ldr	r1, [sp, #0x8]
	mov	r2, #0x20
	bl	CpuSet
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, .L194+0x4
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L194+0x8
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r1}
	bx	r1
.L195:
	.align	2, 0
.L194:
	.word	sSlidingPokeball_Tilemap
	.word	0x5000200
	.word	sFieldEffectPal_Pokeball
.Lfe36:
	.size	 PokeballsTrail_Init,.Lfe36-PokeballsTrail_Init
	.align	2, 0
	.type	 PokeballsTrail_Main,function
	.thumb_func
PokeballsTrail_Main:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r7, r0, #0
	ldr	r1, .L202
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	add	r4, sp, #0x4
	ldr	r1, .L202+0x4
	add	r0, r4, #0
	mov	r2, #0xa
	bl	memcpy
	bl	Random
	mov	r5, #0x1
	and	r5, r5, r0
	mov	r1, #0x0
	mov	r8, r4
	ldr	r6, .L202+0x8
.L200:
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	lsl	r0, r5, #0x1
	add	r0, r0, sp
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	str	r0, [r6]
	lsl	r4, r1, #0x10
	asr	r4, r4, #0x10
	lsl	r0, r4, #0x5
	add	r0, r0, #0x10
	str	r0, [r6, #0x4]
	str	r5, [r6, #0x8]
	lsl	r0, r4, #0x1
	add	r0, r0, r8
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	str	r0, [r6, #0xc]
	mov	r0, #0x2d
	bl	FieldEffectStart
	add	r4, r4, #0x1
	lsl	r4, r4, #0x10
	mov	r0, #0x1
	eor	r5, r5, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsr	r1, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, #0x4
	ble	.L200	@cond_branch
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L203:
	.align	2, 0
.L202:
	.word	sPokeballsTrail_StartXCoords
	.word	sPokeballsTrail_Delays
	.word	gFieldEffectArguments
.Lfe37:
	.size	 PokeballsTrail_Main,.Lfe37-PokeballsTrail_Main
	.align	2, 0
	.type	 PokeballsTrail_End,function
	.thumb_func
PokeballsTrail_End:
	push	{lr}
	mov	r0, #0x2d
	bl	FieldEffectActiveListContains
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L205	@cond_branch
	bl	FadeScreenBlack
	ldr	r0, .L206
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L205:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L207:
	.align	2, 0
.L206:
	.word	Task_PokeballsTrail
.Lfe38:
	.size	 PokeballsTrail_End,.Lfe38-PokeballsTrail_End
	.align	2, 0
	.globl	FldEff_PokeballTrail
	.type	 FldEff_PokeballTrail,function
	.thumb_func
FldEff_PokeballTrail:
	push	{r4, r5, lr}
	ldr	r0, .L209
	ldr	r5, .L209+0x4
	mov	r2, #0x0
	ldrsh	r1, [r5, r2]
	mov	r3, #0x4
	ldrsh	r2, [r5, r3]
	mov	r3, #0x0
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L209+0x8
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4, #0x5]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldr	r0, [r5, #0x8]
	strh	r0, [r4, #0x2e]
	ldr	r0, [r5, #0xc]
	strh	r0, [r4, #0x30]
	ldr	r0, .L209+0xc
	strh	r0, [r4, #0x32]
	add	r0, r4, #0
	bl	InitSpriteAffineAnim
	ldrb	r1, [r5, #0x8]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L210:
	.align	2, 0
.L209:
	.word	sSpriteTemplate_Pokeball
	.word	gFieldEffectArguments
	.word	gSprites
	.word	0xffff
.Lfe39:
	.size	 FldEff_PokeballTrail,.Lfe39-FldEff_PokeballTrail
	.align	2, 0
	.type	 SpriteCB_FldEffPokeballTrail,function
	.thumb_func
SpriteCB_FldEffPokeballTrail:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r1, .L217
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L212	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L213
.L218:
	.align	2, 0
.L217:
	.word	sPokeballsTrail_Speeds
.L212:
	ldrh	r0, [r4, #0x20]
	lsl	r1, r0, #0x10
	lsr	r0, r1, #0x10
	cmp	r0, #0xf0
	bhi	.L214	@cond_branch
	asr	r0, r1, #0x13
	lsl	r0, r0, #0x10
	ldrh	r1, [r4, #0x22]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x13
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsr	r1, r0, #0x10
	asr	r5, r0, #0x10
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r5, r0
	beq	.L214	@cond_branch
	strh	r1, [r4, #0x32]
	mov	r0, #0x8
	bl	GetGpuReg
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r1, #0x1f
	and	r0, r0, r1
	lsl	r0, r0, #0xb
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsl	r2, r6, #0x10
	asr	r2, r2, #0x10
	sub	r1, r2, #0x2
	lsl	r1, r1, #0x5
	add	r1, r1, r5
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r6, .L219
	add	r3, r6, #0
	strh	r3, [r1]
	sub	r1, r2, #0x1
	lsl	r1, r1, #0x5
	add	r1, r1, r5
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	strh	r3, [r1]
	lsl	r1, r2, #0x5
	add	r1, r1, r5
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	strh	r3, [r1]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x5
	add	r2, r2, r5
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	strh	r3, [r2]
.L214:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	add	r0, r0, #0xf
	lsl	r0, r0, #0x10
	mov	r1, #0x87
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bls	.L213	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	FieldEffectStop
.L213:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	0xf001
.Lfe40:
	.size	 SpriteCB_FldEffPokeballTrail,.Lfe40-SpriteCB_FldEffPokeballTrail
	.align	2, 0
	.type	 Task_ClockwiseWipe,function
	.thumb_func
Task_ClockwiseWipe:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L226
	ldr	r2, .L226+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L222:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L222	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L227:
	.align	2, 0
.L226:
	.word	sClockwiseWipe_Funcs
	.word	gTasks
.Lfe41:
	.size	 Task_ClockwiseWipe,.Lfe41-Task_ClockwiseWipe
	.align	2, 0
	.type	 ClockwiseWipe_Init,function
	.thumb_func
ClockwiseWipe_Init:
	push	{r4, lr}
	add	r4, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	ldr	r0, .L234
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1, #0x2]
	mov	r0, #0x3f
	strh	r0, [r1, #0x4]
	ldr	r0, .L234+0x4
	strh	r0, [r1, #0x6]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	mov	r1, #0x0
	ldr	r3, .L234+0x8
	ldr	r2, .L234+0xc
.L232:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x9f
	bls	.L232	@cond_branch
	ldr	r0, .L234+0x10
	bl	SetVBlankCallback
	ldr	r0, .L234
	ldr	r1, [r0]
	mov	r0, #0x78
	strh	r0, [r1, #0x2c]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L235:
	.align	2, 0
.L234:
	.word	sTransitionData
	.word	0xf0f1
	.word	gScanlineEffectRegBuffers+0x780
	.word	0xf3f4
	.word	VBlankCB_ClockwiseWipe
.Lfe42:
	.size	 ClockwiseWipe_Init,.Lfe42-ClockwiseWipe_Init
	.align	2, 0
	.type	 ClockwiseWipe_TopRight,function
	.thumb_func
ClockwiseWipe_TopRight:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	ldr	r2, .L243
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, [r2]
	add	r0, r1, #0
	add	r0, r0, #0x24
	mov	r2, #0x2c
	ldrsh	r3, [r1, r2]
	mov	r1, #0x1
	neg	r1, r1
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x78
	mov	r2, #0x50
	bl	InitBlackWipe
	ldr	r5, .L243+0x4
.L237:
	ldr	r4, .L243
	ldr	r0, [r4]
	mov	r7, #0x2a
	ldrsh	r3, [r0, r7]
	lsl	r3, r3, #0x1
	add	r3, r3, r5
	ldrh	r1, [r0, #0x28]
	add	r1, r1, #0x1
	mov	r7, #0xf0
	lsl	r7, r7, #0x7
	add	r2, r7, #0
	orr	r1, r1, r2
	strh	r1, [r3]
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	UpdateBlackWipe
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L237	@cond_branch
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x2c]
	add	r0, r0, #0x20
	strh	r0, [r1, #0x2c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xef
	ble	.L242	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
.L242:
	ldr	r0, [r4]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L244:
	.align	2, 0
.L243:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.Lfe43:
	.size	 ClockwiseWipe_TopRight,.Lfe43-ClockwiseWipe_TopRight
	.align	2, 0
	.type	 ClockwiseWipe_Right,function
	.thumb_func
ClockwiseWipe_Right:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	mov	r8, r0
	add	r1, sp, #0xc
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r4, .L258
	ldr	r1, [r4]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x24
	mov	r2, #0x2e
	ldrsh	r1, [r1, r2]
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0xf0
	bl	InitBlackWipe
	mov	r9, r4
	mov	r7, r9
	add	r5, sp, #0xc
.L248:
	mov	r1, #0x78
	ldr	r3, [r7]
	ldrh	r0, [r3, #0x28]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r0, [r3, r2]
	cmp	r0, #0x4f
	ble	.L249	@cond_branch
	ldrh	r1, [r3, #0x28]
	mov	r4, #0xf0
.L249:
	ldr	r6, .L258+0x4
	mov	r0, #0x2a
	ldrsh	r2, [r3, r0]
	lsl	r2, r2, #0x1
	add	r2, r2, r6
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x8
	lsl	r0, r4, #0x10
	asr	r4, r0, #0x10
	orr	r4, r4, r1
	strh	r4, [r2]
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L247	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	UpdateBlackWipe
	strb	r0, [r5]
	b	.L248
.L259:
	.align	2, 0
.L258:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.L247:
	ldr	r1, [r7]
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x10
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0x9f
	ble	.L252	@cond_branch
	mov	r0, #0xf0
	strh	r0, [r1, #0x2c]
	mov	r1, r8
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L253
.L252:
	mov	r3, #0x2a
	ldrsh	r0, [r1, r3]
	cmp	r0, r2
	bge	.L253	@cond_branch
	add	r3, r4, #0
	ldr	r5, .L260
.L256:
	ldr	r2, [r5]
	ldrh	r0, [r2, #0x2a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0xf
	add	r0, r0, r6
	strh	r3, [r0]
	mov	r4, #0x2a
	ldrsh	r1, [r2, r4]
	mov	r4, #0x2e
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	blt	.L256	@cond_branch
.L253:
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L261:
	.align	2, 0
.L260:
	.word	sTransitionData
.Lfe44:
	.size	 ClockwiseWipe_Right,.Lfe44-ClockwiseWipe_Right
	.align	2, 0
	.type	 ClockwiseWipe_Bottom,function
	.thumb_func
ClockwiseWipe_Bottom:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	ldr	r2, .L269
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, [r2]
	add	r0, r1, #0
	add	r0, r0, #0x24
	mov	r2, #0x2c
	ldrsh	r3, [r1, r2]
	mov	r1, #0xa0
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x78
	mov	r2, #0x50
	bl	InitBlackWipe
	ldr	r5, .L269+0x4
.L263:
	ldr	r4, .L269
	ldr	r0, [r4]
	mov	r1, #0x2a
	ldrsh	r3, [r0, r1]
	lsl	r3, r3, #0x1
	add	r3, r3, r5
	ldrh	r1, [r0, #0x28]
	lsl	r1, r1, #0x8
	mov	r2, #0xf0
	orr	r1, r1, r2
	strh	r1, [r3]
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	UpdateBlackWipe
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L263	@cond_branch
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x2c]
	sub	r0, r0, #0x20
	strh	r0, [r1, #0x2c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L268	@cond_branch
	mov	r0, #0xa0
	strh	r0, [r1, #0x2e]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
.L268:
	ldr	r0, [r4]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L270:
	.align	2, 0
.L269:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.Lfe45:
	.size	 ClockwiseWipe_Bottom,.Lfe45-ClockwiseWipe_Bottom
	.align	2, 0
	.type	 ClockwiseWipe_Left,function
	.thumb_func
ClockwiseWipe_Left:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r9, r0
	add	r1, sp, #0xc
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r4, .L284
	ldr	r1, [r4]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x24
	mov	r2, #0x2e
	ldrsh	r1, [r1, r2]
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0x0
	bl	InitBlackWipe
	ldr	r7, .L284+0x4
	mov	sl, r7
	ldr	r0, .L284
	mov	r8, r0
	add	r6, sp, #0xc
.L274:
	mov	r1, r8
	ldr	r4, [r1]
	mov	r2, #0x2a
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	mov	r7, sl
	add	r5, r0, r7
	ldrb	r1, [r5]
	ldrh	r2, [r4, #0x28]
	add	r3, r2, #0
	mov	r7, #0x2e
	ldrsh	r0, [r4, r7]
	cmp	r0, #0x50
	bgt	.L275	@cond_branch
	mov	r2, #0x78
	add	r1, r3, #0
.L275:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x8
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	orr	r1, r1, r0
	mov	r7, #0x0
	strh	r1, [r5]
	ldrb	r0, [r6]
	cmp	r0, #0
	bne	.L273	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	UpdateBlackWipe
	strb	r0, [r6]
	b	.L274
.L285:
	.align	2, 0
.L284:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.L273:
	mov	r0, r8
	ldr	r2, [r0]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x10
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	cmp	r3, #0
	bgt	.L278	@cond_branch
	strh	r7, [r2, #0x2c]
	mov	r1, r9
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L279
.L278:
	mov	r4, #0x2a
	ldrsh	r0, [r2, r4]
	cmp	r0, r3
	ble	.L279	@cond_branch
	ldr	r6, .L286
	add	r3, r1, #0
	ldr	r5, .L286+0x4
.L282:
	ldr	r2, [r5]
	ldrh	r0, [r2, #0x2a]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0xf
	add	r0, r0, r6
	strh	r3, [r0]
	mov	r7, #0x2a
	ldrsh	r1, [r2, r7]
	mov	r4, #0x2e
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	bgt	.L282	@cond_branch
.L279:
	ldr	r7, .L286+0x4
	ldr	r0, [r7]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L287:
	.align	2, 0
.L286:
	.word	gScanlineEffectRegBuffers
	.word	sTransitionData
.Lfe46:
	.size	 ClockwiseWipe_Left,.Lfe46-ClockwiseWipe_Left
	.align	2, 0
	.type	 ClockwiseWipe_TopLeft,function
	.thumb_func
ClockwiseWipe_TopLeft:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r7, r0, #0
	ldr	r1, .L296
	ldr	r0, [r1]
	ldrb	r2, [r0]
	mov	r2, #0x0
	strb	r2, [r0]
	ldr	r1, [r1]
	add	r0, r1, #0
	add	r0, r0, #0x24
	mov	r4, #0x2c
	ldrsh	r3, [r1, r4]
	str	r2, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x78
	mov	r2, #0x50
	bl	InitBlackWipe
	ldr	r6, .L296+0x4
.L289:
	mov	r2, #0x78
	ldr	r5, .L296
	ldr	r3, [r5]
	ldrh	r4, [r3, #0x28]
	mov	r1, #0x28
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x77
	ble	.L292	@cond_branch
	mov	r2, #0x0
	mov	r4, #0xf0
.L292:
	mov	r0, #0x2a
	ldrsh	r1, [r3, r0]
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	lsl	r2, r2, #0x8
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	orr	r0, r0, r2
	strh	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	UpdateBlackWipe
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L289	@cond_branch
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x2c]
	add	r1, r1, #0x20
	strh	r1, [r0, #0x2c]
	mov	r1, #0x28
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x78
	ble	.L295	@cond_branch
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x8]
.L295:
	ldr	r0, [r5]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L297:
	.align	2, 0
.L296:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.Lfe47:
	.size	 ClockwiseWipe_TopLeft,.Lfe47-ClockwiseWipe_TopLeft
	.align	2, 0
	.type	 ClockwiseWipe_End,function
	.thumb_func
ClockwiseWipe_End:
	push	{lr}
	ldr	r1, .L299
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L299+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L299+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	FadeScreenBlack
	ldr	r0, .L299+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L300:
	.align	2, 0
.L299:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	Task_ClockwiseWipe
.Lfe48:
	.size	 ClockwiseWipe_End,.Lfe48-ClockwiseWipe_End
	.align	2, 0
	.type	 VBlankCB_ClockwiseWipe,function
	.thumb_func
VBlankCB_ClockwiseWipe:
	push	{r4, r5, lr}
	ldr	r5, .L303
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L303+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L303+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xa]
	bl	VBlankCB_BattleTransition
	ldr	r4, .L303+0xc
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L302	@cond_branch
	ldr	r1, .L303+0x10
	ldr	r0, .L303+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L303+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L302:
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r4, .L303+0x14
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r4, r4, r0
	ldrh	r1, [r4]
	mov	r0, #0x40
	bl	SetGpuReg
	str	r4, [r5]
	ldr	r0, .L303+0x1c
	str	r0, [r5, #0x4]
	ldr	r0, .L303+0x20
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe49:
	.size	 VBlankCB_ClockwiseWipe,.Lfe49-VBlankCB_ClockwiseWipe
	.align	2, 0
	.type	 Task_Ripple,function
	.thumb_func
Task_Ripple:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L310
	ldr	r2, .L310+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L306:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L306	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L311:
	.align	2, 0
.L310:
	.word	sRipple_Funcs
	.word	gTasks
.Lfe50:
	.size	 Task_Ripple,.Lfe50-Task_Ripple
	.align	2, 0
	.type	 Ripple_Init,function
	.thumb_func
Ripple_Init:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	mov	r2, #0x0
	ldr	r4, .L318
	ldr	r3, .L318+0x4
.L316:
	lsl	r1, r2, #0x1
	add	r1, r1, r4
	ldr	r0, [r3]
	ldrh	r0, [r0, #0x16]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x9f
	bls	.L316	@cond_branch
	ldr	r0, .L318+0x8
	bl	SetVBlankCallback
	ldr	r0, .L318+0xc
	bl	SetHBlankCallback
	mov	r0, #0x2
	bl	EnableInterrupts
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x1
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L319:
	.align	2, 0
.L318:
	.word	gScanlineEffectRegBuffers+0x780
	.word	sTransitionData
	.word	VBlankCB_Ripple
	.word	HBlankCB_Ripple
.Lfe51:
	.size	 Ripple_Init,.Lfe51-Ripple_Init
	.align	2, 0
	.type	 Ripple_Main,function
	.thumb_func
Ripple_Main:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r0, .L329
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldrh	r2, [r6, #0xc]
	lsl	r1, r2, #0x10
	asr	r0, r1, #0x18
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldrh	r4, [r6, #0xa]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	mov	r8, r0
	mov	r5, #0x80
	lsl	r5, r5, #0x3
	add	r0, r4, r5
	strh	r0, [r6, #0xa]
	ldr	r0, .L329+0x4
	cmp	r1, r0
	bgt	.L321	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	add	r0, r2, r1
	strh	r0, [r6, #0xc]
.L321:
	mov	r5, #0x0
	lsl	r7, r3, #0x10
.L325:
	lsr	r0, r4, #0x8
	asr	r1, r7, #0x10
	bl	Sin
	ldr	r1, .L329+0x8
	lsl	r2, r5, #0x1
	add	r2, r2, r1
	ldr	r1, .L329
	ldr	r1, [r1]
	ldrh	r1, [r1, #0x16]
	add	r0, r0, r1
	strh	r0, [r2]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, r8
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r5, #0x9f
	bls	.L325	@cond_branch
	ldrh	r0, [r6, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x29
	bne	.L327	@cond_branch
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x10]
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x8
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L327:
	mov	r5, #0x10
	ldrsh	r0, [r6, r5]
	cmp	r0, #0
	beq	.L328	@cond_branch
	ldr	r0, .L329+0xc
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L328	@cond_branch
	ldr	r0, .L329+0x10
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L328:
	ldr	r0, .L329
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L330:
	.align	2, 0
.L329:
	.word	sTransitionData
	.word	0x1fff0000
	.word	gScanlineEffectRegBuffers
	.word	gPaletteFade
	.word	Task_Ripple
.Lfe52:
	.size	 Ripple_Main,.Lfe52-Ripple_Main
	.align	2, 0
	.type	 VBlankCB_Ripple,function
	.thumb_func
VBlankCB_Ripple:
	push	{lr}
	bl	VBlankCB_BattleTransition
	ldr	r0, .L333
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L332	@cond_branch
	ldr	r1, .L333+0x4
	ldr	r0, .L333+0x8
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L333+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L332:
	pop	{r0}
	bx	r0
.L334:
	.align	2, 0
.L333:
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
.Lfe53:
	.size	 VBlankCB_Ripple,.Lfe53-VBlankCB_Ripple
	.align	2, 0
	.type	 HBlankCB_Ripple,function
	.thumb_func
HBlankCB_Ripple:
	ldr	r1, .L336
	ldr	r0, .L336+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L336+0x8
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	bx	lr
.L337:
	.align	2, 0
.L336:
	.word	gScanlineEffectRegBuffers
	.word	0x4000006
	.word	0x4000016
.Lfe54:
	.size	 HBlankCB_Ripple,.Lfe54-HBlankCB_Ripple
	.align	2, 0
	.type	 Task_Wave,function
	.thumb_func
Task_Wave:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L343
	ldr	r2, .L343+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L339:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L339	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L344:
	.align	2, 0
.L343:
	.word	sWave_Funcs
	.word	gTasks
.Lfe55:
	.size	 Task_Wave,.Lfe55-Task_Wave
	.align	2, 0
	.type	 Wave_Init,function
	.thumb_func
Wave_Init:
	push	{r4, lr}
	add	r4, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	ldr	r0, .L351
	ldr	r1, [r0]
	mov	r2, #0x0
	mov	r0, #0x3f
	strh	r0, [r1, #0x2]
	strh	r2, [r1, #0x4]
	mov	r0, #0xf0
	strh	r0, [r1, #0x6]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	mov	r1, #0x0
	ldr	r3, .L351+0x4
	mov	r2, #0xf2
.L349:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9f
	bls	.L349	@cond_branch
	ldr	r0, .L351+0x8
	bl	SetVBlankCallback
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L352:
	.align	2, 0
.L351:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers+0x780
	.word	VBlankCB_Wave
.Lfe56:
	.size	 Wave_Init,.Lfe56-Wave_Init
	.align	2, 0
	.type	 Wave_Main,function
	.thumb_func
Wave_Main:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	ldr	r0, .L363
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r7, .L363+0x4
	ldrh	r0, [r4, #0xc]
	ldrb	r5, [r4, #0xc]
	add	r0, r0, #0x10
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x8
	strh	r0, [r4, #0xa]
	mov	r6, #0x0
	mov	r0, #0x1
	mov	r8, r0
.L357:
	add	r0, r5, #0
	mov	r1, #0x28
	bl	Sin
	ldrh	r1, [r4, #0xa]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r0, #0
	bge	.L358	@cond_branch
	mov	r1, #0x0
.L358:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf0
	ble	.L359	@cond_branch
	mov	r1, #0xf0
.L359:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x8
	mov	r2, #0xf1
	orr	r1, r1, r2
	strh	r1, [r7]
	cmp	r0, #0xef
	bgt	.L356	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
.L356:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r5, #0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r7, #0x2
	cmp	r6, #0x9f
	bls	.L357	@cond_branch
	mov	r1, r8
	cmp	r1, #0
	beq	.L362	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L362:
	ldr	r0, .L363
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L364:
	.align	2, 0
.L363:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.Lfe57:
	.size	 Wave_Main,.Lfe57-Wave_Main
	.align	2, 0
	.type	 Wave_End,function
	.thumb_func
Wave_End:
	push	{lr}
	ldr	r1, .L366
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L366+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L366+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	FadeScreenBlack
	ldr	r0, .L366+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L367:
	.align	2, 0
.L366:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	Task_Wave
.Lfe58:
	.size	 Wave_End,.Lfe58-Wave_End
	.align	2, 0
	.type	 VBlankCB_Wave,function
	.thumb_func
VBlankCB_Wave:
	push	{r4, r5, lr}
	ldr	r4, .L370
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L370+0x4
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L370+0x8
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xa]
	bl	VBlankCB_BattleTransition
	ldr	r5, .L370+0xc
	ldr	r0, [r5]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L369	@cond_branch
	ldr	r1, .L370+0x10
	ldr	r0, .L370+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L370+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L369:
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L370+0x1c
	str	r0, [r4]
	ldr	r0, .L370+0x20
	str	r0, [r4, #0x4]
	ldr	r0, .L370+0x24
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L371:
	.align	2, 0
.L370:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe59:
	.size	 VBlankCB_Wave,.Lfe59-VBlankCB_Wave
	.align	2, 0
	.type	 Task_Spiral,function
	.thumb_func
Task_Spiral:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L377
	ldr	r2, .L377+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L373:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L373	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L378:
	.align	2, 0
.L377:
	.word	sSpiral_Funcs
	.word	gTasks
.Lfe60:
	.size	 Task_Spiral,.Lfe60-Task_Spiral
	.align	2, 0
	.type	 Spiral_UpdateFrame,function
	.thumb_func
Spiral_UpdateFrame:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x4]
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0xa0
	lsl	r1, r1, #0x11
	ldr	r4, .L495
	ldr	r3, .L495+0x4
	mov	r2, #0x78
.L383:
	asr	r0, r1, #0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r4
	strh	r2, [r1]
	add	r0, r0, #0x1
	lsl	r1, r0, #0x10
	asr	r0, r1, #0x10
	cmp	r0, r3
	ble	.L383	@cond_branch
	lsl	r0, r5, #0x10
	mov	r1, #0x0
	mov	r9, r1
	str	r0, [sp, #0xc]
	cmp	r0, #0
	bgt	.LCB3976
	b	.L386	@long jump
.LCB3976:
.L388:
	mov	r3, sl
	lsr	r2, r3, #0x3
	ldr	r4, [sp]
	add	r0, r2, r4
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r0, sl
	add	r0, r0, #0x1
	asr	r1, r0, #0x3
	str	r0, [sp, #0x8]
	cmp	r2, r1
	beq	.L389	@cond_branch
	lsl	r1, r3, #0x10
	mov	r6, #0x80
	lsl	r6, r6, #0x9
	add	r0, r1, r6
	lsr	r0, r0, #0x10
	mov	r8, r0
	add	r0, r1, #0
	b	.L390
.L496:
	.align	2, 0
.L495:
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x3bf
.L389:
	lsl	r0, r3, #0x10
	lsr	r1, r0, #0x10
	mov	r8, r1
.L390:
	asr	r4, r0, #0x10
	mov	r0, sl
	add	r1, r4, #0
	bl	Sin
	mov	r5, #0x50
	sub	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r0, sl
	add	r1, r4, #0
	str	r2, [sp, #0x10]
	bl	Cos
	add	r0, r0, #0x78
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r6, [sp, #0x8]
	mov	r3, r8
	lsl	r4, r3, #0x10
	asr	r4, r4, #0x10
	add	r0, r6, #0
	add	r1, r4, #0
	bl	Sin
	sub	r5, r5, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	add	r1, r4, #0
	bl	Cos
	add	r0, r0, #0x78
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bge	.L391	@cond_branch
	lsl	r0, r5, #0x10
	cmp	r0, #0
	bge	.LCB4068
	b	.L387	@long jump
.LCB4068:
.L391:
	cmp	r1, #0x9f
	ble	.L392	@cond_branch
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.LCB4075
	b	.L387	@long jump
.LCB4075:
.L392:
	cmp	r1, #0
	bge	.L393	@cond_branch
	mov	r2, #0x0
.L393:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L394	@cond_branch
	mov	r2, #0x9f
.L394:
	lsl	r0, r7, #0x10
	cmp	r0, #0
	bge	.L395	@cond_branch
	mov	r7, #0x0
.L395:
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L396	@cond_branch
	mov	r7, #0xff
.L396:
	lsl	r0, r5, #0x10
	cmp	r0, #0
	bge	.L397	@cond_branch
	mov	r5, #0x0
.L397:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L398	@cond_branch
	mov	r5, #0x9f
.L398:
	lsl	r0, r3, #0x10
	cmp	r0, #0
	bge	.L399	@cond_branch
	mov	r3, #0x0
.L399:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L400	@cond_branch
	mov	r3, #0xff
.L400:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r2, #0x10
	asr	r2, r1, #0x10
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, sl
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x18
	add	r6, r1, #0
	cmp	r0, #0
	blt	.L401	@cond_branch
	mov	r4, #0xa0
	lsl	r4, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x1
	ldr	r1, .L497
	add	r0, r0, r1
	strh	r7, [r0]
	lsl	r0, r5, #0x10
	add	r4, r0, #0
	cmp	r4, #0
	bne	.LCB4151
	b	.L387	@long jump
.LCB4151:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r7, #0x10
	asr	r2, r1, #0x10
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	mov	r8, r0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r8, r0
	bge	.L403	@cond_branch
	cmp	r2, #0x1
	ble	.L403	@cond_branch
	sub	r0, r2, #0x1
	b	.L493
.L498:
	.align	2, 0
.L497:
	.word	gScanlineEffectRegBuffers+0x780
.L403:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L404	@cond_branch
	asr	r0, r1, #0x10
	cmp	r0, #0xfe
	bgt	.L404	@cond_branch
	add	r0, r0, #0x1
.L493:
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
.L404:
	add	r0, r4, #0
	asr	r1, r0, #0x10
	cmp	r1, #0
	bge	.L406	@cond_branch
	asr	r2, r6, #0x10
	ldr	r3, .L499
.L410:
	asr	r1, r0, #0x10
	add	r0, r2, r1
	mov	r4, #0xa0
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	strh	r7, [r0]
	add	r1, r1, #0x1
	lsl	r0, r1, #0x10
	cmp	r0, #0
	blt	.L410	@cond_branch
	b	.L387
.L500:
	.align	2, 0
.L499:
	.word	gScanlineEffectRegBuffers+0x780
.L406:
	cmp	r1, #0
	ble	.L387	@cond_branch
	asr	r2, r6, #0x10
	ldr	r3, .L501
.L416:
	lsl	r1, r5, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, r1
	mov	r6, #0xa0
	lsl	r6, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	strh	r7, [r0]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	cmp	r1, #0
	bgt	.L416	@cond_branch
	b	.L387
.L502:
	.align	2, 0
.L501:
	.word	gScanlineEffectRegBuffers+0x780
.L401:
	mov	r1, #0xf0
	lsl	r1, r1, #0x1
	add	r0, r2, r1
	lsl	r0, r0, #0x1
	ldr	r2, .L503
	add	r0, r0, r2
	strh	r7, [r0]
	lsl	r0, r5, #0x10
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L387	@cond_branch
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r7, #0x10
	asr	r2, r1, #0x10
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	mov	r8, r0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r8, r0
	bge	.L420	@cond_branch
	cmp	r2, #0x1
	ble	.L420	@cond_branch
	sub	r0, r2, #0x1
	b	.L494
.L504:
	.align	2, 0
.L503:
	.word	gScanlineEffectRegBuffers+0x780
.L420:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L421	@cond_branch
	asr	r0, r1, #0x10
	cmp	r0, #0xfe
	bgt	.L421	@cond_branch
	add	r0, r0, #0x1
.L494:
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
.L421:
	add	r0, r4, #0
	asr	r1, r0, #0x10
	cmp	r1, #0
	bge	.L423	@cond_branch
	asr	r2, r6, #0x10
	ldr	r3, .L505
.L427:
	asr	r1, r0, #0x10
	add	r0, r2, r1
	mov	r4, #0xf0
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	strh	r7, [r0]
	add	r1, r1, #0x1
	lsl	r0, r1, #0x10
	cmp	r0, #0
	blt	.L427	@cond_branch
	b	.L387
.L506:
	.align	2, 0
.L505:
	.word	gScanlineEffectRegBuffers+0x780
.L423:
	cmp	r1, #0
	ble	.L387	@cond_branch
	asr	r2, r6, #0x10
	ldr	r3, .L507
.L433:
	lsl	r1, r5, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, r1
	mov	r6, #0xf0
	lsl	r6, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	strh	r7, [r0]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	cmp	r1, #0
	bgt	.L433	@cond_branch
.L387:
	mov	r1, r9
	lsl	r0, r1, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r0, r0, r2
	ldr	r3, [sp, #0x8]
	lsl	r1, r3, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsr	r4, r0, #0x10
	mov	r9, r4
	asr	r0, r0, #0x10
	ldr	r6, [sp, #0xc]
	asr	r1, r6, #0xc
	cmp	r0, r1
	bge	.LCB4417
	b	.L388	@long jump
.LCB4417:
.L386:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0
	beq	.L437	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0xa
	ldr	r1, [sp, #0xc]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L436	@cond_branch
.L437:
	mov	r2, #0x0
	mov	r9, r2
	ldr	r4, .L507
	mov	r5, #0xa0
	lsl	r5, r5, #0x1
.L441:
	mov	r3, r9
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x10
	lsl	r3, r1, #0x1
	ldr	r6, [sp, #0x4]
	add	r3, r3, r6
	lsl	r3, r3, #0x1
	add	r3, r3, r4
	add	r0, r1, r5
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r2, [r0]
	lsl	r2, r2, #0x8
	mov	r6, #0xf0
	lsl	r6, r6, #0x1
	add	r0, r1, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	orr	r2, r2, r0
	strh	r2, [r3]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	mov	r9, r0
	asr	r1, r1, #0x10
	cmp	r1, #0x9f
	ble	.L441	@cond_branch
	b	.L379
.L508:
	.align	2, 0
.L507:
	.word	gScanlineEffectRegBuffers+0x780
.L436:
	ldr	r1, [sp, #0xc]
	asr	r4, r1, #0x10
	lsl	r0, r4, #0x14
	asr	r0, r0, #0x10
	lsl	r5, r4, #0x1
	ldr	r2, [sp]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r1, r1, r5
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r4, #0
	bge	.L486	@cond_branch
	add	r4, r4, #0x3
.L486:
	asr	r0, r4, #0x2
	cmp	r0, #0x1
	beq	.L455	@cond_branch
	cmp	r0, #0x1
	bgt	.L487	@cond_branch
	cmp	r0, #0
	beq	.L444	@cond_branch
	b	.L443
.L487:
	cmp	r0, #0x2
	bne	.LCB4523
	b	.L464	@long jump
.LCB4523:
	cmp	r0, #0x3
	bne	.LCB4525
	b	.L475	@long jump
.LCB4525:
	b	.L443
.L444:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x50
	ble	.L445	@cond_branch
	mov	r2, #0x50
.L445:
	mov	r9, r2
	lsl	r1, r2, #0x10
	cmp	r1, #0
	bgt	.LCB4543
	b	.L443	@long jump
.LCB4543:
	ldr	r0, .L509
	add	r0, r5, r0
	mov	r3, #0x0
	ldrsh	r4, [r0, r3]
	ldr	r6, .L509+0x4
.L449:
	ldr	r0, .L509+0x8
	ldr	r5, [r0]
	asr	r2, r1, #0x10
	mov	r0, r2
	mul	r0, r0, r4
	asr	r0, r0, #0x8
	add	r0, r0, #0x78
	lsl	r1, r0, #0x10
	lsr	r7, r1, #0x10
	strh	r0, [r5, #0x28]
	lsl	r1, r7, #0x10
	lsr	r0, r1, #0x10
	cmp	r0, #0xff
	bhi	.L448	@cond_branch
	mov	r3, #0xc8
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	sub	r0, r0, r2
	strh	r0, [r5, #0x14]
	add	r0, r3, #0
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r3, r0, r6
	ldrh	r0, [r3]
	strh	r0, [r5, #0x38]
	mov	r0, #0x8c
	lsl	r0, r0, #0x2
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r6
	ldrh	r0, [r2]
	asr	r1, r1, #0x10
	cmp	r0, r1
	bge	.L451	@cond_branch
	mov	r0, #0x78
	strh	r0, [r2]
	b	.L448
.L510:
	.align	2, 0
.L509:
	.word	sSpiral_AngleData
	.word	gScanlineEffectRegBuffers+0x780
	.word	sTransitionData
.L451:
	ldrh	r0, [r3]
	cmp	r0, r1
	bge	.L448	@cond_branch
	strh	r7, [r3]
.L448:
	mov	r1, r9
	lsl	r0, r1, #0x10
	ldr	r2, .L511
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r0, #0x10
	cmp	r1, #0
	bgt	.L449	@cond_branch
	b	.L443
.L512:
	.align	2, 0
.L511:
	.word	-0x10000
.L455:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x50
	ble	.L456	@cond_branch
	mov	r2, #0x50
.L456:
	mov	r9, r2
	lsl	r1, r2, #0x10
	cmp	r1, #0
	bgt	.LCB4642
	b	.L443	@long jump
.LCB4642:
	ldr	r0, .L513
	add	r0, r5, r0
	mov	r3, #0x0
	ldrsh	r4, [r0, r3]
	ldr	r6, .L513+0x4
.L460:
	ldr	r0, .L513+0x8
	ldr	r3, [r0]
	asr	r2, r1, #0x10
	mov	r0, r2
	mul	r0, r0, r4
	asr	r0, r0, #0x8
	add	r0, r0, #0x78
	lsl	r1, r0, #0x10
	lsr	r7, r1, #0x10
	strh	r0, [r3, #0x28]
	lsl	r5, r7, #0x10
	lsr	r0, r5, #0x10
	cmp	r0, #0xff
	bhi	.L459	@cond_branch
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	sub	r0, r0, r2
	strh	r0, [r3, #0x14]
	add	r0, r1, #0
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r6
	ldrh	r0, [r2]
	strh	r0, [r3, #0x38]
	ldrh	r1, [r2]
	asr	r0, r5, #0x10
	cmp	r1, r0
	bge	.L459	@cond_branch
	strh	r7, [r2]
.L459:
	mov	r2, r9
	lsl	r0, r2, #0x10
	ldr	r3, .L513+0xc
	add	r0, r0, r3
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r0, #0x10
	cmp	r1, #0
	bgt	.L460	@cond_branch
	b	.L443
.L514:
	.align	2, 0
.L513:
	.word	sSpiral_AngleData
	.word	gScanlineEffectRegBuffers+0x780
	.word	sTransitionData
	.word	-0x10000
.L464:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x4f
	neg	r1, r1
	cmp	r0, r1
	bge	.L465	@cond_branch
	ldr	r2, .L515
.L465:
	mov	r9, r2
	lsl	r1, r2, #0x10
	cmp	r1, #0
	bgt	.L443	@cond_branch
	ldr	r0, .L515+0x4
	add	r0, r5, r0
	mov	r6, #0x0
	ldrsh	r4, [r0, r6]
	ldr	r6, .L515+0x8
.L469:
	ldr	r0, .L515+0xc
	ldr	r5, [r0]
	asr	r2, r1, #0x10
	mov	r0, r2
	mul	r0, r0, r4
	asr	r0, r0, #0x8
	add	r0, r0, #0x78
	lsl	r1, r0, #0x10
	lsr	r7, r1, #0x10
	strh	r0, [r5, #0x28]
	lsl	r1, r7, #0x10
	lsr	r0, r1, #0x10
	cmp	r0, #0xff
	bhi	.L468	@cond_branch
	mov	r3, #0x8c
	lsl	r3, r3, #0x2
	add	r0, r3, #0
	sub	r0, r0, r2
	strh	r0, [r5, #0x14]
	add	r0, r3, #0
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r3, r0, r6
	ldrh	r0, [r3]
	strh	r0, [r5, #0x38]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r6
	ldrh	r0, [r2]
	asr	r1, r1, #0x10
	cmp	r0, r1
	blt	.L471	@cond_branch
	mov	r0, #0x78
	strh	r0, [r2]
	b	.L468
.L516:
	.align	2, 0
.L515:
	.word	0xffb1
	.word	sSpiral_AngleData
	.word	gScanlineEffectRegBuffers+0x780
	.word	sTransitionData
.L471:
	ldrh	r0, [r3]
	cmp	r0, r1
	ble	.L468	@cond_branch
	strh	r7, [r3]
.L468:
	mov	r1, r9
	lsl	r0, r1, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r0, #0x10
	cmp	r1, #0
	ble	.L469	@cond_branch
	b	.L443
.L475:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x4f
	neg	r1, r1
	cmp	r0, r1
	bge	.L476	@cond_branch
	ldr	r2, .L517
.L476:
	mov	r9, r2
	lsl	r1, r2, #0x10
	cmp	r1, #0
	bgt	.L443	@cond_branch
	ldr	r0, .L517+0x4
	add	r0, r5, r0
	mov	r3, #0x0
	ldrsh	r4, [r0, r3]
	ldr	r6, .L517+0x8
	mov	r8, r6
	ldr	r6, .L517+0xc
.L480:
	mov	r0, r8
	ldr	r3, [r0]
	asr	r2, r1, #0x10
	mov	r0, r2
	mul	r0, r0, r4
	asr	r0, r0, #0x8
	add	r0, r0, #0x78
	lsl	r1, r0, #0x10
	lsr	r7, r1, #0x10
	strh	r0, [r3, #0x28]
	lsl	r5, r7, #0x10
	lsr	r0, r5, #0x10
	cmp	r0, #0xff
	bhi	.L479	@cond_branch
	mov	r1, #0x8c
	lsl	r1, r1, #0x2
	add	r0, r1, #0
	sub	r0, r0, r2
	strh	r0, [r3, #0x14]
	add	r0, r1, #0
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r6
	ldrh	r0, [r2]
	strh	r0, [r3, #0x38]
	ldrh	r1, [r2]
	asr	r0, r5, #0x10
	cmp	r1, r0
	ble	.L479	@cond_branch
	strh	r7, [r2]
.L479:
	mov	r2, r9
	lsl	r0, r2, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r0, r3
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r0, #0x10
	cmp	r1, #0
	ble	.L480	@cond_branch
.L443:
	mov	r4, #0x0
	mov	r9, r4
	ldr	r4, .L517+0xc
	mov	r5, #0xa0
	lsl	r5, r5, #0x1
.L491:
	mov	r6, r9
	lsl	r1, r6, #0x10
	asr	r1, r1, #0x10
	lsl	r3, r1, #0x1
	ldr	r0, [sp, #0x4]
	add	r3, r3, r0
	lsl	r3, r3, #0x1
	add	r3, r3, r4
	add	r0, r1, r5
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r2, [r0]
	lsl	r2, r2, #0x8
	mov	r6, #0xf0
	lsl	r6, r6, #0x1
	add	r0, r1, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	orr	r2, r2, r0
	strh	r2, [r3]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	mov	r9, r0
	asr	r1, r1, #0x10
	cmp	r1, #0x9f
	ble	.L491	@cond_branch
.L379:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	0xffb1
	.word	sSpiral_AngleData
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers+0x780
.Lfe61:
	.size	 Spiral_UpdateFrame,.Lfe61-Spiral_UpdateFrame
	.align	2, 0
	.type	 Spiral_Init,function
	.thumb_func
Spiral_Init:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	ldr	r0, .L520
	ldr	r1, [r0]
	mov	r4, #0x0
	strh	r4, [r1, #0x2]
	mov	r0, #0x3f
	strh	r0, [r1, #0x4]
	ldr	r0, .L520+0x4
	strh	r0, [r1, #0x6]
	ldr	r0, .L520+0x8
	strh	r0, [r1, #0x8]
	ldr	r0, .L520+0xc
	strh	r0, [r1, #0xc]
	strh	r4, [r1, #0x20]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	Spiral_UpdateFrame
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1
	bl	Spiral_UpdateFrame
	ldr	r1, .L520+0x10
	ldr	r0, .L520+0x14
	str	r0, [r1]
	ldr	r2, .L520+0x18
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L520+0x1c
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldr	r0, .L520+0x20
	bl	SetVBlankCallback
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	strh	r4, [r5, #0xa]
	strh	r4, [r5, #0xc]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L521:
	.align	2, 0
.L520:
	.word	sTransitionData
	.word	0x7878
	.word	0x3070
	.word	0x1090
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers+0x780
	.word	-0x780
	.word	-0x7ffffec0
	.word	VBlankCB_Spiral
.Lfe62:
	.size	 Spiral_Init,.Lfe62-Spiral_Init
	.align	2, 0
	.type	 Spiral_End,function
	.thumb_func
Spiral_End:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	mov	r2, #0x1
	bl	Spiral_UpdateFrame
	ldr	r5, .L529
	ldr	r1, [r5]
	ldrb	r0, [r1]
	mov	r2, #0x1
	mov	r8, r2
	ldrb	r2, [r1]
	mov	r7, #0x0
	mov	r2, r8
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x11
	bne	.L523	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mov	r1, #0x10
	mov	r2, #0x0
	bl	Spiral_UpdateFrame
	ldrh	r1, [r4, #0xc]
	mov	r6, #0x30
	sub	r0, r6, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r0, #0
	bge	.L524	@cond_branch
	mov	r3, #0x0
.L524:
	add	r0, r1, #0
	add	r0, r0, #0x70
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L525	@cond_branch
	mov	r2, #0xff
.L525:
	ldr	r0, [r5]
	orr	r2, r2, r3
	strh	r2, [r0, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x20
	strh	r0, [r4, #0xc]
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	mov	r1, #0x0
	mov	r2, #0x1
	bl	Spiral_UpdateFrame
	ldrh	r1, [r4, #0xc]
	sub	r0, r6, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r0, #0
	bge	.L526	@cond_branch
	mov	r3, #0x0
.L526:
	add	r0, r1, #0
	add	r0, r0, #0x70
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L527	@cond_branch
	mov	r2, #0xff
.L527:
	ldr	r1, [r5]
	orr	r2, r2, r3
	strh	r2, [r1, #0xc]
	ldrb	r0, [r1]
	mov	r2, r8
	orr	r0, r0, r2
	ldrb	r2, [r1]
	orr	r0, r0, r7
	strb	r0, [r1]
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x9f
	ble	.L523	@cond_branch
	ldr	r1, [r5]
	mov	r0, #0x1
	strh	r0, [r1, #0x20]
	bl	FadeScreenBlack
.L523:
	mov	r0, #0x0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L530:
	.align	2, 0
.L529:
	.word	sTransitionData
.Lfe63:
	.size	 Spiral_End,.Lfe63-Spiral_End
	.align	2, 0
	.type	 VBlankCB_Spiral,function
	.thumb_func
VBlankCB_Spiral:
	push	{r4, r5, r6, lr}
	ldr	r5, .L535
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L535+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L535+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xa]
	bl	VBlankCB_BattleTransition
	ldr	r4, .L535+0xc
	ldr	r2, [r4]
	mov	r0, #0x20
	ldrsh	r3, [r2, r0]
	cmp	r3, #0
	beq	.L532	@cond_branch
	ldr	r0, .L535+0x10
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	b	.L533
.L536:
	.align	2, 0
.L535:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionData
	.word	Task_Spiral
.L532:
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L534	@cond_branch
	ldr	r1, .L537
	ldr	r0, .L537+0x4
	str	r0, [r1]
	ldr	r6, .L537+0x8
	add	r0, r0, r6
	str	r0, [r1, #0x4]
	ldr	r0, .L537+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r2]
	strb	r3, [r2]
.L534:
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xc]
	mov	r0, #0x46
	bl	SetGpuReg
	ldr	r4, .L537+0x10
	ldrh	r1, [r4]
	mov	r0, #0x40
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2]
	mov	r0, #0x42
	bl	SetGpuReg
	str	r4, [r5]
	ldr	r0, .L537+0x14
	str	r0, [r5, #0x4]
	ldr	r0, .L537+0x18
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
.L533:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L538:
	.align	2, 0
.L537:
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers+0x780
	.word	-0x780
	.word	-0x7ffffec0
	.word	gScanlineEffectRegBuffers
	.word	0x4000040
	.word	-0x59bfffff
.Lfe64:
	.size	 VBlankCB_Spiral,.Lfe64-VBlankCB_Spiral
	.align	2, 0
	.type	 Task_Lorelei,function
	.thumb_func
Task_Lorelei:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L540
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x26]
	bl	DoMugshotTransition
	pop	{r0}
	bx	r0
.L541:
	.align	2, 0
.L540:
	.word	gTasks
.Lfe65:
	.size	 Task_Lorelei,.Lfe65-Task_Lorelei
	.align	2, 0
	.type	 Task_Bruno,function
	.thumb_func
Task_Bruno:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L543
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x1
	strh	r2, [r1, #0x26]
	bl	DoMugshotTransition
	pop	{r0}
	bx	r0
.L544:
	.align	2, 0
.L543:
	.word	gTasks
.Lfe66:
	.size	 Task_Bruno,.Lfe66-Task_Bruno
	.align	2, 0
	.type	 Task_Agatha,function
	.thumb_func
Task_Agatha:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L546
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x2
	strh	r2, [r1, #0x26]
	bl	DoMugshotTransition
	pop	{r0}
	bx	r0
.L547:
	.align	2, 0
.L546:
	.word	gTasks
.Lfe67:
	.size	 Task_Agatha,.Lfe67-Task_Agatha
	.align	2, 0
	.type	 Task_Lance,function
	.thumb_func
Task_Lance:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L549
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x3
	strh	r2, [r1, #0x26]
	bl	DoMugshotTransition
	pop	{r0}
	bx	r0
.L550:
	.align	2, 0
.L549:
	.word	gTasks
.Lfe68:
	.size	 Task_Lance,.Lfe68-Task_Lance
	.align	2, 0
	.type	 Task_Blue,function
	.thumb_func
Task_Blue:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L552
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x4
	strh	r2, [r1, #0x26]
	bl	DoMugshotTransition
	pop	{r0}
	bx	r0
.L553:
	.align	2, 0
.L552:
	.word	gTasks
.Lfe69:
	.size	 Task_Blue,.Lfe69-Task_Blue
	.align	2, 0
	.type	 DoMugshotTransition,function
	.thumb_func
DoMugshotTransition:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L559
	ldr	r2, .L559+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L555:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L555	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L560:
	.align	2, 0
.L559:
	.word	sMugshot_Funcs
	.word	gTasks
.Lfe70:
	.size	 DoMugshotTransition,.Lfe70-DoMugshotTransition
	.align	2, 0
	.type	 Mugshot_Init,function
	.thumb_func
Mugshot_Init:
	push	{r4, lr}
	add	r4, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	add	r0, r4, #0
	bl	Mugshots_CreateTrainerPics
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	mov	r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r0, #0xef
	strh	r0, [r4, #0xe]
	ldr	r0, .L567
	ldr	r1, [r0]
	mov	r0, #0x3f
	strh	r0, [r1, #0x2]
	mov	r0, #0x3e
	strh	r0, [r1, #0x4]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	mov	r1, #0x0
	ldr	r3, .L567+0x4
	ldr	r2, .L567+0x8
.L565:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9f
	bls	.L565	@cond_branch
	ldr	r0, .L567+0xc
	bl	SetVBlankCallback
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L568:
	.align	2, 0
.L567:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers+0x780
	.word	0xf0f1
	.word	VBlankCB_Mugshots
.Lfe71:
	.size	 Mugshot_Init,.Lfe71-Mugshot_Init
	.align	2, 0
	.type	 Mugshot_SetGfx,function
	.thumb_func
Mugshot_SetGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r8, r0
	ldr	r6, .L580
	add	r1, sp, #0x4
	mov	r0, sp
	bl	GetBg0TilesDst
	ldr	r0, .L580+0x4
	ldr	r1, [sp, #0x4]
	mov	r2, #0xf0
	bl	CpuSet
	ldr	r1, .L580+0x8
	mov	r2, r8
	mov	r3, #0x26
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L580+0xc
	ldr	r0, .L580+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xfa
	mov	r2, #0xc
	bl	LoadPalette
	mov	r1, #0x0
	ldr	r5, [sp]
	mov	r0, #0xf0
	lsl	r0, r0, #0x8
	add	r7, r0, #0
.L573:
	mov	r0, #0x0
	lsl	r3, r1, #0x10
	asr	r4, r3, #0xb
.L577:
	lsl	r2, r0, #0x10
	asr	r2, r2, #0x10
	add	r1, r4, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r6]
	orr	r0, r0, r7
	strh	r0, [r1]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	add	r6, r6, #0x2
	lsr	r0, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0x1f
	ble	.L577	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r3, r1
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L573	@cond_branch
	mov	r0, #0x2
	bl	EnableInterrupts
	ldr	r0, .L580+0x14
	bl	SetHBlankCallback
	mov	r2, r8
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L581:
	.align	2, 0
.L580:
	.word	sMugshotsTilemap
	.word	sMugshotBanner_Gfx
	.word	sOpponentMugshotsPals
	.word	sPlayerMugshotsPals
	.word	gSaveBlock2Ptr
	.word	HBlankCB_Mugshots
.Lfe72:
	.size	 Mugshot_SetGfx,.Lfe72-Mugshot_SetGfx
	.align	2, 0
	.type	 Mugshot_ShowBanner,function
	.thumb_func
Mugshot_ShowBanner:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L601
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r7, .L601+0x4
	ldrh	r0, [r4, #0xa]
	ldrb	r5, [r4, #0xa]
	add	r0, r0, #0x10
	strh	r0, [r4, #0xa]
	mov	r6, #0x0
.L586:
	add	r0, r5, #0
	mov	r1, #0x10
	bl	Sin
	ldrh	r1, [r4, #0xc]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r0, #0
	bge	.L587	@cond_branch
	mov	r2, #0x1
.L587:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf0
	ble	.L588	@cond_branch
	mov	r2, #0xf0
.L588:
	strh	r2, [r7]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r7, r7, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r6, #0x4f
	bls	.L586	@cond_branch
	cmp	r6, #0x9f
	bhi	.L600	@cond_branch
.L593:
	add	r0, r5, #0
	mov	r1, #0x10
	bl	Sin
	ldrh	r1, [r4, #0xe]
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	cmp	r1, #0
	bge	.L594	@cond_branch
	mov	r2, #0x0
.L594:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xef
	ble	.L595	@cond_branch
	mov	r2, #0xef
.L595:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x8
	mov	r1, #0xf0
	orr	r0, r0, r1
	strh	r0, [r7]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r7, r7, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r6, #0x9f
	bls	.L593	@cond_branch
.L600:
	ldrh	r1, [r4, #0xc]
	add	r1, r1, #0x8
	strh	r1, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x8
	strh	r0, [r4, #0xe]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0xf0
	ble	.L597	@cond_branch
	mov	r0, #0xf0
	strh	r0, [r4, #0xc]
.L597:
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L598	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
.L598:
	ldr	r0, [r4, #0xc]
	cmp	r0, #0xf0
	bne	.L599	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L599:
	ldr	r0, .L601
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x18]
	sub	r0, r0, #0x8
	strh	r0, [r1, #0x18]
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x1a]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L602:
	.align	2, 0
.L601:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.Lfe73:
	.size	 Mugshot_ShowBanner,.Lfe73-Mugshot_ShowBanner
	.align	2, 0
	.type	 Mugshot_StartOpponentSlide,function
	.thumb_func
Mugshot_StartOpponentSlide:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r2, .L609
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L609+0x4
	add	r5, r2, #0
	mov	r2, #0xf0
.L607:
	strh	r2, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0x2
	cmp	r0, #0x9f
	bls	.L607	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x8]
	strh	r1, [r4, #0xa]
	strh	r1, [r4, #0xc]
	strh	r1, [r4, #0xe]
	ldr	r1, [r5]
	ldrh	r0, [r1, #0x18]
	sub	r0, r0, #0x8
	strh	r0, [r1, #0x18]
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x1a]
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r1, #0x0
	bl	SetTrainerPicSlideDirection
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	mov	r1, #0x1
	bl	SetTrainerPicSlideDirection
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	bl	IncrementTrainerPicState
	mov	r0, #0x61
	bl	PlaySE
	ldr	r1, [r5]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L610:
	.align	2, 0
.L609:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.Lfe74:
	.size	 Mugshot_StartOpponentSlide,.Lfe74-Mugshot_StartOpponentSlide
	.align	2, 0
	.type	 Mugshot_WaitStartPlayerSlide,function
	.thumb_func
Mugshot_WaitStartPlayerSlide:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L613
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x18]
	sub	r0, r0, #0x8
	strh	r0, [r1, #0x18]
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x1a]
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	bl	IsTrainerPicSlideDone
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L612	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	bl	IncrementTrainerPicState
.L612:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L614:
	.align	2, 0
.L613:
	.word	sTransitionData
.Lfe75:
	.size	 Mugshot_WaitStartPlayerSlide,.Lfe75-Mugshot_WaitStartPlayerSlide
	.align	2, 0
	.type	 Mugshot_WaitPlayerSlide,function
	.thumb_func
Mugshot_WaitPlayerSlide:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldr	r7, .L617
	ldr	r1, [r7]
	ldrh	r0, [r1, #0x18]
	sub	r0, r0, #0x8
	mov	r2, #0x0
	mov	r8, r2
	strh	r0, [r1, #0x18]
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x1a]
	mov	r1, #0x24
	ldrsh	r0, [r6, r1]
	bl	IsTrainerPicSlideDone
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L616	@cond_branch
	ldr	r1, [r7]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x0
	bl	SetVBlankCallback
	ldr	r1, .L617+0x4
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L617+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L617+0xc
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	ldr	r4, .L617+0x10
	mov	r5, #0xa0
	lsl	r5, r5, #0x1
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	memset
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r4, r4, r2
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	memset
	mov	r0, #0x40
	mov	r1, #0xf0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	mov	r0, r8
	strh	r0, [r6, #0xe]
	strh	r0, [r6, #0x10]
	ldr	r1, [r7]
	mov	r0, #0xbf
	strh	r0, [r1, #0xe]
	ldr	r0, .L617+0x14
	bl	SetVBlankCallback
.L616:
	mov	r0, #0x0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L618:
	.align	2, 0
.L617:
	.word	sTransitionData
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	gScanlineEffectRegBuffers
	.word	VBlankCB_MugshotsFadeOut
.Lfe76:
	.size	 Mugshot_WaitPlayerSlide,.Lfe76-Mugshot_WaitPlayerSlide
	.align	2, 0
	.type	 Mugshot_GradualWhiteFade,function
	.thumb_func
Mugshot_GradualWhiteFade:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r2, .L631
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r6, #0x1
	ldr	r1, [r2]
	ldrh	r0, [r1, #0x18]
	sub	r0, r0, #0x8
	strh	r0, [r1, #0x18]
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x1a]
	ldrh	r1, [r4, #0x10]
	mov	r3, #0x10
	ldrsh	r0, [r4, r3]
	mov	ip, r2
	cmp	r0, #0x4f
	bgt	.L620	@cond_branch
	add	r0, r1, #0x2
	strh	r0, [r4, #0x10]
.L620:
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x50
	ble	.L621	@cond_branch
	mov	r0, #0x50
	strh	r0, [r4, #0x10]
.L621:
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	mov	r1, #0x1
	and	r0, r0, r1
	ldrh	r3, [r4, #0x10]
	cmp	r0, #0
	beq	.L622	@cond_branch
	mov	r2, #0x0
	lsl	r0, r3, #0x10
	mov	r6, #0x0
	cmp	r0, #0
	blt	.L622	@cond_branch
	mov	r7, #0x50
	ldr	r5, .L631+0x4
.L626:
	lsl	r0, r2, #0x10
	asr	r3, r0, #0x10
	sub	r1, r7, r3
	add	r0, r3, #0
	add	r0, r0, #0x50
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0xf
	add	r1, r1, r5
	ldrh	r0, [r1]
	cmp	r0, #0xf
	bhi	.L627	@cond_branch
	mov	r6, #0x1
	add	r0, r0, #0x1
	strh	r0, [r1]
.L627:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0xf
	add	r1, r0, r5
	ldrh	r0, [r1]
	cmp	r0, #0xf
	bhi	.L625	@cond_branch
	mov	r6, #0x1
	add	r0, r0, #0x1
	strh	r0, [r1]
.L625:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	ldrh	r3, [r4, #0x10]
	cmp	r0, r1
	ble	.L626	@cond_branch
.L622:
	cmp	r3, #0x50
	bne	.L630	@cond_branch
	cmp	r6, #0
	bne	.L630	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L630:
	mov	r1, ip
	ldr	r0, [r1]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L632:
	.align	2, 0
.L631:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.Lfe77:
	.size	 Mugshot_GradualWhiteFade,.Lfe77-Mugshot_GradualWhiteFade
	.align	2, 0
	.type	 Mugshot_InitFadeWhiteToBlack,function
	.thumb_func
Mugshot_InitFadeWhiteToBlack:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L634
	ldr	r0, [r5]
	ldrb	r1, [r0]
	mov	r6, #0x0
	strb	r6, [r0]
	mov	r0, #0x1
	neg	r0, r0
	ldr	r2, .L634+0x4
	mov	r1, #0x10
	bl	BlendPalettes
	ldr	r1, [r5]
	mov	r0, #0xff
	strh	r0, [r1, #0xe]
	strh	r6, [r4, #0xe]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L635:
	.align	2, 0
.L634:
	.word	sTransitionData
	.word	0x7fff
.Lfe78:
	.size	 Mugshot_InitFadeWhiteToBlack,.Lfe78-Mugshot_InitFadeWhiteToBlack
	.align	2, 0
	.type	 Mugshot_FadeToBlack,function
	.thumb_func
Mugshot_FadeToBlack:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L638
	ldr	r1, [r5]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	ldr	r0, .L638+0x4
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	bl	memset
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xf
	ble	.L637	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L637:
	ldr	r0, [r5]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L639:
	.align	2, 0
.L638:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.Lfe79:
	.size	 Mugshot_FadeToBlack,.Lfe79-Mugshot_FadeToBlack
	.align	2, 0
	.type	 Mugshot_End,function
	.thumb_func
Mugshot_End:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L641
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L641+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L641+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	FadeScreenBlack
	ldr	r0, [r4]
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L642:
	.align	2, 0
.L641:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
.Lfe80:
	.size	 Mugshot_End,.Lfe80-Mugshot_End
	.align	2, 0
	.type	 VBlankCB_Mugshots,function
	.thumb_func
VBlankCB_Mugshots:
	push	{r4, r5, lr}
	ldr	r4, .L645
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L645+0x4
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L645+0x8
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xa]
	bl	VBlankCB_BattleTransition
	ldr	r5, .L645+0xc
	ldr	r0, [r5]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L644	@cond_branch
	ldr	r1, .L645+0x10
	ldr	r0, .L645+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L645+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L644:
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x1c]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L645+0x1c
	str	r0, [r4]
	ldr	r0, .L645+0x20
	str	r0, [r4, #0x4]
	ldr	r0, .L645+0x24
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L646:
	.align	2, 0
.L645:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe81:
	.size	 VBlankCB_Mugshots,.Lfe81-VBlankCB_Mugshots
	.align	2, 0
	.type	 VBlankCB_MugshotsFadeOut,function
	.thumb_func
VBlankCB_MugshotsFadeOut:
	push	{r4, lr}
	ldr	r4, .L649
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L649+0x4
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L649+0x8
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xa]
	bl	VBlankCB_BattleTransition
	ldr	r2, .L649+0xc
	ldr	r0, [r2]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L648	@cond_branch
	ldr	r1, .L649+0x10
	ldr	r0, .L649+0x14
	str	r0, [r1]
	mov	r3, #0xf0
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	str	r0, [r1, #0x4]
	ldr	r0, .L649+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L648:
	ldr	r0, [r2]
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, .L649+0x1c
	str	r0, [r4]
	ldr	r0, .L649+0x20
	str	r0, [r4, #0x4]
	ldr	r0, .L649+0x24
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x4000054
	.word	-0x5dbfffff
.Lfe82:
	.size	 VBlankCB_MugshotsFadeOut,.Lfe82-VBlankCB_MugshotsFadeOut
	.align	2, 0
	.type	 HBlankCB_Mugshots,function
	.thumb_func
HBlankCB_Mugshots:
	push	{lr}
	ldr	r0, .L655
	ldrh	r0, [r0]
	cmp	r0, #0x4f
	bhi	.L652	@cond_branch
	ldr	r1, .L655+0x4
	ldr	r0, .L655+0x8
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x18]
	b	.L654
.L656:
	.align	2, 0
.L655:
	.word	0x4000006
	.word	0x4000010
	.word	sTransitionData
.L652:
	ldr	r1, .L657
	ldr	r0, .L657+0x4
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1a]
.L654:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L658:
	.align	2, 0
.L657:
	.word	0x4000010
	.word	sTransitionData
.Lfe83:
	.size	 HBlankCB_Mugshots,.Lfe83-HBlankCB_Mugshots
	.align	2, 0
	.type	 Mugshots_CreateTrainerPics,function
	.thumb_func
Mugshots_CreateTrainerPics:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r6, .L660
	mov	r0, #0xa
	strb	r0, [r6]
	ldr	r0, .L660+0x4
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	mov	r9, r1
	add	r0, r0, r9
	ldrb	r0, [r0]
	ldr	r2, .L660+0x8
	lsl	r1, r1, #0x2
	mov	r9, r1
	add	r1, r1, r2
	ldrh	r1, [r1]
	sub	r1, r1, #0x20
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r2, r2, #0x2
	add	r2, r2, r9
	ldrh	r2, [r2]
	add	r2, r2, #0x2a
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r5, .L660+0xc
	str	r5, [sp]
	mov	r3, #0x0
	bl	CreateTrainerSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r0, .L660+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x1
	bl	PlayerGenderToFrontTrainerPicId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	str	r5, [sp]
	mov	r2, #0x6a
	mov	r3, #0x0
	bl	CreateTrainerSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r0, #0xc
	strb	r0, [r6]
	mov	r3, #0x22
	ldrsh	r0, [r4, r3]
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	ldr	r1, .L660+0x14
	add	r5, r5, r1
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	lsl	r6, r0, #0x4
	add	r6, r6, r0
	lsl	r6, r6, #0x2
	add	r6, r6, r1
	ldr	r0, .L660+0x18
	str	r0, [r5, #0x1c]
	str	r0, [r6, #0x1c]
	ldrb	r0, [r5, #0x1]
	mov	r1, #0x3
	orr	r0, r0, r1
	strb	r0, [r5, #0x1]
	ldrb	r0, [r6, #0x1]
	orr	r0, r0, r1
	strb	r0, [r6, #0x1]
	bl	AllocOamMatrix
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, #0x1f
	mov	r8, r3
	mov	r4, r8
	and	r0, r0, r4
	lsl	r0, r0, #0x1
	ldrb	r2, [r5, #0x3]
	mov	r4, #0x3f
	neg	r4, r4
	add	r1, r4, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
	bl	AllocOamMatrix
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrb	r1, [r6, #0x3]
	and	r4, r4, r1
	orr	r4, r4, r0
	strb	r4, [r6, #0x3]
	ldrb	r2, [r5, #0x1]
	mov	r1, #0x3f
	add	r0, r1, #0
	and	r0, r0, r2
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r5, #0x1]
	ldrb	r0, [r6, #0x1]
	and	r1, r1, r0
	orr	r1, r1, r2
	strb	r1, [r6, #0x1]
	ldrb	r0, [r5, #0x3]
	mov	r1, #0xc0
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldrb	r0, [r6, #0x3]
	orr	r0, r0, r1
	strb	r0, [r6, #0x3]
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x3
	mov	r3, #0x3
	bl	CalcCenterToCornerVec
	add	r0, r6, #0
	mov	r1, #0x1
	mov	r2, #0x3
	mov	r3, #0x3
	bl	CalcCenterToCornerVec
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	ldr	r2, .L660+0x1c
	mov	r3, r9
	add	r1, r3, r2
	mov	r4, #0x0
	ldrsh	r1, [r1, r4]
	add	r2, r2, #0x2
	add	r9, r9, r2
	mov	r3, r9
	mov	r4, #0x0
	ldrsh	r2, [r3, r4]
	mov	r3, #0x0
	bl	SetOamMatrixRotationScaling
	ldrb	r0, [r6, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	ldr	r1, .L660+0x20
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	mov	r3, #0x0
	bl	SetOamMatrixRotationScaling
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L661:
	.align	2, 0
.L660:
	.word	gReservedSpritePaletteCount
	.word	sMugshotsTrainerPicIDsTable
	.word	sMugshotsOpponentCoords
	.word	gDecompressionBuffer
	.word	gSaveBlock2Ptr
	.word	gSprites
	.word	SpriteCB_MugshotTrainerPic
	.word	sMugshotsOpponentRotationScales
	.word	-0x200
.Lfe84:
	.size	 Mugshots_CreateTrainerPics,.Lfe84-Mugshots_CreateTrainerPics
	.align	2, 0
	.type	 SpriteCB_MugshotTrainerPic,function
	.thumb_func
SpriteCB_MugshotTrainerPic:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L667
.L663:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L663	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	sMugshotTrainerPicFuncs
.Lfe85:
	.size	 SpriteCB_MugshotTrainerPic,.Lfe85-SpriteCB_MugshotTrainerPic
	.align	2, 0
	.type	 MugshotTrainerPic_Pause,function
	.thumb_func
MugshotTrainerPic_Pause:
	mov	r0, #0x0
	bx	lr
.Lfe86:
	.size	 MugshotTrainerPic_Pause,.Lfe86-MugshotTrainerPic_Pause
	.align	2, 0
	.type	 MugshotTrainerPic_Init,function
	.thumb_func
MugshotTrainerPic_Init:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	ldr	r1, .L671
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	add	r4, sp, #0x4
	ldr	r1, .L671+0x4
	add	r0, r4, #0
	mov	r2, #0x4
	bl	memcpy
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r5, #0x30]
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	strh	r0, [r5, #0x32]
	mov	r0, #0x1
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L672:
	.align	2, 0
.L671:
	.word	sTrainerPicSlideSpeeds
	.word	sTrainerPicSlideAccels
.Lfe87:
	.size	 MugshotTrainerPic_Init,.Lfe87-MugshotTrainerPic_Init
	.align	2, 0
	.type	 MugshotTrainerPic_Slide,function
	.thumb_func
MugshotTrainerPic_Slide:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	ldrh	r3, [r1, #0x20]
	add	r2, r0, r3
	strh	r2, [r1, #0x20]
	mov	r3, #0x3c
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L677	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x84
	bgt	.L675	@cond_branch
	b	.L678
.L677:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x67
	ble	.L675	@cond_branch
.L678:
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
.L675:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe88:
	.size	 MugshotTrainerPic_Slide,.Lfe88-MugshotTrainerPic_Slide
	.align	2, 0
	.type	 MugshotTrainerPic_SlideSlow,function
	.thumb_func
MugshotTrainerPic_SlideSlow:
	push	{lr}
	add	r2, r0, #0
	ldrh	r3, [r2, #0x32]
	ldrh	r0, [r2, #0x30]
	add	r1, r3, r0
	strh	r1, [r2, #0x30]
	ldrh	r0, [r2, #0x20]
	add	r0, r0, r1
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bne	.L680	@cond_branch
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	neg	r0, r3
	strh	r0, [r2, #0x32]
	mov	r0, #0x1
	strh	r0, [r2, #0x3a]
.L680:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe89:
	.size	 MugshotTrainerPic_SlideSlow,.Lfe89-MugshotTrainerPic_SlideSlow
	.align	2, 0
	.type	 MugshotTrainerPic_SlideOffscreen,function
	.thumb_func
MugshotTrainerPic_SlideOffscreen:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x30]
	add	r0, r0, r1
	strh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x20]
	add	r1, r1, r0
	strh	r1, [r2, #0x20]
	add	r1, r1, #0x1f
	lsl	r1, r1, #0x10
	mov	r0, #0x97
	lsl	r0, r0, #0x11
	cmp	r1, r0
	bls	.L682	@cond_branch
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
.L682:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe90:
	.size	 MugshotTrainerPic_SlideOffscreen,.Lfe90-MugshotTrainerPic_SlideOffscreen
	.align	2, 0
	.type	 SetTrainerPicSlideDirection,function
	.thumb_func
SetTrainerPicSlideDirection:
	ldr	r3, .L684
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	strh	r1, [r2, #0x3c]
	bx	lr
.L685:
	.align	2, 0
.L684:
	.word	gSprites
.Lfe91:
	.size	 SetTrainerPicSlideDirection,.Lfe91-SetTrainerPicSlideDirection
	.align	2, 0
	.type	 IncrementTrainerPicState,function
	.thumb_func
IncrementTrainerPicState:
	ldr	r2, .L687
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	bx	lr
.L688:
	.align	2, 0
.L687:
	.word	gSprites
.Lfe92:
	.size	 IncrementTrainerPicState,.Lfe92-IncrementTrainerPicState
	.align	2, 0
	.type	 IsTrainerPicSlideDone,function
	.thumb_func
IsTrainerPicSlideDone:
	ldr	r2, .L690
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r2, #0x3a
	ldrsh	r0, [r1, r2]
	bx	lr
.L691:
	.align	2, 0
.L690:
	.word	gSprites
.Lfe93:
	.size	 IsTrainerPicSlideDone,.Lfe93-IsTrainerPicSlideDone
	.align	2, 0
	.type	 Task_Slice,function
	.thumb_func
Task_Slice:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L697
	ldr	r2, .L697+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L693:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L693	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L698:
	.align	2, 0
.L697:
	.word	sSlice_Funcs
	.word	gTasks
.Lfe94:
	.size	 Task_Slice,.Lfe94-Task_Slice
	.align	2, 0
	.type	 Slice_Init,function
	.thumb_func
Slice_Init:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	mov	r3, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	mov	r0, #0x1
	strh	r0, [r5, #0xe]
	ldr	r2, .L705
	ldr	r1, [r2]
	mov	r0, #0x3f
	strh	r0, [r1, #0x2]
	strh	r3, [r1, #0x4]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	ldr	r4, .L705+0x4
	add	r6, r2, #0
	mov	r2, #0xf0
.L703:
	lsl	r1, r3, #0x1
	add	r1, r1, r4
	ldr	r0, [r6]
	ldrh	r0, [r0, #0x14]
	strh	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0xa0
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	strh	r2, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x9f
	bls	.L703	@cond_branch
	mov	r0, #0x2
	bl	EnableInterrupts
	ldr	r0, .L705+0x8
	bl	SetVBlankCallback
	ldr	r0, .L705+0xc
	bl	SetHBlankCallback
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x1
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L706:
	.align	2, 0
.L705:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers+0x780
	.word	VBlankCB_Slice
	.word	HBlankCB_Slice
.Lfe95:
	.size	 Slice_Init,.Lfe95-Slice_Init
	.align	2, 0
	.type	 Slice_Main,function
	.thumb_func
Slice_Main:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r3, r0, #0
	ldr	r2, .L720
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldrh	r0, [r3, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r3, #0xa]
	add	r0, r0, r1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r8, r2
	cmp	r0, #0xf0
	ble	.L708	@cond_branch
	mov	r0, #0xf0
	strh	r0, [r3, #0xa]
.L708:
	ldrh	r4, [r3, #0xc]
	mov	r0, #0xc
	ldrsh	r1, [r3, r0]
	ldr	r0, .L720+0x4
	ldrh	r2, [r3, #0xe]
	cmp	r1, r0
	bgt	.L709	@cond_branch
	add	r0, r4, r2
	strh	r0, [r3, #0xc]
.L709:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7f
	bgt	.L710	@cond_branch
	lsl	r0, r2, #0x1
	strh	r0, [r3, #0xe]
.L710:
	mov	r5, #0x0
	ldr	r7, .L720+0x8
	mov	r1, #0xa0
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	mov	ip, r1
	mov	r6, r8
.L714:
	lsl	r0, r5, #0x1
	add	r2, r0, r7
	mov	r1, ip
	add	r4, r0, r1
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L715	@cond_branch
	ldr	r1, [r6]
	ldrh	r0, [r3, #0xa]
	ldrh	r1, [r1, #0x14]
	add	r0, r0, r1
	strh	r0, [r2]
	ldrh	r1, [r3, #0xa]
	mov	r0, #0xf0
	sub	r0, r0, r1
	b	.L719
.L721:
	.align	2, 0
.L720:
	.word	sTransitionData
	.word	0xfff
	.word	gScanlineEffectRegBuffers
.L715:
	ldr	r0, [r6]
	ldrh	r0, [r0, #0x14]
	ldrh	r1, [r3, #0xa]
	sub	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r3, #0xa]
	lsl	r0, r0, #0x8
	mov	r1, #0xf1
	orr	r0, r0, r1
.L719:
	strh	r0, [r4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x9f
	bls	.L714	@cond_branch
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0xef
	ble	.L718	@cond_branch
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
.L718:
	mov	r1, r8
	ldr	r0, [r1]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe96:
	.size	 Slice_Main,.Lfe96-Slice_Main
	.align	2, 0
	.type	 Slice_End,function
	.thumb_func
Slice_End:
	push	{lr}
	ldr	r1, .L723
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L723+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L723+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	FadeScreenBlack
	ldr	r0, .L723+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L724:
	.align	2, 0
.L723:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	Task_Slice
.Lfe97:
	.size	 Slice_End,.Lfe97-Slice_End
	.align	2, 0
	.type	 VBlankCB_Slice,function
	.thumb_func
VBlankCB_Slice:
	push	{r4, r5, lr}
	ldr	r5, .L727
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L727+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L727+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xa]
	bl	VBlankCB_BattleTransition
	ldr	r4, .L727+0xc
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L726	@cond_branch
	ldr	r1, .L727+0x10
	ldr	r0, .L727+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L727+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L726:
	ldr	r0, .L727+0x1c
	str	r0, [r5]
	ldr	r0, .L727+0x20
	str	r0, [r5, #0x4]
	ldr	r0, .L727+0x24
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L728:
	.align	2, 0
.L727:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7ffffec0
	.word	gScanlineEffectRegBuffers+0x8c0
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe98:
	.size	 VBlankCB_Slice,.Lfe98-VBlankCB_Slice
	.align	2, 0
	.type	 HBlankCB_Slice,function
	.thumb_func
HBlankCB_Slice:
	ldr	r1, .L730
	ldr	r0, .L730+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L730+0x8
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	bx	lr
.L731:
	.align	2, 0
.L730:
	.word	gScanlineEffectRegBuffers
	.word	0x4000006
	.word	0x4000014
.Lfe99:
	.size	 HBlankCB_Slice,.Lfe99-HBlankCB_Slice
	.align	2, 0
	.type	 Task_WhiteBarsFade,function
	.thumb_func
Task_WhiteBarsFade:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L737
	ldr	r2, .L737+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L733:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L733	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L738:
	.align	2, 0
.L737:
	.word	sWhiteBarsFade_Funcs
	.word	gTasks
.Lfe100:
	.size	 Task_WhiteBarsFade,.Lfe100-Task_WhiteBarsFade
	.align	2, 0
	.type	 WhiteBarsFade_Init,function
	.thumb_func
WhiteBarsFade_Init:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	ldr	r0, .L745
	ldr	r1, [r0]
	mov	r2, #0x0
	mov	r0, #0xbf
	strh	r0, [r1, #0xe]
	strh	r2, [r1, #0x12]
	mov	r0, #0x1e
	strh	r0, [r1, #0x2]
	mov	r0, #0x3f
	strh	r0, [r1, #0x4]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	mov	r1, #0x0
	ldr	r2, .L745+0x4
	mov	r4, #0x0
	mov	r3, #0xf0
.L743:
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	strh	r4, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xa0
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	strh	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x9f
	bls	.L743	@cond_branch
	mov	r0, #0x2
	bl	EnableInterrupts
	ldr	r0, .L745+0x8
	bl	SetHBlankCallback
	ldr	r0, .L745+0xc
	bl	SetVBlankCallback
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L746:
	.align	2, 0
.L745:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers+0x780
	.word	HBlankCB_WhiteBarsFade
	.word	VBlankCB_WhiteBarsFade
.Lfe101:
	.size	 WhiteBarsFade_Init,.Lfe101-WhiteBarsFade_Init
	.align	2, 0
	.type	 WhiteBarsFade_StartBars,function
	.thumb_func
WhiteBarsFade_StartBars:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	ldr	r1, .L753
	mov	r0, sp
	mov	r2, #0xc
	bl	memcpy
	mov	r5, #0x0
	mov	r4, #0x0
.L751:
	ldr	r0, .L753+0x4
	bl	CreateInvisibleSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L753+0x8
	add	r2, r1, r0
	mov	r0, #0xf0
	strh	r0, [r2, #0x20]
	strh	r4, [r2, #0x22]
	lsl	r1, r5, #0x10
	asr	r1, r1, #0x10
	lsl	r0, r1, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r2, #0x38]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsl	r0, r4, #0x10
	mov	r3, #0xd8
	lsl	r3, r3, #0xd
	add	r0, r0, r3
	lsr	r4, r0, #0x10
	lsr	r5, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x5
	ble	.L751	@cond_branch
	ldrh	r0, [r2, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x3a]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L754:
	.align	2, 0
.L753:
	.word	sWhiteBarsFade_StartDelays
	.word	SpriteCB_WhiteBarFade
	.word	gSprites
.Lfe102:
	.size	 WhiteBarsFade_StartBars,.Lfe102-WhiteBarsFade_StartBars
	.align	2, 0
	.type	 WhiteBarsFade_WaitBars,function
	.thumb_func
WhiteBarsFade_WaitBars:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, .L757
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, [r2]
	mov	r1, #0x20
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x5
	ble	.L756	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	ldr	r2, .L757+0x4
	mov	r1, #0x10
	bl	BlendPalettes
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L756:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L758:
	.align	2, 0
.L757:
	.word	sTransitionData
	.word	0x7fff
.Lfe103:
	.size	 WhiteBarsFade_WaitBars,.Lfe103-WhiteBarsFade_WaitBars
	.align	2, 0
	.type	 WhiteBarsFade_BlendToBlack,function
	.thumb_func
WhiteBarsFade_BlendToBlack:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r5, .L760
	ldr	r0, [r5]
	ldrb	r1, [r0]
	mov	r4, #0x0
	strb	r4, [r0]
	ldr	r1, .L760+0x4
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L760+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L760+0xc
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	ldr	r1, [r5]
	mov	r0, #0xf0
	strh	r0, [r1, #0x6]
	strh	r4, [r1, #0x12]
	mov	r0, #0xff
	strh	r0, [r1, #0xe]
	mov	r0, #0x3f
	strh	r0, [r1, #0x2]
	strh	r4, [r1, #0x20]
	ldr	r0, .L760+0x10
	bl	SetVBlankCallback
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L761:
	.align	2, 0
.L760:
	.word	sTransitionData
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	VBlankCB_WhiteBarsFade_Blend
.Lfe104:
	.size	 WhiteBarsFade_BlendToBlack,.Lfe104-WhiteBarsFade_BlendToBlack
	.align	2, 0
	.type	 WhiteBarsFade_End,function
	.thumb_func
WhiteBarsFade_End:
	push	{lr}
	ldr	r0, .L764
	ldr	r1, [r0]
	mov	r2, #0xf0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	ldrh	r2, [r1, #0x20]
	add	r0, r0, r2
	strh	r0, [r1, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x10
	bls	.L763	@cond_branch
	bl	FadeScreenBlack
	ldr	r0, .L764+0x4
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L763:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L765:
	.align	2, 0
.L764:
	.word	sTransitionData
	.word	Task_WhiteBarsFade
.Lfe105:
	.size	 WhiteBarsFade_End,.Lfe105-WhiteBarsFade_End
	.align	2, 0
	.type	 VBlankCB_WhiteBarsFade,function
	.thumb_func
VBlankCB_WhiteBarsFade:
	push	{r4, r5, lr}
	ldr	r5, .L768
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L768+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L768+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xa]
	bl	VBlankCB_BattleTransition
	ldr	r4, .L768+0xc
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x6]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L767	@cond_branch
	ldr	r1, .L768+0x10
	ldr	r0, .L768+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L768+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L767:
	ldr	r0, .L768+0x1c
	str	r0, [r5]
	ldr	r0, .L768+0x20
	str	r0, [r5, #0x4]
	ldr	r0, .L768+0x24
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L769:
	.align	2, 0
.L768:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7ffffec0
	.word	gScanlineEffectRegBuffers+0x8c0
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe106:
	.size	 VBlankCB_WhiteBarsFade,.Lfe106-VBlankCB_WhiteBarsFade
	.align	2, 0
	.type	 VBlankCB_WhiteBarsFade_Blend,function
	.thumb_func
VBlankCB_WhiteBarsFade_Blend:
	push	{r4, lr}
	bl	VBlankCB_BattleTransition
	ldr	r4, .L771
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x12]
	mov	r0, #0x54
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x6]
	mov	r0, #0x40
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L772:
	.align	2, 0
.L771:
	.word	sTransitionData
.Lfe107:
	.size	 VBlankCB_WhiteBarsFade_Blend,.Lfe107-VBlankCB_WhiteBarsFade_Blend
	.align	2, 0
	.type	 HBlankCB_WhiteBarsFade,function
	.thumb_func
HBlankCB_WhiteBarsFade:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	ldr	r0, .L775
	ldrh	r0, [r0]
	strh	r0, [r1]
	mov	r0, sp
	ldrh	r0, [r0]
	cmp	r0, #0xe3
	bne	.L774	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
.L774:
	ldr	r2, .L775+0x4
	ldr	r1, .L775+0x8
	mov	r0, sp
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r3, #0xf0
	lsl	r3, r3, #0x3
	add	r1, r1, r3
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L776:
	.align	2, 0
.L775:
	.word	0x4000006
	.word	0x4000054
	.word	gScanlineEffectRegBuffers
.Lfe108:
	.size	 HBlankCB_WhiteBarsFade,.Lfe108-HBlankCB_WhiteBarsFade
	.align	2, 0
	.type	 SpriteCB_WhiteBarFade,function
	.thumb_func
SpriteCB_WhiteBarFade:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x38]
	mov	r2, #0x38
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L778	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x38]
	mov	r1, #0x3a
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L780	@cond_branch
	ldr	r0, .L795
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L780
.L796:
	.align	2, 0
.L795:
	.word	sTransitionData
.L778:
	mov	r2, #0x22
	ldrsh	r0, [r3, r2]
	lsl	r0, r0, #0x1
	ldr	r1, .L797
	add	r7, r0, r1
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	add	r6, r0, r1
	mov	r1, #0x3a
	ldrsh	r0, [r3, r1]
	mov	r5, #0x1b
	cmp	r0, #0
	beq	.L781	@cond_branch
	mov	r5, #0x19
.L781:
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L784	@cond_branch
.L786:
	lsl	r1, r4, #0x1
	add	r2, r1, r7
	ldrh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r3, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r5
	bcc	.L786	@cond_branch
.L784:
	mov	r2, #0x20
	ldrsh	r0, [r3, r2]
	ldrh	r2, [r3, #0x20]
	cmp	r0, #0
	bne	.L788	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	bne	.L788	@cond_branch
	mov	r0, #0x1
	strh	r0, [r3, #0x30]
.L788:
	add	r1, r2, #0
	sub	r1, r1, #0x18
	strh	r1, [r3, #0x20]
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0xc0
	strh	r0, [r3, #0x2e]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bge	.L789	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x20]
.L789:
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	cmp	r0, r1
	ble	.L790	@cond_branch
	strh	r1, [r3, #0x2e]
.L790:
	mov	r2, #0x3a
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L791	@cond_branch
	ldr	r0, .L797+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1]
.L791:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L780	@cond_branch
	mov	r2, #0x3a
	ldrsh	r0, [r3, r2]
	ldr	r1, .L797+0x4
	cmp	r0, #0
	beq	.L794	@cond_branch
	ldr	r0, [r1]
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	cmp	r0, #0x4
	ble	.L780	@cond_branch
.L794:
	ldr	r1, [r1]
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	add	r0, r3, #0
	bl	DestroySprite
.L780:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L798:
	.align	2, 0
.L797:
	.word	gScanlineEffectRegBuffers
	.word	sTransitionData
.Lfe109:
	.size	 SpriteCB_WhiteBarFade,.Lfe109-SpriteCB_WhiteBarFade
	.align	2, 0
	.type	 Task_GridSquares,function
	.thumb_func
Task_GridSquares:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L804
	ldr	r2, .L804+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L800:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L800	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L805:
	.align	2, 0
.L804:
	.word	sGridSquares_Funcs
	.word	gTasks
.Lfe110:
	.size	 Task_GridSquares,.Lfe110-Task_GridSquares
	.align	2, 0
	.type	 GridSquares_Init,function
	.thumb_func
GridSquares_Init:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r0, sp, #0x4
	add	r1, sp, #0x8
	bl	GetBg0TilesDst
	ldr	r0, .L807
	ldr	r1, [sp, #0x8]
	mov	r2, #0x10
	bl	CpuSet
	mov	r1, sp
	mov	r2, #0xf0
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, [sp, #0x4]
	ldr	r2, .L807+0x4
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L807+0x8
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r1}
	bx	r1
.L808:
	.align	2, 0
.L807:
	.word	sGridSquare_Gfx
	.word	0x1000400
	.word	sFieldEffectPal_Pokeball
.Lfe111:
	.size	 GridSquares_Init,.Lfe111-GridSquares_Init
	.align	2, 0
	.type	 GridSquares_Main,function
	.thumb_func
GridSquares_Main:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L810	@cond_branch
	mov	r0, sp
	bl	GetBg0TilemapDst
	mov	r0, #0x3
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x5
	ldr	r1, .L812
	add	r0, r0, r1
	ldr	r1, [sp]
	mov	r2, #0x10
	bl	CpuSet
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xd
	ble	.L810	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x10
	strh	r0, [r4, #0xa]
.L810:
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.L813:
	.align	2, 0
.L812:
	.word	sGridSquare_Gfx
.Lfe112:
	.size	 GridSquares_Main,.Lfe112-GridSquares_Main
	.align	2, 0
	.type	 GridSquares_End,function
	.thumb_func
GridSquares_End:
	push	{lr}
	ldrh	r1, [r0, #0xa]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xa]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bne	.L815	@cond_branch
	bl	FadeScreenBlack
	ldr	r0, .L816
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L815:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L817:
	.align	2, 0
.L816:
	.word	Task_GridSquares
.Lfe113:
	.size	 GridSquares_End,.Lfe113-GridSquares_End
	.align	2, 0
	.type	 Task_AngledWipes,function
	.thumb_func
Task_AngledWipes:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L823
	ldr	r2, .L823+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L819:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L819	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L824:
	.align	2, 0
.L823:
	.word	sAngledWipes_Funcs
	.word	gTasks
.Lfe114:
	.size	 Task_AngledWipes,.Lfe114-Task_AngledWipes
	.align	2, 0
	.type	 AngledWipes_Init,function
	.thumb_func
AngledWipes_Init:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	InitTransitionData
	bl	ScanlineEffect_Clear
	ldr	r0, .L831
	ldr	r1, [r0]
	mov	r2, #0x0
	mov	r0, #0x3f
	strh	r0, [r1, #0x2]
	strh	r2, [r1, #0x4]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	mov	r1, #0x0
	ldr	r2, .L831+0x4
	mov	r3, #0xf0
	add	r4, r2, #0
.L829:
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	strh	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x9f
	bls	.L829	@cond_branch
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r1, r4, r0
	add	r0, r4, #0
	mov	r2, #0xa0
	bl	CpuSet
	ldr	r0, .L831+0x8
	bl	SetVBlankCallback
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x1
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L832:
	.align	2, 0
.L831:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
	.word	VBlankCB_AngledWipes
.Lfe115:
	.size	 AngledWipes_Init,.Lfe115-AngledWipes_Init
	.align	2, 0
	.type	 AngledWipes_SetWipeData,function
	.thumb_func
AngledWipes_SetWipeData:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	mov	r8, r0
	ldr	r0, .L834
	ldr	r0, [r0]
	add	r0, r0, #0x24
	ldr	r6, .L834+0x4
	mov	r2, r8
	mov	r3, #0xa
	ldrsh	r1, [r2, r3]
	lsl	r4, r1, #0x2
	add	r4, r4, r1
	lsl	r4, r4, #0x1
	add	r1, r4, r6
	mov	r5, #0x0
	ldrsh	r1, [r1, r5]
	add	r2, r6, #0x2
	add	r2, r4, r2
	mov	r3, #0x0
	ldrsh	r2, [r2, r3]
	add	r3, r6, #0x4
	add	r3, r4, r3
	mov	r5, #0x0
	ldrsh	r3, [r3, r5]
	add	r5, r6, #0x6
	add	r4, r4, r5
	mov	r5, #0x0
	ldrsh	r4, [r4, r5]
	str	r4, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	bl	InitBlackWipe
	mov	r0, r8
	mov	r2, #0xa
	ldrsh	r1, [r0, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r6, r6, #0x8
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r3, r8
	strh	r0, [r3, #0xc]
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	mov	r0, #0x1
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L835:
	.align	2, 0
.L834:
	.word	sTransitionData
	.word	sAngledWipes_MoveData
.Lfe116:
	.size	 AngledWipes_SetWipeData,.Lfe116-AngledWipes_SetWipeData
	.align	2, 0
	.type	 AngledWipes_DoWipe,function
	.thumb_func
AngledWipes_DoWipe:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r6, r0, #0
	ldr	r0, .L849
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r8, r0
	mov	r7, #0x0
	ldr	r0, .L849+0x4
	mov	r9, r0
.L840:
	ldr	r1, .L849+0x4
	ldr	r0, .L849
	ldr	r2, [r0]
	mov	r3, #0x2a
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsr	r3, r0, #0x8
	mov	r5, #0xff
	and	r5, r5, r0
	mov	r4, #0xc
	ldrsh	r0, [r6, r4]
	cmp	r0, #0
	bne	.L841	@cond_branch
	mov	r1, #0x28
	ldrsh	r0, [r2, r1]
	cmp	r3, r0
	bge	.L842	@cond_branch
	ldrh	r3, [r2, #0x28]
.L842:
	lsl	r0, r3, #0x10
	lsl	r1, r5, #0x10
	cmp	r0, r1
	ble	.L844	@cond_branch
	lsr	r3, r1, #0x10
	b	.L844
.L850:
	.align	2, 0
.L849:
	.word	sTransitionData
	.word	gScanlineEffectRegBuffers
.L841:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r4, #0x28
	ldrsh	r1, [r2, r4]
	cmp	r0, r1
	ble	.L845	@cond_branch
	ldrh	r5, [r2, #0x28]
.L845:
	lsl	r0, r5, #0x10
	lsl	r1, r3, #0x10
	cmp	r0, r1
	bgt	.L844	@cond_branch
	lsr	r5, r1, #0x10
.L844:
	ldr	r0, .L851
	ldr	r4, [r0]
	mov	r0, #0x2a
	ldrsh	r2, [r4, r0]
	lsl	r2, r2, #0x1
	add	r2, r2, r9
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x8
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	orr	r0, r0, r1
	strh	r0, [r2]
	cmp	r7, #0
	beq	.L847	@cond_branch
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L838
.L852:
	.align	2, 0
.L851:
	.word	sTransitionData
.L847:
	add	r0, r4, #0
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	UpdateBlackWipe
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r1, r8
	lsl	r0, r1, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r0, r3
	lsr	r4, r0, #0x10
	mov	r8, r4
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L840	@cond_branch
.L838:
	ldr	r0, .L853
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L854:
	.align	2, 0
.L853:
	.word	sTransitionData
.Lfe117:
	.size	 AngledWipes_DoWipe,.Lfe117-AngledWipes_DoWipe
	.align	2, 0
	.type	 AngledWipes_TryEnd,function
	.thumb_func
AngledWipes_TryEnd:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L856	@cond_branch
	ldr	r1, .L859
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L859+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L859+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	FadeScreenBlack
	ldr	r0, .L859+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	b	.L858
.L860:
	.align	2, 0
.L859:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	Task_AngledWipes
.L856:
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	ldr	r1, .L861
	mov	r3, #0xa
	ldrsh	r0, [r2, r3]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2, #0xe]
	mov	r0, #0x1
.L858:
	pop	{r1}
	bx	r1
.L862:
	.align	2, 0
.L861:
	.word	sAngledWipes_EndDelays
.Lfe118:
	.size	 AngledWipes_TryEnd,.Lfe118-AngledWipes_TryEnd
	.align	2, 0
	.type	 AngledWipes_StartNext,function
	.thumb_func
AngledWipes_StartNext:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L864	@cond_branch
	mov	r0, #0x0
	b	.L866
.L864:
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
.L866:
	pop	{r1}
	bx	r1
.Lfe119:
	.size	 AngledWipes_StartNext,.Lfe119-AngledWipes_StartNext
	.align	2, 0
	.type	 VBlankCB_AngledWipes,function
	.thumb_func
VBlankCB_AngledWipes:
	push	{r4, r5, lr}
	ldr	r5, .L869
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L869+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L869+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xa]
	bl	VBlankCB_BattleTransition
	ldr	r4, .L869+0xc
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L868	@cond_branch
	ldr	r1, .L869+0x10
	ldr	r0, .L869+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L869+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L868:
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r4, .L869+0x14
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r4, r4, r0
	ldrh	r1, [r4]
	mov	r0, #0x40
	bl	SetGpuReg
	str	r4, [r5]
	ldr	r0, .L869+0x1c
	str	r0, [r5, #0x4]
	ldr	r0, .L869+0x20
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L870:
	.align	2, 0
.L869:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe120:
	.size	 VBlankCB_AngledWipes,.Lfe120-VBlankCB_AngledWipes
	.align	2, 0
	.type	 CreateIntroTask,function
	.thumb_func
CreateIntroTask:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x4
	mov	r8, r0
	add	r4, r1, #0
	add	r5, r2, #0
	add	r6, r3, #0
	ldr	r3, [sp, #0x18]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r0, .L872
	mov	r1, #0x3
	str	r3, [sp]
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L872+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, r8
	strh	r0, [r1, #0xa]
	strh	r4, [r1, #0xc]
	strh	r5, [r1, #0xe]
	strh	r6, [r1, #0x10]
	ldr	r3, [sp]
	strh	r3, [r1, #0x12]
	strh	r0, [r1, #0x14]
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L873:
	.align	2, 0
.L872:
	.word	Task_BattleTransition_Intro
	.word	gTasks
.Lfe121:
	.size	 CreateIntroTask,.Lfe121-CreateIntroTask
	.align	2, 0
	.type	 IsIntroTaskDone,function
	.thumb_func
IsIntroTaskDone:
	push	{lr}
	ldr	r0, .L878
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L875	@cond_branch
	mov	r0, #0x0
	b	.L877
.L879:
	.align	2, 0
.L878:
	.word	Task_BattleTransition_Intro
.L875:
	mov	r0, #0x1
.L877:
	pop	{r1}
	bx	r1
.Lfe122:
	.size	 IsIntroTaskDone,.Lfe122-IsIntroTaskDone
	.align	2, 0
	.type	 Task_BattleTransition_Intro,function
	.thumb_func
Task_BattleTransition_Intro:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L885
	ldr	r2, .L885+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L881:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L881	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L886:
	.align	2, 0
.L885:
	.word	sTransitionIntroFuncs
	.word	gTasks
.Lfe123:
	.size	 Task_BattleTransition_Intro,.Lfe123-Task_BattleTransition_Intro
	.align	2, 0
	.type	 TransitionIntro_FadeToGray,function
	.thumb_func
TransitionIntro_FadeToGray:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L889	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L888	@cond_branch
.L889:
	ldrh	r0, [r4, #0xa]
	strh	r0, [r4, #0x14]
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0x16]
	add	r0, r0, r1
	strh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L890	@cond_branch
	mov	r0, #0x10
	strh	r0, [r4, #0x16]
.L890:
	mov	r0, #0x1
	neg	r0, r0
	ldrb	r1, [r4, #0x16]
	ldr	r2, .L892
	bl	BlendPalettes
.L888:
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	ble	.L891	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	strh	r0, [r4, #0x14]
.L891:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L893:
	.align	2, 0
.L892:
	.word	0x2d6b
.Lfe124:
	.size	 TransitionIntro_FadeToGray,.Lfe124-TransitionIntro_FadeToGray
	.align	2, 0
	.type	 TransitionIntro_FadeFromGray,function
	.thumb_func
TransitionIntro_FadeFromGray:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L896	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L895	@cond_branch
.L896:
	ldrh	r0, [r4, #0xc]
	strh	r0, [r4, #0x14]
	ldrh	r0, [r4, #0x16]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L897	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x16]
.L897:
	mov	r0, #0x1
	neg	r0, r0
	ldrb	r1, [r4, #0x16]
	ldr	r2, .L901
	bl	BlendPalettes
.L895:
	mov	r0, #0x16
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L898	@cond_branch
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L899	@cond_branch
	ldr	r0, .L901+0x4
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	b	.L898
.L902:
	.align	2, 0
.L901:
	.word	0x2d6b
	.word	Task_BattleTransition_Intro
.L899:
	ldrh	r0, [r4, #0xa]
	strh	r0, [r4, #0x14]
	strh	r1, [r4, #0x8]
.L898:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe125:
	.size	 TransitionIntro_FadeFromGray,.Lfe125-TransitionIntro_FadeFromGray
	.align	2, 0
	.type	 InitTransitionData,function
	.thumb_func
InitTransitionData:
	push	{r4, lr}
	ldr	r4, .L904
	ldr	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x3c
	bl	memset
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x14
	add	r1, r1, #0x16
	bl	FieldCameraGetPixelOffsetAtGround
	pop	{r4}
	pop	{r0}
	bx	r0
.L905:
	.align	2, 0
.L904:
	.word	sTransitionData
.Lfe126:
	.size	 InitTransitionData,.Lfe126-InitTransitionData
	.align	2, 0
	.type	 VBlankCB_BattleTransition,function
	.thumb_func
VBlankCB_BattleTransition:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe127:
	.size	 VBlankCB_BattleTransition,.Lfe127-VBlankCB_BattleTransition
	.align	2, 0
	.type	 GetBg0TilemapDst,function
	.thumb_func
GetBg0TilemapDst:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x8
	bl	GetGpuReg
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x12
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe128:
	.size	 GetBg0TilemapDst,.Lfe128-GetBg0TilemapDst
	.align	2, 0
	.type	 GetBg0TilesDst,function
	.thumb_func
GetBg0TilesDst:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r0, #0x8
	bl	GetGpuReg
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x18
	mov	r0, #0x1f
	and	r4, r4, r0
	mov	r0, #0x8
	bl	GetGpuReg
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x12
	lsl	r4, r4, #0xb
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r4, r4, r1
	str	r4, [r5]
	add	r0, r0, r1
	str	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe129:
	.size	 GetBg0TilesDst,.Lfe129-GetBg0TilesDst
	.align	2, 0
	.type	 FadeScreenBlack,function
	.thumb_func
FadeScreenBlack:
	push	{lr}
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	pop	{r0}
	bx	r0
.Lfe130:
	.size	 FadeScreenBlack,.Lfe130-FadeScreenBlack
	.align	2, 0
	.type	 SetSinWave,function
	.thumb_func
SetSinWave:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	ldr	r0, [sp, #0x20]
	ldr	r4, [sp, #0x24]
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	lsl	r4, r4, #0x10
	mov	r6, #0x0
	lsr	r5, r4, #0x10
	cmp	r4, #0
	ble	.L912	@cond_branch
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r1, #0x10
	mov	r8, r1
	lsl	r0, r3, #0x10
	asr	r7, r0, #0x10
.L914:
	lsl	r4, r2, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0xff
	and	r0, r0, r4
	mov	r2, r8
	asr	r1, r2, #0x10
	bl	Sin
	lsl	r1, r6, #0x1
	add	r1, r1, sl
	add	r0, r0, r9
	strh	r0, [r1]
	lsl	r1, r5, #0x10
	ldr	r0, .L916
	add	r1, r1, r0
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r4, r4, r7
	lsl	r4, r4, #0x10
	lsr	r2, r4, #0x10
	lsr	r5, r1, #0x10
	cmp	r1, #0
	bgt	.L914	@cond_branch
.L912:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L917:
	.align	2, 0
.L916:
	.word	-0x10000
.Lfe131:
	.size	 SetSinWave,.Lfe131-SetSinWave
	.align	2, 0
	.type	 SetCircularMask,function
	.thumb_func
SetCircularMask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	mov	r9, r0
	add	r5, r2, #0
	add	r4, r3, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp]
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	mov	r1, #0xa
	bl	memset
	mov	r1, #0x0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	str	r4, [sp, #0x4]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	str	r5, [sp, #0x8]
.L922:
	lsl	r5, r1, #0x10
	asr	r0, r5, #0x10
	mov	sl, r0
	ldr	r1, [sp, #0x4]
	bl	Sin
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, sl
	ldr	r1, [sp, #0x4]
	bl	Cos
	ldr	r2, [sp]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	sub	r2, r1, r4
	lsl	r2, r2, #0x10
	add	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r3, [sp, #0x8]
	sub	r1, r3, r0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	add	r0, r3, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsr	r1, r2, #0x10
	str	r5, [sp, #0x10]
	cmp	r2, #0
	bge	.L923	@cond_branch
	mov	r1, #0x0
.L923:
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf0
	ble	.L924	@cond_branch
	mov	r6, #0xf0
.L924:
	lsl	r0, r7, #0x10
	cmp	r0, #0
	bge	.L925	@cond_branch
	mov	r7, #0x0
.L925:
	mov	r2, r8
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L926	@cond_branch
	mov	r3, #0x9f
	mov	r8, r3
.L926:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x10
	orr	r6, r6, r0
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	strh	r6, [r0]
	mov	r0, r8
	lsl	r4, r0, #0x10
	asr	r0, r4, #0xf
	add	r0, r0, r9
	strh	r6, [r0]
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r1, [sp, #0x4]
	bl	Cos
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r2, [sp, #0x8]
	sub	r1, r2, r0
	lsl	r1, r1, #0x10
	add	r0, r2, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsr	r3, r1, #0x10
	cmp	r1, #0
	bge	.L927	@cond_branch
	mov	r3, #0x0
.L927:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L928	@cond_branch
	mov	r2, #0x9f
.L928:
	lsl	r0, r3, #0x10
	asr	r1, r0, #0x10
	add	r3, r0, #0
	lsl	r5, r2, #0x10
	ldr	r0, [sp, #0xc]
	cmp	r0, r1
	ble	.L930	@cond_branch
	add	r2, r1, #0
.L931:
	lsl	r1, r7, #0x10
	ldr	r0, .L949
	add	r1, r1, r0
	asr	r0, r1, #0xf
	add	r0, r0, r9
	strh	r6, [r0]
	lsr	r7, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, r2
	bgt	.L931	@cond_branch
.L930:
	lsl	r1, r7, #0x10
	asr	r0, r3, #0x10
	cmp	r1, r3
	bge	.L946	@cond_branch
	add	r2, r0, #0
.L935:
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r1, r3
	asr	r1, r0, #0xf
	add	r1, r1, r9
	strh	r6, [r1]
	add	r1, r0, #0
	asr	r0, r1, #0x10
	cmp	r0, r2
	blt	.L935	@cond_branch
.L946:
	asr	r0, r5, #0x10
	cmp	r4, r5
	ble	.L947	@cond_branch
	add	r1, r0, #0
.L939:
	ldr	r2, .L949
	add	r0, r4, r2
	lsr	r3, r0, #0x10
	mov	r8, r3
	asr	r0, r0, #0xf
	add	r0, r0, r9
	strh	r6, [r0]
	lsl	r4, r3, #0x10
	asr	r0, r4, #0x10
	cmp	r0, r1
	bgt	.L939	@cond_branch
.L947:
	mov	r0, r8
	lsl	r4, r0, #0x10
	asr	r0, r5, #0x10
	cmp	r4, r5
	bge	.L948	@cond_branch
	add	r2, r0, #0
.L943:
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r4, r1
	asr	r1, r0, #0xf
	add	r1, r1, r9
	strh	r6, [r1]
	add	r4, r0, #0
	asr	r0, r4, #0x10
	cmp	r0, r2
	blt	.L943	@cond_branch
.L948:
	ldr	r2, [sp, #0x10]
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r2, r3
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3f
	bgt	.LCB9635
	b	.L922	@long jump
.LCB9635:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L950:
	.align	2, 0
.L949:
	.word	-0x10000
.Lfe132:
	.size	 SetCircularMask,.Lfe132-SetCircularMask
	.align	2, 0
	.type	 InitBlackWipe,function
	.thumb_func
InitBlackWipe:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r0, [sp, #0x14]
	ldr	r5, [sp, #0x18]
	ldr	r4, [sp, #0x1c]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r7, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	strh	r1, [r6]
	strh	r2, [r6, #0x2]
	strh	r1, [r6, #0x4]
	strh	r2, [r6, #0x6]
	strh	r3, [r6, #0x8]
	strh	r7, [r6, #0xa]
	strh	r5, [r6, #0xc]
	strh	r4, [r6, #0xe]
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	sub	r3, r3, r1
	strh	r3, [r6, #0x10]
	lsl	r0, r3, #0x10
	cmp	r0, #0
	bge	.L952	@cond_branch
	neg	r0, r3
	strh	r0, [r6, #0x10]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r6, #0xc]
.L952:
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	sub	r1, r0, r1
	strh	r1, [r6, #0x12]
	lsl	r0, r1, #0x10
	cmp	r0, #0
	bge	.L953	@cond_branch
	neg	r0, r1
	strh	r0, [r6, #0x12]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r6, #0xe]
.L953:
	mov	r0, #0x0
	strh	r0, [r6, #0x14]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe133:
	.size	 InitBlackWipe,.Lfe133-InitBlackWipe
	.align	2, 0
	.type	 UpdateBlackWipe,function
	.thumb_func
UpdateBlackWipe:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	ldrh	r0, [r3, #0x10]
	mov	r8, r0
	mov	r1, #0x10
	ldrsh	r6, [r3, r1]
	ldrh	r2, [r3, #0x12]
	mov	ip, r2
	mov	r4, #0x12
	ldrsh	r5, [r3, r4]
	cmp	r6, r5
	ble	.L955	@cond_branch
	ldrh	r0, [r3, #0xc]
	ldrh	r2, [r3, #0x4]
	add	r1, r0, r2
	strh	r1, [r3, #0x4]
	ldrh	r2, [r3, #0x14]
	add	r2, r2, ip
	strh	r2, [r3, #0x14]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r4, r0, #0
	ldrh	r7, [r3, #0xe]
	cmp	r1, r6
	ble	.L957	@cond_branch
	ldrh	r1, [r3, #0x6]
	add	r0, r7, r1
	strh	r0, [r3, #0x6]
	mov	r1, r8
	b	.L970
.L955:
	ldrh	r0, [r3, #0xe]
	ldrh	r2, [r3, #0x6]
	add	r1, r0, r2
	strh	r1, [r3, #0x6]
	ldrh	r2, [r3, #0x14]
	add	r2, r2, r8
	strh	r2, [r3, #0x14]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	ldrh	r4, [r3, #0xc]
	add	r7, r0, #0
	cmp	r1, r5
	ble	.L957	@cond_branch
	ldrh	r1, [r3, #0x4]
	add	r0, r4, r1
	strh	r0, [r3, #0x4]
	mov	r1, ip
.L970:
	sub	r0, r2, r1
	strh	r0, [r3, #0x14]
.L957:
	mov	r5, #0x0
	lsl	r0, r4, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	ble	.L961	@cond_branch
	mov	r4, #0x4
	ldrsh	r1, [r3, r4]
	mov	r4, #0x8
	ldrsh	r0, [r3, r4]
	ldrh	r4, [r3, #0x8]
	cmp	r1, r0
	bge	.L960	@cond_branch
.L961:
	cmp	r2, #0
	bge	.L959	@cond_branch
	mov	r0, #0x4
	ldrsh	r1, [r3, r0]
	mov	r2, #0x8
	ldrsh	r0, [r3, r2]
	ldrh	r4, [r3, #0x8]
	cmp	r1, r0
	bgt	.L959	@cond_branch
.L960:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r9
	cmp	r0, #0
	beq	.L959	@cond_branch
	strh	r4, [r3, #0x4]
.L959:
	lsl	r0, r7, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	ble	.L965	@cond_branch
	mov	r4, #0x6
	ldrsh	r1, [r3, r4]
	mov	r4, #0xa
	ldrsh	r0, [r3, r4]
	ldrh	r4, [r3, #0xa]
	cmp	r1, r0
	bge	.L964	@cond_branch
.L965:
	cmp	r2, #0
	bge	.L963	@cond_branch
	mov	r0, #0x6
	ldrsh	r1, [r3, r0]
	mov	r2, #0xa
	ldrsh	r0, [r3, r2]
	ldrh	r4, [r3, #0xa]
	cmp	r1, r0
	bgt	.L963	@cond_branch
.L964:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, sl
	cmp	r0, #0
	beq	.L963	@cond_branch
	strh	r4, [r3, #0x6]
.L963:
	cmp	r5, #0x2
	beq	.L967	@cond_branch
	mov	r0, #0x0
	b	.L969
.L967:
	mov	r0, #0x1
.L969:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe134:
	.size	 UpdateBlackWipe,.Lfe134-UpdateBlackWipe
.text
	.align	2, 0 @ Don't pad with nop

