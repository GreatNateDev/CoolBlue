@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	1, 0
	.type	 sSoundMovesTable,object
sSoundMovesTable:
	.short	0x2d
	.short	0x2e
	.short	0x2f
	.short	0x30
	.short	0x67
	.short	0xad
	.short	0xfd
	.short	0x13f
	.short	0x140
	.short	0x130
	.short	0xffff
	.size	 sSoundMovesTable,22
.text
	.align	2, 0
	.globl	GetBattlerForBattleScript
	.type	 GetBattlerForBattleScript,function
	.thumb_func
GetBattlerForBattleScript:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	cmp	r0, #0xc
	bhi	.L3	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L20
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L21:
	.align	2, 0
.L20:
	.word	.L17
	.align	2, 0
	.align	2, 0
.L17:
	.word	.L4
	.word	.L5
	.word	.L6
	.word	.L9
	.word	.L3
	.word	.L10
	.word	.L3
	.word	.L7
	.word	.L3
	.word	.L3
	.word	.L8
	.word	.L11
	.word	.L12
.L4:
	ldr	r0, .L22
	ldrb	r2, [r0]
	b	.L3
.L23:
	.align	2, 0
.L22:
	.word	gBattlerTarget
.L5:
	ldr	r0, .L24
	ldrb	r2, [r0]
	b	.L3
.L25:
	.align	2, 0
.L24:
	.word	gBattlerAttacker
.L6:
	ldr	r0, .L26
	ldrb	r2, [r0]
	b	.L3
.L27:
	.align	2, 0
.L26:
	.word	gEffectBattler
.L7:
	mov	r2, #0x0
	b	.L3
.L8:
	ldr	r0, .L28
	ldrb	r2, [r0, #0x17]
	b	.L3
.L29:
	.align	2, 0
.L28:
	.word	gBattleScripting
.L9:
.L10:
	ldr	r0, .L30
	ldrb	r2, [r0]
	b	.L3
.L31:
	.align	2, 0
.L30:
	.word	gBattlerFainted
.L11:
	mov	r0, #0x0
	b	.L19
.L12:
	mov	r0, #0x1
.L19:
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L3:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 GetBattlerForBattleScript,.Lfe1-GetBattlerForBattleScript
	.align	2, 0
	.globl	PressurePPLose
	.type	 PressurePPLose,function
	.thumb_func
PressurePPLose:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L44
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	ip, r1
	cmp	r0, #0x2e
	bne	.L32	@cond_branch
	mov	r3, #0x0
	mov	r0, r5
	mul	r0, r0, r4
	add	r1, r1, #0xc
	add	r1, r0, r1
	b	.L43
.L45:
	.align	2, 0
.L44:
	.word	gBattleMons
.L36:
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L35	@cond_branch
.L43:
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L36	@cond_branch
.L35:
	cmp	r3, #0x4
	beq	.L32	@cond_branch
	mov	r7, #0x58
	mov	r2, r5
	mul	r2, r2, r7
	add	r0, r3, r2
	mov	r6, ip
	add	r6, r6, #0x24
	add	r1, r0, r6
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L41	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L41:
	mov	r0, ip
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L32	@cond_branch
	ldr	r1, .L46
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L46+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L32	@cond_branch
	ldr	r4, .L46+0x8
	strb	r5, [r4]
	add	r1, r3, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r6
	add	r0, r0, r3
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L32:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gDisableStructs
	.word	gBitTable
	.word	gActiveBattler
.Lfe2:
	.size	 PressurePPLose,.Lfe2-PressurePPLose
	.align	2, 0
	.globl	PressurePPLoseOnUsingImprison
	.type	 PressurePPLoseOnUsingImprison,function
	.thumb_func
PressurePPLoseOnUsingImprison:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x4
	mov	r8, r0
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r4, #0x0
	ldr	r0, .L64
	ldrb	r0, [r0]
	cmp	r4, r0
	bge	.L50	@cond_branch
	ldr	r1, .L64+0x4
	mov	r0, #0x58
	mov	r7, r5
	mul	r7, r7, r0
	add	r1, r1, #0xc
	mov	sl, r1
.L52:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r4, #0x1
	cmp	r9, r0
	beq	.L51	@cond_branch
	ldr	r0, .L64+0x4
	mov	r3, #0x58
	mov	r1, r4
	mul	r1, r1, r3
	add	r1, r1, r0
	add	r1, r1, #0x20
	ldrb	r1, [r1]
	add	r4, r0, #0
	cmp	r1, #0x2e
	bne	.L51	@cond_branch
	mov	r2, #0x0
	mov	r0, r5
	mul	r0, r0, r3
	add	r1, r4, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x8f
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L55	@cond_branch
	add	r3, r1, #0
	mov	r0, sl
	add	r1, r7, r0
.L56:
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L55	@cond_branch
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L56	@cond_branch
.L55:
	cmp	r2, #0x4
	beq	.L51	@cond_branch
	mov	r8, r2
	add	r1, r2, r7
	add	r0, r4, #0
	add	r0, r0, #0x24
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L51	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L51:
	add	r4, r6, #0
	ldr	r0, .L64
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L52	@cond_branch
.L50:
	mov	r1, r8
	cmp	r1, #0x4
	beq	.L63	@cond_branch
	ldr	r6, .L64+0x4
	mov	r3, #0x58
	mov	r0, r5
	mul	r0, r0, r3
	add	r1, r6, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L63	@cond_branch
	ldr	r1, .L64+0x8
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L64+0xc
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L63	@cond_branch
	ldr	r4, .L64+0x10
	strb	r5, [r4]
	mov	r1, r8
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r2, r6, #0
	add	r2, r2, #0x24
	add	r0, r0, r2
	add	r0, r0, r8
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L63:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L65:
	.align	2, 0
.L64:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
	.word	gActiveBattler
.Lfe3:
	.size	 PressurePPLoseOnUsingImprison,.Lfe3-PressurePPLoseOnUsingImprison
	.align	2, 0
	.globl	PressurePPLoseOnUsingPerishSong
	.type	 PressurePPLoseOnUsingPerishSong,function
	.thumb_func
PressurePPLoseOnUsingPerishSong:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r6, #0x4
	mov	r1, #0x0
	ldr	r0, .L82
	mov	r8, r0
	ldrb	r0, [r0]
	cmp	r1, r0
	bge	.L68	@cond_branch
	ldr	r7, .L82+0x4
	mov	r2, #0x58
	mov	ip, r2
	mov	r5, ip
	mul	r5, r5, r3
	add	r0, r7, #0
	add	r0, r0, #0xc
	add	r2, r5, r0
	mov	sl, r2
	mov	r9, r5
.L70:
	mov	r0, ip
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r4, r1, #0x1
	cmp	r0, #0x2e
	bne	.L69	@cond_branch
	cmp	r1, r3
	beq	.L69	@cond_branch
	mov	r2, #0x0
	mov	r1, sl
	ldrh	r0, [r1]
	cmp	r0, #0xc3
	beq	.L73	@cond_branch
	ldr	r1, .L82+0x8
	add	r1, r1, r9
.L74:
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L73	@cond_branch
	ldrh	r0, [r1]
	cmp	r0, #0xc3
	bne	.L74	@cond_branch
.L73:
	cmp	r2, #0x4
	beq	.L69	@cond_branch
	add	r6, r2, #0
	add	r0, r6, r5
	ldr	r2, .L82+0xc
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L69	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L69:
	add	r1, r4, #0
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r1, r0
	blt	.L70	@cond_branch
.L68:
	cmp	r6, #0x4
	beq	.L81	@cond_branch
	ldr	r7, .L82+0x4
	mov	r5, #0x58
	mov	r0, r3
	mul	r0, r0, r5
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L81	@cond_branch
	ldr	r1, .L82+0x10
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L82+0x14
	lsl	r0, r6, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L81	@cond_branch
	ldr	r4, .L82+0x18
	strb	r3, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r2, r7, #0
	add	r2, r2, #0x24
	add	r0, r0, r2
	add	r0, r0, r6
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L81:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBattleMons+0xc
	.word	gBattleMons+0x24
	.word	gDisableStructs
	.word	gBitTable
	.word	gActiveBattler
.Lfe4:
	.size	 PressurePPLoseOnUsingPerishSong,.Lfe4-PressurePPLoseOnUsingPerishSong
	.align	2, 0
	.type	 MarkAllBattlersForControllerExec,function
	.thumb_func
MarkAllBattlersForControllerExec:
	push	{r4, r5, lr}
	ldr	r0, .L97
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L85	@cond_branch
	mov	r2, #0x0
	ldr	r4, .L97+0x4
	ldrb	r0, [r4]
	cmp	r2, r0
	bge	.L91	@cond_branch
	ldr	r3, .L97+0x8
	ldr	r5, .L97+0xc
.L89:
	ldmia	r5!, {r1}
	lsl	r1, r1, #0x1c
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	add	r2, r2, #0x1
	ldrb	r0, [r4]
	cmp	r2, r0
	blt	.L89	@cond_branch
	b	.L91
.L98:
	.align	2, 0
.L97:
	.word	gBattleTypeFlags
	.word	gBattlersCount
	.word	gBattleControllerExecFlags
	.word	gBitTable
.L85:
	mov	r2, #0x0
	ldr	r4, .L99
	ldrb	r0, [r4]
	cmp	r2, r0
	bge	.L91	@cond_branch
	ldr	r3, .L99+0x4
	ldr	r5, .L99+0x8
.L95:
	ldr	r0, [r3]
	ldmia	r5!, {r1}
	orr	r0, r0, r1
	str	r0, [r3]
	add	r2, r2, #0x1
	ldrb	r0, [r4]
	cmp	r2, r0
	blt	.L95	@cond_branch
.L91:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gBattlersCount
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe5:
	.size	 MarkAllBattlersForControllerExec,.Lfe5-MarkAllBattlersForControllerExec
	.align	2, 0
	.globl	MarkBattlerForControllerExec
	.type	 MarkBattlerForControllerExec,function
	.thumb_func
MarkBattlerForControllerExec:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L104
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L102	@cond_branch
	ldr	r2, .L104+0x4
	ldr	r1, .L104+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L103
.L105:
	.align	2, 0
.L104:
	.word	gBattleTypeFlags
	.word	gBattleControllerExecFlags
	.word	gBitTable
.L102:
	ldr	r2, .L106
	ldr	r1, .L106+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	orr	r1, r1, r0
	str	r1, [r2]
.L103:
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe6:
	.size	 MarkBattlerForControllerExec,.Lfe6-MarkBattlerForControllerExec
	.align	2, 0
	.globl	MarkBattlerReceivedLinkData
	.type	 MarkBattlerReceivedLinkData,function
	.thumb_func
MarkBattlerReceivedLinkData:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	ldr	r5, .L114
	ldr	r1, .L114+0x4
	lsl	r0, r7, #0x2
	add	r6, r0, r1
	b	.L109
.L115:
	.align	2, 0
.L114:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.L112:
	lsl	r0, r4, #0x2
	ldr	r1, [r6]
	lsl	r1, r1, r0
	ldr	r0, [r5]
	orr	r0, r0, r1
	str	r0, [r5]
	add	r4, r4, #0x1
.L109:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L112	@cond_branch
	ldr	r2, .L116
	mov	r1, #0x80
	lsl	r1, r1, #0x15
	lsl	r1, r1, r7
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L117:
	.align	2, 0
.L116:
	.word	gBattleControllerExecFlags
.Lfe7:
	.size	 MarkBattlerReceivedLinkData,.Lfe7-MarkBattlerReceivedLinkData
	.align	2, 0
	.globl	CancelMultiTurnMoves
	.type	 CancelMultiTurnMoves,function
	.thumb_func
CancelMultiTurnMoves:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L119
	mov	r2, #0x58
	mov	r3, r0
	mul	r3, r3, r2
	add	r1, r1, #0x50
	add	r3, r3, r1
	ldr	r1, [r3]
	ldr	r2, .L119+0x4
	and	r1, r1, r2
	ldr	r2, .L119+0x8
	and	r1, r1, r2
	mov	r2, #0x71
	neg	r2, r2
	and	r1, r1, r2
	ldr	r2, .L119+0xc
	and	r1, r1, r2
	str	r1, [r3]
	ldr	r1, .L119+0x10
	lsl	r2, r0, #0x2
	add	r2, r2, r1
	ldr	r1, [r2]
	ldr	r3, .L119+0x14
	and	r1, r1, r3
	str	r1, [r2]
	ldr	r2, .L119+0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x11]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
	mov	r0, #0x0
	strb	r0, [r1, #0x10]
	bx	lr
.L120:
	.align	2, 0
.L119:
	.word	gBattleMons
	.word	-0x1001
	.word	-0xc01
	.word	-0x301
	.word	gStatuses3
	.word	-0x400c1
	.word	gDisableStructs
.Lfe8:
	.size	 CancelMultiTurnMoves,.Lfe8-CancelMultiTurnMoves
	.align	2, 0
	.globl	WasUnableToUseMove
	.type	 WasUnableToUseMove,function
	.thumb_func
WasUnableToUseMove:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L126
	lsr	r0, r0, #0x14
	add	r1, r0, r1
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	bne	.L123	@cond_branch
	ldrb	r2, [r1, #0x1]
	lsl	r0, r2, #0x1e
	cmp	r0, #0
	blt	.L123	@cond_branch
	lsl	r0, r2, #0x1a
	cmp	r0, #0
	blt	.L123	@cond_branch
	lsl	r0, r2, #0x19
	cmp	r0, #0
	blt	.L123	@cond_branch
	lsr	r0, r2, #0x7
	cmp	r0, #0
	bne	.L123	@cond_branch
	ldrb	r1, [r1, #0x2]
	lsl	r0, r1, #0x1f
	cmp	r0, #0
	bne	.L123	@cond_branch
	lsl	r0, r1, #0x1e
	cmp	r0, #0
	blt	.L123	@cond_branch
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	blt	.L123	@cond_branch
	lsl	r0, r2, #0x1f
	cmp	r0, #0
	beq	.L122	@cond_branch
.L123:
	mov	r0, #0x1
	b	.L125
.L127:
	.align	2, 0
.L126:
	.word	gProtectStructs
.L122:
	mov	r0, #0x0
.L125:
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 WasUnableToUseMove,.Lfe9-WasUnableToUseMove
	.align	2, 0
	.globl	PrepareStringBattle
	.type	 PrepareStringBattle,function
	.thumb_func
PrepareStringBattle:
	push	{r4, lr}
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r4, .L129
	strb	r1, [r4]
	mov	r0, #0x0
	add	r1, r2, #0
	bl	BtlController_EmitPrintString
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	pop	{r4}
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	gActiveBattler
.Lfe10:
	.size	 PrepareStringBattle,.Lfe10-PrepareStringBattle
	.align	2, 0
	.globl	ResetSentPokesToOpponentValue
	.type	 ResetSentPokesToOpponentValue,function
	.thumb_func
ResetSentPokesToOpponentValue:
	push	{r4, r5, r6, lr}
	mov	r3, #0x0
	ldr	r0, .L142
	strb	r3, [r0]
	strb	r3, [r0, #0x1]
	mov	r1, #0x0
	ldr	r0, .L142+0x4
	ldrb	r2, [r0]
	add	r6, r0, #0
	cmp	r1, r2
	bge	.L133	@cond_branch
	ldr	r5, .L142+0x8
	add	r4, r2, #0
	ldr	r2, .L142+0xc
.L135:
	ldrh	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	orr	r3, r3, r0
	add	r2, r2, #0x4
	add	r1, r1, #0x2
	cmp	r1, r4
	blt	.L135	@cond_branch
.L133:
	mov	r1, #0x1
	add	r2, r6, #0
	ldrb	r0, [r2]
	cmp	r1, r0
	bge	.L138	@cond_branch
	ldr	r5, .L142
	mov	r4, #0x2
.L140:
	add	r0, r1, #0
	and	r0, r0, r4
	asr	r0, r0, #0x1
	add	r0, r0, r5
	strb	r3, [r0]
	add	r1, r1, #0x2
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L140	@cond_branch
.L138:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gSentPokesToOpponent
	.word	gBattlersCount
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe11:
	.size	 ResetSentPokesToOpponentValue,.Lfe11-ResetSentPokesToOpponentValue
	.align	2, 0
	.globl	OpponentSwitchInResetSentPokesToOpponentValue
	.type	 OpponentSwitchInResetSentPokesToOpponentValue,function
	.thumb_func
OpponentSwitchInResetSentPokesToOpponentValue:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L145	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	mov	ip, r0
	ldr	r1, .L152
	add	r0, r0, r1
	strb	r4, [r0]
	add	r5, r4, #0
	ldr	r0, .L152+0x4
	ldrb	r2, [r0]
	mov	r8, r1
	cmp	r4, r2
	bge	.L147	@cond_branch
	ldr	r0, .L152+0x8
	ldrb	r7, [r0]
	ldr	r1, .L152+0xc
	add	r6, r2, #0
	ldr	r3, .L152+0x10
	add	r2, r1, #0
.L149:
	ldr	r0, [r2]
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L148	@cond_branch
	ldrh	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	orr	r4, r4, r0
.L148:
	add	r3, r3, #0x4
	add	r2, r2, #0x8
	add	r5, r5, #0x2
	cmp	r5, r6
	blt	.L149	@cond_branch
.L147:
	mov	r0, ip
	add	r0, r0, r8
	strb	r4, [r0]
.L145:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gSentPokesToOpponent
	.word	gBattlersCount
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe12:
	.size	 OpponentSwitchInResetSentPokesToOpponentValue,.Lfe12-OpponentSwitchInResetSentPokesToOpponentValue
	.align	2, 0
	.globl	UpdateSentPokesToOpponentValue
	.type	 UpdateSentPokesToOpponentValue,function
	.thumb_func
UpdateSentPokesToOpponentValue:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L155	@cond_branch
	add	r0, r4, #0
	bl	OpponentSwitchInResetSentPokesToOpponentValue
	b	.L156
.L155:
	mov	r3, #0x1
	ldr	r5, .L162
	ldrb	r0, [r5]
	cmp	r3, r0
	bge	.L156	@cond_branch
	ldr	r0, .L162+0x4
	mov	ip, r0
	mov	r7, #0x2
	ldr	r6, .L162+0x8
	ldr	r1, .L162+0xc
	lsl	r0, r4, #0x1
	add	r4, r0, r1
.L160:
	add	r2, r3, #0
	and	r2, r2, r7
	asr	r2, r2, #0x1
	add	r2, r2, ip
	ldrh	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r3, r3, #0x1
	ldrb	r0, [r5]
	cmp	r3, r0
	blt	.L160	@cond_branch
.L156:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	gBattlersCount
	.word	gSentPokesToOpponent
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe13:
	.size	 UpdateSentPokesToOpponentValue,.Lfe13-UpdateSentPokesToOpponentValue
	.align	2, 0
	.globl	BattleScriptPush
	.type	 BattleScriptPush,function
	.thumb_func
BattleScriptPush:
	push	{r4, lr}
	ldr	r1, .L165
	ldr	r1, [r1]
	ldr	r3, [r1, #0x8]
	add	r4, r3, #0
	add	r4, r4, #0x20
	ldrb	r1, [r4]
	add	r2, r1, #0x1
	strb	r2, [r4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x16
	add	r3, r3, r1
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	gBattleResources
.Lfe14:
	.size	 BattleScriptPush,.Lfe14-BattleScriptPush
	.align	2, 0
	.globl	BattleScriptPushCursor
	.type	 BattleScriptPushCursor,function
	.thumb_func
BattleScriptPushCursor:
	ldr	r0, .L168
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	add	r3, r2, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r0, .L168+0x4
	ldr	r0, [r0]
	str	r0, [r2]
	bx	lr
.L169:
	.align	2, 0
.L168:
	.word	gBattleResources
	.word	gBattlescriptCurrInstr
.Lfe15:
	.size	 BattleScriptPushCursor,.Lfe15-BattleScriptPushCursor
	.align	2, 0
	.globl	BattleScriptPop
	.type	 BattleScriptPop,function
	.thumb_func
BattleScriptPop:
	ldr	r3, .L171
	ldr	r0, .L171+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x8]
	add	r2, r1, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	sub	r0, r0, #0x1
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r3]
	bx	lr
.L172:
	.align	2, 0
.L171:
	.word	gBattlescriptCurrInstr
	.word	gBattleResources
.Lfe16:
	.size	 BattleScriptPop,.Lfe16-BattleScriptPop
	.align	2, 0
	.globl	TrySetCantSelectMoveBattleScript
	.type	 TrySetCantSelectMoveBattleScript,function
	.thumb_func
TrySetCantSelectMoveBattleScript:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x0
	ldr	r2, .L182
	ldr	r1, .L182+0x4
	ldr	r5, .L182+0x8
	ldrb	r3, [r5]
	lsl	r0, r3, #0x9
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x58
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r4, [r0]
	ldr	r1, .L182+0xc
	lsl	r0, r3, #0x1
	add	r0, r0, #0xc8
	ldr	r1, [r1]
	add	r1, r1, r0
	mov	r8, r1
	ldr	r1, .L182+0x10
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	cmp	r0, r4
	bne	.L174	@cond_branch
	cmp	r4, #0
	beq	.L174	@cond_branch
	ldr	r0, .L182+0x14
	strb	r3, [r0, #0x17]
	ldr	r0, .L182+0x18
	strh	r4, [r0]
	ldr	r1, .L182+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L182+0x20
	str	r1, [r0]
	mov	r6, #0x1
.L174:
	ldr	r1, .L182+0x24
	ldr	r5, .L182+0x8
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L175	@cond_branch
	cmp	r4, #0xa5
	beq	.L175	@cond_branch
	ldr	r1, .L182
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bge	.L175	@cond_branch
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	ldr	r1, .L182+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L182+0x28
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L175:
	ldr	r2, .L182+0x10
	ldr	r3, .L182+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L176	@cond_branch
	ldr	r0, .L182+0x2c
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L176	@cond_branch
	ldr	r0, .L182+0x18
	strh	r4, [r0]
	ldr	r1, .L182+0x1c
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L182+0x30
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L176:
	ldr	r5, .L182+0x8
	ldrb	r0, [r5]
	add	r1, r4, #0
	bl	GetImprisonedMovesCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L177	@cond_branch
	ldr	r0, .L182+0x18
	strh	r4, [r0]
	ldr	r1, .L182+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L182+0x34
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L177:
	ldr	r1, .L182
	ldrb	r2, [r5]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L178	@cond_branch
	ldr	r1, .L182+0x38
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r3, [r0, #0x7]
	b	.L179
.L183:
	.align	2, 0
.L182:
	.word	gBattleMons
	.word	gBattleBufferB
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gDisableStructs
	.word	gBattleScripting
	.word	gCurrentMove
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingDisabledMove
	.word	gLastMoves
	.word	BattleScript_SelectingTormentedMove
	.word	gBattleMoves
	.word	BattleScript_SelectingNotAllowedMoveTaunt
	.word	BattleScript_SelectingImprisonedMove
	.word	gEnigmaBerries
.L178:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L179:
	ldr	r2, .L184
	ldr	r1, .L184+0x4
	ldrb	r0, [r1]
	strb	r0, [r2]
	ldr	r7, .L184+0x8
	add	r5, r1, #0
	cmp	r3, #0x1d
	bne	.L180	@cond_branch
	mov	r0, r8
	ldrh	r1, [r0]
	add	r2, r1, #0
	cmp	r2, #0
	beq	.L180	@cond_branch
	ldr	r0, .L184+0xc
	cmp	r2, r0
	beq	.L180	@cond_branch
	cmp	r2, r4
	beq	.L180	@cond_branch
	ldr	r0, .L184+0x10
	strh	r1, [r0]
	ldr	r2, .L184+0x14
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r2]
	ldr	r1, .L184+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L184+0x1c
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L180:
	ldr	r0, .L184+0x20
	ldrb	r2, [r5]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x2
	add	r1, r1, r0
	mov	r0, #0x58
	mul	r0, r0, r2
	ldrb	r1, [r1]
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L181	@cond_branch
	ldr	r1, .L184+0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r1, .L184+0x24
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L181:
	add	r0, r6, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L185:
	.align	2, 0
.L184:
	.word	gPotentialItemEffectBattler
	.word	gActiveBattler
	.word	gBattleMons
	.word	0xffff
	.word	gCurrentMove
	.word	gLastUsedItem
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingNotAllowedMoveChoiceItem
	.word	gBattleBufferB
	.word	BattleScript_SelectingMoveWithNoPP
.Lfe17:
	.size	 TrySetCantSelectMoveBattleScript,.Lfe17-TrySetCantSelectMoveBattleScript
	.align	2, 0
	.globl	CheckMoveLimitations
	.type	 CheckMoveLimitations,function
	.thumb_func
CheckMoveLimitations:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r3, r2, #0x18
	ldr	r1, .L202
	lsl	r0, r7, #0x1
	add	r0, r0, #0xc8
	ldr	r1, [r1]
	add	r1, r1, r0
	str	r1, [sp, #0x4]
	ldr	r1, .L202+0x4
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L187	@cond_branch
	ldr	r2, .L202+0x8
	lsl	r1, r7, #0x3
	sub	r0, r1, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x7]
	str	r0, [sp]
	b	.L188
.L203:
	.align	2, 0
.L202:
	.word	gBattleStruct
	.word	gBattleMons
	.word	gEnigmaBerries
.L187:
	ldrh	r0, [r1, #0x2e]
	str	r3, [sp, #0x14]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r1, r7, #0x3
	ldr	r3, [sp, #0x14]
.L188:
	ldr	r0, .L204
	strb	r7, [r0]
	mov	r0, #0x0
	mov	r9, r0
	lsl	r2, r7, #0x1
	str	r2, [sp, #0xc]
	ldr	r5, .L204+0x4
	mov	ip, r5
	ldr	r0, .L204+0x8
	mov	r2, #0x58
	mov	r6, r7
	mul	r6, r6, r2
	str	r6, [sp, #0x8]
	ldr	r2, .L204+0xc
	add	r5, r6, r2
	mov	r6, #0x0
	str	r6, [sp, #0x10]
	mov	sl, r0
	sub	r0, r1, r7
	lsl	r0, r0, #0x2
	mov	r8, r0
	ldr	r6, .L204+0x10
.L192:
	ldrh	r0, [r5]
	cmp	r0, #0
	bne	.L193	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L193	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L193:
	ldr	r0, [sp, #0x8]
	add	r0, r0, r9
	mov	r1, sl
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L194	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L194	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L194:
	mov	r1, r8
	add	r1, r1, ip
	ldrh	r0, [r5]
	ldrh	r1, [r1, #0x4]
	cmp	r0, r1
	bne	.L195	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L195	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L195:
	mov	r0, #0x58
	mov	r2, r7
	mul	r2, r2, r0
	ldr	r1, [sp, #0x10]
	add	r0, r1, r2
	ldr	r1, .L204+0xc
	add	r0, r0, r1
	mov	ip, r0
	ldr	r1, .L204+0x14
	ldr	r0, [sp, #0xc]
	add	r1, r0, r1
	str	r1, [sp, #0x18]
	mov	r1, ip
	ldrh	r1, [r1]
	mov	ip, r1
	ldr	r0, [sp, #0x18]
	ldrh	r0, [r0]
	cmp	ip, r0
	bne	.L196	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L196	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bge	.L196	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L196:
	ldr	r0, .L204+0x4
	add	r0, r0, r8
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L197	@cond_branch
	mov	r0, #0x10
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L197	@cond_branch
	ldr	r2, .L204+0x18
	ldrh	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L197	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L197:
	ldrh	r1, [r5]
	add	r0, r7, #0
	str	r3, [sp, #0x14]
	bl	GetImprisonedMovesCount
	lsl	r0, r0, #0x18
	ldr	r3, [sp, #0x14]
	cmp	r0, #0
	beq	.L198	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L198	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L198:
	ldr	r1, .L204+0x4
	mov	r0, r8
	add	r2, r0, r1
	ldrb	r0, [r2, #0xe]
	lsl	r0, r0, #0x1c
	mov	ip, r1
	cmp	r0, #0
	beq	.L199	@cond_branch
	ldrh	r0, [r2, #0x6]
	ldrh	r1, [r5]
	cmp	r0, r1
	beq	.L199	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L199:
	ldr	r2, [sp]
	cmp	r2, #0x1d
	bne	.L191	@cond_branch
	ldr	r0, [sp, #0x4]
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L191	@cond_branch
	ldr	r0, .L204+0x1c
	cmp	r1, r0
	beq	.L191	@cond_branch
	ldrh	r2, [r5]
	cmp	r1, r2
	beq	.L191	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L191:
	add	r6, r6, #0x4
	add	r5, r5, #0x2
	ldr	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	mov	r1, #0x1
	add	r9, r9, r1
	mov	r2, r9
	cmp	r2, #0x3
	bgt	.LCB1923
	b	.L192	@long jump
.LCB1923:
	add	r0, r4, #0
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L205:
	.align	2, 0
.L204:
	.word	gPotentialItemEffectBattler
	.word	gDisableStructs
	.word	gBattleMons
	.word	gBattleMons+0xc
	.word	gBitTable
	.word	gLastMoves
	.word	gBattleMoves
	.word	0xffff
.Lfe18:
	.size	 CheckMoveLimitations,.Lfe18-CheckMoveLimitations
	.align	2, 0
	.globl	AreAllMovesUnusable
	.type	 AreAllMovesUnusable,function
	.thumb_func
AreAllMovesUnusable:
	push	{r4, r5, r6, lr}
	ldr	r5, .L213
	ldrb	r0, [r5]
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xf
	bne	.L207	@cond_branch
	ldr	r0, .L213+0x4
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L213+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L213+0xc
	str	r1, [r0]
	ldr	r0, .L213+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L208	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r4, r0, #0
	bl	Random
	mov	r1, #0x1
	eor	r4, r4, r1
	mov	r1, #0x2
	and	r1, r1, r0
	orr	r4, r4, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerAtPosition
	ldr	r2, .L213+0x14
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x3
	add	r1, r1, r2
	b	.L212
.L214:
	.align	2, 0
.L213:
	.word	gActiveBattler
	.word	gProtectStructs
	.word	gSelectionBattleScripts
	.word	BattleScript_NoMovesLeft
	.word	gBattleTypeFlags
	.word	gBattleBufferB
.L208:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r2, .L215
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x3
	add	r1, r1, r2
	b	.L212
.L216:
	.align	2, 0
.L215:
	.word	gBattleBufferB
.L207:
	ldr	r0, .L217
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
.L212:
	strb	r0, [r1]
	mov	r0, #0x0
	cmp	r6, #0xf
	bne	.L211	@cond_branch
	mov	r0, #0x1
.L211:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L218:
	.align	2, 0
.L217:
	.word	gProtectStructs
.Lfe19:
	.size	 AreAllMovesUnusable,.Lfe19-AreAllMovesUnusable
	.align	2, 0
	.globl	GetImprisonedMovesCount
	.type	 GetImprisonedMovesCount,function
	.thumb_func
GetImprisonedMovesCount:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r6, #0x0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r4, #0x0
	ldr	r0, .L233
	ldrb	r0, [r0]
	cmp	r6, r0
	bge	.L221	@cond_branch
	ldr	r7, .L233+0x4
	mov	r8, r7
.L223:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r4, #0x1
	cmp	r9, r0
	beq	.L222	@cond_branch
	ldr	r1, .L233+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L222	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x58
	mov	r1, r4
	mul	r1, r1, r0
	add	r0, r1, r7
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L226	@cond_branch
	mov	r4, r8
	add	r0, r1, r4
.L227:
	add	r0, r0, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L222	@cond_branch
	ldrh	r1, [r0]
	cmp	r5, r1
	bne	.L227	@cond_branch
.L226:
	cmp	r2, #0x3
	bgt	.L222	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L222:
	add	r4, r3, #0
	ldr	r0, .L233
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L223	@cond_branch
.L221:
	add	r0, r6, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L234:
	.align	2, 0
.L233:
	.word	gBattlersCount
	.word	gBattleMons+0xc
	.word	gStatuses3
.Lfe20:
	.size	 GetImprisonedMovesCount,.Lfe20-GetImprisonedMovesCount
	.align	2, 0
	.globl	DoFieldEndTurnEffects
	.type	 DoFieldEndTurnEffects,function
	.thumb_func
DoFieldEndTurnEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L348
	mov	r2, r9
	strb	r2, [r1]
	ldr	r0, .L348+0x4
	ldrb	r4, [r0]
	add	r6, r1, #0
	mov	sl, r0
	ldr	r7, .L348+0x8
	ldr	r3, .L348+0xc
	mov	ip, r3
	cmp	r9, r4
	bcs	.L237	@cond_branch
	ldr	r2, .L348+0x10
	ldrb	r1, [r2]
	ldr	r5, .L348+0x14
	ldr	r0, [r5]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L237	@cond_branch
	add	r3, r6, #0
.L238:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L237	@cond_branch
	ldrb	r0, [r2]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L238	@cond_branch
.L237:
	mov	r0, #0x0
	strb	r0, [r7]
	mov	r0, sl
	ldrb	r4, [r0]
	cmp	r4, #0
	beq	.L248	@cond_branch
	ldr	r2, .L348+0x10
	ldrb	r1, [r2]
	ldr	r5, .L348+0x14
	ldr	r0, [r5]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L248	@cond_branch
	add	r3, r7, #0
.L244:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L248	@cond_branch
	ldrb	r0, [r2]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L244	@cond_branch
.L248:
	mov	r1, ip
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0xa
	bls	.LCB2320
	b	.L250	@long jump
.LCB2320:
	lsl	r0, r0, #0x2
	ldr	r1, .L348+0x18
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L349:
	.align	2, 0
.L348:
	.word	gBattlerAttacker
	.word	gBattlersCount
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	.L335
	.align	2, 0
	.align	2, 0
.L335:
	.word	.L252
	.word	.L269
	.word	.L278
	.word	.L287
	.word	.L295
	.word	.L304
	.word	.L312
	.word	.L322
	.word	.L326
	.word	.L330
	.word	.L334
.L252:
	mov	r5, #0x0
	ldr	r1, .L350
	mov	sl, r1
	ldrb	r2, [r1]
	cmp	r5, r2
	bge	.L254	@cond_branch
	ldr	r2, .L350+0x4
.L256:
	add	r0, r5, r2
	strb	r5, [r0]
	add	r5, r5, #0x1
	ldrb	r3, [r1]
	cmp	r5, r3
	blt	.L256	@cond_branch
.L254:
	mov	r5, #0x0
	b	.L341
.L351:
	.align	2, 0
.L350:
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
.L261:
	add	r4, r5, #0x1
	add	r6, r4, #0
	ldrb	r1, [r1]
	cmp	r6, r1
	bge	.L260	@cond_branch
	ldr	r7, .L352
	ldr	r0, .L352+0x4
	mov	sl, r0
	lsl	r1, r5, #0x18
	mov	r8, r1
.L265:
	add	r0, r5, r7
	ldrb	r0, [r0]
	add	r1, r4, r7
	ldrb	r1, [r1]
	mov	r2, #0x0
	bl	GetWhoStrikesFirst
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L264	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r2, r8
	lsr	r0, r2, #0x18
	bl	SwapTurnOrder
.L264:
	add	r4, r4, #0x1
	ldr	r0, .L352+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L265	@cond_branch
.L260:
	add	r5, r6, #0
.L341:
	mov	r1, sl
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	cmp	r5, r0
	blt	.L261	@cond_branch
	ldr	r2, .L352+0x8
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x3]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x3]
	ldr	r0, [r2]
	add	r0, r0, #0xdb
	mov	r1, #0x0
	strb	r1, [r0]
	mov	ip, r2
.L269:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.LCB2457
	b	.L297	@long jump
.LCB2457:
	ldr	r3, .L352+0xc
	mov	r8, r3
	mov	r7, #0x0
	ldr	r6, .L352+0x10
	ldr	r5, .L352+0x14
.L272:
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r4, [r0]
	ldr	r2, .L352+0x18
	lsl	r1, r4, #0x1
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x1]
	strb	r0, [r6]
	mov	r3, r8
	strb	r0, [r3]
	ldr	r0, .L352+0x1c
	add	r3, r1, r0
	ldrh	r1, [r3]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L273	@cond_branch
	ldrb	r0, [r2]
	sub	r0, r0, #0x1
	strb	r0, [r2]
	mov	r4, #0xff
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L273	@cond_branch
	ldrh	r0, [r3]
	ldr	r2, .L352+0x20
	add	r1, r2, #0
	and	r0, r0, r1
	strh	r0, [r3]
	ldr	r0, .L352+0x24
	bl	BattleScriptExecute
	mov	r0, #0xfd
	strb	r0, [r5]
	mov	r0, #0x2
	strb	r0, [r5, #0x1]
	mov	r0, #0x73
	strb	r0, [r5, #0x2]
	strb	r7, [r5, #0x3]
	ldrb	r0, [r5, #0x4]
	orr	r0, r0, r4
	strb	r0, [r5, #0x4]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L273:
	ldr	r2, .L352+0x8
	ldr	r1, [r2]
	add	r1, r1, #0xdb
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	ip, r2
	mov	r3, r9
	cmp	r3, #0
	beq	.LCB2534
	b	.L340	@long jump
.LCB2534:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L272	@cond_branch
	b	.L297
.L353:
	.align	2, 0
.L352:
	.word	gBattlerByTurnOrder
	.word	gBattlersCount
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gSideStatuses
	.word	0xfffe
	.word	BattleScript_SideStatusWoreOff
.L278:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.LCB2574
	b	.L289	@long jump
.LCB2574:
	mov	r0, #0x2
	mov	sl, r0
	mov	r2, #0x0
	mov	r8, r2
	ldr	r7, .L354
	ldr	r5, .L354+0x4
.L281:
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r4, [r0]
	ldr	r2, .L354+0x8
	lsl	r1, r4, #0x1
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x3]
	strb	r0, [r7]
	ldr	r3, .L354+0xc
	strb	r0, [r3]
	ldr	r0, .L354+0x10
	add	r3, r1, r0
	ldrh	r1, [r3]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L282	@cond_branch
	ldrb	r0, [r2, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r2, #0x2]
	mov	r6, #0xff
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L282	@cond_branch
	ldrh	r0, [r3]
	ldr	r2, .L354+0x14
	add	r1, r2, #0
	and	r0, r0, r1
	strh	r0, [r3]
	ldr	r0, .L354+0x18
	bl	BattleScriptExecute
	ldr	r0, .L354+0x1c
	strb	r4, [r0, #0x5]
	mov	r0, #0xfd
	strb	r0, [r5]
	mov	r3, sl
	strb	r3, [r5, #0x1]
	mov	r0, #0x71
	strb	r0, [r5, #0x2]
	mov	r0, r8
	strb	r0, [r5, #0x3]
	ldrb	r0, [r5, #0x4]
	orr	r0, r0, r6
	strb	r0, [r5, #0x4]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L282:
	ldr	r2, .L354+0x20
	ldr	r1, [r2]
	add	r1, r1, #0xdb
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	ip, r2
	mov	r1, r9
	cmp	r1, #0
	beq	.LCB2656
	b	.L340	@long jump
.LCB2656:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L281	@cond_branch
	b	.L289
.L355:
	.align	2, 0
.L354:
	.word	gBattlerAttacker
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gActiveBattler
	.word	gSideStatuses
	.word	0xfffd
	.word	BattleScript_SideStatusWoreOff
	.word	gBattleCommunication
	.word	gBattleStruct
.L287:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L289	@cond_branch
	ldr	r0, .L356
	mov	sl, r0
	mov	r2, #0x0
	mov	r8, r2
	ldr	r7, .L356+0x4
	ldr	r5, .L356+0x8
.L290:
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r4, [r0]
	ldr	r1, .L356+0xc
	lsl	r3, r4, #0x1
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x5]
	strb	r0, [r7]
	mov	r2, sl
	strb	r0, [r2]
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L291	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x4]
	mov	r6, #0xff
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L291	@cond_branch
	ldr	r2, .L356+0x10
	add	r2, r3, r2
	ldrh	r0, [r2]
	ldr	r3, .L356+0x14
	add	r1, r3, #0
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L356+0x18
	bl	BattleScriptExecute
	ldr	r0, .L356+0x1c
	strb	r4, [r0, #0x5]
	mov	r0, #0xfd
	strb	r0, [r5]
	mov	r0, #0x2
	strb	r0, [r5, #0x1]
	mov	r0, #0x36
	strb	r0, [r5, #0x2]
	mov	r0, r8
	strb	r0, [r5, #0x3]
	ldrb	r0, [r5, #0x4]
	orr	r0, r0, r6
	strb	r0, [r5, #0x4]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L291:
	ldr	r2, .L356+0x20
	ldr	r1, [r2]
	add	r1, r1, #0xdb
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	ip, r2
	mov	r1, r9
	cmp	r1, #0
	beq	.LCB2772
	b	.L340	@long jump
.LCB2772:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L290	@cond_branch
.L289:
	mov	r2, r9
	cmp	r2, #0
	beq	.LCB2787
	b	.L340	@long jump
.LCB2787:
	mov	r3, ip
	ldr	r0, [r3]
	ldrb	r1, [r0, #0x3]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x3]
	ldr	r0, [r3]
	add	r0, r0, #0xdb
	strb	r2, [r0]
	b	.L250
.L357:
	.align	2, 0
.L356:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gSideStatuses
	.word	0xfeff
	.word	BattleScript_SideStatusWoreOff
	.word	gBattleCommunication
	.word	gBattleStruct
.L295:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L297	@cond_branch
	ldr	r6, .L358
	ldr	r5, .L358+0x4
.L298:
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r4, [r0]
	ldr	r2, .L358+0x8
	lsl	r1, r4, #0x1
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x7]
	strb	r0, [r5]
	strb	r0, [r6]
	ldr	r0, .L358+0xc
	add	r3, r1, r0
	ldrh	r1, [r3]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L299	@cond_branch
	ldrb	r0, [r2, #0x6]
	sub	r0, r0, #0x1
	strb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L299	@cond_branch
	ldrh	r0, [r3]
	ldr	r2, .L358+0x10
	add	r1, r2, #0
	and	r0, r0, r1
	strh	r0, [r3]
	ldr	r0, .L358+0x14
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L299:
	ldr	r2, .L358+0x18
	ldr	r1, [r2]
	add	r1, r1, #0xdb
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	ip, r2
	mov	r3, r9
	cmp	r3, #0
	beq	.LCB2885
	b	.L340	@long jump
.LCB2885:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0xdb
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L298	@cond_branch
.L297:
	mov	r0, r9
	cmp	r0, #0
	beq	.LCB2900
	b	.L340	@long jump
.LCB2900:
	mov	r1, ip
	ldr	r0, [r1]
	ldrb	r1, [r0, #0x3]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x3]
	mov	r2, ip
	ldr	r0, [r2]
	add	r0, r0, #0xdb
	mov	r3, r9
	strb	r3, [r0]
	b	.L250
.L359:
	.align	2, 0
.L358:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gSideStatuses
	.word	0xffdf
	.word	BattleScript_SafeguardEnds
	.word	gBattleStruct
.L304:
	mov	r2, ip
	ldr	r0, [r2]
	add	r0, r0, #0xdb
	ldr	r1, .L360
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L306	@cond_branch
	ldr	r4, .L360+0x4
	ldr	r5, .L360+0x8
.L307:
	ldr	r0, [r2]
	add	r0, r0, #0xdb
	ldrb	r0, [r0]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r0, .L360+0xc
	add	r0, r0, #0x20
	ldrb	r2, [r4]
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L308	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L308	@cond_branch
	ldr	r1, .L360+0x10
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L308	@cond_branch
	ldr	r0, .L360+0x14
	strb	r2, [r0]
	ldr	r0, .L360+0x18
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L308:
	ldr	r2, .L360+0x1c
	ldr	r1, [r2]
	add	r1, r1, #0xdb
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	ip, r2
	mov	r3, r9
	cmp	r3, #0
	beq	.LCB3003
	b	.L340	@long jump
.LCB3003:
	ldr	r0, [r2]
	add	r0, r0, #0xdb
	ldr	r1, .L360
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L307	@cond_branch
.L306:
	mov	r0, r9
	cmp	r0, #0
	beq	.LCB3023
	b	.L340	@long jump
.LCB3023:
	mov	r2, ip
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x3]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x3]
	b	.L250
.L361:
	.align	2, 0
.L360:
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gBattlerByTurnOrder
	.word	gWishFutureKnock
	.word	gBattleMons
	.word	gBattlerTarget
	.word	BattleScript_WishComesTrue
	.word	gBattleStruct
.L312:
	ldr	r3, .L362
	ldrh	r2, [r3]
	mov	r0, #0x7
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB3054
	b	.L331	@long jump
.LCB3054:
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L314	@cond_branch
	ldr	r1, .L362+0x4
	add	r1, r1, #0x28
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L315	@cond_branch
	ldr	r0, .L362+0x8
	and	r0, r0, r2
	ldr	r1, .L362+0xc
	and	r0, r0, r1
	strh	r0, [r3]
	ldr	r1, .L362+0x10
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L319
.L363:
	.align	2, 0
.L362:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xfffe
	.word	0xfffd
	.word	gBattleCommunication
.L315:
	mov	r0, #0x2
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L342	@cond_branch
	b	.L320
.L314:
	mov	r0, #0x2
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L320	@cond_branch
.L342:
	ldr	r1, .L364
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L319
.L365:
	.align	2, 0
.L364:
	.word	gBattleCommunication
.L320:
	ldr	r0, .L366
	strb	r1, [r0, #0x5]
.L319:
	ldr	r0, .L366+0x4
	b	.L346
.L367:
	.align	2, 0
.L366:
	.word	gBattleCommunication
	.word	BattleScript_RainContinuesOrEnds
.L322:
	ldr	r3, .L368
	ldrh	r2, [r3]
	mov	r0, #0x18
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB3153
	b	.L331	@long jump
.LCB3153:
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L324	@cond_branch
	ldr	r1, .L368+0x4
	add	r1, r1, #0x28
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L324	@cond_branch
	ldr	r0, .L368+0x8
	and	r0, r0, r2
	strh	r0, [r3]
	ldr	r1, .L368+0xc
	ldr	r0, .L368+0x10
	b	.L343
.L369:
	.align	2, 0
.L368:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xfff7
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SandStormHailEnds
.L324:
	ldr	r1, .L370
	ldr	r0, .L370+0x4
.L343:
	str	r0, [r1]
	add	r3, r1, #0
	ldr	r1, .L370+0x8
	mov	r2, #0x0
	mov	r0, #0xc
	strb	r0, [r1, #0x10]
	ldr	r0, .L370+0xc
	strb	r2, [r0, #0x5]
	b	.L347
.L371:
	.align	2, 0
.L370:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DamagingWeatherContinues
	.word	gBattleScripting
	.word	gBattleCommunication
.L326:
	ldr	r3, .L372
	ldrh	r2, [r3]
	mov	r0, #0x60
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L331	@cond_branch
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L328	@cond_branch
	ldr	r1, .L372+0x4
	add	r1, r1, #0x28
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L328	@cond_branch
	ldr	r0, .L372+0x8
	and	r0, r0, r2
	strh	r0, [r3]
	ldr	r1, .L372+0xc
	ldr	r0, .L372+0x10
	b	.L344
.L373:
	.align	2, 0
.L372:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xffdf
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SunlightFaded
.L328:
	ldr	r1, .L374
	ldr	r0, .L374+0x4
.L344:
	str	r0, [r1]
	add	r3, r1, #0
	b	.L347
.L375:
	.align	2, 0
.L374:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SunlightContinues
.L330:
	ldr	r3, .L376
	ldrh	r2, [r3]
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L331	@cond_branch
	ldr	r1, .L376+0x4
	add	r1, r1, #0x28
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L332	@cond_branch
	ldr	r0, .L376+0x8
	and	r0, r0, r2
	strh	r0, [r3]
	ldr	r1, .L376+0xc
	ldr	r0, .L376+0x10
	b	.L345
.L377:
	.align	2, 0
.L376:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xff7f
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SandStormHailEnds
.L332:
	ldr	r1, .L378
	ldr	r0, .L378+0x4
.L345:
	str	r0, [r1]
	add	r3, r1, #0
	ldr	r1, .L378+0x8
	mov	r0, #0xd
	strb	r0, [r1, #0x10]
	ldr	r1, .L378+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L347:
	ldr	r0, [r3]
.L346:
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L331:
	ldr	r2, .L378+0x10
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x3]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x3]
	mov	ip, r2
	b	.L250
.L379:
	.align	2, 0
.L378:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DamagingWeatherContinues
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	gBattleStruct
.L334:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L250:
	mov	r3, r9
	cmp	r3, #0
	bne	.LCB3377
	b	.L248	@long jump
.LCB3377:
.L340:
	ldr	r0, .L380
	ldr	r1, [r0]
	ldr	r0, .L380+0x4
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L381:
	.align	2, 0
.L380:
	.word	gBattleMainFunc
	.word	BattleTurnPassed
.Lfe21:
	.size	 DoFieldEndTurnEffects,.Lfe21-DoFieldEndTurnEffects
	.align	2, 0
	.globl	DoBattlerEndTurnEffects
	.type	 DoBattlerEndTurnEffects,function
	.thumb_func
DoBattlerEndTurnEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r0, #0x0
	mov	r9, r0
	ldr	r2, .L485
	ldr	r0, [r2]
	ldr	r1, .L485+0x4
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r5, .L485+0x8
	ldr	r2, [r5]
	ldr	r0, .L485+0xc
	ldrb	r1, [r2, #0x1]
	add	r7, r5, #0
	mov	r8, r0
	ldrb	r3, [r0]
	cmp	r1, r3
	bcc	.LCB3429
	bl	.L384	@far jump
.LCB3429:
	bl	.L481	@ far jump
.L486:
	.align	2, 0
.L485:
	.word	gHitMarker
	.word	0x1000020
	.word	gBattleStruct
	.word	gBattlersCount
.L385:
	ldr	r3, .L487
	ldr	r4, .L487+0x4
	ldr	r1, .L487+0x8
	ldr	r5, [r5]
	ldrb	r0, [r5, #0x1]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r4]
	strb	r0, [r3]
	ldr	r0, .L487+0xc
	ldrb	r1, [r0]
	ldr	r2, .L487+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	add	r6, r3, #0
	cmp	r1, #0
	beq	.L387	@cond_branch
	ldrb	r0, [r5, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x1]
	bl	.L383	@ far jump
.L488:
	.align	2, 0
.L487:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L387:
	ldrb	r0, [r5]
	cmp	r0, #0x13
	bls	.LCB3488
	bl	.L389	@far jump
.LCB3488:
	lsl	r0, r0, #0x2
	ldr	r1, .L489
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L490:
	.align	2, 0
.L489:
	.word	.L474
	.align	2, 0
	.align	2, 0
.L474:
	.word	.L390
	.word	.L393
	.word	.L395
	.word	.L399
	.word	.L402
	.word	.L405
	.word	.L409
	.word	.L412
	.word	.L417
	.word	.L420
	.word	.L425
	.word	.L440
	.word	.L447
	.word	.L458
	.word	.L464
	.word	.L466
	.word	.L468
	.word	.L470
	.word	.L397
	.word	.L473
.L390:
	ldr	r1, .L491
	ldrb	r3, [r6]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3517
	bl	.L471	@far jump
.LCB3517:
	ldr	r0, .L491+0x4
	mov	r1, #0x58
	mul	r1, r1, r3
	add	r0, r1, r0
	ldrh	r2, [r0, #0x28]
	ldrh	r5, [r0, #0x2c]
	cmp	r2, r5
	bne	.LCB3530
	bl	.L471	@far jump
.LCB3530:
	cmp	r2, #0
	bne	.LCB3532
	bl	.L471	@far jump
.LCB3532:
	ldr	r1, .L491+0x8
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L392	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L392:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldr	r0, .L491+0xc
	bl	.L483	@ far jump
.L492:
	.align	2, 0
.L491:
	.word	gStatuses3
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_IngrainTurnHeal
.L393:
	ldrb	r1, [r6]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB3575
	bl	.L471	@far jump
.LCB3575:
	bl	.L484	@ far jump
.L395:
	ldrb	r1, [r6]
	mov	r0, #0x1
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB3589
	bl	.L471	@far jump
.LCB3589:
	bl	.L484	@ far jump
.L397:
	ldrb	r1, [r6]
	mov	r0, #0x1
	mov	r2, #0x1
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB3603
	bl	.L471	@far jump
.LCB3603:
	bl	.L484	@ far jump
.L399:
	ldr	r0, .L493
	ldrb	r2, [r6]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3616
	bl	.L471	@far jump
.LCB3616:
	ldr	r3, .L493+0x4
	mov	r5, #0x3
	and	r5, r5, r1
	mov	r1, #0x58
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB3627
	bl	.L471	@far jump
.LCB3627:
	mov	r0, r2
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB3634
	bl	.L471	@far jump
.LCB3634:
	ldr	r0, .L493+0x8
	strb	r5, [r0]
	ldr	r2, .L493+0xc
	ldrb	r0, [r6]
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x3
	str	r0, [r2]
	cmp	r0, #0
	bne	.L401	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L401:
	ldr	r1, .L493+0x10
	strb	r5, [r1, #0x10]
	ldrb	r0, [r4]
	strb	r0, [r1, #0x11]
	ldr	r0, .L493+0x14
	b	.L483
.L494:
	.align	2, 0
.L493:
	.word	gStatuses3
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	BattleScript_LeechSeedTurnDrain
.L402:
	ldr	r2, .L495
	ldrb	r1, [r6]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3686
	b	.L471	@long jump
.LCB3686:
	add	r1, r3, r2
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	bne	.LCB3692
	b	.L471	@long jump
.LCB3692:
	ldr	r2, .L495+0x4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x3
	str	r0, [r2]
	cmp	r0, #0
	bne	.L404	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L404:
	ldr	r0, .L495+0x8
	b	.L483
.L496:
	.align	2, 0
.L495:
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_PoisonTurnDmg
.L405:
	ldr	r4, .L497
	ldrb	r0, [r6]
	mov	r7, #0x58
	mov	r8, r7
	mov	r2, r8
	mul	r2, r2, r0
	add	r3, r4, #0
	add	r3, r3, #0x4c
	add	r0, r2, r3
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3731
	b	.L471	@long jump
.LCB3731:
	add	r1, r2, r4
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	bne	.LCB3737
	b	.L471	@long jump
.LCB3737:
	ldr	r5, .L497+0x4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r5]
	cmp	r0, #0
	bne	.L407	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L407:
	ldrb	r0, [r6]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r2, r0, r3
	ldr	r1, [r2]
	mov	r4, #0xf0
	lsl	r4, r4, #0x4
	add	r0, r1, #0
	and	r0, r0, r4
	cmp	r0, r4
	beq	.L408	@cond_branch
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	add	r0, r1, r7
	str	r0, [r2]
.L408:
	ldrb	r0, [r6]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r4
	lsr	r0, r0, #0x8
	ldr	r1, [r5]
	mul	r0, r0, r1
	str	r0, [r5]
	ldr	r0, .L497+0x8
	b	.L483
.L498:
	.align	2, 0
.L497:
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_PoisonTurnDmg
.L409:
	ldr	r2, .L499
	ldrb	r1, [r6]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3802
	b	.L471	@long jump
.LCB3802:
	add	r1, r3, r2
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	bne	.LCB3808
	b	.L471	@long jump
.LCB3808:
	ldr	r2, .L499+0x4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x3
	str	r0, [r2]
	cmp	r0, #0
	bne	.L411	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L411:
	ldr	r0, .L499+0x8
	b	.L483
.L500:
	.align	2, 0
.L499:
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_BurnTurnDmg
.L412:
	ldr	r4, .L501
	ldrb	r1, [r6]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r5, r1, r0
	ldr	r2, [r5]
	mov	r0, #0x80
	lsl	r0, r0, #0x14
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB3847
	b	.L471	@long jump
.LCB3847:
	add	r3, r1, r4
	ldrh	r0, [r3, #0x28]
	cmp	r0, #0
	bne	.LCB3853
	b	.L471	@long jump
.LCB3853:
	add	r0, r4, #0
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L414	@cond_branch
	ldr	r1, .L501+0x4
	ldrh	r0, [r3, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r1]
	cmp	r0, #0
	bne	.L415	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L415:
	ldr	r0, .L501+0x8
	b	.L483
.L502:
	.align	2, 0
.L501:
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_NightmareTurnDmg
.L414:
	ldr	r0, .L503
	and	r2, r2, r0
	str	r2, [r5]
	b	.L471
.L504:
	.align	2, 0
.L503:
	.word	-0x8000001
.L417:
	ldr	r2, .L505
	ldrb	r1, [r6]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x15
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3914
	b	.L471	@long jump
.LCB3914:
	add	r1, r3, r2
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	bne	.LCB3920
	b	.L471	@long jump
.LCB3920:
	ldr	r2, .L505+0x4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r2]
	cmp	r0, #0
	bne	.L419	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L419:
	ldr	r0, .L505+0x8
	b	.L483
.L506:
	.align	2, 0
.L505:
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_CurseTurnDmg
.L420:
	ldr	r3, .L507
	mov	r8, r3
	ldrb	r0, [r6]
	mov	r3, #0x58
	mov	r1, r0
	mul	r1, r1, r3
	mov	r5, #0x50
	add	r5, r5, r8
	mov	sl, r5
	add	r4, r1, r5
	ldr	r2, [r4]
	mov	r5, #0xe0
	lsl	r5, r5, #0x8
	add	r0, r2, #0
	and	r0, r0, r5
	cmp	r0, #0
	bne	.LCB3962
	b	.L471	@long jump
.LCB3962:
	mov	r7, r8
	add	r0, r1, r7
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB3969
	b	.L471	@long jump
.LCB3969:
	ldr	r1, .L507+0x4
	add	r0, r2, r1
	str	r0, [r4]
	ldrb	r4, [r6]
	mov	r0, r4
	mul	r0, r0, r3
	add	r0, r0, sl
	ldr	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L422	@cond_branch
	ldr	r1, .L507+0x8
	ldr	r0, .L507+0xc
	ldr	r2, [r0]
	lsl	r0, r4, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	strb	r0, [r1, #0x10]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	strb	r0, [r1, #0x11]
	ldr	r1, .L507+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L507+0x14
	ldr	r0, .L507+0x18
	str	r0, [r1]
	ldr	r2, .L507+0x1c
	ldrb	r0, [r6]
	mul	r0, r0, r3
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r2]
	cmp	r0, #0
	bne	.L424	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
	b	.L424
.L508:
	.align	2, 0
.L507:
	.word	gBattleMons
	.word	-0x2000
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WrapTurnDmg
	.word	gBattleMoveDamage
.L422:
	ldr	r2, .L509
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x2
	strb	r0, [r2, #0x1]
	ldrb	r1, [r6]
	ldr	r0, .L509+0x4
	ldr	r3, [r0]
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	ldrb	r0, [r1, #0x4]
	strb	r0, [r2, #0x2]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrb	r0, [r0, #0x5]
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	ldr	r1, .L509+0x8
	ldr	r0, .L509+0xc
	str	r0, [r1]
.L424:
	ldr	r0, [r1]
	b	.L483
.L510:
	.align	2, 0
.L509:
	.word	gBattleTextBuff1
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WrapEnds
.L480:
	mov	r0, #0x8
	neg	r0, r0
	and	r3, r3, r0
	str	r3, [r2]
	ldrb	r0, [r6]
	mov	r2, r8
	mul	r2, r2, r0
	mov	r0, sl
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L511
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L511+0x4
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	ldr	r0, .L511+0x8
	bl	BattleScriptExecute
	ldr	r4, .L511+0xc
	ldrb	r0, [r6]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r9
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L428
.L512:
	.align	2, 0
.L511:
	.word	-0x8000001
	.word	gBattleCommunication
	.word	BattleScript_MonWokeUpInUproar
	.word	gActiveBattler
.L425:
	ldr	r2, .L513
	ldrb	r1, [r6]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x70
	and	r1, r1, r0
	add	r7, r2, #0
	cmp	r1, #0
	beq	.L426	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4]
	mov	r5, r8
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L428	@cond_branch
	mov	sl, r7
	add	r6, r4, #0
	mov	r1, #0x58
	mov	r8, r1
	mov	r3, #0x4c
	add	r3, r3, r7
	mov	r9, r3
	str	r0, [sp, #0x4]
	mov	r5, #0x7
	mov	ip, r5
.L430:
	ldrb	r4, [r6]
	mov	r1, r8
	mul	r1, r1, r4
	mov	r0, r9
	add	r2, r1, r0
	ldr	r3, [r2]
	add	r0, r3, #0
	mov	r5, ip
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L429	@cond_branch
	add	r0, r1, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x2b
	bne	.L480	@cond_branch
.L429:
	add	r0, r4, #0x1
	strb	r0, [r6]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [sp, #0x4]
	cmp	r0, r1
	bcc	.L430	@cond_branch
.L428:
	ldr	r2, .L513+0x4
	ldr	r1, .L513+0x8
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L433	@cond_branch
	mov	r3, #0x2
	mov	r9, r3
	b	.L478
.L514:
	.align	2, 0
.L513:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlersCount
.L433:
	ldr	r5, .L515
	ldrb	r0, [r5]
	strb	r0, [r2]
	ldr	r2, .L515+0x4
	ldrb	r0, [r5]
	mov	r7, #0x58
	mov	r1, r0
	mul	r1, r1, r7
	add	r6, r2, #0
	add	r6, r6, #0x50
	add	r1, r1, r6
	ldr	r0, [r1]
	sub	r0, r0, #0x10
	str	r0, [r1]
	ldrb	r0, [r5]
	bl	WasUnableToUseMove
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L435	@cond_branch
	ldrb	r0, [r5]
	bl	CancelMultiTurnMoves
	ldr	r1, .L515+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L436
.L516:
	.align	2, 0
.L515:
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleCommunication
.L435:
	ldrb	r3, [r5]
	mov	r0, r3
	mul	r0, r0, r7
	add	r2, r0, r6
	ldr	r0, [r2]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L437	@cond_branch
	ldr	r0, .L517
	strb	r4, [r0, #0x5]
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L436
.L518:
	.align	2, 0
.L517:
	.word	gBattleCommunication
.L437:
	ldr	r1, .L519
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	add	r0, r3, #0
	bl	CancelMultiTurnMoves
.L436:
	ldr	r0, .L519+0x4
	bl	BattleScriptExecute
	mov	r5, #0x1
	mov	r9, r5
.L426:
	mov	r7, r9
	cmp	r7, #0x2
	bne	.LCB4323
	b	.L389	@long jump
.LCB4323:
	b	.L471
.L520:
	.align	2, 0
.L519:
	.word	gBattleCommunication
	.word	BattleScript_PrintUproarOverTurns
.L440:
	ldr	r1, .L521
	ldrb	r0, [r6]
	mov	r7, #0x58
	mul	r0, r0, r7
	add	r5, r1, #0
	add	r5, r5, #0x50
	add	r2, r0, r5
	ldr	r1, [r2]
	mov	r4, #0xc0
	lsl	r4, r4, #0x4
	add	r0, r1, #0
	and	r0, r0, r4
	cmp	r0, #0
	bne	.LCB4348
	b	.L471	@long jump
.LCB4348:
	ldr	r3, .L521+0x4
	add	r0, r1, r3
	str	r0, [r2]
	ldrb	r0, [r6]
	bl	WasUnableToUseMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L442	@cond_branch
	ldrb	r0, [r6]
	bl	CancelMultiTurnMoves
	b	.L471
.L522:
	.align	2, 0
.L521:
	.word	gBattleMons
	.word	-0x400
.L442:
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r2, r0, r5
	ldr	r1, [r2]
	add	r0, r1, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.LCB4382
	b	.L471	@long jump
.LCB4382:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB4387
	b	.L471	@long jump
.LCB4387:
	ldr	r0, .L523
	and	r1, r1, r0
	str	r1, [r2]
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r4, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.LCB4399
	b	.L471	@long jump
.LCB4399:
	ldr	r1, .L523+0x4
	mov	r0, #0x47
	strb	r0, [r1, #0x3]
	mov	r0, #0x1
	mov	r1, #0x0
	bl	SetMoveEffect
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r0, r0, r5
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.LCB4413
	b	.L484	@long jump
.LCB4413:
	ldr	r0, .L523+0x8
	bl	BattleScriptExecute
	b	.L484
.L524:
	.align	2, 0
.L523:
	.word	-0x1001
	.word	gBattleCommunication
	.word	BattleScript_ThrashConfuses
.L447:
	ldr	r0, .L525
	ldrb	r3, [r6]
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r5, r1, r0
	ldrb	r1, [r5, #0xb]
	lsl	r1, r1, #0x1c
	add	r7, r0, #0
	cmp	r1, #0
	bne	.LCB4443
	b	.L471	@long jump
.LCB4443:
	mov	r4, #0x0
	ldr	r2, .L525+0x4
	mov	r0, #0x58
	mov	r1, r3
	mul	r1, r1, r0
	add	r2, r2, #0xc
	add	r1, r1, r2
	ldrh	r0, [r5, #0x4]
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L450	@cond_branch
	mov	ip, r7
	mov	r8, r2
	add	r5, r6, #0
	mov	r3, #0x58
.L451:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L450	@cond_branch
	ldrb	r2, [r5]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	lsl	r0, r4, #0x1
	mul	r2, r2, r3
	add	r0, r0, r2
	add	r0, r0, r8
	ldrh	r1, [r1, #0x4]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L451	@cond_branch
.L450:
	cmp	r4, #0x4
	bne	.L455	@cond_branch
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x0
	strh	r1, [r0, #0x4]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0xb]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xb]
	b	.L471
.L526:
	.align	2, 0
.L525:
	.word	gDisableStructs
	.word	gBattleMons
.L455:
	ldrb	r0, [r6]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrb	r3, [r2, #0xb]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0xb]
	add	r2, r1, #0
	cmp	r2, #0
	beq	.LCB4551
	b	.L471	@long jump
.LCB4551:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x4]
	ldr	r0, .L527
	b	.L483
.L528:
	.align	2, 0
.L527:
	.word	BattleScript_DisabledNoMore
.L458:
	ldr	r3, .L529
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r3
	ldrb	r5, [r2, #0xe]
	lsl	r4, r5, #0x1c
	cmp	r4, #0
	bne	.LCB4584
	b	.L471	@long jump
.LCB4584:
	ldr	r7, .L529+0x4
	mov	r8, r7
	ldrb	r0, [r2, #0xc]
	lsl	r0, r0, #0x1
	mov	r7, #0x58
	mul	r1, r1, r7
	add	r0, r0, r1
	mov	r1, r8
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldrh	r1, [r2, #0x6]
	cmp	r0, r1
	beq	.L460	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x6]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0xe]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xe]
	b	.L471
.L530:
	.align	2, 0
.L529:
	.word	gDisableStructs
	.word	gBattleMons
.L460:
	lsr	r1, r4, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r5
	orr	r0, r0, r1
	strb	r0, [r2, #0xe]
	cmp	r1, #0
	beq	.L463	@cond_branch
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mul	r1, r1, r7
	ldrb	r0, [r0, #0xc]
	add	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x24
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.LCB4661
	b	.L471	@long jump
.LCB4661:
.L463:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x6]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0xe]
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldr	r0, .L531
	b	.L483
.L532:
	.align	2, 0
.L531:
	.word	BattleScript_EncoredNoMore
.L464:
	ldr	r0, .L533
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x18
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L465	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #0x8
	str	r0, [r1]
.L465:
	ldr	r1, [r7]
	b	.L482
.L534:
	.align	2, 0
.L533:
	.word	gStatuses3
.L466:
	ldr	r2, .L535
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r0, r2
	ldrb	r2, [r3, #0x12]
	lsl	r1, r2, #0x1c
	cmp	r1, #0
	beq	.L467	@cond_branch
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x12]
	cmp	r1, #0
	bne	.L467	@cond_branch
	ldr	r0, .L535+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L535+0x8
	and	r0, r0, r1
	str	r0, [r2]
.L467:
	ldr	r1, [r7]
	b	.L482
.L536:
	.align	2, 0
.L535:
	.word	gDisableStructs
	.word	gStatuses3
	.word	-0x201
.L468:
	ldr	r2, .L537
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r0, r2
	ldrb	r2, [r3, #0x13]
	lsl	r1, r2, #0x1c
	cmp	r1, #0
	beq	.L469	@cond_branch
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x13]
.L469:
	ldr	r1, [r7]
	b	.L482
.L538:
	.align	2, 0
.L537:
	.word	gDisableStructs
.L470:
	ldr	r4, .L539
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r2, r0, r4
	ldr	r1, [r2]
	mov	r3, #0xc0
	lsl	r3, r3, #0x5
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L471	@cond_branch
	ldr	r5, .L539+0x4
	add	r0, r1, r5
	str	r0, [r2]
	ldrb	r2, [r6]
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L471	@cond_branch
	ldr	r3, .L539+0x8
	mov	r5, #0x58
	mov	r1, r2
	mul	r1, r1, r5
	add	r4, r3, #0
	add	r4, r4, #0x4c
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L471	@cond_branch
	add	r0, r1, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x48
	beq	.L471	@cond_branch
	cmp	r0, #0xf
	beq	.L471	@cond_branch
	add	r0, r2, #0
	bl	UproarWakeUpCheck
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L471	@cond_branch
	ldrb	r0, [r6]
	bl	CancelMultiTurnMoves
	bl	Random
	ldrb	r1, [r6]
	mov	r2, r1
	mul	r2, r2, r5
	add	r2, r2, r4
	mov	r1, #0x3
	and	r1, r1, r0
	add	r1, r1, #0x2
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L539+0xc
	ldrb	r0, [r6]
	strb	r0, [r1]
	ldr	r0, .L539+0x10
.L483:
	bl	BattleScriptExecute
.L484:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L471:
	ldr	r0, .L539+0x14
	ldr	r1, [r0]
.L482:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L389
.L540:
	.align	2, 0
.L539:
	.word	gStatuses3
	.word	-0x800
	.word	gBattleMons
	.word	gEffectBattler
	.word	BattleScript_YawnMakesAsleep
	.word	gBattleStruct
.L473:
	ldr	r1, [r7]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, [r7]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
.L389:
	mov	r7, r9
	cmp	r7, #0
	beq	.L383	@cond_branch
.L478:
	mov	r0, r9
	b	.L479
.L383:
	ldr	r5, .L541
	ldr	r2, [r5]
	ldr	r0, .L541+0x4
	ldrb	r1, [r2, #0x1]
	add	r7, r5, #0
	mov	r8, r0
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L384	@cond_branch
.L481:
	ldrb	r0, [r2]
	cmp	r0, #0x13
	bhi	.LCB4956
	bl	.L385	@far jump
.LCB4956:
.L384:
	ldr	r0, .L541+0x8
	ldr	r1, [r0]
	ldr	r2, .L541+0xc
	and	r1, r1, r2
	str	r1, [r0]
	mov	r0, #0x0
.L479:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L542:
	.align	2, 0
.L541:
	.word	gBattleStruct
	.word	gBattlersCount
	.word	gHitMarker
	.word	-0x1000021
.Lfe22:
	.size	 DoBattlerEndTurnEffects,.Lfe22-DoBattlerEndTurnEffects
	.align	2, 0
	.globl	HandleWishPerishSongOnTurnEnd
	.type	 HandleWishPerishSongOnTurnEnd,function
	.thumb_func
HandleWishPerishSongOnTurnEnd:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r2, .L568
	ldr	r0, [r2]
	ldr	r1, .L568+0x4
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L568+0x8
	ldr	r3, [r1]
	mov	r4, #0xc0
	lsl	r4, r4, #0x1
	add	r0, r3, r4
	ldrb	r0, [r0]
	add	r7, r1, #0
	cmp	r0, #0
	beq	.L545	@cond_branch
	cmp	r0, #0x1
	bne	.LCB5007
	b	.L554	@long jump
.LCB5007:
	b	.L544
.L569:
	.align	2, 0
.L568:
	.word	gHitMarker
	.word	0x1000020
	.word	gBattleStruct
.L545:
	ldr	r2, .L570
	add	r0, r3, r2
	ldr	r1, .L570+0x4
	ldrb	r0, [r0]
	mov	r8, r1
	ldrb	r6, [r1]
	cmp	r0, r6
	bcc	.LCB5034
	b	.L547	@long jump
.LCB5034:
	ldr	r4, .L570+0x8
	ldr	r5, .L570+0xc
	ldr	r6, .L570+0x10
	mov	r0, #0x8
	add	r0, r0, r6
	mov	sl, r0
	mov	r1, #0x18
	add	r1, r1, r6
	mov	ip, r1
	ldr	r3, .L570+0x14
	mov	r9, r3
.L548:
	ldr	r0, [r7]
	add	r3, r0, r2
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldr	r0, .L570+0x18
	ldrb	r1, [r0]
	ldr	r2, .L570+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L549	@cond_branch
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	b	.L546
.L571:
	.align	2, 0
.L570:
	.word	0x181
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gBattleTextBuff1
	.word	gWishFutureKnock
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L549:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	ldr	r1, .L572
	ldrb	r0, [r4]
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L546	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.L546	@cond_branch
	ldr	r1, .L572+0x4
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L546	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, ip
	ldrh	r0, [r0]
	cmp	r0, #0xf8
	bne	.L551	@cond_branch
	ldr	r0, .L572+0x8
	strb	r3, [r0, #0x5]
	b	.L552
.L573:
	.align	2, 0
.L572:
	.word	gWishFutureKnock
	.word	gBattleMons
	.word	gBattleCommunication
.L551:
	ldr	r1, .L574
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L552:
	mov	r0, #0xfd
	strb	r0, [r5]
	mov	r0, #0x2
	strb	r0, [r5, #0x1]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	ldrh	r0, [r0]
	strb	r0, [r5, #0x2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r5, #0x3]
	mov	r0, #0xff
	strb	r0, [r5, #0x4]
	ldrb	r0, [r4]
	mov	r1, r9
	strb	r0, [r1]
	ldr	r1, .L574+0x4
	add	r0, r6, #0x4
	ldrb	r2, [r4]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L574+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r2, .L574+0xc
	mov	r3, r9
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, .L574+0x10
	str	r1, [r0]
	ldr	r0, .L574+0x14
	b	.L566
.L575:
	.align	2, 0
.L574:
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gSpecialStatuses
	.word	0xffff
	.word	BattleScript_MonTookFutureAttack
.L546:
	ldr	r0, [r7]
	ldr	r2, .L576
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.LCB5222
	b	.L548	@long jump
.LCB5222:
.L547:
	ldr	r0, [r7]
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r7]
	ldr	r3, .L576
	add	r1, r0, r3
	mov	r0, #0x0
	strb	r0, [r1]
.L554:
	add	r3, r7, #0
	ldr	r0, [r3]
	ldr	r2, .L576
	add	r0, r0, r2
	ldr	r1, .L576+0x4
	ldrb	r0, [r0]
	mov	r8, r1
	ldrb	r4, [r1]
	cmp	r0, r4
	bcc	.LCB5258
	b	.L544	@long jump
.LCB5258:
	ldr	r5, .L576+0x8
	ldr	r4, .L576+0xc
	ldr	r6, .L576+0x10
	mov	ip, r6
	ldr	r0, .L576+0x14
	mov	r9, r0
.L557:
	ldr	r1, .L576+0x18
	ldr	r0, [r3]
	add	r3, r0, r2
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, r9
	strb	r0, [r1]
	strb	r0, [r5]
	ldr	r0, .L576+0x1c
	ldrb	r1, [r0]
	ldr	r2, .L576+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L558	@cond_branch
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	b	.L555
.L577:
	.align	2, 0
.L576:
	.word	0x181
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gBattleTextBuff1
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L558:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	ldr	r6, .L578
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L555	@cond_branch
	mov	r0, #0xfd
	strb	r0, [r4]
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r0, [r0, #0xf]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	strb	r0, [r4, #0x4]
	mov	r0, #0xff
	strb	r0, [r4, #0x5]
	ldrb	r2, [r5]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	mov	r3, ip
	add	r4, r0, r3
	ldrb	r3, [r4, #0xf]
	lsl	r1, r3, #0x1c
	cmp	r1, #0
	bne	.L560	@cond_branch
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L578+0x4
	ldr	r2, .L578+0x8
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	str	r0, [r3]
	ldr	r1, .L578+0xc
	ldr	r0, .L578+0x10
	b	.L567
.L579:
	.align	2, 0
.L578:
	.word	gStatuses3
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PerishSongTakesLife
.L560:
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r6, #0x10
	neg	r6, r6
	add	r0, r6, #0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r4, #0xf]
	ldr	r1, .L580
	ldr	r0, .L580+0x4
.L567:
	str	r0, [r1]
	ldr	r0, [r1]
.L566:
	bl	BattleScriptExecute
	mov	r0, #0x1
	b	.L565
.L581:
	.align	2, 0
.L580:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PerishSongCountGoesDown
.L555:
	add	r3, r7, #0
	ldr	r0, [r3]
	ldr	r2, .L582
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.LCB5439
	b	.L557	@long jump
.LCB5439:
.L544:
	ldr	r2, .L582+0x4
	ldr	r0, [r2]
	ldr	r1, .L582+0x8
	and	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
.L565:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L583:
	.align	2, 0
.L582:
	.word	0x181
	.word	gHitMarker
	.word	-0x1000021
.Lfe23:
	.size	 HandleWishPerishSongOnTurnEnd,.Lfe23-HandleWishPerishSongOnTurnEnd
	.align	2, 0
	.globl	HandleFaintedMonActions
	.type	 HandleFaintedMonActions,function
	.thumb_func
HandleFaintedMonActions:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r0, .L634
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L585	@cond_branch
	b	.L629
.L635:
	.align	2, 0
.L634:
	.word	gBattleTypeFlags
.L627:
	ldr	r0, .L636
	bl	BattleScriptExecute
	ldr	r0, [r5]
	add	r0, r0, #0x4d
	mov	r1, #0x2
	b	.L630
.L637:
	.align	2, 0
.L636:
	.word	BattleScript_GiveExp
.L628:
	ldr	r0, .L638
	bl	BattleScriptExecute
	ldr	r0, [r5]
	add	r0, r0, #0x4d
	mov	r1, #0x5
.L630:
	strb	r1, [r0]
.L633:
	mov	r0, #0x1
	b	.L626
.L639:
	.align	2, 0
.L638:
	.word	BattleScript_HandleFaintedMon
.L585:
	ldr	r0, .L640
	mov	r8, r0
.L586:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x4d
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bls	.LCB5534
	b	.L588	@long jump
.LCB5534:
	lsl	r0, r0, #0x2
	ldr	r1, .L640+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L641:
	.align	2, 0
.L640:
	.word	gBattleStruct
	.word	.L622
	.align	2, 0
	.align	2, 0
.L622:
	.word	.L590
	.word	.L597
	.word	.L604
	.word	.L607
	.word	.L608
	.word	.L615
	.word	.L618
	.word	.L588
.L590:
	mov	r4, r8
	ldr	r0, [r4]
	add	r0, r0, #0x4e
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, [r4]
	add	r1, r1, #0x4d
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r5, #0x0
	ldr	r0, .L642
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L597	@cond_branch
	ldr	r6, .L642+0x4
.L594:
	ldrb	r0, [r6]
	ldr	r2, .L642+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r2
	ldr	r4, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L593	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L593	@cond_branch
	ldrb	r0, [r6]
	bic	r0, r0, r4
	strb	r0, [r6]
.L593:
	add	r5, r5, #0x1
	ldr	r0, .L642
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L594	@cond_branch
.L597:
	ldr	r0, .L642+0xc
	mov	r8, r0
	ldr	r1, .L642+0x10
	mov	ip, r1
	ldr	r2, .L642+0x14
	mov	r5, r8
	ldr	r7, .L642+0x18
	ldr	r6, .L642+0x1c
.L598:
	ldr	r3, [r5]
	add	r1, r3, #0
	add	r1, r1, #0x4e
	ldrb	r0, [r1]
	strb	r0, [r2]
	mov	r4, ip
	strb	r0, [r4]
	ldrb	r4, [r1]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r7
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L600	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xdf
	ldrb	r1, [r0]
	ldr	r3, .L642+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L600	@cond_branch
	ldr	r0, .L642+0x4
	ldrb	r1, [r0]
	lsl	r0, r4, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB5656
	b	.L627	@long jump
.LCB5656:
.L600:
	ldr	r0, [r5]
	add	r0, r0, #0x4e
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L642
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L598	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x4d
	mov	r1, #0x3
	strb	r1, [r0]
	b	.L588
.L643:
	.align	2, 0
.L642:
	.word	gBattlersCount
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleStruct
	.word	gBattlerFainted
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattlerPartyIndexes
.L604:
	ldr	r0, .L644
	ldrb	r0, [r0]
	bl	OpponentSwitchInResetSentPokesToOpponentValue
	ldr	r2, .L644+0x4
	ldr	r1, [r2]
	add	r1, r1, #0x4e
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L644+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L605	@cond_branch
	ldr	r0, [r2]
	add	r0, r0, #0x4d
	mov	r1, #0x3
	strb	r1, [r0]
	b	.L631
.L645:
	.align	2, 0
.L644:
	.word	gBattlerFainted
	.word	gBattleStruct
	.word	gBattlersCount
.L605:
	ldr	r0, [r2]
	add	r0, r0, #0x4d
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L631
.L607:
	mov	r4, r8
	ldr	r0, [r4]
	add	r0, r0, #0x4e
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, [r4]
	add	r1, r1, #0x4d
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L608:
	ldr	r0, .L646
	mov	ip, r0
	ldr	r7, .L646+0x4
	ldr	r5, .L646+0x8
	ldr	r2, .L646+0xc
	ldr	r6, .L646+0x10
.L609:
	ldr	r0, [r5]
	add	r4, r0, #0
	add	r4, r4, #0x4e
	ldrb	r0, [r4]
	strb	r0, [r7]
	mov	r1, ip
	strb	r0, [r1]
	ldrb	r3, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L611	@cond_branch
	ldr	r0, .L646+0x14
	ldrb	r1, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB5785
	b	.L628	@long jump
.LCB5785:
.L611:
	add	r0, r3, #0x1
	strb	r0, [r4]
	ldr	r1, .L646+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L609	@cond_branch
	b	.L632
.L647:
	.align	2, 0
.L646:
	.word	gBattlerFainted
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	gBattleMons
	.word	gBitTable
	.word	gAbsentBattlerFlags
	.word	gBattlersCount
.L615:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x4e
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L648
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L616	@cond_branch
.L632:
	mov	r4, r8
	ldr	r0, [r4]
	add	r0, r0, #0x4d
	mov	r1, #0x6
	strb	r1, [r0]
	b	.L588
.L649:
	.align	2, 0
.L648:
	.word	gBattlersCount
.L616:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x4d
	mov	r1, #0x4
	strb	r1, [r0]
	b	.L588
.L618:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x9
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5873
	b	.L633	@long jump
.LCB5873:
	str	r0, [sp]
	mov	r0, #0xb
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5884
	b	.L633	@long jump
.LCB5884:
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x1
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5893
	b	.L633	@long jump
.LCB5893:
	str	r0, [sp]
	mov	r0, #0x6
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5904
	b	.L633	@long jump
.LCB5904:
	ldr	r2, .L650
	ldr	r1, [r2]
	add	r1, r1, #0x4d
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L631:
	mov	r8, r2
.L588:
	mov	r4, r8
	ldr	r0, [r4]
	add	r0, r0, #0x4d
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.LCB5923
	b	.L586	@long jump
.LCB5923:
.L629:
	mov	r0, #0x0
.L626:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L651:
	.align	2, 0
.L650:
	.word	gBattleStruct
.Lfe24:
	.size	 HandleFaintedMonActions,.Lfe24-HandleFaintedMonActions
	.align	2, 0
	.globl	TryClearRageStatuses
	.type	 TryClearRageStatuses,function
	.thumb_func
TryClearRageStatuses:
	push	{r4, r5, r6, lr}
	mov	r3, #0x0
	ldr	r0, .L659
	add	r5, r0, #0
	ldrb	r0, [r5]
	cmp	r3, r0
	bge	.L654	@cond_branch
	ldr	r4, .L659+0x4
	mov	r6, #0x80
	lsl	r6, r6, #0x10
	ldr	r2, .L659+0x8
.L656:
	ldr	r1, [r2]
	add	r0, r1, #0
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L655	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0x63
	beq	.L655	@cond_branch
	ldr	r0, .L659+0xc
	and	r1, r1, r0
	str	r1, [r2]
.L655:
	add	r4, r4, #0x2
	add	r2, r2, #0x58
	add	r3, r3, #0x1
	ldrb	r0, [r5]
	cmp	r3, r0
	blt	.L656	@cond_branch
.L654:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L660:
	.align	2, 0
.L659:
	.word	gBattlersCount
	.word	gChosenMoveByBattler
	.word	gBattleMons+0x50
	.word	-0x800001
.Lfe25:
	.size	 TryClearRageStatuses,.Lfe25-TryClearRageStatuses
	.align	2, 0
	.globl	AtkCanceller_UnableToUseMove
	.type	 AtkCanceller_UnableToUseMove,function
	.thumb_func
AtkCanceller_UnableToUseMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L736
	mov	sl, r1
	ldr	r2, .L736+0x4
	mov	r8, r2
	b	.L662
.L737:
	.align	2, 0
.L736:
	.word	gBattleScripting+0x4
	.word	gBattleStruct
.L727:
	mov	r4, r9
	cmp	r4, #0
	beq	.LCB6036
	bl	.L663	@far jump
.LCB6036:
.L662:
	mov	r7, r8
	ldr	r0, [r7]
	add	r0, r0, #0xb7
	ldrb	r0, [r0]
	cmp	r0, #0xf
	bls	.LCB6045
	bl	.L664	@far jump
.LCB6045:
	lsl	r0, r0, #0x2
	ldr	r1, .L738
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L739:
	.align	2, 0
.L738:
	.word	.L723
	.align	2, 0
	.align	2, 0
.L723:
	.word	.L666
	.word	.L667
	.word	.L678
	.word	.L684
	.word	.L686
	.word	.L688
	.word	.L690
	.word	.L692
	.word	.L694
	.word	.L696
	.word	.L702
	.word	.L704
	.word	.L708
	.word	.L712
	.word	.L719
	.word	.L664
.L666:
	ldr	r1, .L740
	ldr	r3, .L740+0x4
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L740+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L740+0xc
	ldrb	r2, [r3]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L740+0x10
	and	r0, r0, r1
	str	r0, [r2]
	mov	r0, r8
	ldr	r1, [r0]
	bl	.L729	@ far jump
.L741:
	.align	2, 0
.L740:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x2000001
	.word	gStatuses3
	.word	-0x4001
.L667:
	ldr	r7, .L742
	ldr	r4, .L742+0x4
	ldrb	r1, [r4]
	mov	r5, #0x58
	mov	r0, r1
	mul	r0, r0, r5
	add	r6, r7, #0
	add	r6, r6, #0x4c
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r2, #0x7
	mov	r8, r2
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB6112
	b	.L703	@long jump
.LCB6112:
	add	r0, r1, #0
	bl	UproarWakeUpCheck
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L669	@cond_branch
	ldrb	r0, [r4]
	mov	r2, r0
	mul	r2, r2, r5
	add	r2, r2, r6
	ldr	r0, [r2]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r4]
	mov	r2, r0
	mul	r2, r2, r5
	add	r0, r7, #0
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L742+0x8
	and	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L742+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	ldr	r1, .L742+0x10
	ldr	r0, .L742+0x14
	str	r0, [r1]
	mov	r4, #0x2
	mov	r9, r4
	b	.L703
.L743:
	.align	2, 0
.L742:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x8000001
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedWokeUp
.L669:
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r0, r1, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	r3, #0x1
	cmp	r0, #0x30
	bne	.L671	@cond_branch
	mov	r3, #0x2
.L671:
	add	r2, r1, r6
	ldr	r1, [r2]
	add	r0, r1, #0
	mov	r7, r8
	and	r0, r0, r7
	cmp	r0, r3
	bcs	.L673	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	b	.L674
.L673:
	sub	r0, r1, r3
	str	r0, [r2]
.L674:
	ldr	r2, .L744
	ldr	r0, .L744+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r4, [r0]
	mov	r0, #0x7
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L675	@cond_branch
	ldr	r0, .L744+0x8
	ldrh	r0, [r0]
	cmp	r0, #0xad
	bne	.LCB6210
	b	.L703	@long jump
.LCB6210:
	cmp	r0, #0xd6
	bne	.LCB6212
	b	.L703	@long jump
.LCB6212:
	ldr	r1, .L744+0xc
	ldr	r0, .L744+0x10
	str	r0, [r1]
	ldr	r2, .L744+0x14
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x2
	mov	r9, r0
	b	.L703
.L745:
	.align	2, 0
.L744:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsAsleep
	.word	gHitMarker
.L675:
	add	r2, r2, #0x50
	add	r2, r1, r2
	ldr	r0, [r2]
	ldr	r1, .L746
	and	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r0, .L746+0x4
	strb	r4, [r0, #0x5]
	ldr	r1, .L746+0x8
	ldr	r0, .L746+0xc
	str	r0, [r1]
	mov	r1, #0x2
	mov	r9, r1
	b	.L703
.L747:
	.align	2, 0
.L746:
	.word	-0x8000001
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedWokeUp
.L678:
	ldr	r1, .L748
	ldr	r7, .L748+0x4
	ldrb	r0, [r7]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r5, r1, #0
	add	r5, r5, #0x4c
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L679	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.L680	@cond_branch
	ldr	r2, .L748+0x8
	ldr	r0, .L748+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x7d
	bne	.LCB6304
	b	.L703	@long jump
.LCB6304:
	ldr	r1, .L748+0x10
	ldr	r0, .L748+0x14
	str	r0, [r1]
	ldr	r2, .L748+0x18
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L683
.L749:
	.align	2, 0
.L748:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsFrozen
	.word	gHitMarker
.L680:
	ldrb	r0, [r7]
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r5
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L750
	ldr	r0, .L750+0x4
	str	r0, [r1]
	ldr	r0, .L750+0x8
	strb	r4, [r0, #0x5]
.L683:
	mov	r2, #0x2
	mov	r9, r2
	ldr	r4, .L750+0xc
	mov	r8, r4
.L679:
	mov	r7, r8
	ldr	r1, [r7]
	b	.L729
.L751:
	.align	2, 0
.L750:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedUnfroze
	.word	gBattleCommunication
	.word	gBattleStruct
.L684:
	ldr	r1, .L752
	ldr	r0, .L752+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x36
	beq	.LCB6378
	b	.L703	@long jump
.LCB6378:
	ldr	r0, .L752+0x8
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x18]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.LCB6390
	b	.L703	@long jump
.LCB6390:
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	ldr	r2, .L752+0xc
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L752+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	ldr	r1, .L752+0x14
	ldr	r0, .L752+0x18
	str	r0, [r1]
	ldr	r2, .L752+0x1c
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L733
.L753:
	.align	2, 0
.L752:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedLoafingAround
	.word	gMoveResultFlags
.L686:
	ldr	r1, .L754
	ldr	r3, .L754+0x4
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB6439
	b	.L703	@long jump
.LCB6439:
	ldr	r0, .L754+0x8
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r2, .L754+0xc
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x19]
	ldrb	r0, [r3]
	bl	CancelMultiTurnMoves
	ldr	r1, .L754+0x10
	ldr	r0, .L754+0x14
	str	r0, [r1]
	ldr	r2, .L754+0x18
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r1, #0x1
	mov	r9, r1
	b	.L703
.L755:
	.align	2, 0
.L754:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x400001
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedMustRecharge
	.word	gHitMarker
.L688:
	ldr	r1, .L756
	ldr	r3, .L756+0x4
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB6492
	b	.L703	@long jump
.LCB6492:
	mov	r0, #0x9
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r0, .L756+0x8
	ldrb	r2, [r3]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldrb	r0, [r3]
	bl	CancelMultiTurnMoves
	ldr	r1, .L756+0xc
	ldr	r0, .L756+0x10
	str	r0, [r1]
	ldr	r2, .L756+0x14
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r2, #0x1
	mov	r9, r2
	b	.L703
.L757:
	.align	2, 0
.L756:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedFlinched
	.word	gHitMarker
.L690:
	ldr	r0, .L758
	ldr	r3, .L758+0x4
	ldrb	r2, [r3]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L758+0x8
	ldrh	r1, [r1, #0x4]
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.LCB6550
	b	.L703	@long jump
.LCB6550:
	cmp	r1, #0
	bne	.LCB6552
	b	.L703	@long jump
.LCB6552:
	ldr	r0, .L758+0xc
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r1, .L758+0x10
	ldrb	r0, [r3]
	strb	r0, [r1, #0x17]
	ldrb	r0, [r3]
	bl	CancelMultiTurnMoves
	ldr	r1, .L758+0x14
	ldr	r0, .L758+0x18
	str	r0, [r1]
	ldr	r2, .L758+0x1c
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r4, #0x1
	mov	r9, r4
	b	.L703
.L759:
	.align	2, 0
.L758:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsDisabled
	.word	gHitMarker
.L692:
	ldr	r0, .L760
	ldr	r4, .L760+0x4
	ldrb	r3, [r4]
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x13]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.LCB6607
	b	.L703	@long jump
.LCB6607:
	ldr	r2, .L760+0x8
	ldr	r0, .L760+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.LCB6619
	b	.L703	@long jump
.LCB6619:
	ldr	r0, .L760+0x10
	lsl	r2, r3, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	ldr	r1, .L760+0x14
	ldr	r0, .L760+0x18
	b	.L734
.L761:
	.align	2, 0
.L760:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsTaunted
.L694:
	ldr	r4, .L762
	ldrb	r0, [r4]
	ldr	r1, .L762+0x4
	ldrh	r1, [r1]
	bl	GetImprisonedMovesCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB6659
	b	.L703	@long jump
.LCB6659:
	ldr	r0, .L762+0x8
	ldrb	r2, [r4]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	ldr	r1, .L762+0xc
	ldr	r0, .L762+0x10
	str	r0, [r1]
	ldr	r2, .L762+0x14
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
.L733:
	mov	r0, #0x1
	mov	r9, r0
	b	.L703
.L763:
	.align	2, 0
.L762:
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsImprisoned
	.word	gHitMarker
.L696:
	ldr	r7, .L764
	ldr	r5, .L764+0x4
	ldrb	r0, [r5]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r4, r7, #0
	add	r4, r4, #0x50
	add	r2, r0, r4
	ldr	r1, [r2]
	mov	r3, #0x7
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L697	@cond_branch
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L698	@cond_branch
	bl	Random
	mov	r1, #0x1
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L699	@cond_branch
	ldr	r1, .L764+0x8
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	bl	BattleScriptPushCursor
	b	.L700
.L765:
	.align	2, 0
.L764:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleCommunication
.L699:
	ldr	r0, .L766
	mov	r4, #0x1
	strb	r1, [r0, #0x5]
	ldr	r1, .L766+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	ldrb	r0, [r5]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r7
	mov	r0, #0x28
	str	r0, [sp]
	str	r2, [sp, #0x4]
	ldrb	r0, [r5]
	str	r0, [sp, #0x8]
	ldrb	r0, [r5]
	str	r0, [sp, #0xc]
	add	r0, r1, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	CalculateBaseDamage
	ldr	r1, .L766+0x8
	str	r0, [r1]
	ldr	r0, .L766+0xc
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	orr	r0, r0, r4
	strb	r0, [r1, #0x1]
	ldr	r2, .L766+0x10
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
.L700:
	ldr	r1, .L766+0x14
	ldr	r0, .L766+0x18
	b	.L730
.L767:
	.align	2, 0
.L766:
	.word	gBattleCommunication
	.word	gBattlerTarget
	.word	gBattleMoveDamage
	.word	gProtectStructs
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsConfused
.L698:
	bl	BattleScriptPushCursor
	ldr	r1, .L768
	ldr	r0, .L768+0x4
.L730:
	str	r0, [r1]
	mov	r1, #0x1
	mov	r9, r1
	ldr	r2, .L768+0x8
	mov	r8, r2
.L697:
	mov	r4, r8
	ldr	r1, [r4]
	b	.L729
.L769:
	.align	2, 0
.L768:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsConfusedNoMore
	.word	gBattleStruct
.L702:
	ldr	r1, .L770
	ldr	r4, .L770+0x4
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L703	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L703	@cond_branch
	ldr	r0, .L770+0x8
	ldrb	r2, [r4]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L770+0xc
	ldr	r0, .L770+0x10
.L734:
	str	r0, [r1]
	ldr	r2, .L770+0x14
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r7, #0x1
	mov	r9, r7
.L703:
	ldr	r2, .L770+0x18
	ldr	r1, [r2]
	add	r1, r1, #0xb7
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r8, r2
	b	.L664
.L771:
	.align	2, 0
.L770:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsParalyzed
	.word	gHitMarker
	.word	gBattleStruct
.L704:
	ldr	r0, .L772
	ldr	r1, [r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.LCB6904
	b	.L720	@long jump
.LCB6904:
	ldr	r0, .L772+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L706	@cond_branch
	ldr	r1, .L772+0x8
	ldr	r0, .L772+0xc
	b	.L731
.L773:
	.align	2, 0
.L772:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TooScaredToMove
.L706:
	ldr	r1, .L774
	ldr	r0, .L774+0x4
.L731:
	str	r0, [r1]
	ldr	r1, .L774+0x8
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	mov	r0, #0x1
	b	.L735
.L775:
	.align	2, 0
.L774:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_GhostGetOutGetOut
	.word	gBattleCommunication
.L708:
	ldr	r1, .L776
	ldr	r4, .L776+0x4
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L709	@cond_branch
	lsr	r0, r1, #0x10
	bl	CountTrailingZeroBits
	ldr	r1, .L776+0x8
	strb	r0, [r1, #0x17]
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L710	@cond_branch
	bl	BattleScriptPushCursor
	b	.L711
.L777:
	.align	2, 0
.L776:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleScripting
.L710:
	ldr	r0, .L778
	bl	BattleScriptPush
	ldr	r2, .L778+0x4
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L778+0x8
	ldrb	r2, [r4]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
.L711:
	ldr	r1, .L778+0xc
	ldr	r0, .L778+0x10
	str	r0, [r1]
	mov	r4, #0x1
	mov	r9, r4
	ldr	r7, .L778+0x14
	mov	r8, r7
.L709:
	mov	r0, r8
	ldr	r1, [r0]
	b	.L729
.L779:
	.align	2, 0
.L778:
	.word	BattleScript_MoveUsedIsInLoveCantAttack
	.word	gHitMarker
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsInLove
	.word	gBattleStruct
.L712:
	ldr	r1, .L780
	ldr	r6, .L780+0x4
	ldrb	r0, [r6]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r1, r1, #0x50
	add	r3, r0, r1
	ldr	r2, [r3]
	mov	r4, #0xc0
	lsl	r4, r4, #0x2
	add	r0, r2, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L713	@cond_branch
	ldr	r7, .L780+0x8
	add	r0, r2, r7
	str	r0, [r3]
	ldrb	r2, [r6]
	mov	r0, r2
	mul	r0, r0, r5
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L714	@cond_branch
	ldr	r1, .L780+0xc
	ldr	r0, .L780+0x10
	b	.L732
.L781:
	.align	2, 0
.L780:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x100
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BideStoringEnergy
.L714:
	ldr	r3, .L782
	lsl	r0, r2, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L716	@cond_branch
	ldr	r1, .L782+0x4
	mov	r0, #0x75
	strh	r0, [r1]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, sl
	str	r0, [r1]
	ldr	r4, .L782+0x8
	ldr	r1, .L782+0xc
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r0, .L782+0x10
	ldrb	r1, [r0]
	ldr	r2, .L782+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L717	@cond_branch
	mov	r0, #0x75
	mov	r1, #0x1
	bl	GetMoveTarget
	strb	r0, [r4]
.L717:
	ldr	r1, .L782+0x18
	ldr	r0, .L782+0x1c
	str	r0, [r1]
	ldr	r2, .L782+0x20
	mov	r8, r2
	b	.L715
.L783:
	.align	2, 0
.L782:
	.word	gTakenDmg
	.word	gCurrentMove
	.word	gBattlerTarget
	.word	gTakenDmgByBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BideAttack
	.word	gBattleStruct
.L716:
	ldr	r1, .L784
	ldr	r0, .L784+0x4
.L732:
	str	r0, [r1]
.L715:
	mov	r4, #0x1
	mov	r9, r4
.L713:
	mov	r7, r8
	ldr	r1, [r7]
	b	.L729
.L785:
	.align	2, 0
.L784:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BideNoEnergyToAttack
.L719:
	ldr	r1, .L786
	ldr	r0, .L786+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r4, r0, r1
	ldr	r3, [r4]
	mov	r0, #0x20
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L720	@cond_branch
	ldr	r2, .L786+0x8
	ldr	r0, .L786+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x7d
	bne	.L721	@cond_branch
	mov	r0, #0x21
	neg	r0, r0
	and	r3, r3, r0
	str	r3, [r4]
	bl	BattleScriptPushCursor
	ldr	r1, .L786+0x10
	ldr	r0, .L786+0x14
	str	r0, [r1]
	ldr	r1, .L786+0x18
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L721:
	mov	r0, #0x2
.L735:
	mov	r9, r0
	ldr	r1, .L786+0x1c
	mov	r8, r1
.L720:
	mov	r2, r8
	ldr	r1, [r2]
.L729:
	add	r1, r1, #0xb7
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L664:
	mov	r4, r8
	ldr	r0, [r4]
	add	r0, r0, #0xb7
	ldrb	r0, [r0]
	cmp	r0, #0xf
	beq	.LCB7226
	bl	.L727	@far jump
.LCB7226:
.L663:
	mov	r7, r9
	cmp	r7, #0x2
	bne	.L728	@cond_branch
	ldr	r4, .L786+0x20
	ldr	r0, .L786+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r1, .L786+0x24
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L728:
	mov	r0, r9
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L787:
	.align	2, 0
.L786:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedUnfroze
	.word	gBattleCommunication
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattleMons+0x4c
.Lfe26:
	.size	 AtkCanceller_UnableToUseMove,.Lfe26-AtkCanceller_UnableToUseMove
	.align	2, 0
	.globl	HasNoMonsToSwitch
	.type	 HasNoMonsToSwitch,function
	.thumb_func
HasNoMonsToSwitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r3, r4, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	ldr	r0, .L813
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L789	@cond_branch
	mov	r0, #0x0
	b	.L812
.L814:
	.align	2, 0
.L813:
	.word	gBattleTypeFlags
.L789:
	mov	r0, #0x40
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L790	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L815
	mov	r8, r1
	cmp	r0, #0
	bne	.L791	@cond_branch
	ldr	r0, .L815+0x4
	mov	r8, r0
.L791:
	add	r0, r7, #0
	bl	GetLinkTrainerFlankId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x1
	add	r5, r0, r6
	add	r0, r5, #0x3
	cmp	r5, r0
	bge	.L794	@cond_branch
	add	r7, r0, #0
.L796:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L795	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L795	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L815+0x8
	cmp	r0, r1
	bne	.L794	@cond_branch
.L795:
	add	r5, r5, #0x1
	cmp	r5, r7
	blt	.L796	@cond_branch
.L794:
	mov	r1, #0x0
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	add	r0, r0, #0x3
	cmp	r5, r0
	bne	.L799	@cond_branch
	mov	r1, #0x1
.L799:
	add	r0, r1, #0
	b	.L812
.L816:
	.align	2, 0
.L815:
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x19d
.L790:
	add	r0, r3, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L801	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L817
	mov	r8, r0
	b	.L802
.L818:
	.align	2, 0
.L817:
	.word	gEnemyParty
.L801:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L819
	mov	r8, r1
.L802:
	mov	r0, sl
	cmp	r0, #0x6
	bne	.L803	@cond_branch
	ldr	r1, .L819+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	sl, r0
.L803:
	mov	r1, r9
	cmp	r1, #0x6
	bne	.L804	@cond_branch
	ldr	r1, .L819+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r9, r0
.L804:
	mov	r5, #0x0
.L808:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L807	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L807	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L819+0x8
	cmp	r0, r1
	beq	.L807	@cond_branch
	cmp	r5, sl
	beq	.L807	@cond_branch
	cmp	r5, r9
	beq	.L807	@cond_branch
	ldr	r0, .L819+0xc
	ldr	r1, [r0]
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L807	@cond_branch
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L806	@cond_branch
.L807:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L808	@cond_branch
.L806:
	mov	r0, #0x0
	cmp	r5, #0x6
	bne	.L812	@cond_branch
	mov	r0, #0x1
.L812:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L820:
	.align	2, 0
.L819:
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	0x19d
	.word	gBattleStruct
.Lfe27:
	.size	 HasNoMonsToSwitch,.Lfe27-HasNoMonsToSwitch
	.align	2, 0
	.globl	CastformDataTypeChange
	.type	 CastformDataTypeChange,function
	.thumb_func
CastformDataTypeChange:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r1, .L833
	mov	r0, #0x58
	mul	r0, r0, r6
	add	r4, r0, r1
	ldrh	r1, [r4]
	ldr	r0, .L833+0x4
	cmp	r1, r0
	bne	.L827	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bne	.L827	@cond_branch
	ldrh	r0, [r4, #0x28]
	cmp	r0, #0
	beq	.L827	@cond_branch
	str	r5, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L825	@cond_branch
	str	r5, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L824	@cond_branch
.L825:
	add	r2, r4, #0
	add	r2, r2, #0x21
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L824	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L824	@cond_branch
	strb	r5, [r2]
	strb	r5, [r1]
	mov	r0, #0x1
	b	.L832
.L834:
	.align	2, 0
.L833:
	.word	gBattleMons
	.word	0x181
.L824:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L827	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L826	@cond_branch
.L827:
	mov	r0, #0x0
	b	.L832
.L826:
	ldr	r1, .L835
	ldrh	r0, [r1]
	mov	r2, #0xe7
	and	r2, r2, r0
	add	r4, r1, #0
	cmp	r2, #0
	bne	.L828	@cond_branch
	ldr	r1, .L835+0x4
	mov	r0, #0x58
	mul	r0, r0, r6
	add	r1, r0, r1
	add	r3, r1, #0
	add	r3, r3, #0x21
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L828	@cond_branch
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L828	@cond_branch
	strb	r2, [r3]
	strb	r2, [r1]
	mov	r5, #0x1
.L828:
	ldrh	r1, [r4]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L829	@cond_branch
	ldr	r1, .L835+0x4
	mov	r0, #0x58
	mul	r0, r0, r6
	add	r1, r0, r1
	add	r2, r1, #0
	add	r2, r2, #0x21
	ldrb	r0, [r2]
	cmp	r0, #0xa
	beq	.L829	@cond_branch
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0xa
	beq	.L829	@cond_branch
	mov	r0, #0xa
	strb	r0, [r2]
	strb	r0, [r1]
	mov	r5, #0x2
.L829:
	ldrh	r1, [r4]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L830	@cond_branch
	ldr	r1, .L835+0x4
	mov	r0, #0x58
	mul	r0, r0, r6
	add	r1, r0, r1
	add	r2, r1, #0
	add	r2, r2, #0x21
	ldrb	r0, [r2]
	cmp	r0, #0xb
	beq	.L830	@cond_branch
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0xb
	beq	.L830	@cond_branch
	mov	r0, #0xb
	strb	r0, [r2]
	strb	r0, [r1]
	mov	r5, #0x3
.L830:
	ldrh	r1, [r4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L831	@cond_branch
	ldr	r1, .L835+0x4
	mov	r0, #0x58
	mul	r0, r0, r6
	add	r1, r0, r1
	add	r2, r1, #0
	add	r2, r2, #0x21
	ldrb	r0, [r2]
	cmp	r0, #0xf
	beq	.L831	@cond_branch
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0xf
	beq	.L831	@cond_branch
	mov	r0, #0xf
	strb	r0, [r2]
	strb	r0, [r1]
	mov	r5, #0x4
.L831:
	add	r0, r5, #0
.L832:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L836:
	.align	2, 0
.L835:
	.word	gBattleWeather
	.word	gBattleMons
.Lfe28:
	.size	 CastformDataTypeChange,.Lfe28-CastformDataTypeChange
	.align	2, 0
	.globl	AbilityBattleEffects
	.type	 AbilityBattleEffects,function
	.thumb_func
AbilityBattleEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	ldr	r4, [sp, #0x48]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x0
	mov	r9, r0
	ldr	r5, .L1170
	ldr	r1, .L1170+0x4
	ldrb	r0, [r5]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L838	@cond_branch
	mov	r1, sl
	strb	r1, [r5]
.L838:
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L839	@cond_branch
	ldr	r1, .L1170+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1170+0xc
	b	.L1153
.L1171:
	.align	2, 0
.L1170:
	.word	gBattlerAttacker
	.word	gBattlersCount
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L839:
	ldr	r1, .L1172
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1172+0x4
.L1153:
	add	r6, r1, r0
	ldr	r5, .L1172+0x8
	ldr	r1, .L1172+0xc
	ldrb	r0, [r5]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L841	@cond_branch
	mov	r2, sl
	strb	r2, [r5]
.L841:
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L842	@cond_branch
	ldr	r1, .L1172
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1172+0x10
	b	.L1154
.L1173:
	.align	2, 0
.L1172:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gPlayerParty
.L842:
	ldr	r1, .L1174
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1174+0x4
.L1154:
	add	r5, r1, r0
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x14]
	ldr	r0, .L1174+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB7964
	bl	.L844	@far jump
.LCB7964:
	mov	r3, r8
	cmp	r3, #0
	beq	.L845	@cond_branch
	ldr	r0, .L1174+0xc
	strb	r3, [r0]
	mov	r8, r0
	b	.L846
.L1175:
	.align	2, 0
.L1174:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gLastUsedAbility
.L845:
	ldr	r2, .L1176
	ldr	r1, .L1176+0x4
	mov	r0, #0x58
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r8, r2
.L846:
	cmp	r4, #0
	bne	.L848	@cond_branch
	ldr	r0, .L1176+0x8
	ldrh	r4, [r0]
.L848:
	ldr	r1, .L1176+0xc
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x13]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L849	@cond_branch
	mov	r5, #0x3f
	and	r5, r5, r0
	b	.L850
.L1177:
	.align	2, 0
.L1176:
	.word	gLastUsedAbility
	.word	gBattleMons
	.word	gCurrentMove
	.word	gBattleStruct
.L849:
	ldr	r1, .L1178
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x2]
.L850:
	ldr	r0, .L1178+0x4
	ldr	r0, [r0]
	mov	r1, #0xa0
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	cmp	r0, r1
	bne	.L851	@cond_branch
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0x16
	bne	.LCB8049
	bl	.L844	@far jump
.LCB8049:
	cmp	r0, #0x24
	bne	.LCB8051
	bl	.L844	@far jump
.LCB8051:
.L851:
	ldr	r2, [sp, #0x4]
	cmp	r2, #0x13
	bls	.LCB8056
	bl	.L853	@far jump
.LCB8056:
	lsl	r0, r2, #0x2
	ldr	r1, .L1178+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1179:
	.align	2, 0
.L1178:
	.word	gBattleMoves
	.word	gBattleTypeFlags
	.word	.L1141
	.align	2, 0
	.align	2, 0
.L1141:
	.word	.L854
	.word	.L896
	.word	.L915
	.word	.L925
	.word	.L953
	.word	.L985
	.word	.L1017
	.word	.L1025
	.word	.L1028
	.word	.L1031
	.word	.L1054
	.word	.L1038
	.word	.L1061
	.word	.L1068
	.word	.L1075
	.word	.L1106
	.word	.L1120
	.word	.L1127
	.word	.L1134
	.word	.L1099
.L854:
	ldr	r2, .L1180
	ldr	r0, .L1180+0x4
	ldrb	r1, [r2]
	add	r3, r0, #0
	ldrb	r4, [r3]
	cmp	r1, r4
	bcc	.L855	@cond_branch
	mov	r0, sl
	strb	r0, [r2]
.L855:
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0x2d
	bne	.LCB8097
	b	.L872	@long jump
.LCB8097:
	cmp	r0, #0x2d
	bgt	.L893	@cond_branch
	cmp	r0, #0xd
	bne	.LCB8101
	b	.L884	@long jump
.LCB8101:
	cmp	r0, #0xd
	bgt	.L894	@cond_branch
	cmp	r0, #0x2
	bne	.LCB8105
	b	.L870	@long jump
.LCB8105:
	bl	.L853	@ far jump
.L1181:
	.align	2, 0
.L1180:
	.word	gBattlerAttacker
	.word	gBattlersCount
.L894:
	cmp	r0, #0x16
	bne	.LCB8117
	b	.L876	@long jump
.LCB8117:
	cmp	r0, #0x24
	bne	.LCB8119
	b	.L881	@long jump
.LCB8119:
	bl	.L853	@ far jump
.L893:
	cmp	r0, #0x4d
	bne	.LCB8124
	b	.L884	@long jump
.LCB8124:
	cmp	r0, #0x4d
	bgt	.L895	@cond_branch
	cmp	r0, #0x3b
	bne	.LCB8128
	b	.L879	@long jump
.LCB8128:
	cmp	r0, #0x46
	bne	.LCB8130
	b	.L874	@long jump
.LCB8130:
	bl	.L853	@ far jump
.L895:
	cmp	r0, #0x4e
	bne	.LCB8135
	b	.L878	@long jump
.LCB8135:
	cmp	r0, #0xff
	beq	.LCB8137
	bl	.L853	@far jump
.LCB8137:
	bl	GetCurrentWeather
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x3
	cmp	r0, #0xa
	bhi	.L858	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1182
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1183:
	.align	2, 0
.L1182:
	.word	.L867
	.align	2, 0
	.align	2, 0
.L867:
	.word	.L861
	.word	.L858
	.word	.L861
	.word	.L858
	.word	.L858
	.word	.L863
	.word	.L858
	.word	.L858
	.word	.L858
	.word	.L865
	.word	.L861
.L861:
	ldr	r2, .L1184
	ldrh	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L858	@cond_branch
	mov	r0, #0x5
	strh	r0, [r2]
	ldr	r1, .L1184+0x4
	mov	r0, #0xa
	strb	r0, [r1, #0x10]
	mov	r2, sl
	strb	r2, [r1, #0x17]
	b	.L1155
.L1185:
	.align	2, 0
.L1184:
	.word	gBattleWeather
	.word	gBattleScripting
.L863:
	ldr	r3, .L1186
	ldrh	r1, [r3]
	mov	r2, #0x18
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L858	@cond_branch
	strh	r2, [r3]
	ldr	r1, .L1186+0x4
	mov	r0, #0xc
	strb	r0, [r1, #0x10]
	mov	r3, sl
	strb	r3, [r1, #0x17]
	b	.L1155
.L1187:
	.align	2, 0
.L1186:
	.word	gBattleWeather
	.word	gBattleScripting
.L865:
	ldr	r3, .L1188
	ldrh	r1, [r3]
	mov	r2, #0x60
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L858	@cond_branch
	strh	r2, [r3]
	ldr	r1, .L1188+0x4
	mov	r0, #0xb
	strb	r0, [r1, #0x10]
	mov	r4, sl
	strb	r4, [r1, #0x17]
.L1155:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L858:
	mov	r0, r9
	cmp	r0, #0
	bne	.LCB8243
	bl	.L844	@far jump
.LCB8243:
	bl	GetCurrentWeather
	ldr	r1, .L1188+0x8
	strb	r0, [r1, #0x5]
	ldr	r0, .L1188+0xc
	bl	BattleScriptPushCursorAndCallback
	bl	.L853	@ far jump
.L1189:
	.align	2, 0
.L1188:
	.word	gBattleWeather
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	BattleScript_OverworldWeatherStarts
.L870:
	ldr	r2, .L1190
	ldrh	r1, [r2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8271
	bl	.L853	@far jump
.LCB8271:
	mov	r0, #0x5
	strh	r0, [r2]
	ldr	r0, .L1190+0x4
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L1190+0x8
	mov	r1, sl
	strb	r1, [r0, #0x17]
	bl	.L1156	@ far jump
.L1191:
	.align	2, 0
.L1190:
	.word	gBattleWeather
	.word	BattleScript_DrizzleActivates
	.word	gBattleScripting
.L872:
	ldr	r2, .L1192
	ldrh	r1, [r2]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8299
	bl	.L853	@far jump
.LCB8299:
	mov	r0, #0x18
	strh	r0, [r2]
	ldr	r0, .L1192+0x4
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L1192+0x8
	mov	r2, sl
	strb	r2, [r0, #0x17]
	bl	.L1156	@ far jump
.L1193:
	.align	2, 0
.L1192:
	.word	gBattleWeather
	.word	BattleScript_SandstreamActivates
	.word	gBattleScripting
.L874:
	ldr	r2, .L1194
	ldrh	r1, [r2]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8327
	bl	.L853	@far jump
.LCB8327:
	mov	r0, #0x60
	strh	r0, [r2]
	ldr	r0, .L1194+0x4
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L1194+0x8
	mov	r3, sl
	strb	r3, [r0, #0x17]
	bl	.L1156	@ far jump
.L1195:
	.align	2, 0
.L1194:
	.word	gBattleWeather
	.word	BattleScript_DroughtActivates
	.word	gBattleScripting
.L876:
	ldr	r0, .L1196
	mov	r4, sl
	lsl	r2, r4, #0x2
	add	r1, r2, r4
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB8360
	bl	.L853	@far jump
.LCB8360:
	ldr	r1, .L1196+0x4
	add	r1, r2, r1
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0xc
	orr	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x8
	b	.L1157
.L1197:
	.align	2, 0
.L1196:
	.word	gSpecialStatuses
	.word	gStatuses3
.L878:
	ldr	r2, .L1198
	mov	r0, #0x58
	mov	r1, sl
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1, #0x1b]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1b]
.L879:
	mov	r0, sl
	bl	CastformDataTypeChange
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	cmp	r0, #0
	bne	.LCB8396
	bl	.L844	@far jump
.LCB8396:
	ldr	r0, .L1198+0x4
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L1198+0x8
	mov	r1, sl
	strb	r1, [r0, #0x17]
	bl	.L1158	@ far jump
.L1199:
	.align	2, 0
.L1198:
	.word	gBattleMons
	.word	BattleScript_CastformChange
	.word	gBattleScripting
.L881:
	ldr	r0, .L1200
	mov	r3, sl
	lsl	r2, r3, #0x2
	add	r1, r2, r3
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.LCB8427
	bl	.L853	@far jump
.LCB8427:
	ldr	r1, .L1200+0x4
	add	r1, r2, r1
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0xd
	orr	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x10
.L1157:
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	.L853	@ far jump
.L1201:
	.align	2, 0
.L1200:
	.word	gSpecialStatuses
	.word	gStatuses3
.L884:
	mov	r4, #0x0
	ldrb	r3, [r3]
	cmp	r4, r3
	bcc	.LCB8459
	bl	.L853	@far jump
.LCB8459:
.L888:
	add	r0, r4, #0
	bl	CastformDataTypeChange
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	cmp	r0, #0
	beq	.LCB8470
	bl	.L1147	@far jump
.LCB8470:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1202
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L888	@cond_branch
	bl	.L853	@ far jump
.L1203:
	.align	2, 0
.L1202:
	.word	gBattlersCount
.L896:
	ldr	r7, .L1204
	mov	r0, #0x58
	mov	r6, sl
	mul	r6, r6, r0
	add	r4, r6, r7
	ldrh	r0, [r4, #0x28]
	cmp	r0, #0
	bne	.LCB8501
	bl	.L853	@far jump
.LCB8501:
	ldr	r0, .L1204+0x4
	mov	r1, sl
	strb	r1, [r0]
	mov	r2, r8
	ldrb	r5, [r2]
	cmp	r5, #0x2c
	beq	.L899	@cond_branch
	cmp	r5, #0x2c
	bgt	.L914	@cond_branch
	cmp	r5, #0x3
	bne	.LCB8515
	b	.L909	@long jump
.LCB8515:
	bl	.L853	@ far jump
.L1205:
	.align	2, 0
.L1204:
	.word	gBattleMons
	.word	gBattlerAttacker
.L914:
	cmp	r5, #0x36
	bne	.LCB8527
	b	.L911	@long jump
.LCB8527:
	cmp	r5, #0x3d
	beq	.L902	@cond_branch
	bl	.L853	@ far jump
.L899:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB8546
	bl	.L853	@far jump
.LCB8546:
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB8557
	bl	.L853	@far jump
.LCB8557:
	ldr	r0, .L1206
	ldrh	r1, [r0]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8565
	bl	.L853	@far jump
.LCB8565:
	ldrh	r0, [r4, #0x2c]
	ldrh	r3, [r4, #0x28]
	cmp	r0, r3
	bhi	.LCB8574
	bl	.L853	@far jump
.LCB8574:
	mov	r0, r8
	strb	r5, [r0]
	ldr	r0, .L1206+0x4
	bl	BattleScriptPushCursorAndCallback
	ldr	r1, .L1206+0x8
	ldrh	r0, [r4, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L901	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L901:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	bl	.L1156	@ far jump
.L1207:
	.align	2, 0
.L1206:
	.word	gBattleWeather
	.word	BattleScript_RainDishActivates
	.word	gBattleMoveDamage
.L902:
	add	r0, r7, #0
	add	r0, r0, #0x4c
	add	r5, r6, r0
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.LCB8613
	bl	.L853	@far jump
.LCB8613:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.LCB8625
	bl	.L853	@far jump
.LCB8625:
	ldr	r0, [r5]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L904	@cond_branch
	ldr	r0, .L1208
	ldr	r1, .L1208+0x4
	bl	StringCopy
.L904:
	ldr	r0, [r5]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L905	@cond_branch
	ldr	r0, .L1208
	ldr	r1, .L1208+0x8
	bl	StringCopy
.L905:
	ldr	r0, [r5]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L906	@cond_branch
	ldr	r0, .L1208
	ldr	r1, .L1208+0xc
	bl	StringCopy
.L906:
	ldr	r0, [r5]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L907	@cond_branch
	ldr	r0, .L1208
	ldr	r1, .L1208+0x10
	bl	StringCopy
.L907:
	ldr	r0, [r5]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L908	@cond_branch
	ldr	r0, .L1208
	ldr	r1, .L1208+0x14
	bl	StringCopy
.L908:
	str	r4, [r5]
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r1, r6, r1
	ldr	r0, [r1]
	ldr	r2, .L1208+0x18
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L1208+0x1c
	ldr	r4, .L1208+0x20
	mov	r1, sl
	strb	r1, [r4]
	strb	r1, [r0, #0x17]
	ldr	r0, .L1208+0x24
	bl	BattleScriptPushCursorAndCallback
	str	r5, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	bl	.L1156	@ far jump
.L1209:
	.align	2, 0
.L1208:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
	.word	gStatusConditionString_SleepJpn
	.word	gStatusConditionString_ParalysisJpn
	.word	gStatusConditionString_BurnJpn
	.word	gStatusConditionString_IceJpn
	.word	-0x8000001
	.word	gBattleScripting
	.word	gActiveBattler
	.word	BattleScript_ShedSkinActivates
.L909:
	ldrb	r2, [r4, #0x1b]
	mov	r0, #0x1b
	ldrsb	r0, [r4, r0]
	cmp	r0, #0xb
	ble	.LCB8734
	bl	.L853	@far jump
.LCB8734:
	ldr	r0, .L1210
	mov	r3, sl
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0x2
	bne	.LCB8745
	bl	.L853	@far jump
.LCB8745:
	add	r0, r2, #0x1
	mov	r1, #0x0
	strb	r0, [r4, #0x1b]
	ldr	r4, .L1210+0x4
	mov	r0, #0x11
	strb	r0, [r4, #0x10]
	strb	r1, [r4, #0x11]
	ldr	r0, .L1210+0x8
	bl	BattleScriptPushCursorAndCallback
	mov	r0, sl
	strb	r0, [r4, #0x17]
	bl	.L1156	@ far jump
.L1211:
	.align	2, 0
.L1210:
	.word	gDisableStructs
	.word	gBattleScripting
	.word	BattleScript_SpeedBoostActivates
.L911:
	ldr	r2, .L1212
	ldrb	r0, [r0]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r3, [r1, #0x18]
	lsl	r0, r3, #0x1f
	lsr	r0, r0, #0x1f
	mov	r2, #0x1
	eor	r2, r2, r0
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x18]
	bl	.L853	@ far jump
.L1213:
	.align	2, 0
.L1212:
	.word	gDisableStructs
.L915:
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0x2b
	beq	.LCB8803
	bl	.L853	@far jump
.LCB8803:
	mov	r5, #0x0
	ldr	r0, .L1214
	ldrh	r2, [r0]
	ldr	r3, .L1214+0x4
	add	r1, r0, #0
	cmp	r2, r3
	bne	.LCB8815
	bl	.L853	@far jump
.LCB8815:
	cmp	r2, r4
	beq	.L918	@cond_branch
	add	r2, r1, #0
.L919:
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.LCB8831
	bl	.L853	@far jump
.LCB8831:
	cmp	r0, r4
	bne	.L919	@cond_branch
.L918:
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L1214+0x4
	cmp	r1, r0
	bne	.LCB8847
	bl	.L853	@far jump
.LCB8847:
	ldr	r1, .L1214+0x8
	ldr	r0, .L1214+0xc
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L924	@cond_branch
	ldr	r0, .L1214+0x10
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	orr	r1, r1, r2
	str	r1, [r0]
.L924:
	ldr	r1, .L1214+0x14
	ldr	r0, .L1214+0x18
	str	r0, [r1]
	mov	r2, #0x1
	mov	r9, r2
	bl	.L1145	@ far jump
.L1215:
	.align	2, 0
.L1214:
	.word	sSoundMovesTable
	.word	0xffff
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SoundproofProtected
.L925:
	cmp	r4, #0
	bne	.LCB8890
	bl	.L853	@far jump
.LCB8890:
	mov	r3, r8
	ldrb	r0, [r3]
	cmp	r0, #0xb
	beq	.L932	@cond_branch
	cmp	r0, #0xb
	bgt	.L946	@cond_branch
	cmp	r0, #0xa
	beq	.L928	@cond_branch
	b	.L927
.L946:
	cmp	r0, #0x12
	beq	.L936	@cond_branch
	b	.L927
.L928:
	cmp	r5, #0xd
	beq	.LCB8912
	b	.L927	@long jump
.LCB8912:
	ldr	r0, .L1216
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.LCB8922
	b	.L927	@long jump
.LCB8922:
	ldr	r1, .L1216+0x4
	ldr	r0, .L1216+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L930	@cond_branch
	ldr	r1, .L1216+0xc
	ldr	r0, .L1216+0x10
	b	.L1159
.L1217:
	.align	2, 0
.L1216:
	.word	gBattleMoves
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain
.L930:
	ldr	r1, .L1218
	ldr	r0, .L1218+0x4
.L1159:
	str	r0, [r1]
	mov	r4, #0x1
	mov	r9, r4
	b	.L927
.L1219:
	.align	2, 0
.L1218:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain_PPLoss
.L932:
	cmp	r5, #0xb
	beq	.LCB8966
	b	.L927	@long jump
.LCB8966:
	ldr	r0, .L1220
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.LCB8976
	b	.L927	@long jump
.LCB8976:
	ldr	r1, .L1220+0x4
	ldr	r0, .L1220+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L934	@cond_branch
	ldr	r1, .L1220+0xc
	ldr	r0, .L1220+0x10
	b	.L1160
.L1221:
	.align	2, 0
.L1220:
	.word	gBattleMoves
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain
.L934:
	ldr	r1, .L1222
	ldr	r0, .L1222+0x4
.L1160:
	str	r0, [r1]
	mov	r0, #0x1
	b	.L1161
.L1223:
	.align	2, 0
.L1222:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain_PPLoss
.L936:
	cmp	r5, #0xa
	bne	.L927	@cond_branch
	ldr	r1, .L1224
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L927	@cond_branch
	ldr	r2, .L1224+0x4
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	mov	r3, sl
	lsl	r1, r3, #0x2
	add	r0, r0, r1
	ldr	r3, [r0]
	mov	r4, #0x1
	and	r3, r3, r4
	add	r5, r1, #0
	cmp	r3, #0
	bne	.L938	@cond_branch
	ldr	r0, .L1224+0x8
	strb	r3, [r0, #0x5]
	ldr	r1, .L1224+0xc
	ldr	r0, .L1224+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L939	@cond_branch
	ldr	r1, .L1224+0x14
	ldr	r0, .L1224+0x18
	b	.L1162
.L1225:
	.align	2, 0
.L1224:
	.word	gBattleMons
	.word	gBattleResources
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost
.L939:
	ldr	r1, .L1226
	ldr	r0, .L1226+0x4
.L1162:
	str	r0, [r1]
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	add	r1, r1, r5
	ldr	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	str	r0, [r1]
	mov	r4, #0x2
	mov	r9, r4
	b	.L927
.L1227:
	.align	2, 0
.L1226:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost_PPLoss
.L938:
	ldr	r0, .L1228
	strb	r4, [r0, #0x5]
	ldr	r1, .L1228+0x4
	ldr	r0, .L1228+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L942	@cond_branch
	ldr	r1, .L1228+0xc
	ldr	r0, .L1228+0x10
	b	.L1163
.L1229:
	.align	2, 0
.L1228:
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost
.L942:
	ldr	r1, .L1230
	ldr	r0, .L1230+0x4
.L1163:
	str	r0, [r1]
	mov	r0, #0x2
.L1161:
	mov	r9, r0
.L927:
	mov	r1, r9
	cmp	r1, #0x1
	beq	.LCB9138
	bl	.L853	@far jump
.LCB9138:
	ldr	r1, .L1230+0x8
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2c]
	ldrh	r3, [r1, #0x28]
	cmp	r0, r3
	bne	.L948	@cond_branch
	ldr	r1, .L1230+0xc
	ldr	r0, .L1230+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L949	@cond_branch
	ldr	r1, .L1230
	ldr	r0, .L1230+0x14
	str	r0, [r1]
	bl	.L853	@ far jump
.L1231:
	.align	2, 0
.L1230:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost_PPLoss
	.word	gBattleMons
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	BattleScript_MonMadeMoveUseless
.L949:
	ldr	r1, .L1232
	ldr	r0, .L1232+0x4
	str	r0, [r1]
	bl	.L853	@ far jump
.L1233:
	.align	2, 0
.L1232:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MonMadeMoveUseless_PPLoss
.L948:
	ldr	r2, .L1234
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r2]
	cmp	r0, #0
	bne	.L952	@cond_branch
	mov	r4, r9
	str	r4, [r2]
.L952:
	ldr	r0, [r2]
	neg	r0, r0
	str	r0, [r2]
	bl	.L853	@ far jump
.L1235:
	.align	2, 0
.L1234:
	.word	gBattleMoveDamage
.L953:
	mov	r1, r8
	ldrb	r0, [r1]
	sub	r0, r0, #0x9
	cmp	r0, #0x2f
	bls	.LCB9225
	bl	.L853	@far jump
.LCB9225:
	lsl	r0, r0, #0x2
	ldr	r1, .L1236
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1237:
	.align	2, 0
.L1236:
	.word	.L983
	.align	2, 0
	.align	2, 0
.L983:
	.word	.L974
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L955
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L958
	.word	.L853
	.word	.L853
	.word	.L962
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L971
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L977
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L853
	.word	.L980
.L955:
	ldr	r0, .L1238
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9251
	bl	.L853	@far jump
.LCB9251:
	cmp	r4, #0xa5
	bne	.LCB9253
	bl	.L853	@far jump
.LCB9253:
	ldr	r0, .L1238+0x4
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.LCB9263
	bl	.L853	@far jump
.LCB9263:
	ldr	r2, .L1238+0x8
	ldr	r0, .L1238+0xc
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L957	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB9281
	bl	.L853	@far jump
.LCB9281:
.L957:
	ldr	r1, .L1238+0x10
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r1, r0, r1
	add	r3, r1, #0
	add	r3, r3, #0x21
	ldrb	r0, [r3]
	cmp	r0, r5
	bne	.LCB9294
	bl	.L853	@far jump
.LCB9294:
	add	r2, r1, #0
	add	r2, r2, #0x22
	ldrb	r0, [r2]
	cmp	r0, r5
	bne	.LCB9301
	bl	.L853	@far jump
.LCB9301:
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	bne	.LCB9306
	bl	.L853	@far jump
.LCB9306:
	strb	r5, [r3]
	strb	r5, [r2]
	ldr	r1, .L1238+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r5, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	bl	BattleScriptPushCursor
	ldr	r1, .L1238+0x18
	ldr	r0, .L1238+0x1c
	str	r0, [r1]
	bl	.L1156	@ far jump
.L1239:
	.align	2, 0
.L1238:
	.word	gMoveResultFlags
	.word	gBattleMoves
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ColorChangeActivates
.L958:
	ldr	r0, .L1240
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9350
	bl	.L853	@far jump
.LCB9350:
	ldr	r1, .L1240+0x4
	ldr	r0, .L1240+0x8
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r3, r0, r1
	ldrh	r0, [r3, #0x28]
	cmp	r0, #0
	bne	.LCB9361
	bl	.L853	@far jump
.LCB9361:
	ldr	r0, .L1240+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB9369
	bl	.L853	@far jump
.LCB9369:
	ldr	r2, .L1240+0x10
	ldr	r0, .L1240+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L960	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB9387
	bl	.L853	@far jump
.LCB9387:
.L960:
	ldr	r1, .L1240+0x18
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9401
	bl	.L853	@far jump
.LCB9401:
	ldr	r1, .L1240+0x1c
	ldrh	r0, [r3, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L961	@cond_branch
	str	r2, [r1]
.L961:
	bl	BattleScriptPushCursor
	ldr	r1, .L1240+0x20
	ldr	r0, .L1240+0x24
	str	r0, [r1]
	bl	.L1156	@ far jump
.L1241:
	.align	2, 0
.L1240:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RoughSkinActivates
.L962:
	ldr	r0, .L1242
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9442
	bl	.L853	@far jump
.LCB9442:
	ldr	r1, .L1242+0x4
	ldr	r0, .L1242+0x8
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB9453
	bl	.L853	@far jump
.LCB9453:
	ldr	r0, .L1242+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB9461
	bl	.L853	@far jump
.LCB9461:
	ldr	r2, .L1242+0x10
	ldr	r0, .L1242+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L964	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB9479
	bl	.L853	@far jump
.LCB9479:
.L964:
	ldr	r1, .L1242+0x18
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9492
	bl	.L853	@far jump
.LCB9492:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB9504
	bl	.L853	@far jump
.LCB9504:
	ldr	r5, .L1242+0x1c
	mov	r4, #0x3
.L965:
	bl	Random
	and	r0, r0, r4
	strb	r0, [r5, #0x3]
	cmp	r0, #0
	beq	.L965	@cond_branch
	ldr	r1, .L1242+0x1c
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0x3
	bne	.L970	@cond_branch
	add	r0, r0, #0x2
	strb	r0, [r1, #0x3]
.L970:
	ldrb	r0, [r1, #0x3]
	add	r0, r0, #0x40
	strb	r0, [r1, #0x3]
	bl	BattleScriptPushCursor
	ldr	r1, .L1242+0x20
	ldr	r0, .L1242+0x24
	str	r0, [r1]
	ldr	r2, .L1242+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L1156	@ far jump
.L1243:
	.align	2, 0
.L1242:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ApplySecondaryEffect
	.word	gHitMarker
.L971:
	ldr	r0, .L1244
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9572
	bl	.L853	@far jump
.LCB9572:
	ldr	r1, .L1244+0x4
	ldr	r0, .L1244+0x8
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB9583
	bl	.L853	@far jump
.LCB9583:
	ldr	r0, .L1244+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB9591
	bl	.L853	@far jump
.LCB9591:
	ldr	r2, .L1244+0x10
	ldr	r0, .L1244+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L973	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB9609
	bl	.L853	@far jump
.LCB9609:
.L973:
	ldr	r1, .L1244+0x18
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9622
	bl	.L853	@far jump
.LCB9622:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB9634
	bl	.L853	@far jump
.LCB9634:
	ldr	r1, .L1244+0x1c
	mov	r0, #0x42
	strb	r0, [r1, #0x3]
	bl	BattleScriptPushCursor
	ldr	r1, .L1244+0x20
	ldr	r0, .L1244+0x24
	str	r0, [r1]
	ldr	r2, .L1244+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L1156	@ far jump
.L1245:
	.align	2, 0
.L1244:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ApplySecondaryEffect
	.word	gHitMarker
.L974:
	ldr	r0, .L1246
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9675
	bl	.L853	@far jump
.LCB9675:
	ldr	r1, .L1246+0x4
	ldr	r0, .L1246+0x8
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB9686
	bl	.L853	@far jump
.LCB9686:
	ldr	r0, .L1246+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB9694
	bl	.L853	@far jump
.LCB9694:
	ldr	r2, .L1246+0x10
	ldr	r0, .L1246+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L976	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB9712
	bl	.L853	@far jump
.LCB9712:
.L976:
	ldr	r1, .L1246+0x18
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9725
	bl	.L853	@far jump
.LCB9725:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB9737
	bl	.L853	@far jump
.LCB9737:
	ldr	r1, .L1246+0x1c
	mov	r0, #0x45
	strb	r0, [r1, #0x3]
	bl	BattleScriptPushCursor
	ldr	r1, .L1246+0x20
	ldr	r0, .L1246+0x24
	str	r0, [r1]
	ldr	r2, .L1246+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L1156	@ far jump
.L1247:
	.align	2, 0
.L1246:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ApplySecondaryEffect
	.word	gHitMarker
.L977:
	ldr	r0, .L1248
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9778
	bl	.L853	@far jump
.LCB9778:
	ldr	r1, .L1248+0x4
	ldr	r0, .L1248+0x8
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB9789
	bl	.L853	@far jump
.LCB9789:
	ldr	r0, .L1248+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB9797
	bl	.L853	@far jump
.LCB9797:
	ldr	r1, .L1248+0x10
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9809
	bl	.L853	@far jump
.LCB9809:
	ldr	r2, .L1248+0x14
	ldr	r0, .L1248+0x18
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L979	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB9827
	bl	.L853	@far jump
.LCB9827:
.L979:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB9840
	bl	.L853	@far jump
.LCB9840:
	ldr	r1, .L1248+0x1c
	mov	r0, #0x43
	strb	r0, [r1, #0x3]
	bl	BattleScriptPushCursor
	ldr	r1, .L1248+0x20
	ldr	r0, .L1248+0x24
	str	r0, [r1]
	ldr	r2, .L1248+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L1156	@ far jump
.L1249:
	.align	2, 0
.L1248:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattleMoves
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ApplySecondaryEffect
	.word	gHitMarker
.L980:
	ldr	r0, .L1250
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9881
	bl	.L853	@far jump
.LCB9881:
	ldr	r5, .L1250+0x4
	ldr	r7, .L1250+0x8
	ldrb	r1, [r7]
	mov	r6, #0x58
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r5
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB9892
	bl	.L853	@far jump
.LCB9892:
	ldr	r0, .L1250+0xc
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB9900
	bl	.L853	@far jump
.LCB9900:
	ldr	r1, .L1250+0x10
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9912
	bl	.L853	@far jump
.LCB9912:
	ldr	r3, .L1250+0x14
	ldr	r4, .L1250+0x18
	mov	r8, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x8
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L982	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB9931
	bl	.L853	@far jump
.LCB9931:
.L982:
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r5
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB9939
	bl	.L853	@far jump
.LCB9939:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB9951
	bl	.L853	@far jump
.LCB9951:
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bne	.LCB9960
	bl	.L853	@far jump
.LCB9960:
	ldr	r0, [sp, #0x8]
	ldr	r1, [sp, #0x10]
	bl	GetGenderFromSpeciesAndPersonality
	add	r4, r0, #0
	ldr	r0, [sp, #0xc]
	ldr	r1, [sp, #0x14]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.LCB9974
	bl	.L853	@far jump
.LCB9974:
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r4, r5, #0
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9985
	bl	.L853	@far jump
.LCB9985:
	ldr	r0, [sp, #0x8]
	ldr	r1, [sp, #0x10]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.LCB9993
	bl	.L853	@far jump
.LCB9993:
	ldr	r0, [sp, #0xc]
	ldr	r1, [sp, #0x14]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.LCB10001
	bl	.L853	@far jump
.LCB10001:
	ldrb	r0, [r7]
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r4
	ldr	r1, .L1250+0x1c
	mov	r3, r8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1250+0x20
	ldr	r0, .L1250+0x24
	str	r0, [r1]
	bl	.L1156	@ far jump
.L1251:
	.align	2, 0
.L1250:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattleMoves
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBitTable
	.word	gBattlescriptCurrInstr
	.word	BattleScript_CuteCharmActivates
.L985:
	mov	r4, #0x0
	mov	sl, r4
	ldr	r0, .L1252
	ldrb	r0, [r0]
	cmp	sl, r0
	bcc	.LCB10046
	bl	.L853	@far jump
.LCB10046:
.L989:
	ldr	r1, .L1252+0x4
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	sub	r0, r0, #0x7
	add	r2, r1, #0
	cmp	r0, #0x41
	bls	.LCB10060
	b	.L990	@long jump
.LCB10060:
	lsl	r0, r0, #0x2
	ldr	r1, .L1252+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1253:
	.align	2, 0
.L1252:
	.word	gBattlersCount
	.word	gBattleMons
	.word	.L1006
	.align	2, 0
	.align	2, 0
.L1006:
	.word	.L995
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L1004
	.word	.L990
	.word	.L990
	.word	.L998
	.word	.L990
	.word	.L991
	.word	.L990
	.word	.L990
	.word	.L993
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L1002
	.word	.L1000
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L990
	.word	.L998
.L991:
	mov	r0, #0x58
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r1, r2, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1254
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10092
	b	.L990	@long jump
.LCB10092:
	ldr	r0, .L1254+0x4
	ldr	r1, .L1254+0x8
	b	.L1164
.L1255:
	.align	2, 0
.L1254:
	.word	0xf88
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
.L993:
	mov	r0, #0x58
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10120
	b	.L990	@long jump
.LCB10120:
	ldr	r0, .L1256
	ldr	r1, .L1256+0x4
	bl	StringCopy
	mov	r2, #0x2
	mov	r9, r2
	b	.L1146
.L1257:
	.align	2, 0
.L1256:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_ConfusionJpn
.L995:
	mov	r0, #0x58
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r1, r2, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L990	@cond_branch
	ldr	r0, .L1258
	ldr	r1, .L1258+0x4
	b	.L1164
.L1259:
	.align	2, 0
.L1258:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_ParalysisJpn
.L998:
	mov	r0, #0x58
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L990	@cond_branch
	add	r2, r2, #0x50
	add	r2, r3, r2
	ldr	r0, [r2]
	ldr	r1, .L1260
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1260+0x4
	ldr	r1, .L1260+0x8
	bl	StringCopy
	mov	r0, #0x1
	mov	r9, r0
	b	.L1146
.L1261:
	.align	2, 0
.L1260:
	.word	-0x8000001
	.word	gBattleTextBuff1
	.word	gStatusConditionString_SleepJpn
.L1000:
	mov	r0, #0x58
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L990	@cond_branch
	ldr	r0, .L1262
	ldr	r1, .L1262+0x4
	bl	StringCopy
	mov	r2, #0x1
	mov	r9, r2
	b	.L1146
.L1263:
	.align	2, 0
.L1262:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_BurnJpn
.L1002:
	mov	r0, #0x58
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r1, r2, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L990	@cond_branch
	ldr	r0, .L1264
	ldr	r1, .L1264+0x4
.L1164:
	bl	StringCopy
	mov	r4, #0x1
	mov	r9, r4
	b	.L1146
.L1265:
	.align	2, 0
.L1264:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_IceJpn
.L1004:
	mov	r0, #0x58
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L990	@cond_branch
	ldr	r0, .L1266
	ldr	r1, .L1266+0x4
	bl	StringCopy
	mov	r2, #0x3
	mov	r9, r2
.L990:
	mov	r3, r9
	cmp	r3, #0
	beq	.L988	@cond_branch
.L1146:
	mov	r4, r9
	cmp	r4, #0x2
	beq	.L1011	@cond_branch
	cmp	r4, #0x2
	bgt	.L1015	@cond_branch
	cmp	r4, #0x1
	beq	.L1010	@cond_branch
	b	.L1009
.L1267:
	.align	2, 0
.L1266:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_LoveJpn
.L1015:
	mov	r0, r9
	cmp	r0, #0x3
	beq	.L1012	@cond_branch
	b	.L1009
.L1010:
	ldr	r1, .L1268
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r1, r1, #0x4c
	add	r2, r2, r1
	mov	r0, #0x0
	b	.L1165
.L1269:
	.align	2, 0
.L1268:
	.word	gBattleMons
.L1011:
	ldr	r1, .L1270
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x8
	neg	r1, r1
	b	.L1166
.L1271:
	.align	2, 0
.L1270:
	.word	gBattleMons
.L1012:
	ldr	r1, .L1272
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L1272+0x4
.L1166:
	and	r0, r0, r1
.L1165:
	str	r0, [r2]
.L1009:
	bl	BattleScriptPushCursor
	ldr	r1, .L1272+0x8
	ldr	r0, .L1272+0xc
	str	r0, [r1]
	ldr	r0, .L1272+0x10
	mov	r1, sl
	strb	r1, [r0, #0x17]
	ldr	r4, .L1272+0x14
	strb	r1, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r1, .L1272+0x18
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	bl	.L844	@ far jump
.L1273:
	.align	2, 0
.L1272:
	.word	gBattleMons
	.word	-0xf0001
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityCuredStatus
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattleMons+0x4c
.L988:
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L1274
	ldrb	r0, [r0]
	cmp	sl, r0
	bcs	.LCB10410
	b	.L989	@long jump
.LCB10410:
	bl	.L853	@ far jump
.L1275:
	.align	2, 0
.L1274:
	.word	gBattlersCount
.L1017:
	mov	r2, #0x0
	mov	sl, r2
	ldr	r0, .L1276
	ldrb	r0, [r0]
	cmp	sl, r0
	bcc	.LCB10429
	bl	.L853	@far jump
.LCB10429:
	ldr	r4, .L1276+0x4
.L1021:
	mov	r0, #0x58
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bne	.L1020	@cond_branch
	mov	r0, sl
	bl	CastformDataTypeChange
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	cmp	r0, #0
	beq	.LCB10452
	b	.L1148	@long jump
.LCB10452:
.L1020:
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L1276
	ldrb	r0, [r0]
	cmp	sl, r0
	bcc	.L1021	@cond_branch
	bl	.L853	@ far jump
.L1277:
	.align	2, 0
.L1276:
	.word	gBattlersCount
	.word	gBattleMons
.L1025:
	mov	r4, r8
	ldrb	r0, [r4]
	cmp	r0, #0x1c
	beq	.LCB10485
	bl	.L853	@far jump
.LCB10485:
	ldr	r4, .L1278
	ldr	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10492
	bl	.L853	@far jump
.LCB10492:
	ldr	r0, .L1278+0x4
	and	r1, r1, r0
	str	r1, [r4]
	ldr	r1, [r6]
	add	r1, r1, #0xb4
	ldrb	r2, [r1]
	mov	r0, #0x3f
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r1, r0, #0
	add	r1, r1, #0xb4
	ldrb	r0, [r1]
	cmp	r0, #0x6
	bne	.L1027	@cond_branch
	mov	r0, #0x2
	strb	r0, [r1]
.L1027:
	ldr	r1, .L1278+0x8
	ldr	r0, [r6]
	add	r0, r0, #0xb4
	ldrb	r0, [r0]
	add	r0, r0, #0x40
	strb	r0, [r1, #0x3]
	ldr	r1, .L1278+0xc
	ldr	r0, .L1278+0x10
	ldrb	r0, [r0]
	strb	r0, [r1, #0x17]
	bl	BattleScriptPushCursor
	ldr	r1, .L1278+0x14
	ldr	r0, .L1278+0x18
	str	r0, [r1]
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r4]
	b	.L1156
.L1279:
	.align	2, 0
.L1278:
	.word	gHitMarker
	.word	-0x4001
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SynchronizeActivates
.L1028:
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0x1c
	beq	.LCB10555
	b	.L853	@long jump
.LCB10555:
	ldr	r4, .L1280
	ldr	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10562
	b	.L853	@long jump
.LCB10562:
	ldr	r0, .L1280+0x4
	and	r1, r1, r0
	str	r1, [r4]
	add	r3, r6, #0
	ldr	r1, [r3]
	add	r1, r1, #0xb4
	ldrb	r2, [r1]
	mov	r0, #0x3f
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r1, r0, #0
	add	r1, r1, #0xb4
	ldrb	r0, [r1]
	cmp	r0, #0x6
	bne	.L1030	@cond_branch
	mov	r0, #0x2
	strb	r0, [r1]
.L1030:
	ldr	r1, .L1280+0x8
	ldr	r0, [r6]
	add	r0, r0, #0xb4
	ldrb	r0, [r0]
	strb	r0, [r1, #0x3]
	ldr	r1, .L1280+0xc
	ldr	r0, .L1280+0x10
	ldrb	r0, [r0]
	strb	r0, [r1, #0x17]
	bl	BattleScriptPushCursor
	ldr	r1, .L1280+0x14
	ldr	r0, .L1280+0x18
	str	r0, [r1]
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r4]
	b	.L1156
.L1281:
	.align	2, 0
.L1280:
	.word	gHitMarker
	.word	-0x4001
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SynchronizeActivates
.L1031:
	mov	r5, #0x0
	ldr	r0, .L1282
	ldrb	r1, [r0]
	cmp	r5, r1
	blt	.LCB10623
	b	.L853	@long jump
.LCB10623:
	ldr	r0, .L1282+0x4
	add	r4, r1, #0
	ldr	r2, .L1282+0x8
	add	r3, r0, #0
	add	r3, r3, #0x20
	mov	r6, #0x80
	lsl	r6, r6, #0xc
.L1035:
	ldrb	r1, [r3]
	cmp	r1, #0x16
	bne	.L1034	@cond_branch
	ldr	r0, [r2]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.LCB10647
	b	.L1149	@long jump
.LCB10647:
.L1034:
	add	r2, r2, #0x4
	add	r3, r3, #0x58
	add	r5, r5, #0x1
	cmp	r5, r4
	blt	.L1035	@cond_branch
	b	.L853
.L1283:
	.align	2, 0
.L1282:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gStatuses3
.L1038:
	mov	r5, #0x0
	ldr	r0, .L1284
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.LCB10673
	b	.L853	@long jump
.LCB10673:
	ldr	r2, .L1284+0x4
	mov	r8, r2
	ldr	r3, .L1284+0x8
	add	r3, r3, #0x20
	str	r3, [sp, #0x1c]
	mov	r4, #0x0
	str	r4, [sp, #0x20]
.L1042:
	ldr	r1, [sp, #0x1c]
	ldrb	r0, [r1]
	cmp	r0, #0x24
	beq	.LCB10692
	b	.L1041	@long jump
.LCB10692:
	ldr	r0, .L1284+0xc
	ldr	r2, [sp, #0x20]
	add	r0, r2, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	and	r1, r1, r0
	str	r2, [sp, #0x18]
	cmp	r1, #0
	bne	.LCB10703
	b	.L1041	@long jump
.LCB10703:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	mov	r1, #0x1
	add	r6, r0, #0
	eor	r6, r6, r1
	and	r6, r6, r1
	add	r0, r6, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1284+0x10
	ldr	r0, [r0]
	mov	r2, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB10734
	b	.L1044	@long jump
.LCB10734:
	mov	r3, #0x58
	mov	r0, r4
	mul	r0, r0, r3
	ldr	r3, .L1284+0x8
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1047	@cond_branch
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L1045	@cond_branch
	mov	r1, #0x58
	mov	r0, r7
	mul	r0, r0, r1
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1045	@cond_branch
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L1045	@cond_branch
	str	r2, [sp, #0x24]
	bl	Random
	ldr	r2, [sp, #0x24]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	orr	r6, r6, r1
	add	r0, r6, #0
	bl	GetBattlerAtPosition
	mov	r2, r8
	strb	r0, [r2]
	ldrb	r0, [r2]
	mov	r3, #0x58
	mul	r0, r0, r3
	ldr	r4, .L1284+0x8
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	ldr	r1, [sp, #0x1c]
	strb	r0, [r1]
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	ldr	r2, .L1284+0x14
	strb	r0, [r2]
	b	.L1167
.L1285:
	.align	2, 0
.L1284:
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gBattleMons
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	gLastUsedAbility
.L1045:
	ldr	r3, .L1286
	mov	r2, #0x58
	mov	r0, r4
	mul	r0, r0, r2
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1047	@cond_branch
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L1047	@cond_branch
	mov	r0, r8
	strb	r4, [r0]
	mov	r1, r5
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r1, r1, #0x20
	strb	r0, [r1]
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	ldr	r2, .L1286+0x4
	strb	r0, [r2]
	b	.L1167
.L1287:
	.align	2, 0
.L1286:
	.word	gBattleMons
	.word	gLastUsedAbility
.L1047:
	ldr	r3, .L1288
	mov	r2, #0x58
	mov	r0, r7
	mul	r0, r0, r2
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1050	@cond_branch
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L1050	@cond_branch
	mov	r4, r8
	strb	r7, [r4]
	mov	r1, r5
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r1, r1, #0x20
	strb	r0, [r1]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	b	.L1168
.L1289:
	.align	2, 0
.L1288:
	.word	gBattleMons
.L1044:
	mov	r2, r8
	strb	r4, [r2]
	mov	r3, #0x58
	mov	r0, r4
	mul	r0, r0, r3
	ldr	r4, .L1290
	add	r0, r0, r4
	add	r2, r0, #0
	add	r2, r2, #0x20
	ldrb	r1, [r2]
	cmp	r1, #0
	beq	.L1050	@cond_branch
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L1050	@cond_branch
	ldr	r0, [sp, #0x1c]
	strb	r1, [r0]
	ldrb	r0, [r2]
.L1168:
	ldr	r1, .L1290+0x4
	strb	r0, [r1]
.L1167:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1050:
	mov	r2, r9
	cmp	r2, #0
	beq	.LCB10938
	b	.L1150	@long jump
.LCB10938:
.L1041:
	ldr	r3, [sp, #0x1c]
	add	r3, r3, #0x58
	str	r3, [sp, #0x1c]
	ldr	r4, [sp, #0x20]
	add	r4, r4, #0x4
	str	r4, [sp, #0x20]
	add	r5, r5, #0x1
	ldr	r0, .L1290+0x8
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.LCB10954
	b	.L1042	@long jump
.LCB10954:
	b	.L853
.L1291:
	.align	2, 0
.L1290:
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gBattlersCount
.L1054:
	mov	r5, #0x0
	ldr	r0, .L1292
	ldrb	r1, [r0]
	cmp	r5, r1
	blt	.LCB10972
	b	.L853	@long jump
.LCB10972:
	ldr	r0, .L1292+0x4
	add	r4, r1, #0
	ldr	r2, .L1292+0x8
	add	r3, r0, #0
	add	r3, r3, #0x20
	mov	r6, #0x80
	lsl	r6, r6, #0xc
.L1058:
	ldrb	r1, [r3]
	cmp	r1, #0x16
	bne	.L1057	@cond_branch
	ldr	r0, [r2]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.LCB10996
	b	.L1151	@long jump
.LCB10996:
.L1057:
	add	r2, r2, #0x4
	add	r3, r3, #0x58
	add	r5, r5, #0x1
	cmp	r5, r4
	blt	.L1058	@cond_branch
	b	.L853
.L1293:
	.align	2, 0
.L1292:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gStatuses3
.L1061:
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r0, .L1294
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.LCB11027
	b	.L853	@long jump
.LCB11027:
	ldr	r0, .L1294+0x4
	mov	r8, r0
.L1065:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r5, #0x1
	cmp	r0, r6
	beq	.L1064	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r7
	bne	.L1064	@cond_branch
	ldr	r0, .L1294+0x8
	strb	r7, [r0]
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1064:
	add	r5, r4, #0
	ldr	r0, .L1294
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L1065	@cond_branch
	b	.L853
.L1295:
	.align	2, 0
.L1294:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gLastUsedAbility
.L1068:
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r0, .L1296
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.LCB11092
	b	.L853	@long jump
.LCB11092:
	ldr	r1, .L1296+0x4
	mov	r8, r1
.L1072:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r5, #0x1
	cmp	r0, r6
	bne	.L1071	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r7
	bne	.L1071	@cond_branch
	ldr	r0, .L1296+0x8
	strb	r7, [r0]
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1071:
	add	r5, r4, #0
	ldr	r0, .L1296
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L1072	@cond_branch
	b	.L853
.L1297:
	.align	2, 0
.L1296:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gLastUsedAbility
.L1075:
	mov	r2, r8
	ldrb	r0, [r2]
	cmp	r0, #0xfd
	beq	.L1077	@cond_branch
	cmp	r0, #0xfe
	beq	.L1084	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L1298
	add	r3, r0, #0
	ldrb	r4, [r3]
	cmp	r5, r4
	blt	.LCB11161
	b	.L853	@long jump
.LCB11161:
	ldr	r2, .L1298+0x4
	b	.L1095
.L1299:
	.align	2, 0
.L1298:
	.word	gBattlersCount
	.word	gBattleMons
.L1077:
	mov	r5, #0x0
	ldr	r0, .L1300
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.LCB11180
	b	.L853	@long jump
.LCB11180:
	ldr	r3, .L1300+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r1, r0, #0
.L1081:
	lsl	r0, r5, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r2
	add	r4, r5, #0x1
	cmp	r0, #0
	beq	.L1080	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1080:
	add	r5, r4, #0
	cmp	r5, r1
	blt	.L1081	@cond_branch
	b	.L853
.L1301:
	.align	2, 0
.L1300:
	.word	gBattlersCount
	.word	gStatuses3
.L1084:
	mov	r5, #0x0
	ldr	r0, .L1302
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.LCB11223
	b	.L853	@long jump
.LCB11223:
	ldr	r3, .L1302+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0xa
	add	r1, r0, #0
.L1088:
	lsl	r0, r5, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r2
	add	r4, r5, #0x1
	cmp	r0, #0
	beq	.L1087	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1087:
	add	r5, r4, #0
	cmp	r5, r1
	blt	.L1088	@cond_branch
	b	.L853
.L1303:
	.align	2, 0
.L1302:
	.word	gBattlersCount
	.word	gStatuses3
.L1095:
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r4, r5, #0x1
	cmp	r0, r7
	bne	.L1094	@cond_branch
	mov	r0, r8
	strb	r7, [r0]
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1094:
	add	r5, r4, #0
	ldrb	r1, [r3]
	cmp	r5, r1
	blt	.L1095	@cond_branch
	b	.L853
.L1099:
	mov	r5, #0x0
	ldr	r0, .L1304
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.LCB11301
	b	.L853	@long jump
.LCB11301:
	ldr	r6, .L1304+0x4
	add	r2, r0, #0
	mov	r3, #0x58
.L1103:
	mov	r0, r5
	mul	r0, r0, r3
	add	r1, r0, r6
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r4, r5, #0x1
	cmp	r0, r7
	bne	.L1102	@cond_branch
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L1102	@cond_branch
	mov	r0, r8
	strb	r7, [r0]
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1102:
	add	r5, r4, #0
	cmp	r5, r2
	blt	.L1103	@cond_branch
	b	.L853
.L1305:
	.align	2, 0
.L1304:
	.word	gBattlersCount
	.word	gBattleMons
.L1152:
	ldr	r0, .L1306
	strb	r7, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	b	.L1108
.L1307:
	.align	2, 0
.L1306:
	.word	gLastUsedAbility
.L1106:
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r0, .L1308
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L1108	@cond_branch
	ldr	r4, .L1308+0x4
.L1110:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r6
	beq	.L1109	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r7
	beq	.L1152	@cond_branch
.L1109:
	add	r5, r5, #0x1
	ldr	r0, .L1308
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L1110	@cond_branch
.L1108:
	mov	r1, r9
	cmp	r1, #0
	beq	.LCB11413
	b	.L1145	@long jump
.LCB11413:
	mov	r5, #0x0
	ldr	r0, .L1308
	ldrb	r0, [r0]
	cmp	r9, r0
	blt	.LCB11420
	b	.L853	@long jump
.LCB11420:
	ldr	r2, .L1308+0x4
	mov	r8, r2
.L1117:
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r4, r5, #0x1
	cmp	r0, r7
	bne	.L1116	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r6
	bne	.L1116	@cond_branch
	cmp	r5, sl
	beq	.L1116	@cond_branch
	ldr	r0, .L1308+0x8
	strb	r7, [r0]
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1116:
	add	r5, r4, #0
	ldr	r0, .L1308
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L1117	@cond_branch
	b	.L853
.L1309:
	.align	2, 0
.L1308:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gLastUsedAbility
.L1120:
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r0, .L1310
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.LCB11488
	b	.L853	@long jump
.LCB11488:
	ldr	r4, .L1310+0x4
.L1124:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r6
	beq	.L1123	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r7
	bne	.L1123	@cond_branch
	ldr	r0, .L1310+0x8
	strb	r7, [r0]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1123:
	add	r5, r5, #0x1
	ldr	r0, .L1310
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L1124	@cond_branch
	b	.L853
.L1311:
	.align	2, 0
.L1310:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gLastUsedAbility
.L1127:
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r0, .L1312
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.LCB11550
	b	.L853	@long jump
.LCB11550:
	ldr	r4, .L1312+0x4
.L1131:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r6
	bne	.L1130	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r7
	bne	.L1130	@cond_branch
	ldr	r0, .L1312+0x8
	strb	r7, [r0]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1130:
	add	r5, r5, #0x1
	ldr	r0, .L1312
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L1131	@cond_branch
	b	.L853
.L1313:
	.align	2, 0
.L1312:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gLastUsedAbility
.L1147:
	ldr	r0, .L1314
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L1314+0x4
	strb	r4, [r0, #0x17]
.L1158:
	ldr	r0, .L1314+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x7f
	mov	r1, r9
	sub	r1, r1, #0x1
	strb	r1, [r0]
	b	.L853
.L1315:
	.align	2, 0
.L1314:
	.word	BattleScript_CastformChange
	.word	gBattleScripting
	.word	gBattleStruct
.L1148:
	ldr	r0, .L1316
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L1316+0x4
	mov	r3, sl
	strb	r3, [r0, #0x17]
	ldr	r0, .L1316+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x7f
	mov	r1, r9
	sub	r1, r1, #0x1
	strb	r1, [r0]
	b	.L844
.L1317:
	.align	2, 0
.L1316:
	.word	BattleScript_CastformChange
	.word	gBattleScripting
	.word	gBattleStruct
.L1149:
	mov	r4, r8
	strb	r1, [r4]
	ldr	r0, [r2]
	ldr	r1, .L1318
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1318+0x4
	bl	BattleScriptPushCursorAndCallback
	b	.L1169
.L1319:
	.align	2, 0
.L1318:
	.word	-0x80001
	.word	BattleScript_IntimidateActivatesEnd3
.L1150:
	ldr	r0, .L1320
	bl	BattleScriptPushCursorAndCallback
	ldr	r1, .L1320+0x4
	ldr	r0, [sp, #0x18]
	add	r1, r0, r1
	ldr	r0, [r1]
	ldr	r2, .L1320+0x8
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L1320+0xc
	strb	r5, [r0, #0x17]
	ldr	r1, .L1320+0x10
	mov	r4, #0xfd
	strb	r4, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r2, .L1320+0x14
	ldrb	r0, [r2]
	strb	r0, [r1, #0x2]
	ldr	r3, .L1320+0x18
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L1320+0x1c
	strb	r4, [r1]
	mov	r0, #0x9
	strb	r0, [r1, #0x1]
	ldr	r0, .L1320+0x20
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x3]
	b	.L853
.L1321:
	.align	2, 0
.L1320:
	.word	BattleScript_TraceActivates
	.word	gStatuses3
	.word	-0x100001
	.word	gBattleScripting
	.word	gBattleTextBuff1
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gBattleTextBuff2
	.word	gLastUsedAbility
.L1151:
	mov	r3, r8
	strb	r1, [r3]
	ldr	r0, [r2]
	ldr	r1, .L1322
	and	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1322+0x4
	ldr	r0, .L1322+0x8
	str	r0, [r1]
.L1169:
	ldr	r0, .L1322+0xc
	ldr	r0, [r0]
	add	r0, r0, #0xd8
	strb	r5, [r0]
.L1156:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	b	.L853
.L1323:
	.align	2, 0
.L1322:
	.word	-0x80001
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IntimidateActivates
	.word	gBattleStruct
.L1134:
	mov	r5, #0x0
	ldr	r0, .L1324
	ldrb	r1, [r0]
	cmp	r5, r1
	bge	.L853	@cond_branch
	ldr	r0, .L1324+0x4
	add	r2, r1, #0
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldr	r3, .L1324+0x8
.L1138:
	ldrb	r0, [r1]
	cmp	r0, r7
	bne	.L1137	@cond_branch
	cmp	r5, sl
	beq	.L1137	@cond_branch
	strb	r7, [r3]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1137:
	add	r1, r1, #0x58
	add	r5, r5, #0x1
	cmp	r5, r2
	blt	.L1138	@cond_branch
.L853:
	mov	r4, r9
	cmp	r4, #0
	beq	.L844	@cond_branch
.L1145:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0xb
	bhi	.L844	@cond_branch
	ldr	r1, .L1324+0x8
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L844	@cond_branch
	add	r1, r0, #0
	mov	r0, sl
	bl	RecordAbilityBattle
.L844:
	mov	r0, r9
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1325:
	.align	2, 0
.L1324:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gLastUsedAbility
.Lfe29:
	.size	 AbilityBattleEffects,.Lfe29-AbilityBattleEffects
	.align	2, 0
	.globl	BattleScriptExecute
	.type	 BattleScriptExecute,function
	.thumb_func
BattleScriptExecute:
	ldr	r1, .L1327
	str	r0, [r1]
	ldr	r0, .L1327+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	add	r3, r2, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r1, .L1327+0x8
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, .L1327+0xc
	str	r0, [r1]
	ldr	r1, .L1327+0x10
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L1328:
	.align	2, 0
.L1327:
	.word	gBattlescriptCurrInstr
	.word	gBattleResources
	.word	gBattleMainFunc
	.word	RunBattleScriptCommands_PopCallbacksStack
	.word	gCurrentActionFuncId
.Lfe30:
	.size	 BattleScriptExecute,.Lfe30-BattleScriptExecute
	.align	2, 0
	.globl	BattleScriptPushCursorAndCallback
	.type	 BattleScriptPushCursorAndCallback,function
	.thumb_func
BattleScriptPushCursorAndCallback:
	push	{r4, lr}
	add	r4, r0, #0
	bl	BattleScriptPushCursor
	ldr	r0, .L1330
	str	r4, [r0]
	ldr	r0, .L1330+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	add	r3, r2, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r1, .L1330+0x8
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, .L1330+0xc
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1331:
	.align	2, 0
.L1330:
	.word	gBattlescriptCurrInstr
	.word	gBattleResources
	.word	gBattleMainFunc
	.word	RunBattleScriptCommands
.Lfe31:
	.size	 BattleScriptPushCursorAndCallback,.Lfe31-BattleScriptPushCursorAndCallback
	.align	2, 0
	.globl	ItemBattleEffects
	.type	 ItemBattleEffects,function
	.thumb_func
ItemBattleEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0x0
	str	r1, [sp, #0xc]
	add	r0, sp, #0x4
	strb	r1, [r0]
	ldr	r4, .L1547
	ldr	r1, .L1547+0x4
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L1333	@cond_branch
	ldr	r1, .L1547+0x8
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x7]
	ldrb	r0, [r0, #0x1a]
	b	.L1534
.L1548:
	.align	2, 0
.L1547:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gEnigmaBerries
.L1333:
	ldrh	r0, [r4]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrh	r0, [r4]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1534:
	mov	r9, r0
	ldr	r1, .L1549
	ldr	r0, .L1549+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	str	r0, [sp, #0x14]
	cmp	r0, #0xaf
	bne	.L1335	@cond_branch
	ldr	r1, .L1549+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r3, [r0, #0x7]
	mov	r8, r3
	ldrb	r0, [r0, #0x1a]
	b	.L1535
.L1550:
	.align	2, 0
.L1549:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gEnigmaBerries
.L1335:
	ldr	r0, [sp, #0x14]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, [sp, #0x14]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1535:
	str	r0, [sp, #0x10]
	ldr	r2, .L1551
	ldr	r0, .L1551+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r4, [r0, #0x2e]
	cmp	r4, #0xaf
	beq	.L1338	@cond_branch
	add	r0, r4, #0
	bl	ItemId_GetHoldEffect
	add	r0, r4, #0
	bl	ItemId_GetHoldEffectParam
.L1338:
	ldr	r0, [sp, #0x8]
	cmp	r0, #0x4
	bls	.LCB12059
	bl	.L1339	@far jump
.LCB12059:
	lsl	r0, r0, #0x2
	ldr	r1, .L1551+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1552:
	.align	2, 0
.L1551:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	.L1529
	.align	2, 0
	.align	2, 0
.L1529:
	.word	.L1340
	.word	.L1353
	.word	.L1339
	.word	.L1475
	.word	.L1518
.L1340:
	cmp	r5, #0x17
	beq	.L1343	@cond_branch
	cmp	r5, #0x20
	beq	.LCB12084
	bl	.L1339	@far jump
.LCB12084:
	ldr	r0, .L1553
	ldr	r0, [r0]
	add	r0, r0, #0x4a
	mov	r1, #0x2
	strb	r1, [r0]
	bl	.L1339	@ far jump
.L1554:
	.align	2, 0
.L1553:
	.word	gBattleStruct
.L1343:
	ldr	r1, .L1555
	mov	r8, r1
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x18
	add	r1, r1, r0
	mov	r2, #0x6
	mov	r3, #0x7
	mov	sl, r3
.L1347:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L1346	@cond_branch
	strb	r2, [r1]
	mov	r5, #0x5
	str	r5, [sp, #0xc]
.L1346:
	add	r1, r1, #0x1
	mov	r0, #0x1
	neg	r0, r0
	add	sl, sl, r0
	mov	r3, sl
	cmp	r3, #0
	bge	.L1347	@cond_branch
	ldr	r5, [sp, #0xc]
	cmp	r5, #0
	bne	.LCB12141
	bl	.L1339	@far jump
.LCB12141:
	ldr	r0, .L1555+0x4
	strb	r7, [r0, #0x17]
	ldr	r0, .L1555+0x8
	strb	r7, [r0]
	ldr	r1, .L1555+0xc
	ldr	r0, .L1555+0x10
	strb	r7, [r0]
	strb	r7, [r1]
	ldr	r0, .L1555+0x14
	bl	BattleScriptExecute
	bl	.L1339	@ far jump
.L1556:
	.align	2, 0
.L1555:
	.word	gBattleMons
	.word	gBattleScripting
	.word	gPotentialItemEffectBattler
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	BattleScript_WhiteHerbEnd2
.L1353:
	ldr	r1, .L1557
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	mov	r8, r1
	cmp	r0, #0
	bne	.LCB12177
	bl	.L1339	@far jump
.LCB12177:
	sub	r0, r5, #0x1
	cmp	r0, #0x2a
	bls	.LCB12181
	bl	.L1355	@far jump
.LCB12181:
	lsl	r0, r0, #0x2
	ldr	r1, .L1557+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1558:
	.align	2, 0
.L1557:
	.word	gBattleMons
	.word	.L1465
	.align	2, 0
	.align	2, 0
.L1465:
	.word	.L1356
	.word	.L1440
	.word	.L1448
	.word	.L1442
	.word	.L1444
	.word	.L1446
	.word	.L1359
	.word	.L1450
	.word	.L1452
	.word	.L1384
	.word	.L1390
	.word	.L1396
	.word	.L1402
	.word	.L1408
	.word	.L1414
	.word	.L1416
	.word	.L1418
	.word	.L1420
	.word	.L1422
	.word	.L1424
	.word	.L1426
	.word	.L1355
	.word	.L1372
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1463
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1355
	.word	.L1380
.L1356:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r1, r8
	add	r2, r0, r1
	ldrh	r0, [r2, #0x2c]
	ldrh	r1, [r2, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB12214
	bl	.L1355	@far jump
.LCB12214:
	cmp	r6, #0
	beq	.LCB12216
	bl	.L1355	@far jump
.LCB12216:
	ldr	r4, .L1559
	mov	r3, r9
	str	r3, [r4]
	ldrh	r3, [r2, #0x28]
	mov	r5, r9
	add	r0, r3, r5
	ldrh	r1, [r2, #0x2c]
	cmp	r0, r1
	ble	.L1358	@cond_branch
	sub	r0, r1, r3
	str	r0, [r4]
.L1358:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	ldr	r0, .L1559+0x4
	bl	BattleScriptExecute
	b	.L1401
.L1560:
	.align	2, 0
.L1559:
	.word	gBattleMoveDamage
	.word	BattleScript_ItemHealHP_RemoveItem
.L1359:
	cmp	r6, #0
	beq	.LCB12247
	bl	.L1355	@far jump
.LCB12247:
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1361	@cond_branch
	ldr	r1, .L1561
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1561+0x4
	b	.L1536
.L1562:
	.align	2, 0
.L1561:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L1361:
	ldr	r1, .L1563
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1563+0x4
.L1536:
	add	r4, r1, r0
	mov	r1, #0x0
	mov	sl, r1
	add	r5, sp, #0x4
.L1366:
	mov	r1, sl
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r1, sl
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	strb	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r6, #0
	beq	.L1365	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L1364	@cond_branch
.L1365:
	mov	r2, #0x1
	add	sl, sl, r2
	mov	r3, sl
	cmp	r3, #0x3
	ble	.L1366	@cond_branch
.L1364:
	mov	r5, sl
	cmp	r5, #0x4
	bne	.LCB12332
	bl	.L1355	@far jump
.LCB12332:
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	bl	CalculatePPWithBonus
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, sp, #0x4
	ldrb	r0, [r0]
	mov	r3, r9
	add	r1, r0, r3
	cmp	r1, r2
	ble	.L1370	@cond_branch
	add	r0, sp, #0x4
	strb	r2, [r0]
	b	.L1371
.L1564:
	.align	2, 0
.L1563:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L1370:
	add	r0, sp, #0x4
	strb	r1, [r0]
.L1371:
	ldr	r1, .L1565
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	strb	r6, [r1, #0x2]
	lsr	r0, r6, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r0, .L1565+0x4
	bl	BattleScriptExecute
	mov	r1, sl
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r5, sp, #0x4
	str	r5, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldr	r0, .L1565+0x8
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	bl	.L1531	@ far jump
.L1566:
	.align	2, 0
.L1565:
	.word	gBattleTextBuff1
	.word	BattleScript_BerryPPHealEnd2
	.word	gActiveBattler
.L1372:
	ldr	r0, .L1567
	mov	r1, #0x58
	mul	r1, r1, r7
	add	r0, r0, #0x18
	add	r1, r1, r0
	mov	r2, #0x6
	mov	r3, #0x7
	mov	sl, r3
.L1376:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L1375	@cond_branch
	strb	r2, [r1]
	mov	r5, #0x5
	str	r5, [sp, #0xc]
.L1375:
	add	r1, r1, #0x1
	mov	r0, #0x1
	neg	r0, r0
	add	sl, sl, r0
	mov	r3, sl
	cmp	r3, #0
	bge	.L1376	@cond_branch
	mov	r5, #0x8
	mov	sl, r5
	ldr	r0, [sp, #0xc]
	cmp	r0, #0
	bne	.LCB12457
	bl	.L1339	@far jump
.LCB12457:
	ldr	r0, .L1567+0x4
	strb	r7, [r0, #0x17]
	ldr	r0, .L1567+0x8
	strb	r7, [r0]
	ldr	r1, .L1567+0xc
	ldr	r0, .L1567+0x10
	strb	r7, [r0]
	strb	r7, [r1]
	ldr	r0, .L1567+0x14
	bl	BattleScriptExecute
	bl	.L1355	@ far jump
.L1568:
	.align	2, 0
.L1567:
	.word	gBattleMons
	.word	gBattleScripting
	.word	gPotentialItemEffectBattler
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	BattleScript_WhiteHerbEnd2
.L1380:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r2, r8
	add	r1, r0, r2
	ldrh	r0, [r1, #0x28]
	ldrh	r3, [r1, #0x2c]
	cmp	r0, r3
	bcc	.LCB12497
	bl	.L1355	@far jump
.LCB12497:
	cmp	r6, #0
	beq	.LCB12499
	bl	.L1355	@far jump
.LCB12499:
	ldr	r3, .L1569
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r3]
	cmp	r0, #0
	bne	.L1382	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L1382:
	ldrh	r2, [r1, #0x28]
	ldr	r0, [r3]
	add	r0, r2, r0
	ldrh	r1, [r1, #0x2c]
	cmp	r0, r1
	ble	.L1383	@cond_branch
	sub	r0, r1, r2
	str	r0, [r3]
.L1383:
	ldr	r0, [r3]
	neg	r0, r0
	str	r0, [r3]
	ldr	r0, .L1569+0x4
	bl	BattleScriptExecute
	mov	r0, #0x4
	str	r0, [sp, #0xc]
	add	r0, r7, #0
	add	r1, r5, #0
	bl	RecordItemEffectBattle
	bl	.L1355	@ far jump
.L1570:
	.align	2, 0
.L1569:
	.word	gBattleMoveDamage
	.word	BattleScript_ItemHealHP_End2
.L1384:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	str	r1, [sp, #0x18]
	add	r4, r1, #0
	add	r4, r4, r8
	ldrh	r0, [r4, #0x2c]
	ldrh	r1, [r4, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB12556
	bl	.L1355	@far jump
.LCB12556:
	cmp	r6, #0
	beq	.LCB12558
	bl	.L1355	@far jump
.LCB12558:
	ldr	r1, .L1571
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	strb	r6, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r5, .L1571+0x4
	ldrh	r0, [r4, #0x2c]
	mov	r1, r9
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L1386	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L1386:
	ldrh	r2, [r4, #0x28]
	ldr	r0, [r5]
	add	r0, r2, r0
	ldrh	r1, [r4, #0x2c]
	cmp	r0, r1
	ble	.L1387	@cond_branch
	sub	r0, r1, r2
	str	r0, [r5]
.L1387:
	ldr	r0, [r5]
	neg	r0, r0
	str	r0, [r5]
	mov	r0, r8
	add	r0, r0, #0x48
	ldr	r2, [sp, #0x18]
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	GetFlavorRelationByPersonality
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.LCB12608
	b	.L1543	@long jump
.LCB12608:
	b	.L1406
.L1572:
	.align	2, 0
.L1571:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
.L1390:
	mov	r0, #0x58
	mov	r5, r7
	mul	r5, r5, r0
	str	r5, [sp, #0x1c]
	add	r5, r5, r8
	ldrh	r0, [r5, #0x2c]
	ldrh	r1, [r5, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB12634
	bl	.L1355	@far jump
.LCB12634:
	cmp	r6, #0
	beq	.LCB12636
	bl	.L1355	@far jump
.LCB12636:
	ldr	r1, .L1573
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	mov	r6, #0x1
	strb	r6, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r4, .L1573+0x4
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L1392	@cond_branch
	str	r6, [r4]
.L1392:
	ldrh	r2, [r5, #0x28]
	ldr	r0, [r4]
	add	r0, r2, r0
	ldrh	r1, [r5, #0x2c]
	cmp	r0, r1
	ble	.L1393	@cond_branch
	sub	r0, r1, r2
	str	r0, [r4]
.L1393:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x48
	ldr	r1, [sp, #0x1c]
	add	r0, r1, r0
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	GetFlavorRelationByPersonality
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.LCB12686
	b	.L1545	@long jump
.LCB12686:
	b	.L1412
.L1574:
	.align	2, 0
.L1573:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
.L1396:
	mov	r0, #0x58
	mov	r3, r7
	mul	r3, r3, r0
	str	r3, [sp, #0x20]
	add	r5, r3, #0
	add	r5, r5, r8
	ldrh	r0, [r5, #0x2c]
	ldrh	r1, [r5, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB12713
	b	.L1355	@long jump
.LCB12713:
	cmp	r6, #0
	beq	.LCB12715
	b	.L1355	@long jump
.LCB12715:
	ldr	r1, .L1575
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r4, .L1575+0x4
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L1398	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L1398:
	ldrh	r2, [r5, #0x28]
	ldr	r0, [r4]
	add	r0, r2, r0
	ldrh	r1, [r5, #0x2c]
	cmp	r0, r1
	ble	.L1399	@cond_branch
	sub	r0, r1, r2
	str	r0, [r4]
.L1399:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x48
	ldr	r5, [sp, #0x20]
	add	r0, r5, r0
	ldr	r0, [r0]
	mov	r1, #0x2
	bl	GetFlavorRelationByPersonality
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.L1400	@cond_branch
	ldr	r0, .L1575+0x8
	bl	BattleScriptExecute
	b	.L1401
.L1576:
	.align	2, 0
.L1575:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
	.word	BattleScript_BerryConfuseHealEnd2
.L1400:
	ldr	r0, .L1577
	bl	BattleScriptExecute
.L1401:
	mov	r0, #0x4
	str	r0, [sp, #0xc]
	b	.L1531
.L1578:
	.align	2, 0
.L1577:
	.word	BattleScript_ItemHealHP_RemoveItem
.L1402:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	str	r1, [sp, #0x24]
	add	r5, r1, #0
	add	r5, r5, r8
	ldrh	r0, [r5, #0x2c]
	ldrh	r1, [r5, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB12811
	b	.L1355	@long jump
.LCB12811:
	cmp	r6, #0
	beq	.LCB12813
	b	.L1355	@long jump
.LCB12813:
	ldr	r1, .L1579
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	mov	r0, #0x3
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r4, .L1579+0x4
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L1404	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L1404:
	ldrh	r2, [r5, #0x28]
	ldr	r0, [r4]
	add	r0, r2, r0
	ldrh	r1, [r5, #0x2c]
	cmp	r0, r1
	ble	.L1405	@cond_branch
	sub	r0, r1, r2
	str	r0, [r4]
.L1405:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x48
	ldr	r2, [sp, #0x24]
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	GetFlavorRelationByPersonality
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.L1406	@cond_branch
.L1543:
	ldr	r0, .L1579+0x8
	bl	BattleScriptExecute
	b	.L1407
.L1580:
	.align	2, 0
.L1579:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
	.word	BattleScript_BerryConfuseHealEnd2
.L1406:
	ldr	r0, .L1581
	bl	BattleScriptExecute
.L1407:
	mov	r3, #0x4
	str	r3, [sp, #0xc]
	b	.L1531
.L1582:
	.align	2, 0
.L1581:
	.word	BattleScript_ItemHealHP_RemoveItem
.L1408:
	mov	r0, #0x58
	mov	r5, r7
	mul	r5, r5, r0
	str	r5, [sp, #0x28]
	add	r5, r5, r8
	ldrh	r0, [r5, #0x2c]
	ldrh	r1, [r5, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB12909
	b	.L1355	@long jump
.LCB12909:
	cmp	r6, #0
	beq	.LCB12911
	b	.L1355	@long jump
.LCB12911:
	ldr	r1, .L1583
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	mov	r0, #0x4
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r4, .L1583+0x4
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L1410	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L1410:
	ldrh	r2, [r5, #0x28]
	ldr	r0, [r4]
	add	r0, r2, r0
	ldrh	r1, [r5, #0x2c]
	cmp	r0, r1
	ble	.L1411	@cond_branch
	sub	r0, r1, r2
	str	r0, [r4]
.L1411:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x48
	ldr	r1, [sp, #0x28]
	add	r0, r1, r0
	ldr	r0, [r0]
	mov	r1, #0x4
	bl	GetFlavorRelationByPersonality
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.L1412	@cond_branch
.L1545:
	ldr	r0, .L1583+0x8
	bl	BattleScriptExecute
	b	.L1413
.L1584:
	.align	2, 0
.L1583:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
	.word	BattleScript_BerryConfuseHealEnd2
.L1412:
	ldr	r0, .L1585
	bl	BattleScriptExecute
.L1413:
	mov	r2, #0x4
	str	r2, [sp, #0xc]
	b	.L1531
.L1586:
	.align	2, 0
.L1585:
	.word	BattleScript_ItemHealHP_RemoveItem
.L1414:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r3, r8
	add	r5, r0, r3
	ldrh	r4, [r5, #0x28]
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB13006
	b	.L1355	@long jump
.LCB13006:
	cmp	r6, #0
	beq	.LCB13008
	b	.L1355	@long jump
.LCB13008:
	mov	r0, #0x19
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	ble	.LCB13013
	b	.L1355	@long jump
.LCB13013:
	ldr	r1, .L1587
	mov	r2, #0xfd
	strb	r2, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x1
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L1587+0x4
	strb	r2, [r1]
	strb	r6, [r1, #0x1]
	mov	r0, #0xd2
	strb	r0, [r1, #0x2]
	strb	r6, [r1, #0x3]
	sub	r0, r0, #0xd3
	strb	r0, [r1, #0x4]
	ldr	r0, .L1587+0x8
	strb	r7, [r0]
	ldr	r1, .L1587+0xc
	mov	r0, #0x11
	strb	r0, [r1, #0x1a]
	mov	r0, #0xf
	b	.L1537
.L1588:
	.align	2, 0
.L1587:
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gEffectBattler
	.word	gBattleScripting
.L1416:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r1, r8
	add	r5, r0, r1
	ldrh	r4, [r5, #0x28]
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB13069
	b	.L1355	@long jump
.LCB13069:
	cmp	r6, #0
	beq	.LCB13071
	b	.L1355	@long jump
.LCB13071:
	mov	r0, #0x1a
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	ble	.LCB13076
	b	.L1355	@long jump
.LCB13076:
	ldr	r1, .L1589
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L1589+0x4
	strb	r7, [r0]
	ldr	r1, .L1589+0x8
	mov	r0, #0x12
	strb	r0, [r1, #0x1a]
	mov	r0, #0x10
	b	.L1538
.L1590:
	.align	2, 0
.L1589:
	.word	gBattleTextBuff1
	.word	gEffectBattler
	.word	gBattleScripting
.L1418:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r3, r8
	add	r5, r0, r3
	ldrh	r4, [r5, #0x28]
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB13121
	b	.L1355	@long jump
.LCB13121:
	cmp	r6, #0
	beq	.LCB13123
	b	.L1355	@long jump
.LCB13123:
	mov	r0, #0x1b
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	ble	.LCB13128
	b	.L1355	@long jump
.LCB13128:
	ldr	r1, .L1591
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x3
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L1591+0x4
	strb	r7, [r0]
	ldr	r1, .L1591+0x8
	mov	r0, #0x13
	strb	r0, [r1, #0x1a]
	mov	r0, #0x11
	b	.L1537
.L1592:
	.align	2, 0
.L1591:
	.word	gBattleTextBuff1
	.word	gEffectBattler
	.word	gBattleScripting
.L1420:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r1, r8
	add	r5, r0, r1
	ldrh	r4, [r5, #0x28]
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB13173
	b	.L1355	@long jump
.LCB13173:
	cmp	r6, #0
	beq	.LCB13175
	b	.L1355	@long jump
.LCB13175:
	mov	r0, #0x1c
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	ble	.LCB13180
	b	.L1355	@long jump
.LCB13180:
	ldr	r1, .L1593
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x4
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L1593+0x4
	strb	r7, [r0]
	ldr	r1, .L1593+0x8
	mov	r0, #0x14
	strb	r0, [r1, #0x1a]
	mov	r0, #0x12
.L1538:
	strb	r0, [r1, #0x10]
	strb	r6, [r1, #0x11]
	ldr	r0, .L1593+0xc
	bl	BattleScriptExecute
	mov	r2, #0x5
	str	r2, [sp, #0xc]
	b	.L1531
.L1594:
	.align	2, 0
.L1593:
	.word	gBattleTextBuff1
	.word	gEffectBattler
	.word	gBattleScripting
	.word	BattleScript_BerryStatRaiseEnd2
.L1422:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r3, r8
	add	r5, r0, r3
	ldrh	r4, [r5, #0x28]
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB13233
	b	.L1355	@long jump
.LCB13233:
	cmp	r6, #0
	beq	.LCB13235
	b	.L1355	@long jump
.LCB13235:
	mov	r0, #0x1d
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	ble	.LCB13240
	b	.L1355	@long jump
.LCB13240:
	ldr	r1, .L1595
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L1595+0x4
	strb	r7, [r0]
	ldr	r1, .L1595+0x8
	mov	r0, #0x15
	strb	r0, [r1, #0x1a]
	mov	r0, #0x13
.L1537:
	strb	r0, [r1, #0x10]
	strb	r6, [r1, #0x11]
	ldr	r0, .L1595+0xc
	bl	BattleScriptExecute
	mov	r5, #0x5
	str	r5, [sp, #0xc]
	b	.L1531
.L1596:
	.align	2, 0
.L1595:
	.word	gBattleTextBuff1
	.word	gEffectBattler
	.word	gBattleScripting
	.word	BattleScript_BerryStatRaiseEnd2
.L1424:
	mov	r0, #0x58
	mov	r5, r7
	mul	r5, r5, r0
	mov	r1, r8
	add	r0, r5, r1
	ldrh	r4, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB13292
	b	.L1355	@long jump
.LCB13292:
	cmp	r6, #0
	beq	.LCB13294
	b	.L1355	@long jump
.LCB13294:
	mov	r0, r8
	add	r0, r0, #0x50
	add	r1, r5, r0
	ldr	r2, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0xd
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.LCB13304
	b	.L1355	@long jump
.LCB13304:
	orr	r2, r2, r3
	str	r2, [r1]
	ldr	r0, .L1597
	bl	BattleScriptExecute
	mov	r2, #0x2
	str	r2, [sp, #0xc]
	b	.L1531
.L1598:
	.align	2, 0
.L1597:
	.word	BattleScript_BerryFocusEnergyEnd2
.L1426:
	cmp	r6, #0
	beq	.LCB13323
	b	.L1355	@long jump
.LCB13323:
	mov	r0, #0x58
	mov	r5, r7
	mul	r5, r5, r0
	mov	r3, r8
	add	r0, r5, r3
	ldrh	r4, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB13336
	b	.L1355	@long jump
.LCB13336:
	mov	r0, #0x0
	mov	sl, r0
	add	r0, r5, #0x1
	mov	r1, r8
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xb
	ble	.L1429	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x19
	add	r1, r5, r0
.L1430:
	add	r1, r1, #0x1
	mov	r2, #0x1
	add	sl, sl, r2
	mov	r3, sl
	cmp	r3, #0x4
	bgt	.L1429	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xb
	bgt	.L1430	@cond_branch
.L1429:
	mov	r5, sl
	cmp	r5, #0x5
	bne	.LCB13377
	b	.L1355	@long jump
.LCB13377:
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r4, r0, #0x1
	ldr	r5, .L1599
.L1435:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	add	r0, r0, r4
	add	r0, r0, r5
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	beq	.L1435	@cond_branch
	ldr	r1, .L1599+0x4
	mov	r2, #0x0
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, sl
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L1599+0x8
	strb	r3, [r0]
	strb	r2, [r0, #0x1]
	mov	r1, #0xd1
	strb	r1, [r0, #0x2]
	strb	r2, [r0, #0x3]
	strb	r2, [r0, #0x4]
	mov	r1, #0xd2
	strb	r1, [r0, #0x5]
	strb	r2, [r0, #0x6]
	sub	r1, r1, #0xd3
	strb	r1, [r0, #0x7]
	ldr	r0, .L1599+0xc
	strb	r7, [r0]
	ldr	r1, .L1599+0x10
	mov	r0, sl
	add	r0, r0, #0x21
	strb	r0, [r1, #0x1a]
	add	r0, r0, #0x6
	strb	r0, [r1, #0x10]
	strb	r2, [r1, #0x11]
	ldr	r0, .L1599+0x14
	bl	BattleScriptExecute
	mov	r0, #0x5
	str	r0, [sp, #0xc]
	b	.L1531
.L1600:
	.align	2, 0
.L1599:
	.word	gBattleMons+0x18
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gEffectBattler
	.word	gBattleScripting
	.word	BattleScript_BerryStatRaiseEnd2
.L1440:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB13473
	b	.L1355	@long jump
.LCB13473:
	mov	r0, #0x41
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1601
	bl	BattleScriptExecute
	mov	r1, #0x1
	str	r1, [sp, #0xc]
	b	.L1531
.L1602:
	.align	2, 0
.L1601:
	.word	BattleScript_BerryCurePrlzEnd2
.L1442:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x88
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB13503
	b	.L1355	@long jump
.LCB13503:
	ldr	r0, .L1603
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1603+0x4
	bl	BattleScriptExecute
	mov	r2, #0x1
	str	r2, [sp, #0xc]
	b	.L1531
.L1604:
	.align	2, 0
.L1603:
	.word	-0xf89
	.word	BattleScript_BerryCurePsnEnd2
.L1444:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB13533
	b	.L1355	@long jump
.LCB13533:
	mov	r0, #0x11
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1605
	bl	BattleScriptExecute
	mov	r3, #0x1
	str	r3, [sp, #0xc]
	b	.L1531
.L1606:
	.align	2, 0
.L1605:
	.word	BattleScript_BerryCureBrnEnd2
.L1446:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB13563
	b	.L1355	@long jump
.LCB13563:
	mov	r0, #0x21
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1607
	bl	BattleScriptExecute
	mov	r5, #0x1
	str	r5, [sp, #0xc]
	b	.L1531
.L1608:
	.align	2, 0
.L1607:
	.word	BattleScript_BerryCureFrzEnd2
.L1448:
	mov	r0, #0x58
	mov	r3, r7
	mul	r3, r3, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r2, r3, r0
	ldr	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13593
	b	.L1355	@long jump
.LCB13593:
	mov	r0, #0x8
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	mov	r1, r8
	add	r1, r1, #0x50
	add	r1, r3, r1
	ldr	r0, [r1]
	ldr	r2, .L1609
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L1609+0x4
	b	.L1539
.L1610:
	.align	2, 0
.L1609:
	.word	-0x8000001
	.word	BattleScript_BerryCureSlpEnd2
.L1450:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x7
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB13628
	b	.L1355	@long jump
.LCB13628:
	mov	r0, #0x8
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1611
	bl	BattleScriptExecute
	mov	r1, #0x2
	str	r1, [sp, #0xc]
	b	.L1531
.L1612:
	.align	2, 0
.L1611:
	.word	BattleScript_BerryCureConfusionEnd2
.L1452:
	mov	r0, #0x58
	mov	r5, r7
	mul	r5, r5, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r4, r5, r0
	ldr	r2, [r4]
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L1454	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x50
	add	r0, r5, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13667
	b	.L1355	@long jump
.LCB13667:
.L1454:
	mov	r3, #0x0
	mov	sl, r3
	mov	r0, #0x88
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1455	@cond_branch
	ldr	r0, .L1613
	ldr	r1, .L1613+0x4
	bl	StringCopy
	mov	r0, #0x1
	mov	sl, r0
.L1455:
	ldr	r0, [r4]
	mov	r1, #0x7
	mov	r9, r1
	and	r0, r0, r1
	mov	r6, r8
	add	r6, r6, #0x50
	cmp	r0, #0
	beq	.L1456	@cond_branch
	add	r2, r5, r6
	ldr	r0, [r2]
	ldr	r1, .L1613+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1613
	ldr	r1, .L1613+0xc
	bl	StringCopy
	mov	r2, #0x1
	add	sl, sl, r2
.L1456:
	ldr	r0, [r4]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1457	@cond_branch
	ldr	r0, .L1613
	ldr	r1, .L1613+0x10
	bl	StringCopy
	mov	r3, #0x1
	add	sl, sl, r3
.L1457:
	ldr	r0, [r4]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1458	@cond_branch
	ldr	r0, .L1613
	ldr	r1, .L1613+0x14
	bl	StringCopy
	mov	r0, #0x1
	add	sl, sl, r0
.L1458:
	ldr	r0, [r4]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1459	@cond_branch
	ldr	r0, .L1613
	ldr	r1, .L1613+0x18
	bl	StringCopy
	mov	r1, #0x1
	add	sl, sl, r1
.L1459:
	add	r0, r5, r6
	ldr	r0, [r0]
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1460	@cond_branch
	ldr	r0, .L1613
	ldr	r1, .L1613+0x1c
	bl	StringCopy
	mov	r3, #0x1
	add	sl, sl, r3
.L1460:
	mov	r5, sl
	cmp	r5, #0x1
	bgt	.L1461	@cond_branch
	ldr	r1, .L1613+0x20
	mov	r0, #0x0
	b	.L1540
.L1614:
	.align	2, 0
.L1613:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
	.word	-0x8000001
	.word	gStatusConditionString_SleepJpn
	.word	gStatusConditionString_ParalysisJpn
	.word	gStatusConditionString_BurnJpn
	.word	gStatusConditionString_IceJpn
	.word	gStatusConditionString_ConfusionJpn
	.word	gBattleCommunication
.L1461:
	ldr	r1, .L1615
	mov	r0, #0x1
.L1540:
	strb	r0, [r1, #0x5]
	ldr	r2, .L1615+0x4
	mov	r0, #0x58
	mov	r3, r7
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r3, r0
	mov	r1, #0x0
	str	r1, [r0]
	add	r2, r2, #0x50
	add	r3, r3, r2
	ldr	r0, [r3]
	sub	r1, r1, #0x8
	and	r0, r0, r1
	str	r0, [r3]
	ldr	r0, .L1615+0x8
.L1539:
	bl	BattleScriptExecute
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	b	.L1531
.L1616:
	.align	2, 0
.L1615:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	BattleScript_BerryCureChosenStatusEnd2
.L1463:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1355	@cond_branch
	ldr	r0, .L1617
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1617+0x4
	ldr	r1, .L1617+0x8
	bl	StringCopy
	ldr	r0, .L1617+0xc
	bl	BattleScriptExecute
	ldr	r1, .L1617+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	mov	r1, #0x2
	str	r1, [sp, #0xc]
.L1355:
	ldr	r2, [sp, #0xc]
	cmp	r2, #0
	bne	.LCB13856
	b	.L1339	@long jump
.LCB13856:
.L1531:
	ldr	r0, .L1617+0x14
	strb	r7, [r0, #0x17]
	ldr	r0, .L1617+0x18
	strb	r7, [r0]
	ldr	r4, .L1617+0x1c
	ldr	r0, .L1617+0x20
	strb	r7, [r0]
	strb	r7, [r4]
	ldr	r3, [sp, #0xc]
	cmp	r3, #0x1
	beq	.L1469	@cond_branch
	cmp	r3, #0x3
	beq	.L1470	@cond_branch
	b	.L1339
.L1618:
	.align	2, 0
.L1617:
	.word	-0xf0001
	.word	gBattleTextBuff1
	.word	gStatusConditionString_LoveJpn
	.word	BattleScript_BerryCureChosenStatusEnd2
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gPotentialItemEffectBattler
	.word	gActiveBattler
	.word	gBattlerAttacker
.L1469:
	mov	r0, #0x58
	mul	r0, r0, r7
	b	.L1541
.L1470:
	ldr	r4, .L1619
	mov	r0, #0x58
	mov	r3, r7
	mul	r3, r3, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB13909
	b	.L1339	@long jump
.LCB13909:
	ldr	r1, .L1619+0x4
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L1619+0x8
	mov	r5, sl
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB13927
	b	.L1339	@long jump
.LCB13927:
	add	r1, r5, r3
	add	r0, r4, #0
	add	r0, r0, #0x24
	add	r1, r1, r0
	add	r0, sp, #0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	b	.L1339
.L1620:
	.align	2, 0
.L1619:
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
.L1475:
	mov	r7, #0x0
	ldr	r0, .L1621
	ldrb	r0, [r0]
	cmp	r7, r0
	bcc	.LCB13953
	b	.L1339	@long jump
.LCB13953:
.L1479:
	ldr	r4, .L1621+0x4
	ldr	r1, .L1621+0x8
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L1480	@cond_branch
	ldr	r1, .L1621+0xc
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x7]
	b	.L1481
.L1622:
	.align	2, 0
.L1621:
	.word	gBattlersCount
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gEnigmaBerries
.L1480:
	ldrh	r0, [r4]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrh	r0, [r4]
	bl	ItemId_GetHoldEffectParam
.L1481:
	sub	r0, r5, #0x2
	cmp	r0, #0x1a
	bls	.LCB14007
	b	.L1482	@long jump
.LCB14007:
	lsl	r0, r0, #0x2
	ldr	r1, .L1623
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1624:
	.align	2, 0
.L1623:
	.word	.L1514
	.align	2, 0
	.align	2, 0
.L1514:
	.word	.L1483
	.word	.L1491
	.word	.L1485
	.word	.L1487
	.word	.L1489
	.word	.L1482
	.word	.L1493
	.word	.L1497
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1506
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1482
	.word	.L1495
.L1483:
	ldr	r1, .L1625
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x4c
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14035
	b	.L1482	@long jump
.LCB14035:
	mov	r0, #0x41
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1625+0x4
	ldr	r0, .L1625+0x8
	str	r0, [r1]
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	b	.L1532
.L1626:
	.align	2, 0
.L1625:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureParRet
.L1485:
	ldr	r1, .L1627
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x4c
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14067
	b	.L1482	@long jump
.LCB14067:
	ldr	r0, .L1627+0x4
	and	r1, r1, r0
	str	r1, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1627+0x8
	ldr	r0, .L1627+0xc
	str	r0, [r1]
	mov	r1, #0x1
	str	r1, [sp, #0xc]
	b	.L1532
.L1628:
	.align	2, 0
.L1627:
	.word	gBattleMons
	.word	-0xf89
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCurePsnRet
.L1487:
	ldr	r1, .L1629
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x4c
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14099
	b	.L1482	@long jump
.LCB14099:
	mov	r0, #0x11
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1629+0x4
	ldr	r0, .L1629+0x8
	str	r0, [r1]
	mov	r2, #0x1
	str	r2, [sp, #0xc]
	b	.L1532
.L1630:
	.align	2, 0
.L1629:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureBrnRet
.L1489:
	ldr	r1, .L1631
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x4c
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14131
	b	.L1482	@long jump
.LCB14131:
	mov	r0, #0x21
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1631+0x4
	ldr	r0, .L1631+0x8
	str	r0, [r1]
	mov	r3, #0x1
	str	r3, [sp, #0xc]
	b	.L1532
.L1632:
	.align	2, 0
.L1631:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureFrzRet
.L1491:
	ldr	r2, .L1633
	mov	r0, #0x58
	mov	r4, r7
	mul	r4, r4, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r3, r4, r0
	ldr	r1, [r3]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14164
	b	.L1482	@long jump
.LCB14164:
	mov	r0, #0x8
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r3]
	add	r2, r2, #0x50
	add	r2, r4, r2
	ldr	r0, [r2]
	ldr	r1, .L1633+0x4
	and	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1633+0x8
	ldr	r0, .L1633+0xc
	b	.L1542
.L1634:
	.align	2, 0
.L1633:
	.word	gBattleMons
	.word	-0x8000001
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureSlpRet
.L1493:
	ldr	r1, .L1635
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x50
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14200
	b	.L1482	@long jump
.LCB14200:
	mov	r0, #0x8
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1635+0x4
	ldr	r0, .L1635+0x8
	str	r0, [r1]
	mov	r0, #0x2
	str	r0, [sp, #0xc]
	b	.L1532
.L1636:
	.align	2, 0
.L1635:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureConfusionRet
.L1495:
	ldr	r1, .L1637
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x50
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14233
	b	.L1482	@long jump
.LCB14233:
	ldr	r0, .L1637+0x4
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r0, .L1637+0x8
	ldr	r1, .L1637+0xc
	bl	StringCopy
	bl	BattleScriptPushCursor
	ldr	r1, .L1637+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	ldr	r1, .L1637+0x14
	ldr	r0, .L1637+0x18
	str	r0, [r1]
	mov	r1, #0x2
	str	r1, [sp, #0xc]
	b	.L1532
.L1638:
	.align	2, 0
.L1637:
	.word	gBattleMons
	.word	-0xf0001
	.word	gBattleTextBuff1
	.word	gStatusConditionString_LoveJpn
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureChosenStatusRet
.L1497:
	ldr	r4, .L1639
	mov	r0, #0x58
	mov	r5, r7
	mul	r5, r5, r0
	add	r0, r4, #0
	add	r0, r0, #0x4c
	add	r6, r5, r0
	ldr	r2, [r6]
	ldrb	r0, [r6]
	cmp	r0, #0
	bne	.L1499	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r5, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14286
	b	.L1482	@long jump
.LCB14286:
.L1499:
	mov	r0, #0x88
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1500	@cond_branch
	ldr	r0, .L1639+0x4
	ldr	r1, .L1639+0x8
	bl	StringCopy
.L1500:
	ldr	r0, [r6]
	mov	r2, #0x7
	mov	r8, r2
	and	r0, r0, r2
	add	r4, r4, #0x50
	cmp	r0, #0
	beq	.L1501	@cond_branch
	add	r2, r5, r4
	ldr	r0, [r2]
	ldr	r1, .L1639+0xc
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1639+0x4
	ldr	r1, .L1639+0x10
	bl	StringCopy
.L1501:
	ldr	r0, [r6]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1502	@cond_branch
	ldr	r0, .L1639+0x4
	ldr	r1, .L1639+0x14
	bl	StringCopy
.L1502:
	ldr	r0, [r6]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1503	@cond_branch
	ldr	r0, .L1639+0x4
	ldr	r1, .L1639+0x18
	bl	StringCopy
.L1503:
	ldr	r0, [r6]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1504	@cond_branch
	ldr	r0, .L1639+0x4
	ldr	r1, .L1639+0x1c
	bl	StringCopy
.L1504:
	add	r5, r5, r4
	ldr	r0, [r5]
	mov	r3, r8
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1505	@cond_branch
	ldr	r0, .L1639+0x4
	ldr	r1, .L1639+0x20
	bl	StringCopy
.L1505:
	mov	r4, #0x0
	str	r4, [r6]
	ldr	r0, [r5]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r5]
	bl	BattleScriptPushCursor
	ldr	r0, .L1639+0x24
	strb	r4, [r0, #0x5]
	ldr	r1, .L1639+0x28
	ldr	r0, .L1639+0x2c
.L1542:
	str	r0, [r1]
	mov	r5, #0x1
	str	r5, [sp, #0xc]
	b	.L1532
.L1640:
	.align	2, 0
.L1639:
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
	.word	-0x8000001
	.word	gStatusConditionString_SleepJpn
	.word	gStatusConditionString_ParalysisJpn
	.word	gStatusConditionString_BurnJpn
	.word	gStatusConditionString_IceJpn
	.word	gStatusConditionString_ConfusionJpn
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureChosenStatusRet
.L1506:
	ldr	r0, .L1641
	mov	r8, r0
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x18
	add	r1, r1, r0
	mov	r2, #0x6
	mov	r3, #0x7
	mov	sl, r3
.L1510:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L1509	@cond_branch
	strb	r2, [r1]
	mov	r5, #0x5
	str	r5, [sp, #0xc]
.L1509:
	add	r1, r1, #0x1
	mov	r0, #0x1
	neg	r0, r0
	add	sl, sl, r0
	mov	r3, sl
	cmp	r3, #0
	bge	.L1510	@cond_branch
	ldr	r5, [sp, #0xc]
	cmp	r5, #0
	beq	.L1478	@cond_branch
	ldr	r0, .L1641+0x4
	strb	r7, [r0, #0x17]
	ldr	r0, .L1641+0x8
	strb	r7, [r0]
	bl	BattleScriptPushCursor
	ldr	r1, .L1641+0xc
	ldr	r0, .L1641+0x10
	str	r0, [r1]
	b	.L1339
.L1642:
	.align	2, 0
.L1641:
	.word	gBattleMons
	.word	gBattleScripting
	.word	gPotentialItemEffectBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WhiteHerbRet
.L1482:
	ldr	r0, [sp, #0xc]
	cmp	r0, #0
	beq	.L1478	@cond_branch
.L1532:
	ldr	r0, .L1643
	strb	r7, [r0, #0x17]
	ldr	r0, .L1643+0x4
	strb	r7, [r0]
	ldr	r4, .L1643+0x8
	strb	r7, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
.L1541:
	ldr	r1, .L1643+0xc
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1339
.L1644:
	.align	2, 0
.L1643:
	.word	gBattleScripting
	.word	gPotentialItemEffectBattler
	.word	gActiveBattler
	.word	gBattleMons+0x4c
.L1478:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1645
	ldrb	r0, [r0]
	cmp	r7, r0
	bcs	.LCB14520
	b	.L1479	@long jump
.LCB14520:
	b	.L1339
.L1646:
	.align	2, 0
.L1645:
	.word	gBattlersCount
.L1518:
	ldr	r7, .L1647
	ldr	r0, [r7]
	cmp	r0, #0
	bne	.LCB14534
	b	.L1339	@long jump
.LCB14534:
	mov	r1, r8
	cmp	r1, #0x1e
	beq	.L1521	@cond_branch
	cmp	r1, #0x3e
	beq	.L1524	@cond_branch
	b	.L1339
.L1648:
	.align	2, 0
.L1647:
	.word	gBattleMoveDamage
.L1521:
	ldr	r0, .L1649
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB14559
	b	.L1339	@long jump
.LCB14559:
	ldr	r2, .L1649+0x4
	ldr	r4, .L1649+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1523	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB14577
	b	.L1339	@long jump
.LCB14577:
.L1523:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r9
	bcs	.L1339	@cond_branch
	ldr	r2, .L1649+0xc
	ldr	r0, .L1649+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1339	@cond_branch
	ldr	r2, .L1649+0x14
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L1339	@cond_branch
	ldr	r1, .L1649+0x18
	mov	r0, #0x8
	strb	r0, [r1, #0x3]
	bl	BattleScriptPushCursor
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	bl	BattleScriptPop
	b	.L1339
.L1650:
	.align	2, 0
.L1649:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattleCommunication
.L1524:
	ldr	r0, .L1651
	ldrb	r0, [r0]
	mov	r5, #0x29
	and	r5, r5, r0
	cmp	r5, #0
	bne	.L1339	@cond_branch
	ldr	r1, .L1651+0x4
	ldr	r4, .L1651+0x8
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r6, r1, #0x4
	add	r0, r0, r6
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.L1339	@cond_branch
	ldr	r0, .L1651+0xc
	cmp	r1, r0
	beq	.L1339	@cond_branch
	ldr	r0, .L1651+0x10
	ldrb	r3, [r0]
	cmp	r3, r2
	beq	.L1339	@cond_branch
	ldr	r2, .L1651+0x14
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	beq	.L1339	@cond_branch
	cmp	r1, #0
	beq	.L1339	@cond_branch
	ldr	r0, .L1651+0x18
	mov	r2, sp
	ldrh	r2, [r2, #0x14]
	strh	r2, [r0]
	ldr	r0, .L1651+0x1c
	strb	r3, [r0]
	ldr	r0, .L1651+0x20
	strb	r3, [r0, #0x17]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldr	r1, [sp, #0x10]
	bl	__divsi3
	neg	r0, r0
	str	r0, [r7]
	ldrb	r1, [r4]
	cmp	r0, #0
	bne	.L1526	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r7]
.L1526:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	str	r5, [r0]
	bl	BattleScriptPushCursor
	ldr	r1, .L1651+0x24
	ldr	r0, .L1651+0x28
	str	r0, [r1]
	ldr	r0, [sp, #0xc]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
.L1339:
	ldr	r0, [sp, #0xc]
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1652:
	.align	2, 0
.L1651:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	0xffff
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gPotentialItemEffectBattler
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ItemHealHP_Ret
.Lfe32:
	.size	 ItemBattleEffects,.Lfe32-ItemBattleEffects
	.align	2, 0
	.globl	ClearFuryCutterDestinyBondGrudge
	.type	 ClearFuryCutterDestinyBondGrudge,function
	.thumb_func
ClearFuryCutterDestinyBondGrudge:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1654
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r2, #0x0
	strb	r2, [r1, #0x10]
	ldr	r1, .L1654+0x4
	mov	r2, #0x58
	mov	r3, r0
	mul	r3, r3, r2
	add	r1, r1, #0x50
	add	r3, r3, r1
	ldr	r1, [r3]
	ldr	r2, .L1654+0x8
	and	r1, r1, r2
	str	r1, [r3]
	ldr	r1, .L1654+0xc
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r2, .L1654+0x10
	and	r1, r1, r2
	str	r1, [r0]
	bx	lr
.L1655:
	.align	2, 0
.L1654:
	.word	gDisableStructs
	.word	gBattleMons
	.word	-0x2000001
	.word	gStatuses3
	.word	-0x4001
.Lfe33:
	.size	 ClearFuryCutterDestinyBondGrudge,.Lfe33-ClearFuryCutterDestinyBondGrudge
	.align	2, 0
	.globl	HandleAction_RunBattleScript
	.type	 HandleAction_RunBattleScript,function
	.thumb_func
HandleAction_RunBattleScript:
	push	{lr}
	ldr	r0, .L1658
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1657	@cond_branch
	ldr	r1, .L1658+0x4
	ldr	r0, .L1658+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
.L1657:
	pop	{r0}
	bx	r0
.L1659:
	.align	2, 0
.L1658:
	.word	gBattleControllerExecFlags
	.word	gBattleScriptingCommandsTable
	.word	gBattlescriptCurrInstr
.Lfe34:
	.size	 HandleAction_RunBattleScript,.Lfe34-HandleAction_RunBattleScript
	.align	2, 0
	.globl	GetMoveTarget
	.type	 GetMoveTarget,function
	.thumb_func
GetMoveTarget:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	mov	r5, #0x0
	cmp	r0, #0
	beq	.L1661	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L1662
.L1661:
	ldr	r1, .L1696
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r6, [r0, #0x6]
.L1662:
	cmp	r6, #0x40
	bls	.LCB14866
	b	.L1663	@long jump
.LCB14866:
	lsl	r0, r6, #0x2
	ldr	r1, .L1696+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1697:
	.align	2, 0
.L1696:
	.word	gBattleMoves
	.word	.L1692
	.align	2, 0
	.align	2, 0
.L1692:
	.word	.L1664
	.word	.L1676
	.word	.L1691
	.word	.L1663
	.word	.L1678
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1676
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1691
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1676
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1663
	.word	.L1676
.L1664:
	ldr	r0, .L1698
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1698+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L1665	@cond_branch
	ldr	r1, .L1698+0x8
	ldrb	r4, [r2, #0x9]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.LCB14914
	b	.L1694	@long jump
.LCB14914:
.L1665:
	ldr	r0, .L1698
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r7, #0x1
	mov	r8, r0
.L1667:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L1698+0xc
	ldrb	r1, [r1]
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L1698
	ldrb	r3, [r6]
	cmp	r5, r3
	beq	.L1667	@cond_branch
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1667	@cond_branch
	ldr	r0, .L1698+0x10
	ldrb	r2, [r0]
	ldr	r1, .L1698+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L1667	@cond_branch
	ldr	r0, .L1698+0x18
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xd
	beq	.LCB14976
	b	.L1663	@long jump
.LCB14976:
	ldrb	r1, [r6]
	str	r2, [sp]
	mov	r0, #0x10
	mov	r2, #0x1f
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB14990
	b	.L1663	@long jump
.LCB14990:
	ldr	r2, .L1698+0x8
	mov	r1, #0x58
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1f
	bne	.LCB15000
	b	.L1663	@long jump
.LCB15000:
	mov	r4, #0x2
	eor	r5, r5, r4
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	RecordAbilityBattle
	ldr	r1, .L1698+0x1c
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	orr	r1, r1, r4
	strb	r1, [r0]
	b	.L1663
.L1699:
	.align	2, 0
.L1698:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gBattleMons
	.word	gBattlersCount
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMoves
	.word	gSpecialStatuses
.L1676:
	ldr	r0, .L1700
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	add	r1, r0, #0
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	b	.L1695
.L1701:
	.align	2, 0
.L1700:
	.word	gBattlerAttacker
.L1678:
	ldr	r0, .L1702
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1702+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L1679	@cond_branch
	ldr	r1, .L1702+0x8
	ldrb	r4, [r2, #0x9]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L1679	@cond_branch
.L1694:
	add	r5, r4, #0
	b	.L1663
.L1703:
	.align	2, 0
.L1702:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gBattleMons
.L1679:
	ldr	r0, .L1704
	ldr	r0, [r0]
	mov	r4, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1681	@cond_branch
	mov	r0, #0x4
	and	r6, r6, r0
	cmp	r6, #0
	beq	.L1681	@cond_branch
	ldr	r0, .L1704+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1682	@cond_branch
	bl	Random
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1683	@cond_branch
	mov	r0, #0x1
	b	.L1695
.L1705:
	.align	2, 0
.L1704:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
.L1683:
	mov	r0, #0x3
	b	.L1695
.L1682:
	bl	Random
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1686	@cond_branch
	mov	r0, #0x0
	b	.L1695
.L1686:
	mov	r0, #0x2
.L1695:
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1706
	ldrb	r1, [r0]
	ldr	r2, .L1706+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1663	@cond_branch
	mov	r0, #0x2
	eor	r5, r5, r0
	b	.L1663
.L1707:
	.align	2, 0
.L1706:
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L1681:
	ldr	r0, .L1708
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	add	r1, r0, #0
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L1663
.L1709:
	.align	2, 0
.L1708:
	.word	gBattlerAttacker
.L1691:
	ldr	r0, .L1710
	ldrb	r5, [r0]
.L1663:
	ldr	r0, .L1710
	ldrb	r0, [r0]
	ldr	r1, .L1710+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	strb	r5, [r0, #0xc]
	add	r0, r5, #0
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1711:
	.align	2, 0
.L1710:
	.word	gBattlerAttacker
	.word	gBattleStruct
.Lfe35:
	.size	 GetMoveTarget,.Lfe35-GetMoveTarget
	.align	2, 0
	.type	 IsBattlerModernFatefulEncounter,function
	.thumb_func
IsBattlerModernFatefulEncounter:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1716	@cond_branch
	ldr	r0, .L1717
	lsl	r4, r4, #0x1
	add	r5, r4, r0
	ldrh	r0, [r5]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r6, .L1717+0x4
	add	r0, r0, r6
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0xcd
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L1714	@cond_branch
	ldrh	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, #0x97
	beq	.L1714	@cond_branch
.L1716:
	mov	r0, #0x1
	b	.L1715
.L1718:
	.align	2, 0
.L1717:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L1714:
	ldr	r0, .L1719
	add	r0, r4, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1719+0x4
	add	r0, r0, r1
	mov	r1, #0x50
	mov	r2, #0x0
	bl	GetMonData
.L1715:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1720:
	.align	2, 0
.L1719:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe36:
	.size	 IsBattlerModernFatefulEncounter,.Lfe36-IsBattlerModernFatefulEncounter
	.align	2, 0
	.globl	IsMonDisobedient
	.type	 IsMonDisobedient,function
	.thumb_func
IsMonDisobedient:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	mov	r6, #0x0
	ldr	r0, .L1759
	ldr	r0, [r0]
	ldr	r1, .L1759+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1755	@cond_branch
	ldr	r4, .L1759+0x8
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1755	@cond_branch
	ldrb	r0, [r4]
	bl	IsBattlerModernFatefulEncounter
	cmp	r0, #0
	beq	.L1724	@cond_branch
	ldr	r2, .L1759+0xc
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x54
	add	r0, r1, r0
	ldr	r0, [r0]
	add	r2, r2, #0x3c
	add	r1, r1, r2
	bl	IsOtherTrainer
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1755	@cond_branch
	ldr	r0, .L1759+0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1755	@cond_branch
	mov	r6, #0xa
	ldr	r0, .L1759+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1727	@cond_branch
	mov	r6, #0x1e
.L1727:
	ldr	r0, .L1759+0x18
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1728	@cond_branch
	mov	r6, #0x32
.L1728:
	ldr	r0, .L1759+0x1c
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1724	@cond_branch
	mov	r6, #0x46
.L1724:
	ldr	r5, .L1759+0xc
	ldr	r0, .L1759+0x8
	mov	r8, r0
	ldrb	r0, [r0]
	mov	r7, #0x58
	mul	r0, r0, r7
	add	r0, r0, r5
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	cmp	r0, r6
	bls	.L1755	@cond_branch
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	mov	r2, r8
	ldrb	r0, [r2]
	mov	r2, r0
	mul	r2, r2, r7
	add	r0, r2, r5
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	add	r0, r0, r6
	mul	r0, r0, r1
	asr	r4, r0, #0x8
	cmp	r4, r6
	bge	.L1731	@cond_branch
.L1755:
	mov	r0, #0x0
	b	.L1754
.L1760:
	.align	2, 0
.L1759:
	.word	gBattleTypeFlags
	.word	0x10002
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	0x828
	.word	0x822
	.word	0x824
	.word	0x826
.L1731:
	ldr	r3, .L1761
	ldrh	r0, [r3]
	cmp	r0, #0x63
	bne	.L1732	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r2, .L1761+0x4
	and	r1, r1, r2
	str	r1, [r0]
.L1732:
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r7
	add	r1, r5, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1733	@cond_branch
	ldrh	r0, [r3]
	cmp	r0, #0xad
	beq	.L1734	@cond_branch
	cmp	r0, #0xd6
	bne	.L1733	@cond_branch
.L1734:
	ldr	r1, .L1761+0x8
	ldr	r0, .L1761+0xc
	b	.L1756
.L1762:
	.align	2, 0
.L1761:
	.word	gCurrentMove
	.word	-0x800001
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IgnoresWhileAsleep
.L1733:
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	ldr	r2, .L1763
	ldr	r0, .L1763+0x4
	ldrb	r3, [r0]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	add	r0, r0, r6
	mul	r0, r0, r1
	asr	r4, r0, #0x8
	cmp	r4, r6
	bge	.L1735	@cond_branch
	ldr	r0, .L1763+0x8
	ldrh	r1, [r0]
	mov	r0, #0x84
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L1735	@cond_branch
	ldr	r6, .L1763+0xc
	ldr	r5, .L1763+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	add	r0, r3, #0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bne	.LCB15557
	b	.L1757	@long jump
.LCB15557:
	ldr	r2, .L1763+0x14
	mov	r8, r2
	mov	r7, #0x3
.L1738:
	bl	Random
	and	r0, r0, r7
	mov	r1, r8
	strb	r0, [r1]
	strb	r0, [r5]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L1738	@cond_branch
	ldr	r4, .L1763+0x18
	ldr	r3, .L1763
	ldr	r0, .L1763+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	ldr	r1, .L1763+0x4
	ldrb	r2, [r1]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r4]
	ldr	r1, .L1763+0x1c
	ldr	r0, .L1763+0x20
	str	r0, [r1]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L1763+0x24
	strb	r0, [r1]
	ldr	r2, .L1763+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	b	.L1758
.L1764:
	.align	2, 0
.L1763:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gBitTable
	.word	gCurrMovePos
	.word	gChosenMovePos
	.word	gCalledMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IgnoresAndUsesRandomMove
	.word	gBattlerTarget
	.word	gHitMarker
.L1735:
	ldr	r5, .L1765
	ldr	r2, .L1765+0x4
	mov	r8, r2
	ldrb	r0, [r2]
	mov	r7, #0x58
	mul	r0, r0, r7
	add	r0, r0, r5
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	sub	r0, r0, r6
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	Random
	mov	r2, #0xff
	add	r4, r2, #0
	and	r4, r4, r0
	cmp	r4, r6
	bge	.L1744	@cond_branch
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, r0
	mul	r1, r1, r7
	add	r0, r5, #0
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L1744	@cond_branch
	add	r0, r1, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x48
	beq	.L1744	@cond_branch
	cmp	r0, #0xf
	beq	.L1744	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L1765+0x8
	ldrb	r3, [r0]
	add	r7, r0, #0
	cmp	r2, r3
	bge	.L1746	@cond_branch
	ldr	r0, [r5, #0x50]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1746	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x50
	mov	r5, #0x70
.L1747:
	add	r1, r1, #0x58
	add	r2, r2, #0x1
	cmp	r2, r3
	bge	.L1746	@cond_branch
	ldr	r0, [r1]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1747	@cond_branch
.L1746:
	ldrb	r7, [r7]
	cmp	r2, r7
	bne	.L1744	@cond_branch
	ldr	r1, .L1765+0xc
	ldr	r0, .L1765+0x10
	b	.L1756
.L1766:
	.align	2, 0
.L1765:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IgnoresAndFallsAsleep
.L1744:
	sub	r4, r4, r6
	cmp	r4, r6
	blt	.L1752	@cond_branch
.L1757:
	bl	Random
	ldr	r2, .L1767
	mov	r1, #0x3
	and	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldr	r1, .L1767+0x4
	ldr	r0, .L1767+0x8
.L1756:
	str	r0, [r1]
	mov	r0, #0x1
	b	.L1754
.L1768:
	.align	2, 0
.L1767:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedLoafingAround
.L1752:
	ldr	r4, .L1769
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r1, r1, r0
	ldr	r0, .L1769+0x4
	add	r1, r1, r0
	mov	r0, #0x28
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	ldrb	r0, [r4]
	str	r0, [sp, #0x8]
	ldrb	r0, [r4]
	str	r0, [sp, #0xc]
	add	r0, r1, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	CalculateBaseDamage
	ldr	r1, .L1769+0x8
	str	r0, [r1]
	ldr	r1, .L1769+0xc
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldr	r1, .L1769+0x10
	ldr	r0, .L1769+0x14
	str	r0, [r1]
	ldr	r2, .L1769+0x18
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
.L1758:
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x2
.L1754:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1770:
	.align	2, 0
.L1769:
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IgnoresAndHitsItself
	.word	gHitMarker
.Lfe37:
	.size	 IsMonDisobedient,.Lfe37-IsMonDisobedient
.text
	.align	2, 0 @ Don't pad with nop

