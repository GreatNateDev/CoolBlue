@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sZeroedBgControlStruct,object
	.size	 sZeroedBgControlStruct,4
sZeroedBgControlStruct:
	.byte	0x0
	.space	3
.text
	.align	2, 0
	.globl	ResetBgs
	.type	 ResetBgs,function
	.thumb_func
ResetBgs:
	push	{lr}
	bl	ResetBgControlStructs
	ldr	r1, .L3
	mov	r0, #0x0
	strh	r0, [r1, #0x10]
	bl	SetTextModeAndHideBgs
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sGpuBgConfigs
.Lfe1:
	.size	 ResetBgs,.Lfe1-ResetBgs
	.align	2, 0
	.globl	SetBgModeInternal
	.type	 SetBgModeInternal,function
	.thumb_func
SetBgModeInternal:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L6
	ldrh	r2, [r3, #0x10]
	ldr	r1, .L6+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x10]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	sGpuBgConfigs
	.word	0xfff8
.Lfe2:
	.size	 SetBgModeInternal,.Lfe2-SetBgModeInternal
	.align	2, 0
	.globl	GetBgMode
	.type	 GetBgMode,function
	.thumb_func
GetBgMode:
	ldr	r0, .L9
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x7
	and	r0, r0, r1
	bx	lr
.L10:
	.align	2, 0
.L9:
	.word	sGpuBgConfigs
.Lfe3:
	.size	 GetBgMode,.Lfe3-GetBgMode
	.align	2, 0
	.globl	ResetBgControlStructs
	.type	 ResetBgControlStructs,function
	.thumb_func
ResetBgControlStructs:
	push	{lr}
	ldr	r2, .L17
	ldr	r0, .L17+0x4
	ldr	r0, [r0]
	add	r1, r2, #0
	add	r1, r1, #0xc
.L15:
	str	r0, [r1]
	sub	r1, r1, #0x4
	cmp	r1, r2
	bge	.L15	@cond_branch
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	sGpuBgConfigs
	.word	sZeroedBgControlStruct
.Lfe4:
	.size	 ResetBgControlStructs,.Lfe4-ResetBgControlStructs
	.align	2, 0
	.globl	Unused_ResetBgControlStruct
	.type	 Unused_ResetBgControlStruct,function
	.thumb_func
Unused_ResetBgControlStruct:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L20	@cond_branch
	ldr	r1, .L21
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r1, .L21+0x4
	ldr	r1, [r1]
	str	r1, [r0]
.L20:
	pop	{r4}
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	sGpuBgConfigs
	.word	sZeroedBgControlStruct
.Lfe5:
	.size	 Unused_ResetBgControlStruct,.Lfe5-Unused_ResetBgControlStruct
	.align	2, 0
	.globl	SetBgControlAttributes
	.type	 SetBgControlAttributes,function
	.thumb_func
SetBgControlAttributes:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x30]
	ldr	r5, [sp, #0x34]
	ldr	r6, [sp, #0x38]
	mov	ip, r6
	ldr	r6, [sp, #0x3c]
	mov	r8, r6
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	str	r7, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x4]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, ip
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, r8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	add	r0, r7, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	cmp	r0, #0
	bne	.L24	@cond_branch
	ldr	r2, .L32
	mov	r8, r2
	mov	r0, sl
	cmp	r0, #0xff
	beq	.L25	@cond_branch
	lsl	r2, r7, #0x2
	add	r2, r2, r8
	mov	r1, #0x3
	and	r1, r1, r0
	ldrb	r3, [r2, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
.L25:
	cmp	r6, #0xff
	beq	.L26	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	mov	r0, #0x1f
	and	r6, r6, r0
	lsl	r3, r6, #0x2
	ldrb	r2, [r1, #0x1]
	sub	r0, r0, #0x9c
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x1]
.L26:
	mov	r1, r9
	cmp	r1, #0xff
	beq	.L27	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	mov	r0, #0x3
	mov	r2, r9
	and	r2, r2, r0
	lsl	r3, r2, #0x2
	ldrb	r2, [r1]
	sub	r0, r0, #0x10
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1]
.L27:
	ldr	r6, [sp, #0x4]
	cmp	r6, #0xff
	beq	.L28	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	lsl	r3, r6, #0x7
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x1]
.L28:
	cmp	r5, #0xff
	beq	.L29	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	mov	r0, #0x3
	and	r5, r5, r0
	lsl	r3, r5, #0x4
	ldrb	r2, [r1]
	sub	r0, r0, #0x34
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1]
.L29:
	cmp	r4, #0xff
	beq	.L30	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	mov	r0, #0x1
	and	r4, r4, r0
	lsl	r3, r4, #0x6
	ldrb	r2, [r1]
	sub	r0, r0, #0x42
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1]
.L30:
	ldr	r0, [sp, #0xc]
	cmp	r0, #0xff
	beq	.L31	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	lsl	r3, r0, #0x7
	ldrb	r2, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1]
.L31:
	ldr	r1, [sp]
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	mov	r2, ip
	strb	r2, [r0, #0x2]
	strb	r2, [r0, #0x3]
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
.L24:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	sGpuBgConfigs
.Lfe6:
	.size	 SetBgControlAttributes,.Lfe6-SetBgControlAttributes
	.align	2, 0
	.globl	GetBgControlAttribute
	.type	 GetBgControlAttribute,function
	.thumb_func
GetBgControlAttribute:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L35	@cond_branch
	ldr	r1, .L48
	lsl	r2, r4, #0x2
	add	r0, r2, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	add	r3, r1, #0
	cmp	r0, #0
	beq	.L35	@cond_branch
	sub	r0, r5, #0x1
	cmp	r0, #0x7
	bhi	.L35	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L48+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L49:
	.align	2, 0
.L48:
	.word	sGpuBgConfigs
	.word	.L45
	.align	2, 0
	.align	2, 0
.L45:
	.word	.L37
	.word	.L38
	.word	.L39
	.word	.L40
	.word	.L41
	.word	.L42
	.word	.L43
	.word	.L44
.L37:
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	b	.L47
.L38:
	add	r0, r2, r3
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	b	.L47
.L39:
	add	r0, r2, r3
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	b	.L47
.L40:
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	b	.L47
.L41:
	add	r0, r2, r3
	ldrb	r0, [r0, #0x1]
	lsr	r0, r0, #0x7
	b	.L47
.L42:
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	b	.L47
.L43:
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1f
	b	.L47
.L44:
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsr	r0, r0, #0x7
	b	.L47
.L35:
	mov	r0, #0xff
.L47:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 GetBgControlAttribute,.Lfe7-GetBgControlAttribute
	.align	2, 0
	.globl	LoadBgVram
	.type	 LoadBgVram,function
	.thumb_func
LoadBgVram:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r1
	ldr	r1, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r7, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r6, r3, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L61	@cond_branch
	ldr	r1, .L62
	lsl	r0, r4, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L61	@cond_branch
	cmp	r5, #0x1
	beq	.L53	@cond_branch
	cmp	r5, #0x2
	beq	.L54	@cond_branch
	mov	r2, #0xff
	b	.L56
.L63:
	.align	2, 0
.L62:
	.word	sGpuBgConfigs
.L53:
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x10
	b	.L52
.L54:
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	lsl	r0, r0, #0xb
.L52:
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r1, r0, r1
	mov	r0, r8
	add	r2, r7, #0
	mov	r3, #0x0
	bl	RequestDma3Copy
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L56	@cond_branch
.L61:
	mov	r0, #0xff
	b	.L60
.L56:
	add	r0, r2, #0
.L60:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 LoadBgVram,.Lfe8-LoadBgVram
	.align	2, 0
	.globl	ShowBgInternal
	.type	 ShowBgInternal,function
	.thumb_func
ShowBgInternal:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L65	@cond_branch
	ldr	r5, .L66
	lsl	r0, r4, #0x2
	add	r2, r0, r5
	ldrb	r3, [r2]
	lsl	r0, r3, #0x1f
	cmp	r0, #0
	beq	.L65	@cond_branch
	lsl	r1, r3, #0x1a
	lsr	r1, r1, #0x1e
	ldrb	r2, [r2, #0x1]
	lsl	r0, r2, #0x1e
	lsr	r0, r0, #0x1c
	orr	r1, r1, r0
	mov	r0, #0x40
	and	r0, r0, r3
	orr	r1, r1, r0
	lsr	r0, r2, #0x7
	lsl	r0, r0, #0x7
	orr	r1, r1, r0
	lsl	r2, r2, #0x19
	lsr	r2, r2, #0x1b
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	lsr	r0, r3, #0x7
	lsl	r0, r0, #0xd
	orr	r1, r1, r0
	lsl	r0, r3, #0x1c
	lsr	r0, r0, #0x1e
	lsl	r0, r0, #0xe
	orr	r1, r1, r0
	lsl	r0, r4, #0x19
	mov	r2, #0x80
	lsl	r2, r2, #0x14
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	bl	SetGpuReg
	add	r1, r4, #0
	add	r1, r1, #0x8
	mov	r0, #0x1
	lsl	r0, r0, r1
	ldrh	r1, [r5, #0x10]
	orr	r0, r0, r1
	ldr	r1, .L66+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0x10]
.L65:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L67:
	.align	2, 0
.L66:
	.word	sGpuBgConfigs
	.word	0xf07
.Lfe9:
	.size	 ShowBgInternal,.Lfe9-ShowBgInternal
	.align	2, 0
	.type	 HideBgInternal,function
	.thumb_func
HideBgInternal:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r2, .L70
	add	r0, r4, #0
	add	r0, r0, #0x8
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldrh	r0, [r2, #0x10]
	bic	r0, r0, r1
	ldr	r1, .L70+0x4
	and	r0, r0, r1
	strh	r0, [r2, #0x10]
.L69:
	pop	{r4}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	sGpuBgConfigs
	.word	0xf07
.Lfe10:
	.size	 HideBgInternal,.Lfe10-HideBgInternal
	.align	2, 0
	.type	 SyncBgVisibilityAndMode,function
	.thumb_func
SyncBgVisibilityAndMode:
	push	{lr}
	mov	r0, #0x0
	bl	GetGpuReg
	ldr	r1, .L73
	and	r1, r1, r0
	ldr	r0, .L73+0x4
	ldrh	r0, [r0, #0x10]
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	0xf0f8
	.word	sGpuBgConfigs
.Lfe11:
	.size	 SyncBgVisibilityAndMode,.Lfe11-SyncBgVisibilityAndMode
	.align	2, 0
	.globl	SetTextModeAndHideBgs
	.type	 SetTextModeAndHideBgs,function
	.thumb_func
SetTextModeAndHideBgs:
	push	{lr}
	mov	r0, #0x0
	bl	GetGpuReg
	ldr	r1, .L76
	and	r1, r1, r0
	mov	r0, #0x0
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	0xf0f8
.Lfe12:
	.size	 SetTextModeAndHideBgs,.Lfe12-SetTextModeAndHideBgs
	.align	2, 0
	.type	 SetBgAffineInternal,function
	.thumb_func
SetBgAffineInternal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x24
	mov	ip, r1
	mov	r8, r2
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x40]
	ldr	r4, [sp, #0x44]
	ldr	r5, [sp, #0x48]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L88
	ldrh	r0, [r0, #0x10]
	mov	r1, #0x7
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.L80	@cond_branch
	cmp	r1, #0x1
	ble	.L78	@cond_branch
	cmp	r1, #0x2
	beq	.L82	@cond_branch
	b	.L78
.L89:
	.align	2, 0
.L88:
	.word	sGpuBgConfigs
.L80:
	cmp	r6, #0x2
	bne	.L78	@cond_branch
	b	.L79
.L82:
	sub	r0, r6, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L78	@cond_branch
.L79:
	mov	r0, ip
	str	r0, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, sp
	strh	r3, [r0, #0x8]
	strh	r7, [r0, #0xa]
	strh	r2, [r0, #0xc]
	strh	r4, [r0, #0xe]
	strh	r5, [r0, #0x10]
	add	r4, sp, #0x14
	add	r1, r4, #0
	mov	r2, #0x1
	bl	BgAffineSet
	ldrh	r1, [r4]
	mov	r0, #0x20
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2]
	mov	r0, #0x22
	bl	SetGpuReg
	ldrh	r1, [r4, #0x4]
	mov	r0, #0x24
	bl	SetGpuReg
	ldrh	r1, [r4, #0x6]
	mov	r0, #0x26
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x20
	bl	SetGpuReg
	ldrh	r1, [r4, #0x8]
	mov	r0, #0x28
	bl	SetGpuReg
	ldrh	r1, [r4, #0xa]
	mov	r0, #0x2a
	bl	SetGpuReg
	ldrh	r1, [r4, #0xc]
	mov	r0, #0x2c
	bl	SetGpuReg
	ldrh	r1, [r4, #0xe]
	mov	r0, #0x2e
	bl	SetGpuReg
.L78:
	add	sp, sp, #0x24
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 SetBgAffineInternal,.Lfe13-SetBgAffineInternal
	.align	2, 0
	.globl	IsInvalidBg
	.type	 IsInvalidBg,function
	.thumb_func
IsInvalidBg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L91	@cond_branch
	mov	r0, #0x0
	b	.L92
.L91:
	mov	r0, #0x1
.L92:
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 IsInvalidBg,.Lfe14-IsInvalidBg
	.align	2, 0
	.globl	BgTileAllocOp
	.type	 BgTileAllocOp,function
	.thumb_func
BgTileAllocOp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r1, #0
	mov	r8, r2
	cmp	r3, #0x1
	beq	.L109	@cond_branch
	cmp	r3, #0x1
	bgt	.L127	@cond_branch
	cmp	r3, #0
	beq	.L95	@cond_branch
	b	.L94
.L127:
	cmp	r3, #0x2
	beq	.L117	@cond_branch
	b	.L94
.L95:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x7
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	add	r4, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	cmp	r4, r1
	ble	.L96	@cond_branch
	add	r4, r1, #0
.L96:
	mov	r2, #0x0
	mov	r6, #0x0
	add	r3, r0, #0
	mov	r5, #0x0
	cmp	r3, r4
	bge	.L98	@cond_branch
	ldr	r7, .L129
	mov	ip, r7
.L100:
	add	r0, r3, #0
	cmp	r3, #0
	bge	.L102	@cond_branch
	add	r0, r3, #0x7
.L102:
	asr	r0, r0, #0x3
	mov	r7, ip
	add	r1, r0, r7
	ldrb	r1, [r1]
	lsl	r0, r0, #0x3
	sub	r0, r3, r0
	asr	r1, r1, r0
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L101	@cond_branch
	cmp	r2, #0
	beq	.L104	@cond_branch
	add	r2, r2, #0x1
	cmp	r2, r8
	bne	.L99	@cond_branch
	add	r0, r6, #0
	b	.L128
.L130:
	.align	2, 0
.L129:
	.word	gpu_tile_allocation_map_bg
.L104:
	add	r6, r5, #0
	mov	r2, #0x1
	b	.L99
.L101:
	mov	r2, #0x0
.L99:
	add	r3, r3, #0x1
	add	r5, r5, #0x1
	cmp	r3, r4
	blt	.L100	@cond_branch
.L98:
	mov	r0, #0x1
	neg	r0, r0
	b	.L128
.L109:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x7
	add	r0, r0, r5
	mov	r1, r8
	add	r4, r0, r1
	add	r3, r0, #0
	cmp	r3, r4
	bge	.L94	@cond_branch
	ldr	r5, .L131
	mov	r6, #0x1
.L113:
	add	r1, r3, #0
	cmp	r3, #0
	bge	.L114	@cond_branch
	add	r1, r3, #0x7
.L114:
	asr	r1, r1, #0x3
	add	r2, r1, r5
	lsl	r1, r1, #0x3
	sub	r1, r3, r1
	add	r0, r6, #0
	lsl	r0, r0, r1
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, r4
	blt	.L113	@cond_branch
	b	.L94
.L132:
	.align	2, 0
.L131:
	.word	gpu_tile_allocation_map_bg
.L117:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x7
	add	r0, r0, r5
	mov	r7, r8
	add	r4, r0, r7
	add	r3, r0, #0
	cmp	r3, r4
	bge	.L94	@cond_branch
	ldr	r5, .L133
	mov	r6, #0x1
.L121:
	add	r0, r3, #0
	cmp	r3, #0
	bge	.L122	@cond_branch
	add	r0, r3, #0x7
.L122:
	asr	r0, r0, #0x3
	add	r2, r0, r5
	lsl	r0, r0, #0x3
	sub	r0, r3, r0
	add	r1, r6, #0
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, r4
	blt	.L121	@cond_branch
.L94:
	mov	r0, #0x0
.L128:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L134:
	.align	2, 0
.L133:
	.word	gpu_tile_allocation_map_bg
.Lfe15:
	.size	 BgTileAllocOp,.Lfe15-BgTileAllocOp
	.align	2, 0
	.globl	ResetBgsAndClearDma3BusyFlags
	.type	 ResetBgsAndClearDma3BusyFlags,function
	.thumb_func
ResetBgsAndClearDma3BusyFlags:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ResetBgs
	ldr	r1, .L146
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0xc
.L139:
	str	r2, [r0]
	sub	r0, r0, #0x4
	cmp	r0, r1
	bge	.L139	@cond_branch
	ldr	r0, .L146+0x4
	str	r4, [r0]
	ldr	r1, .L146+0x8
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0xff
.L144:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L144	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L147:
	.align	2, 0
.L146:
	.word	sDmaBusyBitfield
	.word	gWindowTileAutoAllocEnabled
	.word	gpu_tile_allocation_map_bg
.Lfe16:
	.size	 ResetBgsAndClearDma3BusyFlags,.Lfe16-ResetBgsAndClearDma3BusyFlags
	.align	2, 0
	.globl	InitBgsFromTemplates
	.type	 InitBgsFromTemplates,function
	.thumb_func
InitBgsFromTemplates:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	bl	SetBgModeInternal
	bl	ResetBgControlStructs
	cmp	r4, #0
	beq	.L150	@cond_branch
	mov	r7, #0x0
	ldr	r0, .L155
	mov	r9, r0
	add	r6, r5, #0
	ldr	r2, .L155+0x4
	mov	sl, r2
	mov	r8, r4
.L152:
	ldr	r4, [r6]
	lsl	r0, r4, #0x1e
	lsr	r5, r0, #0x1e
	cmp	r5, #0x3
	bhi	.L151	@cond_branch
	lsl	r1, r4, #0x1c
	lsr	r1, r1, #0x1e
	lsl	r2, r4, #0x17
	lsr	r2, r2, #0x1b
	lsl	r3, r4, #0x15
	lsr	r3, r3, #0x1e
	lsl	r0, r4, #0x14
	lsr	r0, r0, #0x1f
	str	r0, [sp]
	lsl	r0, r4, #0x12
	lsr	r0, r0, #0x1e
	str	r0, [sp, #0x4]
	str	r7, [sp, #0x8]
	str	r7, [sp, #0xc]
	add	r0, r5, #0
	bl	SetBgControlAttributes
	lsl	r4, r5, #0x4
	mov	r5, r9
	add	r3, r4, r5
	ldr	r2, [r6]
	lsl	r2, r2, #0x8
	lsr	r2, r2, #0x16
	ldrh	r0, [r3]
	ldr	r5, .L155+0x8
	add	r1, r5, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r3]
	ldrb	r0, [r3, #0x1]
	mov	r2, #0x3d
	neg	r2, r2
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r3, #0x1]
	ldr	r0, [r3]
	ldr	r1, .L155+0xc
	and	r0, r0, r1
	str	r0, [r3]
	mov	r0, r9
	add	r0, r0, #0x4
	add	r0, r4, r0
	str	r7, [r0]
	mov	r0, r9
	add	r0, r0, #0x8
	add	r0, r4, r0
	str	r7, [r0]
	ldr	r5, .L155+0x10
	add	r4, r4, r5
	str	r7, [r4]
	ldr	r0, [r6]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	lsl	r0, r0, #0x6
	add	r0, r0, sl
	mov	r1, #0x1
	strb	r1, [r0]
.L151:
	add	r6, r6, #0x4
	mov	r0, #0x1
	neg	r0, r0
	add	r8, r8, r0
	mov	r2, r8
	cmp	r2, #0
	bne	.L152	@cond_branch
.L150:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L156:
	.align	2, 0
.L155:
	.word	sGpuBgConfigs2
	.word	gpu_tile_allocation_map_bg
	.word	-0x400
	.word	0x3fff
	.word	sGpuBgConfigs2+0xc
.Lfe17:
	.size	 InitBgsFromTemplates,.Lfe17-InitBgsFromTemplates
	.align	2, 0
	.globl	InitBgFromTemplate
	.type	 InitBgFromTemplate,function
	.thumb_func
InitBgFromTemplate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	add	r7, r0, #0
	ldr	r4, [r7]
	lsl	r0, r4, #0x1e
	lsr	r5, r0, #0x1e
	cmp	r5, #0x3
	bhi	.L158	@cond_branch
	lsl	r1, r4, #0x1c
	lsr	r1, r1, #0x1e
	lsl	r2, r4, #0x17
	lsr	r2, r2, #0x1b
	lsl	r3, r4, #0x15
	lsr	r3, r3, #0x1e
	lsl	r0, r4, #0x14
	lsr	r0, r0, #0x1f
	str	r0, [sp]
	lsl	r0, r4, #0x12
	lsr	r0, r0, #0x1e
	str	r0, [sp, #0x4]
	mov	r6, #0x0
	str	r6, [sp, #0x8]
	str	r6, [sp, #0xc]
	add	r0, r5, #0
	bl	SetBgControlAttributes
	ldr	r4, .L159
	lsl	r5, r5, #0x4
	add	r3, r5, r4
	ldr	r1, [r7]
	lsl	r1, r1, #0x8
	lsr	r1, r1, #0x16
	ldrh	r2, [r3]
	ldr	r0, .L159+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3]
	ldrb	r1, [r3, #0x1]
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3, #0x1]
	ldr	r0, [r3]
	ldr	r1, .L159+0x8
	and	r0, r0, r1
	str	r0, [r3]
	add	r0, r4, #0x4
	add	r0, r5, r0
	str	r6, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r0, r5, r0
	str	r6, [r0]
	add	r4, r4, #0xc
	add	r5, r5, r4
	str	r6, [r5]
	ldr	r1, .L159+0xc
	ldr	r0, [r7]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	lsl	r0, r0, #0x6
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
.L158:
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	sGpuBgConfigs2
	.word	-0x400
	.word	0x3fff
	.word	gpu_tile_allocation_map_bg
.Lfe18:
	.size	 InitBgFromTemplate,.Lfe18-InitBgFromTemplate
	.align	2, 0
	.globl	LoadBgTiles
	.type	 LoadBgTiles,function
	.thumb_func
LoadBgTiles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r8, r2
	lsl	r3, r3, #0x10
	lsr	r4, r3, #0x10
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L162	@cond_branch
	ldr	r1, .L168
	lsl	r0, r5, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	lsl	r0, r0, #0x15
	b	.L167
.L169:
	.align	2, 0
.L168:
	.word	sGpuBgConfigs2
.L162:
	ldr	r1, .L170
	lsl	r0, r5, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	lsl	r0, r0, #0x16
.L167:
	lsr	r4, r0, #0x10
	mov	r6, #0x1
	str	r6, [sp]
	add	r0, r5, #0
	add	r1, r7, #0
	mov	r2, r8
	add	r3, r4, #0
	bl	LoadBgVram
	lsl	r2, r0, #0x18
	lsr	r1, r2, #0x18
	add	r7, r1, #0
	cmp	r1, #0xff
	bne	.L164	@cond_branch
	ldr	r0, .L170+0x4
	b	.L166
.L171:
	.align	2, 0
.L170:
	.word	sGpuBgConfigs2
	.word	0xffff
.L164:
	ldr	r0, .L172
	lsr	r2, r2, #0x1d
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	mov	r0, #0x1f
	and	r0, r0, r1
	add	r1, r6, #0
	lsl	r1, r1, r0
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L172+0x4
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L165	@cond_branch
	lsr	r1, r4, #0x5
	mov	r0, r8
	lsr	r2, r0, #0x5
	add	r0, r5, #0
	mov	r3, #0x1
	bl	BgTileAllocOp
.L165:
	add	r0, r7, #0
.L166:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L173:
	.align	2, 0
.L172:
	.word	sDmaBusyBitfield
	.word	gWindowTileAutoAllocEnabled
.Lfe19:
	.size	 LoadBgTiles,.Lfe19-LoadBgTiles
	.align	2, 0
	.globl	LoadBgTilemap
	.type	 LoadBgTilemap,function
	.thumb_func
LoadBgTilemap:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x15
	lsr	r3, r3, #0x10
	mov	r4, #0x2
	str	r4, [sp]
	bl	LoadBgVram
	lsl	r2, r0, #0x18
	lsr	r3, r2, #0x18
	cmp	r3, #0xff
	beq	.L175	@cond_branch
	ldr	r0, .L177
	lsr	r2, r2, #0x1d
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	mov	r0, #0x1f
	and	r0, r0, r3
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	add	r0, r3, #0
	b	.L176
.L178:
	.align	2, 0
.L177:
	.word	sDmaBusyBitfield
.L175:
	ldr	r0, .L179
.L176:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.L180:
	.align	2, 0
.L179:
	.word	0xffff
.Lfe20:
	.size	 LoadBgTilemap,.Lfe20-LoadBgTilemap
	.align	2, 0
	.globl	Unused_LoadBgPalette
	.type	 Unused_LoadBgPalette,function
	.thumb_func
Unused_LoadBgPalette:
	push	{r4, r5, r6, r7, lr}
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r5, r3, #0x10
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L188	@cond_branch
	ldr	r1, .L189
	lsl	r0, r4, #0x4
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	lsl	r1, r1, #0x5
	lsl	r0, r5, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0xa0
	lsl	r0, r0, #0x13
	add	r1, r1, r0
	add	r0, r7, #0
	add	r2, r6, #0
	mov	r3, #0x0
	bl	RequestDma3Copy
	lsl	r3, r0, #0x18
	asr	r1, r3, #0x18
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L184	@cond_branch
.L188:
	ldr	r0, .L189+0x4
	b	.L187
.L190:
	.align	2, 0
.L189:
	.word	sGpuBgConfigs2
	.word	0xffff
.L184:
	ldr	r4, .L191
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L185	@cond_branch
	add	r0, r0, #0x1f
.L185:
	asr	r0, r0, #0x5
	lsl	r2, r0, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x5
	sub	r0, r1, r0
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	lsr	r0, r3, #0x18
.L187:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L192:
	.align	2, 0
.L191:
	.word	sDmaBusyBitfield
.Lfe21:
	.size	 Unused_LoadBgPalette,.Lfe21-Unused_LoadBgPalette
	.align	2, 0
	.globl	IsDma3ManagerBusyWithBgCopy
	.type	 IsDma3ManagerBusyWithBgCopy,function
	.thumb_func
IsDma3ManagerBusyWithBgCopy:
	push	{r4, r5, r6, r7, lr}
	mov	r5, #0x0
	mov	r7, #0x1
	neg	r7, r7
.L197:
	add	r0, r5, #0
	cmp	r5, #0
	bge	.L198	@cond_branch
	add	r0, r0, #0x1f
.L198:
	asr	r0, r0, #0x5
	lsl	r2, r0, #0x18
	lsl	r0, r0, #0x5
	sub	r0, r5, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L204
	lsr	r2, r2, #0x16
	add	r4, r2, r1
	mov	r6, #0x1
	lsl	r6, r6, r0
	ldr	r0, [r4]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L196	@cond_branch
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	bl	WaitDma3Request
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, r7
	bne	.L201	@cond_branch
	mov	r0, #0x1
	b	.L203
.L205:
	.align	2, 0
.L204:
	.word	sDmaBusyBitfield
.L201:
	ldr	r0, [r4]
	bic	r0, r0, r6
	str	r0, [r4]
.L196:
	add	r5, r5, #0x1
	cmp	r5, #0x7f
	ble	.L197	@cond_branch
	mov	r0, #0x0
.L203:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 IsDma3ManagerBusyWithBgCopy,.Lfe22-IsDma3ManagerBusyWithBgCopy
	.align	2, 0
	.globl	ShowBg
	.type	 ShowBg,function
	.thumb_func
ShowBg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ShowBgInternal
	bl	SyncBgVisibilityAndMode
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 ShowBg,.Lfe23-ShowBg
	.align	2, 0
	.globl	HideBg
	.type	 HideBg,function
	.thumb_func
HideBg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	HideBgInternal
	bl	SyncBgVisibilityAndMode
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 HideBg,.Lfe24-HideBg
	.align	2, 0
	.globl	SetBgAttribute
	.type	 SetBgAttribute,function
	.thumb_func
SetBgAttribute:
	push	{r4, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r3, r2, #0x18
	sub	r0, r1, #0x1
	cmp	r0, #0x6
	bhi	.L209	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L222
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L223:
	.align	2, 0
.L222:
	.word	.L217
	.align	2, 0
	.align	2, 0
.L217:
	.word	.L210
	.word	.L211
	.word	.L212
	.word	.L213
	.word	.L215
	.word	.L216
	.word	.L214
.L210:
	mov	r0, #0xff
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	add	r1, r3, #0
	b	.L219
.L211:
	mov	r0, #0xff
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0xff
	add	r2, r3, #0
	b	.L220
.L212:
	mov	r0, #0xff
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0xff
	mov	r2, #0xff
	bl	SetBgControlAttributes
	b	.L209
.L213:
	str	r3, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	b	.L221
.L214:
	mov	r0, #0xff
	str	r0, [sp]
	str	r3, [sp, #0x4]
	str	r0, [sp, #0x8]
	b	.L221
.L215:
	mov	r0, #0xff
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r3, [sp, #0x8]
.L221:
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0xff
.L219:
	mov	r2, #0xff
.L220:
	mov	r3, #0xff
	bl	SetBgControlAttributes
	b	.L209
.L216:
	mov	r0, #0xff
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r3, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0xff
	mov	r2, #0xff
	mov	r3, #0xff
	bl	SetBgControlAttributes
.L209:
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 SetBgAttribute,.Lfe25-SetBgAttribute
	.align	2, 0
	.globl	GetBgAttribute
	.type	 GetBgAttribute,function
	.thumb_func
GetBgAttribute:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	sub	r0, r1, #0x1
	cmp	r0, #0x9
	bhi	.L241	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L245
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L246:
	.align	2, 0
.L245:
	.word	.L242
	.align	2, 0
	.align	2, 0
.L242:
	.word	.L226
	.word	.L227
	.word	.L228
	.word	.L229
	.word	.L231
	.word	.L232
	.word	.L230
	.word	.L233
	.word	.L239
	.word	.L240
.L226:
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBgControlAttribute
	b	.L244
.L227:
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetBgControlAttribute
	b	.L244
.L228:
	add	r0, r4, #0
	mov	r1, #0x4
	bl	GetBgControlAttribute
	b	.L244
.L229:
	add	r0, r4, #0
	mov	r1, #0x5
	bl	GetBgControlAttribute
	b	.L244
.L230:
	add	r0, r4, #0
	mov	r1, #0x6
	bl	GetBgControlAttribute
	b	.L244
.L231:
	add	r0, r4, #0
	mov	r1, #0x7
	bl	GetBgControlAttribute
	b	.L244
.L232:
	add	r0, r4, #0
	mov	r1, #0x8
	bl	GetBgControlAttribute
	b	.L244
.L233:
	add	r0, r4, #0
	bl	GetBgType
	cmp	r0, #0
	beq	.L235	@cond_branch
	cmp	r0, #0x1
	beq	.L236	@cond_branch
	mov	r0, #0x0
	b	.L243
.L235:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x10
	b	.L243
.L236:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
	b	.L243
.L239:
	add	r0, r4, #0
	bl	GetBgType
.L244:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L243
.L240:
	ldr	r0, .L247
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	b	.L243
.L248:
	.align	2, 0
.L247:
	.word	sGpuBgConfigs2
.L241:
	ldr	r0, .L249
.L243:
	pop	{r4}
	pop	{r1}
	bx	r1
.L250:
	.align	2, 0
.L249:
	.word	0xffff
.Lfe26:
	.size	 GetBgAttribute,.Lfe26-GetBgAttribute
	.align	2, 0
	.globl	ChangeBgX
	.type	 ChangeBgX,function
	.thumb_func
ChangeBgX:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L253	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L252	@cond_branch
.L253:
	mov	r0, #0x1
	neg	r0, r0
	b	.L274
.L252:
	cmp	r5, #0x1
	beq	.L257	@cond_branch
	cmp	r5, #0x1
	ble	.L256	@cond_branch
	cmp	r5, #0x2
	beq	.L258	@cond_branch
.L256:
	ldr	r0, .L276
	lsl	r1, r4, #0x4
	add	r0, r0, #0x8
	add	r0, r1, r0
	str	r6, [r0]
	add	r5, r1, #0
	b	.L254
.L277:
	.align	2, 0
.L276:
	.word	sGpuBgConfigs2
.L257:
	ldr	r0, .L278
	lsl	r2, r4, #0x4
	add	r0, r0, #0x8
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r1, r1, r6
	b	.L275
.L279:
	.align	2, 0
.L278:
	.word	sGpuBgConfigs2
.L258:
	ldr	r0, .L280
	lsl	r2, r4, #0x4
	add	r0, r0, #0x8
	add	r0, r2, r0
	ldr	r1, [r0]
	sub	r1, r1, r6
.L275:
	str	r1, [r0]
	add	r5, r2, #0
.L254:
	bl	GetBgMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0x1
	beq	.L263	@cond_branch
	cmp	r4, #0x1
	bgt	.L273	@cond_branch
	cmp	r4, #0
	beq	.L262	@cond_branch
	b	.L261
.L281:
	.align	2, 0
.L280:
	.word	sGpuBgConfigs2
.L273:
	cmp	r4, #0x2
	beq	.L264	@cond_branch
	cmp	r4, #0x3
	beq	.L267	@cond_branch
	b	.L261
.L262:
	ldr	r0, .L282
	ldr	r0, [r0, #0x8]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x10
	bl	SetGpuReg
	b	.L261
.L283:
	.align	2, 0
.L282:
	.word	sGpuBgConfigs2
.L263:
	ldr	r0, .L284
	ldr	r0, [r0, #0x18]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x14
	bl	SetGpuReg
	b	.L261
.L285:
	.align	2, 0
.L284:
	.word	sGpuBgConfigs2
.L264:
	cmp	r0, #0
	bne	.L265	@cond_branch
	ldr	r0, .L286
	ldr	r0, [r0, #0x28]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x18
	bl	SetGpuReg
	b	.L261
.L287:
	.align	2, 0
.L286:
	.word	sGpuBgConfigs2
.L265:
	ldr	r0, .L288
	ldr	r0, [r0, #0x28]
	lsr	r1, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x2a
	bl	SetGpuReg
	mov	r0, #0x28
	add	r1, r4, #0
	bl	SetGpuReg
	b	.L261
.L289:
	.align	2, 0
.L288:
	.word	sGpuBgConfigs2
.L267:
	cmp	r0, #0
	bne	.L268	@cond_branch
	ldr	r0, .L290
	ldr	r0, [r0, #0x38]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x1c
	bl	SetGpuReg
	b	.L261
.L291:
	.align	2, 0
.L290:
	.word	sGpuBgConfigs2
.L268:
	cmp	r0, #0x2
	bne	.L261	@cond_branch
	ldr	r0, .L292
	ldr	r0, [r0, #0x38]
	lsr	r1, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x3a
	bl	SetGpuReg
	mov	r0, #0x38
	add	r1, r4, #0
	bl	SetGpuReg
.L261:
	ldr	r0, .L292
	add	r0, r0, #0x8
	add	r0, r5, r0
	ldr	r0, [r0]
.L274:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L293:
	.align	2, 0
.L292:
	.word	sGpuBgConfigs2
.Lfe27:
	.size	 ChangeBgX,.Lfe27-ChangeBgX
	.align	2, 0
	.globl	GetBgX
	.type	 GetBgX,function
	.thumb_func
GetBgX:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L296	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L296	@cond_branch
	ldr	r0, .L298
	lsl	r1, r4, #0x4
	add	r0, r0, #0x8
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L297
.L299:
	.align	2, 0
.L298:
	.word	sGpuBgConfigs2
.L296:
	mov	r0, #0x1
	neg	r0, r0
.L297:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 GetBgX,.Lfe28-GetBgX
	.align	2, 0
	.globl	ChangeBgY
	.type	 ChangeBgY,function
	.thumb_func
ChangeBgY:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L302	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L301	@cond_branch
.L302:
	mov	r0, #0x1
	neg	r0, r0
	b	.L323
.L301:
	cmp	r5, #0x1
	beq	.L306	@cond_branch
	cmp	r5, #0x1
	ble	.L305	@cond_branch
	cmp	r5, #0x2
	beq	.L307	@cond_branch
.L305:
	ldr	r0, .L325
	lsl	r1, r4, #0x4
	add	r0, r0, #0xc
	add	r0, r1, r0
	str	r6, [r0]
	add	r5, r1, #0
	b	.L303
.L326:
	.align	2, 0
.L325:
	.word	sGpuBgConfigs2
.L306:
	ldr	r0, .L327
	lsl	r2, r4, #0x4
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r1, r1, r6
	b	.L324
.L328:
	.align	2, 0
.L327:
	.word	sGpuBgConfigs2
.L307:
	ldr	r0, .L329
	lsl	r2, r4, #0x4
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r1, [r0]
	sub	r1, r1, r6
.L324:
	str	r1, [r0]
	add	r5, r2, #0
.L303:
	bl	GetBgMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0x1
	beq	.L312	@cond_branch
	cmp	r4, #0x1
	bgt	.L322	@cond_branch
	cmp	r4, #0
	beq	.L311	@cond_branch
	b	.L310
.L330:
	.align	2, 0
.L329:
	.word	sGpuBgConfigs2
.L322:
	cmp	r4, #0x2
	beq	.L313	@cond_branch
	cmp	r4, #0x3
	beq	.L316	@cond_branch
	b	.L310
.L311:
	ldr	r0, .L331
	ldr	r0, [r0, #0xc]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x12
	bl	SetGpuReg
	b	.L310
.L332:
	.align	2, 0
.L331:
	.word	sGpuBgConfigs2
.L312:
	ldr	r0, .L333
	ldr	r0, [r0, #0x1c]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x16
	bl	SetGpuReg
	b	.L310
.L334:
	.align	2, 0
.L333:
	.word	sGpuBgConfigs2
.L313:
	cmp	r0, #0
	bne	.L314	@cond_branch
	ldr	r0, .L335
	ldr	r0, [r0, #0x2c]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg
	b	.L310
.L336:
	.align	2, 0
.L335:
	.word	sGpuBgConfigs2
.L314:
	ldr	r0, .L337
	ldr	r0, [r0, #0x2c]
	lsr	r1, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x2e
	bl	SetGpuReg
	mov	r0, #0x2c
	add	r1, r4, #0
	bl	SetGpuReg
	b	.L310
.L338:
	.align	2, 0
.L337:
	.word	sGpuBgConfigs2
.L316:
	cmp	r0, #0
	bne	.L317	@cond_branch
	ldr	r0, .L339
	ldr	r0, [r0, #0x3c]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg
	b	.L310
.L340:
	.align	2, 0
.L339:
	.word	sGpuBgConfigs2
.L317:
	cmp	r0, #0x2
	bne	.L310	@cond_branch
	ldr	r0, .L341
	ldr	r0, [r0, #0x3c]
	lsr	r1, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x3e
	bl	SetGpuReg
	mov	r0, #0x3c
	add	r1, r4, #0
	bl	SetGpuReg
.L310:
	ldr	r0, .L341
	add	r0, r0, #0xc
	add	r0, r5, r0
	ldr	r0, [r0]
.L323:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L342:
	.align	2, 0
.L341:
	.word	sGpuBgConfigs2
.Lfe29:
	.size	 ChangeBgY,.Lfe29-ChangeBgY
	.align	2, 0
	.globl	GetBgY
	.type	 GetBgY,function
	.thumb_func
GetBgY:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L345	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L345	@cond_branch
	ldr	r0, .L347
	lsl	r1, r4, #0x4
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L346
.L348:
	.align	2, 0
.L347:
	.word	sGpuBgConfigs2
.L345:
	mov	r0, #0x1
	neg	r0, r0
.L346:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 GetBgY,.Lfe30-GetBgY
	.align	2, 0
	.globl	SetBgAffine
	.type	 SetBgAffine,function
	.thumb_func
SetBgAffine:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	ldr	r6, [sp, #0x30]
	ldr	r7, [sp, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	str	r4, [sp]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	str	r5, [sp, #0x4]
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	str	r6, [sp, #0x8]
	str	r7, [sp, #0xc]
	bl	SetBgAffineInternal
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 SetBgAffine,.Lfe31-SetBgAffine
	.align	2, 0
	.globl	AdjustBgMosaic
	.type	 AdjustBgMosaic,function
	.thumb_func
AdjustBgMosaic:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r0, #0x4c
	bl	GetGpuReg
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r1, #0xf
	mov	r3, #0xf
	and	r3, r3, r5
	lsr	r2, r0, #0x14
	and	r2, r2, r1
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r5, r5, r0
	cmp	r6, #0x6
	bhi	.L353	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L371
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L372:
	.align	2, 0
.L371:
	.word	.L368
	.align	2, 0
	.align	2, 0
.L368:
	.word	.L353
	.word	.L354
	.word	.L355
	.word	.L358
	.word	.L361
	.word	.L362
	.word	.L365
.L353:
	mov	r3, #0xf
	and	r3, r3, r4
	lsr	r2, r4, #0x4
	b	.L351
.L354:
	mov	r3, #0xf
	and	r3, r3, r4
	b	.L351
.L355:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r4
	cmp	r0, #0xf
	ble	.L356	@cond_branch
	mov	r3, #0xf
	b	.L351
.L356:
	add	r0, r3, r4
	b	.L369
.L358:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r4
	cmp	r0, #0
	bge	.L359	@cond_branch
	mov	r3, #0x0
	b	.L351
.L359:
	sub	r0, r3, r4
.L369:
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	b	.L351
.L361:
	mov	r2, #0xf
	and	r2, r2, r4
	b	.L351
.L362:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r4
	cmp	r0, #0xf
	ble	.L363	@cond_branch
	mov	r2, #0xf
	b	.L351
.L363:
	add	r0, r2, r4
	b	.L370
.L365:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r4
	cmp	r0, #0
	bge	.L366	@cond_branch
	mov	r2, #0x0
	b	.L351
.L366:
	sub	r0, r2, r4
.L370:
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L351:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0xc
	mov	r1, #0xf0
	and	r0, r0, r1
	orr	r5, r5, r0
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	orr	r5, r5, r0
	lsl	r0, r5, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x4c
	add	r1, r5, #0
	bl	SetGpuReg
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 AdjustBgMosaic,.Lfe32-AdjustBgMosaic
	.align	2, 0
	.globl	SetBgTilemapBuffer
	.type	 SetBgTilemapBuffer,function
	.thumb_func
SetBgTilemapBuffer:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L374	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L374	@cond_branch
	ldr	r0, .L375
	lsl	r1, r4, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	str	r5, [r1]
.L374:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	sGpuBgConfigs2
.Lfe33:
	.size	 SetBgTilemapBuffer,.Lfe33-SetBgTilemapBuffer
	.align	2, 0
	.globl	UnsetBgTilemapBuffer
	.type	 UnsetBgTilemapBuffer,function
	.thumb_func
UnsetBgTilemapBuffer:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L378	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L378	@cond_branch
	ldr	r0, .L379
	lsl	r1, r4, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	str	r5, [r1]
.L378:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L380:
	.align	2, 0
.L379:
	.word	sGpuBgConfigs2
.Lfe34:
	.size	 UnsetBgTilemapBuffer,.Lfe34-UnsetBgTilemapBuffer
	.align	2, 0
	.globl	GetBgTilemapBuffer
	.type	 GetBgTilemapBuffer,function
	.thumb_func
GetBgTilemapBuffer:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L383	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L383	@cond_branch
	ldr	r0, .L385
	lsl	r1, r4, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L384
.L386:
	.align	2, 0
.L385:
	.word	sGpuBgConfigs2
.L383:
	mov	r0, #0x0
.L384:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 GetBgTilemapBuffer,.Lfe35-GetBgTilemapBuffer
	.align	2, 0
	.globl	CopyToBgTilemapBuffer
	.type	 CopyToBgTilemapBuffer,function
	.thumb_func
CopyToBgTilemapBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r9, r4
	lsl	r7, r2, #0x10
	lsr	r6, r7, #0x10
	lsl	r3, r3, #0x10
	lsr	r5, r3, #0x10
	mov	r8, r5
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L388	@cond_branch
	add	r0, r4, #0
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	bne	.L388	@cond_branch
	cmp	r6, #0
	beq	.L389	@cond_branch
	ldr	r0, .L391
	lsl	r1, r4, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	lsl	r0, r5, #0x5
	ldr	r1, [r1]
	add	r1, r1, r0
	lsr	r2, r7, #0x11
	mov	r0, sl
	bl	CpuSet
	b	.L388
.L392:
	.align	2, 0
.L391:
	.word	sGpuBgConfigs2
.L389:
	ldr	r0, .L393
	mov	r2, r9
	lsl	r1, r2, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	mov	r2, r8
	lsl	r0, r2, #0x5
	ldr	r1, [r1]
	add	r1, r1, r0
	mov	r0, sl
	bl	LZ77UnCompWram
.L388:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L394:
	.align	2, 0
.L393:
	.word	sGpuBgConfigs2
.Lfe36:
	.size	 CopyToBgTilemapBuffer,.Lfe36-CopyToBgTilemapBuffer
	.align	2, 0
	.globl	CopyBgTilemapBufferToVram
	.type	 CopyBgTilemapBufferToVram,function
	.thumb_func
CopyBgTilemapBufferToVram:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L396	@cond_branch
	add	r0, r4, #0
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	bne	.L396	@cond_branch
	add	r0, r4, #0
	bl	GetBgType
	cmp	r0, #0
	beq	.L398	@cond_branch
	cmp	r0, #0x1
	beq	.L399	@cond_branch
	mov	r2, #0x0
	b	.L397
.L398:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x1b
	b	.L402
.L399:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x18
.L402:
	lsr	r2, r0, #0x10
.L397:
	ldr	r0, .L403
	lsl	r1, r4, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x2
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x0
	bl	LoadBgVram
.L396:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L404:
	.align	2, 0
.L403:
	.word	sGpuBgConfigs2
.Lfe37:
	.size	 CopyBgTilemapBufferToVram,.Lfe37-CopyBgTilemapBufferToVram
	.align	2, 0
	.globl	CopyToBgTilemapBufferRect
	.type	 CopyToBgTilemapBufferRect,function
	.thumb_func
CopyToBgTilemapBufferRect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r1
	ldr	r1, [sp, #0x24]
	ldr	r4, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r4, r4, #0x18
	lsr	r6, r4, #0x18
	add	r0, r5, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L406	@cond_branch
	add	r0, r5, #0
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	bne	.L406	@cond_branch
	add	r0, r5, #0
	bl	GetBgType
	cmp	r0, #0
	beq	.L408	@cond_branch
	cmp	r0, #0x1
	beq	.L419	@cond_branch
	b	.L406
.L408:
	mov	r4, r8
	add	r3, r7, #0
	add	r0, r3, r6
	cmp	r3, r0
	bge	.L406	@cond_branch
	mov	ip, r0
	lsl	r1, r5, #0x4
	ldr	r0, .L432
	add	r1, r1, r0
	mov	r8, r1
.L412:
	mov	r2, sl
	mov	r1, r9
	add	r0, r2, r1
	add	r7, r3, #0x1
	cmp	r2, r0
	bge	.L411	@cond_branch
	mov	r1, r8
	ldr	r6, [r1]
	lsl	r5, r3, #0x5
	add	r3, r0, #0
.L416:
	add	r0, r5, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r1, [r4]
	strh	r1, [r0]
	add	r4, r4, #0x2
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r3
	blt	.L416	@cond_branch
.L411:
	lsl	r0, r7, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, ip
	blt	.L412	@cond_branch
	b	.L406
.L433:
	.align	2, 0
.L432:
	.word	sGpuBgConfigs2+0x4
.L419:
	mov	r4, r8
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	add	r3, r7, #0
	add	r0, r3, r6
	cmp	r3, r0
	bge	.L406	@cond_branch
	mov	ip, r0
	lsl	r5, r5, #0x4
	mov	r8, r5
.L423:
	mov	r2, sl
	mov	r1, r9
	add	r0, r2, r1
	add	r7, r3, #0x1
	cmp	r2, r0
	bge	.L422	@cond_branch
	ldr	r6, .L434
	add	r6, r6, r8
	ldr	r1, [sp]
	mov	r5, r3
	mul	r5, r5, r1
	add	r3, r0, #0
.L427:
	ldr	r1, [r6]
	add	r0, r5, r2
	add	r1, r1, r0
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r3
	blt	.L427	@cond_branch
.L422:
	lsl	r0, r7, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, ip
	blt	.L423	@cond_branch
.L406:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	sGpuBgConfigs2+0x4
.Lfe38:
	.size	 CopyToBgTilemapBufferRect,.Lfe38-CopyToBgTilemapBufferRect
	.align	2, 0
	.globl	CopyToBgTilemapBufferRect_ChangePalette
	.type	 CopyToBgTilemapBufferRect_ChangePalette,function
	.thumb_func
CopyToBgTilemapBufferRect_ChangePalette:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x24
	ldr	r4, [sp, #0x34]
	ldr	r5, [sp, #0x38]
	ldr	r6, [sp, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r2, [sp, #0x8]
	str	r3, [sp, #0xc]
	str	r4, [sp, #0x10]
	str	r5, [sp, #0x14]
	str	r6, [sp, #0x18]
	mov	r2, #0x0
	str	r2, [sp, #0x1c]
	str	r2, [sp, #0x20]
	mov	r3, #0x0
	bl	CopyRectToBgTilemapBufferRect
	add	sp, sp, #0x24
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 CopyToBgTilemapBufferRect_ChangePalette,.Lfe39-CopyToBgTilemapBufferRect_ChangePalette
	.align	2, 0
	.globl	CopyRectToBgTilemapBufferRect
	.type	 CopyRectToBgTilemapBufferRect,function
	.thumb_func
CopyRectToBgTilemapBufferRect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x40
	str	r1, [sp, #0x8]
	ldr	r1, [sp, #0x60]
	ldr	r4, [sp, #0x68]
	ldr	r5, [sp, #0x6c]
	ldr	r6, [sp, #0x70]
	ldr	r7, [sp, #0x74]
	mov	r8, r7
	ldr	r7, [sp, #0x78]
	mov	r9, r7
	ldr	r7, [sp, #0x7c]
	mov	sl, r7
	ldr	r7, [sp, #0x80]
	mov	ip, r7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0xc]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x14]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x18]
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x1c]
	mov	r2, sl
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp, #0x20]
	mov	r0, ip
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x24]
	ldr	r0, [sp, #0x4]
	bl	IsInvalidBg32
	cmp	r0, #0
	beq	.LCB3608
	b	.L438	@long jump
.LCB3608:
	ldr	r0, [sp, #0x4]
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	beq	.LCB3613
	b	.L438	@long jump
.LCB3613:
	ldr	r0, [sp, #0x4]
	mov	r1, #0x4
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x30]
	ldr	r0, [sp, #0x4]
	mov	r1, #0x1
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x28]
	ldr	r0, [sp, #0x4]
	mov	r1, #0x2
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x2c]
	ldr	r0, [sp, #0x4]
	bl	GetBgType
	cmp	r0, #0
	beq	.L440	@cond_branch
	cmp	r0, #0x1
	beq	.L451	@cond_branch
	b	.L438
.L440:
	ldr	r1, [sp, #0x10]
	mov	r0, r1
	mul	r0, r0, r7
	ldr	r2, [sp, #0xc]
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	ldr	r1, [sp, #0x8]
	add	r6, r1, r0
	add	r0, r5, r4
	cmp	r5, r0
	blt	.LCB3665
	b	.L438	@long jump
.LCB3665:
	ldr	r2, [sp, #0x18]
	sub	r2, r7, r2
	str	r2, [sp, #0x34]
	str	r0, [sp, #0x38]
.L444:
	ldr	r4, [sp, #0x14]
	ldr	r7, [sp, #0x18]
	add	r0, r4, r7
	add	r1, r5, #0x1
	str	r1, [sp, #0x3c]
	cmp	r4, r0
	bge	.L446	@cond_branch
	ldr	r2, [sp, #0x4]
	lsl	r0, r2, #0x4
	ldr	r1, .L464
	add	r0, r0, r1
	mov	sl, r0
	ldr	r7, [sp, #0x20]
	lsl	r7, r7, #0x10
	mov	r9, r7
	ldr	r1, [sp, #0x24]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r8, r0
.L448:
	ldr	r2, [sp, #0x2c]
	str	r2, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	ldr	r2, [sp, #0x30]
	ldr	r3, [sp, #0x28]
	bl	GetTileMapIndexFromCoords
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	mov	r7, sl
	ldr	r1, [r7]
	add	r1, r1, r0
	mov	r0, r8
	str	r0, [sp]
	add	r0, r6, #0
	ldr	r2, [sp, #0x1c]
	mov	r7, r9
	asr	r3, r7, #0x10
	bl	CopyTileMapEntry
	add	r6, r6, #0x2
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r1, [sp, #0x14]
	ldr	r2, [sp, #0x18]
	add	r0, r1, r2
	cmp	r4, r0
	blt	.L448	@cond_branch
.L446:
	ldr	r5, [sp, #0x34]
	lsl	r0, r5, #0x1
	add	r6, r6, r0
	ldr	r7, [sp, #0x3c]
	lsl	r0, r7, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, [sp, #0x38]
	cmp	r5, r0
	blt	.L444	@cond_branch
	b	.L438
.L465:
	.align	2, 0
.L464:
	.word	sGpuBgConfigs2+0x4
.L451:
	ldr	r1, [sp, #0x10]
	mov	r0, r1
	mul	r0, r0, r7
	ldr	r2, [sp, #0xc]
	add	r0, r0, r2
	ldr	r1, [sp, #0x8]
	add	r6, r1, r0
	ldr	r0, [sp, #0x4]
	mov	r1, #0x1
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	add	r0, r5, r4
	cmp	r5, r0
	bge	.L438	@cond_branch
	ldr	r2, [sp, #0x18]
	sub	r2, r7, r2
	str	r2, [sp, #0x34]
	str	r0, [sp, #0x38]
	ldr	r7, .L466
	mov	sl, r7
	ldr	r0, [sp, #0x4]
	lsl	r0, r0, #0x4
	mov	r8, r0
.L455:
	ldr	r4, [sp, #0x14]
	ldr	r1, [sp, #0x18]
	add	r0, r4, r1
	add	r2, r5, #0x1
	str	r2, [sp, #0x3c]
	cmp	r4, r0
	bge	.L457	@cond_branch
	mov	r3, r8
	add	r3, r3, sl
	mov	r7, r9
	mul	r7, r7, r5
	mov	ip, r7
	add	r2, r0, #0
.L459:
	ldr	r1, [r3]
	mov	r5, ip
	add	r0, r5, r4
	add	r1, r1, r0
	ldrb	r0, [r6]
	ldr	r7, [sp, #0x20]
	add	r0, r0, r7
	strb	r0, [r1]
	add	r6, r6, #0x1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r2
	blt	.L459	@cond_branch
.L457:
	ldr	r0, [sp, #0x34]
	add	r6, r6, r0
	ldr	r1, [sp, #0x3c]
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, [sp, #0x38]
	cmp	r5, r2
	blt	.L455	@cond_branch
.L438:
	add	sp, sp, #0x40
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L467:
	.align	2, 0
.L466:
	.word	sGpuBgConfigs2+0x4
.Lfe40:
	.size	 CopyRectToBgTilemapBufferRect,.Lfe40-CopyRectToBgTilemapBufferRect
	.align	2, 0
	.globl	FillBgTilemapBufferRect_Palette0
	.type	 FillBgTilemapBufferRect_Palette0,function
	.thumb_func
FillBgTilemapBufferRect_Palette0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x24]
	ldr	r5, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r9, r4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L469	@cond_branch
	add	r0, r6, #0
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	bne	.L469	@cond_branch
	add	r0, r6, #0
	bl	GetBgType
	cmp	r0, #0
	beq	.L471	@cond_branch
	cmp	r0, #0x1
	beq	.L482	@cond_branch
	b	.L469
.L471:
	add	r3, r7, #0
	add	r5, r3, r5
	cmp	r3, r5
	bge	.L469	@cond_branch
	add	r7, r5, #0
	lsl	r1, r6, #0x4
	ldr	r0, .L495
	add	r1, r1, r0
	mov	ip, r1
.L475:
	mov	r2, sl
	mov	r1, r9
	add	r0, r2, r1
	add	r6, r3, #0x1
	cmp	r2, r0
	bge	.L474	@cond_branch
	mov	r5, ip
	ldr	r4, [r5]
	lsl	r3, r3, #0x5
	add	r1, r0, #0
.L479:
	add	r0, r3, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r5, r8
	strh	r5, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r1
	blt	.L479	@cond_branch
.L474:
	lsl	r0, r6, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r7
	blt	.L475	@cond_branch
	b	.L469
.L496:
	.align	2, 0
.L495:
	.word	sGpuBgConfigs2+0x4
.L482:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	add	r3, r7, #0
	add	r5, r3, r5
	cmp	r3, r5
	bge	.L469	@cond_branch
	add	r7, r5, #0
	lsl	r6, r6, #0x4
	mov	ip, r6
.L486:
	mov	r2, sl
	mov	r1, r9
	add	r0, r2, r1
	add	r6, r3, #0x1
	cmp	r2, r0
	bge	.L485	@cond_branch
	ldr	r5, .L497
	add	r5, r5, ip
	ldr	r1, [sp]
	mov	r4, r3
	mul	r4, r4, r1
	add	r3, r0, #0
.L490:
	ldr	r0, [r5]
	add	r1, r4, r2
	add	r0, r0, r1
	mov	r1, r8
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r3
	blt	.L490	@cond_branch
.L485:
	lsl	r0, r6, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r7
	blt	.L486	@cond_branch
.L469:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L498:
	.align	2, 0
.L497:
	.word	sGpuBgConfigs2+0x4
.Lfe41:
	.size	 FillBgTilemapBufferRect_Palette0,.Lfe41-FillBgTilemapBufferRect_Palette0
	.align	2, 0
	.globl	FillBgTilemapBufferRect
	.type	 FillBgTilemapBufferRect,function
	.thumb_func
FillBgTilemapBufferRect:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x20]
	ldr	r5, [sp, #0x24]
	ldr	r6, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r4, #0x0
	str	r4, [sp, #0xc]
	bl	WriteSequenceToBgTilemapBuffer
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 FillBgTilemapBufferRect,.Lfe42-FillBgTilemapBufferRect
	.align	2, 0
	.globl	WriteSequenceToBgTilemapBuffer
	.type	 WriteSequenceToBgTilemapBuffer,function
	.thumb_func
WriteSequenceToBgTilemapBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	ldr	r4, [sp, #0x4c]
	ldr	r5, [sp, #0x50]
	ldr	r6, [sp, #0x54]
	ldr	r7, [sp, #0x58]
	mov	r8, r7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	add	r0, sp, #0x4
	strh	r1, [r0]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x8]
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	lsl	r5, r5, #0x18
	lsr	r4, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0xc]
	mov	r0, r8
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x10]
	mov	r0, r9
	bl	IsInvalidBg32
	cmp	r0, #0
	beq	.LCB4107
	b	.L501	@long jump
.LCB4107:
	mov	r0, r9
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	beq	.LCB4112
	b	.L501	@long jump
.LCB4112:
	mov	r0, r9
	mov	r1, #0x4
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x1c]
	mov	r0, r9
	mov	r1, #0x1
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x14]
	mov	r0, r9
	mov	r1, #0x2
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x18]
	mov	r0, r9
	bl	GetBgType
	cmp	r0, #0
	beq	.L503	@cond_branch
	cmp	r0, #0x1
	beq	.L514	@cond_branch
	b	.L501
.L503:
	add	r5, r7, #0
	add	r0, r5, r4
	cmp	r5, r0
	bge	.L501	@cond_branch
	str	r0, [sp, #0x24]
	add	r7, sp, #0x4
.L507:
	ldr	r4, [sp, #0x8]
	mov	r1, sl
	add	r0, r4, r1
	add	r2, r5, #0x1
	mov	r8, r2
	cmp	r4, r0
	bge	.L506	@cond_branch
	mov	r3, r9
	lsl	r1, r3, #0x4
	ldr	r0, .L527
	add	r6, r1, r0
.L511:
	ldr	r0, [sp, #0x18]
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	ldr	r2, [sp, #0x1c]
	ldr	r3, [sp, #0x14]
	bl	GetTileMapIndexFromCoords
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	ldr	r1, [r6]
	add	r1, r1, r0
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, sp, #0x4
	ldr	r2, [sp, #0xc]
	mov	r3, #0x0
	bl	CopyTileMapEntry
	ldrh	r0, [r7]
	mov	r2, #0xfc
	lsl	r2, r2, #0x8
	add	r1, r2, #0
	add	r2, r0, #0
	and	r2, r2, r1
	ldr	r3, [sp, #0x10]
	add	r0, r0, r3
	ldr	r3, .L527+0x4
	add	r1, r3, #0
	and	r0, r0, r1
	add	r2, r2, r0
	strh	r2, [r7]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, [sp, #0x8]
	add	r0, r0, sl
	cmp	r4, r0
	blt	.L511	@cond_branch
.L506:
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, [sp, #0x24]
	cmp	r5, r2
	blt	.L507	@cond_branch
	b	.L501
.L528:
	.align	2, 0
.L527:
	.word	sGpuBgConfigs2+0x4
	.word	0x3ff
.L514:
	mov	r0, r9
	mov	r1, #0x1
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x20]
	add	r5, r7, #0
	add	r0, r5, r4
	cmp	r5, r0
	bge	.L501	@cond_branch
	str	r0, [sp, #0x24]
	mov	r3, r9
	lsl	r3, r3, #0x4
	mov	ip, r3
.L518:
	ldr	r4, [sp, #0x8]
	mov	r7, sl
	add	r0, r4, r7
	add	r1, r5, #0x1
	mov	r8, r1
	cmp	r4, r0
	bge	.L517	@cond_branch
	ldr	r2, .L529
	add	r2, r2, ip
	str	r2, [sp, #0x28]
	ldr	r7, [sp, #0x20]
	mov	r3, r5
	mul	r3, r3, r7
	add	r2, sp, #0x4
	mov	r1, #0xfc
	lsl	r1, r1, #0x8
	mov	r9, r1
	ldr	r7, .L529+0x4
	add	r5, r7, #0
	add	r6, r0, #0
.L522:
	ldr	r0, [sp, #0x28]
	ldr	r1, [r0]
	add	r0, r3, r4
	add	r1, r1, r0
	ldrh	r0, [r2]
	strb	r0, [r1]
	ldrh	r0, [r2]
	mov	r1, r9
	and	r1, r1, r0
	ldr	r7, [sp, #0x10]
	add	r0, r0, r7
	and	r0, r0, r5
	add	r1, r1, r0
	strh	r1, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r6
	blt	.L522	@cond_branch
.L517:
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, [sp, #0x24]
	cmp	r5, r2
	blt	.L518	@cond_branch
.L501:
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L530:
	.align	2, 0
.L529:
	.word	sGpuBgConfigs2+0x4
	.word	0x3ff
.Lfe43:
	.size	 WriteSequenceToBgTilemapBuffer,.Lfe43-WriteSequenceToBgTilemapBuffer
	.align	2, 0
	.globl	GetBgMetricTextMode
	.type	 GetBgMetricTextMode,function
	.thumb_func
GetBgMetricTextMode:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r5, r4, #0
	mov	r1, #0x4
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0x1
	beq	.L542	@cond_branch
	cmp	r4, #0x1
	bgt	.L561	@cond_branch
	cmp	r4, #0
	beq	.L533	@cond_branch
	b	.L532
.L561:
	cmp	r5, #0x2
	beq	.L551	@cond_branch
	b	.L532
.L533:
	cmp	r0, #0x2
	bgt	.L541	@cond_branch
	cmp	r0, #0x1
	bge	.L564	@cond_branch
.L565:
	cmp	r0, #0
	beq	.L563	@cond_branch
	b	.L532
.L541:
	cmp	r0, #0x3
	bne	.L532	@cond_branch
	mov	r0, #0x4
	b	.L562
.L542:
	cmp	r0, #0x1
	beq	.L564	@cond_branch
	cmp	r0, #0x1
	ble	.L565	@cond_branch
	cmp	r0, #0x2
	beq	.L563	@cond_branch
	cmp	r0, #0x3
	bne	.L532	@cond_branch
	b	.L564
.L551:
	cmp	r0, #0
	blt	.L532	@cond_branch
	cmp	r0, #0x1
	bgt	.L554	@cond_branch
.L563:
	mov	r0, #0x1
	b	.L562
.L554:
	cmp	r0, #0x3
	bgt	.L532	@cond_branch
.L564:
	mov	r0, #0x2
	b	.L562
.L532:
	mov	r0, #0x0
.L562:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 GetBgMetricTextMode,.Lfe44-GetBgMetricTextMode
	.align	2, 0
	.globl	GetBgMetricAffineMode
	.type	 GetBgMetricAffineMode,function
	.thumb_func
GetBgMetricAffineMode:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	mov	r1, #0x4
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r0, r1, #0
	cmp	r4, #0
	beq	.L568	@cond_branch
	cmp	r4, #0
	blt	.L567	@cond_branch
	cmp	r4, #0x2
	bgt	.L567	@cond_branch
	mov	r0, #0x10
	lsl	r0, r0, r1
	b	.L581
.L568:
	cmp	r1, #0x1
	beq	.L571	@cond_branch
	cmp	r1, #0x1
	bgt	.L576	@cond_branch
	cmp	r1, #0
	beq	.L570	@cond_branch
	b	.L567
.L576:
	cmp	r0, #0x2
	beq	.L572	@cond_branch
	cmp	r0, #0x3
	beq	.L573	@cond_branch
	b	.L567
.L570:
	mov	r0, #0x1
	b	.L581
.L571:
	mov	r0, #0x4
	b	.L581
.L572:
	mov	r0, #0x10
	b	.L581
.L573:
	mov	r0, #0x40
	b	.L581
.L567:
	mov	r0, #0x0
.L581:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 GetBgMetricAffineMode,.Lfe45-GetBgMetricAffineMode
	.align	2, 0
	.globl	GetTileMapIndexFromCoords
	.type	 GetTileMapIndexFromCoords,function
	.thumb_func
GetTileMapIndexFromCoords:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [sp, #0x8]
	sub	r3, r3, #0x1
	and	r4, r4, r3
	sub	r0, r0, #0x1
	and	r1, r1, r0
	cmp	r2, #0x1
	beq	.L588	@cond_branch
	cmp	r2, #0x1
	ble	.L583	@cond_branch
	cmp	r2, #0x2
	beq	.L583	@cond_branch
	cmp	r2, #0x3
	bne	.L583	@cond_branch
	cmp	r1, #0x1f
	ble	.L588	@cond_branch
	add	r1, r1, #0x20
.L588:
	cmp	r4, #0x1f
	ble	.L583	@cond_branch
	sub	r4, r4, #0x20
	add	r1, r1, #0x20
.L583:
	lsl	r0, r1, #0x5
	add	r0, r0, r4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 GetTileMapIndexFromCoords,.Lfe46-GetTileMapIndexFromCoords
	.align	2, 0
	.globl	CopyTileMapEntry
	.type	 CopyTileMapEntry,function
	.thumb_func
CopyTileMapEntry:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	ldr	r5, [sp, #0x10]
	cmp	r2, #0x10
	beq	.L596	@cond_branch
	cmp	r2, #0x10
	bgt	.L598	@cond_branch
	cmp	r2, #0
	blt	.L598	@cond_branch
	ldrh	r0, [r4]
	add	r0, r0, r3
	ldr	r3, .L602
	add	r1, r3, #0
	and	r0, r0, r1
	add	r1, r2, r5
	lsl	r1, r1, #0xc
	b	.L600
.L603:
	.align	2, 0
.L602:
	.word	0xfff
.L596:
	ldrh	r1, [r6]
	mov	r0, #0xfc
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	lsl	r2, r5, #0xc
	add	r2, r1, r2
	ldrh	r0, [r4]
	add	r0, r0, r3
	ldr	r3, .L604
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	b	.L601
.L605:
	.align	2, 0
.L604:
	.word	0x3ff
.L598:
	ldrh	r0, [r4]
	add	r0, r0, r3
	lsl	r1, r5, #0xc
.L600:
	add	r0, r0, r1
.L601:
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	strh	r1, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 CopyTileMapEntry,.Lfe47-CopyTileMapEntry
	.align	2, 0
	.globl	GetBgType
	.type	 GetBgType,function
	.thumb_func
GetBgType:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	GetBgMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0x2
	beq	.L615	@cond_branch
	cmp	r4, #0x2
	ble	.L630	@cond_branch
	cmp	r4, #0x3
	beq	.L622	@cond_branch
	b	.L607
.L630:
	cmp	r5, #0
	blt	.L607	@cond_branch
	cmp	r0, #0x1
	bgt	.L607	@cond_branch
	cmp	r0, #0
	blt	.L607	@cond_branch
.L632:
	mov	r0, #0x0
	b	.L631
.L615:
	cmp	r0, #0
	beq	.L632	@cond_branch
	cmp	r0, #0
	blt	.L607	@cond_branch
	cmp	r0, #0x2
	bgt	.L607	@cond_branch
.L633:
	mov	r0, #0x1
	b	.L631
.L622:
	cmp	r0, #0
	beq	.L632	@cond_branch
	cmp	r0, #0x2
	beq	.L633	@cond_branch
.L607:
	ldr	r0, .L634
.L631:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L635:
	.align	2, 0
.L634:
	.word	0xffff
.Lfe48:
	.size	 GetBgType,.Lfe48-GetBgType
	.align	2, 0
	.globl	IsInvalidBg32
	.type	 IsInvalidBg32,function
	.thumb_func
IsInvalidBg32:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L637	@cond_branch
	mov	r0, #0x0
	b	.L638
.L637:
	mov	r0, #0x1
.L638:
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 IsInvalidBg32,.Lfe49-IsInvalidBg32
	.align	2, 0
	.globl	IsTileMapOutsideWram
	.type	 IsTileMapOutsideWram,function
	.thumb_func
IsTileMapOutsideWram:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L643
	lsr	r0, r0, #0x14
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L643+0x4
	cmp	r1, r0
	bhi	.L641	@cond_branch
	cmp	r1, #0
	beq	.L641	@cond_branch
	mov	r0, #0x0
	b	.L642
.L644:
	.align	2, 0
.L643:
	.word	sGpuBgConfigs2
	.word	0x3008000
.L641:
	mov	r0, #0x1
.L642:
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 IsTileMapOutsideWram,.Lfe50-IsTileMapOutsideWram
	.comm	gWindowTileAutoAllocEnabled, 4	@ 4

	.lcomm	sGpuBgConfigs,20

	.lcomm	sGpuBgConfigs2,64

	.lcomm	sDmaBusyBitfield,16

	.lcomm	gpu_tile_allocation_map_bg,256
.text
	.align	2, 0 @ Don't pad with nop

