@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sClearSaveDataState,object
	.size	 sClearSaveDataState,4
sClearSaveDataState:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,4
sBgTemplates:
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sWindowTemplates,object
sWindowTemplates:
	.byte	0x0
	.byte	0x3
	.byte	0x5
	.byte	0x6
	.byte	0x4
	.byte	0xf
	.short	0xa
	.byte	0x0
	.byte	0x3
	.byte	0xf
	.byte	0x17
	.byte	0x4
	.byte	0xf
	.short	0x22
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates,24
	.type	 sTextColor,object
sTextColor:
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.size	 sTextColor,3
.text
	.align	2, 0
	.type	 CB2_RunClearSaveDataScreen,function
	.thumb_func
CB2_RunClearSaveDataScreen:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 CB2_RunClearSaveDataScreen,.Lfe1-CB2_RunClearSaveDataScreen
	.align	2, 0
	.type	 VBlankCB_WaitYesNo,function
	.thumb_func
VBlankCB_WaitYesNo:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 VBlankCB_WaitYesNo,.Lfe2-VBlankCB_WaitYesNo
	.align	2, 0
	.globl	CB2_SaveClearScreen_Init
	.type	 CB2_SaveClearScreen_Init,function
	.thumb_func
CB2_SaveClearScreen_Init:
	push	{r4, lr}
	ldr	r4, .L7
	mov	r0, #0x4
	bl	AllocZeroed
	str	r0, [r4]
	mov	r1, #0x0
	strb	r1, [r0, #0x1]
	ldr	r0, [r4]
	strb	r1, [r0]
	ldr	r0, [r4]
	strb	r1, [r0, #0x2]
	bl	CB2_Sub_SaveClearScreen_Init
	ldr	r0, .L7+0x4
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L7+0x8
	bl	SetMainCallback2
	pop	{r4}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	sClearSaveDataState
	.word	Task_DrawClearSaveDataScreen
	.word	CB2_RunClearSaveDataScreen
.Lfe3:
	.size	 CB2_SaveClearScreen_Init,.Lfe3-CB2_SaveClearScreen_Init
	.align	2, 0
	.type	 Task_DrawClearSaveDataScreen,function
	.thumb_func
Task_DrawClearSaveDataScreen:
	push	{r4, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L20
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x5
	bhi	.L18	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L20+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L21:
	.align	2, 0
.L20:
	.word	sClearSaveDataState
	.word	.L19
	.align	2, 0
	.align	2, 0
.L19:
	.word	.L11
	.word	.L12
	.word	.L14
	.word	.L15
	.word	.L16
	.word	.L17
.L11:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L10
.L12:
	ldr	r0, .L22
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L9	@cond_branch
	mov	r0, #0x0
	bl	SetVBlankCallback
	b	.L10
.L23:
	.align	2, 0
.L22:
	.word	gPaletteFade
.L14:
	bl	SaveClearScreen_GpuInit
	b	.L10
.L15:
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0xf0
	bl	LoadStdWindowGfx
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0xf0
	bl	LoadStdWindowGfx
	b	.L10
.L16:
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0xf
	bl	DrawStdFrameWithCustomTileAndPalette
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	ldr	r0, .L24
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	ldr	r0, .L24+0x4
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x3
	bl	AddTextPrinterParameterized4
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L10
.L25:
	.align	2, 0
.L24:
	.word	sTextColor
	.word	gText_ClearAllSaveData
.L17:
	ldr	r0, .L26
	mov	r2, #0x1
	str	r2, [sp]
	mov	r1, #0xf
	str	r1, [sp, #0x4]
	str	r2, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	CreateYesNoMenu
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	b	.L10
.L27:
	.align	2, 0
.L26:
	.word	sWindowTemplates
.L18:
	ldr	r0, .L28
	str	r0, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L28+0x4
	bl	SetVBlankCallback
	ldr	r1, .L28+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L28+0xc
	str	r1, [r0]
.L10:
	ldr	r0, .L28+0x10
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
.L9:
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	0xffff
	.word	VBlankCB_WaitYesNo
	.word	gTasks
	.word	Task_HandleYesNoMenu
	.word	sClearSaveDataState
.Lfe4:
	.size	 Task_DrawClearSaveDataScreen,.Lfe4-Task_DrawClearSaveDataScreen
	.align	2, 0
	.type	 Task_HandleYesNoMenu,function
	.thumb_func
Task_HandleYesNoMenu:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r5, .L41
	ldr	r0, [r5]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L31	@cond_branch
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x1
	neg	r0, r0
	cmp	r4, r0
	beq	.L34	@cond_branch
	cmp	r4, r0
	ble	.L30	@cond_branch
	cmp	r4, #0
	beq	.L35	@cond_branch
	cmp	r4, #0x1
	bne	.L30	@cond_branch
.L34:
	mov	r0, #0x5
	bl	PlaySE
	b	.L32
.L42:
	.align	2, 0
.L41:
	.word	sClearSaveDataState
.L35:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	ldr	r0, .L43
	str	r0, [sp, #0x8]
	str	r4, [sp, #0xc]
	ldr	r0, .L43+0x4
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x3
	bl	AddTextPrinterParameterized4
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	bl	ClearSaveData
.L32:
	ldr	r1, [r5]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L30
.L44:
	.align	2, 0
.L43:
	.word	sTextColor
	.word	gText_ClearingData
.L31:
	add	r0, r1, #0
	bl	Task_CleanUpAndSoftReset
.L30:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 Task_HandleYesNoMenu,.Lfe5-Task_HandleYesNoMenu
	.align	2, 0
	.type	 Task_CleanUpAndSoftReset,function
	.thumb_func
Task_CleanUpAndSoftReset:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L52
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L47	@cond_branch
	cmp	r0, #0x1
	beq	.L48	@cond_branch
	b	.L46
.L53:
	.align	2, 0
.L52:
	.word	sClearSaveDataState
.L47:
	ldr	r0, .L54
	str	r0, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x2]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
	b	.L46
.L55:
	.align	2, 0
.L54:
	.word	0xffff
.L48:
	ldr	r0, .L56
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L46	@cond_branch
	bl	DestroyYesNoMenu
	add	r0, r6, #0
	bl	DestroyTask
	bl	FreeAllWindowBuffers
	ldr	r0, [r5]
	bl	Free
	str	r4, [r5]
	bl	DoSoftReset
.L46:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	gPaletteFade
.Lfe6:
	.size	 Task_CleanUpAndSoftReset,.Lfe6-Task_CleanUpAndSoftReset
	.align	2, 0
	.type	 CB2_Sub_SaveClearScreen_Init,function
	.thumb_func
CB2_Sub_SaveClearScreen_Init:
	push	{lr}
	bl	ResetSpriteData
	bl	ResetPaletteFade
	bl	ResetTasks
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 CB2_Sub_SaveClearScreen_Init,.Lfe7-CB2_Sub_SaveClearScreen_Init
	.align	2, 0
	.type	 SaveClearScreen_GpuInit,function
	.thumb_func
SaveClearScreen_GpuInit:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r3, #0xc0
	lsl	r3, r3, #0x13
	mov	r4, #0xc0
	lsl	r4, r4, #0x9
	add	r0, sp, #0x4
	mov	r8, r0
	mov	r2, sp
	mov	r6, #0x0
	ldr	r1, .L65
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	ldr	r7, .L65+0x4
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	mov	ip, r0
.L62:
	strh	r6, [r2]
	mov	r0, sp
	str	r0, [r1]
	str	r3, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r3, r3, r5
	sub	r4, r4, r5
	cmp	r4, r5
	bhi	.L62	@cond_branch
	strh	r6, [r2]
	mov	r2, sp
	str	r2, [r1]
	str	r3, [r1, #0x4]
	lsr	r0, r4, #0x1
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r2, .L65
	mov	r1, r8
	str	r1, [r2]
	str	r0, [r2, #0x4]
	lsr	r0, r3, #0x2
	mov	r1, #0x85
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	mov	r0, sp
	strh	r4, [r0]
	str	r0, [r2]
	str	r1, [r2, #0x4]
	lsr	r3, r3, #0x1
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	str	r3, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L65+0x8
	mov	r0, #0x0
	mov	r2, #0x1
	bl	InitBgsFromTemplates
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r0, .L65+0xc
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	0x40000d4
	.word	-0x7efff800
	.word	sBgTemplates
	.word	sWindowTemplates
.Lfe8:
	.size	 SaveClearScreen_GpuInit,.Lfe8-SaveClearScreen_GpuInit
.text
	.align	2, 0 @ Don't pad with nop

