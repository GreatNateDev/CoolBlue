@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sOamWork,object
	.size	 sOamWork,4
sOamWork:
	.word	0x0
	.section .rodata
	.type	 sTilesPerImage,object
	.size	 sTilesPerImage,16
sTilesPerImage:
	.byte	0x1
	.byte	0x4
	.byte	0x10
	.byte	0x40
	.byte	0x2
	.byte	0x4
	.byte	0x8
	.byte	0x20
	.byte	0x2
	.byte	0x4
	.byte	0x8
	.byte	0x20
	.space	4
	.globl	gMinigameDigits_Pal
	.align	1, 0
	.type	 gMinigameDigits_Pal,object
gMinigameDigits_Pal:
	.short	0x0
	.short	0x0
	.short	0x6739
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gMinigameDigits_Pal,32
	.globl	gMinigameDigits_Gfx
	.align	2, 0
	.type	 gMinigameDigits_Gfx,object
gMinigameDigits_Gfx:
	.word	0x16010
	.word	0x20
	.word	0x211101
	.word	0x11022210
	.word	0x10021102
	.word	0x12031021
	.word	0x22102100
	.word	0x2211120
	.word	0x22222200
	.word	0x10001e20
	.word	0x232021
	.word	0x3001270
	.word	0x3000b10
	.word	0x21111110
	.word	0x30222030
	.word	0x20b0020
	.word	0x122211
	.word	0x11022221
	.word	0x21111021
	.word	0x200224f
	.word	0x1f001100
	.word	0x1f501e00
	.word	0x11622b00
	.word	0x53101400
	.word	0x112112
	.word	0x11141240
	.word	0x3f002211
	.word	0x115f3002
	.word	0x3000fb02
	.word	0x1207d20
	.word	0x2f003b20
	.word	0x1f3000
	.word	0x5f00ee0f
	.word	0x7005d00
	.word	0x403ff022
	.word	0x1f207f
	.word	0x208710fb
	.word	0x101f80c3
	.word	0x229f404f
	.word	0x6b003a00
	.word	0x5a00ff
	.word	0x605e4072
	.word	-0xfccef41
	.word	0x401f703f
	.word	-0x34ff03e9
	.word	-0x406fdeff
	.word	-0x60cffec0
	.word	0x13b0
	.size	 gMinigameDigits_Gfx,192
	.align	2, 0
	.type	 sUnusedMinigameDigits_Gfx,object
sUnusedMinigameDigits_Gfx:
	.word	0x2c010
	.word	-0x3fffffe0
	.word	0x211001
	.word	0x12002100
	.word	0x221002
	.word	-0x6ffdefdf
	.word	0x12003b0
	.word	0x21121500
	.word	0x20300002
	.word	0x7036e022
	.word	0x23f
	.word	0x300ba11
	.word	0x10030012
	.word	0x1103d00b
	.word	-0x7dda100
	.word	0x7ff03ff0
	.word	0x73006f00
	.word	0x223000
	.word	0x225810
	.word	0x6000209
	.word	0x11111e00
	.word	0x22203221
	.word	0x16040f0
	.word	0x3b001111
	.word	0x3b40d222
	.word	0x100300
	.word	0x7022208c
	.word	0xbf11c3
	.word	0x4f00224f
	.word	0x405039f0
	.word	-0x43ff9800
	.word	0xcd0310
	.word	0x10351087
	.word	0x20030022
	.word	-0x7eefed89
	.word	0x3b00ff
	.word	0x3038f05d
	.word	0x2700be
	.word	0x1031007f
	.word	0x14a0b
	.word	0x500212b3
	.word	0xd00108b
	.word	0x117f20
	.word	-0x1f410f38
	.word	0x403f00bf
	.word	-0xff09fbd
	.word	0x1f0ffbf
	.word	-0x4cfe0af
	.word	0x35110320
	.word	0xe507300
	.word	-0xf01fce0
	.word	0x307ff07f
	.word	-0xff02f91
	.word	-0x3fc00f81
	.word	0xf9212f
	.word	-0xf00bfd1
	.word	-0x2ffe0fc1
	.word	0x102114e
	.word	0x2ff0c04e
	.word	0x140
	.size	 sUnusedMinigameDigits_Gfx,240
.text
	.align	2, 0
	.globl	DigitObjUtil_Init
	.type	 DigitObjUtil_Init,function
	.thumb_func
DigitObjUtil_Init:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r5, .L14
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L5	@cond_branch
	bl	DigitObjUtil_Free
.L5:
	mov	r0, #0x8
	bl	Alloc
	str	r0, [r5]
	cmp	r0, #0
	bne	.L6	@cond_branch
	mov	r0, #0x0
	b	.L13
.L15:
	.align	2, 0
.L14:
	.word	sOamWork
.L6:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	bl	Alloc
	ldr	r1, [r5]
	str	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L7	@cond_branch
	add	r0, r1, #0
	bl	Free
	mov	r0, #0x0
	b	.L13
.L7:
	str	r4, [r1]
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L9	@cond_branch
	mov	r7, #0x0
	mov	r6, #0xff
	mov	r2, #0x0
.L11:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r2, r0
	strb	r7, [r0]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r2, r1
	ldrb	r0, [r1, #0x1]
	orr	r0, r0, r6
	strb	r0, [r1, #0x1]
	add	r2, r2, #0x1c
	add	r3, r3, #0x1
	cmp	r3, r4
	bcc	.L11	@cond_branch
.L9:
	mov	r0, #0x1
.L13:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 DigitObjUtil_Init,.Lfe1-DigitObjUtil_Init
	.align	2, 0
	.globl	DigitObjUtil_Free
	.type	 DigitObjUtil_Free,function
	.thumb_func
DigitObjUtil_Free:
	push	{r4, r5, lr}
	ldr	r2, .L24
	ldr	r1, [r2]
	cmp	r1, #0
	beq	.L17	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L18	@cond_branch
	mov	r4, #0x0
	ldr	r0, [r1]
	cmp	r4, r0
	bcs	.L20	@cond_branch
	add	r5, r2, #0
.L22:
	add	r0, r4, #0
	bl	DigitObjUtil_DeletePrinter
	add	r4, r4, #0x1
	ldr	r0, [r5]
	ldr	r0, [r0]
	cmp	r4, r0
	bcc	.L22	@cond_branch
.L20:
	ldr	r0, .L24
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	bl	Free
.L18:
	ldr	r4, .L24
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L17:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	sOamWork
.Lfe2:
	.size	 DigitObjUtil_Free,.Lfe2-DigitObjUtil_Free
	.align	2, 0
	.globl	DigitObjUtil_CreatePrinter
	.type	 DigitObjUtil_CreatePrinter,function
	.thumb_func
DigitObjUtil_CreatePrinter:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r8, r0
	mov	sl, r1
	add	r5, r2, #0
	ldr	r6, .L43
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldr	r1, [r0, #0x4]
	mov	r0, r8
	lsl	r2, r0, #0x3
	sub	r0, r2, r0
	lsl	r4, r0, #0x2
	add	r1, r4, r1
	ldrb	r0, [r1]
	mov	r9, r2
	cmp	r0, #0
	bne	.L41	@cond_branch
	ldrb	r0, [r5, #0x1]
	bl	GetFirstOamId
	ldr	r1, [r6]
	ldr	r1, [r1, #0x4]
	add	r1, r4, r1
	strb	r0, [r1, #0x1]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0xff
	beq	.L41	@cond_branch
	ldr	r0, [r5, #0x8]
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	ldr	r2, [r6]
	ldr	r1, [r2, #0x4]
	add	r1, r4, r1
	strh	r0, [r1, #0xa]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldrh	r1, [r0, #0xa]
	ldr	r7, .L43+0x4
	lsr	r0, r7, #0x10
	cmp	r1, r0
	bne	.L30	@cond_branch
	ldr	r2, [r5, #0x8]
	ldrh	r0, [r2, #0x4]
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L31	@cond_branch
	add	r0, r1, #0
	bl	LoadSpriteSheet
	b	.L42
.L44:
	.align	2, 0
.L43:
	.word	sOamWork
	.word	-0x10000
.L31:
	ldr	r0, [r2]		@ created by thumb_load_double_from_address
	ldr	r1, [r2, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r0, [r2]
	bl	GetDecompressedDataSize
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp, #0x4]
	and	r1, r1, r7
	orr	r1, r1, r0
	str	r1, [sp, #0x4]
	mov	r0, sp
	bl	LoadCompressedSpriteSheet
.L42:
	ldr	r1, [r6]
	ldr	r1, [r1, #0x4]
	add	r1, r4, r1
	strh	r0, [r1, #0xa]
	ldr	r0, .L45
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	mov	r2, r9
	mov	r3, r8
	sub	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0xa]
	ldr	r0, .L45+0x4
	cmp	r1, r0
	bne	.L30	@cond_branch
.L41:
	mov	r0, #0x0
	b	.L40
.L46:
	.align	2, 0
.L45:
	.word	sOamWork
	.word	0xffff
.L30:
	ldr	r0, [r5, #0xc]
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	ldr	r6, .L47
	ldr	r1, [r6]
	ldr	r1, [r1, #0x4]
	mov	r4, r9
	mov	r3, r8
	sub	r2, r4, r3
	lsl	r4, r2, #0x2
	add	r1, r4, r1
	strb	r0, [r1, #0x4]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0xff
	bne	.L34	@cond_branch
	ldr	r0, [r5, #0xc]
	bl	LoadSpritePalette
	ldr	r1, [r6]
	ldr	r1, [r1, #0x4]
	add	r1, r4, r1
	strb	r0, [r1, #0x4]
.L34:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	strb	r0, [r1, #0x2]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	ldrb	r1, [r5, #0x1]
	strb	r1, [r0, #0x3]
	ldr	r2, [r6]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldrh	r1, [r5, #0x4]
	strh	r1, [r0, #0xc]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldrh	r1, [r5, #0x6]
	strh	r1, [r0, #0xe]
	ldr	r1, [r2, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	strb	r0, [r1, #0x6]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	strb	r0, [r1, #0x5]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsr	r0, r0, #0x6
	strb	r0, [r1, #0x7]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	ldrb	r1, [r5, #0x2]
	strb	r1, [r0, #0x8]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1e
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	bl	GetTilesPerImage
	ldr	r1, [r6]
	ldr	r1, [r1, #0x4]
	add	r1, r4, r1
	strb	r0, [r1, #0x9]
	ldr	r2, [r6]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldr	r1, [r5, #0x8]
	ldrh	r1, [r1, #0x6]
	strh	r1, [r0, #0x10]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldr	r1, [r5, #0xc]
	ldrh	r1, [r1, #0x4]
	strh	r1, [r0, #0x12]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	str	r1, [r0, #0x14]
	mov	r3, #0x1
	ldrb	r0, [r5, #0x1]
	cmp	r3, r0
	bcs	.L36	@cond_branch
.L38:
	ldr	r0, [r6]
	ldr	r2, [r0, #0x4]
	add	r2, r4, r2
	ldr	r1, [r2, #0x14]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	str	r0, [r2, #0x14]
	add	r3, r3, #0x1
	ldrb	r2, [r5, #0x1]
	cmp	r3, r2
	bcc	.L38	@cond_branch
.L36:
	ldr	r0, .L47
	ldr	r0, [r0]
	mov	r3, r9
	mov	r4, r8
	sub	r1, r3, r4
	lsl	r1, r1, #0x2
	ldr	r0, [r0, #0x4]
	add	r0, r0, r1
	bl	CopyWorkToOam
	mov	r0, r8
	mov	r1, sl
	bl	DigitObjUtil_PrintNumOn
	mov	r0, #0x1
.L40:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L48:
	.align	2, 0
.L47:
	.word	sOamWork
.Lfe3:
	.size	 DigitObjUtil_CreatePrinter,.Lfe3-DigitObjUtil_CreatePrinter
	.align	2, 0
	.type	 CopyWorkToOam,function
	.thumb_func
CopyWorkToOam:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldrb	r5, [r4, #0x1]
	mov	r0, #0xc
	ldrsh	r7, [r4, r0]
	ldrb	r0, [r4, #0x3]
	add	r0, r0, #0x1
	mov	r8, r0
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	lsl	r1, r5, #0x3
	ldr	r2, .L55
	mov	r9, r2
	add	r1, r1, r9
	mov	r0, r8
	lsl	r2, r0, #0x2
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	orr	r2, r2, r0
	mov	r0, sp
	bl	CpuSet
	mov	r6, #0x0
	ldrb	r5, [r4, #0x1]
	cmp	r6, r8
	bcs	.L51	@cond_branch
	mov	r1, #0x3f
	mov	sl, r1
	mov	r2, #0xd
	neg	r2, r2
	mov	r9, r2
.L53:
	lsl	r0, r5, #0x3
	ldr	r1, .L55+0x4
	add	r3, r0, r1
	ldrh	r1, [r4, #0xe]
	add	r0, r3, #0
	add	r0, r0, #0x38
	strb	r1, [r0]
	ldr	r2, .L55+0x8
	add	r0, r2, #0
	add	r1, r7, #0
	and	r1, r1, r0
	ldrh	r2, [r3, #0x3a]
	ldr	r0, .L55+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x3a]
	ldrb	r1, [r4, #0x6]
	mov	r0, #0x39
	add	r0, r0, r3
	mov	ip, r0
	lsl	r1, r1, #0x6
	ldrb	r2, [r0]
	mov	r0, sl
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrb	r1, [r4, #0x5]
	mov	r2, #0x3b
	add	r2, r2, r3
	mov	ip, r2
	lsl	r1, r1, #0x6
	ldrb	r2, [r2]
	mov	r0, sl
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r4, #0xa]
	ldr	r1, .L55+0x10
	and	r1, r1, r0
	ldrh	r2, [r3, #0x3c]
	ldr	r0, .L55+0x14
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x3c]
	add	r3, r3, #0x3d
	mov	r0, #0x3
	ldrb	r1, [r4, #0x7]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, r9
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrb	r2, [r4, #0x4]
	lsl	r2, r2, #0x4
	mov	r1, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldrb	r0, [r4, #0x8]
	add	r7, r7, r0
	add	r6, r6, #0x1
	add	r5, r5, #0x1
	cmp	r6, r8
	bcc	.L53	@cond_branch
.L51:
	sub	r5, r5, #0x1
	ldr	r0, .L55+0x4
	lsl	r3, r5, #0x3
	add	r3, r3, r0
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	ldrb	r0, [r4, #0x8]
	sub	r1, r1, r0
	ldr	r2, .L55+0x8
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r2, [r3, #0x3a]
	ldr	r0, .L55+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x3a]
	add	r2, r3, #0
	add	r2, r2, #0x39
	ldrb	r1, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4, #0x9]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrh	r4, [r4, #0xa]
	add	r1, r1, r4
	ldr	r2, .L55+0x10
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r2, [r3, #0x3c]
	ldr	r0, .L55+0x14
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x3c]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gMain+0x38
	.word	gMain
	.word	0x1ff
	.word	-0x200
	.word	0x3ff
	.word	-0x400
.Lfe4:
	.size	 CopyWorkToOam,.Lfe4-CopyWorkToOam
	.align	2, 0
	.globl	DigitObjUtil_PrintNumOn
	.type	 DigitObjUtil_PrintNumOn,function
	.thumb_func
DigitObjUtil_PrintNumOn:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	ldr	r0, .L69
	ldr	r1, [r0]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L57	@cond_branch
	ldr	r2, [r1, #0x4]
	lsl	r1, r3, #0x3
	sub	r0, r1, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2]
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L57	@cond_branch
	str	r4, [r2, #0x18]
	cmp	r4, #0
	bge	.L60	@cond_branch
	mov	r2, #0x1
	neg	r4, r4
	b	.L61
.L70:
	.align	2, 0
.L69:
	.word	sOamWork
.L60:
	mov	r2, #0x0
.L61:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	sub	r0, r5, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r3, [r0, #0x2]
	cmp	r3, #0x1
	beq	.L65	@cond_branch
	cmp	r3, #0x1
	ble	.L64	@cond_branch
	cmp	r3, #0x2
	beq	.L66	@cond_branch
.L64:
	add	r1, r4, #0
	bl	DrawNumObjsLeadingZeros
	b	.L57
.L65:
	add	r1, r4, #0
	bl	DrawNumObjsMinusInFront
	b	.L57
.L66:
	add	r1, r4, #0
	bl	DrawNumObjsMinusInBack
.L57:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 DigitObjUtil_PrintNumOn,.Lfe5-DigitObjUtil_PrintNumOn
	.align	2, 0
	.type	 DrawNumObjsLeadingZeros,function
	.thumb_func
DrawNumObjsLeadingZeros:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	mov	r9, r1
	str	r2, [sp]
	ldr	r5, [r0, #0x14]
	ldrb	r7, [r0, #0x1]
	ldr	r0, .L78
	mov	sl, r0
	cmp	r5, #0
	beq	.L73	@cond_branch
	lsl	r0, r7, #0x3
	add	r0, r0, #0x3c
	mov	r1, sl
	add	r6, r0, r1
.L74:
	mov	r0, r9
	add	r1, r5, #0
	bl	__udivsi3
	add	r4, r0, #0
	mov	r0, r4
	mul	r0, r0, r5
	mov	r2, r9
	sub	r2, r2, r0
	mov	r9, r2
	add	r0, r5, #0
	mov	r1, #0xa
	bl	__udivsi3
	add	r5, r0, #0
	mov	r1, r8
	ldrb	r0, [r1, #0x9]
	mov	r1, r4
	mul	r1, r1, r0
	mov	r2, r8
	ldrh	r2, [r2, #0xa]
	add	r1, r1, r2
	ldr	r2, .L78+0x4
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r0, [r6]
	ldr	r2, .L78+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r6]
	add	r6, r6, #0x8
	add	r7, r7, #0x1
	cmp	r5, #0
	bne	.L74	@cond_branch
.L73:
	ldr	r0, [sp]
	cmp	r0, #0
	beq	.L76	@cond_branch
	lsl	r0, r7, #0x3
	add	r0, r0, sl
	add	r0, r0, #0x39
	ldrb	r2, [r0]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	b	.L77
.L79:
	.align	2, 0
.L78:
	.word	gMain
	.word	0x3ff
	.word	-0x400
.L76:
	lsl	r2, r7, #0x3
	add	r2, r2, sl
	add	r2, r2, #0x39
	ldrb	r1, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
.L77:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 DrawNumObjsLeadingZeros,.Lfe6-DrawNumObjsLeadingZeros

	.lcomm	oamId.27,4

	.lcomm	curDigit.28,4

	.lcomm	firstDigit.29,4
	.align	2, 0
	.type	 DrawNumObjsMinusInFront,function
	.thumb_func
DrawNumObjsMinusInFront:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	mov	r8, r1
	str	r2, [sp]
	ldr	r5, [r6, #0x14]
	ldr	r3, .L91
	ldrb	r0, [r6, #0x1]
	str	r0, [r3]
	ldr	r2, .L91+0x4
	mov	r0, #0x0
	str	r0, [r2]
	ldr	r1, .L91+0x8
	sub	r0, r0, #0x1
	str	r0, [r1]
	add	r7, r3, #0
	mov	sl, r1
	ldr	r0, .L91+0xc
	mov	r9, r0
	cmp	r5, #0
	beq	.L82	@cond_branch
.L83:
	mov	r0, r8
	add	r1, r5, #0
	bl	__udivsi3
	add	r4, r0, #0
	mov	r0, r4
	mul	r0, r0, r5
	mov	r1, r8
	sub	r1, r1, r0
	mov	r8, r1
	add	r0, r5, #0
	mov	r1, #0xa
	bl	__udivsi3
	add	r5, r0, #0
	cmp	r4, #0
	bne	.L85	@cond_branch
	mov	r2, sl
	ldr	r1, [r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L85	@cond_branch
	cmp	r5, #0
	bne	.L84	@cond_branch
.L85:
	ldr	r2, [r7]
	lsl	r2, r2, #0x3
	add	r2, r2, r9
	ldrb	r0, [r6, #0x9]
	mov	r3, r4
	mul	r3, r3, r0
	ldrh	r4, [r6, #0xa]
	add	r3, r3, r4
	ldr	r1, .L91+0x10
	add	r0, r1, #0
	and	r3, r3, r0
	ldrh	r0, [r2, #0x3c]
	ldr	r4, .L91+0x14
	add	r1, r4, #0
	and	r0, r0, r1
	orr	r0, r0, r3
	strh	r0, [r2, #0x3c]
	add	r2, r2, #0x39
	ldrb	r0, [r2]
	mov	r1, #0x4
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r2, sl
	ldr	r1, [r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L87	@cond_branch
	ldr	r4, .L91+0x4
	ldr	r0, [r4]
	str	r0, [r2]
	b	.L87
.L92:
	.align	2, 0
.L91:
	.word	oamId.27
	.word	curDigit.28
	.word	firstDigit.29
	.word	gMain
	.word	0x3ff
	.word	-0x400
.L84:
	ldr	r0, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	add	r0, r0, #0x39
	ldrb	r1, [r0]
	mov	r2, #0x4
	neg	r2, r2
	and	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
.L87:
	ldr	r0, [r7]
	add	r0, r0, #0x1
	str	r0, [r7]
	ldr	r4, .L93
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	cmp	r5, #0
	bne	.L83	@cond_branch
.L82:
	ldr	r0, [sp]
	cmp	r0, #0
	beq	.L89	@cond_branch
	ldr	r1, [r7]
	lsl	r1, r1, #0x3
	add	r1, r1, r9
	add	r1, r1, #0x39
	ldrb	r2, [r1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r3, [r7]
	lsl	r3, r3, #0x3
	add	r3, r3, r9
	mov	r1, #0xc
	ldrsh	r2, [r6, r1]
	mov	r4, sl
	ldr	r0, [r4]
	sub	r0, r0, #0x1
	ldrb	r1, [r6, #0x8]
	mul	r0, r0, r1
	add	r2, r2, r0
	ldr	r1, .L93+0x4
	add	r0, r1, #0
	and	r2, r2, r0
	ldrh	r1, [r3, #0x3a]
	ldr	r0, .L93+0x8
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r3, #0x3a]
	b	.L90
.L94:
	.align	2, 0
.L93:
	.word	curDigit.28
	.word	0x1ff
	.word	-0x200
.L89:
	ldr	r0, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	add	r0, r0, #0x39
	ldrb	r2, [r0]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
.L90:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 DrawNumObjsMinusInFront,.Lfe7-DrawNumObjsMinusInFront
	.align	2, 0
	.type	 DrawNumObjsMinusInBack,function
	.thumb_func
DrawNumObjsMinusInBack:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r8, r0
	mov	sl, r1
	str	r2, [sp]
	ldr	r5, [r0, #0x14]
	ldrb	r3, [r0, #0x1]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r9, r0
	cmp	r5, #0
	beq	.L97	@cond_branch
.L109:
	lsl	r0, r3, #0x3
	add	r1, r0, #0
	add	r1, r1, #0x39
	ldr	r2, .L110
	add	r7, r1, r2
	add	r0, r0, #0x3c
	add	r6, r0, r2
.L98:
	mov	r0, sl
	add	r1, r5, #0
	str	r3, [sp, #0x8]
	bl	__udivsi3
	add	r4, r0, #0
	mov	r0, r4
	mul	r0, r0, r5
	mov	r1, sl
	sub	r1, r1, r0
	mov	sl, r1
	add	r0, r5, #0
	mov	r1, #0xa
	bl	__udivsi3
	add	r5, r0, #0
	ldr	r3, [sp, #0x8]
	cmp	r4, #0
	bne	.L100	@cond_branch
	ldr	r2, [sp, #0x4]
	cmp	r2, #0
	bne	.L100	@cond_branch
	cmp	r5, #0
	bne	.L109	@cond_branch
.L100:
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r1, r8
	ldrb	r0, [r1, #0x9]
	mov	r2, r4
	mul	r2, r2, r0
	ldrh	r4, [r1, #0xa]
	add	r2, r2, r4
	ldr	r1, .L110+0x4
	add	r0, r1, #0
	and	r2, r2, r0
	ldrh	r0, [r6]
	ldr	r4, .L110+0x8
	add	r1, r4, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r6]
	ldrb	r0, [r7]
	mov	r2, #0x4
	neg	r2, r2
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r7]
	add	r7, r7, #0x8
	add	r6, r6, #0x8
	add	r3, r3, #0x1
	mov	r4, #0x1
	add	r9, r9, r4
	cmp	r5, #0
	bne	.L98	@cond_branch
.L97:
	mov	r0, r8
	ldrb	r0, [r0, #0x3]
	cmp	r9, r0
	bge	.L108	@cond_branch
	ldr	r1, .L110
	mov	r5, #0x4
	neg	r5, r5
	mov	r4, #0x2
	lsl	r0, r3, #0x3
	add	r0, r0, #0x39
	add	r2, r0, r1
.L104:
	ldrb	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	orr	r0, r0, r4
	strb	r0, [r2]
	add	r2, r2, #0x8
	add	r3, r3, #0x1
	mov	r1, #0x1
	add	r9, r9, r1
	mov	r0, r8
	ldrb	r0, [r0, #0x3]
	cmp	r9, r0
	blt	.L104	@cond_branch
.L108:
	ldr	r1, [sp]
	cmp	r1, #0
	beq	.L106	@cond_branch
	lsl	r0, r3, #0x3
	ldr	r2, .L110
	add	r0, r0, r2
	add	r0, r0, #0x39
	ldrb	r2, [r0]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	b	.L107
.L111:
	.align	2, 0
.L110:
	.word	gMain
	.word	0x3ff
	.word	-0x400
.L106:
	lsl	r2, r3, #0x3
	ldr	r4, .L112
	add	r2, r2, r4
	add	r2, r2, #0x39
	ldrb	r1, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
.L107:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gMain
.Lfe8:
	.size	 DrawNumObjsMinusInBack,.Lfe8-DrawNumObjsMinusInBack
	.align	2, 0
	.globl	DigitObjUtil_DeletePrinter
	.type	 DigitObjUtil_DeletePrinter,function
	.thumb_func
DigitObjUtil_DeletePrinter:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L124
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L114	@cond_branch
	ldr	r2, [r0, #0x4]
	lsl	r1, r4, #0x3
	sub	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2]
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L114	@cond_branch
	ldrb	r3, [r2, #0x3]
	add	r0, r3, #0x1
	ldrb	r2, [r2, #0x1]
	cmp	r0, #0
	beq	.L118	@cond_branch
	ldr	r1, .L124+0x4
	mov	r7, #0x4
	neg	r7, r7
	mov	r6, #0x2
	add	r3, r0, #0
	lsl	r0, r2, #0x3
	add	r0, r0, #0x39
	add	r2, r0, r1
.L120:
	ldrb	r1, [r2]
	add	r0, r7, #0
	and	r0, r0, r1
	orr	r0, r0, r6
	strb	r0, [r2]
	sub	r3, r3, #0x1
	add	r2, r2, #0x8
	cmp	r3, #0
	bne	.L120	@cond_branch
.L118:
	add	r0, r4, #0
	bl	SharesTileWithAnyActive
	cmp	r0, #0
	bne	.L122	@cond_branch
	ldr	r0, .L124
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	sub	r0, r5, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x10]
	bl	FreeSpriteTilesByTag
.L122:
	add	r0, r4, #0
	bl	SharesPalWithAnyActive
	cmp	r0, #0
	bne	.L123	@cond_branch
	ldr	r0, .L124
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	sub	r0, r5, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x12]
	bl	FreeSpritePaletteByTag
.L123:
	ldr	r0, .L124
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	sub	r0, r5, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
.L114:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	sOamWork
	.word	gMain
.Lfe9:
	.size	 DigitObjUtil_DeletePrinter,.Lfe9-DigitObjUtil_DeletePrinter
	.align	2, 0
	.globl	DigitObjUtil_HideOrShow
	.type	 DigitObjUtil_HideOrShow,function
	.thumb_func
DigitObjUtil_HideOrShow:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, .L141
	ldr	r1, [r0]
	add	r7, r0, #0
	cmp	r1, #0
	beq	.L126	@cond_branch
	ldr	r2, [r1, #0x4]
	lsl	r1, r4, #0x3
	sub	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L126	@cond_branch
	ldrb	r3, [r2, #0x3]
	add	r1, r3, #0x1
	ldrb	r0, [r2, #0x1]
	cmp	r5, #0
	beq	.L129	@cond_branch
	cmp	r1, #0
	beq	.L126	@cond_branch
	ldr	r1, .L141+0x4
	mov	r5, #0x4
	neg	r5, r5
	mov	r4, #0x2
	add	r3, r3, #0x1
	lsl	r0, r0, #0x3
	add	r0, r0, #0x39
	add	r2, r0, r1
.L133:
	ldrb	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	orr	r0, r0, r4
	strb	r0, [r2]
	sub	r3, r3, #0x1
	add	r2, r2, #0x8
	cmp	r3, #0
	bne	.L133	@cond_branch
	b	.L126
.L142:
	.align	2, 0
.L141:
	.word	sOamWork
	.word	gMain
.L129:
	cmp	r1, #0
	beq	.L137	@cond_branch
	ldr	r1, .L143
	mov	r5, #0x4
	neg	r5, r5
	add	r3, r3, #0x1
	lsl	r0, r0, #0x3
	add	r0, r0, #0x39
	add	r2, r0, r1
.L139:
	ldrb	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	strb	r0, [r2]
	sub	r3, r3, #0x1
	add	r2, r2, #0x8
	cmp	r3, #0
	bne	.L139	@cond_branch
.L137:
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	sub	r0, r6, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0, #0x18]
	add	r0, r4, #0
	bl	DigitObjUtil_PrintNumOn
.L126:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L144:
	.align	2, 0
.L143:
	.word	gMain
.Lfe10:
	.size	 DigitObjUtil_HideOrShow,.Lfe10-DigitObjUtil_HideOrShow
	.align	2, 0
	.type	 GetFirstOamId,function
	.thumb_func
GetFirstOamId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r5, #0x40
	mov	r3, #0x0
	ldr	r0, .L157
	ldr	r0, [r0]
	ldr	r2, [r0]
	cmp	r3, r2
	bcs	.L147	@cond_branch
	ldr	r1, [r0, #0x4]
.L149:
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L150	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0xff
	beq	.L148	@cond_branch
	ldrb	r0, [r1, #0x3]
	cmp	r0, r4
	bhi	.L148	@cond_branch
	ldrb	r0, [r1, #0x1]
	b	.L156
.L158:
	.align	2, 0
.L157:
	.word	sOamWork
.L150:
	add	r0, r5, #0x1
	ldrb	r5, [r1, #0x3]
	add	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L148:
	add	r1, r1, #0x1c
	add	r3, r3, #0x1
	cmp	r3, r2
	bcc	.L149	@cond_branch
.L147:
	add	r0, r5, r4
	add	r0, r0, #0x1
	cmp	r0, #0x80
	bgt	.L154	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	b	.L156
.L154:
	mov	r0, #0xff
.L156:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 GetFirstOamId,.Lfe11-GetFirstOamId
	.align	2, 0
	.type	 SharesTileWithAnyActive,function
	.thumb_func
SharesTileWithAnyActive:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r0, .L167
	ldr	r0, [r0]
	ldr	r4, [r0]
	cmp	r2, r4
	bcs	.L161	@cond_branch
	ldr	r1, [r0, #0x4]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r5, r0, r1
.L163:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L162	@cond_branch
	cmp	r2, r3
	beq	.L162	@cond_branch
	ldrh	r0, [r1, #0x10]
	ldrh	r6, [r5, #0x10]
	cmp	r0, r6
	bne	.L162	@cond_branch
	mov	r0, #0x1
	b	.L166
.L168:
	.align	2, 0
.L167:
	.word	sOamWork
.L162:
	add	r1, r1, #0x1c
	add	r2, r2, #0x1
	cmp	r2, r4
	bcc	.L163	@cond_branch
.L161:
	mov	r0, #0x0
.L166:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 SharesTileWithAnyActive,.Lfe12-SharesTileWithAnyActive
	.align	2, 0
	.type	 SharesPalWithAnyActive,function
	.thumb_func
SharesPalWithAnyActive:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r0, .L177
	ldr	r0, [r0]
	ldr	r4, [r0]
	cmp	r2, r4
	bcs	.L171	@cond_branch
	ldr	r1, [r0, #0x4]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r5, r0, r1
.L173:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L172	@cond_branch
	cmp	r2, r3
	beq	.L172	@cond_branch
	ldrh	r0, [r1, #0x12]
	ldrh	r6, [r5, #0x12]
	cmp	r0, r6
	bne	.L172	@cond_branch
	mov	r0, #0x1
	b	.L176
.L178:
	.align	2, 0
.L177:
	.word	sOamWork
.L172:
	add	r1, r1, #0x1c
	add	r2, r2, #0x1
	cmp	r2, r4
	bcc	.L173	@cond_branch
.L171:
	mov	r0, #0x0
.L176:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 SharesPalWithAnyActive,.Lfe13-SharesPalWithAnyActive
	.align	2, 0
	.type	 GetTilesPerImage,function
	.thumb_func
GetTilesPerImage:
	ldr	r2, .L180
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	bx	lr
.L181:
	.align	2, 0
.L180:
	.word	sTilesPerImage
.Lfe14:
	.size	 GetTilesPerImage,.Lfe14-GetTilesPerImage
.text
	.align	2, 0 @ Don't pad with nop

