@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	EReader_Send
	.type	 EReader_Send,function
	.thumb_func
EReader_Send:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	add	r5, r1, #0
	bl	EReaderHelper_SaveRegsState
	mov	r7, #0x2
	ldr	r4, .L14
.L5:
	bl	GetKeyInput
	ldr	r0, .L14+0x4
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L6	@cond_branch
	strb	r7, [r4]
.L6:
	mov	r0, #0x1
	add	r1, r6, #0
	add	r2, r5, #0
	mov	r3, #0x0
	bl	EReaderHandleTransfer
	add	r1, r0, #0
	ldr	r0, .L14+0x8
	strh	r1, [r0]
	mov	r0, #0x13
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L7	@cond_branch
	mov	r4, #0x0
	b	.L4
.L15:
	.align	2, 0
.L14:
	.word	gShouldAdvanceLinkState
	.word	sJoyNew
	.word	sSendRecvStatus
.L7:
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L9	@cond_branch
	mov	r4, #0x1
	b	.L4
.L9:
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L11	@cond_branch
	strb	r0, [r4]
	bl	VBlankIntrWait
	b	.L5
.L11:
	mov	r4, #0x2
.L4:
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L16
	ldr	r2, .L16+0x4
	mov	r0, sp
	bl	CpuSet
	bl	EReaderHelper_RestoreRegsState
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L17:
	.align	2, 0
.L16:
	.word	sSendRecvMgr
	.word	0x5000006
.Lfe1:
	.size	 EReader_Send,.Lfe1-EReader_Send
	.align	2, 0
	.globl	EReader_Recv
	.type	 EReader_Recv,function
	.thumb_func
EReader_Recv:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	bl	EReaderHelper_SaveRegsState
	mov	r6, #0x2
	ldr	r4, .L30
.L21:
	bl	GetKeyInput
	ldr	r0, .L30+0x4
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L22	@cond_branch
	strb	r6, [r4]
.L22:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	add	r3, r5, #0
	bl	EReaderHandleTransfer
	add	r1, r0, #0
	ldr	r0, .L30+0x8
	strh	r1, [r0]
	mov	r0, #0x13
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L23	@cond_branch
	mov	r4, #0x0
	b	.L20
.L31:
	.align	2, 0
.L30:
	.word	gShouldAdvanceLinkState
	.word	sJoyNew
	.word	sSendRecvStatus
.L23:
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
	mov	r4, #0x1
	b	.L20
.L25:
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L27	@cond_branch
	strb	r0, [r4]
	bl	VBlankIntrWait
	b	.L21
.L27:
	mov	r4, #0x2
.L20:
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L32
	ldr	r2, .L32+0x4
	mov	r0, sp
	bl	CpuSet
	bl	EReaderHelper_RestoreRegsState
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L33:
	.align	2, 0
.L32:
	.word	sSendRecvMgr
	.word	0x5000006
.Lfe2:
	.size	 EReader_Recv,.Lfe2-EReader_Recv
	.align	2, 0
	.type	 CloseSerial,function
	.thumb_func
CloseSerial:
	push	{r4, lr}
	ldr	r4, .L35
	mov	r3, #0x0
	strh	r3, [r4]
	ldr	r2, .L35+0x4
	ldrh	r1, [r2]
	ldr	r0, .L35+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x1
	strh	r0, [r4]
	ldr	r0, .L35+0xc
	strh	r3, [r0]
	sub	r0, r0, #0x1a
	strh	r3, [r0]
	ldr	r1, .L35+0x10
	mov	r0, #0xc0
	strh	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	0x4000208
	.word	0x4000200
	.word	0xff3f
	.word	0x4000128
	.word	0x4000202
.Lfe3:
	.size	 CloseSerial,.Lfe3-CloseSerial
	.align	2, 0
	.type	 OpenSerialMulti,function
	.thumb_func
OpenSerialMulti:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L39
	mov	r4, #0x0
	strh	r4, [r5]
	ldr	r3, .L39+0x4
	ldrh	r1, [r3]
	ldr	r0, .L39+0x8
	and	r0, r0, r1
	strh	r0, [r3]
	mov	r6, #0x1
	strh	r6, [r5]
	ldr	r0, .L39+0xc
	strh	r4, [r0]
	ldr	r2, .L39+0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	add	r0, r1, #0
	strh	r0, [r2]
	ldrh	r0, [r2]
	ldr	r7, .L39+0x14
	add	r1, r7, #0
	orr	r0, r0, r1
	strh	r0, [r2]
	strh	r4, [r5]
	ldrh	r0, [r3]
	mov	r1, #0x80
	orr	r0, r0, r1
	strh	r0, [r3]
	strh	r6, [r5]
	ldr	r1, .L39+0x18
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L38	@cond_branch
	str	r0, [sp]
	ldr	r2, .L39+0x1c
	mov	r0, sp
	bl	CpuSet
.L38:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	0x4000208
	.word	0x4000200
	.word	0xff3f
	.word	0x4000134
	.word	0x4000128
	.word	0x4003
	.word	sSendRecvMgr
	.word	0x5000006
.Lfe4:
	.size	 OpenSerialMulti,.Lfe4-OpenSerialMulti
	.align	2, 0
	.type	 OpenSerial32,function
	.thumb_func
OpenSerial32:
	ldr	r0, .L42
	mov	r3, #0x0
	strh	r3, [r0]
	ldr	r2, .L42+0x4
	mov	r1, #0xa0
	lsl	r1, r1, #0x7
	add	r0, r1, #0
	strh	r0, [r2]
	ldrh	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L42+0x8
	strb	r3, [r0]
	ldr	r0, .L42+0xc
	strh	r3, [r0]
	ldr	r1, .L42+0x10
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L43:
	.align	2, 0
.L42:
	.word	0x4000134
	.word	0x4000128
	.word	gShouldAdvanceLinkState
	.word	sCounter1
	.word	sCounter2
.Lfe5:
	.size	 OpenSerial32,.Lfe5-OpenSerial32
	.align	2, 0
	.globl	EReaderHandleTransfer
	.type	 EReaderHandleTransfer,function
	.thumb_func
EReaderHandleTransfer:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	add	r5, r2, #0
	add	r6, r3, #0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L68
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x6
	bls	.LCB386
	b	.L45	@long jump
.LCB386:
	lsl	r0, r0, #0x2
	ldr	r1, .L68+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L69:
	.align	2, 0
.L68:
	.word	sSendRecvMgr
	.word	.L64
	.align	2, 0
	.align	2, 0
.L64:
	.word	.L46
	.word	.L47
	.word	.L50
	.word	.L51
	.word	.L58
	.word	.L59
	.word	.L62
.L46:
	bl	OpenSerialMulti
	ldr	r1, .L70
	mov	r0, #0x1
	strb	r0, [r1, #0x2]
	strb	r0, [r1, #0x1]
	b	.L45
.L71:
	.align	2, 0
.L70:
	.word	sSendRecvMgr
.L47:
	add	r0, r2, #0
	bl	DetermineSendRecvState
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L48	@cond_branch
	bl	EnableSio
.L48:
	ldr	r0, .L72
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.LCB435
	b	.L45	@long jump
.LCB435:
	b	.L66
.L73:
	.align	2, 0
.L72:
	.word	gShouldAdvanceLinkState
.L50:
	bl	OpenSerial32
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	SetUpTransferManager
	ldr	r1, .L74
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
.L51:
	ldr	r0, .L74+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L52	@cond_branch
.L66:
	ldr	r1, .L74
	strb	r0, [r1, #0x4]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	b	.L45
.L75:
	.align	2, 0
.L74:
	.word	sSendRecvMgr
	.word	gShouldAdvanceLinkState
.L52:
	ldr	r2, .L76
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	ldr	r1, .L76+0x4
	ldr	r0, [r1]
	add	r3, r0, #0x1
	str	r3, [r1]
	ldr	r1, .L76+0x8
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L54	@cond_branch
	cmp	r3, #0x3c
	bls	.L54	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
.L54:
	ldr	r4, .L76+0x8
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0x2
	beq	.L45	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L56	@cond_branch
	ldrh	r0, [r2]
	cmp	r0, #0x2
	bls	.L56	@cond_branch
	bl	EnableSio
	mov	r0, #0x2
	b	.L67
.L77:
	.align	2, 0
.L76:
	.word	sCounter1
	.word	sCounter2
	.word	sSendRecvMgr
.L56:
	bl	EnableSio
	ldr	r1, .L78
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	b	.L45
.L79:
	.align	2, 0
.L78:
	.word	sSendRecvMgr
.L58:
	bl	OpenSerialMulti
	ldr	r1, .L80
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	b	.L45
.L81:
	.align	2, 0
.L80:
	.word	sSendRecvMgr
.L59:
	ldr	r0, .L82
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L60	@cond_branch
	ldr	r0, .L82+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x2
	bls	.L60	@cond_branch
	bl	EnableSio
.L60:
	ldr	r1, .L82+0x4
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3c
	bls	.L45	@cond_branch
	ldr	r0, .L82
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	mov	r1, #0x6
	strb	r1, [r0, #0x1]
	b	.L45
.L83:
	.align	2, 0
.L82:
	.word	sSendRecvMgr
	.word	sCounter1
.L62:
	ldr	r4, .L84
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0
	beq	.L45	@cond_branch
	bl	CloseSerial
	mov	r0, #0x0
.L67:
	strb	r0, [r4, #0x2]
.L45:
	ldr	r2, .L84
	ldrb	r0, [r2, #0x2]
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L85:
	.align	2, 0
.L84:
	.word	sSendRecvMgr
.Lfe6:
	.size	 EReaderHandleTransfer,.Lfe6-EReaderHandleTransfer
	.align	2, 0
	.type	 DetermineSendRecvState,function
	.thumb_func
DetermineSendRecvState:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L90
	ldr	r0, [r0]
	mov	r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0x8
	bne	.L87	@cond_branch
	cmp	r2, #0
	beq	.L87	@cond_branch
	ldr	r1, .L90+0x4
	mov	r0, #0x1
	b	.L89
.L91:
	.align	2, 0
.L90:
	.word	0x4000128
	.word	sSendRecvMgr
.L87:
	ldr	r1, .L92
	mov	r0, #0x0
.L89:
	strb	r0, [r1]
	pop	{r1}
	bx	r1
.L93:
	.align	2, 0
.L92:
	.word	sSendRecvMgr
.Lfe7:
	.size	 DetermineSendRecvState,.Lfe7-DetermineSendRecvState
	.align	2, 0
	.type	 SetUpTransferManager,function
	.thumb_func
SetUpTransferManager:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r3, .L97
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L95	@cond_branch
	ldr	r2, .L97+0x4
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	str	r5, [r3, #0x8]
	ldr	r0, .L97+0x8
	str	r4, [r0]
	lsr	r0, r4, #0x2
	add	r0, r0, #0x1
	str	r0, [r3, #0x10]
	bl	StartTm3
	b	.L96
.L98:
	.align	2, 0
.L97:
	.word	sSendRecvMgr
	.word	0x4000128
	.word	0x4000120
.L95:
	ldr	r1, .L99
	ldrh	r0, [r1]
	strh	r0, [r1]
	str	r2, [r3, #0x8]
.L96:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	0x4000128
.Lfe8:
	.size	 SetUpTransferManager,.Lfe8-SetUpTransferManager
	.align	2, 0
	.type	 StartTm3,function
	.thumb_func
StartTm3:
	ldr	r1, .L102
	ldr	r2, .L102+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L102+0x8
	mov	r2, #0x40
	strh	r2, [r0]
	ldr	r3, .L102+0xc
	mov	r0, #0x0
	strh	r0, [r3]
	add	r1, r1, #0xf4
	ldrh	r0, [r1]
	orr	r0, r0, r2
	strh	r0, [r1]
	mov	r0, #0x1
	strh	r0, [r3]
	bx	lr
.L103:
	.align	2, 0
.L102:
	.word	0x400010c
	.word	0xfda7
	.word	0x400010e
	.word	0x4000208
.Lfe9:
	.size	 StartTm3,.Lfe9-StartTm3
	.align	2, 0
	.globl	EReaderHelper_Timer3Callback
	.type	 EReaderHelper_Timer3Callback,function
	.thumb_func
EReaderHelper_Timer3Callback:
	push	{lr}
	bl	DisableTm3
	bl	EnableSio
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 EReaderHelper_Timer3Callback,.Lfe10-EReaderHelper_Timer3Callback
	.align	2, 0
	.globl	EReaderHelper_SerialCallback
	.type	 EReaderHelper_SerialCallback,function
	.thumb_func
EReaderHelper_SerialCallback:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	ldr	r2, .L141
	ldrb	r0, [r2, #0x1]
	add	r3, r2, #0
	cmp	r0, #0x3
	beq	.L117	@cond_branch
	cmp	r0, #0x3
	bgt	.L138	@cond_branch
	cmp	r0, #0x1
	beq	.L107	@cond_branch
	b	.L106
.L142:
	.align	2, 0
.L141:
	.word	sSendRecvMgr
.L138:
	cmp	r0, #0x5
	bne	.LCB807
	b	.L132	@long jump
.LCB807:
	b	.L106
.L107:
	ldr	r1, .L143
	ldr	r2, .L143+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L143+0x8
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r4, #0x0
	ldr	r6, .L143+0x4
	ldr	r5, .L143+0xc
.L111:
	lsl	r0, r1, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L112	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	b	.L110
.L144:
	.align	2, 0
.L143:
	.word	0x400012a
	.word	0xccd0
	.word	0x4000120
	.word	0xffff
.L112:
	cmp	r0, r5
	beq	.L110	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L110:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x3
	bls	.L111	@cond_branch
	cmp	r2, #0x2
	beq	.LCB867
	b	.L106	@long jump
.LCB867:
	cmp	r4, #0
	beq	.LCB869
	b	.L106	@long jump
.LCB869:
	strb	r2, [r3, #0x1]
	b	.L106
.L117:
	ldr	r0, .L145
	ldr	r4, [r0]
	ldr	r0, [r2, #0xc]
	cmp	r0, #0
	bne	.L118	@cond_branch
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L118	@cond_branch
	lsr	r0, r4, #0x2
	add	r0, r0, #0x1
	str	r0, [r2, #0x10]
.L118:
	ldrb	r0, [r3]
	cmp	r0, #0x1
	bne	.L119	@cond_branch
	ldr	r1, [r3, #0xc]
	ldr	r0, [r3, #0x10]
	cmp	r1, r0
	bge	.L120	@cond_branch
	ldr	r2, .L145
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, [r3, #0x14]
	ldr	r1, [r1]
	add	r0, r0, r1
	str	r0, [r3, #0x14]
	b	.L122
.L146:
	.align	2, 0
.L145:
	.word	0x4000120
.L120:
	ldr	r1, .L147
	ldr	r0, [r3, #0x14]
	b	.L139
.L148:
	.align	2, 0
.L147:
	.word	0x4000120
.L119:
	ldr	r1, [r3, #0xc]
	cmp	r1, #0
	ble	.L123	@cond_branch
	ldr	r0, [r3, #0x10]
	add	r0, r0, #0x1
	cmp	r1, r0
	bge	.L123	@cond_branch
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	sub	r1, r1, #0x4
	str	r4, [r1]
	ldr	r0, [r3, #0x14]
	add	r0, r0, r4
	str	r0, [r3, #0x14]
	b	.L124
.L123:
	ldr	r0, [r3, #0xc]
	cmp	r0, #0
	beq	.L124	@cond_branch
	ldr	r0, [r3, #0x14]
	cmp	r0, r4
	bne	.L126	@cond_branch
	mov	r0, #0x1
	b	.L140
.L126:
	mov	r0, #0x2
.L140:
	strb	r0, [r3, #0x3]
.L124:
	ldr	r1, .L149
	mov	r0, #0x0
.L139:
	str	r0, [r1]
.L122:
	ldr	r1, [r3, #0xc]
	add	r1, r1, #0x1
	str	r1, [r3, #0xc]
	ldr	r0, [r3, #0x10]
	add	r0, r0, #0x2
	cmp	r1, r0
	bge	.L128	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L129	@cond_branch
	ldr	r0, .L149+0x4
	ldrh	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strh	r1, [r0]
	b	.L106
.L150:
	.align	2, 0
.L149:
	.word	sCounter2
	.word	0x400010e
.L129:
	bl	EnableSio
	b	.L106
.L128:
	mov	r0, #0x0
	mov	r1, #0x4
	strb	r1, [r3, #0x1]
	ldr	r1, .L151
	strh	r0, [r1]
	b	.L106
.L152:
	.align	2, 0
.L151:
	.word	sCounter1
.L132:
	ldrb	r3, [r2]
	cmp	r3, #0
	bne	.L133	@cond_branch
	ldr	r1, .L153
	ldrb	r0, [r2, #0x3]
	strh	r0, [r1]
.L133:
	ldr	r0, .L153+0x4
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	mov	r0, sp
	ldrh	r1, [r0, #0x2]
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L106	@cond_branch
	cmp	r3, #0x1
	bne	.L135	@cond_branch
	strb	r1, [r2, #0x3]
.L135:
	mov	r0, #0x6
	strb	r0, [r2, #0x1]
.L106:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L154:
	.align	2, 0
.L153:
	.word	0x400012a
	.word	0x4000120
.Lfe11:
	.size	 EReaderHelper_SerialCallback,.Lfe11-EReaderHelper_SerialCallback
	.align	2, 0
	.type	 EnableSio,function
	.thumb_func
EnableSio:
	ldr	r0, .L156
	ldrh	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strh	r1, [r0]
	bx	lr
.L157:
	.align	2, 0
.L156:
	.word	0x4000128
.Lfe12:
	.size	 EnableSio,.Lfe12-EnableSio
	.align	2, 0
	.type	 DisableTm3,function
	.thumb_func
DisableTm3:
	ldr	r2, .L159
	ldrh	r1, [r2]
	ldr	r0, .L159+0x4
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L159+0x8
	ldr	r2, .L159+0xc
	add	r0, r2, #0
	strh	r0, [r1]
	bx	lr
.L160:
	.align	2, 0
.L159:
	.word	0x400010e
	.word	0xff7f
	.word	0x400010c
	.word	0xfda7
.Lfe13:
	.size	 DisableTm3,.Lfe13-DisableTm3
	.align	2, 0
	.type	 GetKeyInput,function
	.thumb_func
GetKeyInput:
	push	{r4, lr}
	ldr	r0, .L162
	ldrh	r0, [r0]
	ldr	r2, .L162+0x4
	add	r1, r2, #0
	eor	r1, r1, r0
	ldr	r4, .L162+0x8
	ldr	r3, .L162+0xc
	ldrh	r2, [r3]
	add	r0, r1, #0
	bic	r0, r0, r2
	strh	r0, [r4]
	strh	r1, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	0x4000130
	.word	0x3ff
	.word	sJoyNew
	.word	sJoyNewOrRepeated
.Lfe14:
	.size	 GetKeyInput,.Lfe14-GetKeyInput
	.align	2, 0
	.globl	EReaderHelper_SaveRegsState
	.type	 EReaderHelper_SaveRegsState,function
	.thumb_func
EReaderHelper_SaveRegsState:
	ldr	r1, .L165
	ldr	r0, .L165+0x4
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L165+0x8
	ldr	r0, .L165+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L165+0x10
	ldr	r0, .L165+0x14
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L165+0x18
	ldr	r0, .L165+0x1c
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L165+0x20
	ldr	r0, .L165+0x24
	ldrh	r0, [r0]
	strh	r0, [r1]
	bx	lr
.L166:
	.align	2, 0
.L165:
	.word	sSavedIme
	.word	0x4000208
	.word	sSavedIe
	.word	0x4000200
	.word	sSavedTm3Cnt
	.word	0x400010e
	.word	sSavedSioCnt
	.word	0x4000128
	.word	sSavedRCnt
	.word	0x4000134
.Lfe15:
	.size	 EReaderHelper_SaveRegsState,.Lfe15-EReaderHelper_SaveRegsState
	.align	2, 0
	.globl	EReaderHelper_RestoreRegsState
	.type	 EReaderHelper_RestoreRegsState,function
	.thumb_func
EReaderHelper_RestoreRegsState:
	ldr	r1, .L168
	ldr	r0, .L168+0x4
	ldrh	r0, [r0]
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L168+0x8
	ldrh	r0, [r0]
	strh	r0, [r1]
	sub	r1, r1, #0xf2
	ldr	r0, .L168+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x1a
	ldr	r0, .L168+0x10
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0xc
	ldr	r0, .L168+0x14
	ldrh	r0, [r0]
	strh	r0, [r1]
	bx	lr
.L169:
	.align	2, 0
.L168:
	.word	0x4000208
	.word	sSavedIme
	.word	sSavedIe
	.word	sSavedTm3Cnt
	.word	sSavedSioCnt
	.word	sSavedRCnt
.Lfe16:
	.size	 EReaderHelper_RestoreRegsState,.Lfe16-EReaderHelper_RestoreRegsState
	.align	2, 0
	.globl	EReaderHelper_ClearsSendRecvMgr
	.type	 EReaderHelper_ClearsSendRecvMgr,function
	.thumb_func
EReaderHelper_ClearsSendRecvMgr:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L171
	ldr	r2, .L171+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	sSendRecvMgr
	.word	0x5000006
.Lfe17:
	.size	 EReaderHelper_ClearsSendRecvMgr,.Lfe17-EReaderHelper_ClearsSendRecvMgr

	.lcomm	sSendRecvMgr,24

	.lcomm	sJoyNewOrRepeated,2

	.lcomm	sJoyNew,2

	.lcomm	sSendRecvStatus,2

	.lcomm	sCounter1,2

	.lcomm	sCounter2,4

	.lcomm	sSavedIme,2

	.lcomm	sSavedIe,2

	.lcomm	sSavedTm3Cnt,2

	.lcomm	sSavedSioCnt,2

	.lcomm	sSavedRCnt,2
.text
	.align	2, 0 @ Don't pad with nop

