@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sTransitionTypes,object
sTransitionTypes:
	.byte	0x1
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	FlashTransition_Enter
	.word	RunMapPreviewScreen
	.byte	0x2
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	FlashTransition_Enter
	.word	RunMapPreviewScreen
	.byte	0x3
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	FlashTransition_Enter
	.word	RunMapPreviewScreen
	.byte	0x5
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	FlashTransition_Enter
	.word	RunMapPreviewScreen
	.byte	0x6
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	FlashTransition_Enter
	.word	RunMapPreviewScreen
	.byte	0x7
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	FlashTransition_Enter
	.word	RunMapPreviewScreen
	.byte	0x8
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	FlashTransition_Enter
	.word	RunMapPreviewScreen
	.byte	0x9
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	FlashTransition_Enter
	.word	RunMapPreviewScreen
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.word	FlashTransition_Exit
	.word	RunMapPreviewScreen
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.word	FlashTransition_Exit
	.word	RunMapPreviewScreen
	.byte	0x4
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.word	FlashTransition_Exit
	.word	RunMapPreviewScreen
	.byte	0x4
	.byte	0x5
	.byte	0x0
	.byte	0x1
	.word	FlashTransition_Exit
	.word	RunMapPreviewScreen
	.byte	0x4
	.byte	0x6
	.byte	0x0
	.byte	0x1
	.word	FlashTransition_Exit
	.word	RunMapPreviewScreen
	.byte	0x4
	.byte	0x7
	.byte	0x0
	.byte	0x1
	.word	FlashTransition_Exit
	.word	RunMapPreviewScreen
	.byte	0x4
	.byte	0x8
	.byte	0x0
	.byte	0x1
	.word	FlashTransition_Exit
	.word	RunMapPreviewScreen
	.byte	0x4
	.byte	0x9
	.byte	0x0
	.byte	0x1
	.word	FlashTransition_Exit
	.word	RunMapPreviewScreen
	.byte	0x0
	.space	11
	.size	 sTransitionTypes,204
	.align	1, 0
	.type	 sCaveTransitionPalette_White,object
sCaveTransitionPalette_White:
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.size	 sCaveTransitionPalette_White,32
	.align	1, 0
	.type	 sCaveTransitionPalette_Black,object
sCaveTransitionPalette_Black:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sCaveTransitionPalette_Black,32
	.align	1, 0
	.type	 sCaveTransitionPalette_Enter,object
sCaveTransitionPalette_Enter:
	.short	0x5712
	.short	0x842
	.short	0x1084
	.short	0x18c6
	.short	0x2108
	.short	0x294a
	.short	0x318c
	.short	0x39ce
	.size	 sCaveTransitionPalette_Enter,16
	.align	1, 0
	.type	 sCaveTransitionPalette_Exit,object
sCaveTransitionPalette_Exit:
	.short	0x4210
	.short	0x4a52
	.short	0x5294
	.short	0x5ad6
	.short	0x6318
	.short	0x6b5a
	.short	0x739c
	.short	0x7fff
	.size	 sCaveTransitionPalette_Exit,16
	.align	2, 0
	.type	 sCaveTransitionTilemap,object
sCaveTransitionTilemap:
	.word	0x80010
	.word	-0xf1ffec4
	.word	-0xffe0fff
	.word	0x11001
	.word	0x100
	.word	-0x1fee1fff
	.word	-0x4ffe0fee
	.word	-0xf1bfeb0
	.word	0x11013001
	.word	-0x7c1bfe1c
	.word	-0x1ffdc0d0
	.word	-0xfec1ffd
	.word	0x62013001
	.word	0x1001f0e4
	.word	0x2e40301
	.word	0x8043fa0
	.word	0x15e014e0
	.word	0x15e001f0
	.word	0x1f088e4
	.word	-0xffb1bec
	.word	-0x1ffa1fc1
	.word	0x16e00614
	.word	-0x2f1bfe10
	.word	0x60e40601
	.word	0x403ff005
	.word	0x8e0073f
	.word	-0x4f5ce820
	.word	0x190e401
	.word	-0xff81bf8
	.word	0x53fc03f
	.word	-0x1fe71ff7
	.word	-0x1bfe8fe7
	.word	0x181c0150
	.word	0x3ff009e4
	.word	0x3f003ff0
	.word	0xb14e00a
	.word	0x1501ae0
	.word	0xb0130e4
	.word	-0xff58f1c
	.word	0x603ff03f
	.word	0x1be00c3f
	.word	0x101c40e0
	.word	-0x1be31bff
	.word	-0x1ff31be5
	.word	0x3ff03ff0
	.word	-0x1ff2c040
	.word	0x30fe00e
	.word	0xee40fe0
	.word	0x3ff00de4
	.word	-0x17ffc070
	.word	-0x17fc17fe
	.word	0x5e804
	.word	0x7e806e8
	.word	0x9e808e8
	.word	-0x17f51800
	.word	-0x17f317f5
	.word	0xee8000d
	.word	0xfe80fe8
	.word	-0x13fff114
	.word	-0x13f313f3
	.word	0xaec0b
	.word	0x8ec09ec
	.word	0x6ec07ec
	.word	-0x13fa1400
	.word	-0x13fc13fc
	.word	0x1ec1802
	.word	0x703ff0ec
	.word	0x1ce81b3f
	.word	-0x13feef79
	.word	-0xfe413e4
	.word	-0x3fc00fc1
	.word	0x501a5e3f
	.word	0x130ec01
	.word	0x3ff03ff0
	.word	0x2b183f50
	.word	0x17019e8
	.word	0x180150ec
	.word	0x3ff03ff0
	.word	0x173f00ae
	.word	-0x6f13fe50
	.word	-0x4fc00fff
	.word	-0xf47e9c1
	.word	0x1d0ec01
	.word	0x3f303ff0
	.word	-0x75ea17ec
	.word	0x15e801f0
	.word	0x1401f0ec
	.word	0x6ee83ff0
	.word	0x3001f013
	.word	0x1f0ec01
	.word	0x3f900110
	.word	0x12e83611
	.word	0x15001f0
	.word	0x3001f0ec
	.word	0x50ff1101
	.word	-0xf680bc1
	.word	0x6401f001
	.word	-0xffe0f41
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x19001f0
	.size	 sCaveTransitionTilemap,480
	.align	2, 0
	.type	 sCaveTransitionTiles,object
sCaveTransitionTiles:
	.word	0x40010
	.word	-0xfffffcd
	.word	0x11019001
	.word	-0x6ffe0fef
	.word	0x22223301
	.word	0x19001f0
	.word	0x1f03333
	.word	0x44330190
	.word	-0x6ffe0fbc
	.word	-0xfaaaaff
	.word	0x33019001
	.word	0x1f06666
	.word	0x77770190
	.word	0x19001f0
	.word	-0xf7777cd
	.word	-0x66fe6fff
	.word	-0x6ffe0f67
	.word	-0x5555ccff
	.word	0x19001f0
	.word	0x1f0bbbb
	.word	-0x33ccfe70
	.word	-0x6ffe0f34
	.word	-0xf2222ff
	.word	0x39019001
	.word	0x1f0eeee
	.word	0x13001f0
	.word	0x1f0ffff
	.word	-0x4e2e0e01
	.word	-0x4fec0f2d
	.word	-0xee00fff
	.word	-0xe100e05
	.word	0x1f0ffe3
	.word	0x1ff00130
	.word	-0x140e080f
	.word	-0x2c0e200f
	.word	-0xf60380f
	.word	-0xf5555ff
	.word	-0xe240ee1
	.word	-0xf3c0e31
	.word	0x130ff01
	.word	-0x284ee010
	.word	0x1f091f3
	.word	0x1f001f0
	.word	0x308001f0
	.word	0x1
	.size	 sCaveTransitionTiles,180
.text
	.align	2, 0
	.globl	SetUpFieldMove_Flash
	.type	 SetUpFieldMove_Flash,function
	.thumb_func
SetUpFieldMove_Flash:
	push	{lr}
	ldr	r0, .L8
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0x1
	bne	.L6	@cond_branch
	ldr	r0, .L8+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L6	@cond_branch
	ldr	r1, .L8+0x8
	ldr	r0, .L8+0xc
	str	r0, [r1]
	ldr	r1, .L8+0x10
	ldr	r0, .L8+0x14
	str	r0, [r1]
	mov	r0, #0x1
	b	.L7
.L9:
	.align	2, 0
.L8:
	.word	gMapHeader
	.word	0x807
	.word	gFieldCallback2
	.word	FieldCallback_PrepareFadeInFromMenu
	.word	gPostMenuFieldCallback
	.word	FieldCallback_Flash
.L6:
	mov	r0, #0x0
.L7:
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 SetUpFieldMove_Flash,.Lfe1-SetUpFieldMove_Flash
	.align	2, 0
	.type	 FieldCallback_Flash,function
	.thumb_func
FieldCallback_Flash:
	push	{r4, lr}
	bl	CreateFieldEffectShowMon
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	GetCursorSelectionMonId
	ldr	r1, .L11
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1]
	ldr	r1, .L11+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L11+0x8
	lsr	r1, r2, #0x10
	strh	r1, [r0, #0x18]
	strh	r2, [r0, #0x1a]
	pop	{r4}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gFieldEffectArguments
	.word	gTasks
	.word	FldEff_UseFlash
.Lfe2:
	.size	 FieldCallback_Flash,.Lfe2-FieldCallback_Flash
	.align	2, 0
	.type	 FldEff_UseFlash,function
	.thumb_func
FldEff_UseFlash:
	push	{lr}
	mov	r0, #0xc8
	bl	PlaySE
	ldr	r0, .L14
	bl	FlagSet
	ldr	r0, .L14+0x4
	bl	ScriptContext_SetupScript
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	0x807
	.word	EventScript_FldEffFlash
.Lfe3:
	.size	 FldEff_UseFlash,.Lfe3-FldEff_UseFlash
	.align	2, 0
	.type	 CB2_ChangeMapMain,function
	.thumb_func
CB2_ChangeMapMain:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 CB2_ChangeMapMain,.Lfe4-CB2_ChangeMapMain
	.align	2, 0
	.type	 VBC_ChangeMapVBlank,function
	.thumb_func
VBC_ChangeMapVBlank:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 VBC_ChangeMapVBlank,.Lfe5-VBC_ChangeMapVBlank
	.align	2, 0
	.globl	CB2_DoChangeMap
	.type	 CB2_DoChangeMap,function
	.thumb_func
CB2_DoChangeMap:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xc
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x18
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x16
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L20
	mov	r0, sp
	str	r0, [r1]
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	str	r0, [r1, #0x4]
	ldr	r0, .L20+0x4
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r2, #0x0
	str	r2, [sp, #0x4]
	add	r0, sp, #0x4
	str	r0, [r1]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	str	r0, [r1, #0x4]
	ldr	r0, .L20+0x8
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, sp
	strh	r2, [r0]
	str	r0, [r1]
	ldr	r0, .L20+0xc
	str	r0, [r1, #0x4]
	ldr	r0, .L20+0x10
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	bl	ResetPaletteFade
	bl	ResetTasks
	bl	ResetSpriteData
	mov	r0, #0x1
	bl	EnableInterrupts
	ldr	r0, .L20+0x14
	bl	SetVBlankCallback
	ldr	r0, .L20+0x18
	bl	SetMainCallback2
	bl	TryDoMapTransition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L19	@cond_branch
	ldr	r0, .L20+0x1c
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L19:
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	0x40000d4
	.word	-0x7eff4000
	.word	-0x7affff00
	.word	0x5000002
	.word	-0x7efffe01
	.word	VBC_ChangeMapVBlank
	.word	CB2_ChangeMapMain
	.word	gMain
.Lfe6:
	.size	 CB2_DoChangeMap,.Lfe6-CB2_DoChangeMap
	.align	2, 0
	.type	 TryDoMapTransition,function
	.thumb_func
TryDoMapTransition:
	push	{r4, r5, r6, r7, lr}
	bl	GetLastUsedWarpMapType
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	GetCurrentMapType
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	bl	GetLastUsedWarpMapSectionId
	ldr	r5, .L32
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r5, #0x14]
	cmp	r0, r1
	beq	.L23	@cond_branch
	ldrb	r0, [r5, #0x14]
	mov	r1, #0x0
	bl	MapHasPreviewScreen_HandleQLState2
	cmp	r0, #0x1
	bne	.L23	@cond_branch
	ldrb	r0, [r5, #0x14]
	bl	RunMapPreviewScreen
	mov	r0, #0x1
	b	.L30
.L33:
	.align	2, 0
.L32:
	.word	gMapHeader
.L31:
	add	r0, r3, #0x4
	add	r0, r2, r0
	ldr	r0, [r0]
	bl	_call_via_r0
	mov	r0, #0x1
	b	.L30
.L23:
	ldr	r5, .L34
	lsl	r1, r4, #0x1
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L25	@cond_branch
	add	r3, r5, #0
.L27:
	add	r0, r1, r4
	lsl	r2, r0, #0x2
	add	r1, r2, r3
	ldrb	r0, [r1]
	cmp	r0, r7
	bne	.L26	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, r6
	beq	.L31	@cond_branch
.L26:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r4, #0x1
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L27	@cond_branch
.L25:
	mov	r0, #0x0
.L30:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L35:
	.align	2, 0
.L34:
	.word	sTransitionTypes
.Lfe7:
	.size	 TryDoMapTransition,.Lfe7-TryDoMapTransition
	.align	2, 0
	.globl	MapTransitionIsEnter
	.type	 MapTransitionIsEnter,function
	.thumb_func
MapTransitionIsEnter:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r0, #0x18
	lsr	r4, r1, #0x18
	mov	r3, #0x0
	ldr	r1, .L44
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L38	@cond_branch
	add	r6, r1, #0
.L40:
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, r5
	bne	.L39	@cond_branch
	ldrb	r0, [r2, #0x1]
	cmp	r0, r4
	bne	.L39	@cond_branch
	ldrb	r0, [r2, #0x2]
	b	.L43
.L45:
	.align	2, 0
.L44:
	.word	sTransitionTypes
.L39:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L40	@cond_branch
.L38:
	mov	r0, #0x0
.L43:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 MapTransitionIsEnter,.Lfe8-MapTransitionIsEnter
	.align	2, 0
	.globl	MapTransitionIsExit
	.type	 MapTransitionIsExit,function
	.thumb_func
MapTransitionIsExit:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r0, #0x18
	lsr	r4, r1, #0x18
	mov	r3, #0x0
	ldr	r1, .L54
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L48	@cond_branch
	add	r6, r1, #0
.L50:
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, r5
	bne	.L49	@cond_branch
	ldrb	r0, [r2, #0x1]
	cmp	r0, r4
	bne	.L49	@cond_branch
	ldrb	r0, [r2, #0x3]
	b	.L53
.L55:
	.align	2, 0
.L54:
	.word	sTransitionTypes
.L49:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L50	@cond_branch
.L48:
	mov	r0, #0x0
.L53:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 MapTransitionIsExit,.Lfe9-MapTransitionIsExit
	.align	2, 0
	.type	 FlashTransition_Exit,function
	.thumb_func
FlashTransition_Exit:
	push	{lr}
	ldr	r0, .L57
	mov	r1, #0x0
	bl	CreateTask
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	Task_FlashTransition_Exit_0
.Lfe10:
	.size	 FlashTransition_Exit,.Lfe10-FlashTransition_Exit
	.align	2, 0
	.type	 Task_FlashTransition_Exit_0,function
	.thumb_func
Task_FlashTransition_Exit_0:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L60
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L60+0x4
	str	r0, [r1]
	bx	lr
.L61:
	.align	2, 0
.L60:
	.word	gTasks
	.word	Task_FlashTransition_Exit_1
.Lfe11:
	.size	 Task_FlashTransition_Exit_0,.Lfe11-Task_FlashTransition_Exit_0
	.align	2, 0
	.type	 Task_FlashTransition_Exit_1,function
	.thumb_func
Task_FlashTransition_Exit_1:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L63
	ldr	r1, .L63+0x4
	bl	LZ77UnCompVram
	ldr	r0, .L63+0x8
	ldr	r1, .L63+0xc
	bl	LZ77UnCompVram
	ldr	r0, .L63+0x10
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L63+0x14
	mov	r1, #0xe0
	mov	r2, #0x10
	bl	LoadPalette
	ldr	r1, .L63+0x18
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L63+0x1c
	mov	r0, #0x8
	bl	SetGpuReg
	mov	r1, #0x8a
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	ldr	r1, .L63+0x20
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L63+0x24
	str	r1, [r0]
	mov	r2, #0x0
	mov	r1, #0x10
	strh	r1, [r0, #0x8]
	strh	r2, [r0, #0xa]
	pop	{r4}
	pop	{r0}
	bx	r0
.L64:
	.align	2, 0
.L63:
	.word	sCaveTransitionTiles
	.word	0x600c000
	.word	sCaveTransitionTilemap
	.word	0x600f800
	.word	sCaveTransitionPalette_White
	.word	sCaveTransitionPalette_Exit
	.word	0x3e41
	.word	0x1f0c
	.word	gTasks
	.word	Task_FlashTransition_Exit_2
.Lfe12:
	.size	 Task_FlashTransition_Exit_1,.Lfe12-Task_FlashTransition_Exit_1
	.align	2, 0
	.type	 Task_FlashTransition_Exit_2,function
	.thumb_func
Task_FlashTransition_Exit_2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L68
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrh	r4, [r5, #0xa]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	add	r1, r4, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	cmp	r4, #0x10
	bhi	.L66	@cond_branch
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	b	.L67
.L69:
	.align	2, 0
.L68:
	.word	gTasks
.L66:
	mov	r0, #0x0
	strh	r0, [r5, #0xc]
	ldr	r0, .L70
	str	r0, [r5]
.L67:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	Task_FlashTransition_Exit_3
.Lfe13:
	.size	 Task_FlashTransition_Exit_2,.Lfe13-Task_FlashTransition_Exit_2
	.align	2, 0
	.type	 Task_FlashTransition_Exit_3,function
	.thumb_func
Task_FlashTransition_Exit_3:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L75
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r1, .L75+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0xc]
	cmp	r1, #0x7
	bhi	.L73	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xc]
	lsl	r1, r1, #0x1
	ldr	r0, .L75+0x8
	add	r0, r1, r0
	mov	r2, #0x10
	sub	r2, r2, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r1, #0xe0
	bl	LoadPalette
	b	.L74
.L76:
	.align	2, 0
.L75:
	.word	0x1010
	.word	gTasks
	.word	sCaveTransitionPalette_Exit
.L73:
	ldr	r0, .L77
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L77+0x4
	str	r0, [r4]
	mov	r0, #0x8
	strh	r0, [r4, #0xc]
.L74:
	pop	{r4}
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	sCaveTransitionPalette_White
	.word	Task_FlashTransition_Exit_4
.Lfe14:
	.size	 Task_FlashTransition_Exit_3,.Lfe14-Task_FlashTransition_Exit_3
	.align	2, 0
	.type	 Task_FlashTransition_Exit_4,function
	.thumb_func
Task_FlashTransition_Exit_4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L82
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L80	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xc]
	b	.L81
.L83:
	.align	2, 0
.L82:
	.word	gTasks
.L80:
	ldr	r0, .L84
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L81:
	pop	{r0}
	bx	r0
.L85:
	.align	2, 0
.L84:
	.word	gMain
.Lfe15:
	.size	 Task_FlashTransition_Exit_4,.Lfe15-Task_FlashTransition_Exit_4
	.align	2, 0
	.type	 FlashTransition_Enter,function
	.thumb_func
FlashTransition_Enter:
	push	{lr}
	ldr	r0, .L87
	mov	r1, #0x0
	bl	CreateTask
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	Task_FlashTransition_Enter_0
.Lfe16:
	.size	 FlashTransition_Enter,.Lfe16-FlashTransition_Enter
	.align	2, 0
	.type	 Task_FlashTransition_Enter_0,function
	.thumb_func
Task_FlashTransition_Enter_0:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L90
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L90+0x4
	str	r0, [r1]
	bx	lr
.L91:
	.align	2, 0
.L90:
	.word	gTasks
	.word	Task_FlashTransition_Enter_1
.Lfe17:
	.size	 Task_FlashTransition_Enter_0,.Lfe17-Task_FlashTransition_Enter_0
	.align	2, 0
	.type	 Task_FlashTransition_Enter_1,function
	.thumb_func
Task_FlashTransition_Enter_1:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L93
	ldr	r1, .L93+0x4
	bl	LZ77UnCompVram
	ldr	r0, .L93+0x8
	ldr	r1, .L93+0xc
	bl	LZ77UnCompVram
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L93+0x10
	mov	r0, #0x8
	bl	SetGpuReg
	mov	r1, #0x8a
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	ldr	r0, .L93+0x14
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L93+0x18
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L93+0x1c
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L93+0x20
	str	r1, [r0]
	mov	r2, #0x0
	mov	r1, #0x10
	strh	r1, [r0, #0x8]
	strh	r2, [r0, #0xa]
	strh	r2, [r0, #0xc]
	pop	{r4}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	sCaveTransitionTiles
	.word	0x600c000
	.word	sCaveTransitionTilemap
	.word	0x600f800
	.word	0x1f0c
	.word	sCaveTransitionPalette_White
	.word	sCaveTransitionPalette_Black
	.word	gTasks
	.word	Task_FlashTransition_Enter_2
.Lfe18:
	.size	 Task_FlashTransition_Enter_1,.Lfe18-Task_FlashTransition_Enter_1
	.align	2, 0
	.type	 Task_FlashTransition_Enter_2,function
	.thumb_func
Task_FlashTransition_Enter_2:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L98
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r1, [r4, #0xc]
	cmp	r1, #0xf
	bhi	.L96	@cond_branch
	add	r2, r1, #0x1
	add	r0, r2, #0x1
	strh	r0, [r4, #0xc]
	mov	r0, #0xf
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	ldr	r1, .L98+0x4
	add	r0, r0, r1
	lsl	r2, r2, #0x11
	lsr	r2, r2, #0x10
	mov	r1, #0xe0
	bl	LoadPalette
	b	.L97
.L99:
	.align	2, 0
.L98:
	.word	gTasks
	.word	sCaveTransitionPalette_Enter
.L96:
	ldr	r1, .L100
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r1, .L100+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, .L100+0x8
	str	r0, [r4]
.L97:
	pop	{r4}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	0x1010
	.word	0x3e41
	.word	Task_FlashTransition_Enter_3
.Lfe19:
	.size	 Task_FlashTransition_Enter_2,.Lfe19-Task_FlashTransition_Enter_2
	.align	2, 0
	.type	 Task_FlashTransition_Enter_3,function
	.thumb_func
Task_FlashTransition_Enter_3:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L105
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrh	r0, [r5, #0xa]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	cmp	r4, #0
	beq	.L103	@cond_branch
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	b	.L104
.L106:
	.align	2, 0
.L105:
	.word	gTasks
.L103:
	ldr	r0, .L107
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L107+0x4
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L104:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	sCaveTransitionPalette_Black
	.word	gMain
.Lfe20:
	.size	 Task_FlashTransition_Enter_3,.Lfe20-Task_FlashTransition_Enter_3
	.align	2, 0
	.type	 RunMapPreviewScreen,function
	.thumb_func
RunMapPreviewScreen:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L110
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L110+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0xe]
	pop	{r4}
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	Task_MapPreviewScreen_0
	.word	gTasks
.Lfe21:
	.size	 RunMapPreviewScreen,.Lfe21-RunMapPreviewScreen
	.align	2, 0
	.type	 Task_MapPreviewScreen_0,function
	.thumb_func
Task_MapPreviewScreen_0:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L134
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bls	.LCB1131
	b	.L113	@long jump
.LCB1131:
	lsl	r0, r0, #0x2
	ldr	r1, .L134+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L135:
	.align	2, 0
.L134:
	.word	gTasks+0x8
	.word	.L131
	.align	2, 0
	.align	2, 0
.L131:
	.word	.L114
	.word	.L115
	.word	.L117
	.word	.L119
	.word	.L121
	.word	.L124
.L114:
	ldr	r0, .L136
	ldr	r2, [r0, #0xc]
	add	r0, r5, #0
	mov	r1, #0x5
	bl	SetWordTaskArg
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	MapPreview_InitBgs
	ldrb	r0, [r4, #0x6]
	bl	MapPreview_LoadGfx
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	b	.L133
.L137:
	.align	2, 0
.L136:
	.word	gMain
.L115:
	bl	MapPreview_IsGfxLoadFinished
	cmp	r0, #0
	bne	.L113	@cond_branch
	ldrb	r0, [r4, #0x6]
	bl	MapPreview_CreateMapNameWindow
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L133
.L117:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L113	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetWordTaskArg
	bl	SetVBlankCallback
	b	.L133
.L119:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L113	@cond_branch
	ldrb	r0, [r4, #0x6]
	bl	MapPreview_GetDuration
	strh	r0, [r4, #0x4]
	b	.L133
.L121:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x4
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bgt	.L123	@cond_branch
	ldr	r0, .L138
	ldrh	r1, [r0, #0x2c]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L113	@cond_branch
.L123:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	ldr	r2, .L138+0x4
	str	r2, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L133:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L113
.L139:
	.align	2, 0
.L138:
	.word	gMain
	.word	0x7fff
.L124:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L113	@cond_branch
	lsl	r6, r5, #0x2
	mov	r1, #0x0
	add	r0, r4, #0
	add	r0, r0, #0x1e
.L129:
	strh	r1, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r4
	bge	.L129	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	bl	MapPreview_Unload
	ldr	r1, .L140
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L140+0x4
	str	r1, [r0]
.L113:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L141:
	.align	2, 0
.L140:
	.word	gTasks
	.word	Task_FlashTransition_Enter_1
.Lfe22:
	.size	 Task_MapPreviewScreen_0,.Lfe22-Task_MapPreviewScreen_0
.text
	.align	2, 0 @ Don't pad with nop

