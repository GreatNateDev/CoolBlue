@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sSelectedPaletteIndices,object
	.size	 sSelectedPaletteIndices,4
sSelectedPaletteIndices:
	.word	0x0
	.align	2, 0
	.type	 sHofMonPtr,object
	.size	 sHofMonPtr,4
sHofMonPtr:
	.word	0x0
	.align	2, 0
	.type	 sHofGfxPtr,object
	.size	 sHofGfxPtr,4
sHofGfxPtr:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sHof_BgTemplates,object
	.size	 sHof_BgTemplates,12
sHof_BgTemplates:
	.byte	0xf8
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xe1
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xd3
	.byte	0x31
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sWindowTemplate,object
	.size	 sWindowTemplate,8
sWindowTemplate:
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x11
	.byte	0x6
	.byte	0xd
	.short	0x1
	.type	 sTextColors,object
sTextColors:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.space	1
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.space	1
	.byte	0x4
	.byte	0x5
	.byte	0x0
	.space	1
	.size	 sTextColors,12
	.align	2, 0
	.type	 sHallOfFame_ConfettiSpriteSheet,object
sHallOfFame_ConfettiSpriteSheet:
	.word	gFile_graphics_misc_confetti_sheet
	.short	0x220
	.short	0x3e9
	.space	8
	.size	 sHallOfFame_ConfettiSpriteSheet,16
	.align	2, 0
	.type	 sHallOfFame_ConfettiSpritePalette,object
sHallOfFame_ConfettiSpritePalette:
	.word	gFile_graphics_misc_confetti_palette
	.short	0x3e9
	.space	2
	.space	8
	.size	 sHallOfFame_ConfettiSpritePalette,16
	.align	1, 0
	.type	 sHallOfFame_MonFullTeamPositions,object
	.size	 sHallOfFame_MonFullTeamPositions,48
sHallOfFame_MonFullTeamPositions:
	.short	0x78
	.short	0xd2
	.short	0x78
	.short	0x28
	.short	0x146
	.short	0xdc
	.short	0x38
	.short	0x28
	.short	-0x56
	.short	0xdc
	.short	0xb8
	.short	0x28
	.short	0x78
	.short	-0x3e
	.short	0x78
	.short	0x58
	.short	-0x46
	.short	-0x5c
	.short	0xc8
	.short	0x58
	.short	0x136
	.short	-0x5c
	.short	0x28
	.short	0x58
	.align	1, 0
	.type	 sHallOfFame_MonHalfTeamPositions,object
	.size	 sHallOfFame_MonHalfTeamPositions,24
sHallOfFame_MonHalfTeamPositions:
	.short	0x78
	.short	0xea
	.short	0x78
	.short	0x40
	.short	0x146
	.short	0xf4
	.short	0x38
	.short	0x40
	.short	-0x56
	.short	0xf4
	.short	0xb8
	.short	0x40
	.align	2, 0
	.type	 sOamData_Confetti,object
	.size	 sOamData_Confetti,8
sOamData_Confetti:
	.space	1
	.byte	0x0
	.space	1
	.byte	0x0
	.space	4
	.align	2, 0
	.type	 sAnimCmd_Frame00,object
sAnimCmd_Frame00:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame00,8
	.align	2, 0
	.type	 sAnimCmd_Frame01,object
sAnimCmd_Frame01:
	.short	0x1
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame01,8
	.align	2, 0
	.type	 sAnimCmd_Frame02,object
sAnimCmd_Frame02:
	.short	0x2
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame02,8
	.align	2, 0
	.type	 sAnimCmd_Frame03,object
sAnimCmd_Frame03:
	.short	0x3
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame03,8
	.align	2, 0
	.type	 sAnimCmd_Frame04,object
sAnimCmd_Frame04:
	.short	0x4
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame04,8
	.align	2, 0
	.type	 sAnimCmd_Frame05,object
sAnimCmd_Frame05:
	.short	0x5
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame05,8
	.align	2, 0
	.type	 sAnimCmd_Frame06,object
sAnimCmd_Frame06:
	.short	0x6
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame06,8
	.align	2, 0
	.type	 sAnimCmd_Frame07,object
sAnimCmd_Frame07:
	.short	0x7
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame07,8
	.align	2, 0
	.type	 sAnimCmd_Frame08,object
sAnimCmd_Frame08:
	.short	0x8
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame08,8
	.align	2, 0
	.type	 sAnimCmd_Frame09,object
sAnimCmd_Frame09:
	.short	0x9
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame09,8
	.align	2, 0
	.type	 sAnimCmd_Frame10,object
sAnimCmd_Frame10:
	.short	0xa
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame10,8
	.align	2, 0
	.type	 sAnimCmd_Frame11,object
sAnimCmd_Frame11:
	.short	0xb
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame11,8
	.align	2, 0
	.type	 sAnimCmd_Frame12,object
sAnimCmd_Frame12:
	.short	0xc
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame12,8
	.align	2, 0
	.type	 sAnimCmd_Frame13,object
sAnimCmd_Frame13:
	.short	0xd
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame13,8
	.align	2, 0
	.type	 sAnimCmd_Frame14,object
sAnimCmd_Frame14:
	.short	0xe
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame14,8
	.align	2, 0
	.type	 sAnimCmd_Frame15,object
sAnimCmd_Frame15:
	.short	0xf
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame15,8
	.align	2, 0
	.type	 sAnimCmd_Frame16,object
sAnimCmd_Frame16:
	.short	0x10
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_Frame16,8
	.align	2, 0
	.type	 sSpriteAnimTable_Confetti,object
sSpriteAnimTable_Confetti:
	.word	sAnimCmd_Frame00
	.word	sAnimCmd_Frame01
	.word	sAnimCmd_Frame02
	.word	sAnimCmd_Frame03
	.word	sAnimCmd_Frame04
	.word	sAnimCmd_Frame05
	.word	sAnimCmd_Frame06
	.word	sAnimCmd_Frame07
	.word	sAnimCmd_Frame08
	.word	sAnimCmd_Frame09
	.word	sAnimCmd_Frame10
	.word	sAnimCmd_Frame11
	.word	sAnimCmd_Frame12
	.word	sAnimCmd_Frame13
	.word	sAnimCmd_Frame14
	.word	sAnimCmd_Frame15
	.word	sAnimCmd_Frame16
	.size	 sSpriteAnimTable_Confetti,68
	.align	2, 0
	.type	 sSpriteTemplate_Confetti,object
	.size	 sSpriteTemplate_Confetti,24
sSpriteTemplate_Confetti:
	.short	0x3e9
	.short	0x3e9
	.word	sOamData_Confetti
	.word	sSpriteAnimTable_Confetti
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_Confetti
	.align	1, 0
	.type	 sHallOfFame_Pal,object
sHallOfFame_Pal:
	.short	0x0
	.short	0x0
	.short	0x7716
	.short	0x109f
	.short	0x76d4
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x2108
	.short	0x7fff
	.size	 sHallOfFame_Pal,32
	.align	2, 0
	.type	 sHallOfFame_Gfx,object
sHallOfFame_Gfx:
	.word	0x3a010
	.word	-0xfffffcd
	.word	0x11019001
	.word	-0x6ffe0fef
	.word	0x22220001
	.word	0x44442222
	.word	-0xf1fbbbc
	.word	0x70073007
	.word	0x11113329
	.word	0x13033331
	.word	0x33333311
	.word	-0xffcffcf
	.word	0x1108049
	.word	0x1111ffff
	.word	0x4913eeee
	.word	-0x1ef8ff0f
	.word	0x110b00ee
	.word	0x1d90ef
	.word	0x1efff11e
	.word	0x1eeee11e
	.word	0x1500ef4a
	.word	0xb00efee
	.word	-0xee06f01
	.word	-0xe01ff
	.word	-0x111e111f
	.word	-0xedeee00
	.word	0x1e0300ee
	.word	0x10e1ef11
	.word	0x3b40d029
	.word	0x1e7c00
	.word	-0xcccee88
	.word	0x331100ef
	.word	0x3331feef
	.word	0x10e8f3ef
	.word	0x105f9003
	.word	0x7c003394
	.word	0x3ae1133e
	.word	0xc003eee
	.word	0x1800310
	.word	-0x1070ef0f
	.word	-0x15cff7f
	.word	-0x1e0111e2
	.word	0x33a300ef
	.word	0x6800eeef
	.word	0x1efe0130
	.word	0x3009300
	.word	-0xee100f6
	.word	-0x5eefe2
	.word	0x17ef0300
	.word	-0x7f011102
	.word	0x11313f
	.word	-0x28ff9f00
	.word	0xef332f
	.word	-0x70ff00f6
	.word	0x7b209f60
	.word	-0x10bbfc00
	.word	0x3efe2201
	.word	0x33070013
	.word	-0x3f01af0f
	.word	0x110ef80
	.word	-0x10e110f
	.word	-0xe100100
	.word	-0xe011101
	.word	0x921ebf1
	.word	0x111120a0
	.word	-0xed9fe12
	.word	0x1107d00
	.word	-0x7e6eff15
	.word	-0x1d2ffa3
	.word	0x10ffb100
	.word	-0x1c6ef55
	.word	-0x67ef4bf0
	.word	0x3108f11
	.word	-0x76df60ef
	.word	-0x5f100960
	.word	0x1fe8d00
	.word	-0x1eee0ead
	.word	-0xe501ee2
	.word	0x641011b3
	.word	0x19110ef
	.word	0x406fa07c
	.word	-0x5bff344d
	.word	-0x1100fd00
	.word	0x611e2d01
	.word	0x6314612f
	.word	0x11470133
	.word	-0x1c11cc79
	.word	0x23318810
	.word	0x210170f7
	.word	0x950087
	.word	0xa00ff03
	.word	0x1123fe0
	.word	-0x33ff0ebf
	.word	-0x1e111
	.word	-0x70cbfd12
	.word	-0xe11e130
	.word	0x10b7201e
	.word	0x23cf0ee
	.word	-0x7cfe10e9
	.word	0x1a011002
	.word	0x20cc0133
	.word	0x70a7017b
	.word	0xf35701
	.word	0x7c00ef80
	.word	-0xe45dd12
	.word	-0x2312fee3
	.word	0x1009621
	.word	-0x1e9fff02
	.word	-0xe06ffe1
	.word	0xb42a5fe
	.word	0x113ff1ee
	.word	-0x158fd01
	.word	0xe04101
	.word	-0x2fc0dd44
	.word	0x1
	.size	 sHallOfFame_Gfx,460
	.align	2, 0
	.type	 sDummyHofMon,object
	.size	 sDummyHofMon,20
sDummyHofMon:
	.word	0x3ea03ea
	.word	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.type	 sUnused,object
sUnused:
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0x6
	.byte	0x4
	.byte	0x5
	.size	 sUnused,6
.text
	.align	2, 0
	.type	 VBlankCB_HofIdle,function
	.thumb_func
VBlankCB_HofIdle:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 VBlankCB_HofIdle,.Lfe1-VBlankCB_HofIdle
	.align	2, 0
	.type	 CB2_HofIdle,function
	.thumb_func
CB2_HofIdle:
	push	{lr}
	bl	RunTasks
	bl	RunTextPrinters
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 CB2_HofIdle,.Lfe2-CB2_HofIdle
	.align	2, 0
	.type	 InitHallOfFameScreen,function
	.thumb_func
InitHallOfFameScreen:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L19
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bls	.LCB40
	b	.L7	@long jump
.LCB40:
	lsl	r0, r0, #0x2
	ldr	r1, .L19+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L20:
	.align	2, 0
.L19:
	.word	gMain
	.word	.L15
	.align	2, 0
	.align	2, 0
.L15:
	.word	.L8
	.word	.L9
	.word	.L10
	.word	.L11
	.word	.L13
.L8:
	ldr	r1, .L21
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	ClearVramOamPltt_LoadHofPal
	ldr	r4, .L21+0x4
	ldr	r0, .L21+0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r0, .L21+0xc
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L7
.L22:
	.align	2, 0
.L21:
	.word	gHelpSystemEnabled
	.word	sHofGfxPtr
	.word	0x2008
	.word	gMain
.L9:
	bl	HofInit_ResetGpuBuffersAndLoadConfettiGfx
	b	.L18
.L10:
	ldr	r1, .L23
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0xe2
	lsl	r1, r1, #0x3
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	bl	Hof_InitBgs
	ldr	r0, .L23+0x4
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L18
.L24:
	.align	2, 0
.L23:
	.word	0x3f42
	.word	sHofGfxPtr
.L11:
	bl	DrawHofBackground
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L7	@cond_branch
	ldr	r0, .L25
	bl	SetVBlankCallback
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L18:
	ldr	r1, .L25+0x4
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L7
.L26:
	.align	2, 0
.L25:
	.word	VBlankCB_HofIdle
	.word	gMain
.L13:
	bl	UpdatePaletteFade
	ldr	r0, .L27
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldr	r0, .L27+0x4
	bl	SetMainCallback2
	mov	r0, #0x8f
	lsl	r0, r0, #0x1
	bl	PlayBGM
	mov	r0, #0x0
	b	.L17
.L28:
	.align	2, 0
.L27:
	.word	gPaletteFade
	.word	CB2_HofIdle
.L7:
	mov	r0, #0x1
.L17:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 InitHallOfFameScreen,.Lfe3-InitHallOfFameScreen
	.align	2, 0
	.globl	CB2_DoHallOfFameScreen
	.type	 CB2_DoHallOfFameScreen,function
	.thumb_func
CB2_DoHallOfFameScreen:
	push	{r4, lr}
	bl	InitHallOfFameScreen
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L30	@cond_branch
	ldr	r0, .L31
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L31+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	ldr	r4, .L31+0x8
	mov	r0, #0x78
	bl	AllocZeroed
	str	r0, [r4]
.L30:
	pop	{r4}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	Task_Hof_InitMonData
	.word	gTasks
	.word	sHofMonPtr
.Lfe4:
	.size	 CB2_DoHallOfFameScreen,.Lfe4-CB2_DoHallOfFameScreen
	.align	2, 0
	.globl	CB2_DoHallOfFameScreenDontSaveData
	.type	 CB2_DoHallOfFameScreenDontSaveData,function
	.thumb_func
CB2_DoHallOfFameScreenDontSaveData:
	push	{lr}
	bl	InitHallOfFameScreen
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L34	@cond_branch
	ldr	r0, .L35
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L35+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
.L34:
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	Task_Hof_InitMonData
	.word	gTasks
.Lfe5:
	.size	 CB2_DoHallOfFameScreenDontSaveData,.Lfe5-CB2_DoHallOfFameScreenDontSaveData
	.align	2, 0
	.type	 Task_Hof_InitMonData,function
	.thumb_func
Task_Hof_InitMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L58
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0xc]
	mov	r7, #0x0
	ldr	r0, .L58+0x4
	mov	r9, r0
.L41:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L58+0x8
	add	r6, r1, r0
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L42	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, r9
	ldr	r3, [r1]
	lsl	r4, r7, #0x2
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r3, r3, r4
	ldr	r2, .L58+0xc
	add	r1, r2, #0
	and	r0, r0, r1
	ldrh	r1, [r3, #0x8]
	ldr	r5, .L58+0x10
	add	r2, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x8]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetMonData
	mov	r2, r9
	ldr	r1, [r2]
	add	r1, r1, r4
	str	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetMonData
	mov	r5, r9
	ldr	r1, [r5]
	add	r1, r1, #0x4
	add	r1, r1, r4
	str	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r2, [r5]
	add	r2, r2, r4
	lsl	r0, r0, #0x1
	ldrb	r3, [r2, #0x9]
	mov	r1, #0x1
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x9]
	add	r0, r6, #0
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	mov	r2, #0x0
	mov	r6, r8
	lsl	r5, r6, #0x2
	ldr	r3, .L58+0x4
.L46:
	ldr	r0, [r3]
	add	r1, r2, r4
	add	r0, r0, #0xa
	add	r0, r0, r1
	mov	r6, sp
	add	r1, r6, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x9
	bls	.L46	@cond_branch
	ldr	r0, .L58
	mov	r2, r8
	add	r1, r5, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	b	.L40
.L59:
	.align	2, 0
.L58:
	.word	gTasks
	.word	sHofMonPtr
	.word	gPlayerParty
	.word	0x1ff
	.word	-0x200
.L42:
	mov	r6, r9
	ldr	r3, [r6]
	lsl	r2, r7, #0x2
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r4, r3, r2
	ldrh	r0, [r4, #0x8]
	ldr	r6, .L60
	add	r1, r6, #0
	and	r0, r0, r1
	strh	r0, [r4, #0x8]
	str	r5, [r4]
	add	r3, r3, #0x4
	add	r3, r3, r2
	str	r5, [r3]
	ldrb	r1, [r4, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	strb	r0, [r4, #0x9]
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, r2
	mov	r1, #0xff
	strb	r1, [r0, #0xa]
	mov	r2, r8
	lsl	r5, r2, #0x2
.L40:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x5
	bhi	.LCB459
	b	.L41	@long jump
.LCB459:
	ldr	r0, .L60+0x4
	mov	r3, #0x0
	str	r3, [r0]
	ldr	r4, .L60+0x8
	mov	r6, r8
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r2, r1, r4
	strh	r3, [r2, #0xa]
	mov	r0, #0xff
	strh	r0, [r2, #0x10]
	mov	r7, #0x0
	add	r3, r4, #0
	add	r3, r3, #0x8
	mov	r2, #0xff
.L53:
	add	r0, r7, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x5
	bls	.L53	@cond_branch
	mov	r1, r8
	add	r0, r5, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L55	@cond_branch
	ldr	r0, .L60+0xc
	b	.L57
.L61:
	.align	2, 0
.L60:
	.word	-0x200
	.word	sSelectedPaletteIndices
	.word	gTasks
	.word	Task_Hof_StartDisplayingMons
.L55:
	ldr	r0, .L62
.L57:
	str	r0, [r1]
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	Task_Hof_InitTeamSaveData
.Lfe6:
	.size	 Task_Hof_InitMonData,.Lfe6-Task_Hof_InitMonData
	.align	2, 0
	.type	 Task_Hof_InitTeamSaveData,function
	.thumb_func
Task_Hof_InitTeamSaveData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r7, .L81
	bl	SaveQuestLogData
	ldr	r0, .L81+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L65	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r0, r7, #0
	mov	r1, #0x0
	bl	memset
	b	.L66
.L82:
	.align	2, 0
.L81:
	.word	gDecompressionBuffer
	.word	gHasHallOfFameRecords
.L65:
	mov	r0, #0x3
	bl	LoadGameSave
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L66	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r0, r7, #0
	mov	r1, #0x0
	bl	memset
.L66:
	mov	r5, #0x0
	ldrh	r1, [r7, #0x8]
	ldr	r2, .L83
	add	r0, r2, #0
	and	r0, r0, r1
	mov	r1, r9
	lsl	r1, r1, #0x2
	mov	r8, r1
	cmp	r0, #0
	beq	.L69	@cond_branch
.L70:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r7, r7, #0x78
	cmp	r5, #0x31
	bhi	.L80	@cond_branch
	ldrh	r1, [r7, #0x8]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L70	@cond_branch
.L69:
	cmp	r5, #0x31
	bls	.L74	@cond_branch
.L80:
	ldr	r4, .L83+0x4
	add	r6, r4, #0
	add	r4, r4, #0x78
	mov	r5, #0x0
	sub	r7, r7, #0x78
.L78:
	add	r0, r6, #0
	add	r1, r4, #0
	mov	r2, #0x78
	bl	memcpy
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r6, r6, #0x78
	add	r4, r4, #0x78
	cmp	r5, #0x30
	bls	.L78	@cond_branch
.L74:
	ldr	r0, .L83+0x8
	ldr	r1, [r0]
	add	r0, r7, #0
	mov	r2, #0x78
	bl	memcpy
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L83+0xc
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r1, .L83+0x10
	mov	r0, r8
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L83+0x14
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	0x1ff
	.word	gDecompressionBuffer
	.word	sHofMonPtr
	.word	gText_SavingDontTurnOffThePower2
	.word	gTasks
	.word	Task_Hof_TrySaveData
.Lfe7:
	.size	 Task_Hof_InitTeamSaveData,.Lfe7-Task_Hof_InitTeamSaveData
	.align	2, 0
	.type	 Task_Hof_TrySaveData,function
	.thumb_func
Task_Hof_TrySaveData:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L86
	ldr	r0, .L86+0x4
	str	r0, [r1]
	mov	r0, #0x3
	bl	TrySavingData
	mov	r0, #0x30
	bl	PlaySE
	ldr	r1, .L86+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L86+0xc
	str	r1, [r0]
	mov	r1, #0x20
	strh	r1, [r0, #0xe]
	pop	{r4}
	pop	{r0}
	bx	r0
.L87:
	.align	2, 0
.L86:
	.word	gGameContinueCallback
	.word	CB2_DoHallOfFameScreenDontSaveData
	.word	gTasks
	.word	Task_Hof_DelayAfterSave
.Lfe8:
	.size	 Task_Hof_TrySaveData,.Lfe8-Task_Hof_TrySaveData
	.align	2, 0
	.type	 Task_Hof_DelayAfterSave,function
	.thumb_func
Task_Hof_DelayAfterSave:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L91
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r2, [r1, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L89	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xe]
	b	.L90
.L92:
	.align	2, 0
.L91:
	.word	gTasks
.L89:
	ldr	r0, .L93
	str	r0, [r1]
.L90:
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	Task_Hof_StartDisplayingMons
.Lfe9:
	.size	 Task_Hof_DelayAfterSave,.Lfe9-Task_Hof_DelayAfterSave
	.align	2, 0
	.type	 Task_Hof_StartDisplayingMons,function
	.thumb_func
Task_Hof_StartDisplayingMons:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L96
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L96+0x4
	str	r0, [r1]
	bx	lr
.L97:
	.align	2, 0
.L96:
	.word	gTasks
	.word	Task_Hof_DisplayMon
.Lfe10:
	.size	 Task_Hof_StartDisplayingMons,.Lfe10-Task_Hof_StartDisplayingMons
	.align	2, 0
	.type	 Task_Hof_DisplayMon,function
	.thumb_func
Task_Hof_DisplayMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L102
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r6, [r1, #0xa]
	ldr	r2, .L102+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	ldr	r2, [r2]
	add	r4, r2, r0
	mov	r2, #0xc
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x3
	ble	.L99	@cond_branch
	ldr	r1, .L102+0x8
	b	.L101
.L103:
	.align	2, 0
.L102:
	.word	gTasks
	.word	sHofMonPtr
	.word	sHallOfFame_MonFullTeamPositions
.L99:
	ldr	r1, .L104
.L101:
	lsl	r2, r6, #0x3
	add	r0, r2, r1
	ldrh	r3, [r0]
	add	r0, r1, #0x2
	add	r0, r2, r0
	ldrh	r5, [r0]
	add	r0, r1, #0x4
	add	r0, r2, r0
	ldrh	r0, [r0]
	mov	r9, r0
	add	r1, r1, #0x6
	add	r2, r2, r1
	ldrh	r2, [r2]
	mov	r8, r2
	ldrh	r0, [r4, #0x8]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x17
	ldr	r1, [r4]
	ldr	r2, [r4, #0x4]
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	str	r3, [sp]
	lsl	r3, r5, #0x10
	asr	r3, r3, #0x10
	str	r3, [sp, #0x4]
	lsl	r3, r6, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x8]
	ldr	r3, .L104+0x4
	str	r3, [sp, #0xc]
	mov	r3, #0x1
	bl	CreateMonPicSprite_HandleDeoxys
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L104+0x8
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r3
	mov	r4, #0x0
	mov	r5, r9
	strh	r5, [r2, #0x30]
	mov	r5, r8
	strh	r5, [r2, #0x32]
	strh	r4, [r2, #0x2e]
	add	r3, r3, #0x1c
	add	r1, r1, r3
	ldr	r2, .L104+0xc
	str	r2, [r1]
	ldr	r5, .L104+0x10
	add	r1, r6, #0x5
	lsl	r1, r1, #0x1
	lsl	r4, r7, #0x2
	add	r4, r4, r7
	lsl	r4, r4, #0x3
	add	r1, r1, r4
	add	r2, r5, #0
	add	r2, r2, #0x8
	add	r1, r1, r2
	strh	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	add	r4, r4, r5
	ldr	r0, .L104+0x14
	str	r0, [r4]
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L105:
	.align	2, 0
.L104:
	.word	sHallOfFame_MonHalfTeamPositions
	.word	0xffff
	.word	gSprites
	.word	SpriteCB_GetOnScreen
	.word	gTasks
	.word	Task_Hof_PlayMonCryAndPrintInfo
.Lfe11:
	.size	 Task_Hof_DisplayMon,.Lfe11-Task_Hof_DisplayMon
	.align	2, 0
	.type	 Task_Hof_PlayMonCryAndPrintInfo,function
	.thumb_func
Task_Hof_PlayMonCryAndPrintInfo:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L109
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	lsl	r3, r3, #0x3
	add	r5, r3, r4
	ldrh	r1, [r5, #0xa]
	ldr	r2, .L109+0x4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, [r2]
	add	r6, r2, r0
	ldr	r2, .L109+0x8
	add	r1, r1, #0x5
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	add	r4, r4, #0x8
	add	r1, r1, r4
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2e
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L107	@cond_branch
	ldrh	r2, [r6, #0x8]
	ldr	r0, .L109+0xc
	and	r0, r0, r2
	ldr	r1, .L109+0x10
	cmp	r0, r1
	beq	.L108	@cond_branch
	lsl	r0, r2, #0x17
	lsr	r0, r0, #0x17
	mov	r1, #0x0
	bl	PlayCry_Normal
.L108:
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, #0xe
	bl	HallOfFame_PrintMonInfo
	mov	r0, #0x78
	strh	r0, [r5, #0xe]
	ldr	r0, .L109+0x14
	str	r0, [r5]
.L107:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L110:
	.align	2, 0
.L109:
	.word	gTasks
	.word	sHofMonPtr
	.word	gSprites
	.word	0x1ff
	.word	0x19d
	.word	Task_Hof_TryDisplayAnotherMon
.Lfe12:
	.size	 Task_Hof_PlayMonCryAndPrintInfo,.Lfe12-Task_Hof_PlayMonCryAndPrintInfo
	.align	2, 0
	.type	 Task_Hof_TryDisplayAnotherMon,function
	.thumb_func
Task_Hof_TryDisplayAnotherMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L116
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r6, r0, #0x3
	add	r4, r6, r2
	ldrh	r3, [r4, #0xa]
	ldr	r1, .L116+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, [r1]
	add	r1, r1, r0
	mov	r9, r1
	ldrh	r1, [r4, #0xe]
	mov	r7, #0xe
	ldrsh	r0, [r4, r7]
	mov	ip, r2
	cmp	r0, #0
	beq	.L112	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L113
.L117:
	.align	2, 0
.L116:
	.word	gTasks
	.word	sHofMonPtr
.L112:
	ldr	r2, .L118
	ldr	r0, .L118+0x4
	mov	r8, r0
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	mov	r1, ip
	add	r1, r1, #0x8
	add	r6, r0, r1
	mov	r7, #0x0
	ldrsh	r1, [r6, r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r0
	ldr	r3, [r2]
	orr	r3, r3, r1
	str	r3, [r2]
	ldrh	r2, [r4, #0xa]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bgt	.L114	@cond_branch
	mov	r7, r9
	ldrh	r1, [r7, #0x1c]
	ldr	r0, .L118+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L114	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0xa]
	ldr	r0, .L118+0xc
	str	r0, [sp]
	add	r0, r3, #0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0xc
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldr	r0, .L118+0x10
	str	r0, [r4]
	b	.L113
.L119:
	.align	2, 0
.L118:
	.word	sSelectedPaletteIndices
	.word	gSprites
	.word	0x1ff
	.word	0x7716
	.word	Task_Hof_DisplayMon
.L114:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldr	r1, .L120
	str	r1, [r0]
.L113:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	Task_Hof_PaletteFadeAndPrintWelcomeText
.Lfe13:
	.size	 Task_Hof_TryDisplayAnotherMon,.Lfe13-Task_Hof_TryDisplayAnotherMon
	.align	2, 0
	.type	 Task_Hof_PaletteFadeAndPrintWelcomeText,function
	.thumb_func
Task_Hof_PaletteFadeAndPrintWelcomeText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L129
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r3, #0x0
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r5, r0, #0x3
	ldr	r0, .L129+0x4
	mov	ip, r0
	mov	r8, r1
	ldr	r6, .L129+0x8
	mov	r7, #0xd
	neg	r7, r7
.L126:
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	mov	r2, ip
	add	r1, r0, r2
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xff
	beq	.L125	@cond_branch
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
.L125:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x5
	bls	.L126	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xf
	bl	HallOfFame_PrintWelcomeText
	mov	r0, #0x62
	bl	PlaySE
	ldr	r1, .L129+0xc
	mov	r2, r8
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0xe]
	ldr	r1, .L129+0x10
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	-0x10000
	.word	gTasks+0x8
	.word	gSprites
	.word	gTasks
	.word	Task_Hof_ApplauseAndConfetti
.Lfe14:
	.size	 Task_Hof_PaletteFadeAndPrintWelcomeText,.Lfe14-Task_Hof_PaletteFadeAndPrintWelcomeText
	.align	2, 0
	.type	 Task_Hof_ApplauseAndConfetti,function
	.thumb_func
Task_Hof_ApplauseAndConfetti:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r7, .L141
	lsl	r4, r6, #0x2
	add	r0, r4, r6
	lsl	r5, r0, #0x3
	add	r1, r5, r7
	ldrh	r2, [r1, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L132	@cond_branch
	sub	r2, r2, #0x1
	strh	r2, [r1, #0xe]
	mov	r0, #0x3
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L134	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6e
	ble	.L134	@cond_branch
	bl	Hof_SpawnConfetti
	b	.L134
.L142:
	.align	2, 0
.L141:
	.word	gTasks
.L132:
	mov	r3, #0x0
	mov	r9, r4
	ldr	r0, .L143
	mov	sl, r0
	add	r4, r5, #0
	add	r7, r7, #0x8
	mov	r8, r7
	ldr	r7, .L143+0x4
	mov	r1, #0xd
	neg	r1, r1
	mov	ip, r1
	mov	r5, #0x4
.L138:
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, r8
	add	r1, r0, r2
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xff
	beq	.L137	@cond_branch
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	mov	r0, ip
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
.L137:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x5
	bls	.L138	@cond_branch
	mov	r3, sl
	ldr	r0, [r3]
	ldr	r1, .L143+0x8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0xc
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r1, .L143+0xc
	mov	r2, r9
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x7
	strh	r1, [r0, #0xe]
	ldr	r1, .L143+0x10
	str	r1, [r0]
.L134:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L144:
	.align	2, 0
.L143:
	.word	sSelectedPaletteIndices
	.word	gSprites
	.word	0x7716
	.word	gTasks
	.word	Task_Hof_WaitBorderFadeAway
.Lfe15:
	.size	 Task_Hof_ApplauseAndConfetti,.Lfe15-Task_Hof_ApplauseAndConfetti
	.align	2, 0
	.type	 Task_Hof_WaitBorderFadeAway,function
	.thumb_func
Task_Hof_WaitBorderFadeAway:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L148
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r2, [r1, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r1, r3]
	cmp	r0, #0xf
	ble	.L146	@cond_branch
	ldr	r0, .L148+0x4
	str	r0, [r1]
	b	.L147
.L149:
	.align	2, 0
.L148:
	.word	gTasks
	.word	Task_Hof_SpawnPlayerPic
.L146:
	add	r0, r2, #0x1
	strh	r0, [r1, #0xe]
	mov	r0, #0xe
	ldrsh	r1, [r1, r0]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
.L147:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 Task_Hof_WaitBorderFadeAway,.Lfe16-Task_Hof_WaitBorderFadeAway
	.align	2, 0
	.type	 Task_Hof_SpawnPlayerPic,function
	.thumb_func
Task_Hof_SpawnPlayerPic:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	ldr	r0, .L151
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x1
	bl	PlayerGenderToFrontTrainerPicId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x6
	str	r1, [sp]
	ldr	r1, .L151+0x4
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x78
	mov	r3, #0x48
	bl	CreateTrainerPicSprite
	ldr	r1, .L151+0x8
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	strh	r0, [r4, #0x10]
	ldr	r0, .L151+0xc
	bl	AddWindow
	ldr	r1, .L151+0x10
	mov	r0, #0x1
	mov	r2, #0xd0
	bl	LoadStdWindowGfx
	mov	r0, #0x78
	strh	r0, [r4, #0xe]
	ldr	r0, .L151+0x14
	str	r0, [r4]
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	gSaveBlock2Ptr
	.word	0xffff
	.word	gTasks
	.word	sWindowTemplate
	.word	0x21d
	.word	Task_Hof_WaitAndPrintPlayerInfo
.Lfe17:
	.size	 Task_Hof_SpawnPlayerPic,.Lfe17-Task_Hof_SpawnPlayerPic
	.align	2, 0
	.type	 Task_Hof_WaitAndPrintPlayerInfo,function
	.thumb_func
Task_Hof_WaitAndPrintPlayerInfo:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L158
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0xe]
	mov	r1, #0xe
	ldrsh	r5, [r4, r1]
	cmp	r5, #0
	beq	.L154	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L155
.L159:
	.align	2, 0
.L158:
	.word	gTasks
.L154:
	ldr	r2, .L160
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrh	r2, [r1, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	cmp	r0, #0xc0
	beq	.L156	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x20]
	b	.L155
.L161:
	.align	2, 0
.L160:
	.word	gSprites
.L156:
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x1
	mov	r1, #0x2
	bl	HallOfFame_PrintPlayerInfo
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L162
	str	r5, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L162+0x4
	str	r0, [r4]
.L155:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	gText_LeagueChamp
	.word	Task_Hof_ExitOnKeyPressed
.Lfe18:
	.size	 Task_Hof_WaitAndPrintPlayerInfo,.Lfe18-Task_Hof_WaitAndPrintPlayerInfo
	.align	2, 0
	.type	 Task_Hof_ExitOnKeyPressed,function
	.thumb_func
Task_Hof_ExitOnKeyPressed:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L166
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L165	@cond_branch
	mov	r0, #0x4
	bl	FadeOutBGM
	ldr	r0, .L166+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L166+0x8
	str	r0, [r1]
.L165:
	pop	{r4}
	pop	{r0}
	bx	r0
.L167:
	.align	2, 0
.L166:
	.word	gMain
	.word	gTasks
	.word	Task_Hof_HandlePaletteOnExit
.Lfe19:
	.size	 Task_Hof_ExitOnKeyPressed,.Lfe19-Task_Hof_ExitOnKeyPressed
	.align	2, 0
	.type	 Task_Hof_HandlePaletteOnExit,function
	.thumb_func
Task_Hof_HandlePaletteOnExit:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L169
	ldr	r1, .L169+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	bl	CpuSet
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x8
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L169+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L169+0xc
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L170:
	.align	2, 0
.L169:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	gTasks
	.word	Task_Hof_HandleExit
.Lfe20:
	.size	 Task_Hof_HandlePaletteOnExit,.Lfe20-Task_Hof_HandlePaletteOnExit
	.align	2, 0
	.type	 Task_Hof_HandleExit,function
	.thumb_func
Task_Hof_HandleExit:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L181
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L172	@cond_branch
	lsl	r7, r6, #0x2
	ldr	r1, .L181+0x4
	add	r0, r7, r6
	lsl	r0, r0, #0x3
	add	r1, r1, #0x12
	add	r4, r0, r1
	mov	r5, #0x5
.L176:
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L175	@cond_branch
	bl	FreeAndDestroyMonPicSprite
.L175:
	add	r4, r4, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L176	@cond_branch
	ldr	r0, .L181+0x4
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x10]
	bl	FreeAndDestroyTrainerPicSprite
	mov	r0, #0x0
	bl	HideBg
	mov	r0, #0x1
	bl	HideBg
	mov	r0, #0x3
	bl	HideBg
	bl	FreeAllWindowBuffers
	mov	r0, #0x1
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x3
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r4, .L181+0x8
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L179	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L179:
	ldr	r4, .L181+0xc
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L180	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L180:
	bl	SetWarpsToRollCredits
.L172:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L182:
	.align	2, 0
.L181:
	.word	gPaletteFade
	.word	gTasks
	.word	sHofGfxPtr
	.word	sHofMonPtr
.Lfe21:
	.size	 Task_Hof_HandleExit,.Lfe21-Task_Hof_HandleExit
	.align	2, 0
	.type	 SetWarpsToRollCredits,function
	.thumb_func
SetWarpsToRollCredits:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r0, .L184
	mov	r1, #0x1
	bl	VarSet
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	bl	FlagSet
	ldr	r1, .L184+0x4
	mov	r0, #0x2
	strb	r0, [r1]
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x6
	str	r0, [sp]
	mov	r0, #0x3
	mov	r1, #0x9
	mov	r3, #0xb
	bl	SetWarpDestination
	bl	DoWarp
	bl	ResetInitialPlayerAvatarState
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L185:
	.align	2, 0
.L184:
	.word	0x4085
	.word	gDisableMapMusicChangeOnMapLoad
.Lfe22:
	.size	 SetWarpsToRollCredits,.Lfe22-SetWarpsToRollCredits
	.align	2, 0
	.globl	CB2_InitHofPC
	.type	 CB2_InitHofPC,function
	.thumb_func
CB2_InitHofPC:
	push	{r4, lr}
	ldr	r0, .L199
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bhi	.L189	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L199+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L200:
	.align	2, 0
.L199:
	.word	gMain
	.word	.L197
	.align	2, 0
	.align	2, 0
.L197:
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L194
	.word	.L196
.L189:
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	ClearVramOamPltt_LoadHofPal
	ldr	r4, .L201
	ldr	r0, .L201+0x4
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r0, .L201+0x8
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L187
.L202:
	.align	2, 0
.L201:
	.word	sHofGfxPtr
	.word	0x2008
	.word	gMain
.L190:
	bl	HofInit_ResetGpuBuffersAndLoadConfettiGfx
	b	.L198
.L191:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	bl	Hof_InitBgs
	b	.L198
.L192:
	bl	DrawHofBackground
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BeginPCScreenEffect_TurnOn
	ldr	r0, .L203
	bl	SetVBlankCallback
	b	.L198
.L204:
	.align	2, 0
.L203:
	.word	VBlankCB_HofIdle
.L194:
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	bl	IsPCScreenEffectRunning_TurnOn
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
.L198:
	ldr	r1, .L205
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L187
.L206:
	.align	2, 0
.L205:
	.word	gMain
.L196:
	ldr	r1, .L207
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0xe2
	lsl	r1, r1, #0x3
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L207+0x4
	mov	r1, #0x0
	bl	CreateTask
	ldr	r4, .L207+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r0, .L207+0xc
	bl	SetMainCallback2
.L187:
	pop	{r4}
	pop	{r0}
	bx	r0
.L208:
	.align	2, 0
.L207:
	.word	0x3f42
	.word	Task_HofPC_CopySaveData
	.word	sHofMonPtr
	.word	CB2_HofIdle
.Lfe23:
	.size	 CB2_InitHofPC,.Lfe23-CB2_InitHofPC
	.align	2, 0
	.type	 Task_HofPC_CopySaveData,function
	.thumb_func
Task_HofPC_CopySaveData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L222
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x1e
	mov	r2, #0x0
	mov	r3, #0xc
	bl	CreateTopBarWindowLoadPalette
	mov	r0, #0x3
	bl	LoadGameSave
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L210	@cond_branch
	ldr	r0, .L222+0x4
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L222+0x8
	b	.L220
.L223:
	.align	2, 0
.L222:
	.word	0x226
	.word	gTasks
	.word	Task_HofPC_PrintDataIsCorrupted
.L210:
	ldr	r0, .L224
	ldr	r4, .L224+0x4
	ldr	r1, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	bl	CpuSet
	ldr	r4, [r4]
	mov	r2, #0x0
	ldrh	r1, [r4, #0x8]
	ldr	r3, .L224+0x8
	add	r0, r3, #0
	and	r0, r0, r1
	lsl	r5, r6, #0x2
	cmp	r0, #0
	beq	.L213	@cond_branch
.L214:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r4, r4, #0x78
	cmp	r2, #0x31
	bhi	.L218	@cond_branch
	ldrh	r1, [r4, #0x8]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L214	@cond_branch
.L213:
	cmp	r2, #0x31
	bhi	.L218	@cond_branch
	ldr	r0, .L224+0xc
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	sub	r0, r2, #0x1
	b	.L221
.L225:
	.align	2, 0
.L224:
	.word	gDecompressionBuffer
	.word	sHofMonPtr
	.word	0x1ff
	.word	gTasks
.L218:
	ldr	r0, .L226
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x31
.L221:
	strh	r0, [r1, #0x8]
	mov	r0, #0xa
	bl	GetGameStat
	ldr	r2, .L226
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r0, [r1, #0xa]
	ldr	r0, .L226+0x4
.L220:
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L227:
	.align	2, 0
.L226:
	.word	gTasks
	.word	Task_HofPC_DrawSpritesPrintText
.Lfe24:
	.size	 Task_HofPC_CopySaveData,.Lfe24-Task_HofPC_CopySaveData
	.align	2, 0
	.type	 Task_HofPC_DrawSpritesPrintText,function
	.thumb_func
Task_HofPC_DrawSpritesPrintText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L251
	ldr	r3, [r0]
	mov	r5, #0x0
	ldr	r1, .L251+0x4
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, #0x8
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	ldr	r2, .L251+0x8
	cmp	r5, r0
	bge	.L230	@cond_branch
	add	r1, r0, #0
.L232:
	add	r3, r3, #0x78
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r1
	blt	.L232	@cond_branch
.L230:
	add	r6, r3, #0
	mov	r0, #0x0
	str	r0, [r2]
	mov	r5, r9
	lsl	r2, r5, #0x2
	add	r1, r2, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	strh	r0, [r1, #0xc]
	strh	r0, [r1, #0x10]
	mov	r5, #0x0
	str	r2, [sp, #0x14]
	ldr	r4, .L251+0xc
	add	r2, r1, #0
.L237:
	ldrh	r1, [r6, #0x8]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L236	@cond_branch
	ldrh	r0, [r2, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x10]
.L236:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r6, r6, #0x14
	cmp	r5, #0x5
	bls	.L237	@cond_branch
	add	r6, r3, #0
	mov	r5, #0x0
	ldr	r1, .L251+0x4
	ldr	r0, [sp, #0x14]
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	mov	r8, r0
	add	r0, r0, r1
	str	r0, [sp, #0x10]
	add	r1, r1, #0x8
	mov	sl, r1
.L243:
	ldrh	r1, [r6, #0x8]
	ldr	r2, .L251+0xc
	add	r0, r2, #0
	and	r0, r0, r1
	add	r7, r1, #0
	cmp	r0, #0
	beq	.L244	@cond_branch
	ldr	r4, [sp, #0x10]
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3
	ble	.L245	@cond_branch
	lsl	r1, r5, #0x3
	ldr	r0, .L251+0x10
	add	r0, r0, #0x4
	add	r0, r1, r0
	ldrh	r3, [r0]
	ldr	r2, .L251+0x14
	add	r1, r1, r2
	ldrh	r4, [r1]
	b	.L246
.L252:
	.align	2, 0
.L251:
	.word	sHofMonPtr
	.word	gTasks
	.word	sSelectedPaletteIndices
	.word	0x1ff
	.word	sHallOfFame_MonFullTeamPositions
	.word	sHallOfFame_MonFullTeamPositions+0x6
.L245:
	ldr	r0, .L253
	lsl	r2, r5, #0x3
	add	r1, r0, #0x4
	add	r1, r2, r1
	ldrh	r3, [r1]
	add	r0, r0, #0x6
	add	r2, r2, r0
	ldrh	r4, [r2]
.L246:
	lsl	r0, r7, #0x17
	lsr	r0, r0, #0x17
	ldr	r1, [r6]
	ldr	r2, [r6, #0x4]
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	str	r3, [sp]
	lsl	r3, r4, #0x10
	asr	r3, r3, #0x10
	str	r3, [sp, #0x4]
	lsl	r3, r5, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x8]
	ldr	r3, .L253+0x4
	str	r3, [sp, #0xc]
	mov	r3, #0x1
	bl	CreateMonPicSprite_HandleDeoxys
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L253+0x8
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r3, [r1, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r2, r4, #0
	and	r3, r3, r2
	mov	r2, #0x4
	orr	r3, r3, r2
	strb	r3, [r1, #0x5]
	add	r1, r5, #0x5
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	add	r1, r1, sl
	strh	r0, [r1]
	b	.L242
.L254:
	.align	2, 0
.L253:
	.word	sHallOfFame_MonHalfTeamPositions
	.word	0xffff
	.word	gSprites
.L244:
	add	r0, r5, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	add	r0, r0, sl
	mov	r1, #0xff
	strh	r1, [r0]
.L242:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r6, r6, #0x14
	cmp	r5, #0x5
	bls	.L243	@cond_branch
	ldr	r0, .L255
	ldr	r2, .L255+0x4
	mov	r1, #0xc
	bl	BlendPalettes
	ldr	r0, .L255+0x8
	ldr	r1, .L255+0xc
	ldr	r4, [sp, #0x14]
	add	r4, r4, r9
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r5, #0xa
	ldrsh	r1, [r4, r5]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r5, .L255+0x10
	ldr	r1, .L255+0x14
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bgt	.L249	@cond_branch
	ldr	r1, .L255+0x18
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	TopBarWindowPrintTwoStrings
	b	.L250
.L256:
	.align	2, 0
.L255:
	.word	-0x10000
	.word	0x7716
	.word	gStringVar1
	.word	gTasks
	.word	gStringVar4
	.word	gText_HOFNumber
	.word	gText_UPDOWNPick_ABUTTONBBUTTONCancel
.L249:
	ldr	r1, .L257
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	TopBarWindowPrintTwoStrings
.L250:
	ldr	r0, .L257+0x4
	ldr	r1, [sp, #0x14]
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L257+0x8
	str	r0, [r1]
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L258:
	.align	2, 0
.L257:
	.word	gText_UPDOWNPick_ABUTTONNext_BBUTTONBack
	.word	gTasks
	.word	Task_HofPC_PrintMonInfo
.Lfe25:
	.size	 Task_HofPC_DrawSpritesPrintText,.Lfe25-Task_HofPC_DrawSpritesPrintText
	.align	2, 0
	.type	 Task_HofPC_PrintMonInfo,function
	.thumb_func
Task_HofPC_PrintMonInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L272
	ldr	r5, [r0]
	mov	r3, #0x0
	ldr	r1, .L272+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	cmp	r3, r0
	bge	.L261	@cond_branch
	add	r1, r0, #0
.L263:
	add	r5, r5, #0x78
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	blt	.L263	@cond_branch
.L261:
	mov	r3, #0x0
	lsl	r7, r4, #0x2
	add	r0, r7, r4
	lsl	r6, r0, #0x3
	ldr	r0, .L272+0x8
	mov	sl, r0
	ldr	r1, .L272+0xc
	mov	r8, r1
	mov	r2, #0xd
	neg	r2, r2
	mov	r9, r2
	mov	r0, #0x4
	mov	ip, r0
.L268:
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	add	r0, r0, sl
	ldrh	r1, [r0]
	cmp	r1, #0xff
	beq	.L267	@cond_branch
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r2, [r0, #0x5]
	mov	r1, r9
	and	r1, r1, r2
	mov	r2, ip
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L267:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x5
	bls	.L268	@cond_branch
	add	r1, r7, r4
	lsl	r1, r1, #0x3
	ldr	r0, .L272+0x4
	add	r6, r1, r0
	mov	r2, #0xc
	ldrsh	r0, [r6, r2]
	add	r0, r0, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L272+0x4
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L272+0xc
	add	r0, r0, r1
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0, #0x5]
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r1
	ldr	r1, .L272+0x10
	eor	r0, r0, r1
	ldr	r2, .L272+0x14
	str	r0, [r2]
	ldr	r2, .L272+0x18
	mov	r1, #0xc
	bl	BlendPalettesUnfaded
	mov	r0, #0xc
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r5, r0
	ldrh	r1, [r4, #0x8]
	ldr	r0, .L272+0x1c
	and	r0, r0, r1
	ldr	r1, .L272+0x20
	cmp	r0, r1
	beq	.L271	@cond_branch
	bl	StopCryAndClearCrySongs
	ldrh	r0, [r4, #0x8]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x17
	mov	r1, #0x0
	bl	PlayCry_Normal
.L271:
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xe
	bl	HallOfFame_PrintMonInfo
	ldr	r0, .L272+0x24
	str	r0, [r6]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L273:
	.align	2, 0
.L272:
	.word	sHofMonPtr
	.word	gTasks
	.word	gTasks+0x8
	.word	gSprites
	.word	-0x10000
	.word	sSelectedPaletteIndices
	.word	0x7716
	.word	0x1ff
	.word	0x19d
	.word	Task_HofPC_HandleInput
.Lfe26:
	.size	 Task_HofPC_PrintMonInfo,.Lfe26-Task_HofPC_PrintMonInfo
	.align	2, 0
	.type	 Task_HofPC_HandleInput,function
	.thumb_func
Task_HofPC_HandleInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L293
	ldrh	r2, [r1, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r2
	add	r3, r1, #0
	cmp	r0, #0
	beq	.L275	@cond_branch
	ldr	r7, .L293+0x4
	lsl	r0, r5, #0x2
	add	r1, r0, r5
	lsl	r3, r1, #0x3
	add	r4, r3, r7
	ldrh	r2, [r4, #0x8]
	mov	r6, #0x8
	ldrsh	r1, [r4, r6]
	mov	r8, r0
	cmp	r1, #0
	beq	.L276	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r4, #0x8]
	mov	r4, #0x0
	add	r6, r3, #0
	add	r7, r7, #0x8
.L280:
	add	r0, r4, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L279	@cond_branch
	bl	FreeAndDestroyMonPicSprite
.L279:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x5
	bls	.L280	@cond_branch
	ldr	r0, .L293+0x4
	mov	r2, r8
	add	r1, r2, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L283	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xa]
.L283:
	ldr	r0, .L293+0x8
	str	r0, [r1]
	b	.L286
.L294:
	.align	2, 0
.L293:
	.word	gMain
	.word	gTasks
	.word	Task_HofPC_DrawSpritesPrintText
.L276:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L285	@cond_branch
	bl	StopCryAndClearCrySongs
	ldr	r0, .L295
	ldr	r1, .L295+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L285:
	ldr	r0, .L295+0x8
	str	r0, [r4]
	b	.L286
.L296:
	.align	2, 0
.L295:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	Task_HofPC_HandlePaletteOnExit
.L275:
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L287	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L288	@cond_branch
	bl	StopCryAndClearCrySongs
	ldr	r0, .L297
	ldr	r1, .L297+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L288:
	ldr	r0, .L297+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L297+0xc
	str	r0, [r1]
	b	.L286
.L298:
	.align	2, 0
.L297:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gTasks
	.word	Task_HofPC_HandlePaletteOnExit
.L287:
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L290	@cond_branch
	ldr	r0, .L299
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xc]
	mov	r4, #0xc
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	beq	.L290	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xc]
	ldr	r0, .L299+0x4
	str	r0, [r1]
	b	.L286
.L300:
	.align	2, 0
.L299:
	.word	gTasks
	.word	Task_HofPC_PrintMonInfo
.L290:
	ldrh	r1, [r3, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L286	@cond_branch
	ldr	r1, .L301
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r6, #0xc
	ldrsh	r1, [r2, r6]
	mov	r3, #0x10
	ldrsh	r0, [r2, r3]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bge	.L286	@cond_branch
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xc]
	ldr	r0, .L301+0x4
	str	r0, [r2]
.L286:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	gTasks
	.word	Task_HofPC_PrintMonInfo
.Lfe27:
	.size	 Task_HofPC_HandleInput,.Lfe27-Task_HofPC_HandleInput
	.align	2, 0
	.type	 Task_HofPC_HandlePaletteOnExit,function
	.thumb_func
Task_HofPC_HandlePaletteOnExit:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L304
	ldr	r1, .L304+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	bl	CpuSet
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BeginPCScreenEffect_TurnOff
	ldr	r1, .L304+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L304+0xc
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L305:
	.align	2, 0
.L304:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	gTasks
	.word	Task_HofPC_HandleExit
.Lfe28:
	.size	 Task_HofPC_HandlePaletteOnExit,.Lfe28-Task_HofPC_HandlePaletteOnExit
	.align	2, 0
	.type	 Task_HofPC_HandleExit,function
	.thumb_func
Task_HofPC_HandleExit:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	IsPCScreenEffectRunning_TurnOff
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L307	@cond_branch
	mov	r0, #0x0
	bl	HideBg
	mov	r0, #0x1
	bl	HideBg
	mov	r0, #0x3
	bl	HideBg
	bl	DestroyTopBarWindow
	bl	FreeAllWindowBuffers
	mov	r0, #0x1
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x3
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r5, .L310
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L308	@cond_branch
	bl	Free
	str	r4, [r5]
.L308:
	ldr	r5, .L310+0x4
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L309	@cond_branch
	bl	Free
	str	r4, [r5]
.L309:
	bl	ReturnFromHallOfFamePC
.L307:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L311:
	.align	2, 0
.L310:
	.word	sHofGfxPtr
	.word	sHofMonPtr
.Lfe29:
	.size	 Task_HofPC_HandleExit,.Lfe29-Task_HofPC_HandleExit
	.align	2, 0
	.type	 Task_HofPC_PrintDataIsCorrupted,function
	.thumb_func
Task_HofPC_PrintDataIsCorrupted:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L313
	mov	r1, #0x8
	mov	r2, #0x1
	bl	TopBarWindowPrintString
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L313+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r1, .L313+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L313+0xc
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	gText_ABUTTONExit
	.word	gText_HOFCorrupted
	.word	gTasks
	.word	Task_HofPC_ExitOnButtonPress
.Lfe30:
	.size	 Task_HofPC_PrintDataIsCorrupted,.Lfe30-Task_HofPC_PrintDataIsCorrupted
	.align	2, 0
	.type	 Task_HofPC_ExitOnButtonPress,function
	.thumb_func
Task_HofPC_ExitOnButtonPress:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L317
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L316	@cond_branch
	ldr	r0, .L317+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L317+0x8
	str	r0, [r1]
.L316:
	pop	{r0}
	bx	r0
.L318:
	.align	2, 0
.L317:
	.word	gMain
	.word	gTasks
	.word	Task_HofPC_HandlePaletteOnExit
.Lfe31:
	.size	 Task_HofPC_ExitOnButtonPress,.Lfe31-Task_HofPC_ExitOnButtonPress
	.align	2, 0
	.type	 HallOfFame_PrintWelcomeText,function
	.thumb_func
HallOfFame_PrintWelcomeText:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	ldr	r5, .L320
	mov	r0, #0x2
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r4, #0xd0
	sub	r4, r4, r0
	lsr	r0, r4, #0x1f
	add	r4, r4, r0
	asr	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	bl	PutWindowTilemap
	ldr	r0, .L320+0x4
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L321:
	.align	2, 0
.L320:
	.word	gText_WelcomeToHOF
	.word	sTextColors
.Lfe32:
	.size	 HallOfFame_PrintWelcomeText,.Lfe32-HallOfFame_PrintWelcomeText
	.align	2, 0
	.type	 HallOfFame_PrintMonInfo,function
	.thumb_func
HallOfFame_PrintMonInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x34
	add	r7, r0, #0
	mov	r0, #0x0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	bl	PutWindowTilemap
	ldrh	r0, [r7, #0x8]
	ldr	r1, .L346
	and	r1, r1, r0
	ldr	r0, .L346+0x4
	cmp	r1, r0
	beq	.L323	@cond_branch
	add	r4, sp, #0x1c
	ldr	r1, .L346+0x8
	add	r0, r4, #0
	bl	StringCopy
	ldrh	r0, [r7, #0x8]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x17
	bl	SpeciesToPokedexNum
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L346+0xc
	mov	r8, r4
	cmp	r6, r0
	beq	.L324	@cond_branch
	add	r4, sp, #0xc
	add	r0, r6, #0
	mov	r1, #0x64
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r4]
	add	r5, sp, #0xc
	add	r0, r6, #0
	mov	r1, #0x64
	bl	__umodsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r4, #0
	mov	r1, #0xa
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r5, #0x1]
	add	r5, sp, #0xc
	add	r0, r4, #0
	mov	r1, #0xa
	bl	__umodsi3
	add	r0, r0, #0xa1
	strb	r0, [r5, #0x2]
	b	.L325
.L347:
	.align	2, 0
.L346:
	.word	0x1ff
	.word	0x19d
	.word	gText_Number
	.word	0xffff
.L324:
	add	r3, sp, #0xc
	add	r2, r3, #0
	add	r1, r2, #0
	mov	r0, #0xac
	strb	r0, [r1, #0x2]
	strb	r0, [r2, #0x1]
	strb	r0, [r3]
.L325:
	add	r1, sp, #0xc
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	mov	r0, r8
	bl	StringAppend
	ldr	r0, .L348
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x10
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
.L323:
	mov	r2, #0x0
	ldrb	r0, [r7, #0xa]
	cmp	r0, #0xff
	beq	.L326	@cond_branch
	add	r3, r7, #0
	add	r3, r3, #0xa
.L330:
	mov	r1, sp
	add	r1, r1, r2
	add	r1, r1, #0xc
	add	r0, r3, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x9
	bhi	.L326	@cond_branch
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L330	@cond_branch
.L326:
	mov	r1, sp
	add	r1, r1, r2
	add	r1, r1, #0xc
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x2
	bl	GetFontAttribute
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x2
	add	r1, sp, #0xc
	bl	GetStringWidth
	add	r2, r0, #0
	ldrh	r1, [r7, #0x8]
	ldr	r0, .L348+0x4
	and	r0, r0, r1
	ldr	r1, .L348+0x8
	cmp	r0, r1
	bne	.L333	@cond_branch
	lsr	r0, r2, #0x1f
	add	r0, r2, r0
	asr	r0, r0, #0x1
	mov	r1, #0x80
	sub	r0, r1, r0
	b	.L334
.L349:
	.align	2, 0
.L348:
	.word	sTextColors
	.word	0x1ff
	.word	0x19d
.L333:
	mov	r0, #0x80
	sub	r0, r0, r2
.L334:
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L350
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	ldrh	r2, [r7, #0x8]
	ldr	r4, .L350+0x4
	add	r0, r4, #0
	and	r0, r0, r2
	ldr	r1, .L350+0x8
	cmp	r0, r1
	beq	.L335	@cond_branch
	add	r1, sp, #0xc
	mov	r0, #0xba
	strb	r0, [r1]
	mov	r0, sp
	add	r0, r0, #0xd
	lsl	r1, r2, #0x17
	lsr	r1, r1, #0x17
	mov	r2, #0xb
	mul	r1, r1, r2
	ldr	r2, .L350+0xc
	add	r1, r1, r2
	bl	StringCopy
	add	r6, r0, #0
	ldrh	r1, [r7, #0x8]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x20
	beq	.L337	@cond_branch
	cmp	r0, #0x1d
	bne	.L336	@cond_branch
.L337:
	mov	r0, #0xff
	b	.L344
.L351:
	.align	2, 0
.L350:
	.word	sTextColors
	.word	0x1ff
	.word	0x19d
	.word	gSpeciesNames
.L336:
	lsl	r0, r1, #0x17
	lsr	r0, r0, #0x17
	ldr	r1, [r7, #0x4]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L340	@cond_branch
.L344:
	cmp	r0, #0xfe
	beq	.L341	@cond_branch
	mov	r0, #0x0
	b	.L345
.L340:
	mov	r0, #0xb5
	b	.L345
.L341:
	mov	r0, #0xb6
.L345:
	strb	r0, [r6]
	add	r6, r6, #0x1
	mov	r0, #0xff
	strb	r0, [r6]
	ldr	r5, .L352
	str	r5, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x80
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	ldr	r1, .L352+0x4
	add	r0, sp, #0xc
	bl	StringCopy
	add	r6, r0, #0
	ldrb	r1, [r7, #0x9]
	lsr	r1, r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	str	r5, [sp]
	str	r4, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x20
	mov	r3, #0x11
	bl	AddTextPrinterParameterized3
	ldr	r1, .L352+0x8
	add	r0, sp, #0xc
	bl	StringCopy
	add	r6, r0, #0
	ldrh	r1, [r7]
	mov	r2, #0x2
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
	str	r5, [sp]
	str	r4, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x60
	mov	r3, #0x11
	bl	AddTextPrinterParameterized3
.L335:
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0x34
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L353:
	.align	2, 0
.L352:
	.word	sTextColors
	.word	gText_Level
	.word	gText_IDNumber
.Lfe33:
	.size	 HallOfFame_PrintMonInfo,.Lfe33-HallOfFame_PrintMonInfo
	.align	2, 0
	.type	 HallOfFame_PrintPlayerInfo,function
	.thumb_func
HallOfFame_PrintPlayerInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	ldr	r0, .L357
	ldrb	r6, [r0, #0x3]
	lsl	r6, r6, #0x3
	sub	r0, r6, #0x6
	str	r0, [sp, #0x28]
	mov	r0, #0x1
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	bl	PutWindowTilemap
	ldr	r2, .L357+0x4
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	mov	r7, #0x0
	str	r7, [sp]
	str	r7, [sp, #0x4]
	ldr	r1, .L357+0x8
	mov	r9, r1
	str	r1, [sp, #0x8]
	str	r7, [sp, #0xc]
	ldr	r0, .L357+0xc
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x4
	mov	r3, #0x3
	bl	AddTextPrinterParameterized4
	ldr	r0, .L357+0x10
	mov	sl, r0
	ldr	r1, [r0]
	mov	r0, #0x2
	mov	r2, #0x0
	bl	GetStringWidth
	add	r2, r0, #0
	ldr	r1, [sp, #0x28]
	sub	r2, r1, r2
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, r9
	str	r0, [sp]
	str	r7, [sp, #0x4]
	mov	r1, sl
	ldr	r0, [r1]
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r3, #0x3
	bl	AddTextPrinterParameterized3
	mov	r1, sl
	ldr	r0, [r1]
	ldrb	r4, [r0, #0xa]
	ldrb	r0, [r0, #0xb]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	mov	r0, r9
	str	r0, [sp]
	str	r7, [sp, #0x4]
	ldr	r0, .L357+0x14
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x4
	mov	r3, #0x12
	bl	AddTextPrinterParameterized3
	add	r1, sp, #0x14
	mov	r8, r1
	ldr	r1, .L357+0x18
	add	r0, r4, #0
	bl	__modsi3
	ldr	r5, .L357+0x1c
	add	r1, r5, #0
	bl	__divsi3
	sub	r0, r0, #0x5f
	mov	r1, r8
	strb	r0, [r1]
	add	r0, sp, #0x14
	mov	r8, r0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r5, #0xfa
	lsl	r5, r5, #0x2
	add	r1, r5, #0
	bl	__udivsi3
	add	r0, r0, #0xa1
	mov	r1, r8
	strb	r0, [r1, #0x1]
	add	r0, sp, #0x14
	mov	r8, r0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__udivsi3
	add	r0, r0, #0xa1
	mov	r1, r8
	strb	r0, [r1, #0x2]
	add	r5, sp, #0x14
	add	r0, r4, #0
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r5, #0x3]
	add	r5, sp, #0x14
	add	r0, r4, #0
	mov	r1, #0xa
	bl	__umodsi3
	add	r0, r0, #0xa1
	strb	r0, [r5, #0x4]
	add	r1, sp, #0x14
	mov	r0, #0xff
	strb	r0, [r1, #0x5]
	sub	r6, r6, #0x24
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r9
	str	r0, [sp]
	str	r7, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	add	r2, r6, #0
	mov	r3, #0x12
	bl	AddTextPrinterParameterized3
	mov	r1, r9
	str	r1, [sp]
	str	r7, [sp, #0x4]
	ldr	r0, .L357+0x20
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x4
	mov	r3, #0x20
	bl	AddTextPrinterParameterized3
	add	r5, sp, #0x14
	mov	r0, sl
	ldr	r4, [r0]
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x64
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r5]
	add	r5, sp, #0x14
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r5, #0x1]
	add	r5, sp, #0x14
	ldrh	r0, [r4, #0xe]
	mov	r1, #0xa
	bl	__umodsi3
	add	r0, r0, #0xa1
	strb	r0, [r5, #0x2]
	add	r0, sp, #0x14
	ldrb	r0, [r0]
	cmp	r0, #0xa1
	bne	.L355	@cond_branch
	add	r0, sp, #0x14
	strb	r7, [r0]
.L355:
	add	r0, sp, #0x14
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L356	@cond_branch
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0xa1
	bne	.L356	@cond_branch
	add	r0, sp, #0x14
	strb	r1, [r0, #0x1]
.L356:
	add	r1, sp, #0x14
	mov	r6, #0x0
	mov	r0, #0xf0
	strb	r0, [r1, #0x3]
	add	r4, r1, #0
	ldr	r0, .L357+0x10
	ldr	r5, [r0]
	ldrb	r0, [r5, #0x10]
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xa
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r4, #0x4]
	add	r4, sp, #0x14
	ldrb	r0, [r5, #0x10]
	mov	r1, #0xa
	bl	__umodsi3
	add	r0, r0, #0xa1
	strb	r0, [r4, #0x5]
	add	r1, sp, #0x14
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	ldr	r2, [sp, #0x28]
	sub	r2, r2, #0x24
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L357+0x8
	str	r0, [sp]
	str	r6, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r3, #0x20
	bl	AddTextPrinterParameterized3
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L358:
	.align	2, 0
.L357:
	.word	sWindowTemplate
	.word	0x21d
	.word	sTextColors+0x4
	.word	gText_Name
	.word	gSaveBlock2Ptr
	.word	gText_IDNumber
	.word	0x186a0
	.word	0x2710
	.word	gText_MainMenuTime
.Lfe34:
	.size	 HallOfFame_PrintPlayerInfo,.Lfe34-HallOfFame_PrintPlayerInfo
	.align	2, 0
	.type	 ClearVramOamPltt_LoadHofPal,function
	.thumb_func
ClearVramOamPltt_LoadHofPal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r3, #0xc0
	lsl	r3, r3, #0x13
	mov	r4, #0xc0
	lsl	r4, r4, #0x9
	add	r0, sp, #0x4
	mov	r8, r0
	mov	r2, sp
	mov	r6, #0x0
	ldr	r1, .L365
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	ldr	r7, .L365+0x4
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	mov	ip, r0
.L362:
	strh	r6, [r2]
	mov	r0, sp
	str	r0, [r1]
	str	r3, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r3, r3, r5
	sub	r4, r4, r5
	cmp	r4, r5
	bhi	.L362	@cond_branch
	strh	r6, [r2]
	mov	r2, sp
	str	r2, [r1]
	str	r3, [r1, #0x4]
	lsr	r0, r4, #0x1
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r2, .L365
	mov	r1, r8
	str	r1, [r2]
	str	r0, [r2, #0x4]
	lsr	r0, r3, #0x2
	mov	r1, #0x85
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	mov	r0, sp
	strh	r4, [r0]
	str	r0, [r2]
	str	r1, [r2, #0x4]
	lsr	r3, r3, #0x1
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	str	r3, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	bl	ResetPaletteFade
	ldr	r0, .L365+0x8
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L366:
	.align	2, 0
.L365:
	.word	0x40000d4
	.word	-0x7efff800
	.word	sHallOfFame_Pal
.Lfe35:
	.size	 ClearVramOamPltt_LoadHofPal,.Lfe35-ClearVramOamPltt_LoadHofPal
	.align	2, 0
	.type	 HofInit_ResetGpuBuffersAndLoadConfettiGfx,function
	.thumb_func
HofInit_ResetGpuBuffersAndLoadConfettiGfx:
	push	{lr}
	bl	ScanlineEffect_Stop
	bl	ResetTasks
	bl	ResetSpriteData
	bl	ResetTempTileDataBuffers
	bl	ResetAllPicSprites
	bl	FreeAllSpritePalettes
	ldr	r1, .L368
	mov	r0, #0x8
	strb	r0, [r1]
	ldr	r0, .L368+0x4
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L368+0x8
	bl	LoadCompressedSpritePalette
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gReservedSpritePaletteCount
	.word	sHallOfFame_ConfettiSpriteSheet
	.word	sHallOfFame_ConfettiSpritePalette
.Lfe36:
	.size	 HofInit_ResetGpuBuffersAndLoadConfettiGfx,.Lfe36-HofInit_ResetGpuBuffersAndLoadConfettiGfx
	.align	2, 0
	.type	 Hof_InitBgs,function
	.thumb_func
Hof_InitBgs:
	push	{r4, lr}
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L371
	mov	r0, #0x0
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	ldr	r4, .L371+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x6
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L371+0x8
	add	r1, r1, r0
	mov	r0, #0x3
	bl	SetBgTilemapBuffer
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	pop	{r4}
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	sHof_BgTemplates
	.word	sHofGfxPtr
	.word	0x1006
.Lfe37:
	.size	 Hof_InitBgs,.Lfe37-Hof_InitBgs
	.align	2, 0
	.type	 DrawHofBackground,function
	.thumb_func
DrawHofBackground:
	push	{r4, lr}
	add	sp, sp, #-0x8
	ldr	r0, .L385
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L374	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L385+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L386:
	.align	2, 0
.L385:
	.word	sHofGfxPtr
	.word	.L381
	.align	2, 0
	.align	2, 0
.L381:
	.word	.L375
	.word	.L376
	.word	.L378
	.word	.L379
	.word	.L380
.L375:
	ldr	r1, .L387
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	b	.L374
.L388:
	.align	2, 0
.L387:
	.word	sHallOfFame_Gfx
.L376:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L374	@cond_branch
	b	.L384
.L378:
	mov	r4, #0x20
	str	r4, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	mov	r0, #0xb
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	mov	r0, #0x6
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x3
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	b	.L374
.L379:
	bl	InitStandardTextBoxWindows
	bl	InitTextBoxGfxAndPrinters
	b	.L374
.L380:
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	ldr	r0, .L389
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L383
.L390:
	.align	2, 0
.L389:
	.word	sHofGfxPtr
.L374:
	ldr	r0, .L391
	ldr	r1, [r0]
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L384:
	mov	r0, #0x1
.L383:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r1}
	bx	r1
.L392:
	.align	2, 0
.L391:
	.word	sHofGfxPtr
.Lfe38:
	.size	 DrawHofBackground,.Lfe38-DrawHofBackground
	.align	2, 0
	.type	 SpriteCB_EndGetOnScreen,function
	.thumb_func
SpriteCB_EndGetOnScreen:
	bx	lr
.Lfe39:
	.size	 SpriteCB_EndGetOnScreen,.Lfe39-SpriteCB_EndGetOnScreen
	.align	2, 0
	.type	 SpriteCB_GetOnScreen,function
	.thumb_func
SpriteCB_GetOnScreen:
	push	{r4, lr}
	add	r2, r0, #0
	ldr	r1, [r2, #0x20]
	ldr	r0, [r2, #0x30]
	cmp	r1, r0
	beq	.L395	@cond_branch
	ldrh	r3, [r2, #0x20]
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	mov	r4, #0x30
	ldrsh	r1, [r2, r4]
	cmp	r0, r1
	bge	.L396	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xf
	strh	r0, [r2, #0x20]
.L396:
	ldrh	r3, [r2, #0x20]
	mov	r4, #0x20
	ldrsh	r0, [r2, r4]
	cmp	r0, r1
	ble	.L397	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0xf
	strh	r0, [r2, #0x20]
.L397:
	ldrh	r3, [r2, #0x22]
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r4, #0x32
	ldrsh	r1, [r2, r4]
	cmp	r0, r1
	bge	.L398	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xa
	strh	r0, [r2, #0x22]
.L398:
	ldrh	r3, [r2, #0x22]
	mov	r4, #0x22
	ldrsh	r0, [r2, r4]
	cmp	r0, r1
	ble	.L400	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0xa
	strh	r0, [r2, #0x22]
	b	.L400
.L395:
	mov	r0, #0x1
	strh	r0, [r2, #0x2e]
	ldr	r0, .L401
	str	r0, [r2, #0x1c]
.L400:
	pop	{r4}
	pop	{r0}
	bx	r0
.L402:
	.align	2, 0
.L401:
	.word	SpriteCB_EndGetOnScreen
.Lfe40:
	.size	 SpriteCB_GetOnScreen,.Lfe40-SpriteCB_GetOnScreen
	.align	2, 0
	.type	 SpriteCB_Confetti,function
	.thumb_func
SpriteCB_Confetti:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x26]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x78
	ble	.L404	@cond_branch
	add	r0, r5, #0
	bl	DestroySprite
	b	.L405
.L404:
	add	r0, r1, #0x1
	ldrh	r1, [r5, #0x30]
	add	r0, r0, r1
	strh	r0, [r5, #0x26]
	ldrh	r4, [r5, #0x2e]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	and	r0, r0, r1
	add	r0, r0, #0x8
	ldr	r1, .L407
	lsl	r4, r4, #0x1
	add	r4, r4, r1
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	mul	r0, r0, r1
	cmp	r0, #0
	bge	.L406	@cond_branch
	add	r0, r0, #0xff
.L406:
	asr	r0, r0, #0x8
	strh	r0, [r5, #0x24]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x4
	strh	r0, [r5, #0x2e]
.L405:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L408:
	.align	2, 0
.L407:
	.word	gSineTable
.Lfe41:
	.size	 SpriteCB_Confetti,.Lfe41-SpriteCB_Confetti
	.align	2, 0
	.type	 Hof_SpawnConfetti,function
	.thumb_func
Hof_SpawnConfetti:
	push	{r4, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf0
	bl	__umodsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	Random
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x7
	and	r2, r2, r0
	neg	r2, r2
	ldr	r0, .L413
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	add	r1, r4, #0
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L413+0x4
	add	r4, r1, r0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x11
	bl	__umodsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	bl	Random
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L410	@cond_branch
	mov	r0, #0x0
	b	.L412
.L414:
	.align	2, 0
.L413:
	.word	sSpriteTemplate_Confetti
	.word	gSprites
.L410:
	mov	r0, #0x1
.L412:
	strh	r0, [r4, #0x30]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 Hof_SpawnConfetti,.Lfe42-Hof_SpawnConfetti
.text
	.align	2, 0 @ Don't pad with nop

