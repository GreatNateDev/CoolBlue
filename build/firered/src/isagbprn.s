@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	AGBPrintInit
	.type	 AGBPrintInit,function
	.thumb_func
AGBPrintInit:
	push	{r4, r7, lr}
	add	sp, sp, #-16
	mov	r7, sp
	ldr	r0, .L3
	str	r0, [r7]
	ldr	r0, .L3+4
	str	r0, [r7, #4]
	ldr	r0, .L3+8
	str	r0, [r7, #8]
	add	r0, r7, #0
	add	r0, r0, #12
	ldr	r1, [r7, #4]
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, [r7, #4]
	mov	r2, #192
	lsl	r2, r2, #5
	add	r1, r2, #0
	strh	r1, [r0]
	ldr	r0, [r7, #8]
	mov	r1, #32
	strh	r1, [r0]
	ldr	r0, [r7]
	ldr	r1, [r7]
	ldr	r2, [r7]
	ldrh	r3, [r2, #6]
	mov	r4, #0
	and	r3, r3, r4
	add	r4, r3, #0
	strh	r4, [r2, #6]
	ldrh	r2, [r1, #4]
	mov	r3, #0
	and	r2, r2, r3
	add	r3, r2, #0
	strh	r3, [r1, #4]
	ldrh	r1, [r0]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, [r7]
	ldrh	r1, [r0, #2]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #253
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0, #2]
	ldr	r0, [r7, #8]
	mov	r1, #0
	strh	r1, [r0]
	ldr	r0, [r7, #4]
	add	r1, r7, #0
	add	r1, r1, #12
	ldrh	r2, [r1]
	strh	r2, [r0]
.L2:
	add	sp, sp, #16
	pop	{r4, r7}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	167649528
	.word	67109380
	.word	167653374
.Lfe1:
	.size	 AGBPrintInit,.Lfe1-AGBPrintInit
	.align	2, 0
	.type	 AGBPutcInternal,function
	.thumb_func
AGBPutcInternal:
	push	{r4, r7, lr}
	add	sp, sp, #-20
	mov	r7, sp
	add	r1, r7, #0
	strb	r0, [r1]
	ldr	r0, .L8
	str	r0, [r7, #4]
	ldr	r0, [r7, #4]
	ldrh	r1, [r0, #2]
	lsl	r2, r1, #16
	lsr	r0, r2, #16
	lsl	r1, r0, #16
	mov	r2, #128
	lsl	r2, r2, #20
	add	r0, r1, r2
	str	r0, [r7, #8]
	ldr	r0, .L8+4
	str	r0, [r7, #12]
	add	r0, r7, #0
	add	r0, r0, #16
	ldr	r1, [r7, #4]
	ldrh	r2, [r1, #6]
	lsl	r1, r2, #16
	lsr	r2, r1, #16
	lsr	r1, r2, #1
	add	r3, r1, #0
	lsl	r2, r3, #16
	lsr	r1, r2, #16
	add	r2, r1, #0
	lsl	r1, r2, #1
	ldr	r2, [r7, #8]
	add	r1, r1, r2
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, [r7, #12]
	mov	r1, #32
	strh	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #16
	ldr	r1, [r7, #4]
	ldrh	r2, [r1, #6]
	mov	r3, #1
	add	r1, r2, #0
	and	r1, r1, r3
	add	r3, r1, #0
	lsl	r2, r3, #16
	lsr	r1, r2, #16
	cmp	r1, #0
	beq	.L6	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #16
	ldrh	r2, [r1]
	mov	r3, #255
	add	r1, r2, #0
	and	r1, r1, r3
	add	r2, r7, #0
	ldrb	r3, [r2]
	add	r2, r3, #0
	lsl	r3, r2, #8
	add	r2, r3, #0
	add	r3, r1, #0
	orr	r3, r3, r2
	add	r1, r3, #0
	b	.L7
.L9:
	.align	2, 0
.L8:
	.word	167649528
	.word	167653374
.L6:
	add	r2, r7, #0
	add	r2, r2, #16
	ldrh	r3, [r2]
	mov	r4, #255
	lsl	r4, r4, #8
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r7, #0
	ldrb	r4, [r3]
	add	r3, r4, #0
	orr	r3, r3, r2
	add	r1, r3, #0
.L7:
	strh	r1, [r0]
	ldr	r0, [r7, #4]
	ldrh	r1, [r0, #6]
	lsl	r0, r1, #16
	lsr	r1, r0, #16
	lsr	r0, r1, #1
	add	r2, r0, #0
	lsl	r1, r2, #16
	lsr	r0, r1, #16
	add	r1, r0, #0
	lsl	r0, r1, #1
	ldr	r1, [r7, #8]
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #16
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r1, [r7, #4]
	ldr	r0, [r7, #4]
	ldr	r1, [r7, #4]
	ldrh	r2, [r1, #6]
	add	r1, r2, #1
	ldrh	r2, [r0, #6]
	mov	r3, #0
	and	r2, r2, r3
	add	r3, r2, #0
	add	r2, r3, #0
	orr	r2, r2, r1
	add	r1, r2, #0
	strh	r1, [r0, #6]
	ldr	r0, [r7, #12]
	mov	r1, #0
	strh	r1, [r0]
.L5:
	add	sp, sp, #20
	pop	{r4, r7}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AGBPutcInternal,.Lfe2-AGBPutcInternal
	.align	2, 0
	.globl	AGBPutc
	.type	 AGBPutc,function
	.thumb_func
AGBPutc:
	push	{r7, lr}
	add	sp, sp, #-16
	mov	r7, sp
	add	r1, r7, #0
	strb	r0, [r1]
	ldr	r0, .L12
	str	r0, [r7, #4]
	add	r0, r7, #0
	add	r0, r0, #8
	ldr	r1, [r7, #4]
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, [r7, #4]
	mov	r2, #192
	lsl	r2, r2, #5
	add	r1, r2, #0
	strh	r1, [r0]
	add	r0, r7, #0
	ldrb	r1, [r0]
	add	r0, r1, #0
	bl	AGBPutcInternal
	ldr	r0, [r7, #4]
	add	r1, r7, #0
	add	r1, r1, #8
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, .L12+4
	str	r0, [r7, #12]
	ldr	r1, [r7, #12]
	ldrh	r0, [r1, #6]
	ldr	r1, [r7, #12]
	ldrh	r2, [r1, #4]
	sub	r1, r2, #1
	lsl	r2, r1, #16
	lsr	r1, r2, #16
	cmp	r0, r1
	bne	.L11	@cond_branch
	bl	AGBPrintFlush1Block
.L11:
.L10:
	add	sp, sp, #16
	pop	{r7}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	67109380
	.word	167649528
.Lfe3:
	.size	 AGBPutc,.Lfe3-AGBPutc
	.align	2, 0
	.globl	AGBPrint
	.type	 AGBPrint,function
	.thumb_func
AGBPrint:
	push	{r7, lr}
	add	sp, sp, #-16
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, .L18
	str	r0, [r7, #4]
	ldr	r0, .L18+4
	str	r0, [r7, #8]
	add	r0, r7, #0
	add	r0, r0, #12
	ldr	r1, [r7, #8]
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, [r7, #8]
	mov	r2, #192
	lsl	r2, r2, #5
	add	r1, r2, #0
	strh	r1, [r0]
.L15:
	ldr	r0, [r7]
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L17	@cond_branch
	b	.L16
.L19:
	.align	2, 0
.L18:
	.word	167649528
	.word	67109380
.L17:
	ldr	r0, [r7]
	ldrb	r1, [r0]
	add	r0, r1, #0
	bl	AGBPutc
	ldr	r0, [r7]
	add	r1, r0, #1
	str	r1, [r7]
	b	.L15
.L16:
	ldr	r0, [r7, #8]
	add	r1, r7, #0
	add	r1, r1, #12
	ldrh	r2, [r1]
	strh	r2, [r0]
.L14:
	add	sp, sp, #16
	pop	{r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 AGBPrint,.Lfe4-AGBPrint
	.align	2, 0
	.globl	AGBPrintf
	.type	 AGBPrintf,function
	.thumb_func
AGBPrintf:
	push	{r0, r1, r2, r3}
	push	{r7, lr}
	add	sp, sp, #-260
	mov	r7, sp
	mov	r1, #136
	lsl	r1, r1, #1
	add	r0, r7, r1
	add	r1, r7, #0
	mov	r3, #128
	lsl	r3, r3, #1
	add	r2, r7, r3
	str	r0, [r2]
	add	r0, r7, #0
	add	r1, r7, #0
	mov	r1, #128
	lsl	r1, r1, #1
	add	r3, r7, r1
	ldr	r2, [r3]
	mov	r3, #134
	lsl	r3, r3, #1
	add	r3, r3, r7
	ldr	r1, [r3]
	bl	vsprintf
	add	r1, r7, #0
	add	r0, r1, #0
	bl	AGBPrint
.L20:
	add	sp, sp, #260
	pop	{r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.Lfe5:
	.size	 AGBPrintf,.Lfe5-AGBPrintf
	.align	2, 0
	.type	 AGBPrintTransferDataInternal,function
	.thumb_func
AGBPrintTransferDataInternal:
	push	{r4, r7, lr}
	add	sp, sp, #-32
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, .L28
	str	r0, [r7, #24]
	ldr	r0, .L28+4
	str	r0, [r7, #28]
	ldr	r0, .L28+8
	str	r0, [r7, #4]
	ldr	r0, .L28+12
	str	r0, [r7, #8]
	add	r0, r7, #0
	add	r0, r0, #12
	ldr	r1, [r7, #8]
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, .L28+16
	str	r0, [r7, #16]
	add	r0, r7, #0
	add	r0, r0, #20
	ldr	r1, [r7, #16]
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, [r7, #8]
	add	r1, r7, #0
	add	r1, r1, #12
	ldrh	r2, [r1]
	ldr	r3, .L28+20
	add	r1, r2, #0
	and	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, [r7, #16]
	mov	r2, #192
	lsl	r2, r2, #5
	add	r1, r2, #0
	strh	r1, [r0]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L22	@cond_branch
.L23:
	ldr	r1, [r7, #28]
	ldr	r0, [r7, #28]
	ldrh	r1, [r1, #6]
	lsl	r2, r1, #16
	lsr	r1, r2, #16
	ldrh	r0, [r0, #4]
	lsl	r2, r0, #16
	lsr	r0, r2, #16
	cmp	r1, r0
	bne	.L25	@cond_branch
	b	.L24
.L29:
	.align	2, 0
.L28:
	.word	167653374
	.word	167649528
	.word	167649437
	.word	67109384
	.word	67109380
	.word	65534
.L25:
	ldr	r0, [r7, #24]
	mov	r1, #32
	strh	r1, [r0]
	ldr	r4, [r7, #4]
	bl	_call_via_r4
	ldr	r0, [r7, #24]
	mov	r1, #0
	strh	r1, [r0]
	b	.L23
.L24:
	b	.L26
.L22:
	ldr	r1, [r7, #28]
	ldr	r0, [r7, #28]
	ldrh	r1, [r1, #6]
	lsl	r2, r1, #16
	lsr	r1, r2, #16
	ldrh	r0, [r0, #4]
	lsl	r2, r0, #16
	lsr	r0, r2, #16
	cmp	r1, r0
	beq	.L26	@cond_branch
	ldr	r0, [r7, #24]
	mov	r1, #32
	strh	r1, [r0]
	ldr	r4, [r7, #4]
	bl	_call_via_r4
	ldr	r0, [r7, #24]
	mov	r1, #0
	strh	r1, [r0]
.L27:
.L26:
	ldr	r0, [r7, #16]
	add	r1, r7, #0
	add	r1, r1, #20
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, [r7, #8]
	add	r1, r7, #0
	add	r1, r1, #12
	ldrh	r2, [r1]
	strh	r2, [r0]
.L21:
	add	sp, sp, #32
	pop	{r4, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AGBPrintTransferDataInternal,.Lfe6-AGBPrintTransferDataInternal
	.align	2, 0
	.globl	AGBPrintFlush1Block
	.type	 AGBPrintFlush1Block,function
	.thumb_func
AGBPrintFlush1Block:
	push	{r7, lr}
	mov	r7, sp
	mov	r0, #0
	bl	AGBPrintTransferDataInternal
.L30:
	pop	{r7}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 AGBPrintFlush1Block,.Lfe7-AGBPrintFlush1Block
	.align	2, 0
	.globl	AGBPrintFlush
	.type	 AGBPrintFlush,function
	.thumb_func
AGBPrintFlush:
	push	{r7, lr}
	mov	r7, sp
	mov	r0, #1
	bl	AGBPrintTransferDataInternal
.L31:
	pop	{r7}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 AGBPrintFlush,.Lfe8-AGBPrintFlush
	.section .rodata
	.align	2, 0
.LC0:
	.ascii	"ASSERTION FAILED  FILE=[%s] LINE=[%d]  EXP=[%s] \n\000"
	.align	2, 0
.LC2:
	.ascii	"WARING FILE=[%s] LINE=[%d]  EXP=[%s] \n\000"
	.align	2, 0
.LC1:
	.word	.LC0
	.align	2, 0
.LC3:
	.word	.LC2
.text
	.align	2, 0
	.globl	AGBAssert
	.type	 AGBAssert,function
	.thumb_func
AGBAssert:
	push	{r7, lr}
	add	sp, sp, #-16
	mov	r7, sp
	str	r0, [r7]
	str	r1, [r7, #4]
	str	r2, [r7, #8]
	str	r3, [r7, #12]
	ldr	r0, [r7, #12]
	cmp	r0, #0
	beq	.L33	@cond_branch
	ldr	r0, .L35
	ldr	r2, [r7, #4]
	ldr	r3, [r7, #8]
	ldr	r1, [r7]
	bl	AGBPrintf
	bl	AGBPrintFlush
	.hword 0xEFFF
	.code	16
	b	.L34
.L36:
	.align	2, 0
.L35:
	.word	.LC0
.L33:
	ldr	r0, .L37
	ldr	r2, [r7, #4]
	ldr	r3, [r7, #8]
	ldr	r1, [r7]
	bl	AGBPrintf
.L34:
.L32:
	add	sp, sp, #16
	pop	{r7}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	.LC2
.Lfe9:
	.size	 AGBAssert,.Lfe9-AGBAssert
.text
	.align	2, 0 @ Don't pad with nop

