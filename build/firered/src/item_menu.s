@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gBagMenuState
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gBagMenuState,object
	.size	 gBagMenuState,20
gBagMenuState:
	.space	20
	.align	2, 0
	.type	 sBagMenuDisplay,object
	.size	 sBagMenuDisplay,4
sBagMenuDisplay:
	.word	0x0
	.align	2, 0
	.type	 sBagBgTilemapBuffer,object
	.size	 sBagBgTilemapBuffer,4
sBagBgTilemapBuffer:
	.word	0x0
	.align	2, 0
	.type	 sListMenuItems,object
	.size	 sListMenuItems,4
sListMenuItems:
	.word	0x0
	.align	2, 0
	.type	 sListMenuItemStrings,object
	.size	 sListMenuItemStrings,4
sListMenuItemStrings:
	.word	0x0
	.type	 sContextMenuItemsBuffer,object
	.size	 sContextMenuItemsBuffer,4
sContextMenuItemsBuffer:
	.space	4
	.align	2, 0
	.type	 sContextMenuItemsPtr,object
	.size	 sContextMenuItemsPtr,4
sContextMenuItemsPtr:
	.word	0x0
	.type	 sContextMenuNumItems,object
	.size	 sContextMenuNumItems,1
sContextMenuNumItems:
	.byte	0x0
	.align	2, 0
	.type	 sBackupPlayerBag,object
	.size	 sBackupPlayerBag,4
sBackupPlayerBag:
	.word	0x0
	.globl	gSpecialVar_ItemId
	.align	1, 0
	.type	 gSpecialVar_ItemId,object
	.size	 gSpecialVar_ItemId,2
gSpecialVar_ItemId:
	.short	0x0
	.section .rodata
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,8
sBgTemplates:
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xed
	.byte	0x11
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sPocketNames,object
sPocketNames:
	.word	gText_Items2
	.word	gText_KeyItems2
	.word	gText_PokeBalls2
	.size	 sPocketNames,12
	.align	1, 0
	.type	 sItemListTilemap,object
	.size	 sItemListTilemap,432
sItemListTilemap:
	.short	0x8
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x408
	.short	0x9
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0x9
	.short	0x9
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x9
	.short	0x9
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0x9
	.short	0x9
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x9
	.short	0x9
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0x9
	.short	0x9
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x9
	.short	0x9
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0x9
	.short	0x9
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x9
	.short	0x9
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0x9
	.short	0x9
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x9
	.short	0x1d
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x1e
	.short	0x33
	.align	2, 0
	.type	 sItemMenuContextActions,object
sItemMenuContextActions:
	.word	gOtherText_Use
	.word	Task_ItemMenuAction_Use
	.word	gOtherText_Toss
	.word	Task_ItemMenuAction_Toss
	.word	gOtherText_Register
	.word	Task_ItemMenuAction_ToggleSelect
	.word	gOtherText_Give
	.word	Task_ItemMenuAction_Give
	.word	gFameCheckerText_Cancel
	.word	Task_ItemMenuAction_Cancel
	.word	gOtherText_Use
	.word	Task_ItemMenuAction_BattleUse
	.word	gOtherText_Check
	.word	Task_ItemMenuAction_Use
	.word	gOtherText_Open
	.word	Task_ItemMenuAction_Use
	.word	gOtherText_Open
	.word	Task_ItemMenuAction_BattleUse
	.word	gOtherText_Walk
	.word	Task_ItemMenuAction_Use
	.word	gOtherText_Deselect
	.word	Task_ItemMenuAction_ToggleSelect
	.word	gString_Dummy
	.word	0x0
	.size	 sItemMenuContextActions,96
	.type	 sContextMenuItems_Field,object
sContextMenuItems_Field:
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x4
	.byte	0x0
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x3
	.byte	0x1
	.byte	0x4
	.byte	0xb
	.size	 sContextMenuItems_Field,12
	.type	 sContextMenuItems_CheckGiveTossCancel,object
sContextMenuItems_CheckGiveTossCancel:
	.byte	0x6
	.byte	0x3
	.byte	0x1
	.byte	0x4
	.size	 sContextMenuItems_CheckGiveTossCancel,4
	.type	 sContextMenuItems_GiveIfNotKeyItemPocket,object
sContextMenuItems_GiveIfNotKeyItemPocket:
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0xb
	.byte	0x3
	.byte	0x4
	.size	 sContextMenuItems_GiveIfNotKeyItemPocket,6
	.type	 sContextMenuItems_Open,object
sContextMenuItems_Open:
	.byte	0x7
	.byte	0x4
	.size	 sContextMenuItems_Open,2
	.type	 sContextMenuItems_BattleUse,object
sContextMenuItems_BattleUse:
	.byte	0x5
	.byte	0x4
	.size	 sContextMenuItems_BattleUse,2
	.type	 sContextMenuItems_Cancel,object
sContextMenuItems_Cancel:
	.byte	0x4
	.byte	0xb
	.size	 sContextMenuItems_Cancel,2
	.align	2, 0
	.type	 sItemContextTaskFuncs,object
sItemContextTaskFuncs:
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_FieldGive
	.word	Task_ItemContext_Sell
	.word	Task_ItemContext_Deposit
	.word	Task_ItemContext_PcBoxGive
	.word	Task_ItemContext_FieldOrBattle
	.word	0x0
	.size	 sItemContextTaskFuncs,28
	.align	2, 0
	.type	 sYesNoMenu_Toss,object
	.size	 sYesNoMenu_Toss,8
sYesNoMenu_Toss:
	.word	Task_TossItem_Yes
	.word	Task_TossItem_No
	.align	2, 0
	.type	 sYesNoMenu_Sell,object
	.size	 sYesNoMenu_Sell,8
sYesNoMenu_Sell:
	.word	Task_SellItem_Yes
	.word	Task_SellItem_No
	.type	 sListItemTextColor_RegularItem,object
sListItemTextColor_RegularItem:
	.byte	0xfc
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0xff
	.size	 sListItemTextColor_RegularItem,6
	.type	 sListItemTextColor_TmCase_BerryPouch,object
sListItemTextColor_TmCase_BerryPouch:
	.byte	0xfc
	.byte	0x4
	.byte	0x8
	.byte	0x0
	.byte	0x9
	.byte	0xff
	.size	 sListItemTextColor_TmCase_BerryPouch,6
	.align	2, 0
	.type	 sPocketSwitchArrowPairTemplate,object
	.size	 sPocketSwitchArrowPairTemplate,16
sPocketSwitchArrowPairTemplate:
	.byte	0x0
	.byte	0x8
	.byte	0x48
	.byte	0x1
	.byte	0x48
	.byte	0x48
	.short	0x0
	.short	0x2
	.short	0x6f
	.short	0x6f
	.byte	0x0
	.space	1
	.type	 sBlit_SelectButton,object
sBlit_SelectButton:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0xdd
	.byte	0xdd
	.byte	0xd0
	.byte	0xdf
	.byte	0xdd
	.byte	0xdd
	.byte	0xf0
	.byte	0xdd
	.byte	0xee
	.byte	0xde
	.byte	0xf0
	.byte	0xdd
	.byte	0xde
	.byte	0xdd
	.byte	0xf0
	.byte	0xdd
	.byte	0xee
	.byte	0xde
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xee
	.byte	0xde
	.byte	0xde
	.byte	0xdd
	.byte	0xde
	.byte	0xdd
	.byte	0xde
	.byte	0xdd
	.byte	0xee
	.byte	0xde
	.byte	0xde
	.byte	0xdd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0xd
	.byte	0x0
	.byte	0xdd
	.byte	0xdd
	.byte	0xff
	.byte	0x0
	.byte	0xdd
	.byte	0xdd
	.byte	0xfd
	.byte	0xd
	.byte	0xed
	.byte	0xee
	.byte	0xdd
	.byte	0xf
	.byte	0xee
	.byte	0xee
	.byte	0xde
	.byte	0xf
	.byte	0xee
	.byte	0xee
	.byte	0xde
	.byte	0xf
	.byte	0xf0
	.byte	0xdd
	.byte	0xdd
	.byte	0xde
	.byte	0xf0
	.byte	0xdd
	.byte	0xee
	.byte	0xde
	.byte	0xd0
	.byte	0xdf
	.byte	0xdd
	.byte	0xdd
	.byte	0x0
	.byte	0xff
	.byte	0xdd
	.byte	0xdd
	.byte	0x0
	.byte	0xd0
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xde
	.byte	0xdd
	.byte	0xde
	.byte	0xdd
	.byte	0xee
	.byte	0xde
	.byte	0xee
	.byte	0xde
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xee
	.byte	0xee
	.byte	0xde
	.byte	0xf
	.byte	0xed
	.byte	0xee
	.byte	0xdd
	.byte	0xf
	.byte	0xdd
	.byte	0xdd
	.byte	0xfd
	.byte	0xd
	.byte	0xdd
	.byte	0xdd
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sBlit_SelectButton,192
.text
	.align	2, 0
	.globl	GoToBagMenu
	.type	 GoToBagMenu,function
	.thumb_func
GoToBagMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r7, r6, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	bl	NullBagMenuBufferPtrs
	ldr	r5, .L20
	mov	r0, #0x14
	bl	Alloc
	str	r0, [r5]
	cmp	r0, #0
	bne	.L5	@cond_branch
	add	r0, r4, #0
	bl	SetMainCallback2
	b	.L6
.L21:
	.align	2, 0
.L20:
	.word	sBagMenuDisplay
.L5:
	cmp	r6, #0xb
	beq	.L7	@cond_branch
	ldr	r0, .L22
	strb	r6, [r0, #0x4]
.L7:
	cmp	r4, #0
	beq	.L8	@cond_branch
	ldr	r0, .L22
	str	r4, [r0]
.L8:
	ldr	r1, [r5]
	mov	r0, #0x0
	str	r0, [r1]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0x31
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldr	r1, [r5]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x8]
	ldr	r1, [r5]
	strb	r0, [r1, #0x9]
	cmp	r6, #0x3
	bne	.L9	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	sub	r0, r0, #0xf
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	b	.L19
.L23:
	.align	2, 0
.L22:
	.word	gBagMenuState
.L9:
	cmp	r7, #0x6
	bne	.L11	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	b	.L19
.L11:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
.L19:
	strb	r0, [r2, #0x5]
	mov	r1, #0x0
	ldr	r4, .L24
	ldr	r5, .L24+0x4
	ldr	r6, .L24+0x8
	ldr	r3, .L24+0xc
	mov	r2, #0x0
.L16:
	ldr	r0, [r3]
	add	r0, r0, #0x10
	add	r0, r0, r1
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bls	.L16	@cond_branch
	mov	r0, r8
	cmp	r0, #0x2
	bhi	.L18	@cond_branch
	ldr	r0, .L24+0x10
	mov	r1, r8
	strh	r1, [r0, #0x6]
.L18:
	ldrb	r0, [r4]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r4]
	mov	r0, #0x0
	strh	r0, [r5]
	add	r0, r6, #0
	bl	SetMainCallback2
.L6:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	gTextFlags
	.word	gSpecialVar_ItemId
	.word	CB2_OpenBagMenu
	.word	sBagMenuDisplay
	.word	gBagMenuState
.Lfe1:
	.size	 GoToBagMenu,.Lfe1-GoToBagMenu
	.align	2, 0
	.globl	CB2_BagMenuFromStartMenu
	.type	 CB2_BagMenuFromStartMenu,function
	.thumb_func
CB2_BagMenuFromStartMenu:
	push	{lr}
	ldr	r2, .L27
	mov	r0, #0x0
	mov	r1, #0x3
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	CB2_ReturnToFieldWithOpenMenu
.Lfe2:
	.size	 CB2_BagMenuFromStartMenu,.Lfe2-CB2_BagMenuFromStartMenu
	.align	2, 0
	.globl	CB2_BagMenuFromBattle
	.type	 CB2_BagMenuFromBattle,function
	.thumb_func
CB2_BagMenuFromBattle:
	push	{lr}
	ldr	r2, .L30
	mov	r0, #0x5
	mov	r1, #0x3
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	SetCB2ToReshowScreenAfterMenu2
.Lfe3:
	.size	 CB2_BagMenuFromBattle,.Lfe3-CB2_BagMenuFromBattle
	.align	2, 0
	.type	 CB2_BagMenuRun,function
	.thumb_func
CB2_BagMenuRun:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	DoScheduledBgTilemapCopiesToVram
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 CB2_BagMenuRun,.Lfe4-CB2_BagMenuRun
	.align	2, 0
	.type	 VBlankCB_BagMenuRun,function
	.thumb_func
VBlankCB_BagMenuRun:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 VBlankCB_BagMenuRun,.Lfe5-VBlankCB_BagMenuRun
	.align	2, 0
	.type	 CB2_OpenBagMenu,function
	.thumb_func
CB2_OpenBagMenu:
	push	{lr}
.L35:
	bl	IsActiveOverworldLinkBusy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L36	@cond_branch
	bl	LoadBagMenuGraphics
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L36	@cond_branch
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L35	@cond_branch
.L36:
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 CB2_OpenBagMenu,.Lfe6-CB2_OpenBagMenu
	.align	2, 0
	.type	 LoadBagMenuGraphics,function
	.thumb_func
LoadBagMenuGraphics:
	push	{r4, r5, lr}
	ldr	r0, .L79
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x13
	bls	.LCB284
	b	.L73	@long jump
.LCB284:
	lsl	r0, r0, #0x2
	ldr	r1, .L79+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L80:
	.align	2, 0
.L79:
	.word	gMain
	.word	.L74
	.align	2, 0
	.align	2, 0
.L74:
	.word	.L44
	.word	.L45
	.word	.L46
	.word	.L47
	.word	.L48
	.word	.L49
	.word	.L50
	.word	.L52
	.word	.L55
	.word	.L57
	.word	.L58
	.word	.L59
	.word	.L61
	.word	.L62
	.word	.L65
	.word	.L66
	.word	.L67
	.word	.L68
	.word	.L69
	.word	.L70
.L44:
	bl	SetVBlankHBlankCallbacksToNull
	bl	ClearScheduledBgCopiesToVram
	b	.L76
.L45:
	bl	ScanlineEffect_Stop
	b	.L76
.L46:
	bl	FreeAllSpritePalettes
	b	.L76
.L47:
	bl	ResetPaletteFade
	ldr	r2, .L81
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	b	.L77
.L82:
	.align	2, 0
.L81:
	.word	gPaletteFade
.L48:
	bl	ResetSpriteData
	b	.L76
.L49:
	bl	ResetItemMenuIconState
	b	.L76
.L50:
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB350
	b	.L76	@long jump
.LCB350:
	bl	ResetTasks
	b	.L76
.L52:
	bl	BagMenuInitBgsAndAllocTilemapBuffer
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L78	@cond_branch
	ldr	r0, .L83
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x10]
	b	.L76
.L84:
	.align	2, 0
.L83:
	.word	sBagMenuDisplay
.L55:
	bl	DoLoadBagGraphics
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB385
	b	.L43	@long jump
.LCB385:
	b	.L76
.L57:
	bl	InitBagWindows
	b	.L76
.L58:
	bl	All_CalculateNItemsAndMaxShowed
	bl	CalculateInitialCursorPosAndItemsAbove
	bl	UpdatePocketScrollPositions
	b	.L76
.L59:
	bl	TryAllocListMenuBuffers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L76	@cond_branch
.L78:
	bl	FadeOutOfBagMenu
	mov	r0, #0x1
	b	.L75
.L61:
	ldr	r0, .L85
	ldrb	r0, [r0, #0x6]
	bl	Bag_BuildListMenuTemplate
	b	.L76
.L86:
	.align	2, 0
.L85:
	.word	gBagMenuState
.L62:
	ldr	r0, .L87
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x3
	beq	.L63	@cond_branch
	bl	PrintBagPocketName
	b	.L76
.L88:
	.align	2, 0
.L87:
	.word	gBagMenuState
.L63:
	bl	BagDrawDepositItemTextBox
	b	.L76
.L65:
	ldr	r4, .L89
	ldrb	r0, [r4, #0x4]
	bl	CreateBagInputHandlerTask
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L89+0x4
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r1, r4, #0
	add	r1, r1, #0xe
	add	r1, r2, r1
	ldrh	r1, [r1]
	add	r4, r4, #0x8
	add	r2, r2, r4
	ldrh	r2, [r2]
	bl	ListMenuInit
	ldr	r2, .L89+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	strh	r0, [r1, #0x8]
	strh	r2, [r1, #0xe]
	strh	r2, [r1, #0x18]
	b	.L76
.L90:
	.align	2, 0
.L89:
	.word	gBagMenuState
	.word	gMultiuseListMenuTemplate
	.word	gTasks
.L66:
	ldr	r0, .L91
	ldrb	r0, [r0, #0x6]
	bl	CreateBagSprite
	b	.L76
.L92:
	.align	2, 0
.L91:
	.word	gBagMenuState
.L67:
	bl	CreatePocketScrollArrowPair
	bl	CreatePocketSwitchArrowPair
	b	.L76
.L68:
	bl	CreateSwapLine
	b	.L76
.L69:
	bl	ShowBagOrBeginWin0OpenTask
	b	.L76
.L70:
	ldr	r0, .L93
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x3
	bne	.L71	@cond_branch
	mov	r0, #0x1d
	bl	SetHelpContext
	b	.L72
.L94:
	.align	2, 0
.L93:
	.word	gBagMenuState
.L71:
	mov	r0, #0x9
	bl	SetHelpContext
.L72:
	ldr	r2, .L95
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
.L77:
	strb	r0, [r2, #0x8]
.L76:
	ldr	r1, .L95+0x4
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L43
.L96:
	.align	2, 0
.L95:
	.word	gPaletteFade
	.word	gMain
.L73:
	ldr	r0, .L97
	bl	SetVBlankCallback
	ldr	r0, .L97+0x4
	bl	SetMainCallback2
	mov	r0, #0x1
	b	.L75
.L98:
	.align	2, 0
.L97:
	.word	VBlankCB_BagMenuRun
	.word	CB2_BagMenuRun
.L43:
	mov	r0, #0x0
.L75:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 LoadBagMenuGraphics,.Lfe7-LoadBagMenuGraphics
	.align	2, 0
	.type	 FadeOutOfBagMenu,function
	.thumb_func
FadeOutOfBagMenu:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L100
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L100+0x4
	bl	SetVBlankCallback
	ldr	r0, .L100+0x8
	bl	SetMainCallback2
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	Task_WaitFadeOutOfBagMenu
	.word	VBlankCB_BagMenuRun
	.word	CB2_BagMenuRun
.Lfe8:
	.size	 FadeOutOfBagMenu,.Lfe8-FadeOutOfBagMenu
	.align	2, 0
	.type	 Task_WaitFadeOutOfBagMenu,function
	.thumb_func
Task_WaitFadeOutOfBagMenu:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L104
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L103	@cond_branch
	ldr	r0, .L104+0x4
	ldr	r0, [r0]
	bl	SetMainCallback2
	bl	DestroyBagMenuResources
	add	r0, r4, #0
	bl	DestroyTask
.L103:
	pop	{r4}
	pop	{r0}
	bx	r0
.L105:
	.align	2, 0
.L104:
	.word	gPaletteFade
	.word	gBagMenuState
.Lfe9:
	.size	 Task_WaitFadeOutOfBagMenu,.Lfe9-Task_WaitFadeOutOfBagMenu
	.align	2, 0
	.type	 NullBagMenuBufferPtrs,function
	.thumb_func
NullBagMenuBufferPtrs:
	ldr	r0, .L107
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L107+0x4
	str	r1, [r0]
	ldr	r0, .L107+0x8
	str	r1, [r0]
	ldr	r0, .L107+0xc
	str	r1, [r0]
	bx	lr
.L108:
	.align	2, 0
.L107:
	.word	sBagMenuDisplay
	.word	sBagBgTilemapBuffer
	.word	sListMenuItems
	.word	sListMenuItemStrings
.Lfe10:
	.size	 NullBagMenuBufferPtrs,.Lfe10-NullBagMenuBufferPtrs
	.align	2, 0
	.type	 BagMenuInitBgsAndAllocTilemapBuffer,function
	.thumb_func
BagMenuInitBgsAndAllocTilemapBuffer:
	push	{r4, r5, lr}
	bl	ResetAllBgsCoordinatesAndBgCntRegs
	ldr	r5, .L112
	mov	r4, #0x80
	lsl	r4, r4, #0x4
	add	r0, r4, #0
	bl	Alloc
	str	r0, [r5]
	cmp	r0, #0
	beq	.L110	@cond_branch
	mov	r1, #0x0
	add	r2, r4, #0
	bl	memset
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L112+0x4
	mov	r0, #0x0
	mov	r2, #0x2
	bl	InitBgsFromTemplates
	ldr	r1, [r5]
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0xc1
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1
	b	.L111
.L113:
	.align	2, 0
.L112:
	.word	sBagBgTilemapBuffer
	.word	sBgTemplates
.L110:
	mov	r0, #0x0
.L111:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 BagMenuInitBgsAndAllocTilemapBuffer,.Lfe11-BagMenuInitBgsAndAllocTilemapBuffer
	.align	2, 0
	.type	 DoLoadBagGraphics,function
	.thumb_func
DoLoadBagGraphics:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L134
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x5
	bls	.LCB784
	b	.L129	@long jump
.LCB784:
	lsl	r0, r0, #0x2
	ldr	r1, .L134+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L135:
	.align	2, 0
.L134:
	.word	sBagMenuDisplay
	.word	.L130
	.align	2, 0
	.align	2, 0
.L130:
	.word	.L116
	.word	.L117
	.word	.L121
	.word	.L123
	.word	.L127
	.word	.L128
.L116:
	bl	ResetTempTileDataBuffers
	ldr	r1, .L136
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	b	.L132
.L137:
	.align	2, 0
.L136:
	.word	gBagBg_Gfx
.L117:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L115	@cond_branch
	ldr	r0, .L138
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x3
	beq	.L119	@cond_branch
	ldr	r0, .L138+0x4
	ldr	r1, .L138+0x8
	ldr	r1, [r1]
	bl	LZDecompressWram
	b	.L132
.L139:
	.align	2, 0
.L138:
	.word	gBagMenuState
	.word	gBagBg_Tilemap
	.word	sBagBgTilemapBuffer
.L119:
	ldr	r0, .L140
	ldr	r1, .L140+0x4
	ldr	r1, [r1]
	bl	LZDecompressWram
	b	.L132
.L141:
	.align	2, 0
.L140:
	.word	gBagBg_ItemPC_Tilemap
	.word	sBagBgTilemapBuffer
.L121:
	ldr	r0, .L142
	mov	r1, #0x0
	mov	r2, #0x60
	bl	LoadCompressedPalette
	bl	BagIsTutorial
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L132	@cond_branch
	ldr	r0, .L142+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L132	@cond_branch
	ldr	r0, .L142+0x8
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L132
.L143:
	.align	2, 0
.L142:
	.word	gBagBgPalette
	.word	gSaveBlock2Ptr
	.word	gBagBgPalette_FemaleOverride
.L123:
	bl	BagIsTutorial
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L125	@cond_branch
	ldr	r0, .L144
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L124	@cond_branch
.L125:
	ldr	r0, .L144+0x4
	b	.L133
.L145:
	.align	2, 0
.L144:
	.word	gSaveBlock2Ptr
	.word	gSpriteSheet_BagMale
.L124:
	ldr	r0, .L146
	bl	LoadCompressedSpriteSheet
	b	.L132
.L147:
	.align	2, 0
.L146:
	.word	gSpriteSheet_BagFemale
.L127:
	ldr	r0, .L148
	bl	LoadCompressedSpritePalette
	b	.L132
.L149:
	.align	2, 0
.L148:
	.word	gSpritePalette_Bag
.L128:
	ldr	r0, .L150
.L133:
	bl	LoadCompressedSpriteSheet
.L132:
	ldr	r0, .L150+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
	b	.L115
.L151:
	.align	2, 0
.L150:
	.word	gBagSwapSpriteSheet
	.word	sBagMenuDisplay
.L129:
	ldr	r0, .L152
	bl	LoadCompressedSpritePalette
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x10]
	mov	r0, #0x1
	b	.L131
.L153:
	.align	2, 0
.L152:
	.word	gBagSwapSpritePalette
.L115:
	mov	r0, #0x0
.L131:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 DoLoadBagGraphics,.Lfe12-DoLoadBagGraphics
	.align	2, 0
	.type	 CreateBagInputHandlerTask,function
	.thumb_func
CreateBagInputHandlerTask:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x6
	cmp	r0, #0x4
	bhi	.L161	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L170
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L171:
	.align	2, 0
.L170:
	.word	.L162
	.align	2, 0
	.align	2, 0
.L162:
	.word	.L156
	.word	.L159
	.word	.L160
	.word	.L157
	.word	.L158
.L156:
	ldr	r0, .L172
	b	.L165
.L173:
	.align	2, 0
.L172:
	.word	Task_Bag_OldManTutorial
.L157:
	ldr	r0, .L174
	b	.L165
.L175:
	.align	2, 0
.L174:
	.word	Task_Bag_TeachyTvRegister
.L158:
	ldr	r0, .L176
	b	.L165
.L177:
	.align	2, 0
.L176:
	.word	Task_Bag_TeachyTvTMs
.L159:
	ldr	r0, .L178
	b	.L165
.L179:
	.align	2, 0
.L178:
	.word	Task_Bag_TeachyTvStatus
.L160:
	ldr	r0, .L180
	b	.L165
.L181:
	.align	2, 0
.L180:
	.word	Task_Bag_TeachyTvCatching
.L161:
	ldr	r0, .L182
.L165:
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L183:
	.align	2, 0
.L182:
	.word	Task_BagMenu_HandleInput
.Lfe13:
	.size	 CreateBagInputHandlerTask,.Lfe13-CreateBagInputHandlerTask
	.align	2, 0
	.type	 TryAllocListMenuBuffers,function
	.thumb_func
TryAllocListMenuBuffers:
	push	{r4, lr}
	ldr	r4, .L188
	mov	r0, #0xac
	lsl	r0, r0, #0x1
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	beq	.L186	@cond_branch
	ldr	r4, .L188+0x4
	ldr	r0, .L188+0x8
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	beq	.L186	@cond_branch
	mov	r0, #0x1
	b	.L187
.L189:
	.align	2, 0
.L188:
	.word	sListMenuItems
	.word	sListMenuItemStrings
	.word	0x331
.L186:
	mov	r0, #0x0
.L187:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 TryAllocListMenuBuffers,.Lfe14-TryAllocListMenuBuffers
	.align	2, 0
	.type	 Bag_BuildListMenuTemplate,function
	.thumb_func
Bag_BuildListMenuTemplate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r7, #0x3
	ldr	r0, .L196
	add	r1, r1, r0
	mov	r8, r1
	mov	r6, #0x0
	ldr	r0, .L196+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xa
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r6, r0
	bcs	.L192	@cond_branch
	ldr	r5, .L196+0x8
.L194:
	lsl	r2, r6, #0x2
	add	r4, r2, r6
	lsl	r4, r4, #0x2
	sub	r4, r4, r6
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r3, r8
	ldr	r1, [r3]
	add	r2, r2, r1
	ldrh	r1, [r2]
	bl	BagListMenuGetItemNameColored
	ldr	r0, .L196+0xc
	ldr	r0, [r0]
	lsl	r1, r6, #0x3
	add	r1, r1, r0
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r1]
	str	r6, [r1, #0x4]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L196+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xa
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.L194	@cond_branch
.L192:
	ldr	r5, .L196+0x8
	lsl	r4, r6, #0x2
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	sub	r4, r4, r6
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r1, .L196+0x10
	bl	StringCopy
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r1, .L196+0x14
	bl	StringAppend
	ldr	r0, .L196+0xc
	ldr	r2, [r0]
	lsl	r1, r6, #0x3
	add	r1, r1, r2
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r1]
	str	r6, [r1, #0x4]
	ldr	r3, .L196+0x18
	str	r2, [r3]
	ldr	r0, .L196+0x4
	ldr	r2, [r0]
	add	r0, r2, #0
	add	r0, r0, #0xa
	add	r0, r0, r7
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r3, #0xc]
	strb	r1, [r3, #0x10]
	strb	r1, [r3, #0x11]
	mov	r0, #0x9
	strb	r0, [r3, #0x12]
	mov	r0, #0x1
	strb	r0, [r3, #0x13]
	ldrb	r0, [r3, #0x16]
	mov	r4, #0x8
	neg	r4, r4
	and	r4, r4, r0
	mov	r0, #0x39
	neg	r0, r0
	and	r4, r4, r0
	mov	r0, #0x10
	orr	r4, r4, r0
	strb	r4, [r3, #0x16]
	ldrb	r0, [r3, #0x14]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r0
	mov	r5, #0x2
	orr	r1, r1, r5
	strb	r1, [r3, #0x14]
	add	r2, r2, #0xd
	add	r2, r2, r7
	ldrb	r0, [r2]
	strh	r0, [r3, #0xe]
	ldrb	r0, [r3, #0x17]
	mov	r2, #0x40
	neg	r2, r2
	and	r2, r2, r0
	orr	r2, r2, r5
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x20
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	mov	r0, #0x30
	strb	r0, [r3, #0x15]
	ldr	r0, .L196+0x1c
	str	r0, [r3, #0x4]
	ldr	r0, .L196+0x20
	str	r0, [r3, #0x8]
	mov	r0, #0x3f
	and	r2, r2, r0
	strb	r2, [r3, #0x17]
	and	r4, r4, r0
	strb	r4, [r3, #0x16]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	gBagPockets
	.word	sBagMenuDisplay
	.word	sListMenuItemStrings
	.word	sListMenuItems
	.word	sListItemTextColor_RegularItem
	.word	gFameCheckerText_Cancel
	.word	gMultiuseListMenuTemplate
	.word	BagListMenuMoveCursorFunc
	.word	BagListMenuItemPrintFunc
.Lfe15:
	.size	 Bag_BuildListMenuTemplate,.Lfe15-Bag_BuildListMenuTemplate
	.align	2, 0
	.type	 BagListMenuGetItemNameColored,function
	.thumb_func
BagListMenuGetItemNameColored:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r0, .L201
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	cmp	r1, #0x1
	bhi	.L199	@cond_branch
	ldr	r1, .L201+0x4
	add	r0, r4, #0
	bl	StringCopy
	b	.L200
.L202:
	.align	2, 0
.L201:
	.word	-0x16c0000
	.word	sListItemTextColor_TmCase_BerryPouch
.L199:
	ldr	r1, .L203
	add	r0, r4, #0
	bl	StringCopy
.L200:
	add	r0, r5, #0
	bl	ItemId_GetName
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringAppend
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L204:
	.align	2, 0
.L203:
	.word	sListItemTextColor_RegularItem
.Lfe16:
	.size	 BagListMenuGetItemNameColored,.Lfe16-BagListMenuGetItemNameColored
	.align	2, 0
	.type	 BagListMenuMoveCursorFunc,function
	.thumb_func
BagListMenuMoveCursorFunc:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	beq	.L206	@cond_branch
	mov	r0, #0xf5
	bl	PlaySE
	bl	ShakeBagSprite
.L206:
	ldr	r4, .L211
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0xff
	bne	.L207	@cond_branch
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	mov	r0, #0x1
	eor	r0, r0, r1
	bl	DestroyItemMenuIcon
	ldr	r2, [r4]
	ldr	r0, .L211+0x4
	ldrh	r1, [r0, #0x6]
	add	r0, r2, #0
	add	r0, r0, #0xa
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, r5
	beq	.L208	@cond_branch
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r5, #0x10
	lsr	r1, r1, #0x10
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	bl	CreateItemMenuIcon
	b	.L209
.L212:
	.align	2, 0
.L211:
	.word	sBagMenuDisplay
	.word	gBagMenuState
.L208:
	ldr	r0, .L213
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	bl	CreateItemMenuIcon
.L209:
	ldr	r4, .L213+0x4
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x5]
	lsl	r0, r2, #0x1a
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x4
	mov	r0, #0x31
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x5]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L207	@cond_branch
	add	r0, r5, #0
	bl	PrintItemDescriptionOnMessageWindow
.L207:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	0x177
	.word	sBagMenuDisplay
.Lfe17:
	.size	 BagListMenuMoveCursorFunc,.Lfe17-BagListMenuMoveCursorFunc
	.align	2, 0
	.type	 BagListMenuItemPrintFunc,function
	.thumb_func
BagListMenuItemPrintFunc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r0, .L223
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x4]
	cmp	r1, #0xff
	beq	.L216	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L217	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x2
	bl	bag_menu_print_cursor
	b	.L216
.L224:
	.align	2, 0
.L223:
	.word	sBagMenuDisplay
.L217:
	add	r0, r6, #0
	mov	r1, #0xff
	bl	bag_menu_print_cursor
.L216:
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L219	@cond_branch
	ldr	r0, .L225
	ldr	r0, [r0]
	ldr	r5, .L225+0x4
	ldrh	r1, [r5, #0x6]
	add	r0, r0, #0xa
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L219	@cond_branch
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r1, r4, #0
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrb	r0, [r5, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	BagGetQuantityByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldrh	r0, [r5, #0x6]
	cmp	r0, #0x1
	beq	.L220	@cond_branch
	add	r0, r7, #0
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L220	@cond_branch
	ldr	r0, .L225+0x8
	add	r1, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L225+0xc
	ldr	r1, .L225+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	mov	r0, #0x1
	str	r0, [sp, #0x10]
	mov	r0, r8
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0x6e
	bl	BagPrintTextOnWindow
	b	.L219
.L226:
	.align	2, 0
.L225:
	.word	sBagMenuDisplay
	.word	gBagMenuState
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TimesStrVar1
.L220:
	ldr	r0, .L227
	ldr	r0, [r0]
	ldr	r1, .L227+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L219	@cond_branch
	cmp	r0, r7
	bne	.L219	@cond_branch
	ldr	r1, .L227+0x8
	mov	r0, #0x18
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r2, #0x70
	add	r3, r6, #0
	bl	BlitBitmapToWindow
.L219:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	gSaveBlock1Ptr
	.word	0x296
	.word	sBlit_SelectButton
.Lfe18:
	.size	 BagListMenuItemPrintFunc,.Lfe18-BagListMenuItemPrintFunc
	.align	2, 0
	.type	 bag_menu_print_cursor_,function
	.thumb_func
bag_menu_print_cursor_:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	ListMenuGetYCoordForPrintingArrowCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	bag_menu_print_cursor
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 bag_menu_print_cursor_,.Lfe19-bag_menu_print_cursor_
	.align	2, 0
	.type	 bag_menu_print_cursor,function
	.thumb_func
bag_menu_print_cursor:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0xff
	bne	.L231	@cond_branch
	mov	r0, #0x2
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetMenuCursorDimensionByFont
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1
	add	r3, r5, #0
	bl	FillWindowPixelRect
	b	.L232
.L231:
	ldr	r2, .L233
	str	r5, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	mov	r1, #0x2
	mov	r3, #0x1
	bl	BagPrintTextOnWindow
.L232:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L234:
	.align	2, 0
.L233:
	.word	gText_SelectorArrow2
.Lfe20:
	.size	 bag_menu_print_cursor,.Lfe20-bag_menu_print_cursor
	.align	2, 0
	.type	 PrintBagPocketName,function
	.thumb_func
PrintBagPocketName:
	push	{lr}
	mov	r0, #0x2
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldr	r2, .L236
	ldr	r0, .L236+0x4
	ldrh	r1, [r0, #0x6]
	lsl	r0, r1, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	BagPrintTextOnWin1CenteredColor0
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	sPocketNames
	.word	gBagMenuState
.Lfe21:
	.size	 PrintBagPocketName,.Lfe21-PrintBagPocketName
	.align	2, 0
	.type	 PrintItemDescriptionOnMessageWindow,function
	.thumb_func
PrintItemDescriptionOnMessageWindow:
	push	{r4, lr}
	add	sp, sp, #-0x14
	add	r2, r0, #0
	ldr	r0, .L241
	ldr	r0, [r0]
	ldr	r1, .L241+0x4
	ldrh	r1, [r1, #0x6]
	add	r0, r0, #0xa
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L239	@cond_branch
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r2, #0x10
	lsr	r1, r1, #0x10
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetDescription
	add	r4, r0, #0
	b	.L240
.L242:
	.align	2, 0
.L241:
	.word	sBagMenuDisplay
	.word	gBagMenuState
.L239:
	ldr	r4, .L243
.L240:
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x0
	bl	BagPrintTextOnWindow
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.L244:
	.align	2, 0
.L243:
	.word	gText_CloseBag
.Lfe22:
	.size	 PrintItemDescriptionOnMessageWindow,.Lfe22-PrintItemDescriptionOnMessageWindow
	.align	2, 0
	.type	 CreatePocketScrollArrowPair,function
	.thumb_func
CreatePocketScrollArrowPair:
	push	{r4, lr}
	add	sp, sp, #-0x10
	ldr	r4, .L246
	ldr	r1, [r4]
	ldr	r2, .L246+0x4
	ldrh	r3, [r2, #0x6]
	add	r0, r1, #0
	add	r0, r0, #0xa
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r1, r1, #0xd
	add	r1, r1, r3
	ldrb	r1, [r1]
	sub	r0, r0, r1
	add	r0, r0, #0x1
	str	r0, [sp]
	mov	r0, #0x6e
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	ldrh	r0, [r2, #0x6]
	lsl	r0, r0, #0x1
	add	r2, r2, #0xe
	add	r0, r0, r2
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0xa0
	mov	r2, #0x8
	mov	r3, #0x68
	bl	AddScrollIndicatorArrowPairParameterized
	ldr	r1, [r4]
	strb	r0, [r1, #0x8]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L247:
	.align	2, 0
.L246:
	.word	sBagMenuDisplay
	.word	gBagMenuState
.Lfe23:
	.size	 CreatePocketScrollArrowPair,.Lfe23-CreatePocketScrollArrowPair
	.align	2, 0
	.type	 CreatePocketSwitchArrowPair,function
	.thumb_func
CreatePocketSwitchArrowPair:
	push	{r4, lr}
	ldr	r4, .L250
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L249	@cond_branch
	ldr	r0, .L250+0x4
	ldr	r1, .L250+0x8
	bl	AddScrollIndicatorArrowPair
	ldr	r1, [r4]
	strb	r0, [r1, #0x9]
.L249:
	pop	{r4}
	pop	{r0}
	bx	r0
.L251:
	.align	2, 0
.L250:
	.word	sBagMenuDisplay
	.word	sPocketSwitchArrowPairTemplate
	.word	gBagMenuState+0x6
.Lfe24:
	.size	 CreatePocketSwitchArrowPair,.Lfe24-CreatePocketSwitchArrowPair
	.align	2, 0
	.type	 CreatePocketScrollArrowPair_SellQuantity,function
	.thumb_func
CreatePocketScrollArrowPair_SellQuantity:
	push	{r4, lr}
	add	sp, sp, #-0x10
	ldr	r4, .L253
	ldr	r1, [r4]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x6e
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r1, r1, #0x6
	str	r1, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0x98
	mov	r2, #0x48
	mov	r3, #0x68
	bl	AddScrollIndicatorArrowPairParameterized
	ldr	r1, [r4]
	strb	r0, [r1, #0x8]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L254:
	.align	2, 0
.L253:
	.word	sBagMenuDisplay
.Lfe25:
	.size	 CreatePocketScrollArrowPair_SellQuantity,.Lfe25-CreatePocketScrollArrowPair_SellQuantity
	.align	2, 0
	.type	 CreateArrowPair_QuantitySelect,function
	.thumb_func
CreateArrowPair_QuantitySelect:
	push	{r4, lr}
	add	sp, sp, #-0x10
	ldr	r4, .L256
	ldr	r1, [r4]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x6e
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r1, r1, #0x6
	str	r1, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0xd4
	mov	r2, #0x78
	mov	r3, #0x98
	bl	AddScrollIndicatorArrowPairParameterized
	ldr	r1, [r4]
	strb	r0, [r1, #0x8]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L257:
	.align	2, 0
.L256:
	.word	sBagMenuDisplay
.Lfe26:
	.size	 CreateArrowPair_QuantitySelect,.Lfe26-CreateArrowPair_QuantitySelect
	.align	2, 0
	.type	 BagDestroyPocketScrollArrowPair,function
	.thumb_func
BagDestroyPocketScrollArrowPair:
	push	{r4, lr}
	ldr	r4, .L260
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0xff
	beq	.L259	@cond_branch
	bl	RemoveScrollIndicatorArrowPair
	ldr	r1, [r4]
	mov	r0, #0xff
	strb	r0, [r1, #0x8]
.L259:
	bl	BagDestroyPocketSwitchArrowPair
	pop	{r4}
	pop	{r0}
	bx	r0
.L261:
	.align	2, 0
.L260:
	.word	sBagMenuDisplay
.Lfe27:
	.size	 BagDestroyPocketScrollArrowPair,.Lfe27-BagDestroyPocketScrollArrowPair
	.align	2, 0
	.type	 BagDestroyPocketSwitchArrowPair,function
	.thumb_func
BagDestroyPocketSwitchArrowPair:
	push	{r4, lr}
	ldr	r4, .L264
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x9]
	cmp	r0, #0xff
	beq	.L263	@cond_branch
	bl	RemoveScrollIndicatorArrowPair
	ldr	r1, [r4]
	mov	r0, #0xff
	strb	r0, [r1, #0x9]
.L263:
	pop	{r4}
	pop	{r0}
	bx	r0
.L265:
	.align	2, 0
.L264:
	.word	sBagMenuDisplay
.Lfe28:
	.size	 BagDestroyPocketSwitchArrowPair,.Lfe28-BagDestroyPocketSwitchArrowPair
	.align	2, 0
	.globl	ResetBagCursorPositions
	.type	 ResetBagCursorPositions,function
	.thumb_func
ResetBagCursorPositions:
	push	{r4, r5, lr}
	ldr	r0, .L272
	mov	r2, #0x0
	mov	r1, #0x0
	strh	r1, [r0, #0x6]
	strb	r2, [r0, #0x5]
	mov	r2, #0x0
	add	r5, r0, #0
	add	r5, r5, #0x8
	mov	r3, #0x0
	add	r4, r0, #0
	add	r4, r4, #0xe
.L270:
	lsl	r1, r2, #0x1
	add	r0, r1, r5
	strh	r3, [r0]
	add	r1, r1, r4
	strh	r3, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x2
	bls	.L270	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L273:
	.align	2, 0
.L272:
	.word	gBagMenuState
.Lfe29:
	.size	 ResetBagCursorPositions,.Lfe29-ResetBagCursorPositions
	.align	2, 0
	.globl	PocketCalculateInitialCursorPosAndItemsAbove
	.type	 PocketCalculateInitialCursorPosAndItemsAbove,function
	.thumb_func
PocketCalculateInitialCursorPosAndItemsAbove:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L279
	lsl	r1, r4, #0x1
	add	r0, r2, #0
	add	r0, r0, #0xe
	add	r3, r1, r0
	ldrh	r0, [r3]
	add	r7, r2, #0
	ldr	r6, .L279+0x4
	cmp	r0, #0
	beq	.L275	@cond_branch
	add	r2, r0, #0
	ldr	r1, [r6]
	add	r0, r1, #0
	add	r0, r0, #0xd
	add	r0, r0, r4
	ldrb	r5, [r0]
	add	r2, r2, r5
	add	r1, r1, #0xa
	add	r1, r1, r4
	ldrb	r1, [r1]
	add	r0, r1, #0x1
	cmp	r2, r0
	ble	.L275	@cond_branch
	sub	r0, r5, #0x1
	sub	r0, r1, r0
	strh	r0, [r3]
.L275:
	lsl	r2, r4, #0x1
	add	r0, r7, #0
	add	r0, r0, #0xe
	add	r0, r2, r0
	ldrh	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r2, r2, r0
	ldrh	r0, [r2]
	add	r1, r1, r0
	ldr	r0, [r6]
	add	r0, r0, #0xa
	add	r0, r0, r4
	ldrb	r0, [r0]
	add	r3, r0, #0x1
	cmp	r1, r3
	blt	.L276	@cond_branch
	cmp	r3, #0x1
	bgt	.L277	@cond_branch
	mov	r0, #0x0
.L277:
	strh	r0, [r2]
.L276:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	gBagMenuState
	.word	sBagMenuDisplay
.Lfe30:
	.size	 PocketCalculateInitialCursorPosAndItemsAbove,.Lfe30-PocketCalculateInitialCursorPosAndItemsAbove
	.align	2, 0
	.type	 CalculateInitialCursorPosAndItemsAbove,function
	.thumb_func
CalculateInitialCursorPosAndItemsAbove:
	push	{r4, lr}
	mov	r4, #0x0
.L285:
	add	r0, r4, #0
	bl	PocketCalculateInitialCursorPosAndItemsAbove
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L285	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 CalculateInitialCursorPosAndItemsAbove,.Lfe31-CalculateInitialCursorPosAndItemsAbove
	.align	2, 0
	.type	 UpdatePocketScrollPositions,function
	.thumb_func
UpdatePocketScrollPositions:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x0
	ldr	r0, .L300
	mov	r8, r0
.L291:
	lsl	r2, r6, #0x1
	mov	r3, r8
	add	r1, r2, r3
	ldrh	r0, [r1]
	add	r7, r6, #0x1
	cmp	r0, #0x3
	bls	.L290	@cond_branch
	mov	r5, #0x0
	sub	r0, r0, #0x3
	cmp	r5, r0
	bgt	.L290	@cond_branch
	ldr	r0, .L300+0x4
	ldr	r3, .L300+0x8
	mov	ip, r3
	add	r4, r2, r0
	add	r3, r1, #0
.L296:
	ldrh	r2, [r4]
	mov	r0, ip
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xd
	add	r0, r0, r6
	ldrb	r0, [r0]
	add	r2, r2, r0
	add	r1, r1, #0xa
	add	r1, r1, r6
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	cmp	r2, r0
	beq	.L290	@cond_branch
	ldrh	r0, [r3]
	sub	r0, r0, #0x1
	strh	r0, [r3]
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrh	r0, [r3]
	sub	r0, r0, #0x3
	cmp	r5, r0
	ble	.L296	@cond_branch
.L290:
	lsl	r0, r7, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x2
	bls	.L291	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L301:
	.align	2, 0
.L300:
	.word	gBagMenuState+0x8
	.word	gBagMenuState+0xe
	.word	sBagMenuDisplay
.Lfe32:
	.size	 UpdatePocketScrollPositions,.Lfe32-UpdatePocketScrollPositions
	.align	2, 0
	.type	 DestroyBagMenuResources,function
	.thumb_func
DestroyBagMenuResources:
	push	{lr}
	ldr	r0, .L307
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L303	@cond_branch
	bl	Free
.L303:
	ldr	r0, .L307+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L304	@cond_branch
	bl	Free
.L304:
	ldr	r0, .L307+0x8
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L305	@cond_branch
	bl	Free
.L305:
	ldr	r0, .L307+0xc
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L306	@cond_branch
	bl	Free
.L306:
	bl	FreeAllWindowBuffers
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	sBagMenuDisplay
	.word	sBagBgTilemapBuffer
	.word	sListMenuItems
	.word	sListMenuItemStrings
.Lfe33:
	.size	 DestroyBagMenuResources,.Lfe33-DestroyBagMenuResources
	.align	2, 0
	.globl	ItemMenu_StartFadeToExitCallback
	.type	 ItemMenu_StartFadeToExitCallback,function
	.thumb_func
ItemMenu_StartFadeToExitCallback:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L310
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L310+0x4
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L311:
	.align	2, 0
.L310:
	.word	gTasks
	.word	Task_ItemMenu_WaitFadeAndSwitchToExitCallback
.Lfe34:
	.size	 ItemMenu_StartFadeToExitCallback,.Lfe34-ItemMenu_StartFadeToExitCallback
	.align	2, 0
	.type	 Task_ItemMenu_WaitFadeAndSwitchToExitCallback,function
	.thumb_func
Task_ItemMenu_WaitFadeAndSwitchToExitCallback:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L316
	add	r4, r0, r1
	ldr	r0, .L316+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L313	@cond_branch
	ldr	r0, .L316+0x8
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L313	@cond_branch
	ldrb	r0, [r4]
	ldr	r4, .L316+0xc
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r1, r4, #0
	add	r1, r1, #0xe
	add	r1, r2, r1
	add	r3, r4, #0
	add	r3, r3, #0x8
	add	r2, r2, r3
	bl	DestroyListMenuTask
	ldr	r0, .L316+0x10
	ldr	r0, [r0]
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L314	@cond_branch
	bl	SetMainCallback2
	b	.L315
.L317:
	.align	2, 0
.L316:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	Task_AnimateWin0v
	.word	gBagMenuState
	.word	sBagMenuDisplay
.L314:
	ldr	r0, [r4]
	bl	SetMainCallback2
.L315:
	bl	BagDestroyPocketScrollArrowPair
	bl	DestroyBagMenuResources
	add	r0, r5, #0
	bl	DestroyTask
.L313:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 Task_ItemMenu_WaitFadeAndSwitchToExitCallback,.Lfe35-Task_ItemMenu_WaitFadeAndSwitchToExitCallback
	.align	2, 0
	.type	 ShowBagOrBeginWin0OpenTask,function
	.thumb_func
ShowBagOrBeginWin0OpenTask:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	mov	r5, #0x0
	add	r0, sp, #0x4
	strh	r5, [r0]
	mov	r1, #0x0
	mov	r2, #0x2
	bl	LoadPalette
	mov	r0, #0x48
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	mov	r4, #0x1
	neg	r4, r4
	add	r0, r4, #0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	str	r5, [sp]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r4, .L322
	ldrb	r0, [r4, #0x5]
	cmp	r0, #0x1
	bne	.L320	@cond_branch
	mov	r0, #0x40
	mov	r1, #0xf0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L321
.L323:
	.align	2, 0
.L322:
	.word	gBagMenuState
.L320:
	mov	r0, #0x40
	mov	r1, #0xf0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0xa0
	bl	SetGpuReg
	ldr	r0, .L324
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L324+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0xc0
	strh	r0, [r1, #0x8]
	ldr	r0, .L324+0x8
	strh	r0, [r1, #0xa]
	mov	r0, #0x1
	strb	r0, [r4, #0x5]
.L321:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L325:
	.align	2, 0
.L324:
	.word	Task_AnimateWin0v
	.word	gTasks
	.word	0xfff0
.Lfe36:
	.size	 ShowBagOrBeginWin0OpenTask,.Lfe36-ShowBagOrBeginWin0OpenTask
	.align	2, 0
	.globl	Bag_BeginCloseWin0Animation
	.type	 Bag_BeginCloseWin0Animation,function
	.thumb_func
Bag_BeginCloseWin0Animation:
	push	{lr}
	ldr	r0, .L327
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L327+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	ldr	r0, .L327+0x8
	strh	r0, [r1, #0x8]
	mov	r0, #0x10
	strh	r0, [r1, #0xa]
	ldr	r0, .L327+0xc
	strb	r2, [r0, #0x5]
	pop	{r0}
	bx	r0
.L328:
	.align	2, 0
.L327:
	.word	Task_AnimateWin0v
	.word	gTasks
	.word	0xfff0
	.word	gBagMenuState
.Lfe37:
	.size	 Bag_BeginCloseWin0Animation,.Lfe37-Bag_BeginCloseWin0Animation
	.align	2, 0
	.globl	CB2_SetUpReshowBattleScreenAfterMenu
	.type	 CB2_SetUpReshowBattleScreenAfterMenu,function
	.thumb_func
CB2_SetUpReshowBattleScreenAfterMenu:
	ldr	r1, .L330
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	bx	lr
.L331:
	.align	2, 0
.L330:
	.word	gBagMenuState
.Lfe38:
	.size	 CB2_SetUpReshowBattleScreenAfterMenu,.Lfe38-CB2_SetUpReshowBattleScreenAfterMenu
	.align	2, 0
	.type	 Task_AnimateWin0v,function
	.thumb_func
Task_AnimateWin0v:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L338
	add	r4, r0, r1
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa0
	ble	.L333	@cond_branch
	mov	r0, #0x44
	mov	r1, #0xa0
	bl	SetGpuReg
	b	.L334
.L339:
	.align	2, 0
.L338:
	.word	gTasks+0x8
.L333:
	ldrh	r1, [r4]
	mov	r0, #0x44
	bl	SetGpuReg
.L334:
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	cmp	r1, #0x10
	bne	.L337	@cond_branch
	mov	r2, #0x0
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xa0
	beq	.L336	@cond_branch
.L337:
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bne	.L335	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L335	@cond_branch
.L336:
	add	r0, r5, #0
	bl	DestroyTask
.L335:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 Task_AnimateWin0v,.Lfe39-Task_AnimateWin0v
	.align	2, 0
	.globl	MoveItemSlotInList
	.type	 MoveItemSlotInList,function
	.thumb_func
MoveItemSlotInList:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r3, r2, #0
	cmp	r1, r3
	beq	.L341	@cond_branch
	lsl	r0, r1, #0x2
	add	r0, r0, r4
	ldr	r6, [r0]
	cmp	r3, r1
	bls	.L342	@cond_branch
	sub	r3, r3, #0x1
	lsl	r1, r1, #0x10
	lsl	r0, r3, #0x10
	asr	r2, r0, #0x10
	cmp	r1, r0
	bge	.L348	@cond_branch
	add	r5, r2, #0
.L346:
	asr	r2, r1, #0x10
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldr	r1, [r0, #0x4]
	str	r1, [r0]
	add	r2, r2, #0x1
	lsl	r1, r2, #0x10
	asr	r0, r1, #0x10
	cmp	r0, r5
	blt	.L346	@cond_branch
	b	.L348
.L342:
	lsl	r1, r1, #0x10
	lsl	r0, r3, #0x10
	asr	r2, r0, #0x10
	cmp	r1, r0
	ble	.L348	@cond_branch
	add	r5, r2, #0
.L352:
	asr	r2, r1, #0x10
	lsl	r1, r2, #0x2
	add	r1, r1, r4
	sub	r0, r1, #0x4
	ldr	r0, [r0]
	str	r0, [r1]
	sub	r2, r2, #0x1
	lsl	r1, r2, #0x10
	asr	r0, r1, #0x10
	cmp	r0, r5
	bgt	.L352	@cond_branch
.L348:
	lsl	r0, r3, #0x2
	add	r0, r0, r4
	str	r6, [r0]
.L341:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 MoveItemSlotInList,.Lfe40-MoveItemSlotInList
	.align	2, 0
	.globl	Pocket_CalculateNItemsAndMaxShowed
	.type	 Pocket_CalculateNItemsAndMaxShowed,function
	.thumb_func
Pocket_CalculateNItemsAndMaxShowed:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r5, #0x3
	ldr	r0, .L363
	add	r4, r1, r0
	ldr	r0, [r4]
	ldrb	r1, [r4, #0x4]
	bl	BagPocketCompaction
	ldr	r3, .L363+0x4
	ldr	r0, [r3]
	add	r0, r0, #0xa
	add	r0, r0, r5
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r2, #0x0
	ldrb	r0, [r4, #0x4]
	cmp	r2, r0
	bcs	.L356	@cond_branch
	ldr	r0, [r4]
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L356	@cond_branch
.L359:
	ldr	r0, [r3]
	add	r0, r0, #0xa
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrb	r0, [r4, #0x4]
	cmp	r2, r0
	bcs	.L356	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L359	@cond_branch
.L356:
	ldr	r0, .L363+0x4
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xa
	add	r0, r0, r5
	ldrb	r0, [r0]
	add	r2, r0, #0x1
	cmp	r2, #0x6
	ble	.L361	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0xd
	add	r0, r0, r5
	mov	r1, #0x6
	strb	r1, [r0]
	b	.L362
.L364:
	.align	2, 0
.L363:
	.word	gBagPockets
	.word	sBagMenuDisplay
.L361:
	add	r0, r1, #0
	add	r0, r0, #0xd
	add	r0, r0, r5
	strb	r2, [r0]
.L362:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 Pocket_CalculateNItemsAndMaxShowed,.Lfe41-Pocket_CalculateNItemsAndMaxShowed
	.align	2, 0
	.type	 All_CalculateNItemsAndMaxShowed,function
	.thumb_func
All_CalculateNItemsAndMaxShowed:
	push	{r4, lr}
	mov	r4, #0x0
.L369:
	add	r0, r4, #0
	bl	Pocket_CalculateNItemsAndMaxShowed
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L369	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 All_CalculateNItemsAndMaxShowed,.Lfe42-All_CalculateNItemsAndMaxShowed
	.align	2, 0
	.globl	DisplayItemMessageInBag
	.type	 DisplayItemMessageInBag,function
	.thumb_func
DisplayItemMessageInBag:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	mov	r9, r3
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L372
	add	r4, r4, r0
	mov	r0, #0x5
	bl	OpenBagWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x14]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	bl	GetTextSpeedSetting
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4, #0x14]
	str	r6, [sp]
	str	r0, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	mov	r2, #0x6d
	mov	r3, #0xd
	bl	DisplayMessageAndContinueTask
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L373:
	.align	2, 0
.L372:
	.word	gTasks+0x8
.Lfe43:
	.size	 DisplayItemMessageInBag,.Lfe43-DisplayItemMessageInBag
	.align	2, 0
	.globl	ItemMenu_SetExitCallback
	.type	 ItemMenu_SetExitCallback,function
	.thumb_func
ItemMenu_SetExitCallback:
	ldr	r1, .L375
	ldr	r1, [r1]
	str	r0, [r1]
	bx	lr
.L376:
	.align	2, 0
.L375:
	.word	sBagMenuDisplay
.Lfe44:
	.size	 ItemMenu_SetExitCallback,.Lfe44-ItemMenu_SetExitCallback
	.align	2, 0
	.type	 GetSelectedItemIndex,function
	.thumb_func
GetSelectedItemIndex:
	lsl	r0, r0, #0x18
	ldr	r1, .L378
	lsr	r0, r0, #0x17
	add	r2, r1, #0
	add	r2, r2, #0xe
	add	r2, r0, r2
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldrb	r2, [r2]
	add	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.L379:
	.align	2, 0
.L378:
	.word	gBagMenuState
.Lfe45:
	.size	 GetSelectedItemIndex,.Lfe45-GetSelectedItemIndex
	.align	2, 0
	.type	 Task_BagMenu_HandleInput,function
	.thumb_func
Task_BagMenu_HandleInput:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L402
	add	r7, r0, r1
	ldr	r0, .L402+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3122
	b	.L380	@long jump
.LCB3122:
	ldr	r0, .L402+0x8
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB3130
	b	.L380	@long jump
.LCB3130:
	bl	IsActiveOverworldLinkBusy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB3136
	b	.L380	@long jump
.LCB3136:
	ldr	r4, .L402+0xc
	ldrb	r1, [r4, #0x6]
	add	r0, r6, #0
	bl	ProcessPocketSwitchInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L385	@cond_branch
	cmp	r0, #0x2
	beq	.L386	@cond_branch
	ldr	r0, .L402+0x10
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L384	@cond_branch
	add	r5, r4, #0
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0
	bne	.L384	@cond_branch
	b	.L399
.L403:
	.align	2, 0
.L402:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	Task_AnimateWin0v
	.word	gBagMenuState
	.word	gMain
.L385:
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r6, #0
	b	.L400
.L386:
	add	r0, r6, #0
	mov	r1, #0x1
.L400:
	mov	r2, #0x0
	bl	SwitchPockets
	b	.L380
.L399:
	ldrb	r0, [r7]
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r1, sp
	add	r2, r4, #0
	bl	ListMenuGetScrollAndRow
	mov	r0, sp
	ldrh	r1, [r0]
	ldrh	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L404
	ldr	r0, [r0]
	add	r0, r0, #0xa
	ldrh	r5, [r5, #0x6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r1, r0
	beq	.L384	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, sp
	ldrh	r1, [r4]
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r6, #0
	bl	BeginMovingItemInPocket
	b	.L380
.L405:
	.align	2, 0
.L404:
	.word	sBagMenuDisplay
.L384:
	ldrb	r0, [r7]
	bl	ListMenu_ProcessInput
	add	r4, r0, #0
	ldrb	r0, [r7]
	ldr	r5, .L406
	ldrh	r2, [r5, #0x6]
	lsl	r2, r2, #0x1
	add	r1, r5, #0
	add	r1, r1, #0xe
	add	r1, r2, r1
	add	r3, r5, #0
	add	r3, r3, #0x8
	add	r2, r2, r3
	bl	ListMenuGetScrollAndRow
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L393	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L394	@cond_branch
	b	.L380
.L407:
	.align	2, 0
.L406:
	.word	gBagMenuState
.L393:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L408
	mov	r0, #0x0
	strh	r0, [r1]
	bl	Bag_BeginCloseWin0Animation
	ldr	r1, .L408+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L408+0x8
	b	.L401
.L409:
	.align	2, 0
.L408:
	.word	gSpecialVar_ItemId
	.word	gTasks
	.word	ItemMenu_StartFadeToExitCallback
.L394:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L410
	ldr	r0, [r0]
	add	r0, r0, #0xa
	ldrh	r1, [r5, #0x6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L395	@cond_branch
	ldr	r1, .L410+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	bl	Bag_BeginCloseWin0Animation
	ldr	r1, .L410+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L410+0xc
	b	.L401
.L411:
	.align	2, 0
.L410:
	.word	sBagMenuDisplay
	.word	gSpecialVar_ItemId
	.word	gTasks
	.word	ItemMenu_StartFadeToExitCallback
.L395:
	bl	BagDestroyPocketScrollArrowPair
	ldrb	r0, [r7]
	mov	r1, #0x2
	bl	bag_menu_print_cursor_
	strh	r4, [r7, #0x2]
	ldrb	r0, [r5, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r1, r4, #0
	bl	BagGetQuantityByPocketPosition
	strh	r0, [r7, #0x4]
	ldrb	r0, [r5, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	BagGetItemIdByPocketPosition
	ldr	r1, .L412
	strh	r0, [r1]
	ldr	r1, .L412+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L412+0x8
.L401:
	str	r1, [r0]
.L380:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L413:
	.align	2, 0
.L412:
	.word	gSpecialVar_ItemId
	.word	gTasks
	.word	Task_ItemContextMenuByLocation
.Lfe46:
	.size	 Task_BagMenu_HandleInput,.Lfe46-Task_BagMenu_HandleInput
	.align	2, 0
	.type	 Task_ItemContextMenuByLocation,function
	.thumb_func
Task_ItemContextMenuByLocation:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	Bag_FillMessageBoxWithPalette
	ldr	r1, .L415
	ldr	r0, .L415+0x4
	ldrb	r0, [r0, #0x4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L416:
	.align	2, 0
.L415:
	.word	sItemContextTaskFuncs
	.word	gBagMenuState
.Lfe47:
	.size	 Task_ItemContextMenuByLocation,.Lfe47-Task_ItemContextMenuByLocation
	.align	2, 0
	.type	 Task_RedrawArrowsAndReturnToBagMenuSelect,function
	.thumb_func
Task_RedrawArrowsAndReturnToBagMenuSelect:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	Bag_FillMessageBoxWithPalette
	bl	CreatePocketScrollArrowPair
	bl	CreatePocketSwitchArrowPair
	ldr	r1, .L418
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L418+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L419:
	.align	2, 0
.L418:
	.word	gTasks
	.word	Task_BagMenu_HandleInput
.Lfe48:
	.size	 Task_RedrawArrowsAndReturnToBagMenuSelect,.Lfe48-Task_RedrawArrowsAndReturnToBagMenuSelect
	.align	2, 0
	.type	 Bag_FillMessageBoxWithPalette,function
	.thumb_func
Bag_FillMessageBoxWithPalette:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r1, #0x6
	str	r1, [sp]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0xe
	mov	r3, #0x1e
	bl	SetBgTilemapPalette
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 Bag_FillMessageBoxWithPalette,.Lfe49-Bag_FillMessageBoxWithPalette
	.align	2, 0
	.type	 ProcessPocketSwitchInput,function
	.thumb_func
ProcessPocketSwitchInput:
	push	{r4, lr}
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r0, .L430
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L426	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L430+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L424	@cond_branch
	cmp	r2, #0x1
	bne	.L423	@cond_branch
.L424:
	cmp	r4, #0
	beq	.L426	@cond_branch
	mov	r0, #0xf6
	bl	PlaySE
	mov	r0, #0x1
	b	.L429
.L431:
	.align	2, 0
.L430:
	.word	sBagMenuDisplay
	.word	gMain
.L423:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L427	@cond_branch
	cmp	r2, #0x2
	bne	.L426	@cond_branch
.L427:
	cmp	r4, #0x1
	bhi	.L426	@cond_branch
	mov	r0, #0xf6
	bl	PlaySE
	mov	r0, #0x2
	b	.L429
.L426:
	mov	r0, #0x0
.L429:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 ProcessPocketSwitchInput,.Lfe50-ProcessPocketSwitchInput
	.align	2, 0
	.type	 SwitchPockets,function
	.thumb_func
SwitchPockets:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r6, r1, #0
	lsl	r2, r2, #0x10
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r7, r0, #0x3
	ldr	r0, .L434
	mov	r8, r0
	add	r4, r7, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x1a]
	strh	r0, [r4, #0x18]
	strh	r6, [r4, #0x16]
	cmp	r2, #0
	bne	.L433	@cond_branch
	mov	r0, #0x0
	bl	ClearWindowTilemap
	mov	r0, #0x1
	bl	ClearWindowTilemap
	mov	r0, #0x2
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	ldr	r3, .L434+0x4
	ldrh	r2, [r3, #0x6]
	lsl	r2, r2, #0x1
	add	r1, r3, #0
	add	r1, r1, #0xe
	add	r1, r2, r1
	add	r3, r3, #0x8
	add	r2, r2, r3
	bl	DestroyListMenuTask
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L434+0x8
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x5]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	mov	r0, #0x1
	eor	r0, r0, r1
	bl	DestroyItemMenuIcon
	bl	BagDestroyPocketScrollArrowPair
.L433:
	mov	r0, #0x12
	str	r0, [sp]
	mov	r0, #0xc
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x2d
	mov	r2, #0xb
	mov	r3, #0x1
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L434+0x4
	ldrb	r0, [r0, #0x6]
	add	r0, r0, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBagVisualPocketId
	ldr	r1, .L434+0xc
	mov	r0, r8
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r2, [r0]
	add	r0, r5, #0
	bl	SetTaskFuncWithFollowupFunc
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	gTasks+0x8
	.word	gBagMenuState
	.word	sBagMenuDisplay
	.word	Task_AnimateSwitchPockets
.Lfe51:
	.size	 SwitchPockets,.Lfe51-SwitchPockets
	.align	2, 0
	.type	 Task_AnimateSwitchPockets,function
	.thumb_func
Task_AnimateSwitchPockets:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L453
	add	r5, r0, r1
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L437	@cond_branch
	bl	BagIsTutorial
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L437	@cond_branch
	ldr	r4, .L453+0x4
	ldrb	r1, [r5, #0x16]
	ldrb	r0, [r4, #0x6]
	add	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	ProcessPocketSwitchInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L439	@cond_branch
	cmp	r0, #0x2
	beq	.L440	@cond_branch
	b	.L437
.L454:
	.align	2, 0
.L453:
	.word	gTasks+0x8
	.word	gBagMenuState
.L439:
	ldrh	r0, [r5, #0x16]
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r4, #0x6]
	add	r0, r6, #0
	bl	SwitchTaskToFollowupFunc
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r6, #0
	b	.L452
.L440:
	ldrh	r0, [r5, #0x16]
	ldrh	r2, [r4, #0x6]
	add	r0, r0, r2
	strh	r0, [r4, #0x6]
	add	r0, r6, #0
	bl	SwitchTaskToFollowupFunc
	add	r0, r6, #0
	mov	r1, #0x1
.L452:
	mov	r2, #0x1
	bl	SwitchPockets
	b	.L436
.L437:
	mov	r1, #0x1a
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L444	@cond_branch
	cmp	r0, #0x1
	beq	.L448	@cond_branch
	b	.L436
.L444:
	ldrh	r1, [r5, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r5, r2]
	ldr	r4, .L455
	cmp	r0, r4
	beq	.L451	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r5, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DrawItemListRow
	mov	r1, #0x18
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xc
	bne	.L445	@cond_branch
	strh	r4, [r5, #0x18]
.L445:
	mov	r2, #0x18
	ldrsh	r0, [r5, r2]
	cmp	r0, r4
	bne	.L436	@cond_branch
.L451:
	ldrh	r0, [r5, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1a]
	b	.L436
.L456:
	.align	2, 0
.L455:
	.word	0x7fff
.L448:
	ldr	r4, .L457
	ldrh	r0, [r5, #0x16]
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r4, #0x6]
	bl	PrintBagPocketName
	ldrb	r0, [r4, #0x6]
	bl	Bag_BuildListMenuTemplate
	ldr	r0, .L457+0x4
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r1, r4, #0
	add	r1, r1, #0xe
	add	r1, r2, r1
	ldrh	r1, [r1]
	add	r4, r4, #0x8
	add	r2, r2, r4
	ldrh	r2, [r2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	bl	CreatePocketScrollArrowPair
	bl	CreatePocketSwitchArrowPair
	add	r0, r6, #0
	bl	SwitchTaskToFollowupFunc
.L436:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L458:
	.align	2, 0
.L457:
	.word	gBagMenuState
	.word	gMultiuseListMenuTemplate
.Lfe52:
	.size	 Task_AnimateSwitchPockets,.Lfe52-Task_AnimateSwitchPockets
	.align	2, 0
	.type	 BeginMovingItemInPocket,function
	.thumb_func
BeginMovingItemInPocket:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x18
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r0, #0x2
	add	r5, r5, r0
	lsl	r5, r5, #0x3
	ldr	r0, .L460
	mov	r9, r0
	add	r1, r5, #0
	add	r1, r1, r9
	mov	r8, r1
	ldrb	r0, [r1]
	mov	r2, sp
	add	r2, r2, #0x16
	add	r1, sp, #0x14
	bl	ListMenuGetScrollAndRow
	mov	r2, r8
	ldrb	r0, [r2]
	mov	r1, #0x10
	mov	r2, #0x1
	bl	ListMenuSetTemplateField
	mov	r0, r8
	strh	r4, [r0, #0x2]
	ldr	r0, .L460+0x4
	ldr	r0, [r0]
	mov	r6, #0x0
	strb	r4, [r0, #0x4]
	ldr	r4, .L460+0x8
	ldr	r0, .L460+0xc
	ldrb	r0, [r0, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, r8
	ldrh	r1, [r2, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetName
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldr	r4, .L460+0x10
	ldr	r1, .L460+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r6, [sp, #0xc]
	str	r6, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x0
	bl	BagPrintTextOnWindow
	mov	r1, r8
	ldrb	r0, [r1]
	bl	ListMenuGetYCoordForPrintingArrowCursor
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	UpdateSwapLinePos
	mov	r0, #0x0
	bl	SetSwapLineInvisibility
	bl	BagDestroyPocketSwitchArrowPair
	mov	r2, r8
	ldrb	r0, [r2]
	mov	r1, #0x2
	bl	bag_menu_print_cursor_
	mov	r0, #0x8
	neg	r0, r0
	add	r9, r9, r0
	add	r5, r5, r9
	ldr	r0, .L460+0x18
	str	r0, [r5]
	add	sp, sp, #0x18
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L461:
	.align	2, 0
.L460:
	.word	gTasks+0x8
	.word	sBagMenuDisplay
	.word	gStringVar1
	.word	gBagMenuState
	.word	gStringVar4
	.word	gOtherText_WhereShouldTheStrVar1BePlaced
	.word	Task_MoveItemInPocket_HandleInput
.Lfe53:
	.size	 BeginMovingItemInPocket,.Lfe53-BeginMovingItemInPocket
	.align	2, 0
	.type	 Task_MoveItemInPocket_HandleInput,function
	.thumb_func
Task_MoveItemInPocket_HandleInput:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L470
	add	r4, r0, r1
	bl	IsActiveOverworldLinkBusy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L462	@cond_branch
	ldrb	r0, [r4]
	bl	ListMenu_ProcessInput
	add	r5, r0, #0
	ldrb	r0, [r4]
	ldr	r3, .L470+0x4
	ldrh	r2, [r3, #0x6]
	lsl	r2, r2, #0x1
	add	r1, r3, #0
	add	r1, r1, #0xe
	add	r1, r2, r1
	add	r3, r3, #0x8
	add	r2, r2, r3
	bl	ListMenuGetScrollAndRow
	ldrb	r0, [r4]
	bl	ListMenuGetYCoordForPrintingArrowCursor
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	UpdateSwapLinePos
	ldr	r0, .L470+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L464	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L470+0xc
	ldr	r1, [r0]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r0, [r4]
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r1, sp
	add	r2, r4, #0
	bl	ListMenuGetScrollAndRow
	mov	r0, sp
	ldrh	r1, [r0]
	ldrh	r0, [r4]
	add	r1, r1, r0
	add	r0, r6, #0
	bl	ExecuteMoveItemInPocket
	b	.L462
.L471:
	.align	2, 0
.L470:
	.word	gTasks+0x8
	.word	gBagMenuState
	.word	gMain
	.word	sBagMenuDisplay
.L464:
	mov	r0, #0x2
	neg	r0, r0
	cmp	r5, r0
	beq	.L467	@cond_branch
	add	r0, r0, #0x1
	cmp	r5, r0
	bne	.L468	@cond_branch
	b	.L462
.L467:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L472
	ldr	r1, [r0]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r0, [r4]
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r1, sp
	add	r2, r4, #0
	bl	ListMenuGetScrollAndRow
	mov	r0, sp
	ldrh	r1, [r0]
	ldrh	r0, [r4]
	add	r1, r1, r0
	add	r0, r6, #0
	bl	AbortMovingItemInPocket
	b	.L462
.L473:
	.align	2, 0
.L472:
	.word	sBagMenuDisplay
.L468:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L474
	ldr	r1, [r0]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	ExecuteMoveItemInPocket
.L462:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L475:
	.align	2, 0
.L474:
	.word	sBagMenuDisplay
.Lfe54:
	.size	 Task_MoveItemInPocket_HandleInput,.Lfe54-Task_MoveItemInPocket_HandleInput
	.align	2, 0
	.type	 ExecuteMoveItemInPocket,function
	.thumb_func
ExecuteMoveItemInPocket:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	mov	r9, r0
	ldr	r0, .L481
	mov	sl, r0
	mov	r6, r9
	add	r6, r6, sl
	mov	r3, #0x2
	ldrsh	r2, [r6, r3]
	cmp	r2, r5
	beq	.L478	@cond_branch
	sub	r0, r5, #0x1
	cmp	r2, r0
	bne	.L477	@cond_branch
.L478:
	add	r0, r1, #0
	add	r1, r5, #0
	bl	AbortMovingItemInPocket
	b	.L479
.L482:
	.align	2, 0
.L481:
	.word	gTasks+0x8
.L477:
	ldr	r1, .L483
	ldr	r4, .L483+0x4
	ldrh	r0, [r4, #0x6]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r1, r2, #0
	add	r2, r5, #0
	bl	MoveItemSlotInList
	ldrb	r0, [r6]
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	mov	r1, #0xe
	add	r1, r1, r4
	mov	r8, r1
	add	r1, r2, r1
	add	r7, r4, #0
	add	r7, r7, #0x8
	add	r2, r2, r7
	bl	DestroyListMenuTask
	mov	r3, #0x2
	ldrsh	r0, [r6, r3]
	cmp	r0, r5
	bcs	.L480	@cond_branch
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
.L480:
	ldrb	r0, [r4, #0x6]
	bl	Bag_BuildListMenuTemplate
	ldr	r0, .L483+0x8
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	mov	r3, r8
	add	r1, r2, r3
	ldrh	r1, [r1]
	add	r2, r2, r7
	ldrh	r2, [r2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6]
	mov	r0, #0x1
	bl	SetSwapLineInvisibility
	bl	CreatePocketSwitchArrowPair
	mov	r0, sl
	sub	r0, r0, #0x8
	add	r0, r0, r9
	ldr	r1, .L483+0xc
	str	r1, [r0]
.L479:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L484:
	.align	2, 0
.L483:
	.word	gBagPockets
	.word	gBagMenuState
	.word	gMultiuseListMenuTemplate
	.word	Task_BagMenu_HandleInput
.Lfe55:
	.size	 ExecuteMoveItemInPocket,.Lfe55-ExecuteMoveItemInPocket
	.align	2, 0
	.type	 AbortMovingItemInPocket,function
	.thumb_func
AbortMovingItemInPocket:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	mov	r8, r1
	ldr	r0, .L487
	mov	sl, r0
	mov	r6, r8
	add	r6, r6, sl
	ldrb	r0, [r6]
	ldr	r5, .L487+0x4
	ldrh	r2, [r5, #0x6]
	lsl	r2, r2, #0x1
	mov	r1, #0xe
	add	r1, r1, r5
	mov	r9, r1
	add	r1, r2, r1
	add	r7, r5, #0
	add	r7, r7, #0x8
	add	r2, r2, r7
	bl	DestroyListMenuTask
	mov	r3, #0x2
	ldrsh	r0, [r6, r3]
	cmp	r0, r4
	bcs	.L486	@cond_branch
	ldrh	r1, [r5, #0x6]
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
.L486:
	ldrb	r0, [r5, #0x6]
	bl	Bag_BuildListMenuTemplate
	ldr	r0, .L487+0x8
	ldrh	r2, [r5, #0x6]
	lsl	r2, r2, #0x1
	mov	r3, r9
	add	r1, r2, r3
	ldrh	r1, [r1]
	add	r2, r2, r7
	ldrh	r2, [r2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6]
	mov	r0, #0x1
	bl	SetSwapLineInvisibility
	bl	CreatePocketSwitchArrowPair
	mov	r0, sl
	sub	r0, r0, #0x8
	add	r0, r0, r8
	ldr	r1, .L487+0xc
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	gTasks+0x8
	.word	gBagMenuState
	.word	gMultiuseListMenuTemplate
	.word	Task_BagMenu_HandleInput
.Lfe56:
	.size	 AbortMovingItemInPocket,.Lfe56-AbortMovingItemInPocket
	.align	2, 0
	.type	 InitQuantityToTossOrDeposit,function
	.thumb_func
InitQuantityToTossOrDeposit:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x6
	mov	r1, #0x2
	bl	ShowBagWindow
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L490
	ldrb	r0, [r0, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L490+0x4
	mov	sl, r1
	bl	CopyItemName
	ldr	r0, .L490+0x8
	mov	r9, r0
	add	r1, r6, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x2
	str	r0, [sp]
	mov	r1, #0x1
	mov	r8, r1
	str	r1, [sp, #0x4]
	mov	r6, #0x0
	str	r6, [sp, #0x8]
	str	r6, [sp, #0xc]
	str	r1, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x2
	mov	r2, r9
	mov	r3, #0x0
	bl	BagPrintTextOnWindow
	mov	r0, #0x0
	mov	r1, #0x0
	bl	ShowBagWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, sl
	mov	r1, #0x1
	mov	r2, #0x2
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L490+0xc
	mov	r0, r9
	bl	StringExpandPlaceholders
	mov	r0, #0xa
	str	r0, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r6, [sp, #0xc]
	str	r0, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, r9
	mov	r3, #0x4
	bl	BagPrintTextOnWindow
	bl	CreateArrowPair_QuantitySelect
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L491:
	.align	2, 0
.L490:
	.word	gBagMenuState
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TimesStrVar1
.Lfe57:
	.size	 InitQuantityToTossOrDeposit,.Lfe57-InitQuantityToTossOrDeposit
	.align	2, 0
	.type	 UpdateQuantityToTossOrDeposit,function
	.thumb_func
UpdateQuantityToTossOrDeposit:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x0
	bl	GetBagWindow
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	add	r0, r6, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r0, .L493
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r1, r4, #0
	mov	r2, #0x2
	add	r3, r5, #0
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L493+0x4
	ldr	r1, .L493+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0xa
	str	r0, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	add	r0, r6, #0
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0x4
	bl	BagPrintTextOnWindow
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L494:
	.align	2, 0
.L493:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TimesStrVar1
.Lfe58:
	.size	 UpdateQuantityToTossOrDeposit,.Lfe58-UpdateQuantityToTossOrDeposit
	.align	2, 0
	.type	 DrawItemListRow,function
	.thumb_func
DrawItemListRow:
	push	{lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0xc
	sub	r2, r2, r0
	lsl	r1, r2, #0x3
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r2, .L496
	add	r1, r1, r2
	mov	r3, #0xd
	sub	r3, r3, r0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x12
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r2, #0xb
	bl	CopyToBgTilemapBufferRect
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	sItemListTilemap
.Lfe59:
	.size	 DrawItemListRow,.Lfe59-DrawItemListRow
	.align	2, 0
	.type	 OpenContextMenu,function
	.thumb_func
OpenContextMenu:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	ldr	r0, .L536
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x6
	beq	.L507	@cond_branch
	cmp	r0, #0x6
	bgt	.L532	@cond_branch
	cmp	r0, #0x5
	beq	.L501	@cond_branch
	b	.L508
.L537:
	.align	2, 0
.L536:
	.word	gBagMenuState
.L532:
	cmp	r0, #0x7
	beq	.L501	@cond_branch
	cmp	r0, #0x8
	beq	.L507	@cond_branch
	b	.L508
.L501:
	ldr	r2, .L538
	ldrh	r1, [r2]
	ldr	r0, .L538+0x4
	cmp	r1, r0
	bne	.L502	@cond_branch
	ldr	r1, .L538+0x8
	mov	r0, #0x8
	strb	r0, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r0, .L538+0xc
	str	r1, [r0]
	ldr	r1, .L538+0x10
	mov	r0, #0x2
	b	.L533
.L539:
	.align	2, 0
.L538:
	.word	gSpecialVar_ItemId
	.word	0x16d
	.word	sContextMenuItemsBuffer
	.word	sContextMenuItemsPtr
	.word	sContextMenuNumItems
.L502:
	ldrh	r0, [r2]
	bl	ItemId_GetBattleUsage
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L504	@cond_branch
	ldr	r1, .L540
	ldr	r0, .L540+0x4
	str	r0, [r1]
	ldr	r1, .L540+0x8
	mov	r0, #0x2
	b	.L533
.L541:
	.align	2, 0
.L540:
	.word	sContextMenuItemsPtr
	.word	sContextMenuItems_BattleUse
	.word	sContextMenuNumItems
.L504:
	ldr	r1, .L542
	ldr	r0, .L542+0x4
	str	r0, [r1]
	ldr	r1, .L542+0x8
	mov	r0, #0x1
	b	.L533
.L543:
	.align	2, 0
.L542:
	.word	sContextMenuItemsPtr
	.word	sContextMenuItems_Cancel
	.word	sContextMenuNumItems
.L507:
	ldr	r1, .L544
	ldr	r0, .L544+0x4
	str	r0, [r1]
	ldr	r1, .L544+0x8
	mov	r0, #0x2
	b	.L533
.L545:
	.align	2, 0
.L544:
	.word	sContextMenuItemsPtr
	.word	sContextMenuItems_BattleUse
	.word	sContextMenuNumItems
.L508:
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L510	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L509	@cond_branch
.L510:
	ldr	r1, .L546
	ldr	r2, .L546+0x4
	add	r0, r2, #0
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L511	@cond_branch
	ldr	r1, .L546+0x8
	ldr	r0, .L546+0xc
	str	r0, [r1]
	ldr	r1, .L546+0x10
	mov	r0, #0x2
	b	.L533
.L547:
	.align	2, 0
.L546:
	.word	gSpecialVar_ItemId
	.word	-0x16c
	.word	sContextMenuItemsPtr
	.word	sContextMenuItems_Open
	.word	sContextMenuNumItems
.L511:
	ldr	r0, .L548
	ldrh	r2, [r0, #0x6]
	add	r3, r0, #0
	cmp	r2, #0x1
	bne	.L513	@cond_branch
	ldr	r0, .L548+0x4
	strb	r2, [r0]
	add	r7, r0, #0
	b	.L514
.L549:
	.align	2, 0
.L548:
	.word	gBagMenuState
	.word	sContextMenuNumItems
.L513:
	ldr	r1, .L550
	mov	r0, #0x2
	strb	r0, [r1]
	add	r7, r1, #0
.L514:
	ldr	r0, .L550+0x4
	ldrh	r1, [r3, #0x6]
	lsl	r1, r1, #0x1
	ldr	r2, .L550+0x8
	add	r1, r1, r2
	str	r1, [r0]
	b	.L499
.L551:
	.align	2, 0
.L550:
	.word	sContextMenuNumItems
	.word	sContextMenuItemsPtr
	.word	sContextMenuItems_GiveIfNotKeyItemPocket
.L509:
	ldr	r5, .L552
	ldrh	r0, [r5, #0x6]
	cmp	r0, #0x1
	beq	.L520	@cond_branch
	cmp	r0, #0x1
	bgt	.L530	@cond_branch
	cmp	r0, #0
	beq	.L517	@cond_branch
	ldr	r7, .L552+0x4
	b	.L499
.L553:
	.align	2, 0
.L552:
	.word	gBagMenuState
	.word	sContextMenuNumItems
.L530:
	cmp	r0, #0x2
	beq	.L527	@cond_branch
	ldr	r7, .L554
	b	.L499
.L555:
	.align	2, 0
.L554:
	.word	sContextMenuNumItems
.L517:
	ldr	r4, .L556
	mov	r0, #0x4
	strb	r0, [r4]
	ldr	r0, .L556+0x4
	ldrh	r0, [r0]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L518	@cond_branch
	ldr	r1, .L556+0x8
	ldr	r0, .L556+0xc
	str	r0, [r1]
	add	r7, r4, #0
	b	.L499
.L557:
	.align	2, 0
.L556:
	.word	sContextMenuNumItems
	.word	gSpecialVar_ItemId
	.word	sContextMenuItemsPtr
	.word	sContextMenuItems_CheckGiveTossCancel
.L518:
	ldr	r0, .L558
	ldrh	r1, [r5, #0x6]
	lsl	r1, r1, #0x2
	ldr	r2, .L558+0x4
	add	r1, r1, r2
	str	r1, [r0]
	add	r7, r4, #0
	b	.L499
.L559:
	.align	2, 0
.L558:
	.word	sContextMenuItemsPtr
	.word	sContextMenuItems_Field
.L520:
	ldr	r0, .L560
	ldr	r2, .L560+0x4
	str	r2, [r0]
	ldr	r3, .L560+0x8
	mov	r0, #0x3
	strb	r0, [r3]
	mov	r0, #0x4
	strb	r0, [r2, #0x2]
	ldr	r0, .L560+0xc
	ldr	r0, [r0]
	ldr	r1, .L560+0x10
	add	r0, r0, r1
	ldr	r1, .L560+0x14
	ldrh	r0, [r0]
	add	r7, r3, #0
	ldrh	r3, [r1]
	cmp	r0, r3
	bne	.L521	@cond_branch
	mov	r0, #0xa
	b	.L534
.L561:
	.align	2, 0
.L560:
	.word	sContextMenuItemsPtr
	.word	sContextMenuItemsBuffer
	.word	sContextMenuNumItems
	.word	gSaveBlock1Ptr
	.word	0x296
	.word	gSpecialVar_ItemId
.L521:
	mov	r0, #0x2
.L534:
	strb	r0, [r2, #0x1]
	ldrh	r1, [r1]
	ldr	r3, .L562
	add	r0, r1, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L523	@cond_branch
	mov	r0, #0x7
	strb	r0, [r2]
	b	.L499
.L563:
	.align	2, 0
.L562:
	.word	-0x16c
.L523:
	lsl	r1, r1, #0x10
	mov	r0, #0xb4
	lsl	r0, r0, #0x11
	cmp	r1, r0
	bne	.L525	@cond_branch
	mov	r0, #0x6
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L525	@cond_branch
	ldr	r1, .L564
	mov	r0, #0x9
	b	.L535
.L565:
	.align	2, 0
.L564:
	.word	sContextMenuItemsBuffer
.L525:
	ldr	r1, .L566
	mov	r0, #0x0
.L535:
	strb	r0, [r1]
	ldr	r7, .L566+0x4
	b	.L499
.L567:
	.align	2, 0
.L566:
	.word	sContextMenuItemsBuffer
	.word	sContextMenuNumItems
.L527:
	ldr	r1, .L568
	ldr	r0, .L568+0x4
	add	r0, r0, #0x8
	str	r0, [r1]
	ldr	r1, .L568+0x8
	mov	r0, #0x3
.L533:
	strb	r0, [r1]
	add	r7, r1, #0
.L499:
	ldrb	r1, [r7]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0xa
	bl	ShowBagWindow
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, #0x2
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x2
	mov	r1, #0x2
	bl	GetFontAttribute
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp]
	str	r0, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	ldr	r0, .L568+0xc
	str	r0, [sp, #0xc]
	ldr	r0, .L568
	ldr	r0, [r0]
	str	r0, [sp, #0x10]
	add	r0, r6, #0
	mov	r1, #0x2
	add	r2, r5, #0
	mov	r3, #0x2
	bl	AddItemMenuActionTextPrinters
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	ldrb	r0, [r7]
	str	r0, [sp, #0x4]
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	add	r0, r6, #0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	Menu_InitCursor
	mov	r0, #0x6
	mov	r1, #0x0
	bl	ShowBagWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L568+0x10
	ldrh	r0, [r0]
	ldr	r1, .L568+0x14
	bl	CopyItemName
	ldr	r6, .L568+0x18
	ldr	r1, .L568+0x1c
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	str	r0, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0x2
	add	r2, r6, #0
	mov	r3, #0x0
	bl	BagPrintTextOnWindow
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L569:
	.align	2, 0
.L568:
	.word	sContextMenuItemsPtr
	.word	sContextMenuItems_Field
	.word	sContextMenuNumItems
	.word	sItemMenuContextActions
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1IsSelected
.Lfe60:
	.size	 OpenContextMenu,.Lfe60-OpenContextMenu
	.align	2, 0
	.type	 Task_ItemContext_FieldOrBattle,function
	.thumb_func
Task_ItemContext_FieldOrBattle:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	OpenContextMenu
	ldr	r1, .L571
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L571+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L572:
	.align	2, 0
.L571:
	.word	gTasks
	.word	Task_FieldItemContextMenuHandleInput
.Lfe61:
	.size	 Task_ItemContext_FieldOrBattle,.Lfe61-Task_ItemContext_FieldOrBattle
	.align	2, 0
	.type	 Task_FieldItemContextMenuHandleInput,function
	.thumb_func
Task_FieldItemContextMenuHandleInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	bl	IsActiveOverworldLinkBusy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L574	@cond_branch
	bl	Menu_ProcessInputNoWrapAround
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L574	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L578	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L580
	ldr	r1, [r0, #0x24]
	add	r0, r5, #0
	bl	_call_via_r1
	b	.L574
.L581:
	.align	2, 0
.L580:
	.word	sItemMenuContextActions
.L578:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L582
	ldr	r0, .L582+0x4
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r6, #0
	bl	_call_via_r1
.L574:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L583:
	.align	2, 0
.L582:
	.word	sItemMenuContextActions
	.word	sContextMenuItemsPtr
.Lfe62:
	.size	 Task_FieldItemContextMenuHandleInput,.Lfe62-Task_FieldItemContextMenuHandleInput
	.align	2, 0
	.type	 Task_ItemMenuAction_Use,function
	.thumb_func
Task_ItemMenuAction_Use:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L588
	ldrh	r0, [r5]
	bl	ItemId_GetFieldFunc
	cmp	r0, #0
	beq	.L585	@cond_branch
	mov	r0, #0xa
	bl	HideBagWindow
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L586	@cond_branch
	ldrh	r0, [r5]
	bl	ItemId_GetType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L586	@cond_branch
	add	r0, r4, #0
	bl	Task_PrintThereIsNoPokemon
	b	.L585
.L589:
	.align	2, 0
.L588:
	.word	gSpecialVar_ItemId
.L586:
	ldr	r0, .L590
	ldrh	r0, [r0]
	bl	ItemId_GetFieldFunc
	add	r1, r0, #0
	add	r0, r4, #0
	bl	_call_via_r1
.L585:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L591:
	.align	2, 0
.L590:
	.word	gSpecialVar_ItemId
.Lfe63:
	.size	 Task_ItemMenuAction_Use,.Lfe63-Task_ItemMenuAction_Use
	.align	2, 0
	.type	 Task_ItemMenuAction_Toss,function
	.thumb_func
Task_ItemMenuAction_Toss:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r6, r0, #0x3
	ldr	r7, .L595
	add	r4, r6, r7
	mov	r0, #0xa
	bl	GetBagWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ClearWindowTilemap
	mov	r0, #0x6
	bl	GetBagWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ClearWindowTilemap
	mov	r0, #0xa
	bl	HideBagWindow
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L593	@cond_branch
	add	r0, r5, #0
	bl	Task_ConfirmTossItems
	b	.L594
.L596:
	.align	2, 0
.L595:
	.word	gTasks+0x8
.L593:
	ldrh	r0, [r4, #0x2]
	ldr	r1, .L597
	bl	InitQuantityToTossOrDeposit
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L597+0x4
	str	r1, [r0]
.L594:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L598:
	.align	2, 0
.L597:
	.word	gText_TossOutHowManyStrVar1s
	.word	Task_SelectQuantityToToss
.Lfe64:
	.size	 Task_ItemMenuAction_Toss,.Lfe64-Task_ItemMenuAction_Toss
	.align	2, 0
	.type	 Task_ConfirmTossItems,function
	.thumb_func
Task_ConfirmTossItems:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	ldr	r0, .L600
	add	r1, r1, r0
	ldr	r0, .L600+0x4
	mov	r2, #0x10
	ldrsh	r1, [r1, r2]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r5, .L600+0x8
	ldr	r1, .L600+0xc
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x6
	mov	r1, #0x1
	bl	ShowBagWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	str	r1, [sp]
	mov	r2, #0x1
	str	r2, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	str	r1, [sp, #0xc]
	str	r2, [sp, #0x10]
	mov	r1, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	BagPrintTextOnWindow
	ldr	r1, .L600+0x10
	add	r0, r4, #0
	bl	BagCreateYesNoMenuBottomRight
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L601:
	.align	2, 0
.L600:
	.word	gTasks+0x8
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_ThrowAwayStrVar2OfThisItemQM
	.word	sYesNoMenu_Toss
.Lfe65:
	.size	 Task_ConfirmTossItems,.Lfe65-Task_ConfirmTossItems
	.align	2, 0
	.type	 Task_TossItem_No,function
	.thumb_func
Task_TossItem_No:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L603
	add	r4, r4, r0
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	bag_menu_print_cursor_
	add	r0, r5, #0
	bl	Task_RedrawArrowsAndReturnToBagMenuSelect
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L604:
	.align	2, 0
.L603:
	.word	gTasks+0x8
.Lfe66:
	.size	 Task_TossItem_No,.Lfe66-Task_TossItem_No
	.align	2, 0
	.type	 Task_SelectQuantityToToss,function
	.thumb_func
Task_SelectQuantityToToss:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L611
	add	r4, r0, r1
	add	r0, r4, #0
	add	r0, r0, #0x10
	ldrh	r1, [r4, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L606	@cond_branch
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	bl	UpdateQuantityToTossOrDeposit
	b	.L607
.L612:
	.align	2, 0
.L611:
	.word	gTasks+0x8
.L606:
	ldr	r0, .L613
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L608	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x6
	bl	GetBagWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ClearWindowTilemap
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	HideBagWindow
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	bl	BagDestroyPocketScrollArrowPair
	add	r0, r5, #0
	bl	Task_ConfirmTossItems
	b	.L607
.L614:
	.align	2, 0
.L613:
	.word	gMain
.L608:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L607	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	bag_menu_print_cursor_
	bl	BagDestroyPocketScrollArrowPair
	add	r0, r6, #0
	bl	Task_RedrawArrowsAndReturnToBagMenuSelect
.L607:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 Task_SelectQuantityToToss,.Lfe67-Task_SelectQuantityToToss
	.align	2, 0
	.type	 Task_TossItem_Yes,function
	.thumb_func
Task_TossItem_Yes:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r5, .L616
	add	r6, r4, r5
	mov	r0, #0x6
	bl	HideBagWindow
	ldr	r0, .L616+0x4
	ldrb	r0, [r0, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L616+0x8
	bl	CopyItemName
	ldr	r0, .L616+0xc
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r6, .L616+0x10
	ldr	r1, .L616+0x14
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x6
	mov	r1, #0x3
	bl	ShowBagWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	str	r1, [sp]
	mov	r2, #0x1
	str	r2, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	str	r1, [sp, #0xc]
	str	r2, [sp, #0x10]
	mov	r1, #0x2
	add	r2, r6, #0
	mov	r3, #0x0
	bl	BagPrintTextOnWindow
	sub	r5, r5, #0x8
	add	r4, r4, r5
	ldr	r0, .L616+0x18
	str	r0, [r4]
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L617:
	.align	2, 0
.L616:
	.word	gTasks+0x8
	.word	gBagMenuState
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_ThrewAwayStrVar2StrVar1s
	.word	Task_WaitAB_RedrawAndReturnToBag
.Lfe68:
	.size	 Task_TossItem_Yes,.Lfe68-Task_TossItem_Yes
	.align	2, 0
	.type	 Task_WaitAB_RedrawAndReturnToBag,function
	.thumb_func
Task_WaitAB_RedrawAndReturnToBag:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L621
	add	r7, r0, r1
	ldr	r0, .L621+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L620	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L619	@cond_branch
.L620:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L621+0x8
	ldrh	r0, [r0]
	ldrh	r1, [r7, #0x10]
	bl	RemoveBagItem
	mov	r0, #0x6
	bl	HideBagWindow
	ldrb	r0, [r7]
	ldr	r4, .L621+0xc
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r5, r4, #0
	add	r5, r5, #0xe
	add	r1, r2, r5
	add	r6, r4, #0
	add	r6, r6, #0x8
	add	r2, r2, r6
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x6]
	bl	Pocket_CalculateNItemsAndMaxShowed
	ldrb	r0, [r4, #0x6]
	bl	PocketCalculateInitialCursorPosAndItemsAbove
	ldrb	r0, [r4, #0x6]
	bl	Bag_BuildListMenuTemplate
	ldr	r0, .L621+0x10
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r5, r2, r5
	ldrh	r1, [r5]
	add	r2, r2, r6
	ldrh	r2, [r2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7]
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldrb	r0, [r7]
	mov	r1, #0x1
	bl	bag_menu_print_cursor_
	mov	r0, r8
	bl	Task_RedrawArrowsAndReturnToBagMenuSelect
.L619:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L622:
	.align	2, 0
.L621:
	.word	gTasks+0x8
	.word	gMain
	.word	gSpecialVar_ItemId
	.word	gBagMenuState
	.word	gMultiuseListMenuTemplate
.Lfe69:
	.size	 Task_WaitAB_RedrawAndReturnToBag,.Lfe69-Task_WaitAB_RedrawAndReturnToBag
	.align	2, 0
	.type	 Task_ItemMenuAction_ToggleSelect,function
	.thumb_func
Task_ItemMenuAction_ToggleSelect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L626
	add	r7, r0, r1
	ldr	r0, .L626+0x4
	ldrb	r0, [r0, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r7, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L626+0x8
	ldr	r0, [r0]
	ldr	r3, .L626+0xc
	add	r1, r0, r3
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L624	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L625
.L627:
	.align	2, 0
.L626:
	.word	gTasks+0x8
	.word	gBagMenuState
	.word	gSaveBlock1Ptr
	.word	0x296
.L624:
	strh	r2, [r1]
.L625:
	ldrb	r0, [r7]
	ldr	r4, .L628
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r5, r4, #0
	add	r5, r5, #0xe
	add	r1, r2, r5
	add	r6, r4, #0
	add	r6, r6, #0x8
	add	r2, r2, r6
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x6]
	bl	Bag_BuildListMenuTemplate
	ldr	r0, .L628+0x4
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r5, r2, r5
	ldrh	r1, [r5]
	add	r2, r2, r6
	ldrh	r2, [r2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	CopyWindowToVram
	mov	r0, r8
	bl	Task_ItemMenuAction_Cancel
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L629:
	.align	2, 0
.L628:
	.word	gBagMenuState
	.word	gMultiuseListMenuTemplate
.Lfe70:
	.size	 Task_ItemMenuAction_ToggleSelect,.Lfe70-Task_ItemMenuAction_ToggleSelect
	.align	2, 0
	.type	 Task_ItemMenuAction_Give,function
	.thumb_func
Task_ItemMenuAction_Give:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r7, r4, #0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r6, r0, #0x3
	ldr	r0, .L637
	mov	r8, r0
	add	r1, r6, r0
	ldr	r0, .L637+0x4
	ldrb	r0, [r0, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r1, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0xa
	bl	HideBagWindow
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x1
	bl	CopyWindowToVram
	add	r0, r5, #0
	bl	IsWritingMailAllowed
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L631	@cond_branch
	ldr	r2, .L637+0x8
	ldr	r3, .L637+0xc
	add	r0, r4, #0
	mov	r1, #0x2
	bl	DisplayItemMessageInBag
	b	.L632
.L638:
	.align	2, 0
.L637:
	.word	gTasks+0x8
	.word	gBagMenuState
	.word	gText_CantWriteMailHere
	.word	Task_WaitAButtonAndCloseContextMenu
.L631:
	add	r0, r5, #0
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L633	@cond_branch
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L634	@cond_branch
	add	r0, r4, #0
	bl	Task_PrintThereIsNoPokemon
	b	.L632
.L634:
	ldr	r0, .L639
	ldr	r1, [r0]
	ldr	r0, .L639+0x4
	str	r0, [r1]
	mov	r0, r8
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L639+0x8
	str	r1, [r0]
	b	.L632
.L640:
	.align	2, 0
.L639:
	.word	sBagMenuDisplay
	.word	CB2_ChooseMonToGiveItem
	.word	ItemMenu_StartFadeToExitCallback
.L633:
	add	r0, r7, #0
	bl	Task_PrintItemCantBeHeld
.L632:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 Task_ItemMenuAction_Give,.Lfe71-Task_ItemMenuAction_Give
	.align	2, 0
	.type	 Task_PrintThereIsNoPokemon,function
	.thumb_func
Task_PrintThereIsNoPokemon:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L642
	ldr	r3, .L642+0x4
	mov	r1, #0x2
	bl	DisplayItemMessageInBag
	pop	{r0}
	bx	r0
.L643:
	.align	2, 0
.L642:
	.word	gText_ThereIsNoPokemon
	.word	Task_WaitAButtonAndCloseContextMenu
.Lfe72:
	.size	 Task_PrintThereIsNoPokemon,.Lfe72-Task_PrintThereIsNoPokemon
	.align	2, 0
	.type	 Task_PrintItemCantBeHeld,function
	.thumb_func
Task_PrintItemCantBeHeld:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L645
	ldrh	r0, [r0]
	ldr	r1, .L645+0x4
	bl	CopyItemName
	ldr	r5, .L645+0x8
	ldr	r1, .L645+0xc
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L645+0x10
	add	r0, r4, #0
	mov	r1, #0x2
	add	r2, r5, #0
	bl	DisplayItemMessageInBag
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L646:
	.align	2, 0
.L645:
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_ItemCantBeHeld
	.word	Task_WaitAButtonAndCloseContextMenu
.Lfe73:
	.size	 Task_PrintItemCantBeHeld,.Lfe73-Task_PrintItemCantBeHeld
	.align	2, 0
	.type	 Task_WaitAButtonAndCloseContextMenu,function
	.thumb_func
Task_WaitAButtonAndCloseContextMenu:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L649
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L648	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	Task_ReturnToBagFromContextMenu
.L648:
	pop	{r4}
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	gMain
.Lfe74:
	.size	 Task_WaitAButtonAndCloseContextMenu,.Lfe74-Task_WaitAButtonAndCloseContextMenu
	.align	2, 0
	.globl	Task_ReturnToBagFromContextMenu
	.type	 Task_ReturnToBagFromContextMenu,function
	.thumb_func
Task_ReturnToBagFromContextMenu:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r5, r0, #0x2
	add	r5, r5, r8
	lsl	r5, r5, #0x3
	ldr	r0, .L652
	add	r5, r5, r0
	mov	r0, #0x5
	bl	CloseBagWindow
	ldrb	r0, [r5]
	ldr	r4, .L652+0x4
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r6, r4, #0
	add	r6, r6, #0xe
	add	r1, r2, r6
	mov	r3, #0x8
	add	r3, r3, r4
	mov	r9, r3
	add	r2, r2, r9
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x6]
	bl	Pocket_CalculateNItemsAndMaxShowed
	ldrb	r0, [r4, #0x6]
	bl	PocketCalculateInitialCursorPosAndItemsAbove
	ldrb	r0, [r4, #0x6]
	bl	Bag_BuildListMenuTemplate
	ldr	r0, .L652+0x8
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r6, r2, r6
	ldrh	r1, [r6]
	add	r2, r2, r9
	ldrh	r2, [r2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	bag_menu_print_cursor_
	mov	r0, r8
	bl	Task_RedrawArrowsAndReturnToBagMenuSelect
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L653:
	.align	2, 0
.L652:
	.word	gTasks+0x8
	.word	gBagMenuState
	.word	gMultiuseListMenuTemplate
.Lfe75:
	.size	 Task_ReturnToBagFromContextMenu,.Lfe75-Task_ReturnToBagFromContextMenu
	.align	2, 0
	.type	 Task_UnusedReturnToBag,function
	.thumb_func
Task_UnusedReturnToBag:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L655
	add	r4, r4, r0
	ldrb	r0, [r4]
	mov	r6, sp
	add	r6, r6, #0x2
	mov	r1, sp
	add	r2, r6, #0
	bl	ListMenuGetScrollAndRow
	mov	r0, sp
	ldrh	r0, [r0]
	ldrh	r1, [r6]
	add	r0, r0, r1
	bl	PrintItemDescriptionOnMessageWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	bag_menu_print_cursor_
	add	r0, r5, #0
	bl	Task_RedrawArrowsAndReturnToBagMenuSelect
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L656:
	.align	2, 0
.L655:
	.word	gTasks+0x8
.Lfe76:
	.size	 Task_UnusedReturnToBag,.Lfe76-Task_UnusedReturnToBag
	.align	2, 0
	.type	 Task_ItemMenuAction_Cancel,function
	.thumb_func
Task_ItemMenuAction_Cancel:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0xa
	bl	HideBagWindow
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L658
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x1
	bl	bag_menu_print_cursor_
	add	r0, r4, #0
	bl	Task_RedrawArrowsAndReturnToBagMenuSelect
	pop	{r4}
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	gTasks
.Lfe77:
	.size	 Task_ItemMenuAction_Cancel,.Lfe77-Task_ItemMenuAction_Cancel
	.align	2, 0
	.type	 Task_ItemMenuAction_BattleUse,function
	.thumb_func
Task_ItemMenuAction_BattleUse:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L662
	ldrh	r0, [r5]
	bl	ItemId_GetBattleFunc
	cmp	r0, #0
	beq	.L661	@cond_branch
	mov	r0, #0xa
	bl	HideBagWindow
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x1
	bl	CopyWindowToVram
	ldrh	r0, [r5]
	bl	ItemId_GetBattleFunc
	add	r1, r0, #0
	add	r0, r4, #0
	bl	_call_via_r1
.L661:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L663:
	.align	2, 0
.L662:
	.word	gSpecialVar_ItemId
.Lfe78:
	.size	 Task_ItemMenuAction_BattleUse,.Lfe78-Task_ItemMenuAction_BattleUse
	.align	2, 0
	.type	 Task_ItemContext_FieldGive,function
	.thumb_func
Task_ItemContext_FieldGive:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r7, r0, #0x3
	ldr	r0, .L674
	mov	r9, r0
	add	r1, r7, r0
	ldr	r2, .L674+0x4
	mov	r8, r2
	ldrb	r0, [r2, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r1, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r6, r4, #0
	add	r0, r4, #0
	bl	IsWritingMailAllowed
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L665	@cond_branch
	ldr	r2, .L674+0x8
	ldr	r3, .L674+0xc
	add	r0, r5, #0
	mov	r1, #0x2
	bl	DisplayItemMessageInBag
	b	.L666
.L675:
	.align	2, 0
.L674:
	.word	gTasks+0x8
	.word	gBagMenuState
	.word	gText_CantWriteMailHere
	.word	Task_WaitAButtonAndCloseContextMenu
.L665:
	mov	r0, #0xb6
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bne	.L667	@cond_branch
	ldr	r0, .L676
	b	.L673
.L677:
	.align	2, 0
.L676:
	.word	GoToTMCase_Give
.L667:
	ldr	r0, .L678
	cmp	r4, r0
	bne	.L669	@cond_branch
	ldr	r0, .L678+0x4
.L673:
	bl	ItemMenu_SetExitCallback
	add	r0, r5, #0
	bl	ItemMenu_StartFadeToExitCallback
	b	.L666
.L679:
	.align	2, 0
.L678:
	.word	0x16d
	.word	GoToBerryPouch_Give
.L669:
	mov	r1, r8
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0x1
	beq	.L671	@cond_branch
	add	r0, r6, #0
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L671	@cond_branch
	bl	Bag_BeginCloseWin0Animation
	mov	r0, r9
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L680
	str	r1, [r0]
	b	.L666
.L681:
	.align	2, 0
.L680:
	.word	ItemMenu_StartFadeToExitCallback
.L671:
	add	r0, r5, #0
	bl	Task_PrintItemCantBeHeld
.L666:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 Task_ItemContext_FieldGive,.Lfe79-Task_ItemContext_FieldGive
	.align	2, 0
	.type	 GoToTMCase_Give,function
	.thumb_func
GoToTMCase_Give:
	push	{lr}
	ldr	r1, .L683
	mov	r0, #0x1
	mov	r2, #0x0
	bl	InitTMCase
	pop	{r0}
	bx	r0
.L684:
	.align	2, 0
.L683:
	.word	ReturnToBagMenuFromSubmenu_Give
.Lfe80:
	.size	 GoToTMCase_Give,.Lfe80-GoToTMCase_Give
	.align	2, 0
	.type	 GoToBerryPouch_Give,function
	.thumb_func
GoToBerryPouch_Give:
	push	{lr}
	ldr	r1, .L686
	mov	r0, #0x1
	mov	r2, #0x0
	bl	InitBerryPouch
	pop	{r0}
	bx	r0
.L687:
	.align	2, 0
.L686:
	.word	ReturnToBagMenuFromSubmenu_Give
.Lfe81:
	.size	 GoToBerryPouch_Give,.Lfe81-GoToBerryPouch_Give
	.align	2, 0
	.type	 ReturnToBagMenuFromSubmenu_Give,function
	.thumb_func
ReturnToBagMenuFromSubmenu_Give:
	push	{lr}
	bl	CB2_SelectBagItemToGive
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 ReturnToBagMenuFromSubmenu_Give,.Lfe82-ReturnToBagMenuFromSubmenu_Give
	.align	2, 0
	.type	 Task_ItemContext_PcBoxGive,function
	.thumb_func
Task_ItemContext_PcBoxGive:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r7, r0, #0x3
	ldr	r0, .L699
	mov	r9, r0
	add	r1, r7, r0
	ldr	r2, .L699+0x4
	mov	r8, r2
	ldrb	r0, [r2, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r1, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r6, r4, #0
	add	r0, r4, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L690	@cond_branch
	ldr	r2, .L699+0x8
	ldr	r3, .L699+0xc
	add	r0, r5, #0
	mov	r1, #0x2
	bl	DisplayItemMessageInBag
	b	.L691
.L700:
	.align	2, 0
.L699:
	.word	gTasks+0x8
	.word	gBagMenuState
	.word	gText_CantWriteMailHere
	.word	Task_WaitAButtonAndCloseContextMenu
.L690:
	mov	r0, #0xb6
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bne	.L692	@cond_branch
	ldr	r0, .L701
	b	.L698
.L702:
	.align	2, 0
.L701:
	.word	GoToTMCase_PCBox
.L692:
	ldr	r0, .L703
	cmp	r4, r0
	bne	.L694	@cond_branch
	ldr	r0, .L703+0x4
.L698:
	bl	ItemMenu_SetExitCallback
	add	r0, r5, #0
	bl	ItemMenu_StartFadeToExitCallback
	b	.L691
.L704:
	.align	2, 0
.L703:
	.word	0x16d
	.word	GoToBerryPouch_PCBox
.L694:
	mov	r1, r8
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0x1
	beq	.L696	@cond_branch
	add	r0, r6, #0
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L696	@cond_branch
	bl	Bag_BeginCloseWin0Animation
	mov	r0, r9
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L705
	str	r1, [r0]
	b	.L691
.L706:
	.align	2, 0
.L705:
	.word	ItemMenu_StartFadeToExitCallback
.L696:
	add	r0, r5, #0
	bl	Task_PrintItemCantBeHeld
.L691:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 Task_ItemContext_PcBoxGive,.Lfe83-Task_ItemContext_PcBoxGive
	.align	2, 0
	.type	 GoToTMCase_PCBox,function
	.thumb_func
GoToTMCase_PCBox:
	push	{lr}
	ldr	r1, .L708
	mov	r0, #0x3
	mov	r2, #0x0
	bl	InitTMCase
	pop	{r0}
	bx	r0
.L709:
	.align	2, 0
.L708:
	.word	ReturnToBagMenuFromSubmenu_PCBox
.Lfe84:
	.size	 GoToTMCase_PCBox,.Lfe84-GoToTMCase_PCBox
	.align	2, 0
	.type	 GoToBerryPouch_PCBox,function
	.thumb_func
GoToBerryPouch_PCBox:
	push	{lr}
	ldr	r1, .L711
	mov	r0, #0x3
	mov	r2, #0x0
	bl	InitBerryPouch
	pop	{r0}
	bx	r0
.L712:
	.align	2, 0
.L711:
	.word	ReturnToBagMenuFromSubmenu_PCBox
.Lfe85:
	.size	 GoToBerryPouch_PCBox,.Lfe85-GoToBerryPouch_PCBox
	.align	2, 0
	.type	 ReturnToBagMenuFromSubmenu_PCBox,function
	.thumb_func
ReturnToBagMenuFromSubmenu_PCBox:
	push	{lr}
	ldr	r2, .L714
	mov	r0, #0x4
	mov	r1, #0x3
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L715:
	.align	2, 0
.L714:
	.word	CB2_ReturnToPokeStorage
.Lfe86:
	.size	 ReturnToBagMenuFromSubmenu_PCBox,.Lfe86-ReturnToBagMenuFromSubmenu_PCBox
	.align	2, 0
	.type	 Task_ItemContext_Sell,function
	.thumb_func
Task_ItemContext_Sell:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L727
	add	r4, r0, r1
	ldr	r6, .L727+0x4
	ldrh	r1, [r6]
	mov	r0, #0xb6
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L717	@cond_branch
	ldr	r0, .L727+0x8
	b	.L726
.L728:
	.align	2, 0
.L727:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	GoToTMCase_Sell
.L717:
	ldr	r0, .L729
	cmp	r1, r0
	bne	.L719	@cond_branch
	ldr	r0, .L729+0x4
.L726:
	bl	ItemMenu_SetExitCallback
	add	r0, r5, #0
	bl	ItemMenu_StartFadeToExitCallback
	b	.L718
.L730:
	.align	2, 0
.L729:
	.word	0x16d
	.word	GoToBerryPouch_Sell
.L719:
	ldrh	r0, [r6]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L721	@cond_branch
	ldrh	r0, [r6]
	ldr	r1, .L731
	bl	CopyItemName
	ldr	r4, .L731+0x4
	ldr	r1, .L731+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	bl	GetDialogBoxFontId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L731+0xc
	add	r0, r5, #0
	add	r2, r4, #0
	bl	DisplayItemMessageInBag
	b	.L718
.L732:
	.align	2, 0
.L731:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_OhNoICantBuyThat
	.word	Task_ReturnToBagFromContextMenu
.L721:
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L723	@cond_branch
	bl	BagPrintMoneyAmount
	add	r0, r5, #0
	bl	Task_PrintSaleConfirmationText
	b	.L718
.L723:
	cmp	r0, #0x63
	ble	.L725	@cond_branch
	mov	r0, #0x63
	strh	r0, [r4, #0x4]
.L725:
	ldrh	r0, [r6]
	ldr	r1, .L733
	bl	CopyItemName
	ldr	r4, .L733+0x4
	ldr	r1, .L733+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	bl	GetDialogBoxFontId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L733+0xc
	add	r0, r7, #0
	add	r2, r4, #0
	bl	DisplayItemMessageInBag
.L718:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L734:
	.align	2, 0
.L733:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_HowManyWouldYouLikeToSell
	.word	Task_InitSaleQuantitySelectInterface
.Lfe87:
	.size	 Task_ItemContext_Sell,.Lfe87-Task_ItemContext_Sell
	.align	2, 0
	.type	 GoToTMCase_Sell,function
	.thumb_func
GoToTMCase_Sell:
	push	{lr}
	ldr	r1, .L736
	mov	r0, #0x2
	mov	r2, #0x0
	bl	InitTMCase
	pop	{r0}
	bx	r0
.L737:
	.align	2, 0
.L736:
	.word	ReturnToBagMenuFromSubmenu_Sell
.Lfe88:
	.size	 GoToTMCase_Sell,.Lfe88-GoToTMCase_Sell
	.align	2, 0
	.type	 GoToBerryPouch_Sell,function
	.thumb_func
GoToBerryPouch_Sell:
	push	{lr}
	ldr	r1, .L739
	mov	r0, #0x2
	mov	r2, #0x0
	bl	InitBerryPouch
	pop	{r0}
	bx	r0
.L740:
	.align	2, 0
.L739:
	.word	ReturnToBagMenuFromSubmenu_Sell
.Lfe89:
	.size	 GoToBerryPouch_Sell,.Lfe89-GoToBerryPouch_Sell
	.align	2, 0
	.type	 ReturnToBagMenuFromSubmenu_Sell,function
	.thumb_func
ReturnToBagMenuFromSubmenu_Sell:
	push	{lr}
	ldr	r2, .L742
	mov	r0, #0x2
	mov	r1, #0x3
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L743:
	.align	2, 0
.L742:
	.word	CB2_ReturnToField
.Lfe90:
	.size	 ReturnToBagMenuFromSubmenu_Sell,.Lfe90-ReturnToBagMenuFromSubmenu_Sell
	.align	2, 0
	.type	 Task_PrintSaleConfirmationText,function
	.thumb_func
Task_PrintSaleConfirmationText:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L745
	add	r4, r4, r0
	ldr	r6, .L745+0x4
	ldr	r0, .L745+0x8
	ldrb	r0, [r0, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mul	r1, r1, r0
	add	r0, r6, #0
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L745+0xc
	ldr	r1, .L745+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	bl	GetDialogBoxFontId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L745+0x14
	add	r0, r5, #0
	add	r2, r4, #0
	bl	DisplayItemMessageInBag
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L746:
	.align	2, 0
.L745:
	.word	gTasks+0x8
	.word	gStringVar3
	.word	gBagMenuState
	.word	gStringVar4
	.word	gText_ICanPayThisMuch_WouldThatBeOkay
	.word	Task_ShowSellYesNoMenu
.Lfe91:
	.size	 Task_PrintSaleConfirmationText,.Lfe91-Task_PrintSaleConfirmationText
	.align	2, 0
	.type	 Task_ShowSellYesNoMenu,function
	.thumb_func
Task_ShowSellYesNoMenu:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L748
	bl	BagCreateYesNoMenuTopRight
	pop	{r0}
	bx	r0
.L749:
	.align	2, 0
.L748:
	.word	sYesNoMenu_Sell
.Lfe92:
	.size	 Task_ShowSellYesNoMenu,.Lfe92-Task_ShowSellYesNoMenu
	.align	2, 0
	.type	 Task_SellItem_No,function
	.thumb_func
Task_SellItem_No:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L751
	add	r4, r4, r0
	mov	r0, #0x2
	bl	HideBagWindow
	mov	r0, #0x5
	bl	CloseBagWindow
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	bag_menu_print_cursor_
	add	r0, r5, #0
	bl	Task_RedrawArrowsAndReturnToBagMenuSelect
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L752:
	.align	2, 0
.L751:
	.word	gTasks+0x8
.Lfe93:
	.size	 Task_SellItem_No,.Lfe93-Task_SellItem_No
	.align	2, 0
	.type	 Task_InitSaleQuantitySelectInterface,function
	.thumb_func
Task_InitSaleQuantitySelectInterface:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r5, r0, #0x2
	add	r5, r5, r0
	lsl	r5, r5, #0x3
	ldr	r0, .L754
	mov	r8, r0
	add	r2, r5, #0
	add	r2, r2, r8
	mov	r9, r2
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ShowBagWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L754+0x4
	mov	r1, #0x1
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r6, .L754+0x8
	ldr	r1, .L754+0xc
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	mov	r0, #0xa
	str	r0, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r6, #0
	mov	r3, #0x4
	bl	BagPrintTextOnWindow
	ldr	r0, .L754+0x10
	ldrb	r0, [r0, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, r9
	ldrh	r1, [r3, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, r9
	mov	r3, #0x10
	ldrsh	r1, [r2, r3]
	mul	r0, r0, r1
	bl	UpdateSalePriceDisplay
	bl	BagPrintMoneyAmount
	bl	CreatePocketScrollArrowPair_SellQuantity
	mov	r0, #0x8
	neg	r0, r0
	add	r8, r8, r0
	add	r5, r5, r8
	ldr	r0, .L754+0x14
	str	r0, [r5]
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L755:
	.align	2, 0
.L754:
	.word	gTasks+0x8
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TimesStrVar1
	.word	gBagMenuState
	.word	Task_SelectQuantityToSell
.Lfe94:
	.size	 Task_InitSaleQuantitySelectInterface,.Lfe94-Task_InitSaleQuantitySelectInterface
	.align	2, 0
	.type	 UpdateSalePriceDisplay,function
	.thumb_func
UpdateSalePriceDisplay:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r0, #0x0
	bl	GetBagWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x38
	mov	r2, #0xa
	add	r3, r4, #0
	bl	PrintMoneyAmount
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 UpdateSalePriceDisplay,.Lfe95-UpdateSalePriceDisplay
	.align	2, 0
	.type	 Task_SelectQuantityToSell,function
	.thumb_func
Task_SelectQuantityToSell:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L763
	add	r5, r0, r1
	add	r0, r5, #0
	add	r0, r0, #0x10
	ldrh	r1, [r5, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L758	@cond_branch
	mov	r1, #0x10
	ldrsh	r0, [r5, r1]
	mov	r1, #0x2
	bl	UpdateQuantityToTossOrDeposit
	ldr	r0, .L763+0x4
	ldrb	r0, [r0, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r5, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r5, r2]
	mul	r0, r0, r1
	bl	UpdateSalePriceDisplay
	b	.L759
.L764:
	.align	2, 0
.L763:
	.word	gTasks+0x8
	.word	gBagMenuState
.L758:
	ldr	r0, .L765
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L760	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	bl	BagDestroyPocketScrollArrowPair
	add	r0, r4, #0
	bl	Task_PrintSaleConfirmationText
	b	.L759
.L766:
	.align	2, 0
.L765:
	.word	gMain
.L760:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L759	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	HideBagWindow
	mov	r0, #0x2
	bl	HideBagWindow
	mov	r0, #0x5
	bl	CloseBagWindow
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	bl	BagDestroyPocketScrollArrowPair
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	bag_menu_print_cursor_
	add	r0, r6, #0
	bl	Task_RedrawArrowsAndReturnToBagMenuSelect
.L759:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 Task_SelectQuantityToSell,.Lfe96-Task_SelectQuantityToSell
	.align	2, 0
	.type	 Task_SellItem_Yes,function
	.thumb_func
Task_SellItem_Yes:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L768
	add	r4, r4, r0
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L768+0x4
	ldrh	r0, [r0]
	ldr	r1, .L768+0x8
	bl	CopyItemName
	ldr	r6, .L768+0xc
	ldr	r0, .L768+0x10
	ldrb	r0, [r0, #0x6]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mul	r1, r1, r0
	add	r0, r6, #0
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L768+0x14
	ldr	r1, .L768+0x18
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L768+0x1c
	add	r0, r5, #0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	DisplayItemMessageInBag
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L769:
	.align	2, 0
.L768:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar3
	.word	gBagMenuState
	.word	gStringVar4
	.word	gText_TurnedOverItemsWorthYen
	.word	Task_FinalizeSaleToShop
.Lfe97:
	.size	 Task_SellItem_Yes,.Lfe97-Task_SellItem_Yes
	.align	2, 0
	.type	 Task_FinalizeSaleToShop,function
	.thumb_func
Task_FinalizeSaleToShop:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r6, r0, #0x2
	add	r6, r6, r0
	lsl	r6, r6, #0x3
	ldr	r0, .L771
	mov	sl, r0
	add	r1, r6, #0
	add	r1, r1, sl
	mov	r8, r1
	mov	r0, #0xf8
	bl	PlaySE
	ldr	r5, .L771+0x4
	ldrh	r0, [r5]
	mov	r2, r8
	ldrh	r1, [r2, #0x10]
	bl	RemoveBagItem
	ldr	r3, .L771+0x8
	ldr	r4, [r3]
	mov	r7, #0xa4
	lsl	r7, r7, #0x2
	add	r4, r4, r7
	ldrh	r0, [r5]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, r8
	mov	r3, #0x10
	ldrsh	r1, [r2, r3]
	mul	r1, r1, r0
	add	r0, r4, #0
	bl	AddMoney
	ldrh	r0, [r5]
	mov	r2, r8
	ldrh	r1, [r2, #0x10]
	mov	r2, #0x2
	bl	RecordItemTransaction
	mov	r3, r8
	ldrb	r0, [r3]
	ldr	r4, .L771+0xc
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r5, r4, #0
	add	r5, r5, #0xe
	add	r1, r2, r5
	mov	r3, #0x8
	add	r3, r3, r4
	mov	r9, r3
	add	r2, r2, r9
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x6]
	bl	Pocket_CalculateNItemsAndMaxShowed
	ldrb	r0, [r4, #0x6]
	bl	PocketCalculateInitialCursorPosAndItemsAbove
	ldr	r0, .L771+0x10
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldrb	r0, [r4, #0x6]
	bl	Bag_BuildListMenuTemplate
	ldr	r0, .L771+0x14
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r5, r2, r5
	ldrh	r1, [r5]
	add	r2, r2, r9
	ldrh	r2, [r2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	strh	r0, [r1]
	mov	r1, #0x2
	bl	bag_menu_print_cursor_
	mov	r0, #0x2
	bl	GetBagWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	BagDrawTextBoxOnWindow
	mov	r0, #0x2
	bl	GetBagWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r2, .L771+0x8
	ldr	r0, [r2]
	add	r0, r0, r7
	bl	GetMoney
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	bl	PrintMoneyAmountInMoneyBox
	mov	r3, #0x8
	neg	r3, r3
	add	sl, sl, r3
	add	r6, r6, sl
	ldr	r0, .L771+0x18
	str	r0, [r6]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L772:
	.align	2, 0
.L771:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gSaveBlock1Ptr
	.word	gBagMenuState
	.word	sBagMenuDisplay
	.word	gMultiuseListMenuTemplate
	.word	Task_WaitPressAB_AfterSell
.Lfe98:
	.size	 Task_FinalizeSaleToShop,.Lfe98-Task_FinalizeSaleToShop
	.align	2, 0
	.type	 Task_WaitPressAB_AfterSell,function
	.thumb_func
Task_WaitPressAB_AfterSell:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L776
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L775	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L774	@cond_branch
.L775:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x2
	bl	HideBagWindow
	mov	r0, #0x2
	bl	PutWindowTilemap
	ldr	r0, .L776+0x4
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x5]
	add	r0, r4, #0
	bl	Task_ReturnToBagFromContextMenu
.L774:
	pop	{r4}
	pop	{r0}
	bx	r0
.L777:
	.align	2, 0
.L776:
	.word	gMain
	.word	sBagMenuDisplay
.Lfe99:
	.size	 Task_WaitPressAB_AfterSell,.Lfe99-Task_WaitPressAB_AfterSell
	.align	2, 0
	.type	 Task_ItemContext_Deposit,function
	.thumb_func
Task_ItemContext_Deposit:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r4, r0, #0x3
	ldr	r5, .L781
	add	r1, r4, r5
	mov	r0, #0x1
	strh	r0, [r1, #0x10]
	mov	r3, #0x4
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1
	bne	.L779	@cond_branch
	add	r0, r2, #0
	bl	Task_TryDoItemDeposit
	b	.L780
.L782:
	.align	2, 0
.L781:
	.word	gTasks+0x8
.L779:
	ldrh	r0, [r1, #0x2]
	ldr	r1, .L783
	bl	InitQuantityToTossOrDeposit
	add	r0, r5, #0
	sub	r0, r0, #0x8
	add	r0, r4, r0
	ldr	r1, .L783+0x4
	str	r1, [r0]
.L780:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L784:
	.align	2, 0
.L783:
	.word	gText_DepositHowManyStrVars1
	.word	Task_SelectQuantityToDeposit
.Lfe100:
	.size	 Task_ItemContext_Deposit,.Lfe100-Task_ItemContext_Deposit
	.align	2, 0
	.type	 Task_SelectQuantityToDeposit,function
	.thumb_func
Task_SelectQuantityToDeposit:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L791
	add	r4, r0, r1
	add	r0, r4, #0
	add	r0, r0, #0x10
	ldrh	r1, [r4, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L786	@cond_branch
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	bl	UpdateQuantityToTossOrDeposit
	b	.L787
.L792:
	.align	2, 0
.L791:
	.word	gTasks+0x8
.L786:
	ldr	r0, .L793
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L788	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x6
	bl	GetBagWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ClearWindowTilemap
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	HideBagWindow
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	bl	BagDestroyPocketScrollArrowPair
	add	r0, r5, #0
	bl	Task_TryDoItemDeposit
	b	.L787
.L794:
	.align	2, 0
.L793:
	.word	gMain
.L788:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L787	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	HideBagWindow
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	bag_menu_print_cursor_
	bl	BagDestroyPocketScrollArrowPair
	add	r0, r6, #0
	bl	Task_RedrawArrowsAndReturnToBagMenuSelect
.L787:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 Task_SelectQuantityToDeposit,.Lfe101-Task_SelectQuantityToDeposit
	.align	2, 0
	.type	 Task_TryDoItemDeposit,function
	.thumb_func
Task_TryDoItemDeposit:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	mov	r8, r0
	ldr	r0, .L798
	mov	r9, r0
	mov	r7, r8
	add	r7, r7, r9
	ldr	r5, .L798+0x4
	ldrh	r0, [r5]
	ldrh	r1, [r7, #0x10]
	bl	AddPCItem
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x1
	bne	.L796	@cond_branch
	ldrh	r2, [r5]
	ldr	r3, .L798+0x8
	mov	r0, #0x1c
	mov	r1, #0x0
	bl	ItemUse_SetQuestLogEvent
	ldrh	r0, [r5]
	ldr	r1, .L798+0xc
	bl	CopyItemName
	ldr	r0, .L798+0x10
	mov	r2, #0x10
	ldrsh	r1, [r7, r2]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L798+0x14
	ldr	r1, .L798+0x18
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x6
	mov	r1, #0x3
	bl	ShowBagWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	str	r1, [sp]
	str	r6, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	str	r1, [sp, #0xc]
	str	r6, [sp, #0x10]
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x0
	bl	BagPrintTextOnWindow
	mov	r0, r9
	sub	r0, r0, #0x8
	add	r0, r0, r8
	ldr	r1, .L798+0x1c
	str	r1, [r0]
	b	.L797
.L799:
	.align	2, 0
.L798:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	0xffff
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_DepositedStrVar2StrVar1s
	.word	Task_WaitAB_RedrawAndReturnToBag
.L796:
	ldr	r2, .L800
	ldr	r3, .L800+0x4
	add	r0, r4, #0
	mov	r1, #0x2
	bl	DisplayItemMessageInBag
.L797:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L801:
	.align	2, 0
.L800:
	.word	gText_NoRoomToStoreItems
	.word	Task_WaitAButtonAndCloseContextMenu
.Lfe102:
	.size	 Task_TryDoItemDeposit,.Lfe102-Task_TryDoItemDeposit
	.align	2, 0
	.globl	UseRegisteredKeyItemOnField
	.type	 UseRegisteredKeyItemOnField,function
	.thumb_func
UseRegisteredKeyItemOnField:
	push	{r4, r5, r6, lr}
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L803	@cond_branch
	mov	r0, #0x0
	b	.L806
.L803:
	bl	DismissMapNamePopup
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r4, .L808
	ldr	r0, [r4]
	ldr	r5, .L808+0x4
	add	r1, r0, r5
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L804	@cond_branch
	mov	r1, #0x1
	bl	CheckBagHasItem
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x1
	bne	.L805	@cond_branch
	bl	LockPlayerFieldControls
	bl	FreezeObjectEvents
	bl	HandleEnforcedLookDirectionOnPlayerStopMoving
	bl	StopPlayerAvatar
	ldr	r2, .L808+0x8
	ldr	r0, [r4]
	add	r0, r0, r5
	ldrh	r1, [r0]
	strh	r1, [r2]
	ldrh	r0, [r0]
	bl	ItemId_GetFieldFunc
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L808+0xc
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r6, [r1, #0xe]
	b	.L807
.L809:
	.align	2, 0
.L808:
	.word	gSaveBlock1Ptr
	.word	0x296
	.word	gSpecialVar_ItemId
	.word	gTasks
.L805:
	ldr	r0, [r4]
	add	r0, r0, r5
	mov	r1, #0x0
	strh	r1, [r0]
.L804:
	ldr	r0, .L810
	bl	ScriptContext_SetupScript
.L807:
	mov	r0, #0x1
.L806:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L811:
	.align	2, 0
.L810:
	.word	EventScript_BagItemCanBeRegistered
.Lfe103:
	.size	 UseRegisteredKeyItemOnField,.Lfe103-UseRegisteredKeyItemOnField
	.align	2, 0
	.type	 BagIsTutorial,function
	.thumb_func
BagIsTutorial:
	push	{lr}
	ldr	r0, .L816
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x6
	beq	.L814	@cond_branch
	cmp	r0, #0x8
	beq	.L814	@cond_branch
	cmp	r0, #0x7
	beq	.L814	@cond_branch
	cmp	r0, #0x9
	beq	.L814	@cond_branch
	cmp	r0, #0xa
	bne	.L813	@cond_branch
.L814:
	mov	r0, #0x1
	b	.L815
.L817:
	.align	2, 0
.L816:
	.word	gBagMenuState
.L813:
	mov	r0, #0x0
.L815:
	pop	{r1}
	bx	r1
.Lfe104:
	.size	 BagIsTutorial,.Lfe104-BagIsTutorial
	.align	2, 0
	.type	 BackUpPlayerBag,function
	.thumb_func
BackUpPlayerBag:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r5, .L824
	mov	r0, #0xb2
	lsl	r0, r0, #0x1
	bl	AllocZeroed
	str	r0, [r5]
	ldr	r4, .L824+0x4
	ldr	r1, [r4]
	mov	r2, #0xc4
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	mov	r2, #0xa8
	bl	memcpy
	ldr	r0, [r5]
	add	r0, r0, #0xa8
	ldr	r1, [r4]
	mov	r3, #0xee
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	mov	r2, #0x78
	bl	memcpy
	ldr	r0, [r5]
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r1, [r4]
	mov	r2, #0x86
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	mov	r2, #0x34
	bl	memcpy
	ldr	r2, [r5]
	ldr	r0, [r4]
	ldr	r3, .L824+0x8
	add	r0, r0, r3
	ldrh	r1, [r0]
	mov	r3, #0xb0
	lsl	r3, r3, #0x1
	add	r0, r2, r3
	strh	r1, [r0]
	ldr	r1, .L824+0xc
	ldrh	r0, [r1, #0x6]
	add	r3, r3, #0x2
	add	r2, r2, r3
	strh	r0, [r2]
	mov	r4, #0x0
	mov	r8, r5
	mov	r7, #0xaa
	lsl	r7, r7, #0x1
	mov	r0, #0xe
	add	r0, r0, r1
	mov	ip, r0
	mov	r6, #0xad
	lsl	r6, r6, #0x1
	add	r5, r1, #0
	add	r5, r5, #0x8
.L822:
	mov	r1, r8
	ldr	r2, [r1]
	lsl	r3, r4, #0x1
	add	r0, r2, r7
	add	r0, r0, r3
	ldrh	r1, [r5]
	strh	r1, [r0]
	add	r2, r2, r6
	add	r2, r2, r3
	mov	r3, ip
	ldrh	r0, [r3]
	strh	r0, [r2]
	mov	r0, #0x2
	add	ip, ip, r0
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x2
	bls	.L822	@cond_branch
	ldr	r4, .L824+0x4
	ldr	r0, [r4]
	mov	r1, #0xc4
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x2a
	bl	ClearItemSlots
	ldr	r0, [r4]
	mov	r2, #0xee
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	mov	r1, #0x1e
	bl	ClearItemSlots
	ldr	r0, [r4]
	mov	r3, #0x86
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	mov	r1, #0xd
	bl	ClearItemSlots
	ldr	r0, [r4]
	ldr	r1, .L824+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	bl	ResetBagCursorPositions
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L825:
	.align	2, 0
.L824:
	.word	sBackupPlayerBag
	.word	gSaveBlock1Ptr
	.word	0x296
	.word	gBagMenuState
.Lfe105:
	.size	 BackUpPlayerBag,.Lfe105-BackUpPlayerBag
	.align	2, 0
	.type	 RestorePlayerBag,function
	.thumb_func
RestorePlayerBag:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L832
	ldr	r0, [r4]
	mov	r1, #0xc4
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r5, .L832+0x4
	ldr	r1, [r5]
	mov	r2, #0xa8
	bl	memcpy
	ldr	r0, [r4]
	mov	r2, #0xee
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldr	r1, [r5]
	add	r1, r1, #0xa8
	mov	r2, #0x78
	bl	memcpy
	ldr	r0, [r4]
	mov	r3, #0x86
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	ldr	r1, [r5]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	mov	r2, #0x34
	bl	memcpy
	ldr	r1, [r4]
	ldr	r2, [r5]
	mov	r3, #0xb0
	lsl	r3, r3, #0x1
	add	r0, r2, r3
	ldrh	r0, [r0]
	ldr	r3, .L832+0x8
	add	r1, r1, r3
	strh	r0, [r1]
	ldr	r1, .L832+0xc
	mov	r3, #0xb1
	lsl	r3, r3, #0x1
	add	r0, r2, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0x6]
	mov	r4, #0x0
	mov	ip, r5
	add	r3, r1, #0
	add	r3, r3, #0x8
	mov	r7, ip
	mov	r6, #0xaa
	lsl	r6, r6, #0x1
	mov	r5, #0xad
	lsl	r5, r5, #0x1
.L830:
	lsl	r2, r4, #0x1
	ldr	r1, [r7]
	add	r0, r1, r6
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r3]
	add	r1, r1, r5
	add	r1, r1, r2
	ldrh	r0, [r1]
	strh	r0, [r3, #0x6]
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x2
	bls	.L830	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	bl	Free
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L833:
	.align	2, 0
.L832:
	.word	gSaveBlock1Ptr
	.word	sBackupPlayerBag
	.word	0x296
	.word	gBagMenuState
.Lfe106:
	.size	 RestorePlayerBag,.Lfe106-RestorePlayerBag
	.align	2, 0
	.globl	InitOldManBag
	.type	 InitOldManBag,function
	.thumb_func
InitOldManBag:
	push	{lr}
	bl	BackUpPlayerBag
	mov	r0, #0xd
	mov	r1, #0x1
	bl	AddBagItem
	mov	r0, #0x4
	mov	r1, #0x1
	bl	AddBagItem
	ldr	r2, .L835
	mov	r0, #0x6
	mov	r1, #0x0
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L836:
	.align	2, 0
.L835:
	.word	SetCB2ToReshowScreenAfterMenu2
.Lfe107:
	.size	 InitOldManBag,.Lfe107-InitOldManBag
	.align	2, 0
	.type	 Task_Bag_OldManTutorial,function
	.thumb_func
Task_Bag_OldManTutorial:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r6, r0, #0x3
	ldr	r7, .L847
	add	r5, r6, r7
	ldr	r0, .L847+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L837	@cond_branch
	mov	r0, #0x10
	ldrsh	r1, [r5, r0]
	cmp	r1, #0xcc
	beq	.L841	@cond_branch
	cmp	r1, #0xcc
	bgt	.L846	@cond_branch
	cmp	r1, #0x66
	beq	.L841	@cond_branch
	b	.L839
.L848:
	.align	2, 0
.L847:
	.word	gTasks+0x8
	.word	gPaletteFade
.L846:
	mov	r0, #0x99
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L842	@cond_branch
	add	r0, r0, #0x66
	cmp	r1, r0
	beq	.L843	@cond_branch
	b	.L839
.L841:
	mov	r0, #0xf6
	bl	PlaySE
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SwitchPockets
	b	.L839
.L842:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	bag_menu_print_cursor_
	mov	r0, #0x1
	bl	Bag_FillMessageBoxWithPalette
	ldr	r1, .L849
	mov	r0, #0x4
	strh	r0, [r1]
	add	r0, r4, #0
	bl	OpenContextMenu
	b	.L839
.L850:
	.align	2, 0
.L849:
	.word	gSpecialVar_ItemId
.L843:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0xa
	bl	HideBagWindow
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x1
	bl	CopyWindowToVram
	ldrb	r0, [r5]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	bl	RestorePlayerBag
	bl	Bag_BeginCloseWin0Animation
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L851
	str	r1, [r0]
	b	.L837
.L852:
	.align	2, 0
.L851:
	.word	Task_Pokedude_FadeFromBag
.L839:
	ldrh	r0, [r5, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x10]
.L837:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe108:
	.size	 Task_Bag_OldManTutorial,.Lfe108-Task_Bag_OldManTutorial
	.align	2, 0
	.type	 Task_Pokedude_FadeFromBag,function
	.thumb_func
Task_Pokedude_FadeFromBag:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L854
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L854+0x4
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L855:
	.align	2, 0
.L854:
	.word	gTasks
	.word	Task_Pokedude_WaitFadeAndExitBag
.Lfe109:
	.size	 Task_Pokedude_FadeFromBag,.Lfe109-Task_Pokedude_FadeFromBag
	.align	2, 0
	.type	 Task_Pokedude_WaitFadeAndExitBag,function
	.thumb_func
Task_Pokedude_WaitFadeAndExitBag:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L860
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L857	@cond_branch
	ldr	r0, .L860+0x4
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L857	@cond_branch
	ldr	r0, .L860+0x8
	ldr	r0, [r0]
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L858	@cond_branch
	bl	SetMainCallback2
	b	.L859
.L861:
	.align	2, 0
.L860:
	.word	gPaletteFade
	.word	Task_AnimateWin0v
	.word	sBagMenuDisplay
.L858:
	ldr	r0, .L862
	ldr	r0, [r0]
	bl	SetMainCallback2
.L859:
	bl	BagDestroyPocketScrollArrowPair
	bl	DestroyBagMenuResources
	add	r0, r4, #0
	bl	DestroyTask
.L857:
	pop	{r4}
	pop	{r0}
	bx	r0
.L863:
	.align	2, 0
.L862:
	.word	gBagMenuState
.Lfe110:
	.size	 Task_Pokedude_WaitFadeAndExitBag,.Lfe110-Task_Pokedude_WaitFadeAndExitBag
	.align	2, 0
	.globl	InitPokedudeBag
	.type	 InitPokedudeBag,function
	.thumb_func
InitPokedudeBag:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	BackUpPlayerBag
	mov	r0, #0xd
	mov	r1, #0x1
	bl	AddBagItem
	mov	r0, #0xe
	mov	r1, #0x1
	bl	AddBagItem
	mov	r0, #0xb7
	lsl	r0, r0, #0x1
	mov	r1, #0x1
	bl	AddBagItem
	mov	r0, #0xb6
	lsl	r0, r0, #0x1
	mov	r1, #0x1
	bl	AddBagItem
	mov	r0, #0x4
	mov	r1, #0x5
	bl	AddBagItem
	mov	r0, #0x3
	mov	r1, #0x1
	bl	AddBagItem
	mov	r0, #0x8
	mov	r1, #0x1
	bl	AddBagItem
	cmp	r4, #0x7
	beq	.L867	@cond_branch
	cmp	r4, #0x8
	beq	.L868	@cond_branch
	ldr	r2, .L870
	add	r0, r4, #0
	b	.L865
.L871:
	.align	2, 0
.L870:
	.word	CB2_ReturnToTeachyTV
.L867:
	ldr	r2, .L872
	mov	r0, #0x7
	b	.L865
.L873:
	.align	2, 0
.L872:
	.word	SetCB2ToReshowScreenAfterMenu2
.L868:
	ldr	r2, .L874
	mov	r0, #0x8
.L865:
	mov	r1, #0x0
	bl	GoToBagMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L875:
	.align	2, 0
.L874:
	.word	SetCB2ToReshowScreenAfterMenu2
.Lfe111:
	.size	 InitPokedudeBag,.Lfe111-InitPokedudeBag
	.align	2, 0
	.type	 Task_BButtonInterruptTeachyTv,function
	.thumb_func
Task_BButtonInterruptTeachyTv:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L880
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L877	@cond_branch
	mov	r0, #0x0
	b	.L879
.L881:
	.align	2, 0
.L880:
	.word	gMain
.L877:
	bl	RestorePlayerBag
	bl	SetTeachyTvControllerModeToResume
	ldr	r0, .L882
	ldr	r1, [r0]
	ldr	r0, .L882+0x4
	str	r0, [r1]
	ldr	r1, .L882+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L882+0xc
	str	r1, [r0]
	mov	r0, #0x1
.L879:
	pop	{r4}
	pop	{r1}
	bx	r1
.L883:
	.align	2, 0
.L882:
	.word	sBagMenuDisplay
	.word	CB2_ReturnToTeachyTV
	.word	gTasks
	.word	Task_Pokedude_FadeFromBag
.Lfe112:
	.size	 Task_BButtonInterruptTeachyTv,.Lfe112-Task_BButtonInterruptTeachyTv
	.align	2, 0
	.type	 Task_Bag_TeachyTvRegister,function
	.thumb_func
Task_Bag_TeachyTvRegister:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r5, r0, #0x3
	ldr	r6, .L899
	add	r7, r5, r6
	ldr	r0, .L899+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8778
	b	.L884	@long jump
.LCB8778:
	add	r0, r4, #0
	bl	Task_BButtonInterruptTeachyTv
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB8785
	b	.L884	@long jump
.LCB8785:
	mov	r0, #0x10
	ldrsh	r1, [r7, r0]
	mov	r0, #0xcc
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L890	@cond_branch
	cmp	r1, r0
	bgt	.L896	@cond_branch
	cmp	r1, #0xcc
	beq	.L888	@cond_branch
	cmp	r1, #0xcc
	bgt	.L897	@cond_branch
	cmp	r1, #0x66
	beq	.L887	@cond_branch
	b	.L886
.L900:
	.align	2, 0
.L899:
	.word	gTasks+0x8
	.word	gPaletteFade
.L897:
	mov	r0, #0x99
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L889	@cond_branch
	b	.L886
.L896:
	mov	r0, #0x99
	lsl	r0, r0, #0x2
	cmp	r1, r0
	beq	.L892	@cond_branch
	cmp	r1, r0
	bgt	.L898	@cond_branch
	sub	r0, r0, #0x66
	cmp	r1, r0
	beq	.L892	@cond_branch
	b	.L886
.L898:
	ldr	r0, .L901
	cmp	r1, r0
	bne	.LCB8831
	b	.L893	@long jump
.LCB8831:
	b	.L886
.L902:
	.align	2, 0
.L901:
	.word	0x2ca
.L887:
	mov	r0, #0xf6
	bl	PlaySE
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SwitchPockets
	b	.L886
.L888:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r7]
	mov	r1, #0x2
	bl	bag_menu_print_cursor_
	mov	r0, #0x1
	bl	Bag_FillMessageBoxWithPalette
	ldr	r1, .L903
	mov	r2, #0xb7
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	add	r0, r4, #0
	bl	OpenContextMenu
	b	.L886
.L904:
	.align	2, 0
.L903:
	.word	gSpecialVar_ItemId
.L889:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	Menu_MoveCursorNoWrapAround
	b	.L886
.L890:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L905
	ldr	r0, [r0]
	ldr	r1, .L905+0x4
	ldrh	r1, [r1]
	ldr	r2, .L905+0x8
	add	r0, r0, r2
	strh	r1, [r0]
	mov	r0, #0xa
	bl	HideBagWindow
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	ldrb	r0, [r7]
	ldr	r4, .L905+0xc
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r5, r4, #0
	add	r5, r5, #0xe
	add	r1, r2, r5
	add	r6, r4, #0
	add	r6, r6, #0x8
	add	r2, r2, r6
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x6]
	bl	Bag_BuildListMenuTemplate
	ldr	r0, .L905+0x10
	ldrh	r2, [r4, #0x6]
	lsl	r2, r2, #0x1
	add	r5, r2, r5
	ldrh	r1, [r5]
	add	r2, r2, r6
	ldrh	r2, [r2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7]
	mov	r0, #0x0
	bl	Bag_FillMessageBoxWithPalette
	ldrb	r0, [r7]
	mov	r1, #0x1
	bl	bag_menu_print_cursor_
	mov	r0, #0x0
	mov	r1, #0x1
	bl	CopyWindowToVram
	b	.L886
.L906:
	.align	2, 0
.L905:
	.word	gSaveBlock1Ptr
	.word	gSpecialVar_ItemId
	.word	0x296
	.word	gBagMenuState
	.word	gMultiuseListMenuTemplate
.L892:
	ldr	r1, .L907
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	mov	r0, #0x80
	strh	r0, [r1, #0x30]
	ldrb	r0, [r7]
	bl	ListMenu_ProcessInput
	b	.L886
.L908:
	.align	2, 0
.L907:
	.word	gMain
.L893:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r7]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	bl	RestorePlayerBag
	bl	Bag_BeginCloseWin0Animation
	add	r0, r6, #0
	sub	r0, r0, #0x8
	add	r0, r5, r0
	ldr	r1, .L909
	str	r1, [r0]
	b	.L884
.L910:
	.align	2, 0
.L909:
	.word	Task_Pokedude_FadeFromBag
.L886:
	ldrh	r0, [r7, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x10]
.L884:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe113:
	.size	 Task_Bag_TeachyTvRegister,.Lfe113-Task_Bag_TeachyTvRegister
	.align	2, 0
	.type	 Task_Bag_TeachyTvCatching,function
	.thumb_func
Task_Bag_TeachyTvCatching:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r6, r0, #0x3
	ldr	r7, .L929
	add	r4, r6, r7
	ldr	r0, .L929+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9042
	b	.L911	@long jump
.LCB9042:
	add	r0, r5, #0
	bl	Task_BButtonInterruptTeachyTv
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L913	@cond_branch
	bl	FreeRestoreBattleData
	bl	LoadPlayerParty
	b	.L911
.L930:
	.align	2, 0
.L929:
	.word	gTasks+0x8
	.word	gPaletteFade
.L913:
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	mov	r0, #0xcc
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L918	@cond_branch
	cmp	r1, r0
	bgt	.L925	@cond_branch
	cmp	r1, #0xcc
	beq	.L916	@cond_branch
	cmp	r1, #0xcc
	bgt	.L926	@cond_branch
	cmp	r1, #0x66
	beq	.L916	@cond_branch
	b	.L914
.L926:
	mov	r0, #0x99
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L918	@cond_branch
	b	.L914
.L925:
	mov	r0, #0x99
	lsl	r0, r0, #0x2
	cmp	r1, r0
	beq	.L920	@cond_branch
	cmp	r1, r0
	bgt	.L927	@cond_branch
	sub	r0, r0, #0x66
	cmp	r1, r0
	beq	.L920	@cond_branch
	b	.L914
.L927:
	ldr	r0, .L931
	cmp	r1, r0
	beq	.L921	@cond_branch
	add	r0, r0, #0x66
	cmp	r1, r0
	beq	.L922	@cond_branch
	b	.L914
.L932:
	.align	2, 0
.L931:
	.word	0x2ca
.L916:
	mov	r0, #0xf6
	bl	PlaySE
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SwitchPockets
	b	.L914
.L918:
	ldr	r1, .L933
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	mov	r0, #0x80
	b	.L928
.L934:
	.align	2, 0
.L933:
	.word	gMain
.L920:
	ldr	r1, .L935
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	mov	r0, #0x40
.L928:
	strh	r0, [r1, #0x30]
	ldrb	r0, [r4]
	bl	ListMenu_ProcessInput
	b	.L914
.L936:
	.align	2, 0
.L935:
	.word	gMain
.L921:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	bag_menu_print_cursor_
	mov	r0, #0x1
	bl	Bag_FillMessageBoxWithPalette
	ldr	r1, .L937
	mov	r0, #0x4
	strh	r0, [r1]
	add	r0, r5, #0
	bl	OpenContextMenu
	b	.L914
.L938:
	.align	2, 0
.L937:
	.word	gSpecialVar_ItemId
.L922:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0xa
	bl	HideBagWindow
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x1
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	bl	RestorePlayerBag
	bl	Bag_BeginCloseWin0Animation
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L939
	str	r1, [r0]
	b	.L911
.L940:
	.align	2, 0
.L939:
	.word	Task_Pokedude_FadeFromBag
.L914:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
.L911:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 Task_Bag_TeachyTvCatching,.Lfe114-Task_Bag_TeachyTvCatching
	.align	2, 0
	.type	 Task_Bag_TeachyTvStatus,function
	.thumb_func
Task_Bag_TeachyTvStatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	mov	r8, r0
	ldr	r0, .L951
	mov	r9, r0
	mov	r5, r8
	add	r5, r5, r9
	ldr	r0, .L951+0x4
	ldrb	r1, [r0, #0x7]
	mov	r7, #0x80
	add	r0, r7, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	bne	.L941	@cond_branch
	add	r0, r4, #0
	bl	Task_BButtonInterruptTeachyTv
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L943	@cond_branch
	bl	FreeRestoreBattleData
	bl	LoadPlayerParty
	b	.L941
.L952:
	.align	2, 0
.L951:
	.word	gTasks+0x8
	.word	gPaletteFade
.L943:
	mov	r0, #0x10
	ldrsh	r1, [r5, r0]
	cmp	r1, #0xcc
	beq	.L946	@cond_branch
	cmp	r1, #0xcc
	bgt	.L950	@cond_branch
	cmp	r1, #0x66
	beq	.L945	@cond_branch
	b	.L944
.L950:
	mov	r0, #0x99
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L947	@cond_branch
	b	.L944
.L945:
	ldr	r0, .L953
	strh	r6, [r0, #0x2e]
	strh	r7, [r0, #0x30]
	ldrb	r0, [r5]
	bl	ListMenu_ProcessInput
	b	.L944
.L954:
	.align	2, 0
.L953:
	.word	gMain
.L946:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	bag_menu_print_cursor_
	mov	r0, #0x1
	bl	Bag_FillMessageBoxWithPalette
	ldr	r1, .L955
	mov	r0, #0xe
	strh	r0, [r1]
	add	r0, r4, #0
	bl	OpenContextMenu
	b	.L944
.L956:
	.align	2, 0
.L955:
	.word	gSpecialVar_ItemId
.L947:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0xa
	bl	HideBagWindow
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x1
	bl	CopyWindowToVram
	ldrb	r0, [r5]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	bl	RestorePlayerBag
	ldr	r1, .L957
	ldr	r0, .L957+0x4
	str	r0, [r1]
	ldr	r0, .L957+0x8
	bl	ItemMenu_SetExitCallback
	mov	r0, r9
	sub	r0, r0, #0x8
	add	r0, r0, r8
	ldr	r1, .L957+0xc
	str	r1, [r0]
	b	.L941
.L958:
	.align	2, 0
.L957:
	.word	gItemUseCB
	.word	ItemUseCB_MedicineStep
	.word	Pokedude_ChooseMonForInBattleItem
	.word	Task_Pokedude_FadeFromBag
.L944:
	ldrh	r0, [r5, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x10]
.L941:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe115:
	.size	 Task_Bag_TeachyTvStatus,.Lfe115-Task_Bag_TeachyTvStatus
	.align	2, 0
	.type	 Task_Bag_TeachyTvTMs,function
	.thumb_func
Task_Bag_TeachyTvTMs:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	mov	r8, r0
	ldr	r0, .L969
	mov	r9, r0
	mov	r6, r8
	add	r6, r6, r9
	ldr	r0, .L969+0x4
	ldrb	r1, [r0, #0x7]
	mov	r7, #0x80
	add	r0, r7, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L959	@cond_branch
	add	r0, r4, #0
	bl	Task_BButtonInterruptTeachyTv
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L959	@cond_branch
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	cmp	r1, #0xcc
	beq	.L963	@cond_branch
	cmp	r1, #0xcc
	bgt	.L968	@cond_branch
	cmp	r1, #0x66
	beq	.L962	@cond_branch
	b	.L961
.L970:
	.align	2, 0
.L969:
	.word	gTasks+0x8
	.word	gPaletteFade
.L968:
	mov	r0, #0x99
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L964	@cond_branch
	add	r0, r0, #0x66
	cmp	r1, r0
	beq	.L965	@cond_branch
	b	.L961
.L962:
	mov	r0, #0xf6
	bl	PlaySE
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SwitchPockets
	b	.L961
.L963:
	ldr	r0, .L971
	strh	r5, [r0, #0x2e]
	strh	r7, [r0, #0x30]
	ldrb	r0, [r6]
	bl	ListMenu_ProcessInput
	b	.L961
.L972:
	.align	2, 0
.L971:
	.word	gMain
.L964:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	bag_menu_print_cursor_
	mov	r0, #0x1
	bl	Bag_FillMessageBoxWithPalette
	ldr	r1, .L973
	mov	r2, #0xb6
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	add	r0, r4, #0
	bl	OpenContextMenu
	b	.L961
.L974:
	.align	2, 0
.L973:
	.word	gSpecialVar_ItemId
.L965:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0xa
	bl	HideBagWindow
	mov	r0, #0x6
	bl	HideBagWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x1
	bl	CopyWindowToVram
	ldrb	r0, [r6]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	bl	RestorePlayerBag
	ldr	r0, .L975
	ldr	r1, [r0]
	ldr	r0, .L975+0x4
	str	r0, [r1]
	mov	r0, r9
	sub	r0, r0, #0x8
	add	r0, r0, r8
	ldr	r1, .L975+0x8
	str	r1, [r0]
	b	.L959
.L976:
	.align	2, 0
.L975:
	.word	sBagMenuDisplay
	.word	Pokedude_InitTMCase
	.word	Task_Pokedude_FadeFromBag
.L961:
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x10]
.L959:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe116:
	.size	 Task_Bag_TeachyTvTMs,.Lfe116-Task_Bag_TeachyTvTMs
.text
	.align	2, 0 @ Don't pad with nop

