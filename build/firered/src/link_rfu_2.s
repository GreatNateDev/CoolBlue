@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sRfuReqConfig,object
	.size	 sRfuReqConfig,24
sRfuReqConfig:
	.space	24
	.align	2, 0
	.type	 sRfuDebug,object
	.size	 sRfuDebug,220
sRfuDebug:
	.space	220
	.section .rodata
	.align	2, 0
	.type	 sRfuReqConfigTemplate,object
	.size	 sRfuReqConfigTemplate,24
sRfuReqConfigTemplate:
	.byte	0x4
	.byte	0x20
	.short	0x0
	.byte	0x0
	.space	1
	.short	0x2
	.word	gHostRfuGameData
	.word	gHostRfuUsername
	.byte	0x1
	.byte	0x0
	.short	0x258
	.short	0x12c
	.space	2
	.type	 sAvailSlots,object
sAvailSlots:
	.space	1
	.byte	0x3
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.size	 sAvailSlots,5
	.align	2, 0
	.type	 sAllBlocksReceived,object
sAllBlocksReceived:
	.word	0x0
	.word	0x1
	.word	0x3
	.word	0x7
	.word	0xf
	.word	0x1f
	.word	0x3f
	.word	0x7f
	.word	0xff
	.word	0x1ff
	.word	0x3ff
	.word	0x7ff
	.word	0xfff
	.word	0x1fff
	.word	0x3fff
	.word	0x7fff
	.word	0xffff
	.word	0x1ffff
	.word	0x3ffff
	.word	0x7ffff
	.word	0xfffff
	.word	0x1fffff
	.word	0x3fffff
	.word	0x7fffff
	.word	0xffffff
	.size	 sAllBlocksReceived,100
	.type	 sSlotToLinkPlayerTableId,object
sSlotToLinkPlayerTableId:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.size	 sSlotToLinkPlayerTableId,9
	.type	 sPlayerBitsToCount,object
	.size	 sPlayerBitsToCount,16
sPlayerBitsToCount:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.type	 sPlayerBitsToNewChildIdx,object
	.size	 sPlayerBitsToNewChildIdx,16
sPlayerBitsToNewChildIdx:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.align	2, 0
	.type	 sBlockRequests,object
sBlockRequests:
	.word	gBlockSendBuffer
	.word	0xc8
	.word	gBlockSendBuffer
	.word	0xc8
	.word	gBlockSendBuffer
	.word	0x64
	.word	gBlockSendBuffer
	.word	0xdc
	.word	gBlockSendBuffer
	.word	0x28
	.size	 sBlockRequests,40
	.align	1, 0
	.type	 sAcceptedSerialNos,object
sAcceptedSerialNos:
	.short	0x2
	.short	0x7f7d
	.short	0xffff
	.size	 sAcceptedSerialNos,6
	.type	 sASCII_RfuCmds,object
sASCII_RfuCmds:
	.ascii	"RFU WAIT\000"
	.space	6
	.ascii	"RFU BOOT\000"
	.space	6
	.ascii	"RFU ERROR\000"
	.space	5
	.ascii	"RFU RESET\000"
	.space	5
	.ascii	"RFU CONFIG\000"
	.space	4
	.ascii	"RFU START\000"
	.space	5
	.ascii	"RFU SC POLL\000"
	.space	3
	.ascii	"RFU SP POLL\000"
	.space	3
	.ascii	"RFU START\000"
	.space	5
	.ascii	"RFU SEND ERR\000"
	.space	2
	.ascii	"RFU CP POLL\000"
	.space	3
	.size	 sASCII_RfuCmds,165
	.type	 sASCII_RecoverCmds,object
sASCII_RecoverCmds:
	.ascii	"              \000"
	.space	1
	.ascii	"RECOVER START \000"
	.space	1
	.ascii	"DISSCONECT    \000"
	.space	1
	.ascii	"RECOVER SUUSES\000"
	.space	1
	.ascii	"RECOVER FAILED\000"
	.space	1
	.size	 sASCII_RecoverCmds,80
	.align	2, 0
	.type	 sShutdownTasks,object
sShutdownTasks:
	.word	Task_PlayerExchange
	.word	Task_PlayerExchangeUpdate
	.word	Task_PlayerExchangeChat
	.size	 sShutdownTasks,12
.text
	.align	2, 0
	.type	 Debug_PrintString,function
	.thumb_func
Debug_PrintString:
	bx	lr
.Lfe1:
	.size	 Debug_PrintString,.Lfe1-Debug_PrintString
	.align	2, 0
	.type	 Debug_PrintNum,function
	.thumb_func
Debug_PrintNum:
	bx	lr
.Lfe2:
	.size	 Debug_PrintNum,.Lfe2-Debug_PrintNum
	.align	2, 0
	.globl	ResetLinkRfuGFLayer
	.type	 ResetLinkRfuGFLayer,function
	.thumb_func
ResetLinkRfuGFLayer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	ldr	r6, .L13
	add	r5, r6, #0
	add	r5, r5, #0xee
	ldrb	r4, [r5]
	mov	r0, sp
	mov	r7, #0x0
	strh	r7, [r0]
	ldr	r2, .L13+0x4
	add	r1, r6, #0
	bl	CpuSet
	mov	r0, #0xff
	strb	r0, [r6, #0xc]
	ldrb	r0, [r5]
	strb	r4, [r5]
	ldrb	r0, [r5]
	cmp	r0, #0x4
	beq	.L7	@cond_branch
	ldrb	r0, [r5]
	strb	r7, [r5]
.L7:
	mov	r7, sp
	add	r7, r7, #0x2
	add	r0, sp, #0x4
	mov	r8, r0
	mov	r0, #0x6
	add	r0, r0, sp
	mov	r9, r0
	add	r5, r6, #0
	add	r5, r5, #0x80
	mov	r4, #0x4
.L11:
	add	r0, r5, #0
	bl	ResetSendDataManager
	add	r5, r5, #0x14
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L11	@cond_branch
	mov	r5, #0x0
	ldr	r4, .L13+0x8
	add	r0, r4, #0
	bl	ResetSendDataManager
	add	r0, r4, #0
	add	r0, r0, #0xb8
	bl	RfuRecvQueue_Reset
	ldr	r0, .L13+0xc
	add	r4, r4, r0
	add	r0, r4, #0
	bl	RfuSendQueue_Reset
	strh	r5, [r7]
	ldr	r1, .L13+0x10
	ldr	r2, .L13+0x14
	add	r0, r7, #0
	bl	CpuSet
	mov	r0, r8
	strh	r5, [r0]
	ldr	r1, .L13+0x18
	ldr	r2, .L13+0x1c
	bl	CpuSet
	mov	r0, r9
	strh	r5, [r0]
	ldr	r1, .L13+0x20
	ldr	r2, .L13+0x24
	bl	CpuSet
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gRfu
	.word	0x10004d6
	.word	gRfu+0x6c
	.word	0x634
	.word	gSendCmd
	.word	0x1000008
	.word	gRecvCmds
	.word	0x1000028
	.word	gLinkPlayers
	.word	0x1000046
.Lfe3:
	.size	 ResetLinkRfuGFLayer,.Lfe3-ResetLinkRfuGFLayer
	.align	2, 0
	.globl	InitRFU
	.type	 InitRFU,function
	.thumb_func
InitRFU:
	push	{r4, r5, r6, lr}
	ldr	r4, .L16
	ldr	r5, [r4, #0x4]
	ldr	r6, [r4, #0x8]
	bl	InitRFUAPI
	bl	rfu_REQ_stopMode
	bl	rfu_waitREQComplete
	ldr	r1, .L16+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	str	r5, [r4, #0x4]
	str	r6, [r4, #0x8]
	mov	r0, #0x1
	strh	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gIntrTable
	.word	0x4000208
.Lfe4:
	.size	 InitRFU,.Lfe4-InitRFU
	.align	2, 0
	.globl	InitRFUAPI
	.type	 InitRFUAPI,function
	.thumb_func
InitRFUAPI:
	push	{r4, lr}
	ldr	r0, .L20
	ldr	r1, .L20+0x4
	ldr	r4, .L20+0x8
	add	r2, r4, #0
	mov	r3, #0x1
	bl	rfu_initializeAPI
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L19	@cond_branch
	ldr	r0, .L20+0xc
	strh	r1, [r0]
	mov	r0, #0x0
	bl	RfuSetIgnoreError
	bl	ResetLinkRfuGFLayer
	add	r1, r4, #0x4
	mov	r0, #0x3
	bl	rfu_setTimerInterrupt
.L19:
	pop	{r4}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	sRfuAPIBuffer
	.word	0xe64
	.word	gIntrTable+0x4
	.word	gLinkType
.Lfe5:
	.size	 InitRFUAPI,.Lfe5-InitRFUAPI
	.align	2, 0
	.type	 Task_ParentSearchForChildren,function
	.thumb_func
Task_ParentSearchForChildren:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	UpdateChildStatuses
	ldr	r0, .L33
	ldrh	r0, [r0, #0x4]
	cmp	r0, #0x12
	bls	.LCB233
	b	.L23	@long jump
.LCB233:
	lsl	r0, r0, #0x2
	ldr	r1, .L33+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L34:
	.align	2, 0
.L33:
	.word	gRfu
	.word	.L31
	.align	2, 0
	.align	2, 0
.L31:
	.word	.L24
	.word	.L23
	.word	.L26
	.word	.L23
	.word	.L28
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L23
	.word	.L30
.L24:
	ldr	r0, .L35
	bl	rfu_LMAN_initializeRFU
	ldr	r0, .L35+0x4
	mov	r2, #0x1
	strh	r2, [r0, #0x4]
	ldr	r1, .L35+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0xa]
	b	.L23
.L36:
	.align	2, 0
.L35:
	.word	sRfuReqConfig
	.word	gRfu
	.word	gTasks
.L26:
	ldr	r4, .L37
	ldrb	r0, [r4, #0xc]
	ldr	r3, .L37+0x4
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	rfu_LMAN_establishConnection
	mov	r0, #0x3
	strh	r0, [r4, #0x4]
	ldr	r1, .L37+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x6
	strh	r1, [r0, #0xa]
	b	.L23
.L38:
	.align	2, 0
.L37:
	.word	gRfu
	.word	sAcceptedSerialNos
	.word	gTasks
.L28:
	mov	r0, #0x0
	bl	rfu_LMAN_stopManager
	ldr	r1, .L39
	mov	r0, #0x5
	strh	r0, [r1, #0x4]
	b	.L23
.L40:
	.align	2, 0
.L39:
	.word	gRfu
.L30:
	ldr	r4, .L41
	ldr	r0, .L41+0x4
	add	r1, r4, r0
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L41+0x8
	bl	rfu_LMAN_setMSCCallback
	bl	InitChildRecvBuffers
	bl	InitParentSendData
	mov	r0, #0x14
	strh	r0, [r4, #0x4]
	ldr	r1, .L41+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0xa]
	ldr	r0, .L41+0x10
	mov	r1, #0x5
	bl	CreateTask
	add	r0, r5, #0
	bl	DestroyTask
.L23:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L42:
	.align	2, 0
.L41:
	.word	gRfu
	.word	0x993
	.word	MSCCallback_Parent
	.word	gTasks
	.word	Task_PlayerExchange
.Lfe6:
	.size	 Task_ParentSearchForChildren,.Lfe6-Task_ParentSearchForChildren
	.align	2, 0
	.type	 Rfu_GetIndexOfNewestChild,function
	.thumb_func
Rfu_GetIndexOfNewestChild:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L44
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L45:
	.align	2, 0
.L44:
	.word	sPlayerBitsToNewChildIdx
.Lfe7:
	.size	 Rfu_GetIndexOfNewestChild,.Lfe7-Rfu_GetIndexOfNewestChild
	.align	2, 0
	.type	 SetLinkPlayerIdsFromSlots,function
	.thumb_func
SetLinkPlayerIdsFromSlots:
	push	{r4, r5, r6, r7, lr}
	add	r2, r0, #0
	add	r5, r1, #0
	mov	r4, #0x1
	add	r1, r2, #0
	mov	r6, #0x0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	bne	.L47	@cond_branch
	mov	r3, #0x0
	mov	r5, #0x1
	ldr	r1, .L79
.L51:
	add	r0, r2, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L50	@cond_branch
	add	r0, r3, r1
	strb	r4, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L50:
	asr	r2, r2, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L51	@cond_branch
	b	.L54
.L80:
	.align	2, 0
.L79:
	.word	gRfu+0x996
.L47:
	mov	r3, #0x0
	mvn	r0, r1
	mov	ip, r0
	mov	r7, #0x1
	ldr	r4, .L81
.L58:
	add	r2, r1, #0
	and	r2, r2, r7
	cmp	r2, #0
	bne	.L57	@cond_branch
	add	r0, r3, r4
	strb	r2, [r0]
.L57:
	asr	r1, r1, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L58	@cond_branch
	mov	r4, #0x4
	ldr	r0, .L81
	ldrb	r7, [r0]
.L64:
	mov	r3, #0x0
	sub	r1, r4, #0x1
	cmp	r7, r4
	beq	.L66	@cond_branch
	ldr	r2, .L81
.L67:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bhi	.L66	@cond_branch
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L67	@cond_branch
.L66:
	cmp	r3, #0x4
	bne	.L63	@cond_branch
	add	r6, r4, #0
.L63:
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L64	@cond_branch
	mov	r0, ip
	and	r5, r5, r0
	mov	r3, #0x0
	mov	r2, #0x1
	ldr	r1, .L81
.L76:
	add	r0, r5, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L75	@cond_branch
	add	r0, r3, r1
	strb	r6, [r0]
	add	r6, r6, #0x1
.L75:
	asr	r5, r5, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L76	@cond_branch
.L54:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gRfu+0x996
.Lfe8:
	.size	 SetLinkPlayerIdsFromSlots,.Lfe8-SetLinkPlayerIdsFromSlots
	.align	2, 0
	.type	 Task_ChildSearchForParent,function
	.thumb_func
Task_ChildSearchForParent:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L103
	ldrh	r3, [r0, #0x4]
	add	r7, r0, #0
	cmp	r3, #0xc
	bls	.LCB562
	b	.L84	@long jump
.LCB562:
	lsl	r0, r3, #0x2
	ldr	r1, .L103+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L104:
	.align	2, 0
.L103:
	.word	gRfu
	.word	.L100
	.align	2, 0
	.align	2, 0
.L100:
	.word	.L85
	.word	.L84
	.word	.L84
	.word	.L84
	.word	.L84
	.word	.L84
	.word	.L87
	.word	.L84
	.word	.L84
	.word	.L89
	.word	.L84
	.word	.L90
	.word	.L98
.L85:
	ldr	r0, .L105
	bl	rfu_LMAN_initializeRFU
	ldr	r0, .L105+0x4
	mov	r2, #0x1
	strh	r2, [r0, #0x4]
	b	.L102
.L106:
	.align	2, 0
.L105:
	.word	sRfuReqConfigTemplate
	.word	gRfu
.L87:
	ldrb	r0, [r7, #0xc]
	ldr	r3, .L107
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	rfu_LMAN_establishConnection
	mov	r2, #0x7
	strh	r2, [r7, #0x4]
.L102:
	ldr	r1, .L107+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0xa]
	b	.L84
.L108:
	.align	2, 0
.L107:
	.word	sAcceptedSerialNos
	.word	gTasks
.L89:
	ldr	r0, .L109
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0xa
	strh	r0, [r1, #0xa]
	b	.L84
.L110:
	.align	2, 0
.L109:
	.word	gTasks
.L90:
	bl	GetJoinGroupStatus
	cmp	r0, #0x6
	beq	.L94	@cond_branch
	cmp	r0, #0x6
	bgt	.L97	@cond_branch
	cmp	r0, #0x5
	beq	.L92	@cond_branch
	b	.L84
.L97:
	cmp	r0, #0x9
	beq	.L94	@cond_branch
	b	.L84
.L92:
	ldr	r1, .L111
	mov	r0, #0xc
	strh	r0, [r1, #0x4]
	b	.L84
.L112:
	.align	2, 0
.L111:
	.word	gRfu
.L94:
	bl	rfu_LMAN_requestChangeAgbClockMaster
	ldr	r0, .L113
	ldr	r1, .L113+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
	add	r0, r6, #0
	bl	DestroyTask
	b	.L84
.L114:
	.align	2, 0
.L113:
	.word	gRfu
	.word	0x99c
.L98:
	ldr	r0, .L115
	add	r4, r7, r0
	ldrb	r0, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x11
	lsl	r5, r5, r0
	lsr	r5, r5, #0x18
	ldrb	r1, [r4]
	mov	r0, #0xc
	bl	rfu_clearSlot
	ldrb	r1, [r4]
	ldr	r0, .L115+0x4
	add	r2, r7, r0
	mov	r0, #0x10
	mov	r3, #0x46
	bl	rfu_setRecvBuffer
	add	r1, r7, #0
	add	r1, r1, #0x4c
	add	r0, r5, #0
	mov	r2, #0xe
	bl	rfu_UNI_setSendData
	ldr	r1, .L115+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0xa]
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r4, .L115+0xc
	ldrb	r0, [r4, #0xf]
	cmp	r0, #0
	bne	.L99	@cond_branch
	bl	Debug_PrintEmpty
	ldrb	r0, [r4, #0xf]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xf]
.L99:
	ldr	r0, .L115+0x10
	mov	r1, #0x5
	bl	CreateTask
.L84:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	0x8f6
	.word	0x8f7
	.word	gTasks
	.word	sRfuDebug
	.word	Task_PlayerExchange
.Lfe9:
	.size	 Task_ChildSearchForParent,.Lfe9-Task_ChildSearchForParent
	.align	2, 0
	.type	 InitChildRecvBuffers,function
	.thumb_func
InitChildRecvBuffers:
	push	{r4, r5, lr}
	ldr	r0, .L124
	ldrb	r5, [r0]
	mov	r4, #0x0
.L121:
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L122	@cond_branch
	lsl	r2, r4, #0x3
	sub	r2, r2, r4
	lsl	r2, r2, #0x1
	ldr	r0, .L124+0x4
	add	r2, r2, r0
	mov	r0, #0x10
	add	r1, r4, #0
	mov	r3, #0xe
	bl	rfu_setRecvBuffer
	mov	r0, #0x3
	add	r1, r4, #0
	bl	rfu_clearSlot
.L122:
	lsr	r5, r5, #0x1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L121	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	lman
	.word	gRfu+0x14
.Lfe10:
	.size	 InitChildRecvBuffers,.Lfe10-InitChildRecvBuffers
	.align	2, 0
	.type	 InitParentSendData,function
	.thumb_func
InitParentSendData:
	push	{r4, r5, r6, lr}
	ldr	r0, .L127
	ldrb	r5, [r0]
	ldr	r4, .L127+0x4
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x46
	bl	rfu_UNI_setSendData
	add	r0, r5, #0
	bl	Rfu_GetIndexOfNewestChild
	ldr	r1, .L127+0x8
	add	r6, r4, r1
	add	r1, r4, #0
	add	r1, r1, #0x53
	strb	r0, [r1]
	add	r4, r4, #0x5b
	strb	r5, [r4]
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r5, #0
	bl	SetLinkPlayerIdsFromSlots
	mov	r0, #0x1
	strb	r0, [r6, #0xc]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	lman
	.word	gRfu+0x93f
	.word	-0x93f
.Lfe11:
	.size	 InitParentSendData,.Lfe11-InitParentSendData
	.align	2, 0
	.type	 Task_UnionRoomListen,function
	.thumb_func
Task_UnionRoomListen:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	GetHostRfuGameData
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x54
	bne	.L130	@cond_branch
	bl	RfuGetStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L130	@cond_branch
	ldr	r0, .L145
	ldrb	r0, [r0]
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	mov	r0, #0x0
	mov	r1, #0x0
	bl	RfuSetStatus
.L130:
	ldr	r0, .L145+0x4
	ldrh	r2, [r0, #0x4]
	add	r6, r0, #0
	cmp	r2, #0x12
	bls	.LCB909
	b	.L131	@long jump
.LCB909:
	lsl	r0, r2, #0x2
	ldr	r1, .L145+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L146:
	.align	2, 0
.L145:
	.word	lman
	.word	gRfu
	.word	.L143
	.align	2, 0
	.align	2, 0
.L143:
	.word	.L132
	.word	.L131
	.word	.L131
	.word	.L131
	.word	.L131
	.word	.L131
	.word	.L131
	.word	.L131
	.word	.L131
	.word	.L131
	.word	.L131
	.word	.L131
	.word	.L131
	.word	.L136
	.word	.L140
	.word	.L131
	.word	.L142
	.word	.L134
	.word	.L131
.L132:
	ldr	r0, .L147
	bl	rfu_LMAN_initializeRFU
	ldr	r0, .L147+0x4
	mov	r2, #0x1
	strh	r2, [r0, #0x4]
	ldr	r1, .L147+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0xa]
	b	.L131
.L148:
	.align	2, 0
.L147:
	.word	sRfuReqConfig
	.word	gRfu
	.word	gTasks
.L134:
	ldr	r3, .L149
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	rfu_LMAN_establishConnection
	ldr	r0, .L149+0x4
	bl	rfu_LMAN_setMSCCallback
	ldr	r1, .L149+0x8
	mov	r0, #0x12
	strh	r0, [r1, #0x4]
	b	.L131
.L150:
	.align	2, 0
.L149:
	.word	sAcceptedSerialNos
	.word	MscCallback_Child
	.word	gRfu
.L136:
	ldr	r1, .L151
	add	r0, r6, r1
	ldrb	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r1
	lsr	r0, r0, #0x18
	add	r1, r6, #0
	add	r1, r1, #0x4c
	mov	r2, #0xe
	bl	rfu_UNI_setSendData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L131	@cond_branch
	strb	r0, [r6, #0xc]
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r0, .L151+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x16
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L138	@cond_branch
	ldr	r0, .L151+0x8
	mov	r1, #0x1
	bl	CreateTask
	b	.L131
.L152:
	.align	2, 0
.L151:
	.word	0x8f6
	.word	gTasks
	.word	Task_PlayerExchangeChat
.L138:
	ldr	r0, .L153
	mov	r1, #0x5
	bl	CreateTask
	b	.L131
.L154:
	.align	2, 0
.L153:
	.word	Task_PlayerExchange
.L140:
	mov	r0, #0x0
	bl	rfu_LMAN_stopManager
	ldr	r1, .L155
	mov	r0, #0xf
	strh	r0, [r1, #0x4]
	b	.L131
.L156:
	.align	2, 0
.L155:
	.word	gRfu
.L142:
	ldr	r0, .L157
	add	r1, r6, r0
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L157+0x4
	bl	rfu_LMAN_setMSCCallback
	mov	r0, #0x1
	bl	UpdateGameData_GroupLockedIn
	bl	InitChildRecvBuffers
	bl	InitParentSendData
	mov	r0, #0x14
	strh	r0, [r6, #0x4]
	ldr	r1, .L157+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0xa]
	mov	r4, #0x1
	strb	r4, [r6, #0xc]
	ldr	r0, .L157+0xc
	mov	r1, #0x5
	bl	CreateTask
	mov	r1, #0x9a
	lsl	r1, r1, #0x4
	add	r0, r6, r1
	strb	r4, [r0]
	add	r0, r5, #0
	bl	DestroyTask
.L131:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L158:
	.align	2, 0
.L157:
	.word	0x993
	.word	MSCCallback_Parent
	.word	gTasks
	.word	Task_PlayerExchange
.Lfe12:
	.size	 Task_UnionRoomListen,.Lfe12-Task_UnionRoomListen
	.align	2, 0
	.globl	LinkRfu_CreateConnectionAsParent
	.type	 LinkRfu_CreateConnectionAsParent,function
	.thumb_func
LinkRfu_CreateConnectionAsParent:
	push	{lr}
	ldr	r3, .L160
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	rfu_LMAN_establishConnection
	pop	{r0}
	bx	r0
.L161:
	.align	2, 0
.L160:
	.word	sAcceptedSerialNos
.Lfe13:
	.size	 LinkRfu_CreateConnectionAsParent,.Lfe13-LinkRfu_CreateConnectionAsParent
	.align	2, 0
	.globl	LinkRfu_StopManagerBeforeEnteringChat
	.type	 LinkRfu_StopManagerBeforeEnteringChat,function
	.thumb_func
LinkRfu_StopManagerBeforeEnteringChat:
	push	{lr}
	mov	r0, #0x0
	bl	rfu_LMAN_stopManager
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 LinkRfu_StopManagerBeforeEnteringChat,.Lfe14-LinkRfu_StopManagerBeforeEnteringChat
	.align	2, 0
	.type	 MscCallback_Child,function
	.thumb_func
MscCallback_Child:
	push	{r4, lr}
	ldr	r0, .L170
	mov	r2, #0x0
	mov	r1, #0xd
	add	r0, r0, #0x59
.L167:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L167	@cond_branch
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	ldr	r1, .L170+0x4
	ldr	r3, .L170
	ldr	r0, .L170+0x8
	add	r4, r3, r0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r2, .L170+0xc
	add	r1, r3, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r1, #0x92
	lsl	r1, r1, #0x1
	add	r0, r3, r1
	ldr	r2, .L170+0x10
	add	r1, r3, r2
	bl	RfuRecvQueue_Enqueue
	ldr	r1, .L170+0x14
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	bl	UpdateBackupQueue
	ldrb	r0, [r4]
	bl	rfu_UNI_readySendData
	ldrb	r0, [r4]
	bl	rfu_UNI_clearRecvNewDataFlag
.L169:
	mov	r0, #0x1
	bl	rfu_LMAN_REQ_sendData
	pop	{r4}
	pop	{r0}
	bx	r0
.L171:
	.align	2, 0
.L170:
	.word	gRfu
	.word	gRfuSlotStatusUNI
	.word	0x8f6
	.word	0x988
	.word	0x8f7
	.word	sRfuDebug
.Lfe15:
	.size	 MscCallback_Child,.Lfe15-MscCallback_Child
	.align	2, 0
	.type	 MSCCallback_Parent,function
	.thumb_func
MSCCallback_Parent:
	ldr	r0, .L173
	ldr	r1, .L173+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
	bx	lr
.L174:
	.align	2, 0
.L173:
	.word	gRfu
	.word	0x993
.Lfe16:
	.size	 MSCCallback_Parent,.Lfe16-MSCCallback_Parent
	.align	2, 0
	.globl	LinkRfu_Shutdown
	.type	 LinkRfu_Shutdown,function
	.thumb_func
LinkRfu_Shutdown:
	push	{r4, r5, r6, lr}
	ldr	r0, .L192
	ldrb	r0, [r0]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L175	@cond_branch
	bl	rfu_LMAN_powerDownRFU
	ldr	r4, .L192+0x4
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	bne	.L177	@cond_branch
	ldr	r0, .L192+0x8
	b	.L191
.L193:
	.align	2, 0
.L192:
	.word	gQuestLogState
	.word	gRfu
	.word	Task_ParentSearchForChildren
.L177:
	cmp	r0, #0
	bne	.L180	@cond_branch
	ldr	r0, .L194
.L191:
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L179	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x67
	ldrb	r0, [r0]
	bl	DestroyTask
	bl	ResetLinkRfuGFLayer
	b	.L179
.L195:
	.align	2, 0
.L194:
	.word	Task_ChildSearchForParent
.L180:
	cmp	r0, #0x2
	bne	.L179	@cond_branch
	ldr	r0, .L196
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L179	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x67
	ldrb	r0, [r0]
	bl	DestroyTask
	bl	ResetLinkRfuGFLayer
.L179:
	mov	r5, #0x0
	ldr	r6, .L196+0x4
.L188:
	lsl	r0, r5, #0x2
	add	r0, r0, r6
	ldr	r4, [r0]
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L187	@cond_branch
	add	r0, r4, #0
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L187:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L188	@cond_branch
.L175:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	Task_UnionRoomListen
	.word	sShutdownTasks
.Lfe17:
	.size	 LinkRfu_Shutdown,.Lfe17-LinkRfu_Shutdown
	.align	2, 0
	.type	 CreateTask_ParentSearchForChildren,function
	.thumb_func
CreateTask_ParentSearchForChildren:
	push	{lr}
	ldr	r0, .L200
	ldrb	r0, [r0]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L198	@cond_branch
	ldr	r0, .L200+0x4
	mov	r1, #0x1
	bl	CreateTask
	ldr	r1, .L200+0x8
	add	r1, r1, #0x67
	strb	r0, [r1]
.L198:
	pop	{r0}
	bx	r0
.L201:
	.align	2, 0
.L200:
	.word	gQuestLogState
	.word	Task_ParentSearchForChildren
	.word	gRfu
.Lfe18:
	.size	 CreateTask_ParentSearchForChildren,.Lfe18-CreateTask_ParentSearchForChildren
	.align	2, 0
	.type	 CanTryReconnectParent,function
	.thumb_func
CanTryReconnectParent:
	push	{lr}
	ldr	r1, .L205
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0x7
	bne	.L203	@cond_branch
	ldr	r2, .L205+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L203	@cond_branch
	mov	r0, #0x1
	b	.L204
.L206:
	.align	2, 0
.L205:
	.word	gRfu
	.word	0x985
.L203:
	mov	r0, #0x0
.L204:
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 CanTryReconnectParent,.Lfe19-CanTryReconnectParent
	.align	2, 0
	.type	 TryReconnectParent,function
	.thumb_func
TryReconnectParent:
	push	{r4, lr}
	ldr	r4, .L210
	ldrh	r0, [r4, #0x4]
	cmp	r0, #0x7
	bne	.L208	@cond_branch
	ldr	r0, .L210+0x4
	ldr	r1, [r0]
	ldr	r2, .L210+0x8
	add	r0, r4, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldrh	r0, [r1, #0x14]
	mov	r1, #0xf0
	bl	rfu_LMAN_CHILD_connectParent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L208	@cond_branch
	mov	r0, #0x9
	strh	r0, [r4, #0x4]
	mov	r0, #0x1
	b	.L209
.L211:
	.align	2, 0
.L210:
	.word	gRfu
	.word	gRfuLinkStatus
	.word	0x8f5
.L208:
	mov	r0, #0x0
.L209:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 TryReconnectParent,.Lfe20-TryReconnectParent
	.align	2, 0
	.type	 CreateTask_ChildSearchForParent,function
	.thumb_func
CreateTask_ChildSearchForParent:
	push	{lr}
	ldr	r0, .L214
	ldrb	r0, [r0]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L212	@cond_branch
	ldr	r0, .L214+0x4
	mov	r1, #0x1
	bl	CreateTask
	ldr	r1, .L214+0x8
	add	r1, r1, #0x67
	strb	r0, [r1]
.L212:
	pop	{r0}
	bx	r0
.L215:
	.align	2, 0
.L214:
	.word	gQuestLogState
	.word	Task_ChildSearchForParent
	.word	gRfu
.Lfe21:
	.size	 CreateTask_ChildSearchForParent,.Lfe21-CreateTask_ChildSearchForParent
	.align	2, 0
	.globl	LmanAcceptSlotFlagIsNotZero
	.type	 LmanAcceptSlotFlagIsNotZero,function
	.thumb_func
LmanAcceptSlotFlagIsNotZero:
	push	{lr}
	ldr	r0, .L219
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L217	@cond_branch
	mov	r0, #0x0
	b	.L218
.L220:
	.align	2, 0
.L219:
	.word	lman
.L217:
	mov	r0, #0x1
.L218:
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 LmanAcceptSlotFlagIsNotZero,.Lfe22-LmanAcceptSlotFlagIsNotZero
	.align	2, 0
	.globl	LinkRfu_StopManagerAndFinalizeSlots
	.type	 LinkRfu_StopManagerAndFinalizeSlots,function
	.thumb_func
LinkRfu_StopManagerAndFinalizeSlots:
	ldr	r1, .L222
	mov	r0, #0x4
	strh	r0, [r1, #0x4]
	ldr	r0, .L222+0x4
	ldrb	r0, [r0]
	ldr	r2, .L222+0x8
	add	r1, r1, r2
	strb	r0, [r1]
	bx	lr
.L223:
	.align	2, 0
.L222:
	.word	gRfu
	.word	lman
	.word	0x99f
.Lfe23:
	.size	 LinkRfu_StopManagerAndFinalizeSlots,.Lfe23-LinkRfu_StopManagerAndFinalizeSlots
	.align	2, 0
	.globl	WaitRfuState
	.type	 WaitRfuState,function
	.thumb_func
WaitRfuState:
	push	{lr}
	add	r1, r0, #0
	ldr	r2, .L228
	ldrh	r0, [r2, #0x4]
	cmp	r0, #0x11
	beq	.L226	@cond_branch
	cmp	r1, #0
	beq	.L225	@cond_branch
.L226:
	mov	r0, #0x12
	strh	r0, [r2, #0x4]
	mov	r0, #0x1
	b	.L227
.L229:
	.align	2, 0
.L228:
	.word	gRfu
.L225:
	mov	r0, #0x0
.L227:
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 WaitRfuState,.Lfe24-WaitRfuState
	.align	2, 0
	.globl	StopUnionRoomLinkManager
	.type	 StopUnionRoomLinkManager,function
	.thumb_func
StopUnionRoomLinkManager:
	ldr	r1, .L231
	mov	r0, #0xe
	strh	r0, [r1, #0x4]
	bx	lr
.L232:
	.align	2, 0
.L231:
	.word	gRfu
.Lfe25:
	.size	 StopUnionRoomLinkManager,.Lfe25-StopUnionRoomLinkManager
	.align	2, 0
	.type	 ReadySendDataForSlots,function
	.thumb_func
ReadySendDataForSlots:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0x0
	b	.L234
.L238:
	lsr	r1, r1, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L234:
	cmp	r2, #0x3
	bhi	.L235	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L238	@cond_branch
	add	r0, r2, #0
	bl	rfu_UNI_readySendData
.L235:
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 ReadySendDataForSlots,.Lfe26-ReadySendDataForSlots
	.align	2, 0
	.type	 ReadAllPlayerRecvCmds,function
	.thumb_func
ReadAllPlayerRecvCmds:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	mov	r2, #0x0
	ldr	r7, .L251
	ldr	r0, .L251+0x4
	add	r6, r7, #0
	ldr	r1, .L251+0x8
	add	r5, r0, r1
.L244:
	mov	r3, #0x0
	lsl	r0, r2, #0x3
	lsl	r1, r2, #0x4
	add	r4, r2, #0x1
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r5
	add	r1, r1, r6
.L248:
	ldrh	r0, [r1]
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x1]
	ldrh	r0, [r1]
	strb	r0, [r2]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x6
	ble	.L248	@cond_branch
	add	r2, r4, #0
	cmp	r2, #0x4
	ble	.L244	@cond_branch
	mov	r0, #0x0
	mov	r1, sp
	strh	r0, [r1]
	ldr	r2, .L251+0xc
	mov	r0, sp
	add	r1, r7, #0
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L252:
	.align	2, 0
.L251:
	.word	gRecvCmds
	.word	gRfu
	.word	0x93f
	.word	0x1000028
.Lfe27:
	.size	 ReadAllPlayerRecvCmds,.Lfe27-ReadAllPlayerRecvCmds
	.align	2, 0
	.type	 MoveSendCmdToRecv,function
	.thumb_func
MoveSendCmdToRecv:
	push	{lr}
	ldr	r3, .L264
	ldr	r2, .L264+0x4
	mov	r1, #0x6
.L257:
	ldrh	r0, [r3]
	strh	r0, [r2]
	add	r3, r3, #0x2
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L257	@cond_branch
	ldr	r1, .L264
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0xc
.L262:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L262	@cond_branch
	pop	{r0}
	bx	r0
.L265:
	.align	2, 0
.L264:
	.word	gSendCmd
	.word	gRecvCmds
.Lfe28:
	.size	 MoveSendCmdToRecv,.Lfe28-MoveSendCmdToRecv
	.align	2, 0
	.type	 UpdateBackupQueue,function
	.thumb_func
UpdateBackupQueue:
	push	{r4, r5, lr}
	ldr	r4, .L271
	ldr	r0, .L271+0x4
	add	r5, r4, r0
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L267	@cond_branch
	ldr	r1, .L271+0x8
	add	r0, r4, r1
	add	r1, r4, #0
	add	r1, r1, #0x4c
	bl	RfuBackupQueue_Dequeue
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L271+0xc
	add	r0, r4, r1
	ldrb	r0, [r0]
	add	r1, r0, #0
	cmp	r1, #0
	bne	.L268	@cond_branch
	ldrb	r0, [r5]
	strb	r1, [r5]
.L268:
	cmp	r2, #0
	bne	.L266	@cond_branch
.L267:
	ldr	r5, .L271
	ldr	r1, .L271+0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L266	@cond_branch
	mov	r1, #0xd4
	lsl	r1, r1, #0x3
	add	r0, r5, r1
	add	r4, r5, #0
	add	r4, r4, #0x4c
	add	r1, r4, #0
	bl	RfuSendQueue_Dequeue
	ldr	r1, .L271+0x8
	add	r0, r5, r1
	add	r1, r4, #0
	bl	RfuBackupQueue_Enqueue
.L266:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	gRfu
	.word	0x8f4
	.word	0x8d4
	.word	0x8f2
.Lfe29:
	.size	 UpdateBackupQueue,.Lfe29-UpdateBackupQueue
	.align	2, 0
	.globl	IsRfuRecvQueueEmpty
	.type	 IsRfuRecvQueueEmpty,function
	.thumb_func
IsRfuRecvQueueEmpty:
	push	{r4, lr}
	ldr	r0, .L289
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	bne	.L274	@cond_branch
.L288:
	mov	r0, #0x0
	b	.L286
.L290:
	.align	2, 0
.L289:
	.word	gRfuLinkStatus
.L274:
	mov	r3, #0x0
	ldr	r4, .L291
.L278:
	mov	r2, #0x0
	lsl	r0, r3, #0x4
	add	r1, r0, r4
.L282:
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L288	@cond_branch
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x6
	ble	.L282	@cond_branch
	add	r3, r3, #0x1
	cmp	r3, #0x4
	ble	.L278	@cond_branch
	mov	r0, #0x1
.L286:
	pop	{r4}
	pop	{r1}
	bx	r1
.L292:
	.align	2, 0
.L291:
	.word	gRecvCmds
.Lfe30:
	.size	 IsRfuRecvQueueEmpty,.Lfe30-IsRfuRecvQueueEmpty
	.align	2, 0
	.type	 RfuMain1_Parent,function
	.thumb_func
RfuMain1_Parent:
	push	{r4, r5, r6, lr}
	ldr	r6, .L303
	ldrh	r0, [r6, #0x4]
	cmp	r0, #0x13
	bhi	.L294	@cond_branch
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	mov	r0, #0x0
	bl	rfu_LMAN_REQ_sendData
	b	.L295
.L304:
	.align	2, 0
.L303:
	.word	gRfu
.L294:
	ldr	r0, .L305
	add	r1, r6, r0
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L305+0x4
	add	r1, r6, r0
	ldr	r0, .L305+0x8
	ldr	r0, [r0]
	ldrb	r1, [r1]
	ldrb	r0, [r0, #0x2]
	and	r0, r0, r1
	cmp	r0, r1
	bne	.L295	@cond_branch
	cmp	r0, #0
	beq	.L295	@cond_branch
	ldr	r1, .L305+0xc
	add	r0, r6, r1
	ldrb	r0, [r0]
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L297	@cond_branch
	ldr	r0, .L305+0x10
	add	r4, r6, r0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L298	@cond_branch
	bl	RfuReqDisconnectSlot
	strb	r5, [r4]
	ldr	r1, .L305+0x14
	add	r0, r6, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L299	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x8
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
	add	r0, r4, #0
	bl	RfuSetErrorParams
	b	.L295
.L306:
	.align	2, 0
.L305:
	.word	0x993
	.word	0x99a
	.word	gRfuLinkStatus
	.word	0x994
	.word	0x99b
	.word	0x99c
.L299:
	ldr	r0, .L307
	ldrb	r4, [r0]
	cmp	r4, #0
	bne	.L298	@cond_branch
	bl	LinkRfu_Shutdown
	ldr	r0, .L307+0x4
	strb	r4, [r0]
	b	.L295
.L308:
	.align	2, 0
.L307:
	.word	lman
	.word	gReceivedRemoteLinkPlayers
.L298:
	bl	ReadAllPlayerRecvCmds
	ldr	r0, .L309
	ldr	r1, .L309+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	rfu_UNI_readySendData
	mov	r0, #0x1
	bl	rfu_LMAN_REQ_sendData
	b	.L301
.L310:
	.align	2, 0
.L309:
	.word	gRfu
	.word	0x992
.L297:
	bl	rfu_REQ_PARENT_resumeRetransmitAndChange
.L301:
	ldr	r1, .L311
	mov	r0, #0x1
	strb	r0, [r1, #0xe]
.L295:
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L312:
	.align	2, 0
.L311:
	.word	gRfu
.Lfe31:
	.size	 RfuMain1_Parent,.Lfe31-RfuMain1_Parent
	.align	2, 0
	.type	 RfuMain2_Parent,function
	.thumb_func
RfuMain2_Parent:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L348
	ldrh	r1, [r0, #0x4]
	add	r6, r0, #0
	cmp	r1, #0x13
	bhi	.LCB2162
	b	.L314	@long jump
.LCB2162:
	ldrb	r0, [r6, #0xe]
	cmp	r0, #0x1
	beq	.LCB2167
	b	.L314	@long jump
.LCB2167:
	bl	rfu_waitREQComplete
	ldr	r0, .L348+0x4
	add	r2, r6, r0
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L316	@cond_branch
	add	r1, r6, #0
	add	r1, r1, #0xee
.L317:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.LCB2188
	b	.L347	@long jump
.LCB2188:
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L317	@cond_branch
.L316:
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	ldr	r2, .L348+0x8
	ldr	r4, .L348
	ldr	r1, .L348+0xc
	add	r0, r4, r1
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r0]
	and	r1, r1, r0
	cmp	r1, r0
	beq	.LCB2214
	b	.L320	@long jump
.LCB2214:
	ldr	r6, .L348+0x10
	add	r1, r4, r6
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L348+0x14
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	ldrb	r7, [r2]
	mov	r5, #0x0
.L324:
	mov	r0, #0x1
	and	r0, r0, r7
	lsr	r1, r7, #0x1
	str	r1, [sp, #0x4]
	add	r2, r5, #0x1
	str	r2, [sp]
	cmp	r0, #0
	bne	.LCB2245
	b	.L325	@long jump
.LCB2245:
	ldr	r1, .L348
	lsl	r2, r5, #0x3
	sub	r0, r2, r5
	lsl	r4, r0, #0x1
	add	r0, r1, #0
	add	r0, r0, #0x15
	add	r0, r4, r0
	ldrb	r0, [r0]
	add	r6, r1, #0
	add	r3, r2, #0
	lsl	r1, r5, #0x18
	mov	sl, r1
	cmp	r0, #0
	beq	.L326	@cond_branch
	ldr	r2, .L348+0x18
	add	r0, r6, r2
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L327	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0x14
	add	r0, r4, r0
	ldrb	r2, [r0]
	lsr	r2, r2, #0x5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r2, r0
	beq	.L327	@cond_branch
	ldr	r0, .L348+0x1c
	add	r1, r6, r0
	add	r1, r5, r1
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L326	@cond_branch
	mov	r0, #0x81
	lsl	r0, r0, #0x8
	bl	RfuSetErrorParams
	b	.L326
.L349:
	.align	2, 0
.L348:
	.word	gRfu
	.word	0x993
	.word	lman
	.word	0x99a
	.word	0x994
	.word	sRfuDebug
	.word	0x9a6
	.word	0x9a2
.L327:
	ldr	r2, .L350
	ldr	r6, .L350+0x4
	add	r1, r2, r6
	add	r1, r5, r1
	sub	r3, r3, r5
	lsl	r3, r3, #0x1
	add	r4, r2, #0
	add	r4, r4, #0x14
	add	r2, r3, r4
	ldrb	r0, [r2]
	lsr	r0, r0, #0x5
	strb	r0, [r1]
	ldr	r1, .L350
	sub	r6, r6, #0x4
	add	r0, r1, r6
	add	r0, r5, r0
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r1, [r2]
	mov	r0, #0x1f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L350+0x8
	add	r0, r5, r2
	ldrb	r0, [r0]
	mov	r6, #0x0
	lsl	r1, r5, #0x18
	mov	sl, r1
	lsr	r2, r7, #0x1
	str	r2, [sp, #0x4]
	add	r5, r5, #0x1
	str	r5, [sp]
	ldr	r1, .L350+0xc
	mov	r9, r1
	add	r5, r3, #0
	add	r7, r4, #0
	lsl	r0, r0, #0x4
	mov	r8, r0
	add	r2, r5, #0x1
	mov	ip, r2
.L333:
	lsl	r1, r6, #0x1
	mov	r0, r8
	add	r4, r1, r0
	add	r4, r4, r9
	mov	r2, ip
	add	r3, r1, r2
	add	r3, r3, r7
	ldrb	r2, [r3]
	lsl	r2, r2, #0x8
	add	r1, r1, r5
	add	r1, r1, r7
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strh	r0, [r4]
	mov	r0, #0x0
	strb	r0, [r3]
	strb	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x6
	bls	.L333	@cond_branch
.L326:
	mov	r1, sl
	lsr	r0, r1, #0x18
	bl	rfu_UNI_clearRecvNewDataFlag
.L325:
	ldr	r2, [sp, #0x4]
	lsl	r0, r2, #0x10
	lsr	r7, r0, #0x10
	ldr	r6, [sp]
	lsl	r0, r6, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bhi	.LCB2426
	b	.L324	@long jump
.LCB2426:
	bl	MoveSendCmdToRecv
	mov	r0, #0x0
	bl	RfuHandleReceiveCommand
	bl	CallRfuFunc
	ldr	r4, .L350
	ldr	r1, .L350+0x10
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L343	@cond_branch
	ldr	r2, .L350+0x14
	add	r0, r4, r2
	ldrb	r2, [r0]
	cmp	r2, #0
	bne	.L343	@cond_branch
	ldr	r0, .L350+0x18
	ldrb	r1, [r0, #0xe]
	strb	r2, [r0, #0xe]
	ldr	r6, .L350+0x1c
	add	r0, r4, r6
	ldrb	r1, [r0]
	mov	r0, #0x3
	bl	rfu_clearSlot
	mov	r5, #0x0
	add	r7, r4, #0
	add	r7, r7, #0x14
.L340:
	ldr	r0, .L350+0x10
	add	r6, r4, r0
	ldrb	r0, [r6]
	asr	r0, r0, r5
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L339	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r5, #0x3
	sub	r2, r2, r5
	lsl	r2, r2, #0x1
	add	r2, r2, r7
	mov	r0, #0x10
	mov	r3, #0xe
	bl	rfu_setRecvBuffer
.L339:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bls	.L340	@cond_branch
	sub	r4, r6, #0x3
	ldrb	r0, [r4]
	ldrb	r2, [r6]
	add	r1, r0, #0
	orr	r1, r1, r2
	bl	SetLinkPlayerIdsFromSlots
	ldrb	r1, [r6]
	mov	r2, #0x0
	strb	r1, [r6, #0x4]
	ldrb	r0, [r4]
	orr	r0, r0, r1
	strb	r0, [r4]
	strb	r2, [r6]
	ldrb	r0, [r4]
	add	r1, r6, #0
	sub	r1, r1, #0x5e
	mov	r2, #0x46
	bl	rfu_UNI_setSendData
	ldrb	r0, [r4]
	bl	Rfu_GetIndexOfNewestChild
	add	r1, r6, #0
	sub	r1, r1, #0xb
	strb	r0, [r1]
	ldr	r0, .L350+0x20
	mov	r1, #0x0
	bl	CreateTask
	b	.L343
.L351:
	.align	2, 0
.L350:
	.word	gRfu
	.word	0x9a6
	.word	gRfu+0x996
	.word	gRecvCmds
	.word	0x99d
	.word	0x991
	.word	sRfuDebug
	.word	0x992
	.word	Task_PlayerExchangeUpdate
.L320:
	ldr	r2, .L352
	add	r1, r4, r2
	ldrb	r0, [r1]
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1]
	strb	r2, [r4, #0xe]
.L343:
	ldr	r1, .L352+0x4
	mov	r0, #0x0
	strb	r0, [r1, #0xe]
	add	r6, r1, #0
.L314:
	ldr	r1, .L352
	add	r0, r6, r1
	ldrb	r0, [r0]
	add	r1, r0, #0
	ldr	r0, .L352+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	beq	.L344	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	b	.L346
.L353:
	.align	2, 0
.L352:
	.word	0x994
	.word	gRfu
	.word	gRfuLinkStatus
.L347:
	mov	r0, #0x0
	b	.L346
.L344:
	mov	r0, #0x0
.L346:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 RfuMain2_Parent,.Lfe32-RfuMain2_Parent
	.align	2, 0
	.type	 ChildBuildSendCmd,function
	.thumb_func
ChildBuildSendCmd:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r2, r1, #0
	ldrh	r1, [r4]
	cmp	r1, #0
	beq	.L355	@cond_branch
	ldr	r0, .L367
	mov	r5, #0x81
	lsl	r5, r5, #0x1
	add	r3, r0, r5
	ldrb	r0, [r3]
	lsl	r0, r0, #0x5
	orr	r0, r0, r1
	strh	r0, [r4]
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	strb	r0, [r3]
	add	r3, r4, #0
	mov	r4, #0x6
.L359:
	ldrh	r1, [r3]
	lsr	r0, r1, #0x8
	strb	r0, [r2, #0x1]
	strb	r1, [r2]
	add	r2, r2, #0x2
	add	r3, r3, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L359	@cond_branch
	b	.L361
.L368:
	.align	2, 0
.L367:
	.word	gRfu
.L355:
	mov	r1, #0x0
	add	r0, r2, #0
	add	r0, r0, #0xd
.L365:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r2
	bge	.L365	@cond_branch
.L361:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 ChildBuildSendCmd,.Lfe33-ChildBuildSendCmd
	.align	2, 0
	.type	 RfuMain1_Child,function
	.thumb_func
RfuMain1_Child:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x58
	ldr	r0, .L389
	mov	r1, sp
	bl	RfuRecvQueue_Dequeue
	mov	r1, #0x0
	ldr	r0, .L389+0x4
	mov	ip, r0
.L373:
	mov	r4, #0x0
	lsl	r0, r1, #0x3
	add	r2, r1, #0x1
	mov	r8, r2
	lsl	r6, r1, #0x4
	sub	r0, r0, r1
	lsl	r5, r0, #0x1
.L377:
	lsl	r1, r4, #0x1
	add	r3, r1, r6
	add	r3, r3, ip
	add	r1, r5, r1
	add	r0, r1, #0x1
	add	r0, r0, sp
	ldrb	r2, [r0]
	lsl	r2, r2, #0x8
	mov	r7, sp
	add	r0, r7, r1
	ldrb	r0, [r0]
	orr	r0, r0, r2
	strh	r0, [r3]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bls	.L377	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x4
	bls	.L373	@cond_branch
	mov	r0, #0x0
	bl	RfuHandleReceiveCommand
	ldr	r0, .L389+0x8
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L380	@cond_branch
	ldr	r0, .L389+0xc
	ldr	r2, .L389+0x10
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L380	@cond_branch
	ldr	r0, .L389+0x14
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	orr	r0, r0, r1
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	bl	RfuGetStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L381	@cond_branch
	cmp	r0, #0x6
	beq	.L381	@cond_branch
	cmp	r0, #0x9
	beq	.L381	@cond_branch
	mov	r1, #0x90
	lsl	r1, r1, #0x8
	mov	r0, #0x2
	bl	RfuSetStatus
.L381:
	bl	rfu_clearAllSlot
	ldr	r1, .L389+0x18
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L389+0xc
	mov	r5, #0x0
	str	r5, [r0]
	ldr	r7, .L389+0x10
	add	r6, r0, r7
	ldrb	r0, [r6]
	cmp	r0, #0x1
	bne	.L382	@cond_branch
	mov	r4, #0x90
	lsl	r4, r4, #0x8
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
	add	r0, r4, #0
	bl	RfuSetErrorParams
.L382:
	ldr	r0, .L389+0x8
	strb	r5, [r0, #0x5]
	strb	r5, [r0, #0x4]
	strb	r5, [r6]
.L380:
	ldr	r6, .L389+0xc
	ldr	r0, .L389+0x1c
	add	r2, r6, r0
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L383	@cond_branch
	ldrb	r0, [r2]
	sub	r0, r0, #0x1
	ldrb	r1, [r2]
	strb	r0, [r2]
	bl	CallRfuFunc
	ldr	r5, .L389+0x20
	add	r4, sp, #0x48
	add	r0, r5, #0
	add	r1, r4, #0
	bl	ChildBuildSendCmd
	mov	r1, #0xd4
	lsl	r1, r1, #0x3
	add	r0, r6, r1
	add	r1, r4, #0
	bl	RfuSendQueue_Enqueue
	mov	r1, #0x0
	mov	r2, #0x0
.L387:
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x6
	bls	.L387	@cond_branch
.L383:
	bl	IsRfuRecvQueueEmpty
	add	sp, sp, #0x58
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L390:
	.align	2, 0
.L389:
	.word	gRfu+0x124
	.word	gRecvCmds
	.word	lman
	.word	gRfu
	.word	0x99c
	.word	gRfuLinkStatus
	.word	gReceivedRemoteLinkPlayers
	.word	0x988
	.word	gSendCmd
.Lfe34:
	.size	 RfuMain1_Child,.Lfe34-RfuMain1_Child
	.align	2, 0
	.type	 HandleSendFailure,function
	.thumb_func
HandleSendFailure:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L408
	ldr	r2, [r0, #0x70]
	mov	sl, r2
	mov	r5, #0x0
	add	r2, r0, #0
	add	r2, r2, #0x6e
	ldrh	r3, [r2]
	cmp	r5, r3
	bge	.L393	@cond_branch
	mov	r9, r0
	ldr	r0, .L408+0x4
	mov	r8, r0
.L395:
	mov	r0, #0x1
	and	r0, r0, r1
	lsr	r7, r1, #0x1
	add	r6, r5, #0x1
	cmp	r0, #0
	bne	.L396	@cond_branch
	ldr	r1, .L408+0x8
	add	r0, r1, #0
	add	r1, r5, #0
	orr	r1, r1, r0
	mov	r2, r8
	strh	r1, [r2]
	mov	r4, #0x0
	lsl	r0, r5, #0x1
	ldr	r3, .L408+0xc
	mov	ip, r3
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	mov	r1, sl
	add	r2, r0, r1
	mov	r3, r8
	add	r3, r3, #0x2
.L400:
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strh	r0, [r3]
	add	r2, r2, #0x2
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L400	@cond_branch
	mov	r4, #0x0
	ldr	r2, .L408+0x4
	ldr	r1, .L408+0xc
.L405:
	ldrh	r0, [r2]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x1]
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L405	@cond_branch
	ldr	r0, .L408+0x10
	mov	r1, ip
	bl	RfuSendQueue_Enqueue
	mov	r1, #0x1
	lsl	r1, r1, r5
	mov	r2, r9
	ldr	r0, [r2, #0x78]
	orr	r0, r0, r1
	str	r0, [r2, #0x78]
.L396:
	add	r1, r7, #0
	add	r5, r6, #0
	ldr	r3, .L408+0x14
	ldrh	r3, [r3]
	cmp	r5, r3
	blt	.L395	@cond_branch
.L393:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L409:
	.align	2, 0
.L408:
	.word	gRfu
	.word	sResendBlock16
	.word	-0x7700
	.word	sResendBlock8
	.word	gRfu+0x6a0
	.word	gRfu+0x6e
.Lfe35:
	.size	 HandleSendFailure,.Lfe35-HandleSendFailure
	.align	2, 0
	.globl	Rfu_SetBlockReceivedFlag
	.type	 Rfu_SetBlockReceivedFlag,function
	.thumb_func
Rfu_SetBlockReceivedFlag:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L413
	ldrb	r2, [r0, #0xc]
	cmp	r2, #0x1
	bne	.L411	@cond_branch
	cmp	r1, #0
	beq	.L411	@cond_branch
	add	r0, r0, #0x61
	add	r0, r1, r0
	strb	r2, [r0]
	b	.L412
.L414:
	.align	2, 0
.L413:
	.word	gRfu
.L411:
	add	r0, r0, #0x5c
	add	r0, r1, r0
	mov	r1, #0x1
	strb	r1, [r0]
.L412:
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 Rfu_SetBlockReceivedFlag,.Lfe36-Rfu_SetBlockReceivedFlag
	.align	2, 0
	.globl	Rfu_ResetBlockReceivedFlag
	.type	 Rfu_ResetBlockReceivedFlag,function
	.thumb_func
Rfu_ResetBlockReceivedFlag:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L416
	add	r1, r3, #0
	add	r1, r1, #0x5c
	add	r1, r0, r1
	mov	r2, #0x0
	strb	r2, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	add	r1, r1, #0x92
	strb	r2, [r1]
	bx	lr
.L417:
	.align	2, 0
.L416:
	.word	gRfu
.Lfe37:
	.size	 Rfu_ResetBlockReceivedFlag,.Lfe37-Rfu_ResetBlockReceivedFlag
	.align	2, 0
	.type	 LoadLinkPlayerIds,function
	.thumb_func
LoadLinkPlayerIds:
	push	{r4, r5, lr}
	add	r3, r0, #0
	ldr	r0, .L426
	ldrb	r1, [r0, #0xc]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L419	@cond_branch
	mov	r0, #0x0
	b	.L425
.L427:
	.align	2, 0
.L426:
	.word	gRfu
.L419:
	mov	r2, #0x0
	ldr	r0, .L428
	add	r4, r5, r0
.L423:
	add	r1, r2, r4
	add	r0, r3, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L423	@cond_branch
	ldr	r1, .L428+0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r0, r0, r3
	ldrb	r0, [r0]
.L425:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L429:
	.align	2, 0
.L428:
	.word	0x996
	.word	0x8f6
.Lfe38:
	.size	 LoadLinkPlayerIds,.Lfe38-LoadLinkPlayerIds

	.lcomm	heldKeyCount.123,1
	.align	2, 0
	.type	 SendKeysToRfu,function
	.thumb_func
SendKeysToRfu:
	push	{lr}
	ldr	r0, .L432
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L431	@cond_branch
	ldr	r3, .L432+0x4
	ldrh	r2, [r3]
	cmp	r2, #0
	beq	.L431	@cond_branch
	ldr	r0, .L432+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L431	@cond_branch
	ldr	r1, .L432+0xc
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r0, r0, r2
	strh	r0, [r3]
	mov	r0, #0xbe
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
.L431:
	pop	{r0}
	bx	r0
.L433:
	.align	2, 0
.L432:
	.word	gReceivedRemoteLinkPlayers
	.word	gHeldKeyCodeToSend
	.word	gLinkTransferringData
	.word	heldKeyCount.123
.Lfe39:
	.size	 SendKeysToRfu,.Lfe39-SendKeysToRfu
	.align	2, 0
	.globl	GetHostRfuGameData
	.type	 GetHostRfuGameData,function
	.thumb_func
GetHostRfuGameData:
	ldr	r0, .L435
	bx	lr
.L436:
	.align	2, 0
.L435:
	.word	gHostRfuGameData
.Lfe40:
	.size	 GetHostRfuGameData,.Lfe40-GetHostRfuGameData
	.align	2, 0
	.globl	IsSendingKeysToRfu
	.type	 IsSendingKeysToRfu,function
	.thumb_func
IsSendingKeysToRfu:
	push	{lr}
	mov	r2, #0x0
	ldr	r0, .L439
	ldr	r1, [r0]
	ldr	r0, .L439+0x4
	cmp	r1, r0
	bne	.L438	@cond_branch
	mov	r2, #0x1
.L438:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L440:
	.align	2, 0
.L439:
	.word	gRfu
	.word	SendKeysToRfu
.Lfe41:
	.size	 IsSendingKeysToRfu,.Lfe41-IsSendingKeysToRfu
	.section .rodata
	.align	2, 0
.LC199:
	.ascii	"C:/WORK/POKeFRLG/src/pm_lgfr_ose/source/rfu.c\000"
	.align	2, 0
.LC201:
	.ascii	"Rfu.RfuFunc == NULL\000"
.text
	.align	2, 0
	.globl	StartSendingKeysToRfu
	.type	 StartSendingKeysToRfu,function
	.thumb_func
StartSendingKeysToRfu:
	push	{r4, lr}
	ldr	r4, .L444
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L443	@cond_branch
	ldr	r0, .L444+0x4
	ldr	r1, .L444+0x8
	ldr	r2, .L444+0xc
	mov	r3, #0x1
	bl	AGBAssert
.L443:
	ldr	r0, .L444+0x10
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L445:
	.align	2, 0
.L444:
	.word	gRfu
	.word	.LC199
	.word	0x5c1
	.word	.LC201
	.word	SendKeysToRfu
.Lfe42:
	.size	 StartSendingKeysToRfu,.Lfe42-StartSendingKeysToRfu
	.align	2, 0
	.globl	ClearLinkRfuCallback
	.type	 ClearLinkRfuCallback,function
	.thumb_func
ClearLinkRfuCallback:
	ldr	r1, .L447
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L448:
	.align	2, 0
.L447:
	.word	gRfu
.Lfe43:
	.size	 ClearLinkRfuCallback,.Lfe43-ClearLinkRfuCallback
	.align	2, 0
	.type	 RfuHandleReceiveCommand,function
	.thumb_func
RfuHandleReceiveCommand:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	r8, r0
.L453:
	mov	r1, r8
	lsl	r5, r1, #0x4
	ldr	r2, .L492
	add	r0, r5, r2
	ldrh	r7, [r0]
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	add	r0, r3, #0
	add	r1, r0, #0
	and	r1, r1, r7
	mov	r0, #0x88
	lsl	r0, r0, #0x8
	add	r2, r5, #0
	cmp	r1, r0
	beq	.L459	@cond_branch
	cmp	r1, r0
	bgt	.L484	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	cmp	r1, r0
	bne	.LCB3390
	b	.L472	@long jump
.LCB3390:
	cmp	r1, r0
	bgt	.L485	@cond_branch
	mov	r0, #0xbe
	lsl	r0, r0, #0x7
	cmp	r1, r0
	bne	.LCB3396
	b	.L471	@long jump
.LCB3396:
	b	.L491
.L493:
	.align	2, 0
.L492:
	.word	gRecvCmds
.L485:
	mov	r0, #0xee
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L457	@cond_branch
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L455	@cond_branch
	b	.L491
.L484:
	mov	r0, #0xbe
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB3420
	b	.L481	@long jump
.LCB3420:
	cmp	r1, r0
	bgt	.L486	@cond_branch
	mov	r0, #0x89
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L461	@cond_branch
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB3430
	b	.L470	@long jump
.LCB3430:
	b	.L491
.L486:
	mov	r0, #0xed
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB3437
	b	.L474	@long jump
.LCB3437:
	mov	r0, #0xee
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB3441
	b	.L479	@long jump
.LCB3441:
	b	.L491
.L455:
	ldr	r4, .L494
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	bne	.L457	@cond_branch
	ldr	r0, .L494+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB3458
	b	.L449	@long jump
.LCB3458:
.L457:
	ldr	r0, .L494+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r0, #0
	beq	.LCB3468
	b	.L454	@long jump
.LCB3468:
	ldr	r1, .L494+0xc
	add	r0, r2, r1
	ldrh	r0, [r0]
	ldr	r3, .L494
	strb	r0, [r3, #0xd]
	ldr	r4, .L494+0x10
	add	r0, r2, r4
	bl	LoadLinkPlayerIds
	ldr	r1, .L494+0x14
	strb	r0, [r1]
	b	.L454
.L495:
	.align	2, 0
.L494:
	.word	gRfu
	.word	gReceivedRemoteLinkPlayers
	.word	gRfuLinkStatus
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
	.word	gRfu+0x986
.L459:
	ldr	r2, .L496
	mov	r9, r2
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r7, r0, #0x2
	add	r3, r7, r2
	mov	r4, #0x92
	add	r4, r4, r3
	mov	ip, r4
	ldrb	r4, [r4]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r4, #0
	beq	.LCB3515
	b	.L454	@long jump
.LCB3515:
	add	r0, r3, #0
	add	r0, r0, #0x80
	mov	r2, #0x0
	strh	r4, [r0]
	ldr	r1, .L496+0x4
	add	r0, r5, r1
	ldrh	r0, [r0]
	add	r1, r3, #0
	add	r1, r1, #0x82
	strh	r0, [r1]
	ldr	r1, .L496+0x8
	add	r0, r5, r1
	ldrh	r1, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x91
	strb	r1, [r0]
	mov	r0, r9
	add	r0, r0, #0x88
	add	r0, r7, r0
	str	r4, [r0]
	mov	r0, #0x1
	mov	r3, ip
	strb	r0, [r3]
	mov	r0, r9
	add	r0, r0, #0x5c
	add	r0, r0, r8
	strb	r2, [r0]
	b	.L454
.L497:
	.align	2, 0
.L496:
	.word	gRfu
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
.L461:
	ldr	r4, .L498
	mov	r9, r4
	mov	r0, r8
	lsl	r1, r0, #0x2
	add	r0, r1, r0
	lsl	r4, r0, #0x2
	mov	r3, r9
	add	r2, r4, r3
	add	r0, r2, #0
	add	r0, r0, #0x92
	ldrb	r3, [r0]
	mov	sl, r1
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r3, #0x1
	beq	.LCB3573
	b	.L454	@long jump
.LCB3573:
	mov	r0, #0xff
	and	r0, r0, r7
	add	r2, r2, #0x80
	strh	r0, [r2]
	mov	r1, r9
	add	r1, r1, #0x88
	add	r1, r4, r1
	lsl	r3, r3, r0
	ldr	r0, [r1]
	orr	r0, r0, r3
	str	r0, [r1]
	mov	r4, #0x0
	ldr	r0, .L498+0x4
	mov	r9, r0
	mov	ip, r2
	mov	r1, r8
	lsl	r7, r1, #0x8
	add	r3, r5, #0
.L466:
	mov	r2, ip
	ldrh	r0, [r2]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	add	r1, r1, r9
	add	r2, r4, #0x1
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	ldr	r4, .L498+0x8
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	cmp	r4, #0x5
	bls	.L466	@cond_branch
	ldr	r4, .L498
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x88
	add	r1, r0, r1
	add	r2, r0, r4
	add	r0, r2, #0
	add	r0, r0, #0x82
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	ldr	r3, .L498+0xc
	add	r0, r0, r3
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	beq	.LCB3649
	b	.L454	@long jump
.LCB3649:
	add	r1, r2, #0
	add	r1, r1, #0x92
	mov	r0, #0x2
	strb	r0, [r1]
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	Rfu_SetBlockReceivedFlag
	bl	GetHostRfuGameData
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	beq	.LCB3668
	b	.L454	@long jump
.LCB3668:
	ldr	r0, .L498+0x10
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB3674
	b	.L454	@long jump
.LCB3674:
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	beq	.LCB3679
	b	.L454	@long jump
.LCB3679:
	ldr	r0, .L498+0x4
	bl	ValidateAndReceivePokemonSioInfo
	b	.L454
.L499:
	.align	2, 0
.L498:
	.word	gRfu
	.word	gBlockRecvBuffer
	.word	gRecvCmds
	.word	sAllBlocksReceived
	.word	gReceivedRemoteLinkPlayers
.L470:
	ldr	r2, .L500
	ldr	r3, .L500+0x4
	add	r0, r5, r3
	ldrh	r1, [r0]
	lsl	r1, r1, #0x3
	add	r0, r1, r2
	ldr	r0, [r0]
	add	r2, r2, #0x4
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	Rfu_InitBlockSend
	b	.L491
.L501:
	.align	2, 0
.L500:
	.word	sBlockRequests
	.word	gRecvCmds+0x2
.L471:
	ldr	r1, .L502
	add	r1, r1, r8
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L491
.L503:
	.align	2, 0
.L502:
	.word	gRfu+0xe4
.L472:
	ldr	r2, .L504
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r2, r4
	ldr	r3, .L504+0x4
	add	r1, r5, r3
	ldrh	r0, [r0]
	mov	r6, r8
	add	r6, r6, #0x1
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.LCB3752
	b	.L454	@long jump
.LCB3752:
	add	r0, r2, #0
	add	r0, r0, #0xe9
	add	r0, r0, r8
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L454
.L505:
	.align	2, 0
.L504:
	.word	gRfu
	.word	gRecvCmds+0x2
.L474:
	ldr	r7, .L506
	ldrb	r2, [r7, #0xc]
	cmp	r2, #0
	bne	.L475	@cond_branch
	ldr	r3, .L506+0x4
	ldrb	r0, [r3]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r0, #0
	beq	.L454	@cond_branch
	ldr	r0, .L506+0x8
	add	r4, r5, r0
	ldrh	r1, [r4]
	ldr	r0, .L506+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x2]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L477	@cond_branch
	strb	r2, [r3]
	bl	rfu_LMAN_requestChangeAgbClockMaster
	ldr	r1, .L506+0x10
	add	r0, r5, r1
	ldrh	r1, [r0]
	ldr	r2, .L506+0x14
	add	r0, r7, r2
	strb	r1, [r0]
.L477:
	ldr	r0, .L506+0x18
	add	r0, r0, #0x6
	add	r0, r5, r0
	ldrh	r0, [r0]
	strb	r0, [r7, #0xd]
	ldrh	r0, [r4]
	bl	ClearSelectedLinkPlayerIds
	b	.L454
.L507:
	.align	2, 0
.L506:
	.word	gRfu
	.word	gReceivedRemoteLinkPlayers
	.word	gRecvCmds+0x2
	.word	gRfuLinkStatus
	.word	gRecvCmds+0x4
	.word	0x99c
	.word	gRecvCmds
.L475:
	mov	r0, #0xee
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
	ldr	r1, .L508
	ldr	r3, .L508+0x4
	add	r0, r5, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0x2]
	ldr	r4, .L508+0x8
	add	r0, r5, r4
	ldrh	r0, [r0]
	strh	r0, [r1, #0x4]
	ldr	r0, .L508+0xc
	add	r0, r0, #0x6
	add	r0, r5, r0
	ldrh	r0, [r0]
	strh	r0, [r1, #0x6]
	b	.L491
.L509:
	.align	2, 0
.L508:
	.word	gSendCmd
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
	.word	gRecvCmds
.L479:
	ldr	r4, .L510
	ldrb	r0, [r4, #0xc]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r0, #0x1
	bne	.L452	@cond_branch
	ldr	r0, .L510+0x4
	add	r2, r4, r0
	ldr	r1, .L510+0x8
	add	r3, r5, r1
	ldrb	r1, [r3]
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L510+0xc
	add	r0, r5, r2
	ldrh	r1, [r0]
	ldr	r2, .L510+0x10
	add	r0, r4, r2
	strb	r1, [r0]
	ldrh	r0, [r3]
	bl	ClearSelectedLinkPlayerIds
	b	.L454
.L511:
	.align	2, 0
.L510:
	.word	gRfu
	.word	0x99b
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
	.word	0x99c
.L481:
	ldr	r0, .L512
	mov	r3, r8
	lsl	r1, r3, #0x1
	add	r1, r1, r0
	ldr	r4, .L512+0x4
	add	r0, r5, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
.L491:
	mov	r6, r8
	add	r6, r6, #0x1
.L454:
	ldr	r3, .L512+0x8
	ldrb	r4, [r3, #0xc]
	cmp	r4, #0x1
	bne	.L452	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x61
	mov	r1, r8
	add	r2, r1, r0
	ldrb	r0, [r2]
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L452	@cond_branch
	cmp	r1, #0x4
	bne	.L488	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x5c
	add	r0, r0, r8
	mov	r1, #0x0
	strb	r4, [r0]
	strb	r1, [r2]
	b	.L452
.L513:
	.align	2, 0
.L512:
	.word	gLinkPartnersHeldKeys
	.word	gRecvCmds+0x2
	.word	gRfu
.L488:
	add	r0, r0, #0x1
	strb	r0, [r2]
.L452:
	lsl	r0, r6, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r0, #0x4
	bhi	.LCB3961
	b	.L453	@long jump
.LCB3961:
.L449:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 RfuHandleReceiveCommand,.Lfe44-RfuHandleReceiveCommand
	.align	2, 0
	.type	 AreAllPlayersReadyToReceive,function
	.thumb_func
AreAllPlayersReadyToReceive:
	push	{lr}
	mov	r2, #0x0
	ldr	r0, .L522
	add	r1, r0, #0
	add	r1, r1, #0x92
.L518:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L517	@cond_branch
	mov	r0, #0x0
	b	.L521
.L523:
	.align	2, 0
.L522:
	.word	gRfu
.L517:
	add	r1, r1, #0x14
	add	r2, r2, #0x1
	cmp	r2, #0x4
	ble	.L518	@cond_branch
	mov	r0, #0x1
.L521:
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 AreAllPlayersReadyToReceive,.Lfe45-AreAllPlayersReadyToReceive
	.align	2, 0
	.type	 AreAllPlayersFinishedReceiving,function
	.thumb_func
AreAllPlayersFinishedReceiving:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r2, .L533
	ldrb	r0, [r2, #0xd]
	cmp	r1, r0
	bge	.L526	@cond_branch
	add	r4, r0, #0
	add	r3, r2, #0
	add	r3, r3, #0x92
	add	r2, r2, #0x5c
.L528:
	ldrb	r0, [r3]
	cmp	r0, #0x2
	bne	.L530	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L527	@cond_branch
.L530:
	mov	r0, #0x0
	b	.L532
.L534:
	.align	2, 0
.L533:
	.word	gRfu
.L527:
	add	r3, r3, #0x14
	add	r1, r1, #0x1
	cmp	r1, r4
	blt	.L528	@cond_branch
.L526:
	mov	r0, #0x1
.L532:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 AreAllPlayersFinishedReceiving,.Lfe46-AreAllPlayersFinishedReceiving
	.align	2, 0
	.type	 ResetSendDataManager,function
	.thumb_func
ResetSendDataManager:
	mov	r2, #0x0
	mov	r1, #0x0
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	str	r1, [r0, #0x4]
	str	r1, [r0, #0x8]
	strb	r2, [r0, #0x10]
	strb	r2, [r0, #0x11]
	strb	r2, [r0, #0x12]
	bx	lr
.Lfe47:
	.size	 ResetSendDataManager,.Lfe47-ResetSendDataManager
	.align	2, 0
	.globl	Rfu_GetBlockReceivedStatus
	.type	 Rfu_GetBlockReceivedStatus,function
	.thumb_func
Rfu_GetBlockReceivedStatus:
	push	{r4, lr}
	mov	r2, #0x0
	mov	r1, #0x0
	ldr	r0, .L543
	add	r3, r0, #0
	add	r3, r3, #0x92
	add	r4, r0, #0
	add	r4, r4, #0x5c
.L540:
	ldrb	r0, [r3]
	cmp	r0, #0x2
	bne	.L539	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L539	@cond_branch
	lsl	r0, r0, r1
	orr	r2, r2, r0
	lsl	r0, r2, #0x18
	lsr	r2, r0, #0x18
.L539:
	add	r3, r3, #0x14
	add	r1, r1, #0x1
	cmp	r1, #0x4
	ble	.L540	@cond_branch
	add	r0, r2, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L544:
	.align	2, 0
.L543:
	.word	gRfu
.Lfe48:
	.size	 Rfu_GetBlockReceivedStatus,.Lfe48-Rfu_GetBlockReceivedStatus
	.align	2, 0
	.type	 RfuPrepareSendBuffer,function
	.thumb_func
RfuPrepareSendBuffer:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r5, .L574
	strh	r1, [r5]
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	add	r4, r5, #0
	cmp	r1, r0
	beq	.L551	@cond_branch
	cmp	r1, r0
	bgt	.L570	@cond_branch
	mov	r0, #0xbe
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L558	@cond_branch
	cmp	r1, r0
	bgt	.L571	@cond_branch
	mov	r0, #0xbc
	lsl	r0, r0, #0x6
	cmp	r1, r0
	beq	.L559	@cond_branch
	b	.L546
.L575:
	.align	2, 0
.L574:
	.word	gSendCmd
.L571:
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L558	@cond_branch
	mov	r0, #0xee
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L551	@cond_branch
	b	.L546
.L570:
	mov	r0, #0xbe
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L565	@cond_branch
	cmp	r1, r0
	bgt	.L546	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L547	@cond_branch
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L548	@cond_branch
	b	.L546
.L547:
	ldr	r0, .L576
	add	r1, r0, #0
	add	r1, r1, #0x6e
	ldrh	r1, [r1]
	strh	r1, [r5, #0x2]
	add	r0, r0, #0x7d
	ldrb	r0, [r0]
	add	r0, r0, #0x80
	strh	r0, [r5, #0x4]
	b	.L546
.L577:
	.align	2, 0
.L576:
	.word	gRfu
.L548:
	bl	AreAllPlayersReadyToReceive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L546	@cond_branch
	ldr	r0, .L578
	add	r0, r0, #0x5a
	ldrb	r0, [r0]
	b	.L573
.L579:
	.align	2, 0
.L578:
	.word	gRfu
.L551:
	ldr	r3, .L580
	ldr	r1, .L580+0x4
	add	r0, r3, r1
	ldr	r2, .L580+0x8
	add	r1, r3, r2
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	eor	r0, r0, r2
	ldr	r1, .L580+0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	strb	r0, [r3, #0xd]
	ldrb	r0, [r3, #0xd]
	strh	r0, [r4, #0x2]
	add	r2, r4, #0x4
	mov	r4, #0x0
	ldr	r0, .L580+0x10
	add	r3, r3, r0
.L555:
	add	r1, r2, r4
	add	r0, r4, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L555	@cond_branch
	b	.L546
.L581:
	.align	2, 0
.L580:
	.word	gRfu
	.word	0x99a
	.word	0x99b
	.word	sPlayerBitsToCount
	.word	0x996
.L558:
	ldr	r0, .L582
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r4, #0x2]
	b	.L546
.L583:
	.align	2, 0
.L582:
	.word	gRfu
.L559:
	mov	r4, #0x0
	ldr	r3, .L584
.L563:
	add	r2, r4, #0x1
	lsl	r1, r2, #0x1
	add	r1, r1, r5
	lsl	r0, r4, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	cmp	r4, #0x5
	bls	.L563	@cond_branch
	b	.L546
.L585:
	.align	2, 0
.L584:
	.word	gRfu+0xf2
.L565:
	ldr	r0, .L586
	ldrh	r0, [r0]
.L573:
	strh	r0, [r5, #0x2]
.L546:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L587:
	.align	2, 0
.L586:
	.word	gHeldKeyCodeToSend
.Lfe49:
	.size	 RfuPrepareSendBuffer,.Lfe49-RfuPrepareSendBuffer
	.align	2, 0
	.globl	Rfu_SendPacket
	.type	 Rfu_SendPacket,function
	.thumb_func
Rfu_SendPacket:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L590
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L589	@cond_branch
	bl	RfuHasErrored
	cmp	r0, #0
	bne	.L589	@cond_branch
	ldr	r0, .L590+0x4
	add	r1, r4, #0
	mov	r2, #0xc
	bl	memcpy
	mov	r0, #0xbc
	lsl	r0, r0, #0x6
	bl	RfuPrepareSendBuffer
.L589:
	pop	{r4}
	pop	{r0}
	bx	r0
.L591:
	.align	2, 0
.L590:
	.word	gSendCmd
	.word	gRfu+0xf2
.Lfe50:
	.size	 Rfu_SendPacket,.Lfe50-Rfu_SendPacket
	.section .rodata
	.align	2, 0
.LC256:
	.ascii	"size<=252\000"
.text
	.align	2, 0
	.globl	Rfu_InitBlockSend
	.type	 Rfu_InitBlockSend,function
	.thumb_func
Rfu_InitBlockSend:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	add	r6, r1, #0
	cmp	r6, #0xfc
	bls	.L594	@cond_branch
	ldr	r0, .L605
	ldr	r1, .L605+0x4
	ldr	r2, .L605+0x8
	mov	r3, #0x1
	bl	AGBAssert
.L594:
	ldr	r5, .L605+0xc
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L604	@cond_branch
	ldr	r0, .L605+0x10
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L604	@cond_branch
	mov	r0, #0x7c
	add	r0, r0, r5
	mov	r9, r0
	ldrb	r1, [r0]
	mov	r8, r1
	cmp	r1, #0
	beq	.L597	@cond_branch
	ldr	r1, .L605+0x14
	add	r1, r1, #0x83
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L604:
	mov	r0, #0x0
	b	.L602
.L606:
	.align	2, 0
.L605:
	.word	.LC199
	.word	0x701
	.word	.LC256
	.word	gRfu
	.word	gSendCmd
	.word	sRfuDebug
.L597:
	add	r0, r6, #0
	mov	r1, #0xc
	bl	__umodsi3
	neg	r4, r0
	orr	r4, r4, r0
	lsr	r4, r4, #0x1f
	bl	GetMultiplayerId
	add	r1, r5, #0
	add	r1, r1, #0x7d
	strb	r0, [r1]
	mov	r0, #0x1
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0xc
	bl	__udivsi3
	add	r0, r0, r4
	add	r1, r5, #0
	add	r1, r1, #0x6e
	strh	r0, [r1]
	add	r0, r5, #0
	add	r0, r0, #0x6c
	mov	r1, r8
	strh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	cmp	r6, r0
	bls	.L599	@cond_branch
	str	r7, [r5, #0x70]
	b	.L600
.L599:
	ldr	r4, .L607
	cmp	r7, r4
	beq	.L601	@cond_branch
	add	r0, r4, #0
	add	r1, r7, #0
	add	r2, r6, #0
	bl	memcpy
.L601:
	str	r4, [r5, #0x70]
.L600:
	mov	r0, #0x88
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
	ldr	r0, .L607+0x4
	ldr	r1, .L607+0x8
	str	r1, [r0]
	add	r0, r0, #0x5b
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r0, #0x1
.L602:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L608:
	.align	2, 0
.L607:
	.word	gBlockSendBuffer
	.word	gRfu
	.word	HandleBlockSend
.Lfe51:
	.size	 Rfu_InitBlockSend,.Lfe51-Rfu_InitBlockSend
	.align	2, 0
	.type	 HandleBlockSend,function
	.thumb_func
HandleBlockSend:
	push	{r4, r5, lr}
	ldr	r0, .L616
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L610	@cond_branch
	mov	r5, #0x88
	lsl	r5, r5, #0x8
	add	r0, r5, #0
	bl	RfuPrepareSendBuffer
	ldr	r4, .L616+0x4
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	bne	.L611	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x5b
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bls	.L610	@cond_branch
	b	.L615
.L617:
	.align	2, 0
.L616:
	.word	gSendCmd
	.word	gRfu
.L611:
	bl	GetMultiplayerId
	ldr	r1, .L618
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, r5
	bne	.L610	@cond_branch
.L615:
	ldr	r0, .L618+0x4
	str	r0, [r4]
.L610:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L619:
	.align	2, 0
.L618:
	.word	gRecvCmds
	.word	SendNextBlock
.Lfe52:
	.size	 HandleBlockSend,.Lfe52-HandleBlockSend
	.align	2, 0
	.type	 SendNextBlock,function
	.thumb_func
SendNextBlock:
	push	{r4, r5, r6, lr}
	ldr	r0, .L627
	mov	ip, r0
	ldr	r5, [r0, #0x70]
	ldr	r3, .L627+0x4
	mov	r2, ip
	add	r2, r2, #0x6c
	ldrh	r1, [r2]
	mov	r4, #0x89
	lsl	r4, r4, #0x8
	add	r0, r4, #0
	orr	r0, r0, r1
	strh	r0, [r3]
	mov	r4, #0x0
	add	r6, r2, #0
	add	r3, r3, #0x2
.L624:
	lsl	r2, r4, #0x1
	ldrh	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0]
	orr	r0, r0, r1
	strh	r0, [r3]
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L624	@cond_branch
	mov	r0, ip
	add	r0, r0, #0x6c
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	add	r0, r0, #0x2
	ldrh	r0, [r0]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r0, r1
	bhi	.L626	@cond_branch
	mov	r0, ip
	add	r0, r0, #0x7c
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L627+0x8
	mov	r1, ip
	str	r0, [r1]
.L626:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	gRfu
	.word	gSendCmd
	.word	SendLastBlock
.Lfe53:
	.size	 SendNextBlock,.Lfe53-SendNextBlock
	.align	2, 0
	.type	 SendLastBlock,function
	.thumb_func
SendLastBlock:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r5, .L640
	ldr	r0, [r5, #0x70]
	mov	r8, r0
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0
	bne	.L630	@cond_branch
	ldr	r3, .L640+0x4
	add	r2, r5, #0
	add	r2, r2, #0x6e
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
	ldr	r4, .L640+0x8
	add	r1, r4, #0
	orr	r0, r0, r1
	strh	r0, [r3]
	mov	r4, #0x0
	mov	r9, r5
	ldr	r0, .L640+0xc
	mov	ip, r0
	lsl	r5, r6, #0x4
	add	r7, r2, #0
	add	r3, r3, #0x2
.L634:
	lsl	r2, r4, #0x1
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, r8
	add	r1, r0, #0
	sub	r1, r1, #0xb
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	sub	r0, r0, #0xc
	ldrb	r0, [r0]
	orr	r0, r0, r1
	strh	r0, [r3]
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L634	@cond_branch
	mov	r1, ip
	add	r0, r5, r1
	ldrb	r1, [r0]
	mov	r3, r9
	add	r0, r3, #0
	add	r0, r0, #0x6e
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L639	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x88
	add	r1, r0, r1
	ldr	r2, .L640+0x10
	add	r0, r0, r3
	add	r0, r0, #0x82
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	beq	.L637	@cond_branch
	add	r0, r6, #0
	bl	HandleSendFailure
	ldr	r1, .L640+0x14
	add	r1, r1, #0x64
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L639
.L641:
	.align	2, 0
.L640:
	.word	gRfu
	.word	gSendCmd
	.word	-0x7700
	.word	gRecvCmds
	.word	sAllBlocksReceived
	.word	sRfuDebug
.L637:
	mov	r0, #0x0
	mov	r4, r9
	str	r0, [r4]
	b	.L639
.L630:
	mov	r0, #0x0
	str	r0, [r5]
.L639:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 SendLastBlock,.Lfe54-SendLastBlock
	.align	2, 0
	.globl	Rfu_SendBlockRequest
	.type	 Rfu_SendBlockRequest,function
	.thumb_func
Rfu_SendBlockRequest:
	push	{lr}
	ldr	r1, .L643
	add	r1, r1, #0x5a
	strb	r0, [r1]
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L644:
	.align	2, 0
.L643:
	.word	gRfu
.Lfe55:
	.size	 Rfu_SendBlockRequest,.Lfe55-Rfu_SendBlockRequest
	.align	2, 0
	.type	 RfuShutdownAfterDisconnect,function
	.thumb_func
RfuShutdownAfterDisconnect:
	push	{lr}
	bl	rfu_clearAllSlot
	bl	rfu_LMAN_powerDownRFU
	ldr	r1, .L646
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r2, .L646+0x4
	add	r3, r2, #0
	add	r3, r3, #0xef
	mov	r1, #0x0
	mov	r0, #0x1
	strb	r0, [r3]
	str	r1, [r2]
	pop	{r0}
	bx	r0
.L647:
	.align	2, 0
.L646:
	.word	gReceivedRemoteLinkPlayers
	.word	gRfu
.Lfe56:
	.size	 RfuShutdownAfterDisconnect,.Lfe56-RfuShutdownAfterDisconnect
	.align	2, 0
	.type	 DisconnectRfu,function
	.thumb_func
DisconnectRfu:
	push	{lr}
	ldr	r0, .L649
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	orr	r0, r0, r1
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	bl	RfuShutdownAfterDisconnect
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	gRfuLinkStatus
.Lfe57:
	.size	 DisconnectRfu,.Lfe57-DisconnectRfu
	.align	2, 0
	.type	 TryDisconnectRfu,function
	.thumb_func
TryDisconnectRfu:
	push	{r4, lr}
	ldr	r4, .L654
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	bne	.L652	@cond_branch
	bl	rfu_LMAN_requestChangeAgbClockMaster
	ldr	r0, .L654+0x4
	add	r1, r4, r0
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L653
.L655:
	.align	2, 0
.L654:
	.word	gRfu
	.word	0x99c
.L652:
	ldr	r0, .L656
	str	r0, [r4]
.L653:
	pop	{r4}
	pop	{r0}
	bx	r0
.L657:
	.align	2, 0
.L656:
	.word	DisconnectRfu
.Lfe58:
	.size	 TryDisconnectRfu,.Lfe58-TryDisconnectRfu
	.align	2, 0
	.globl	LinkRfu_FatalError
	.type	 LinkRfu_FatalError,function
	.thumb_func
LinkRfu_FatalError:
	push	{lr}
	bl	rfu_LMAN_requestChangeAgbClockMaster
	ldr	r2, .L659
	ldr	r0, .L659+0x4
	add	r1, r2, r0
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L659+0x8
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	ldrb	r1, [r1, #0x3]
	orr	r0, r0, r1
	ldr	r1, .L659+0xc
	add	r2, r2, r1
	strb	r0, [r2]
	pop	{r0}
	bx	r0
.L660:
	.align	2, 0
.L659:
	.word	gRfu
	.word	0x99c
	.word	gRfuLinkStatus
	.word	0x99b
.Lfe59:
	.size	 LinkRfu_FatalError,.Lfe59-LinkRfu_FatalError
	.align	2, 0
	.type	 WaitAllReadyToCloseLink,function
	.thumb_func
WaitAllReadyToCloseLink:
	push	{r4, r5, lr}
	ldr	r0, .L671
	ldrb	r5, [r0, #0xd]
	mov	r2, #0x0
	mov	r1, #0x0
	add	r3, r0, #0
	add	r4, r3, #0
	add	r4, r4, #0xe4
.L665:
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L664	@cond_branch
	add	r2, r2, #0x1
.L664:
	add	r1, r1, #0x1
	cmp	r1, #0x4
	ble	.L665	@cond_branch
	cmp	r2, r5
	bne	.L668	@cond_branch
	ldr	r2, .L671+0x4
	ldr	r0, [r2]
	ldr	r1, .L671+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r3, #0xc]
	cmp	r0, #0
	bne	.L669	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x3
	strb	r1, [r0]
	bl	TryDisconnectRfu
	b	.L668
.L672:
	.align	2, 0
.L671:
	.word	gRfu
	.word	gBattleTypeFlags
	.word	0xffdf
.L669:
	ldr	r0, .L673
	str	r0, [r3]
.L668:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L674:
	.align	2, 0
.L673:
	.word	TryDisconnectRfu
.Lfe60:
	.size	 WaitAllReadyToCloseLink,.Lfe60-WaitAllReadyToCloseLink
	.align	2, 0
	.type	 SendReadyCloseLink,function
	.thumb_func
SendReadyCloseLink:
	push	{r4, lr}
	ldr	r0, .L677
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L676	@cond_branch
	ldr	r4, .L677+0x4
	mov	r1, #0x9a
	lsl	r1, r1, #0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L676	@cond_branch
	mov	r0, #0xbe
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	ldr	r0, .L677+0x8
	str	r0, [r4]
.L676:
	pop	{r4}
	pop	{r0}
	bx	r0
.L678:
	.align	2, 0
.L677:
	.word	gSendCmd
	.word	gRfu
	.word	WaitAllReadyToCloseLink
.Lfe61:
	.size	 SendReadyCloseLink,.Lfe61-SendReadyCloseLink
	.align	2, 0
	.type	 Task_TryReadyCloseLink,function
	.thumb_func
Task_TryReadyCloseLink:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L681
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L680	@cond_branch
	ldr	r1, .L681+0x4
	add	r0, r2, r1
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L681+0x8
	str	r0, [r2]
	add	r0, r3, #0
	bl	DestroyTask
.L680:
	pop	{r0}
	bx	r0
.L682:
	.align	2, 0
.L681:
	.word	gRfu
	.word	0x991
	.word	SendReadyCloseLink
.Lfe62:
	.size	 Task_TryReadyCloseLink,.Lfe62-Task_TryReadyCloseLink
	.align	2, 0
	.globl	Rfu_SetCloseLinkCallback
	.type	 Rfu_SetCloseLinkCallback,function
	.thumb_func
Rfu_SetCloseLinkCallback:
	push	{r4, lr}
	ldr	r4, .L685
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L684	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x5
	bl	CreateTask
.L684:
	pop	{r4}
	pop	{r0}
	bx	r0
.L686:
	.align	2, 0
.L685:
	.word	Task_TryReadyCloseLink
.Lfe63:
	.size	 Rfu_SetCloseLinkCallback,.Lfe63-Rfu_SetCloseLinkCallback
	.align	2, 0
	.type	 SendReadyExitStandbyUntilAllReady,function
	.thumb_func
SendReadyExitStandbyUntilAllReady:
	push	{r4, r5, lr}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L688	@cond_branch
	ldr	r1, .L702
	ldr	r2, .L702+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L688	@cond_branch
	add	r5, r1, #0
	add	r5, r5, #0xfe
	ldrh	r0, [r5]
	cmp	r0, #0x3c
	bls	.L688	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	strh	r4, [r5]
.L688:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	cmp	r1, r2
	bcs	.L691	@cond_branch
	ldr	r0, .L702
	add	r3, r0, #0
	add	r3, r3, #0xe9
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L691	@cond_branch
.L692:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L691	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L692	@cond_branch
.L691:
	ldr	r4, .L702
	cmp	r1, r2
	bne	.L696	@cond_branch
	mov	r1, #0x0
	add	r3, r4, #0
	add	r3, r3, #0xe9
	mov	r2, #0x0
.L700:
	add	r0, r1, r3
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x4
	bls	.L700	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strh	r1, [r0]
	str	r2, [r4]
.L696:
	add	r1, r4, #0
	add	r1, r1, #0xfe
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L703:
	.align	2, 0
.L702:
	.word	gRfu
	.word	0x69e
.Lfe64:
	.size	 SendReadyExitStandbyUntilAllReady,.Lfe64-SendReadyExitStandbyUntilAllReady
	.align	2, 0
	.type	 LinkLeaderReadyToExitStandby,function
	.thumb_func
LinkLeaderReadyToExitStandby:
	push	{r4, lr}
	ldr	r4, .L706
	ldr	r1, .L706+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L705	@cond_branch
	ldr	r0, .L706+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L705	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	ldr	r0, .L706+0xc
	str	r0, [r4]
.L705:
	pop	{r4}
	pop	{r0}
	bx	r0
.L707:
	.align	2, 0
.L706:
	.word	gRfu
	.word	0x69e
	.word	gSendCmd
	.word	SendReadyExitStandbyUntilAllReady
.Lfe65:
	.size	 LinkLeaderReadyToExitStandby,.Lfe65-LinkLeaderReadyToExitStandby
	.align	2, 0
	.type	 Rfu_LinkStandby,function
	.thumb_func
Rfu_LinkStandby:
	push	{r4, lr}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L709	@cond_branch
	ldr	r4, .L721
	ldr	r1, .L721+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L711	@cond_branch
	ldr	r0, .L721+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L711	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	ldr	r0, .L721+0xc
	b	.L720
.L722:
	.align	2, 0
.L721:
	.word	gRfu
	.word	0x69e
	.word	gSendCmd
	.word	SendReadyExitStandbyUntilAllReady
.L709:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x1
	cmp	r1, r2
	bcs	.L713	@cond_branch
	ldr	r3, .L723
	add	r0, r3, #0
	add	r0, r0, #0xea
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L713	@cond_branch
	add	r3, r3, #0xe9
.L714:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L713	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L714	@cond_branch
.L713:
	cmp	r1, r2
	bne	.L711	@cond_branch
	ldr	r4, .L723
	ldr	r1, .L723+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L711	@cond_branch
	ldr	r0, .L723+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L711	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	ldr	r0, .L723+0xc
.L720:
	str	r0, [r4]
.L711:
	pop	{r4}
	pop	{r0}
	bx	r0
.L724:
	.align	2, 0
.L723:
	.word	gRfu
	.word	0x69e
	.word	gSendCmd
	.word	LinkLeaderReadyToExitStandby
.Lfe66:
	.size	 Rfu_LinkStandby,.Lfe66-Rfu_LinkStandby
	.align	2, 0
	.globl	Rfu_SetLinkStandbyCallback
	.type	 Rfu_SetLinkStandbyCallback,function
	.thumb_func
Rfu_SetLinkStandbyCallback:
	push	{lr}
	ldr	r1, .L727
	ldr	r2, [r1]
	cmp	r2, #0
	bne	.L726	@cond_branch
	ldr	r0, .L727+0x4
	str	r0, [r1]
	add	r0, r1, #0
	add	r0, r0, #0xfe
	strh	r2, [r0]
.L726:
	pop	{r0}
	bx	r0
.L728:
	.align	2, 0
.L727:
	.word	gRfu
	.word	Rfu_LinkStandby
.Lfe67:
	.size	 Rfu_SetLinkStandbyCallback,.Lfe67-Rfu_SetLinkStandbyCallback
	.align	2, 0
	.globl	IsRfuSerialNumberValid
	.type	 IsRfuSerialNumberValid,function
	.thumb_func
IsRfuSerialNumberValid:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r1, .L737
	ldrh	r0, [r1]
	cmp	r0, r3
	beq	.L731	@cond_branch
	ldr	r4, .L737+0x4
	add	r2, r1, #0
.L733:
	ldrh	r0, [r2]
	cmp	r0, r4
	bne	.L732	@cond_branch
	mov	r0, #0x0
	b	.L736
.L738:
	.align	2, 0
.L737:
	.word	sAcceptedSerialNos
	.word	0xffff
.L732:
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L733	@cond_branch
.L731:
	mov	r0, #0x1
.L736:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 IsRfuSerialNumberValid,.Lfe68-IsRfuSerialNumberValid
	.align	2, 0
	.globl	Rfu_SetLinkRecovery
	.type	 Rfu_SetLinkRecovery,function
	.thumb_func
Rfu_SetLinkRecovery:
	push	{lr}
	cmp	r0, #0
	beq	.L740	@cond_branch
	mov	r1, #0x96
	lsl	r1, r1, #0x2
	mov	r0, #0x1
	bl	rfu_LMAN_setLinkRecovery
	mov	r0, #0x0
	b	.L741
.L740:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	rfu_LMAN_setLinkRecovery
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L741:
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 Rfu_SetLinkRecovery,.Lfe69-Rfu_SetLinkRecovery
	.align	2, 0
	.globl	Rfu_StopPartnerSearch
	.type	 Rfu_StopPartnerSearch,function
	.thumb_func
Rfu_StopPartnerSearch:
	push	{lr}
	ldr	r0, .L743
	ldr	r1, .L743+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x0
	bl	rfu_LMAN_stopManager
	pop	{r0}
	bx	r0
.L744:
	.align	2, 0
.L743:
	.word	gRfu
	.word	0x991
.Lfe70:
	.size	 Rfu_StopPartnerSearch,.Lfe70-Rfu_StopPartnerSearch
	.align	2, 0
	.globl	Rfu_GetMultiplayerId
	.type	 Rfu_GetMultiplayerId,function
	.thumb_func
Rfu_GetMultiplayerId:
	push	{lr}
	ldr	r1, .L748
	ldrb	r0, [r1, #0xc]
	cmp	r0, #0x1
	beq	.L746	@cond_branch
	ldr	r2, .L748+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	b	.L747
.L749:
	.align	2, 0
.L748:
	.word	gRfu
	.word	0x986
.L746:
	mov	r0, #0x0
.L747:
	pop	{r1}
	bx	r1
.Lfe71:
	.size	 Rfu_GetMultiplayerId,.Lfe71-Rfu_GetMultiplayerId
	.align	2, 0
	.globl	Rfu_GetLinkPlayerCount
	.type	 Rfu_GetLinkPlayerCount,function
	.thumb_func
Rfu_GetLinkPlayerCount:
	ldr	r0, .L751
	ldrb	r0, [r0, #0xd]
	bx	lr
.L752:
	.align	2, 0
.L751:
	.word	gRfu
.Lfe72:
	.size	 Rfu_GetLinkPlayerCount,.Lfe72-Rfu_GetLinkPlayerCount
	.align	2, 0
	.globl	IsLinkRfuTaskFinished
	.type	 IsLinkRfuTaskFinished,function
	.thumb_func
IsLinkRfuTaskFinished:
	push	{lr}
	mov	r1, #0x0
	ldr	r0, .L755
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L754	@cond_branch
	mov	r1, #0x1
.L754:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L756:
	.align	2, 0
.L755:
	.word	gRfu
.Lfe73:
	.size	 IsLinkRfuTaskFinished,.Lfe73-IsLinkRfuTaskFinished
	.align	2, 0
	.type	 CallRfuFunc,function
	.thumb_func
CallRfuFunc:
	push	{lr}
	ldr	r0, .L759
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L758	@cond_branch
	bl	_call_via_r0
.L758:
	pop	{r0}
	bx	r0
.L760:
	.align	2, 0
.L759:
	.word	gRfu
.Lfe74:
	.size	 CallRfuFunc,.Lfe74-CallRfuFunc
	.align	2, 0
	.type	 CheckForLeavingGroupMembers,function
	.thumb_func
CheckForLeavingGroupMembers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r7, #0x0
	mov	r5, #0x0
	ldr	r6, .L773
	ldr	r0, .L773+0x4
	add	r0, r0, r6
	mov	r8, r0
.L765:
	ldr	r1, .L773+0x8
	add	r0, r6, r1
	add	r4, r5, r0
	ldrb	r0, [r4]
	sub	r0, r0, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L764	@cond_branch
	ldr	r1, .L773+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x46
	beq	.L768	@cond_branch
	cmp	r0, #0x48
	bne	.L767	@cond_branch
.L768:
	ldr	r2, .L773+0x10
	add	r0, r6, r2
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0x8
	bne	.L764	@cond_branch
	mov	r0, #0x9
	strb	r0, [r4]
	mov	r0, #0xa
	strb	r0, [r1]
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x8
	bl	rfu_clearSlot
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r5
	lsr	r0, r0, #0x18
	mov	r1, #0x8
	add	r2, r4, #0
	mov	r3, #0x1
	bl	rfu_NI_setSendData
	mov	r7, #0x1
	b	.L764
.L774:
	.align	2, 0
.L773:
	.word	gRfu
	.word	0x8f6
	.word	0x989
	.word	gRfuSlotStatusNI
	.word	0x98d
.L767:
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x47
	bne	.L764	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x8
	bl	rfu_clearSlot
.L764:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L765	@cond_branch
	add	r0, r7, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe75:
	.size	 CheckForLeavingGroupMembers,.Lfe75-CheckForLeavingGroupMembers
	.align	2, 0
	.globl	RfuTryDisconnectLeavingChildren
	.type	 RfuTryDisconnectLeavingChildren,function
	.thumb_func
RfuTryDisconnectLeavingChildren:
	push	{r4, r5, r6, lr}
	mov	r3, #0x0
	mov	r1, #0x0
	ldr	r5, .L790
	mov	r6, #0x1
	mov	r4, #0x0
.L779:
	add	r2, r1, r5
	ldrb	r0, [r2]
	cmp	r0, #0xb
	bne	.L778	@cond_branch
	add	r0, r6, #0
	lsl	r0, r0, r1
	orr	r3, r3, r0
	lsl	r0, r3, #0x18
	lsr	r3, r0, #0x18
	strb	r4, [r2]
.L778:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L779	@cond_branch
	cmp	r3, #0
	beq	.L782	@cond_branch
	add	r0, r3, #0
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L782:
	mov	r1, #0x0
	ldr	r2, .L790
.L786:
	add	r0, r1, r2
	ldrb	r0, [r0]
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L785	@cond_branch
	mov	r0, #0x1
	b	.L789
.L791:
	.align	2, 0
.L790:
	.word	gRfu+0x98d
.L785:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L786	@cond_branch
	mov	r0, #0x0
.L789:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 RfuTryDisconnectLeavingChildren,.Lfe76-RfuTryDisconnectLeavingChildren
	.align	2, 0
	.globl	HasTrainerLeftPartnersList
	.type	 HasTrainerLeftPartnersList,function
	.thumb_func
HasTrainerLeftPartnersList:
	push	{lr}
	add	r2, r0, #0
	add	r0, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r1, r2, #0
	bl	GetPartnerIndexByNameAndTrainerID
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L794	@cond_branch
	ldr	r0, .L796
	ldr	r2, .L796+0x4
	add	r0, r0, r2
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0x9
	beq	.L794	@cond_branch
	mov	r0, #0x0
	b	.L795
.L797:
	.align	2, 0
.L796:
	.word	gRfu
	.word	0x989
.L794:
	mov	r0, #0x1
.L795:
	pop	{r1}
	bx	r1
.Lfe77:
	.size	 HasTrainerLeftPartnersList,.Lfe77-HasTrainerLeftPartnersList
	.align	2, 0
	.globl	SendRfuStatusToPartner
	.type	 SendRfuStatusToPartner,function
	.thumb_func
SendRfuStatusToPartner:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r0, r2, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	GetPartnerIndexByNameAndTrainerID
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L799
	ldr	r0, .L799+0x4
	add	r5, r5, r0
	add	r5, r4, r5
	strb	r6, [r5]
	mov	r0, #0x4
	add	r1, r4, #0
	bl	rfu_clearSlot
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r4
	lsr	r0, r0, #0x18
	mov	r1, #0x8
	add	r2, r5, #0
	mov	r3, #0x1
	bl	rfu_NI_setSendData
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L800:
	.align	2, 0
.L799:
	.word	gRfu
	.word	0x989
.Lfe78:
	.size	 SendRfuStatusToPartner,.Lfe78-SendRfuStatusToPartner
	.align	2, 0
	.globl	SendLeaveGroupNotice
	.type	 SendLeaveGroupNotice,function
	.thumb_func
SendLeaveGroupNotice:
	push	{r4, r5, lr}
	ldr	r4, .L802
	ldr	r0, .L802+0x4
	add	r5, r4, r0
	mov	r0, #0x8
	strb	r0, [r5]
	ldr	r0, .L802+0x8
	add	r4, r4, r0
	ldrb	r1, [r4]
	mov	r0, #0x4
	bl	rfu_clearSlot
	ldrb	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r1
	lsr	r0, r0, #0x18
	mov	r1, #0x8
	add	r2, r5, #0
	mov	r3, #0x1
	bl	rfu_NI_setSendData
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L803:
	.align	2, 0
.L802:
	.word	gRfu
	.word	0x93d
	.word	0x8f6
.Lfe79:
	.size	 SendLeaveGroupNotice,.Lfe79-SendLeaveGroupNotice
	.align	2, 0
	.globl	WaitSendRfuStatusToPartner
	.type	 WaitSendRfuStatusToPartner,function
	.thumb_func
WaitSendRfuStatusToPartner:
	push	{lr}
	add	r2, r0, #0
	add	r0, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r1, r2, #0
	bl	GetPartnerIndexByNameAndTrainerID
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L805	@cond_branch
	mov	r0, #0x2
	b	.L807
.L805:
	ldr	r1, .L808
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L806	@cond_branch
	mov	r0, #0x0
	b	.L807
.L809:
	.align	2, 0
.L808:
	.word	gRfuSlotStatusNI
.L806:
	mov	r0, #0x1
.L807:
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 WaitSendRfuStatusToPartner,.Lfe80-WaitSendRfuStatusToPartner
	.align	2, 0
	.type	 UpdateChildStatuses,function
	.thumb_func
UpdateChildStatuses:
	push	{r4, r5, lr}
	bl	CheckForLeavingGroupMembers
	mov	r4, #0x0
	ldr	r0, .L818
	ldr	r1, .L818+0x4
	add	r5, r0, r1
.L814:
	ldr	r1, .L818+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0]
	sub	r0, r0, #0x26
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L813	@cond_branch
	add	r1, r4, r5
	ldrb	r0, [r1]
	cmp	r0, #0xa
	bne	.L816	@cond_branch
	mov	r0, #0xb
	strb	r0, [r1]
.L816:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x4
	bl	rfu_clearSlot
.L813:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L814	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L819:
	.align	2, 0
.L818:
	.word	gRfu
	.word	0x98d
	.word	gRfuSlotStatusNI
.Lfe81:
	.size	 UpdateChildStatuses,.Lfe81-UpdateChildStatuses
	.align	2, 0
	.type	 GetJoinGroupStatus,function
	.thumb_func
GetJoinGroupStatus:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r1, .L828
	ldr	r2, .L828+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.L821	@cond_branch
	ldr	r2, .L828+0x8
	ldr	r0, .L828+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x26
	beq	.L823	@cond_branch
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x27
	bne	.L821	@cond_branch
.L823:
	ldrb	r1, [r1]
	mov	r0, #0x4
	bl	rfu_clearSlot
.L821:
	ldr	r2, .L828+0x8
	ldr	r5, .L828
	ldr	r0, .L828+0xc
	add	r1, r5, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x46
	beq	.L825	@cond_branch
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x48
	bne	.L824	@cond_branch
.L825:
	ldrb	r1, [r1]
	mov	r0, #0x8
	bl	rfu_clearSlot
	ldr	r2, .L828+0x10
	add	r4, r5, r2
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	RfuSetStatus
	ldrb	r4, [r4]
	b	.L826
.L829:
	.align	2, 0
.L828:
	.word	gRfu
	.word	0x93d
	.word	gRfuSlotStatusNI
	.word	0x8f6
	.word	0x93e
.L824:
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x47
	bne	.L826	@cond_branch
	ldrb	r1, [r1]
	mov	r0, #0x8
	bl	rfu_clearSlot
	mov	r4, #0x6
.L826:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe82:
	.size	 GetJoinGroupStatus,.Lfe82-GetJoinGroupStatus
	.align	2, 0
	.type	 Task_PlayerExchange,function
	.thumb_func
Task_PlayerExchange:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L870
	add	r0, r5, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L831	@cond_branch
	mov	r0, #0x9a
	lsl	r0, r0, #0x4
	add	r1, r5, r0
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r6, #0
	bl	DestroyTask
.L831:
	ldr	r2, .L870+0x4
	lsl	r1, r6, #0x2
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	add	r7, r1, #0
	cmp	r0, #0x3
	beq	.L844	@cond_branch
	cmp	r0, #0x3
	bgt	.L866	@cond_branch
	cmp	r0, #0x1
	beq	.L835	@cond_branch
	cmp	r0, #0x1
	bgt	.L842	@cond_branch
	cmp	r0, #0
	beq	.L833	@cond_branch
	b	.L832
.L871:
	.align	2, 0
.L870:
	.word	gRfu
	.word	gTasks
.L866:
	cmp	r0, #0x5
	beq	.L850	@cond_branch
	cmp	r0, #0x5
	blt	.L848	@cond_branch
	cmp	r0, #0x6
	beq	.L856	@cond_branch
	cmp	r0, #0x65
	beq	.L840	@cond_branch
	b	.L832
.L833:
	bl	AreAllPlayersReadyToReceive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB6383
	b	.L832	@long jump
.LCB6383:
	bl	ResetBlockReceivedFlags
	bl	LocalLinkPlayerToBlock
	b	.L867
.L835:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x1
	bne	.L868	@cond_branch
	ldr	r0, .L872
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L837	@cond_branch
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	b	.L838
.L873:
	.align	2, 0
.L872:
	.word	gReceivedRemoteLinkPlayers
.L837:
	mov	r0, #0xee
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
.L838:
	ldr	r0, .L874
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x65
	strh	r0, [r1, #0x8]
	b	.L832
.L875:
	.align	2, 0
.L874:
	.word	gTasks
.L840:
	ldr	r0, .L876
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L832	@cond_branch
.L868:
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	b	.L832
.L877:
	.align	2, 0
.L876:
	.word	gSendCmd
.L842:
	ldrb	r0, [r5, #0xd]
	b	.L869
.L844:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x1
	bne	.L867	@cond_branch
	bl	AreAllPlayersReadyToReceive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L832	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x5a
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
	b	.L867
.L848:
	bl	AreAllPlayersFinishedReceiving
	lsl	r0, r0, #0x18
.L869:
	cmp	r0, #0
	beq	.L832	@cond_branch
.L867:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L832
.L850:
	mov	r4, #0x0
	ldrb	r0, [r5, #0xd]
	cmp	r4, r0
	bge	.L852	@cond_branch
.L854:
	add	r0, r4, #0
	bl	LinkPlayerFromBlock
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	Rfu_ResetBlockReceivedFlag
	add	r4, r4, #0x1
	ldrb	r2, [r5, #0xd]
	cmp	r4, r2
	blt	.L854	@cond_branch
.L852:
	ldr	r0, .L878
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L832
.L879:
	.align	2, 0
.L878:
	.word	gTasks
.L856:
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r1, .L880
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x9a
	lsl	r0, r0, #0x4
	add	r1, r5, r0
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r1, #0x96
	lsl	r1, r1, #0x2
	mov	r0, #0x1
	bl	rfu_LMAN_setLinkRecovery
	ldr	r2, .L880+0x4
	add	r1, r5, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L832	@cond_branch
	mov	r4, #0x0
	add	r2, r1, #0
	mov	r3, #0x1
	ldr	r0, .L880+0x8
	add	r5, r5, r0
.L861:
	ldrb	r0, [r2]
	asr	r0, r0, r4
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L860	@cond_branch
	add	r0, r3, #0
	lsl	r0, r0, r4
	strb	r0, [r5]
	ldrb	r1, [r2]
	eor	r0, r0, r1
	strb	r0, [r2]
.L860:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L861	@cond_branch
.L832:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L881:
	.align	2, 0
.L880:
	.word	gReceivedRemoteLinkPlayers
	.word	0x99e
	.word	0x99d
.Lfe83:
	.size	 Task_PlayerExchange,.Lfe83-Task_PlayerExchange
	.align	2, 0
	.type	 ClearSelectedLinkPlayerIds,function
	.thumb_func
ClearSelectedLinkPlayerIds:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, #0x0
	mov	r5, #0x1
	ldr	r4, .L889
	mov	r3, #0x0
.L886:
	add	r0, r2, #0
	asr	r0, r0, r1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L885	@cond_branch
	add	r0, r1, r4
	strb	r3, [r0]
.L885:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L886	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L890:
	.align	2, 0
.L889:
	.word	gRfu+0x996
.Lfe84:
	.size	 ClearSelectedLinkPlayerIds,.Lfe84-ClearSelectedLinkPlayerIds
	.align	2, 0
	.type	 ReceiveRfuLinkPlayers,function
	.thumb_func
ReceiveRfuLinkPlayers:
	push	{r4, r5, r6, r7, lr}
	add	r2, r0, #0
	ldr	r1, .L902
	ldrb	r0, [r2, #0xf]
	strb	r0, [r1, #0xd]
	mov	r4, #0x0
	ldr	r0, .L902+0x4
	add	r5, r1, r0
	add	r3, r2, #0
	add	r3, r3, #0x10
.L895:
	add	r0, r4, r5
	add	r1, r3, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L895	@cond_branch
	add	r6, r2, #0
	ldr	r5, .L902+0x8
	mov	r4, #0x4
.L900:
	add	r0, r5, #0
	add	r1, r6, #0
	add	r1, r1, #0x14
	ldmia	r1!, {r2, r3, r7}
	stmia	r0!, {r2, r3, r7}
	ldmia	r1!, {r2, r3, r7}
	stmia	r0!, {r2, r3, r7}
	ldr	r1, [r1]
	str	r1, [r0]
	add	r0, r5, #0
	bl	ConvertLinkPlayerName
	add	r6, r6, #0x1c
	add	r5, r5, #0x1c
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L900	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L903:
	.align	2, 0
.L902:
	.word	gRfu
	.word	0x996
	.word	gLinkPlayers
.Lfe85:
	.size	 ReceiveRfuLinkPlayers,.Lfe85-ReceiveRfuLinkPlayers
	.section .rodata
	.align	2, 0
	.type	 sASCII_PokemonSioInfo,object
	.size	 sASCII_PokemonSioInfo,15
sASCII_PokemonSioInfo:
	.ascii	"PokemonSioInfo\000"
	.type	 sText_Akito,object
sText_Akito:
	.byte	0x0
	.byte	0x1
	.byte	0x7
	.byte	0x14
	.byte	0xff
	.size	 sText_Akito,5
	.align	2, 0
	.type	 sASCII_LinkLossDisconnect,object
	.size	 sASCII_LinkLossDisconnect,22
sASCII_LinkLossDisconnect:
	.ascii	"LINK LOSS DISCONNECT!\000"
	.align	2, 0
	.type	 sASCII_LinkLossRecoveryNow,object
	.size	 sASCII_LinkLossRecoveryNow,23
sASCII_LinkLossRecoveryNow:
	.ascii	"LINK LOSS RECOVERY NOW\000"
	.align	2, 0
	.type	 sASCII_30Spaces,object
sASCII_30Spaces:
	.ascii	"                              \000"
	.type	 sASCII_15Spaces,object
sASCII_15Spaces:
	.ascii	"               \000"
	.type	 sASCII_8Spaces,object
sASCII_8Spaces:
	.ascii	"        \000"
	.align	2, 0
	.type	 sASCII_Space,object
sASCII_Space:
	.ascii	" \000"
	.type	 sASCII_Asterisk,object
sASCII_Asterisk:
	.ascii	"*\000"
	.align	2, 0
	.type	 sASCII_NowSlot,object
	.size	 sASCII_NowSlot,8
sASCII_NowSlot:
	.ascii	"NOWSLOT\000"
	.type	 sASCII_ClockCmds,object
sASCII_ClockCmds:
	.ascii	"           \000"
	.ascii	"CLOCK DRIFT\000"
	.ascii	"BUSY SEND  \000"
	.ascii	"CMD REJECT \000"
	.ascii	"CLOCK SLAVE\000"
	.size	 sASCII_ClockCmds,60
	.type	 sASCII_ChildParentSearch,object
sASCII_ChildParentSearch:
	.ascii	"CHILD \000"
	.space	1
	.ascii	"PARENT\000"
	.space	1
	.ascii	"SEARCH\000"
	.space	1
	.size	 sASCII_ChildParentSearch,24
.text
	.align	2, 0
	.type	 ValidateAndReceivePokemonSioInfo,function
	.thumb_func
ValidateAndReceivePokemonSioInfo:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r0, .L906
	add	r1, r4, #0
	bl	strcmp
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L905	@cond_branch
	add	r0, r4, #0
	bl	ReceiveRfuLinkPlayers
	mov	r0, sp
	strh	r5, [r0]
	ldr	r2, .L906+0x4
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBlockReceivedFlag
.L905:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L907:
	.align	2, 0
.L906:
	.word	sASCII_PokemonSioInfo
	.word	0x100007e
.Lfe86:
	.size	 ValidateAndReceivePokemonSioInfo,.Lfe86-ValidateAndReceivePokemonSioInfo
	.align	2, 0
	.type	 Task_PlayerExchangeUpdate,function
	.thumb_func
Task_PlayerExchangeUpdate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L944
	ldr	r2, .L944+0x4
	ldr	r1, .L944+0x8
	add	r0, r3, r1
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r2, .L944+0xc
	add	r0, r3, r2
	ldrb	r1, [r1]
	add	r0, r0, r1
	ldrb	r4, [r0]
	add	r0, r3, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L909	@cond_branch
	mov	r5, #0x9a
	lsl	r5, r5, #0x4
	add	r1, r3, r5
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r6, #0
	bl	DestroyTask
.L909:
	ldr	r0, .L944+0x10
	lsl	r2, r6, #0x2
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0x8
	ldrsh	r1, [r1, r3]
	add	r3, r0, #0
	add	r7, r2, #0
	cmp	r1, #0x5
	bls	.LCB6818
	b	.L910	@long jump
.LCB6818:
	lsl	r0, r1, #0x2
	ldr	r1, .L944+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L945:
	.align	2, 0
.L944:
	.word	gRfu
	.word	sSlotToLinkPlayerTableId
	.word	0x9a1
	.word	0x996
	.word	gTasks
	.word	.L939
	.align	2, 0
	.align	2, 0
.L939:
	.word	.L911
	.word	.L913
	.word	.L915
	.word	.L917
	.word	.L923
	.word	.L930
.L911:
	ldr	r0, .L946
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.LCB6847
	b	.L910	@long jump
.LCB6847:
	add	r0, r4, #0
	bl	ResetBlockReceivedFlag
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	b	.L942
.L947:
	.align	2, 0
.L946:
	.word	gSendCmd
.L913:
	ldr	r0, .L948
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.LCB6870
	b	.L910	@long jump
.LCB6870:
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	b	.L943
.L949:
	.align	2, 0
.L948:
	.word	gSendCmd
.L915:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	asr	r0, r0, r4
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB6893
	b	.L910	@long jump
.LCB6893:
	add	r0, r4, #0
	bl	ResetBlockReceivedFlag
	lsl	r2, r4, #0x8
	ldr	r0, .L950
	add	r2, r2, r0
	ldr	r1, .L950+0x4
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r1, r0, #0
	add	r2, r2, #0x10
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldr	r2, [r2]
	str	r2, [r1]
	bl	ConvertLinkPlayerName
	b	.L942
.L951:
	.align	2, 0
.L950:
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
.L917:
	ldr	r5, .L952
	add	r1, r5, #0
	ldr	r0, .L952+0x4
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldrh	r2, [r0]
	strh	r2, [r1]
	ldrb	r0, [r0, #0x2]
	strb	r0, [r1, #0x2]
	ldr	r1, .L952+0x8
	ldrb	r0, [r1, #0xd]
	strb	r0, [r5, #0xf]
	mov	r2, #0x0
	add	r4, r5, #0
	add	r4, r4, #0x10
	ldr	r0, .L952+0xc
	add	r3, r1, r0
.L921:
	add	r0, r4, r2
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L921	@cond_branch
	ldr	r1, .L952+0x10
	add	r0, r5, #0
	add	r0, r0, #0x14
	mov	r2, #0x8c
	bl	memcpy
	ldr	r0, .L952+0x14
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
.L923:
	ldr	r5, .L952
	ldr	r1, .L952+0x8
	ldrb	r0, [r1, #0xd]
	strb	r0, [r5, #0xf]
	mov	r2, #0x0
	ldr	r3, .L952+0x10
	mov	ip, r3
	add	r4, r5, #0
	add	r4, r4, #0x10
	ldr	r0, .L952+0xc
	add	r3, r1, r0
.L927:
	add	r0, r4, r2
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L927	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x14
	mov	r1, ip
	mov	r2, #0x8c
	bl	memcpy
	ldr	r1, .L952
	mov	r0, #0x0
	mov	r2, #0xa0
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L910	@cond_branch
.L942:
	ldr	r0, .L952+0x14
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L943:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L910
.L953:
	.align	2, 0
.L952:
	.word	gBlockSendBuffer
	.word	sASCII_PokemonSioInfo
	.word	gRfu
	.word	0x996
	.word	gLinkPlayers
	.word	gTasks
.L941:
	add	r0, r3, #0
	lsl	r0, r0, r2
	ldr	r2, .L954
	add	r1, r5, r2
	strb	r0, [r1]
	ldrb	r1, [r4]
	eor	r0, r0, r1
	strb	r0, [r4]
	mov	r4, #0x9a
	lsl	r4, r4, #0x4
	add	r0, r5, r4
	strb	r3, [r0]
	b	.L932
.L955:
	.align	2, 0
.L954:
	.word	0x99d
.L930:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L910	@cond_branch
	bl	GetBlockReceivedStatus
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L910	@cond_branch
	mov	r0, sp
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r1, .L956
	ldr	r2, .L956+0x4
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBlockReceivedFlag
	ldr	r1, .L956+0x8
	mov	r5, #0x9a
	lsl	r5, r5, #0x4
	add	r0, r1, r5
	strb	r4, [r0]
	ldr	r0, .L956+0xc
	add	r3, r1, r0
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L932	@cond_branch
	mov	r2, #0x0
	add	r5, r1, #0
	add	r4, r3, #0
	ldrb	r1, [r4]
	mov	r3, #0x1
.L936:
	add	r0, r1, #0
	asr	r0, r0, r2
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L941	@cond_branch
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L936	@cond_branch
.L932:
	add	r0, r6, #0
	bl	DestroyTask
.L910:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L957:
	.align	2, 0
.L956:
	.word	gBlockRecvBuffer
	.word	0x100007e
	.word	gRfu
	.word	0x99e
.Lfe87:
	.size	 Task_PlayerExchangeUpdate,.Lfe87-Task_PlayerExchangeUpdate
	.align	2, 0
	.type	 Task_PlayerExchangeChat,function
	.thumb_func
Task_PlayerExchangeChat:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L971
	add	r0, r6, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L959	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
.L959:
	ldr	r1, .L971+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L963	@cond_branch
	cmp	r0, #0x1
	bgt	.L969	@cond_branch
	cmp	r0, #0
	beq	.L961	@cond_branch
	b	.L960
.L972:
	.align	2, 0
.L971:
	.word	gRfu
	.word	gTasks
.L969:
	cmp	r0, #0x2
	beq	.L965	@cond_branch
	b	.L960
.L961:
	ldrb	r0, [r6, #0xd]
	cmp	r0, #0
	beq	.L960	@cond_branch
	bl	LocalLinkPlayerToBlock
	ldr	r1, .L973
	mov	r0, #0x0
	mov	r2, #0x3c
	bl	SendBlock
	b	.L970
.L974:
	.align	2, 0
.L973:
	.word	gBlockSendBuffer
.L963:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L960	@cond_branch
.L970:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L960
.L965:
	bl	GetBlockReceivedStatus
	mov	r4, #0x1
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L960	@cond_branch
	ldr	r0, .L975
	bl	ReceiveRfuLinkPlayers
	mov	r0, #0x0
	bl	ResetBlockReceivedFlag
	ldr	r0, .L975+0x4
	strb	r4, [r0]
	add	r0, r5, #0
	bl	DestroyTask
.L960:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L976:
	.align	2, 0
.L975:
	.word	gBlockRecvBuffer
	.word	gReceivedRemoteLinkPlayers
.Lfe88:
	.size	 Task_PlayerExchangeChat,.Lfe88-Task_PlayerExchangeChat
	.align	2, 0
	.type	 RfuCheckErrorStatus,function
	.thumb_func
RfuCheckErrorStatus:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L985
	add	r7, r0, #0
	add	r7, r7, #0xee
	ldrb	r1, [r7]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L978	@cond_branch
	ldr	r0, .L985+0x4
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L978	@cond_branch
	ldr	r6, .L985+0x8
	ldr	r1, [r6, #0x4]
	ldr	r0, .L985+0xc
	cmp	r1, r0
	bne	.L979	@cond_branch
	ldr	r1, .L985+0x10
	mov	r0, #0x2
	strb	r0, [r1]
.L979:
	ldr	r4, .L985+0x14
	add	r0, r4, #0
	bl	SetMainCallback2
	str	r4, [r6, #0x8]
	ldrh	r0, [r5, #0xa]
	lsl	r4, r0, #0x10
	ldrh	r0, [r5, #0x10]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrh	r0, [r5, #0x12]
	orr	r4, r4, r0
	ldr	r1, .L985+0x18
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r6, r0, #0
	ldr	r1, .L985+0x1c
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r5, r0, #0
	bl	RfuGetStatus
	mov	r3, #0x0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L980	@cond_branch
	mov	r3, #0x1
.L980:
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	SetLinkErrorFromRfu
	ldrb	r0, [r7]
	mov	r0, #0x2
	strb	r0, [r7]
	bl	CloseLink
	b	.L981
.L986:
	.align	2, 0
.L985:
	.word	gRfu
	.word	lman
	.word	gMain
	.word	CB2_MysteryGiftEReader
	.word	gWirelessCommType
	.word	CB2_LinkError
	.word	0x69e
	.word	0x8d2
.L978:
	ldr	r1, .L987
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L983	@cond_branch
	ldr	r1, .L987+0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L981	@cond_branch
.L983:
	ldr	r0, .L987+0x8
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L984	@cond_branch
	bl	rfu_LMAN_requestChangeAgbClockMaster
.L984:
	mov	r4, #0xe0
	lsl	r4, r4, #0x7
	mov	r0, #0x1
	add	r1, r4, #0
	bl	RfuSetStatus
	add	r0, r4, #0
	bl	RfuSetErrorParams
.L981:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L988:
	.align	2, 0
.L987:
	.word	0x8d3
	.word	0x69f
	.word	lman
.Lfe89:
	.size	 RfuCheckErrorStatus,.Lfe89-RfuCheckErrorStatus
	.align	2, 0
	.type	 RfuMain1_UnionRoom,function
	.thumb_func
RfuMain1_UnionRoom:
	push	{lr}
	ldr	r0, .L991
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	bne	.L990	@cond_branch
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	mov	r0, #0x0
	bl	rfu_LMAN_REQ_sendData
.L990:
	pop	{r0}
	bx	r0
.L992:
	.align	2, 0
.L991:
	.word	lman
.Lfe90:
	.size	 RfuMain1_UnionRoom,.Lfe90-RfuMain1_UnionRoom
	.align	2, 0
	.globl	RfuMain1
	.type	 RfuMain1,function
	.thumb_func
RfuMain1:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r4, .L1002
	ldr	r1, .L1002+0x4
	add	r0, r4, r1
	strb	r5, [r0]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	rfu_LMAN_manager_entity
	add	r0, r4, #0
	add	r0, r0, #0xef
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L994	@cond_branch
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	beq	.L996	@cond_branch
	cmp	r0, #0x1
	bgt	.L1001	@cond_branch
	cmp	r0, #0
	beq	.L997	@cond_branch
	b	.L994
.L1003:
	.align	2, 0
.L1002:
	.word	gRfu
	.word	0x985
.L1001:
	cmp	r0, #0x2
	beq	.L998	@cond_branch
	b	.L994
.L996:
	bl	RfuMain1_Parent
	b	.L994
.L997:
	bl	RfuMain1_Child
	add	r5, r0, #0
	b	.L994
.L998:
	bl	RfuMain1_UnionRoom
.L994:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 RfuMain1,.Lfe91-RfuMain1
	.align	2, 0
	.globl	RfuMain2
	.type	 RfuMain2,function
	.thumb_func
RfuMain2:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r1, .L1007
	add	r0, r1, #0
	add	r0, r0, #0xef
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1005	@cond_branch
	ldrb	r0, [r1, #0xc]
	cmp	r0, #0x1
	bne	.L1006	@cond_branch
	bl	RfuMain2_Parent
	add	r4, r0, #0
.L1006:
	bl	RfuCheckErrorStatus
.L1005:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L1008:
	.align	2, 0
.L1007:
	.word	gRfu
.Lfe92:
	.size	 RfuMain2,.Lfe92-RfuMain2
	.align	2, 0
	.type	 SetHostRfuUsername,function
	.thumb_func
SetHostRfuUsername:
	push	{lr}
	ldr	r0, .L1010
	ldr	r1, .L1010+0x4
	ldr	r1, [r1]
	bl	StringCopy
	pop	{r0}
	bx	r0
.L1011:
	.align	2, 0
.L1010:
	.word	gHostRfuUsername
	.word	gSaveBlock2Ptr
.Lfe93:
	.size	 SetHostRfuUsername,.Lfe93-SetHostRfuUsername
	.align	2, 0
	.globl	ResetHostRfuGameData
	.type	 ResetHostRfuGameData,function
	.thumb_func
ResetHostRfuGameData:
	push	{r4, lr}
	ldr	r4, .L1013
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	InitHostRfuGameData
	pop	{r4}
	pop	{r0}
	bx	r0
.L1014:
	.align	2, 0
.L1013:
	.word	gHostRfuGameData
.Lfe94:
	.size	 ResetHostRfuGameData,.Lfe94-ResetHostRfuGameData
	.align	2, 0
	.globl	SetHostRfuGameData
	.type	 SetHostRfuGameData,function
	.thumb_func
SetHostRfuGameData:
	push	{r4, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1016
	add	r1, r4, #0
	bl	InitHostRfuGameData
	pop	{r4}
	pop	{r0}
	bx	r0
.L1017:
	.align	2, 0
.L1016:
	.word	gHostRfuGameData
.Lfe95:
	.size	 SetHostRfuGameData,.Lfe95-SetHostRfuGameData
	.align	2, 0
	.globl	SetHostRfuWonderFlags
	.type	 SetHostRfuWonderFlags,function
	.thumb_func
SetHostRfuWonderFlags:
	push	{r4, r5, lr}
	ldr	r5, .L1019
	mov	r4, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r5]
	mov	r2, #0x11
	neg	r2, r2
	and	r2, r2, r3
	orr	r2, r2, r0
	and	r1, r1, r4
	lsl	r1, r1, #0x5
	mov	r0, #0x21
	neg	r0, r0
	and	r2, r2, r0
	orr	r2, r2, r1
	strb	r2, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1020:
	.align	2, 0
.L1019:
	.word	gHostRfuGameData
.Lfe96:
	.size	 SetHostRfuWonderFlags,.Lfe96-SetHostRfuWonderFlags
	.align	2, 0
	.globl	SetTradeBoardRegisteredMonInfo
	.type	 SetTradeBoardRegisteredMonInfo,function
	.thumb_func
SetTradeBoardRegisteredMonInfo:
	push	{r4, r5, lr}
	ldr	r5, .L1022
	lsl	r0, r0, #0x2
	ldrb	r4, [r5, #0x9]
	mov	r3, #0x3
	and	r3, r3, r4
	orr	r3, r3, r0
	strb	r3, [r5, #0x9]
	ldr	r3, .L1022+0x4
	add	r0, r3, #0
	and	r1, r1, r0
	ldrh	r3, [r5, #0x8]
	ldr	r0, .L1022+0x8
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r5, #0x8]
	lsl	r2, r2, #0x1
	ldrb	r1, [r5, #0xb]
	mov	r0, #0x1
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0xb]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1023:
	.align	2, 0
.L1022:
	.word	gHostRfuGameData
	.word	0x3ff
	.word	-0x400
.Lfe97:
	.size	 SetTradeBoardRegisteredMonInfo,.Lfe97-SetTradeBoardRegisteredMonInfo
	.align	2, 0
	.globl	UpdateGameData_GroupLockedIn
	.type	 UpdateGameData_GroupLockedIn,function
	.thumb_func
UpdateGameData_GroupLockedIn:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r2, .L1025
	lsr	r0, r0, #0x11
	ldrb	r3, [r2, #0xa]
	mov	r1, #0x7f
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0xa]
	ldr	r3, .L1025+0x4
	mov	r0, #0x0
	mov	r1, #0x2
	bl	rfu_REQ_configGameData
	pop	{r0}
	bx	r0
.L1026:
	.align	2, 0
.L1025:
	.word	gHostRfuGameData
	.word	gHostRfuUsername
.Lfe98:
	.size	 UpdateGameData_GroupLockedIn,.Lfe98-UpdateGameData_GroupLockedIn
	.align	2, 0
	.globl	UpdateGameData_SetActivity
	.type	 UpdateGameData_SetActivity,function
	.thumb_func
UpdateGameData_SetActivity:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1028	@cond_branch
	bl	SetHostRfuGameData
.L1028:
	ldr	r2, .L1029
	ldr	r3, .L1029+0x4
	mov	r0, #0x0
	mov	r1, #0x2
	bl	rfu_REQ_configGameData
	pop	{r0}
	bx	r0
.L1030:
	.align	2, 0
.L1029:
	.word	gHostRfuGameData
	.word	gHostRfuUsername
.Lfe99:
	.size	 UpdateGameData_SetActivity,.Lfe99-UpdateGameData_SetActivity
	.align	2, 0
	.globl	SetUnionRoomChatPlayerData
	.type	 SetUnionRoomChatPlayerData,function
	.thumb_func
SetUnionRoomChatPlayerData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	bl	GetHostRfuGameData
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L1032	@cond_branch
	mov	r5, #0x0
	mov	r7, #0x0
	ldr	r3, .L1040
	ldr	r1, .L1040+0x4
	add	r0, r3, r1
	ldr	r2, .L1040+0x8
	add	r1, r3, r2
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	add	r1, r0, #0
	eor	r1, r1, r2
	mov	r8, r1
	mov	r4, #0x0
	mov	r6, #0x1
	ldr	r2, .L1040+0xc
	mov	ip, r2
	ldr	r0, .L1040+0x10
	add	r0, r0, r3
	mov	sl, r0
	mov	r3, ip
	add	r3, r3, #0x4
.L1036:
	mov	r0, r8
	asr	r0, r0, r4
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L1035	@cond_branch
	mov	r1, sl
	add	r0, r4, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r2, ip
	add	r1, r0, r2
	ldrb	r1, [r1, #0x13]
	add	r2, r6, #0
	and	r2, r2, r1
	lsl	r2, r2, #0x3
	add	r0, r0, r3
	ldr	r1, [r0]
	mov	r0, #0x7
	and	r1, r1, r0
	mov	r0, #0x80
	orr	r1, r1, r0
	orr	r2, r2, r1
	lsl	r0, r5, #0x3
	lsl	r2, r2, r0
	orr	r7, r7, r2
	add	r5, r5, #0x1
	mov	r0, r9
	sub	r0, r0, #0x1
	cmp	r5, r0
	beq	.L1034	@cond_branch
.L1035:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1036	@cond_branch
.L1034:
	mov	r0, #0x45
	add	r1, r7, #0
	mov	r2, #0x0
	bl	UpdateGameData_SetActivity
.L1032:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1041:
	.align	2, 0
.L1040:
	.word	gRfu
	.word	0x99a
	.word	0x99b
	.word	gLinkPlayers
	.word	0x996
.Lfe100:
	.size	 SetUnionRoomChatPlayerData,.Lfe100-SetUnionRoomChatPlayerData
	.align	2, 0
	.type	 RfuSetErrorParams,function
	.thumb_func
RfuSetErrorParams:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, .L1044
	add	r3, r2, #0
	add	r3, r3, #0xee
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L1043	@cond_branch
	ldr	r1, .L1044+0x4
	ldrh	r0, [r1, #0x14]
	strh	r0, [r2, #0x10]
	ldrh	r0, [r1, #0x16]
	strh	r0, [r2, #0x12]
	strh	r4, [r2, #0xa]
	ldrb	r0, [r3]
	mov	r0, #0x1
	strb	r0, [r3]
.L1043:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1045:
	.align	2, 0
.L1044:
	.word	gRfu
	.word	lman
.Lfe101:
	.size	 RfuSetErrorParams,.Lfe101-RfuSetErrorParams
	.align	2, 0
	.type	 ResetErrorState,function
	.thumb_func
ResetErrorState:
	ldr	r0, .L1047
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x0
	strb	r1, [r0]
	bx	lr
.L1048:
	.align	2, 0
.L1047:
	.word	gRfu
.Lfe102:
	.size	 ResetErrorState,.Lfe102-ResetErrorState
	.align	2, 0
	.globl	RfuSetIgnoreError
	.type	 RfuSetIgnoreError,function
	.thumb_func
RfuSetIgnoreError:
	push	{lr}
	add	r2, r0, #0
	cmp	r2, #0
	bne	.L1050	@cond_branch
	ldr	r0, .L1052
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	strb	r2, [r0]
	b	.L1051
.L1053:
	.align	2, 0
.L1052:
	.word	gRfu
.L1050:
	ldr	r0, .L1054
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x4
	strb	r1, [r0]
.L1051:
	pop	{r0}
	bx	r0
.L1055:
	.align	2, 0
.L1054:
	.word	gRfu
.Lfe103:
	.size	 RfuSetIgnoreError,.Lfe103-RfuSetIgnoreError
	.align	2, 0
	.type	 DisconnectNewChild,function
	.thumb_func
DisconnectNewChild:
	push	{lr}
	ldr	r0, .L1057
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	SendDisconnectCommand
	ldr	r1, .L1057+0x4
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1058:
	.align	2, 0
.L1057:
	.word	lman
	.word	gRfu
.Lfe104:
	.size	 DisconnectNewChild,.Lfe104-DisconnectNewChild
	.align	2, 0
	.type	 StartDisconnectNewChild,function
	.thumb_func
StartDisconnectNewChild:
	ldr	r1, .L1060
	ldr	r0, .L1060+0x4
	str	r0, [r1]
	bx	lr
.L1061:
	.align	2, 0
.L1060:
	.word	gRfu
	.word	DisconnectNewChild
.Lfe105:
	.size	 StartDisconnectNewChild,.Lfe105-StartDisconnectNewChild
	.align	2, 0
	.type	 LinkManagerCB_Parent,function
	.thumb_func
LinkManagerCB_Parent:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r6, #0x0
	cmp	r4, #0x32
	bne	.LCB8013
	b	.L1081	@long jump
.LCB8013:
	cmp	r4, #0x32
	bgt	.L1098	@cond_branch
	cmp	r4, #0x13
	bgt	.L1099	@cond_branch
	cmp	r4, #0x12
	blt	.LCB8019
	b	.L1063	@long jump
.LCB8019:
	cmp	r4, #0x10
	bne	.LCB8021
	b	.L1063	@long jump
.LCB8021:
	cmp	r4, #0x10
	bgt	.L1066	@cond_branch
	cmp	r4, #0
	beq	.L1064	@cond_branch
	b	.L1063
.L1099:
	cmp	r4, #0x30
	bne	.LCB8030
	b	.L1083	@long jump
.LCB8030:
	cmp	r4, #0x30
	ble	.LCB8032
	b	.L1080	@long jump
.LCB8032:
	cmp	r4, #0x14
	beq	.L1078	@cond_branch
	b	.L1063
.L1098:
	cmp	r4, #0x44
	bgt	.L1100	@cond_branch
	cmp	r4, #0x42
	blt	.LCB8041
	b	.L1063	@long jump
.LCB8041:
	cmp	r4, #0x33
	bne	.LCB8043
	b	.L1083	@long jump
.LCB8043:
	b	.L1063
.L1100:
	cmp	r4, #0xf3
	bne	.LCB8048
	b	.L1091	@long jump
.LCB8048:
	cmp	r4, #0xf3
	bgt	.L1101	@cond_branch
	cmp	r4, #0xf0
	bge	.LCB8052
	b	.L1063	@long jump
.LCB8052:
	b	.L1095
.L1101:
	cmp	r4, #0xff
	bne	.LCB8057
	b	.L1095	@long jump
.LCB8057:
	b	.L1063
.L1064:
	ldr	r1, .L1104
	mov	r0, #0x2
	strh	r0, [r1, #0x4]
	b	.L1063
.L1105:
	.align	2, 0
.L1104:
	.word	gRfu
.L1066:
	ldr	r0, .L1106
	ldrh	r0, [r0, #0x14]
	bl	ParentResetChildRecvMetadata
	mov	r5, #0x0
	mov	r0, #0x1
	mov	r8, r0
	ldr	r1, .L1106+0x4
	mov	r9, r1
	ldr	r3, .L1106+0x8
	add	r3, r3, r9
	mov	sl, r3
	mov	r7, #0x7f
.L1070:
	ldr	r0, .L1106
	ldrh	r0, [r0, #0x14]
	asr	r0, r0, r5
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1069	@cond_branch
	ldr	r0, .L1106+0xc
	lsl	r1, r5, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x10]
	add	r4, r7, #0
	and	r4, r4, r0
	bl	GetHostRfuGameData
	ldrb	r1, [r0, #0xa]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r4, r0
	bne	.L1072	@cond_branch
	ldr	r0, .L1106+0x10
	add	r0, r0, r9
	add	r0, r5, r0
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r3, sl
	add	r2, r5, r3
	strb	r1, [r2]
	mov	r0, #0x20
	add	r1, r5, #0
	mov	r3, #0x1
	bl	rfu_setRecvBuffer
	b	.L1069
.L1107:
	.align	2, 0
.L1106:
	.word	lman
	.word	gRfu
	.word	0x98d
	.word	gRfuLinkStatus
	.word	0x989
.L1072:
	mov	r0, r8
	lsl	r0, r0, r5
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L1069:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L1070	@cond_branch
	cmp	r6, #0
	beq	.L1063	@cond_branch
	add	r0, r6, #0
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	b	.L1063
.L1078:
	ldr	r4, .L1108
	ldr	r1, .L1108+0x4
	add	r0, r4, r1
	ldr	r1, .L1108+0x8
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	cmp	r2, r0
	beq	.L1079	@cond_branch
	eor	r0, r0, r2
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L1079:
	mov	r0, #0x11
	strh	r0, [r4, #0x4]
	b	.L1063
.L1109:
	.align	2, 0
.L1108:
	.word	gRfu
	.word	0x99f
	.word	lman
.L1080:
	ldr	r0, .L1110
	add	r0, r0, #0xf0
	b	.L1102
.L1111:
	.align	2, 0
.L1110:
	.word	gRfu
.L1081:
	ldr	r0, .L1112
	add	r0, r0, #0xf0
	mov	r1, #0x3
	b	.L1103
.L1113:
	.align	2, 0
.L1112:
	.word	gRfu
.L1083:
	ldr	r1, .L1114
	add	r2, r1, #0
	add	r2, r2, #0xf0
	mov	r0, #0x4
	strb	r0, [r2]
	ldr	r3, .L1114+0x4
	add	r1, r1, r3
	ldr	r0, .L1114+0x8
	ldrb	r2, [r0, #0x14]
	ldrb	r0, [r1]
	add	r3, r0, #0
	bic	r3, r3, r2
	add	r2, r3, #0
	strb	r2, [r1]
	ldr	r0, .L1114+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1084	@cond_branch
	cmp	r2, #0
	bne	.L1085	@cond_branch
	add	r0, r4, #0
	bl	RfuSetErrorParams
	b	.L1084
.L1115:
	.align	2, 0
.L1114:
	.word	gRfu
	.word	0x99a
	.word	lman
	.word	gReceivedRemoteLinkPlayers
.L1085:
	bl	StartDisconnectNewChild
.L1084:
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
	b	.L1063
.L1091:
	mov	r0, #0x1
	mov	r1, #0xf3
	bl	RfuSetStatus
	mov	r0, #0xf3
	bl	RfuSetErrorParams
	ldr	r0, .L1116
	add	r0, r0, #0xef
	b	.L1102
.L1117:
	.align	2, 0
.L1116:
	.word	gRfu
.L1095:
	add	r0, r4, #0
	bl	RfuSetErrorParams
	mov	r0, #0x1
	add	r1, r4, #0
	bl	RfuSetStatus
	ldr	r0, .L1118
	ldr	r1, .L1118+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
.L1102:
	mov	r1, #0x1
.L1103:
	strb	r1, [r0]
.L1063:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1119:
	.align	2, 0
.L1118:
	.word	gRfu
	.word	0x993
.Lfe106:
	.size	 LinkManagerCB_Parent,.Lfe106-LinkManagerCB_Parent
	.align	2, 0
	.type	 LinkManagerCB_Child,function
	.thumb_func
LinkManagerCB_Child:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x31
	bne	.LCB8337
	b	.L1135	@long jump
.LCB8337:
	cmp	r4, #0x31
	bgt	.L1148	@cond_branch
	cmp	r4, #0x22
	beq	.L1125	@cond_branch
	cmp	r4, #0x22
	bgt	.L1149	@cond_branch
	cmp	r4, #0x20
	beq	.L1123	@cond_branch
	cmp	r4, #0x20
	ble	.LCB8347
	b	.L1121	@long jump
.LCB8347:
	cmp	r4, #0
	beq	.L1122	@cond_branch
	b	.L1121
.L1149:
	cmp	r4, #0x24
	beq	.L1127	@cond_branch
	cmp	r4, #0x24
	blt	.L1126	@cond_branch
	cmp	r4, #0x25
	beq	.L1128	@cond_branch
	cmp	r4, #0x30
	beq	.L1129	@cond_branch
	b	.L1121
.L1148:
	cmp	r4, #0x44
	bgt	.L1150	@cond_branch
	cmp	r4, #0x42
	blt	.LCB8367
	b	.L1121	@long jump
.LCB8367:
	cmp	r4, #0x33
	beq	.L1131	@cond_branch
	cmp	r4, #0x33
	bge	.LCB8371
	b	.L1136	@long jump
.LCB8371:
	b	.L1121
.L1150:
	cmp	r4, #0xf3
	bne	.LCB8376
	b	.L1141	@long jump
.LCB8376:
	cmp	r4, #0xf3
	bgt	.L1151	@cond_branch
	cmp	r4, #0xf0
	bge	.LCB8380
	b	.L1121	@long jump
.LCB8380:
	b	.L1145
.L1151:
	cmp	r4, #0xff
	bne	.LCB8385
	b	.L1145	@long jump
.LCB8385:
	b	.L1121
.L1122:
	ldr	r1, .L1154
	mov	r0, #0x6
	strh	r0, [r1, #0x4]
	b	.L1121
.L1155:
	.align	2, 0
.L1154:
	.word	gRfu
.L1123:
	ldr	r0, .L1156
	ldr	r1, .L1156+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r2, .L1156+0x8
	add	r0, r0, r2
	b	.L1152
.L1157:
	.align	2, 0
.L1156:
	.word	gRfu
	.word	lman
	.word	0x985
.L1125:
	ldr	r0, .L1158
	ldr	r1, .L1158+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r2, .L1158+0x8
	add	r0, r0, r2
	ldrb	r2, [r0]
	b	.L1152
.L1159:
	.align	2, 0
.L1158:
	.word	gRfu
	.word	lman
	.word	0x8f6
.L1126:
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
	b	.L1121
.L1127:
	ldr	r4, .L1160
	mov	r1, #0x0
	mov	r0, #0xb
	strh	r0, [r4, #0x4]
	ldr	r2, .L1160+0x4
	add	r0, r4, r2
	strb	r1, [r0]
	ldr	r0, .L1160+0x8
	add	r2, r4, r0
	strb	r1, [r2]
	ldr	r1, .L1160+0xc
	add	r5, r4, r1
	ldrb	r1, [r5]
	mov	r0, #0x20
	mov	r3, #0x1
	bl	rfu_setRecvBuffer
	ldrb	r1, [r5]
	ldr	r2, .L1160+0x10
	add	r4, r4, r2
	mov	r0, #0x10
	add	r2, r4, #0
	mov	r3, #0x46
	bl	rfu_setRecvBuffer
	b	.L1121
.L1161:
	.align	2, 0
.L1160:
	.word	gRfu
	.word	0x93d
	.word	0x93e
	.word	0x8f6
	.word	0x8f7
.L1128:
	mov	r0, #0x2
	mov	r1, #0x25
	bl	RfuSetStatus
	b	.L1121
.L1129:
	ldr	r0, .L1162
	add	r2, r0, #0
	add	r2, r2, #0xf0
	mov	r1, #0x2
	strb	r1, [r2]
	ldr	r1, .L1162+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x6
	beq	.L1121	@cond_branch
.L1131:
	ldr	r2, .L1162
	add	r1, r2, #0
	add	r1, r1, #0xf0
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L1132	@cond_branch
	mov	r0, #0x4
	strb	r0, [r1]
.L1132:
	ldr	r1, .L1162+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x9
	beq	.L1133	@cond_branch
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
.L1133:
	ldr	r0, .L1162+0x8
	mov	r1, #0x5
	mov	r2, #0x5
	bl	Debug_PrintString
	ldr	r0, .L1162+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1121	@cond_branch
	add	r0, r4, #0
	bl	RfuSetErrorParams
	b	.L1121
.L1163:
	.align	2, 0
.L1162:
	.word	gRfu
	.word	0x93e
	.word	sASCII_LinkLossDisconnect
	.word	gReceivedRemoteLinkPlayers
.L1135:
	ldr	r0, .L1164
	add	r0, r0, #0xf0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L1164+0x4
	mov	r1, #0x5
	mov	r2, #0x5
	bl	Debug_PrintString
	b	.L1121
.L1165:
	.align	2, 0
.L1164:
	.word	gRfu
	.word	sASCII_LinkLossRecoveryNow
.L1136:
	ldr	r1, .L1166
	add	r2, r1, #0
	add	r2, r2, #0xf0
	mov	r0, #0x3
	strb	r0, [r2]
	ldr	r2, .L1166+0x4
	add	r1, r1, r2
	ldrb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L1121
.L1167:
	.align	2, 0
.L1166:
	.word	gRfu
	.word	0x8f4
.L1141:
	mov	r0, #0x1
	mov	r1, #0xf3
	bl	RfuSetStatus
	mov	r0, #0xf3
	bl	RfuSetErrorParams
	ldr	r0, .L1168
	add	r0, r0, #0xef
	b	.L1153
.L1169:
	.align	2, 0
.L1168:
	.word	gRfu
.L1145:
	mov	r0, #0x1
	add	r1, r4, #0
	bl	RfuSetStatus
	add	r0, r4, #0
	bl	RfuSetErrorParams
	ldr	r0, .L1170
	ldr	r1, .L1170+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
.L1153:
	mov	r1, #0x1
.L1152:
	strb	r1, [r0]
.L1121:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1171:
	.align	2, 0
.L1170:
	.word	gRfu
	.word	0x993
.Lfe107:
	.size	 LinkManagerCB_Child,.Lfe107-LinkManagerCB_Child
	.align	2, 0
	.type	 ParentResetChildRecvMetadata,function
	.thumb_func
ParentResetChildRecvMetadata:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	mov	r6, #0x1
	ldr	r0, .L1179
	ldr	r4, .L1179+0x4
	add	r1, r0, r4
	mov	r5, #0x0
	mov	r4, #0xff
.L1176:
	add	r0, r3, #0
	asr	r0, r0, r2
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L1175	@cond_branch
	strb	r5, [r1]
	ldrb	r0, [r1, #0x4]
	orr	r0, r0, r4
	strb	r0, [r1, #0x4]
.L1175:
	add	r1, r1, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1176	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1180:
	.align	2, 0
.L1179:
	.word	gRfu
	.word	0x9a2
.Lfe108:
	.size	 ParentResetChildRecvMetadata,.Lfe108-ParentResetChildRecvMetadata
	.align	2, 0
	.type	 GetNewChildrenInUnionRoomChat,function
	.thumb_func
GetNewChildrenInUnionRoomChat:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r3, #0x0
	mov	r2, #0x0
	mov	r4, #0x1
	ldr	r6, .L1189
	mov	r7, #0x7f
.L1185:
	add	r0, r5, #0
	asr	r0, r0, r2
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1184	@cond_branch
	lsl	r1, r2, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r6]
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L1184	@cond_branch
	add	r0, r4, #0
	lsl	r0, r0, r2
	orr	r3, r3, r0
	lsl	r0, r3, #0x18
	lsr	r3, r0, #0x18
.L1184:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L1185	@cond_branch
	add	r0, r3, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1190:
	.align	2, 0
.L1189:
	.word	gRfuLinkStatus
.Lfe109:
	.size	 GetNewChildrenInUnionRoomChat,.Lfe109-GetNewChildrenInUnionRoomChat
	.align	2, 0
	.type	 LinkManagerCB_UnionRoom,function
	.thumb_func
LinkManagerCB_UnionRoom:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x25
	bne	.LCB8762
	b	.L1215	@long jump
.LCB8762:
	cmp	r4, #0x25
	bgt	.L1241	@cond_branch
	cmp	r4, #0x14
	bne	.LCB8766
	b	.L1205	@long jump
.LCB8766:
	cmp	r4, #0x14
	bgt	.L1242	@cond_branch
	cmp	r4, #0x11
	beq	.L1195	@cond_branch
	cmp	r4, #0x11
	ble	.LCB8772
	b	.L1192	@long jump
.LCB8772:
	cmp	r4, #0
	beq	.L1193	@cond_branch
	cmp	r4, #0x10
	beq	.L1194	@cond_branch
	b	.L1192
.L1242:
	cmp	r4, #0x22
	bne	.LCB8781
	b	.L1210	@long jump
.LCB8781:
	cmp	r4, #0x22
	bgt	.L1243	@cond_branch
	cmp	r4, #0x20
	bne	.LCB8785
	b	.L1208	@long jump
.LCB8785:
	b	.L1192
.L1243:
	cmp	r4, #0x23
	bne	.LCB8790
	b	.L1211	@long jump
.LCB8790:
	cmp	r4, #0x24
	bne	.LCB8792
	b	.L1214	@long jump
.LCB8792:
	b	.L1192
.L1241:
	cmp	r4, #0x44
	bgt	.L1244	@cond_branch
	cmp	r4, #0x42
	blt	.LCB8799
	b	.L1192	@long jump
.LCB8799:
	cmp	r4, #0x32
	bne	.LCB8801
	b	.L1218	@long jump
.LCB8801:
	cmp	r4, #0x32
	bgt	.L1245	@cond_branch
	cmp	r4, #0x30
	bne	.LCB8805
	b	.L1220	@long jump
.LCB8805:
	cmp	r4, #0x31
	bne	.LCB8807
	b	.L1216	@long jump
.LCB8807:
	b	.L1192
.L1245:
	cmp	r4, #0x33
	bne	.LCB8812
	b	.L1221	@long jump
.LCB8812:
	cmp	r4, #0x40
	bne	.LCB8814
	b	.L1230	@long jump
.LCB8814:
	b	.L1192
.L1244:
	cmp	r4, #0xf3
	bne	.LCB8819
	b	.L1234	@long jump
.LCB8819:
	cmp	r4, #0xf3
	bgt	.L1246	@cond_branch
	cmp	r4, #0xf0
	bge	.LCB8823
	b	.L1192	@long jump
.LCB8823:
	b	.L1238
.L1246:
	cmp	r4, #0xff
	bne	.LCB8828
	b	.L1238	@long jump
.LCB8828:
	b	.L1192
.L1193:
	ldr	r1, .L1249
	mov	r0, #0x11
	strh	r0, [r1, #0x4]
	b	.L1192
.L1250:
	.align	2, 0
.L1249:
	.word	gRfu
.L1194:
	mov	r0, #0x4
	mov	r1, #0x0
	bl	RfuSetStatus
	b	.L1192
.L1195:
	bl	GetHostRfuGameData
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L1196	@cond_branch
	ldr	r5, .L1251
	ldr	r1, .L1251+0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1196	@cond_branch
	ldr	r0, .L1251+0x8
	ldrh	r0, [r0, #0x14]
	bl	GetNewChildrenInUnionRoomChat
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L1197	@cond_branch
	add	r0, r4, #0
	bl	Rfu_GetIndexOfNewestChild
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x1
	mov	ip, r2
	mov	r1, ip
	lsl	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r7, .L1251+0xc
	add	r6, r5, r7
	ldrb	r2, [r6]
	cmp	r2, #0
	bne	.L1198	@cond_branch
	mov	r0, #0x9a
	lsl	r0, r0, #0x4
	add	r3, r5, r0
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L1198	@cond_branch
	sub	r7, r7, #0x1
	add	r0, r5, r7
	strb	r1, [r0]
	eor	r1, r1, r4
	orr	r1, r1, r2
	strb	r1, [r6]
	mov	r0, ip
	strb	r0, [r3]
	b	.L1197
.L1252:
	.align	2, 0
.L1251:
	.word	gRfu
	.word	0x991
	.word	lman
	.word	0x99e
.L1198:
	ldr	r0, .L1253
	ldr	r1, .L1253+0x4
	add	r0, r0, r1
	ldrb	r2, [r0]
	add	r1, r4, #0
	orr	r1, r1, r2
	strb	r1, [r0]
.L1197:
	ldr	r0, .L1253+0x8
	ldrh	r1, [r0, #0x14]
	cmp	r4, r1
	beq	.L1201	@cond_branch
	ldr	r2, .L1253
	ldr	r7, .L1253+0xc
	add	r3, r2, r7
	add	r0, r4, #0
	eor	r0, r0, r1
	ldrb	r1, [r3]
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L1253+0x10
	add	r2, r2, r0
	mov	r0, #0x2
	strb	r0, [r2]
	b	.L1201
.L1254:
	.align	2, 0
.L1253:
	.word	gRfu
	.word	0x99e
	.word	lman
	.word	0x99b
	.word	0x99c
.L1196:
	bl	GetHostRfuGameData
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x54
	bne	.L1201	@cond_branch
	ldr	r0, .L1255
	ldrb	r0, [r0]
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L1201:
	ldr	r0, .L1255
	ldrh	r0, [r0, #0x14]
	bl	ParentResetChildRecvMetadata
	b	.L1192
.L1256:
	.align	2, 0
.L1255:
	.word	lman
.L1205:
	bl	GetHostRfuGameData
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	beq	.L1206	@cond_branch
	ldr	r4, .L1257
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	bls	.L1206	@cond_branch
	ldrb	r0, [r4, #0x14]
	bl	Rfu_GetIndexOfNewestChild
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	lsl	r1, r1, r0
	lsr	r1, r1, #0x18
	ldrb	r0, [r4]
	eor	r1, r1, r0
	add	r0, r1, #0
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L1206:
	ldr	r1, .L1257+0x4
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0xf
	beq	.LCB9054
	b	.L1192	@long jump
.LCB9054:
	mov	r0, #0x10
	strh	r0, [r1, #0x4]
	b	.L1192
.L1258:
	.align	2, 0
.L1257:
	.word	lman
	.word	gRfu
.L1208:
	ldr	r0, .L1259
	ldr	r1, .L1259+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r2, .L1259+0x8
	add	r0, r0, r2
	b	.L1247
.L1260:
	.align	2, 0
.L1259:
	.word	gRfu
	.word	lman
	.word	0x985
.L1210:
	ldr	r0, .L1261
	ldr	r1, .L1261+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r7, .L1261+0x8
	add	r0, r0, r7
	ldrb	r2, [r0]
	b	.L1247
.L1262:
	.align	2, 0
.L1261:
	.word	gRfu
	.word	lman
	.word	0x8f6
.L1211:
	ldr	r1, .L1263
	mov	r0, #0x12
	strh	r0, [r1, #0x4]
	ldr	r0, .L1263+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bhi	.L1212	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L1263+0x8
	mov	r1, #0x2
	bl	CreateTask
	b	.L1192
.L1264:
	.align	2, 0
.L1263:
	.word	gRfu
	.word	0x987
	.word	Task_TryConnectToUnionRoomParent
.L1212:
	mov	r0, #0x2
	mov	r1, #0x23
	bl	RfuSetStatus
	b	.L1192
.L1214:
	ldr	r4, .L1265
	mov	r0, #0xd
	strh	r0, [r4, #0x4]
	mov	r0, #0x3
	mov	r1, #0x0
	bl	RfuSetStatus
	ldr	r1, .L1265+0x4
	add	r0, r4, r1
	ldrb	r1, [r0]
	ldr	r2, .L1265+0x8
	add	r4, r4, r2
	mov	r0, #0x10
	add	r2, r4, #0
	mov	r3, #0x46
	bl	rfu_setRecvBuffer
	b	.L1192
.L1266:
	.align	2, 0
.L1265:
	.word	gRfu
	.word	0x8f6
	.word	0x8f7
.L1215:
	mov	r0, #0x2
	mov	r1, #0x25
	bl	RfuSetStatus
	b	.L1192
.L1216:
	ldr	r0, .L1267
	ldrb	r1, [r0]
	ldrh	r0, [r0, #0x14]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB9179
	b	.L1192	@long jump
.LCB9179:
	ldr	r0, .L1267+0x4
	add	r0, r0, #0xf0
	mov	r1, #0x1
	b	.L1247
.L1268:
	.align	2, 0
.L1267:
	.word	lman
	.word	gRfu
.L1218:
	ldr	r2, .L1269
	add	r1, r2, #0
	add	r1, r1, #0xf0
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r0, .L1269+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB9204
	b	.L1192	@long jump
.LCB9204:
	ldr	r7, .L1269+0x8
	add	r0, r2, r7
	ldrb	r1, [r0]
	mov	r1, #0x1
	b	.L1247
.L1270:
	.align	2, 0
.L1269:
	.word	gRfu
	.word	gRfuLinkStatus
	.word	0x8f4
.L1220:
	ldr	r0, .L1271
	add	r0, r0, #0xf0
	mov	r1, #0x2
	strb	r1, [r0]
.L1221:
	ldr	r2, .L1271
	add	r1, r2, #0
	add	r1, r1, #0xf0
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L1222	@cond_branch
	mov	r0, #0x4
	strb	r0, [r1]
.L1222:
	ldrb	r0, [r2, #0xc]
	cmp	r0, #0x1
	bne	.L1223	@cond_branch
	ldr	r0, .L1271+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1227	@cond_branch
	ldr	r0, .L1271+0x8
	add	r2, r2, r0
	ldr	r0, .L1271+0xc
	ldrb	r1, [r0, #0x14]
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	cmp	r0, #0
	bne	.L1225	@cond_branch
	add	r0, r4, #0
	bl	RfuSetErrorParams
	b	.L1227
.L1272:
	.align	2, 0
.L1271:
	.word	gRfu
	.word	gReceivedRemoteLinkPlayers
	.word	0x99a
	.word	lman
.L1225:
	bl	StartDisconnectNewChild
	b	.L1227
.L1223:
	ldr	r1, .L1273
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1227	@cond_branch
	ldr	r0, .L1273+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1227	@cond_branch
	add	r0, r4, #0
	bl	RfuSetErrorParams
	mov	r0, #0x0
	bl	rfu_LMAN_stopManager
.L1227:
	ldr	r0, .L1273+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L1229	@cond_branch
	ldr	r0, .L1273+0xc
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	bne	.L1229	@cond_branch
	ldr	r0, .L1273+0x10
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1229	@cond_branch
	ldr	r1, .L1273+0x14
	mov	r0, #0x11
	strh	r0, [r1, #0x4]
.L1229:
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
	b	.L1192
.L1274:
	.align	2, 0
.L1273:
	.word	0x99c
	.word	gReceivedRemoteLinkPlayers
	.word	gRfuLinkStatus
	.word	lman
	.word	Task_UnionRoomListen
	.word	gRfu
.L1230:
	ldr	r0, .L1275
	ldr	r2, .L1275+0x4
	add	r0, r0, r2
	b	.L1248
.L1276:
	.align	2, 0
.L1275:
	.word	gRfu
	.word	0x99b
.L1234:
	mov	r0, #0x1
	mov	r1, #0xf3
	bl	RfuSetStatus
	mov	r0, #0xf3
	bl	RfuSetErrorParams
	ldr	r0, .L1277
	add	r0, r0, #0xef
	mov	r1, #0x1
	b	.L1247
.L1278:
	.align	2, 0
.L1277:
	.word	gRfu
.L1238:
	add	r0, r4, #0
	bl	RfuSetErrorParams
	mov	r0, #0x1
	add	r1, r4, #0
	bl	RfuSetStatus
	ldr	r0, .L1279
	ldr	r7, .L1279+0x4
	add	r0, r0, r7
	ldrb	r1, [r0]
.L1248:
	mov	r1, #0x0
.L1247:
	strb	r1, [r0]
.L1192:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1280:
	.align	2, 0
.L1279:
	.word	gRfu
	.word	0x993
.Lfe110:
	.size	 LinkManagerCB_UnionRoom,.Lfe110-LinkManagerCB_UnionRoom
	.align	2, 0
	.globl	RfuSetNormalDisconnectMode
	.type	 RfuSetNormalDisconnectMode,function
	.thumb_func
RfuSetNormalDisconnectMode:
	ldr	r0, .L1282
	ldr	r1, .L1282+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
	bx	lr
.L1283:
	.align	2, 0
.L1282:
	.word	gRfu
	.word	0x99c
.Lfe111:
	.size	 RfuSetNormalDisconnectMode,.Lfe111-RfuSetNormalDisconnectMode
	.align	2, 0
	.globl	RfuSetStatus
	.type	 RfuSetStatus,function
	.thumb_func
RfuSetStatus:
	ldr	r2, .L1285
	add	r3, r2, #0
	add	r3, r3, #0xf1
	strb	r0, [r3]
	strh	r1, [r2, #0xa]
	bx	lr
.L1286:
	.align	2, 0
.L1285:
	.word	gRfu
.Lfe112:
	.size	 RfuSetStatus,.Lfe112-RfuSetStatus
	.align	2, 0
	.globl	RfuGetStatus
	.type	 RfuGetStatus,function
	.thumb_func
RfuGetStatus:
	ldr	r0, .L1288
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	bx	lr
.L1289:
	.align	2, 0
.L1288:
	.word	gRfu
.Lfe113:
	.size	 RfuGetStatus,.Lfe113-RfuGetStatus
	.align	2, 0
	.globl	RfuHasErrored
	.type	 RfuHasErrored,function
	.thumb_func
RfuHasErrored:
	push	{lr}
	bl	RfuGetStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	cmp	r0, #0x1
	bls	.L1291	@cond_branch
	mov	r0, #0x0
	b	.L1293
.L1291:
	mov	r0, #0x1
.L1293:
	pop	{r1}
	bx	r1
.Lfe114:
	.size	 RfuHasErrored,.Lfe114-RfuHasErrored
	.align	2, 0
	.globl	Rfu_IsPlayerExchangeActive
	.type	 Rfu_IsPlayerExchangeActive,function
	.thumb_func
Rfu_IsPlayerExchangeActive:
	ldr	r0, .L1295
	mov	r1, #0x9a
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L1296:
	.align	2, 0
.L1295:
	.word	gRfu
.Lfe115:
	.size	 Rfu_IsPlayerExchangeActive,.Lfe115-Rfu_IsPlayerExchangeActive
	.align	2, 0
	.globl	Rfu_IsMaster
	.type	 Rfu_IsMaster,function
	.thumb_func
Rfu_IsMaster:
	ldr	r0, .L1298
	ldrb	r0, [r0, #0xc]
	bx	lr
.L1299:
	.align	2, 0
.L1298:
	.word	gRfu
.Lfe116:
	.size	 Rfu_IsMaster,.Lfe116-Rfu_IsMaster
	.align	2, 0
	.globl	RfuVSync
	.type	 RfuVSync,function
	.thumb_func
RfuVSync:
	push	{lr}
	bl	rfu_LMAN_syncVBlank
	pop	{r0}
	bx	r0
.Lfe117:
	.size	 RfuVSync,.Lfe117-RfuVSync
	.align	2, 0
	.globl	ClearRecvCommands
	.type	 ClearRecvCommands,function
	.thumb_func
ClearRecvCommands:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L1302
	ldr	r2, .L1302+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L1303:
	.align	2, 0
.L1302:
	.word	gRecvCmds
	.word	0x5000014
.Lfe118:
	.size	 ClearRecvCommands,.Lfe118-ClearRecvCommands
	.align	2, 0
	.type	 VBlank_RfuIdle,function
	.thumb_func
VBlank_RfuIdle:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe119:
	.size	 VBlank_RfuIdle,.Lfe119-VBlank_RfuIdle
	.align	2, 0
	.type	 Debug_RfuIdle,function
	.thumb_func
Debug_RfuIdle:
	push	{r4, lr}
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	bl	ResetPaletteFade
	ldr	r0, .L1312
	bl	SetVBlankCallback
	bl	IsWirelessAdapterConnected
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1306	@cond_branch
	ldr	r1, .L1312+0x4
	ldr	r2, .L1312+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	bl	SetWirelessCommType1
	bl	OpenLink
	ldr	r0, .L1312+0xc
	ldrh	r0, [r0, #0x24]
	bl	SeedRng
	mov	r4, #0x0
.L1310:
	bl	Random
	ldr	r1, .L1312+0x10
	ldr	r1, [r1]
	add	r1, r1, #0xa
	add	r1, r1, r4
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1310	@cond_branch
	mov	r1, #0xaa
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	bl	CreateTask_RfuIdle
	ldr	r0, .L1312+0x14
	bl	SetMainCallback2
.L1306:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1313:
	.align	2, 0
.L1312:
	.word	VBlank_RfuIdle
	.word	gLinkType
	.word	0x1111
	.word	gMain
	.word	gSaveBlock2Ptr
	.word	CB2_RfuIdle
.Lfe120:
	.size	 Debug_RfuIdle,.Lfe120-Debug_RfuIdle
	.align	2, 0
	.globl	IsUnionRoomListenTaskActive
	.type	 IsUnionRoomListenTaskActive,function
	.thumb_func
IsUnionRoomListenTaskActive:
	push	{lr}
	ldr	r0, .L1315
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L1316:
	.align	2, 0
.L1315:
	.word	Task_UnionRoomListen
.Lfe121:
	.size	 IsUnionRoomListenTaskActive,.Lfe121-IsUnionRoomListenTaskActive
	.align	2, 0
	.globl	CreateTask_RfuIdle
	.type	 CreateTask_RfuIdle,function
	.thumb_func
CreateTask_RfuIdle:
	push	{r4, lr}
	ldr	r4, .L1319
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1318	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	ldr	r1, .L1319+0x4
	add	r1, r1, #0x66
	strb	r0, [r1]
.L1318:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1320:
	.align	2, 0
.L1319:
	.word	Task_Idle
	.word	gRfu
.Lfe122:
	.size	 CreateTask_RfuIdle,.Lfe122-CreateTask_RfuIdle
	.align	2, 0
	.globl	DestroyTask_RfuIdle
	.type	 DestroyTask_RfuIdle,function
	.thumb_func
DestroyTask_RfuIdle:
	push	{lr}
	ldr	r0, .L1323
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1322	@cond_branch
	ldr	r0, .L1323+0x4
	add	r0, r0, #0x66
	ldrb	r0, [r0]
	bl	DestroyTask
.L1322:
	pop	{r0}
	bx	r0
.L1324:
	.align	2, 0
.L1323:
	.word	Task_Idle
	.word	gRfu
.Lfe123:
	.size	 DestroyTask_RfuIdle,.Lfe123-DestroyTask_RfuIdle
	.align	2, 0
	.type	 CB2_RfuIdle,function
	.thumb_func
CB2_RfuIdle:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe124:
	.size	 CB2_RfuIdle,.Lfe124-CB2_RfuIdle
	.align	2, 0
	.globl	InitializeRfuLinkManager_LinkLeader
	.type	 InitializeRfuLinkManager_LinkLeader,function
	.thumb_func
InitializeRfuLinkManager_LinkLeader:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r1, .L1327
	mov	r0, #0x1
	strb	r0, [r1, #0xc]
	bl	SetHostRfuUsername
	ldr	r0, .L1327+0x4
	mov	r1, #0x0
	bl	rfu_LMAN_initializeManager
	ldr	r2, .L1327+0x8
	add	r1, r2, #0
	ldr	r0, .L1327+0xc
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldr	r0, .L1327+0x10
	sub	r4, r4, #0x1
	add	r4, r4, r0
	ldrb	r0, [r4]
	strh	r0, [r2, #0x2]
	bl	CreateTask_ParentSearchForChildren
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1328:
	.align	2, 0
.L1327:
	.word	gRfu
	.word	LinkManagerCB_Parent
	.word	sRfuReqConfig
	.word	sRfuReqConfigTemplate
	.word	sAvailSlots
.Lfe125:
	.size	 InitializeRfuLinkManager_LinkLeader,.Lfe125-InitializeRfuLinkManager_LinkLeader
	.align	2, 0
	.globl	InitializeRfuLinkManager_JoinGroup
	.type	 InitializeRfuLinkManager_JoinGroup,function
	.thumb_func
InitializeRfuLinkManager_JoinGroup:
	push	{lr}
	ldr	r1, .L1330
	mov	r0, #0x0
	strb	r0, [r1, #0xc]
	bl	SetHostRfuUsername
	ldr	r0, .L1330+0x4
	ldr	r1, .L1330+0x8
	bl	rfu_LMAN_initializeManager
	bl	CreateTask_ChildSearchForParent
	pop	{r0}
	bx	r0
.L1331:
	.align	2, 0
.L1330:
	.word	gRfu
	.word	LinkManagerCB_Child
	.word	MscCallback_Child
.Lfe126:
	.size	 InitializeRfuLinkManager_JoinGroup,.Lfe126-InitializeRfuLinkManager_JoinGroup
	.align	2, 0
	.globl	InitializeRfuLinkManager_EnterUnionRoom
	.type	 InitializeRfuLinkManager_EnterUnionRoom,function
	.thumb_func
InitializeRfuLinkManager_EnterUnionRoom:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1334
	ldrb	r0, [r0]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L1332	@cond_branch
	ldr	r4, .L1334+0x4
	mov	r5, #0x0
	mov	r0, #0x2
	strb	r0, [r4, #0xc]
	bl	SetHostRfuUsername
	ldr	r0, .L1334+0x8
	mov	r1, #0x0
	bl	rfu_LMAN_initializeManager
	ldr	r2, .L1334+0xc
	add	r1, r2, #0
	ldr	r0, .L1334+0x10
	ldmia	r0!, {r3, r6, r7}
	stmia	r1!, {r3, r6, r7}
	ldmia	r0!, {r3, r6, r7}
	stmia	r1!, {r3, r6, r7}
	strb	r5, [r2, #0x11]
	mov	r0, #0x96
	lsl	r0, r0, #0x2
	strh	r0, [r2, #0x12]
	ldr	r0, .L1334+0x14
	mov	r1, #0x1
	bl	CreateTask
	add	r4, r4, #0x67
	strb	r0, [r4]
.L1332:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1335:
	.align	2, 0
.L1334:
	.word	gQuestLogState
	.word	gRfu
	.word	LinkManagerCB_UnionRoom
	.word	sRfuReqConfig
	.word	sRfuReqConfigTemplate
	.word	Task_UnionRoomListen
.Lfe127:
	.size	 InitializeRfuLinkManager_EnterUnionRoom,.Lfe127-InitializeRfuLinkManager_EnterUnionRoom
	.align	2, 0
	.type	 ReadU16,function
	.thumb_func
ReadU16:
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0]
	orr	r0, r0, r1
	bx	lr
.Lfe128:
	.size	 ReadU16,.Lfe128-ReadU16
	.align	2, 0
	.type	 GetPartnerIndexByNameAndTrainerID,function
	.thumb_func
GetPartnerIndexByNameAndTrainerID:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	str	r0, [sp]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	mov	r0, #0xff
	mov	r9, r0
	mov	r7, #0x0
	ldr	r1, .L1345
	mov	r8, r1
.L1341:
	lsl	r4, r7, #0x5
	add	r5, r4, #0
	add	r5, r5, #0x14
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r5
	add	r0, r0, #0x8
	bl	ReadU16
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	bl	IsRfuSerialNumberValid
	cmp	r0, #0
	beq	.L1340	@cond_branch
	mov	r0, r8
	ldr	r1, [r0]
	add	r1, r1, r5
	add	r1, r1, #0x15
	ldr	r0, [sp]
	bl	StringCompare
	cmp	r0, #0
	bne	.L1340	@cond_branch
	cmp	sl, r6
	bne	.L1340	@cond_branch
	mov	r9, r7
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0xff
	bne	.L1339	@cond_branch
.L1340:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L1341	@cond_branch
.L1339:
	mov	r0, r9
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1346:
	.align	2, 0
.L1345:
	.word	gRfuLinkStatus
.Lfe129:
	.size	 GetPartnerIndexByNameAndTrainerID,.Lfe129-GetPartnerIndexByNameAndTrainerID
	.align	2, 0
	.type	 RfuReqDisconnectSlot,function
	.thumb_func
RfuReqDisconnectSlot:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	ldr	r4, .L1348
	ldr	r0, .L1348+0x4
	add	r5, r4, r0
	ldrb	r0, [r5]
	bic	r0, r0, r6
	strb	r0, [r5]
	ldr	r1, .L1348+0x8
	add	r6, r4, r1
	ldrb	r1, [r6]
	mov	r0, #0x1
	bl	rfu_clearSlot
	ldrb	r0, [r5]
	ldr	r1, .L1348+0xc
	add	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x46
	bl	rfu_UNI_setSendData
	ldrb	r0, [r5]
	bl	Rfu_GetIndexOfNewestChild
	strb	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1349:
	.align	2, 0
.L1348:
	.word	gRfu
	.word	0x99a
	.word	0x992
	.word	0x93f
.Lfe130:
	.size	 RfuReqDisconnectSlot,.Lfe130-RfuReqDisconnectSlot
	.align	2, 0
	.globl	RequestDisconnectSlotByTrainerNameAndId
	.type	 RequestDisconnectSlotByTrainerNameAndId,function
	.thumb_func
RequestDisconnectSlotByTrainerNameAndId:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	GetPartnerIndexByNameAndTrainerID
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L1351	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r1
	bl	RfuReqDisconnectSlot
.L1351:
	pop	{r0}
	bx	r0
.Lfe131:
	.size	 RequestDisconnectSlotByTrainerNameAndId,.Lfe131-RequestDisconnectSlotByTrainerNameAndId
	.align	2, 0
	.globl	Rfu_DisconnectPlayerById
	.type	 Rfu_DisconnectPlayerById,function
	.thumb_func
Rfu_DisconnectPlayerById:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L1353	@cond_branch
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r5, .L1361
	add	r6, r5, #0x4
.L1357:
	add	r0, r2, r5
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L1356	@cond_branch
	ldrb	r0, [r6]
	asr	r0, r0, r2
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1356	@cond_branch
	add	r0, r1, #0
	lsl	r0, r0, r2
	orr	r3, r3, r0
	lsl	r0, r3, #0x18
	lsr	r3, r0, #0x18
.L1356:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1357	@cond_branch
	cmp	r3, #0
	beq	.L1353	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x2
	bl	SendDisconnectCommand
.L1353:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1362:
	.align	2, 0
.L1361:
	.word	gRfu+0x996
.Lfe132:
	.size	 Rfu_DisconnectPlayerById,.Lfe132-Rfu_DisconnectPlayerById
	.align	2, 0
	.type	 Task_SendDisconnectCommand,function
	.thumb_func
Task_SendDisconnectCommand:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r6, .L1365
	ldrh	r0, [r6]
	cmp	r0, #0
	bne	.L1364	@cond_branch
	ldr	r5, .L1365+0x4
	mov	r1, #0x9a
	lsl	r1, r1, #0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1364	@cond_branch
	mov	r0, #0xed
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
	ldr	r1, .L1365+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	strh	r1, [r6, #0x2]
	ldrh	r1, [r0, #0xa]
	strh	r1, [r6, #0x4]
	ldr	r1, .L1365+0xc
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r0, r0, r1
	ldrb	r1, [r5, #0xd]
	ldrb	r0, [r0]
	sub	r1, r1, r0
	strb	r1, [r5, #0xd]
	ldrb	r0, [r5, #0xd]
	strh	r0, [r6, #0x6]
	add	r0, r4, #0
	bl	DestroyTask
.L1364:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1366:
	.align	2, 0
.L1365:
	.word	gSendCmd
	.word	gRfu
	.word	gTasks
	.word	sPlayerBitsToCount
.Lfe133:
	.size	 Task_SendDisconnectCommand,.Lfe133-Task_SendDisconnectCommand
	.align	2, 0
	.type	 SendDisconnectCommand,function
	.thumb_func
SendDisconnectCommand:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	ldr	r5, .L1370
	add	r0, r5, #0
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L1368	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1370+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	b	.L1369
.L1371:
	.align	2, 0
.L1370:
	.word	Task_SendDisconnectCommand
	.word	gTasks
.L1368:
	ldr	r0, .L1372
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	orr	r4, r4, r0
	strh	r4, [r1, #0x8]
.L1369:
	ldr	r1, .L1372
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0xa]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1373:
	.align	2, 0
.L1372:
	.word	gTasks
.Lfe134:
	.size	 SendDisconnectCommand,.Lfe134-SendDisconnectCommand
	.align	2, 0
	.type	 Task_RfuReconnectWithParent,function
	.thumb_func
Task_RfuReconnectWithParent:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1387
	add	r4, r0, r1
	bl	CanTryReconnectParent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1375	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x10
	bl	ReadU16
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetPartnerIndexByNameAndTrainerID
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L1376	@cond_branch
	ldr	r0, .L1387+0x4
	ldr	r0, [r0]
	lsl	r1, r2, #0x5
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0xff
	beq	.L1377	@cond_branch
	ldr	r0, .L1387+0x8
	ldr	r1, .L1387+0xc
	add	r0, r0, r1
	strb	r2, [r0]
	bl	TryReconnectParent
	cmp	r0, #0
	beq	.L1384	@cond_branch
	b	.L1386
.L1388:
	.align	2, 0
.L1387:
	.word	gTasks+0x8
	.word	gRfuLinkStatus
	.word	gRfu
	.word	0x8f5
.L1377:
	bl	GetHostRfuGameData
	ldrb	r1, [r0, #0xa]
	mov	r5, #0x7f
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0x15
	beq	.L1375	@cond_branch
	bl	GetHostRfuGameData
	ldrb	r1, [r0, #0xa]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0x16
	beq	.L1375	@cond_branch
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	RfuSetStatus
.L1386:
	add	r0, r6, #0
	bl	DestroyTask
	b	.L1384
.L1376:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	ldr	r0, .L1389
	ldr	r1, .L1389+0x4
	add	r0, r0, r1
	strb	r2, [r0]
	b	.L1384
.L1390:
	.align	2, 0
.L1389:
	.word	gRfu
	.word	0x8f5
.L1375:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
.L1384:
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xf0
	ble	.L1385	@cond_branch
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	RfuSetStatus
	add	r0, r6, #0
	bl	DestroyTask
.L1385:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe135:
	.size	 Task_RfuReconnectWithParent,.Lfe135-Task_RfuReconnectWithParent
	.align	2, 0
	.globl	CreateTask_RfuReconnectWithParent
	.type	 CreateTask_RfuReconnectWithParent,function
	.thumb_func
CreateTask_RfuReconnectWithParent:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r5, r1, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L1392
	add	r0, r0, #0xf1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L1392+0x4
	mov	r1, #0x3
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1392+0x8
	add	r4, r4, r0
	add	r0, r4, #0
	add	r1, r6, #0
	bl	StringCopy
	strh	r5, [r4, #0x10]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1393:
	.align	2, 0
.L1392:
	.word	gRfu
	.word	Task_RfuReconnectWithParent
	.word	gTasks+0x8
.Lfe136:
	.size	 CreateTask_RfuReconnectWithParent,.Lfe136-CreateTask_RfuReconnectWithParent
	.align	2, 0
	.type	 IsPartnerActivityIncompatible,function
	.thumb_func
IsPartnerActivityIncompatible:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	bl	GetHostRfuGameData
	ldrb	r1, [r0, #0xa]
	mov	r2, #0x7f
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L1395	@cond_branch
	ldrb	r1, [r4, #0xa]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0x45
	beq	.L1397	@cond_branch
.L1408:
	mov	r0, #0x1
	b	.L1407
.L1395:
	ldrb	r1, [r4, #0xa]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L1408	@cond_branch
	cmp	r5, #0x44
	bne	.L1397	@cond_branch
	ldr	r5, .L1409
	ldrh	r0, [r5, #0x8]
	ldr	r3, .L1409+0x4
	add	r2, r3, #0
	and	r2, r2, r0
	ldr	r0, .L1409+0x8
	cmp	r2, r0
	bne	.L1401	@cond_branch
	ldrh	r1, [r4, #0x8]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, r2
	beq	.L1397	@cond_branch
	b	.L1408
.L1410:
	.align	2, 0
.L1409:
	.word	gRfu+0x10a
	.word	0x3ff
	.word	0x19d
.L1401:
	ldrh	r1, [r4, #0x8]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, r2
	bne	.L1408	@cond_branch
	ldrb	r2, [r4, #0xb]
	mov	r0, #0xfe
	ldrb	r3, [r5, #0xb]
	add	r1, r0, #0
	and	r1, r1, r2
	and	r0, r0, r3
	cmp	r1, r0
	bne	.L1408	@cond_branch
	ldrb	r2, [r4, #0x9]
	mov	r0, #0xfc
	ldrb	r3, [r5, #0x9]
	add	r1, r0, #0
	and	r1, r1, r2
	and	r0, r0, r3
	cmp	r1, r0
	bne	.L1408	@cond_branch
.L1397:
	mov	r0, #0x0
.L1407:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe137:
	.size	 IsPartnerActivityIncompatible,.Lfe137-IsPartnerActivityIncompatible
	.align	2, 0
	.type	 Task_TryConnectToUnionRoomParent,function
	.thumb_func
Task_TryConnectToUnionRoomParent:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r8, r5
	ldr	r6, .L1419
	add	r0, r6, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bne	.L1412	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
.L1412:
	ldr	r1, .L1419+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	mov	r1, #0x96
	lsl	r1, r1, #0x11
	cmp	r0, r1
	ble	.L1413	@cond_branch
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	RfuSetStatus
	add	r0, r5, #0
	bl	DestroyTask
.L1413:
	ldr	r1, .L1419+0x8
	add	r0, r6, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1414	@cond_branch
	ldr	r0, .L1419+0xc
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	bne	.L1414	@cond_branch
	mov	r2, #0x86
	lsl	r2, r2, #0x1
	add	r0, r6, r2
	bl	ReadU16
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L1419+0x10
	add	r0, r6, r2
	bl	GetPartnerIndexByNameAndTrainerID
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L1414	@cond_branch
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	ldr	r7, .L1419+0x14
	lsl	r4, r2, #0x5
	add	r2, r4, #0
	add	r2, r2, #0x14
	ldr	r1, [r7]
	add	r1, r1, r2
	add	r1, r1, #0x6
	bl	IsPartnerActivityIncompatible
	cmp	r0, #0
	bne	.L1416	@cond_branch
	ldr	r0, [r7]
	add	r1, r0, r4
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0xff
	beq	.L1414	@cond_branch
	ldrh	r0, [r1, #0x14]
	mov	r1, #0x5a
	bl	rfu_LMAN_CHILD_connectParent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1414	@cond_branch
	mov	r0, #0xa
	strh	r0, [r6, #0x4]
	add	r0, r5, #0
	bl	DestroyTask
	b	.L1414
.L1420:
	.align	2, 0
.L1419:
	.word	gRfu
	.word	gTasks
	.word	0x985
	.word	lman
	.word	0x119
	.word	gRfuLinkStatus
.L1416:
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	RfuSetStatus
	mov	r0, r8
	bl	DestroyTask
.L1414:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe138:
	.size	 Task_TryConnectToUnionRoomParent,.Lfe138-Task_TryConnectToUnionRoomParent
	.align	2, 0
	.globl	TryConnectToUnionRoomParent
	.type	 TryConnectToUnionRoomParent,function
	.thumb_func
TryConnectToUnionRoomParent:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	lsl	r4, r2, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L1426
	ldr	r1, .L1426+0x4
	add	r0, r6, r1
	mov	r7, #0x0
	strb	r7, [r0]
	add	r0, r6, #0
	add	r0, r0, #0xf1
	strb	r7, [r0]
	ldr	r1, .L1426+0x8
	add	r0, r6, r1
	add	r1, r3, #0
	bl	StringCopy
	mov	r1, #0x85
	lsl	r1, r1, #0x1
	add	r0, r6, r1
	add	r1, r5, #0
	mov	r2, #0xd
	bl	memcpy
	bl	rfu_LMAN_forceChangeSP
	ldr	r0, .L1426+0xc
	mov	r1, #0x2
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L1426+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	strh	r4, [r1, #0xa]
	ldr	r0, .L1426+0x14
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r2, r1, #0
	cmp	r4, #0x45
	bne	.L1422	@cond_branch
	cmp	r1, #0xff
	beq	.L1424	@cond_branch
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r1, #0x1
	strh	r1, [r0, #0x16]
	b	.L1424
.L1427:
	.align	2, 0
.L1426:
	.word	gRfu
	.word	0x987
	.word	0x119
	.word	Task_TryConnectToUnionRoomParent
	.word	gTasks
	.word	Task_UnionRoomListen
.L1422:
	cmp	r2, #0xff
	beq	.L1424	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r7, [r0, #0x16]
.L1424:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe139:
	.size	 TryConnectToUnionRoomParent,.Lfe139-TryConnectToUnionRoomParent
	.align	2, 0
	.globl	IsRfuRecoveringFromLinkLoss
	.type	 IsRfuRecoveringFromLinkLoss,function
	.thumb_func
IsRfuRecoveringFromLinkLoss:
	push	{lr}
	ldr	r0, .L1432
	add	r0, r0, #0xf0
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L1429	@cond_branch
	mov	r0, #0x0
	b	.L1431
.L1433:
	.align	2, 0
.L1432:
	.word	gRfu
.L1429:
	mov	r0, #0x1
.L1431:
	pop	{r1}
	bx	r1
.Lfe140:
	.size	 IsRfuRecoveringFromLinkLoss,.Lfe140-IsRfuRecoveringFromLinkLoss
	.align	2, 0
	.globl	IsRfuCommunicatingWithAllChildren
	.type	 IsRfuCommunicatingWithAllChildren,function
	.thumb_func
IsRfuCommunicatingWithAllChildren:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r0, .L1442
	ldrb	r2, [r0]
	ldr	r4, .L1442+0x4
	mov	r3, #0x1
.L1438:
	add	r0, r2, #0
	asr	r0, r0, r1
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1437	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1437	@cond_branch
	mov	r0, #0x0
	b	.L1441
.L1443:
	.align	2, 0
.L1442:
	.word	lman
	.word	gRfu+0x989
.L1437:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L1438	@cond_branch
	mov	r0, #0x1
.L1441:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe141:
	.size	 IsRfuCommunicatingWithAllChildren,.Lfe141-IsRfuCommunicatingWithAllChildren
	.align	2, 0
	.type	 Debug_PrintEmpty,function
	.thumb_func
Debug_PrintEmpty:
	push	{r4, lr}
	mov	r4, #0x0
.L1448:
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L1450
	mov	r1, #0x0
	bl	Debug_PrintString
	add	r4, r4, #0x1
	cmp	r4, #0x13
	ble	.L1448	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1451:
	.align	2, 0
.L1450:
	.word	sASCII_30Spaces
.Lfe142:
	.size	 Debug_PrintEmpty,.Lfe142-Debug_PrintEmpty
	.align	2, 0
	.type	 Debug_PrintStatus,function
	.thumb_func
Debug_PrintStatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1c
	mov	r2, #0x13
	mov	r3, #0x2
	bl	Debug_PrintNum
	ldr	r4, .L1489
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	mov	r1, #0x14
	mov	r2, #0x1
	mov	r3, #0x1
	bl	Debug_PrintNum
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x3]
	mov	r1, #0x17
	mov	r2, #0x1
	mov	r3, #0x1
	bl	Debug_PrintNum
	ldr	r0, .L1489+0x4
	ldrb	r0, [r0, #0xc]
	cmp	r0, #0x1
	bne	.L1453	@cond_branch
	mov	r6, #0x0
	add	r7, r4, #0
	mov	r5, #0x14
.L1457:
	ldr	r2, [r7]
	ldrb	r0, [r2, #0x7]
	asr	r0, r0, r6
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1456	@cond_branch
	lsl	r0, r6, #0x5
	add	r0, r2, r0
	ldrh	r0, [r0, #0x18]
	add	r4, r6, #0x3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r2, r4, #0
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldr	r0, [r7]
	add	r0, r0, r5
	add	r0, r0, #0x6
	mov	r1, #0x6
	add	r2, r4, #0
	bl	Debug_PrintString
	ldr	r0, [r7]
	add	r0, r0, r5
	add	r0, r0, #0x15
	mov	r1, #0x16
	add	r2, r4, #0
	bl	Debug_PrintString
.L1456:
	add	r5, r5, #0x20
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L1457	@cond_branch
	mov	r6, #0x0
	ldr	r0, .L1489+0x4
	mov	r8, r0
.L1463:
	mov	r5, #0x0
	add	r7, r6, #0x1
	lsl	r0, r6, #0x3
	add	r2, r6, #0
	add	r2, r2, #0xb
	sub	r0, r0, r6
	lsl	r0, r0, #0x1
	mov	r1, r8
	add	r1, r1, #0x14
	add	r4, r0, r1
	lsl	r6, r2, #0x18
.L1467:
	ldrb	r0, [r4]
	lsl	r1, r5, #0x19
	lsr	r1, r1, #0x18
	lsr	r2, r6, #0x18
	mov	r3, #0x2
	bl	Debug_PrintNum
	add	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0xd
	ble	.L1467	@cond_branch
	add	r6, r7, #0
	cmp	r6, #0x3
	ble	.L1463	@cond_branch
	ldr	r0, .L1489+0x8
	mov	r1, #0x1
	mov	r2, #0xf
	bl	Debug_PrintString
	b	.L1470
.L1490:
	.align	2, 0
.L1489:
	.word	gRfuLinkStatus
	.word	gRfu
	.word	sASCII_NowSlot
.L1453:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L1471	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0
	beq	.L1471	@cond_branch
	mov	r6, #0x0
	mov	r5, #0xc0
	lsl	r5, r5, #0x12
.L1475:
	lsr	r4, r5, #0x18
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldr	r0, .L1491
	mov	r1, #0x6
	add	r2, r4, #0
	bl	Debug_PrintString
	ldr	r0, .L1491+0x4
	mov	r1, #0x16
	add	r2, r4, #0
	bl	Debug_PrintString
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r5, r5, r1
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L1475	@cond_branch
	ldr	r5, .L1491+0x8
	ldr	r1, [r5]
	ldr	r4, .L1491+0xc
	ldr	r0, .L1491+0x10
	add	r4, r4, r0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	mov	r1, #0x1
	mov	r2, #0x3
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldrb	r1, [r4]
	lsl	r1, r1, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r5]
	add	r0, r0, r1
	add	r0, r0, #0x6
	mov	r1, #0x6
	mov	r2, #0x3
	bl	Debug_PrintString
	ldrb	r1, [r4]
	lsl	r1, r1, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r5]
	add	r0, r0, r1
	add	r0, r0, #0x15
	mov	r1, #0x16
	mov	r2, #0x3
	bl	Debug_PrintString
	b	.L1470
.L1492:
	.align	2, 0
.L1491:
	.word	sASCII_15Spaces
	.word	sASCII_8Spaces
	.word	gRfuLinkStatus
	.word	gRfu
	.word	0x8f6
.L1471:
	mov	r6, #0x0
	ldr	r1, .L1493
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x8]
	cmp	r6, r0
	bge	.L1479	@cond_branch
	add	r7, r1, #0
	mov	r1, #0x14
	mov	r8, r1
.L1481:
	ldr	r0, [r7]
	lsl	r5, r6, #0x5
	add	r1, r0, r5
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0xff
	beq	.L1480	@cond_branch
	ldrh	r0, [r1, #0x18]
	add	r4, r6, #0x3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldr	r0, [r7]
	add	r0, r0, r5
	ldrh	r0, [r0, #0x14]
	mov	r1, #0x6
	add	r2, r4, #0
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldr	r0, [r7]
	add	r0, r0, r8
	add	r0, r0, #0x15
	mov	r1, #0x16
	add	r2, r4, #0
	bl	Debug_PrintString
.L1480:
	mov	r0, #0x20
	add	r8, r8, r0
	add	r6, r6, #0x1
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x8]
	cmp	r6, r0
	blt	.L1481	@cond_branch
.L1479:
	cmp	r6, #0x3
	bgt	.L1470	@cond_branch
	lsl	r0, r6, #0x18
	mov	r1, #0xc0
	lsl	r1, r1, #0x12
	add	r5, r0, r1
.L1487:
	lsr	r4, r5, #0x18
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldr	r0, .L1493+0x4
	mov	r1, #0x6
	add	r2, r4, #0
	bl	Debug_PrintString
	ldr	r0, .L1493+0x8
	mov	r1, #0x16
	add	r2, r4, #0
	bl	Debug_PrintString
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r5, r5, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L1487	@cond_branch
.L1470:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1494:
	.align	2, 0
.L1493:
	.word	gRfuLinkStatus
	.word	sASCII_15Spaces
	.word	sASCII_8Spaces
.Lfe143:
	.size	 Debug_PrintStatus,.Lfe143-Debug_PrintStatus
	.align	2, 0
	.type	 GetRfuSendQueueLength,function
	.thumb_func
GetRfuSendQueueLength:
	ldr	r0, .L1496
	ldr	r1, .L1496+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L1497:
	.align	2, 0
.L1496:
	.word	gRfu
	.word	0x8d2
.Lfe144:
	.size	 GetRfuSendQueueLength,.Lfe144-GetRfuSendQueueLength
	.align	2, 0
	.globl	GetRfuRecvQueueLength
	.type	 GetRfuRecvQueueLength,function
	.thumb_func
GetRfuRecvQueueLength:
	ldr	r0, .L1499
	ldr	r1, .L1499+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L1500:
	.align	2, 0
.L1499:
	.word	gRfu
	.word	0x69e
.Lfe145:
	.size	 GetRfuRecvQueueLength,.Lfe145-GetRfuRecvQueueLength
	.align	2, 0
	.type	 Task_Idle,function
	.thumb_func
Task_Idle:
	bx	lr
.Lfe146:
	.size	 Task_Idle,.Lfe146-Task_Idle
	.comm	gHostRfuGameData, 16	@ 14
	.comm	gHostRfuUsername, 8	@ 8
	.comm	gRfu, 2476	@ 2476

	.lcomm	sRfuAPIBuffer,3684

	.lcomm	sResendBlock8,16

	.lcomm	sResendBlock16,16
.text
	.align	2, 0 @ Don't pad with nop

