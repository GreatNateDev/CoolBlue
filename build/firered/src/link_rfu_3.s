@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sWirelessStatusIndicatorSpriteId,object
	.size	 sWirelessStatusIndicatorSpriteId,1
sWirelessStatusIndicatorSpriteId:
	.byte	0x0
	.section .rodata
	.align	1, 0
	.type	 sWirelessLinkIconPalette,object
sWirelessLinkIconPalette:
	.short	0x7ed5
	.short	0x5250
	.short	0x7bdd
	.short	0x5ed6
	.short	0x3569
	.short	0x1f
	.short	0x42df
	.short	0x7fff
	.short	0x0
	.short	0x7bdd
	.short	0x7bdd
	.short	0x7bdd
	.short	0x7bdd
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sWirelessLinkIconPalette,32
	.align	2, 0
	.type	 sWirelessLinkIconPic,object
sWirelessLinkIconPic:
	.word	0x38010
	.word	0x44444000
	.word	0x77773444
	.word	-0xf8b8a89
	.word	0x32003
	.word	0x600041e
	.word	0x48030043
	.word	0x7c03f047
	.word	-0x56d49fb4
	.word	0x7430777a
	.word	0x10030079
	.word	0x7777a907
	.word	0x700e034
	.word	0x23105b10
	.word	0x4ccc7777
	.word	0x7bb73377
	.word	0x3000700
	.word	0x37007bb7
	.word	-0x48e0fd00
	.word	0x5b10437b
	.word	0x7ff07ff0
	.word	0x7ff07ff0
	.word	0x44770080
	.word	0x324a7974
	.word	0x4a02a974
	.word	0x47a97411
	.word	0x447fd044
	.word	0x337f0080
	.word	0x114c7b74
	.word	0x471f7bb4
	.word	0x7ff07444
	.word	0x7ff07bf0
	.word	0x7f2003f0
	.word	0x7ff0576e
	.word	-0xf8a8090
	.word	-0xf800f81
	.word	0x740d5577
	.word	-0xf89a889
	.word	0x5503307f
	.word	0x673e0300
	.word	-0xf800f8b
	.word	-0xf800f81
	.word	0x577f507f
	.word	0x65730086
	.word	0x60577477
	.word	0x55ffa07f
	.word	0x566f10ab
	.word	0x20757310
	.word	0x7ff0777f
	.word	-0xf038010
	.word	-0xf800f81
	.word	-0xe800e01
	.word	-0x56000e81
	.word	0x74550a7a
	.word	0x7f005a79
	.word	0x577f005a
	.word	-0x2eaaac
	.word	0x757f1055
	.word	0x7bb57f00
	.word	0x75554710
	.word	0x55547fb0
	.word	-0xf08aaab
	.word	0x10033003
	.word	0x45060023
	.word	0x33003f0
	.word	0x972b80
	.word	0x324547
	.word	0x3001103
	.word	0x5b105320
	.word	0x2750ce
	.word	0x70334508
	.word	0x13301c
	.word	0x5b
	.size	 sWirelessLinkIconPic,292
	.type	 sWireless_ASCIItoRSETable,object
sWireless_ASCIItoRSETable:
	.byte	0xff
	.byte	0x95
	.byte	0x96
	.byte	0x97
	.byte	0x98
	.byte	0x99
	.byte	0x9a
	.byte	0x37
	.byte	0x38
	.byte	0x39
	.byte	0x3a
	.byte	0x3b
	.byte	0x3c
	.byte	0x3d
	.byte	0x3e
	.byte	0x3f
	.byte	0x40
	.byte	0x41
	.byte	0x42
	.byte	0x43
	.byte	0x44
	.byte	0x45
	.byte	0x46
	.byte	0x47
	.byte	0x48
	.byte	0x49
	.byte	0x4a
	.byte	0x4b
	.byte	0x4c
	.byte	0x4d
	.byte	0x4e
	.byte	0x4f
	.byte	0x0
	.byte	0xab
	.byte	0xb5
	.byte	0xb6
	.byte	0xb1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xb2
	.byte	0xf1
	.byte	0x0
	.byte	0xae
	.byte	0xad
	.byte	0xba
	.byte	0xa1
	.byte	0xa2
	.byte	0xa3
	.byte	0xa4
	.byte	0xa5
	.byte	0xa6
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0x0
	.byte	0x9b
	.byte	0x9c
	.byte	0x9d
	.byte	0x9e
	.byte	0x9f
	.byte	0x0
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.byte	0xc1
	.byte	0xc2
	.byte	0xc3
	.byte	0xc4
	.byte	0xc5
	.byte	0xc6
	.byte	0xc7
	.byte	0xc8
	.byte	0xc9
	.byte	0xca
	.byte	0xcb
	.byte	0xcc
	.byte	0xcd
	.byte	0xce
	.byte	0xcf
	.byte	0xd0
	.byte	0xd1
	.byte	0xd2
	.byte	0xd3
	.byte	0xd4
	.byte	0xf2
	.byte	0xf3
	.byte	0xf4
	.byte	0xf5
	.byte	0xf6
	.byte	0x0
	.byte	0xd5
	.byte	0xd6
	.byte	0xd7
	.byte	0xd8
	.byte	0xd9
	.byte	0xda
	.byte	0xdb
	.byte	0xdc
	.byte	0xdd
	.byte	0xde
	.byte	0xdf
	.byte	0xe0
	.byte	0xe1
	.byte	0xe2
	.byte	0xe3
	.byte	0xe4
	.byte	0xe5
	.byte	0xe6
	.byte	0xe7
	.byte	0xe8
	.byte	0xe9
	.byte	0xea
	.byte	0xeb
	.byte	0xec
	.byte	0xed
	.byte	0xee
	.byte	0x2d
	.byte	0x2f
	.byte	0x30
	.byte	0x31
	.byte	0x32
	.byte	0x33
	.byte	0x34
	.byte	0x35
	.byte	0x36
	.byte	0x50
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x15
	.byte	0x16
	.byte	0x17
	.byte	0x18
	.byte	0x19
	.byte	0x1a
	.byte	0x1b
	.byte	0xad
	.byte	0xb3
	.byte	0xb4
	.byte	0x0
	.byte	0xaf
	.byte	0x7d
	.byte	0x7f
	.byte	0x80
	.byte	0x81
	.byte	0x82
	.byte	0x83
	.byte	0x84
	.byte	0x85
	.byte	0x86
	.byte	0xa0
	.byte	0xae
	.byte	0x51
	.byte	0x52
	.byte	0x53
	.byte	0x54
	.byte	0x55
	.byte	0x56
	.byte	0x57
	.byte	0x58
	.byte	0x59
	.byte	0x5a
	.byte	0x5b
	.byte	0x5c
	.byte	0x5d
	.byte	0x5e
	.byte	0x5f
	.byte	0x60
	.byte	0x61
	.byte	0x62
	.byte	0x63
	.byte	0x64
	.byte	0x65
	.byte	0x66
	.byte	0x67
	.byte	0x68
	.byte	0x69
	.byte	0x6a
	.byte	0x6b
	.byte	0x6c
	.byte	0x6d
	.byte	0x6e
	.byte	0x6f
	.byte	0x70
	.byte	0x71
	.byte	0x72
	.byte	0x73
	.byte	0x74
	.byte	0x75
	.byte	0x76
	.byte	0x77
	.byte	0x78
	.byte	0x79
	.byte	0x7a
	.byte	0x7b
	.byte	0x7c
	.byte	0x7e
	.byte	0xb0
	.byte	0xac
	.byte	0x1c
	.byte	0x1d
	.byte	0x1e
	.byte	0x1f
	.byte	0x20
	.byte	0x21
	.byte	0x22
	.byte	0x23
	.byte	0x24
	.byte	0x25
	.byte	0x26
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.byte	0x2a
	.byte	0x2b
	.byte	0x2c
	.byte	0x2e
	.byte	0x87
	.byte	0x88
	.byte	0x89
	.byte	0x8a
	.byte	0x8b
	.byte	0x8c
	.byte	0x8d
	.byte	0x8e
	.byte	0x8f
	.byte	0x90
	.byte	0x91
	.byte	0x92
	.byte	0x93
	.byte	0x94
	.size	 sWireless_ASCIItoRSETable,256
	.type	 sWireless_RSEtoASCIITable,object
sWireless_RSEtoASCIITable:
	.byte	0x20
	.byte	0x86
	.byte	0x87
	.byte	0x88
	.byte	0x89
	.byte	0x8a
	.byte	0x8b
	.byte	0x8c
	.byte	0x8d
	.byte	0x8e
	.byte	0x8f
	.byte	0x90
	.byte	0x91
	.byte	0x92
	.byte	0x93
	.byte	0x94
	.byte	0x95
	.byte	0x96
	.byte	0x97
	.byte	0x98
	.byte	0x99
	.byte	0x9a
	.byte	0x9b
	.byte	0x9c
	.byte	0x9d
	.byte	0x9e
	.byte	0x9f
	.byte	0xa0
	.byte	0xe0
	.byte	0xe1
	.byte	0xe2
	.byte	0xe3
	.byte	0xe4
	.byte	0xe5
	.byte	0xe6
	.byte	0xe7
	.byte	0xe8
	.byte	0xe9
	.byte	0xea
	.byte	0xeb
	.byte	0xec
	.byte	0xed
	.byte	0xee
	.byte	0xef
	.byte	0xf0
	.byte	0x7b
	.byte	0xf1
	.byte	0x7c
	.byte	0x7d
	.byte	0x7e
	.byte	0x7f
	.byte	0x80
	.byte	0x81
	.byte	0x82
	.byte	0x83
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x15
	.byte	0x16
	.byte	0x17
	.byte	0x18
	.byte	0x19
	.byte	0x1a
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.byte	0x1e
	.byte	0x1f
	.byte	0x84
	.byte	0xb1
	.byte	0xb2
	.byte	0xb3
	.byte	0xb4
	.byte	0xb5
	.byte	0xb6
	.byte	0xb7
	.byte	0xb8
	.byte	0xb9
	.byte	0xba
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.byte	0xc1
	.byte	0xc2
	.byte	0xc3
	.byte	0xc4
	.byte	0xc5
	.byte	0xc6
	.byte	0xc7
	.byte	0xc8
	.byte	0xc9
	.byte	0xca
	.byte	0xcb
	.byte	0xcc
	.byte	0xcd
	.byte	0xce
	.byte	0xcf
	.byte	0xd0
	.byte	0xd1
	.byte	0xd2
	.byte	0xd3
	.byte	0xd4
	.byte	0xd5
	.byte	0xd6
	.byte	0xd7
	.byte	0xd8
	.byte	0xd9
	.byte	0xda
	.byte	0xdb
	.byte	0xdc
	.byte	0xa6
	.byte	0xdd
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0xab
	.byte	0xac
	.byte	0xad
	.byte	0xae
	.byte	0xf2
	.byte	0xf3
	.byte	0xf4
	.byte	0xf5
	.byte	0xf6
	.byte	0xf7
	.byte	0xf8
	.byte	0xf9
	.byte	0xfa
	.byte	0xfb
	.byte	0xfc
	.byte	0xfd
	.byte	0xfe
	.byte	0xff
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x3b
	.byte	0x3c
	.byte	0x3d
	.byte	0x3e
	.byte	0x3f
	.byte	0xaf
	.byte	0x30
	.byte	0x31
	.byte	0x32
	.byte	0x33
	.byte	0x34
	.byte	0x35
	.byte	0x36
	.byte	0x37
	.byte	0x38
	.byte	0x39
	.byte	0x21
	.byte	0xdf
	.byte	0xa1
	.byte	0xb0
	.byte	0xa5
	.byte	0xde
	.byte	0x24
	.byte	0x2a
	.byte	0xa2
	.byte	0xa3
	.byte	0x22
	.byte	0x23
	.byte	0x20
	.byte	0xa4
	.byte	0x20
	.byte	0x2f
	.byte	0x41
	.byte	0x42
	.byte	0x43
	.byte	0x44
	.byte	0x45
	.byte	0x46
	.byte	0x47
	.byte	0x48
	.byte	0x49
	.byte	0x4a
	.byte	0x4b
	.byte	0x4c
	.byte	0x4d
	.byte	0x4e
	.byte	0x4f
	.byte	0x50
	.byte	0x51
	.byte	0x52
	.byte	0x53
	.byte	0x54
	.byte	0x55
	.byte	0x56
	.byte	0x57
	.byte	0x58
	.byte	0x59
	.byte	0x5a
	.byte	0x61
	.byte	0x62
	.byte	0x63
	.byte	0x64
	.byte	0x65
	.byte	0x66
	.byte	0x67
	.byte	0x68
	.byte	0x69
	.byte	0x6a
	.byte	0x6b
	.byte	0x6c
	.byte	0x6d
	.byte	0x6e
	.byte	0x6f
	.byte	0x70
	.byte	0x71
	.byte	0x72
	.byte	0x73
	.byte	0x74
	.byte	0x75
	.byte	0x76
	.byte	0x77
	.byte	0x78
	.byte	0x79
	.byte	0x7a
	.byte	0x20
	.byte	0x20
	.byte	0x2b
	.byte	0x5b
	.byte	0x5c
	.byte	0x5d
	.byte	0x5e
	.byte	0x5f
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x0
	.size	 sWireless_RSEtoASCIITable,256
	.align	2, 0
	.type	 sWirelessStatusIndicatorOamData,object
	.size	 sWirelessStatusIndicatorOamData,8
sWirelessStatusIndicatorOamData:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.space	2
	.align	2, 0
	.type	 sWirelessStatusIndicator_3Bars,object
sWirelessStatusIndicator_3Bars:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0xa
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicator_3Bars,28
	.align	2, 0
	.type	 sWirelessStatusIndicator_2Bars,object
sWirelessStatusIndicator_2Bars:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0xa
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicator_2Bars,20
	.align	2, 0
	.type	 sWirelessStatusIndicator_1Bar,object
sWirelessStatusIndicator_1Bar:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicator_1Bar,12
	.align	2, 0
	.type	 sWirelessStatusIndicator_Searching,object
sWirelessStatusIndicator_Searching:
	.short	0x4
	.byte	0xa
	.space	1
	.short	0x14
	.byte	0xa
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicator_Searching,12
	.align	2, 0
	.type	 sWirelessStatusIndicator_Error,object
sWirelessStatusIndicator_Error:
	.short	0x18
	.byte	0xa
	.space	1
	.short	0x4
	.byte	0xa
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicator_Error,12
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnims,object
sWirelessStatusIndicatorAnims:
	.word	sWirelessStatusIndicator_3Bars
	.word	sWirelessStatusIndicator_2Bars
	.word	sWirelessStatusIndicator_1Bar
	.word	sWirelessStatusIndicator_Searching
	.word	sWirelessStatusIndicator_Error
	.size	 sWirelessStatusIndicatorAnims,20
	.align	2, 0
	.type	 sWirelessStatusIndicatorSpriteSheet,object
	.size	 sWirelessStatusIndicatorSpriteSheet,8
sWirelessStatusIndicatorSpriteSheet:
	.word	sWirelessLinkIconPic
	.short	0x380
	.short	0xd431
	.align	2, 0
	.type	 sWirelessStatusIndicatorSpritePalette,object
	.size	 sWirelessStatusIndicatorSpritePalette,8
sWirelessStatusIndicatorSpritePalette:
	.word	sWirelessLinkIconPalette
	.short	0xd432
	.space	2
	.align	2, 0
	.type	 sWirelessStatusIndicatorSpriteTemplate,object
	.size	 sWirelessStatusIndicatorSpriteTemplate,24
sWirelessStatusIndicatorSpriteTemplate:
	.short	0xd431
	.short	0xd432
	.word	sWirelessStatusIndicatorOamData
	.word	sWirelessStatusIndicatorAnims
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
.text
	.align	2, 0
	.globl	RfuRecvQueue_Reset
	.type	 RfuRecvQueue_Reset,function
	.thumb_func
RfuRecvQueue_Reset:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r0, #0x0
	mov	r4, #0x0
	mov	r5, #0x46
.L8:
	add	r2, r0, #0x1
	mov	r1, #0x45
	mul	r0, r0, r5
	add	r0, r0, r3
	add	r0, r0, #0x45
.L12:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L12	@cond_branch
	add	r0, r2, #0
	cmp	r0, #0x13
	ble	.L8	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L15
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r2, #0xaf
	lsl	r2, r2, #0x3
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L15+0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L15+0x8
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	0x579
	.word	0x57a
	.word	0x57b
.Lfe1:
	.size	 RfuRecvQueue_Reset,.Lfe1-RfuRecvQueue_Reset
	.align	2, 0
	.globl	RfuSendQueue_Reset
	.type	 RfuSendQueue_Reset,function
	.thumb_func
RfuSendQueue_Reset:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r1, #0x0
	mov	r4, #0x0
.L21:
	lsl	r0, r1, #0x3
	add	r2, r1, #0x1
	sub	r0, r0, r1
	mov	r1, #0xd
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	add	r0, r0, #0xd
.L25:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L25	@cond_branch
	add	r1, r2, #0
	cmp	r1, #0x27
	ble	.L21	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L28
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r2, #0x8c
	lsl	r2, r2, #0x2
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L28+0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L28+0x8
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	0x231
	.word	0x232
	.word	0x233
.Lfe2:
	.size	 RfuSendQueue_Reset,.Lfe2-RfuSendQueue_Reset
	.align	2, 0
	.type	 RfuUnusedQueue_Reset,function
	.thumb_func
RfuUnusedQueue_Reset:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r1, #0x0
	mov	r4, #0x0
.L34:
	lsl	r0, r1, #0x8
	add	r2, r1, #0x1
	mov	r1, #0xff
	add	r0, r0, r3
	add	r0, r0, #0xff
.L38:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L38	@cond_branch
	add	r1, r2, #0
	cmp	r1, #0x1
	ble	.L34	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L41
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L41+0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L41+0x8
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L42:
	.align	2, 0
.L41:
	.word	0x201
	.word	0x202
	.word	0x203
.Lfe3:
	.size	 RfuUnusedQueue_Reset,.Lfe3-RfuUnusedQueue_Reset
	.align	2, 0
	.globl	RfuRecvQueue_Enqueue
	.type	 RfuRecvQueue_Enqueue,function
	.thumb_func
RfuRecvQueue_Enqueue:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	ldr	r1, .L63
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0x13
	bhi	.L44	@cond_branch
	ldr	r0, .L63+0x4
	ldrh	r1, [r0]
	add	r7, r1, #0
	mov	r1, #0x0
	strh	r1, [r0]
	mov	r3, #0x0
	mov	r2, #0x0
.L48:
	add	r1, r6, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L47	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L47	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L47:
	add	r2, r2, #0xe
	cmp	r2, #0x45
	ble	.L48	@cond_branch
	cmp	r3, #0x5
	beq	.L51	@cond_branch
	mov	r2, #0x0
	mov	r0, #0xaf
	lsl	r0, r0, #0x3
	add	r3, r5, r0
	mov	r4, #0x46
.L55:
	ldrb	r0, [r3]
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r2, r1
	add	r1, r5, r1
	add	r0, r6, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x45
	ble	.L55	@cond_branch
	mov	r1, #0xaf
	lsl	r1, r1, #0x3
	add	r4, r5, r1
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x14
	bl	__umodsi3
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldr	r0, .L63
	add	r1, r5, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r1, #0x0
	add	r0, r6, #0
	add	r0, r0, #0x45
.L60:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r6
	bge	.L60	@cond_branch
.L51:
	ldr	r0, .L63+0x4
	strh	r7, [r0]
	b	.L62
.L64:
	.align	2, 0
.L63:
	.word	0x57a
	.word	0x4000208
.L44:
	ldr	r1, .L65
	add	r0, r5, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
.L62:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	0x57b
.Lfe4:
	.size	 RfuRecvQueue_Enqueue,.Lfe4-RfuRecvQueue_Enqueue
	.align	2, 0
	.globl	RfuSendQueue_Enqueue
	.type	 RfuSendQueue_Enqueue,function
	.thumb_func
RfuSendQueue_Enqueue:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	ldr	r1, .L87
	add	r0, r6, r1
	ldrb	r0, [r0]
	cmp	r0, #0x27
	bhi	.L68	@cond_branch
	ldr	r1, .L87+0x4
	ldrh	r0, [r1]
	add	r7, r0, #0
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r2, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L70	@cond_branch
.L71:
	add	r2, r2, #0x1
	cmp	r2, #0xd
	bgt	.L70	@cond_branch
	add	r0, r5, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L71	@cond_branch
.L70:
	cmp	r2, #0xe
	beq	.L75	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x8c
	lsl	r0, r0, #0x2
	add	r3, r6, r0
.L79:
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r2, r0
	add	r0, r6, r0
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xd
	ble	.L79	@cond_branch
	mov	r1, #0x8c
	lsl	r1, r1, #0x2
	add	r4, r6, r1
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x28
	bl	__umodsi3
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldr	r0, .L87
	add	r1, r6, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r1, #0x0
	add	r0, r5, #0
	add	r0, r0, #0xd
.L84:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r5
	bge	.L84	@cond_branch
.L75:
	ldr	r0, .L87+0x4
	strh	r7, [r0]
	b	.L86
.L88:
	.align	2, 0
.L87:
	.word	0x232
	.word	0x4000208
.L68:
	ldr	r1, .L89
	add	r0, r6, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
.L86:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	0x233
.Lfe5:
	.size	 RfuSendQueue_Enqueue,.Lfe5-RfuSendQueue_Enqueue
	.align	2, 0
	.globl	RfuRecvQueue_Dequeue
	.type	 RfuRecvQueue_Dequeue,function
	.thumb_func
RfuRecvQueue_Dequeue:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	add	r3, r1, #0
	ldr	r1, .L105
	ldrh	r0, [r1]
	mov	r8, r0
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0xaf
	lsl	r1, r1, #0x3
	add	r0, r5, r1
	ldr	r7, .L105+0x4
	add	r4, r5, r7
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	cmp	r1, r0
	beq	.L93	@cond_branch
	ldr	r1, .L105+0x8
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L92	@cond_branch
.L93:
	mov	r1, #0x0
	add	r0, r3, #0
	add	r0, r0, #0x45
.L97:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r3
	bge	.L97	@cond_branch
	ldr	r0, .L105
	mov	r7, r8
	strh	r7, [r0]
	mov	r0, #0x0
	b	.L104
.L106:
	.align	2, 0
.L105:
	.word	0x4000208
	.word	0x579
	.word	0x57b
.L92:
	mov	r2, #0x0
	mov	r6, #0x46
.L102:
	add	r1, r3, r2
	ldrb	r0, [r4]
	mov	r7, r0
	mul	r7, r7, r6
	add	r0, r7, #0
	add	r0, r2, r0
	add	r0, r5, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x45
	ble	.L102	@cond_branch
	ldr	r0, .L107
	add	r4, r5, r0
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x14
	bl	__umodsi3
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldr	r7, .L107+0x4
	add	r1, r5, r7
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L107+0x8
	mov	r1, r8
	strh	r1, [r0]
	mov	r0, #0x1
.L104:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L108:
	.align	2, 0
.L107:
	.word	0x579
	.word	0x57a
	.word	0x4000208
.Lfe6:
	.size	 RfuRecvQueue_Dequeue,.Lfe6-RfuRecvQueue_Dequeue
	.align	2, 0
	.globl	RfuSendQueue_Dequeue
	.type	 RfuSendQueue_Dequeue,function
	.thumb_func
RfuSendQueue_Dequeue:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r1, #0x8c
	lsl	r1, r1, #0x2
	add	r0, r5, r1
	add	r1, r1, #0x1
	add	r4, r5, r1
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	cmp	r1, r0
	beq	.L111	@cond_branch
	ldr	r1, .L118
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r2, r0, #0
	cmp	r2, #0
	beq	.L110	@cond_branch
.L111:
	mov	r0, #0x0
	b	.L117
.L119:
	.align	2, 0
.L118:
	.word	0x233
.L110:
	ldr	r1, .L120
	ldrh	r0, [r1]
	add	r7, r0, #0
	strh	r2, [r1]
	mov	r3, #0x0
.L115:
	add	r2, r6, r3
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	add	r0, r5, r0
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0xd
	ble	.L115	@cond_branch
	ldr	r0, .L120+0x4
	add	r4, r5, r0
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x28
	bl	__umodsi3
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldr	r0, .L120+0x8
	add	r1, r5, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L120
	strh	r7, [r0]
	mov	r0, #0x1
.L117:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L121:
	.align	2, 0
.L120:
	.word	0x4000208
	.word	0x231
	.word	0x232
.Lfe7:
	.size	 RfuSendQueue_Dequeue,.Lfe7-RfuSendQueue_Dequeue
	.align	2, 0
	.globl	RfuBackupQueue_Enqueue
	.type	 RfuBackupQueue_Enqueue,function
	.thumb_func
RfuBackupQueue_Enqueue:
	push	{r4, lr}
	add	r2, r0, #0
	add	r4, r1, #0
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L123	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x0
	bl	RfuBackupQueue_Dequeue
	b	.L124
.L123:
	mov	r3, #0x0
.L128:
	ldrb	r1, [r2, #0x1c]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	add	r0, r2, r0
	add	r1, r4, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0xd
	ble	.L128	@cond_branch
	ldrb	r0, [r2, #0x1c]
	add	r0, r0, #0x1
	ldrb	r1, [r2, #0x1c]
	strb	r0, [r2, #0x1c]
	ldrb	r1, [r2, #0x1c]
	mov	r0, #0x1
	and	r0, r0, r1
	ldrb	r1, [r2, #0x1c]
	strb	r0, [r2, #0x1c]
	ldrb	r0, [r2, #0x1e]
	cmp	r0, #0x1
	bhi	.L130	@cond_branch
	ldrb	r0, [r2, #0x1e]
	add	r0, r0, #0x1
	ldrb	r1, [r2, #0x1e]
	strb	r0, [r2, #0x1e]
	b	.L124
.L130:
	ldrb	r0, [r2, #0x1c]
	ldrb	r1, [r2, #0x1d]
	strb	r0, [r2, #0x1d]
.L124:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 RfuBackupQueue_Enqueue,.Lfe8-RfuBackupQueue_Enqueue
	.align	2, 0
	.globl	RfuBackupQueue_Dequeue
	.type	 RfuBackupQueue_Dequeue,function
	.thumb_func
RfuBackupQueue_Dequeue:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r3, #0x1e]
	cmp	r0, #0
	bne	.L133	@cond_branch
	mov	r0, #0x0
	b	.L140
.L133:
	cmp	r5, #0
	beq	.L134	@cond_branch
	mov	r4, #0x0
.L138:
	add	r2, r5, r4
	ldrb	r1, [r3, #0x1d]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r4, r0
	add	r0, r3, r0
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r4, r4, #0x1
	cmp	r4, #0xd
	ble	.L138	@cond_branch
.L134:
	ldrb	r0, [r3, #0x1d]
	add	r0, r0, #0x1
	ldrb	r1, [r3, #0x1d]
	strb	r0, [r3, #0x1d]
	ldrb	r1, [r3, #0x1d]
	mov	r0, #0x1
	and	r0, r0, r1
	ldrb	r1, [r3, #0x1d]
	strb	r0, [r3, #0x1d]
	ldrb	r0, [r3, #0x1e]
	sub	r0, r0, #0x1
	ldrb	r1, [r3, #0x1e]
	strb	r0, [r3, #0x1e]
	mov	r0, #0x1
.L140:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 RfuBackupQueue_Dequeue,.Lfe9-RfuBackupQueue_Dequeue
	.align	2, 0
	.type	 RfuUnusedQueue_Dequeue,function
	.thumb_func
RfuUnusedQueue_Dequeue:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	ldr	r1, .L149
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L142	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r4, r3, r0
.L146:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x8
	add	r0, r2, r0
	add	r0, r3, r0
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xff
	ble	.L146	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x1
	and	r0, r0, r2
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L149
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	b	.L148
.L150:
	.align	2, 0
.L149:
	.word	0x202
.L142:
	ldr	r1, .L151
	add	r0, r3, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
.L148:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	0x203
.Lfe10:
	.size	 RfuUnusedQueue_Dequeue,.Lfe10-RfuUnusedQueue_Dequeue
	.align	2, 0
	.type	 RfuUnusedQueue_Enqueue,function
	.thumb_func
RfuUnusedQueue_Enqueue:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	add	r0, r3, r1
	add	r1, r1, #0x1
	add	r4, r3, r1
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	cmp	r1, r0
	beq	.L155	@cond_branch
	ldr	r1, .L162
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L154	@cond_branch
.L155:
	mov	r0, #0x0
	b	.L161
.L163:
	.align	2, 0
.L162:
	.word	0x203
.L154:
	mov	r2, #0x0
.L159:
	add	r0, r5, r2
	ldrb	r1, [r4]
	lsl	r1, r1, #0x8
	add	r1, r2, r1
	add	r1, r3, r1
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xff
	ble	.L159	@cond_branch
	ldr	r0, .L164
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x1
	and	r0, r0, r2
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L164+0x4
	add	r1, r3, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x1
.L161:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L165:
	.align	2, 0
.L164:
	.word	0x201
	.word	0x202
.Lfe11:
	.size	 RfuUnusedQueue_Enqueue,.Lfe11-RfuUnusedQueue_Enqueue

	.lcomm	counter.42,1
	.align	2, 0
	.type	 PopulateArrayWithSequence,function
	.thumb_func
PopulateArrayWithSequence:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r1, #0
	mov	r5, #0x0
	cmp	r1, #0x1
	beq	.L174	@cond_branch
	cmp	r1, #0x1
	bgt	.L194	@cond_branch
	cmp	r1, #0
	beq	.L168	@cond_branch
	b	.L167
.L194:
	cmp	r0, #0x2
	beq	.L180	@cond_branch
	cmp	r0, #0x3
	beq	.L186	@cond_branch
	b	.L167
.L168:
	mov	r4, #0x0
.L172:
	add	r0, r6, r4
	add	r1, r4, #0x1
	strb	r1, [r0]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r1, #0
	cmp	r4, #0xc7
	ble	.L172	@cond_branch
	b	.L195
.L174:
	mov	r4, #0x0
	add	r2, r6, #0
	add	r2, r2, #0xc8
.L178:
	add	r0, r6, r4
	add	r1, r4, #0x1
	strb	r1, [r0]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r1, #0
	cmp	r4, #0x63
	ble	.L178	@cond_branch
	strh	r5, [r2]
	b	.L167
.L180:
	mov	r4, #0x0
.L184:
	bl	Random
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r6, r4
	strb	r0, [r1]
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r4, #0x1
	cmp	r4, #0xc7
	ble	.L184	@cond_branch
.L195:
	add	r0, r6, r4
	strh	r5, [r0]
	b	.L167
.L186:
	mov	r4, #0x0
	ldr	r3, .L196
	ldrb	r1, [r3]
	ldrb	r0, [r3]
	add	r7, r0, #0x1
	add	r2, r1, #0x1
	mov	r0, #0xff
	mov	ip, r0
.L190:
	add	r0, r6, r4
	add	r1, r4, #0x1
	strb	r2, [r0]
	add	r0, r4, r7
	mov	r4, ip
	and	r0, r0, r4
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r2, r2, #0x1
	add	r4, r1, #0
	cmp	r1, #0xc7
	ble	.L190	@cond_branch
	add	r0, r6, r1
	strh	r5, [r0]
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
.L167:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	counter.42
.Lfe12:
	.size	 PopulateArrayWithSequence,.Lfe12-PopulateArrayWithSequence
	.align	2, 0
	.type	 PkmnStrToASCII,function
	.thumb_func
PkmnStrToASCII:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r3, #0x0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L200	@cond_branch
	ldr	r5, .L204
	add	r2, r1, #0
.L202:
	add	r1, r4, r3
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L202	@cond_branch
.L200:
	add	r1, r4, r3
	mov	r0, #0x0
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L205:
	.align	2, 0
.L204:
	.word	sWireless_RSEtoASCIITable
.Lfe13:
	.size	 PkmnStrToASCII,.Lfe13-PkmnStrToASCII
	.align	2, 0
	.type	 ASCIIToPkmnStr,function
	.thumb_func
ASCIIToPkmnStr:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r3, #0x0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L208	@cond_branch
	ldr	r5, .L212
	add	r2, r1, #0
.L210:
	add	r1, r4, r3
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L210	@cond_branch
.L208:
	add	r1, r4, r3
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L213:
	.align	2, 0
.L212:
	.word	sWireless_ASCIItoRSETable
.Lfe14:
	.size	 ASCIIToPkmnStr,.Lfe14-ASCIIToPkmnStr
	.align	2, 0
	.type	 GetConnectedChildStrength,function
	.thumb_func
GetConnectedChildStrength:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r0, .L233
	ldr	r4, [r0]
	ldrb	r2, [r4, #0x2]
	ldrb	r1, [r4]
	add	r7, r0, #0
	cmp	r1, #0x1
	bne	.L215	@cond_branch
	mov	r3, #0x0
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L220	@cond_branch
	cmp	r5, #0x1
	bne	.L221	@cond_branch
	ldrb	r0, [r4, #0xa]
	b	.L230
.L234:
	.align	2, 0
.L233:
	.word	gRfuLinkStatus
.L221:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L220:
	lsr	r2, r2, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bhi	.L223	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L220	@cond_branch
	add	r0, r6, #0x1
	cmp	r5, r0
	bne	.L221	@cond_branch
.L232:
	ldr	r0, [r7]
	add	r0, r0, #0xa
	add	r0, r0, r3
	ldrb	r0, [r0]
	b	.L230
.L215:
	mov	r3, #0x0
	mov	r1, #0x1
.L227:
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L232	@cond_branch
	lsr	r2, r2, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L227	@cond_branch
.L223:
	mov	r0, #0x0
.L230:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 GetConnectedChildStrength,.Lfe15-GetConnectedChildStrength
	.align	2, 0
	.globl	InitHostRfuGameData
	.type	 InitHostRfuGameData,function
	.thumb_func
InitHostRfuGameData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r4, #0x0
	ldr	r0, .L246
	mov	r8, r0
	add	r6, r7, #0x2
	ldr	r0, [r0]
	add	r5, r0, #0
	add	r5, r5, #0xa
.L239:
	add	r0, r6, r4
	add	r1, r5, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x1
	ble	.L239	@cond_branch
	mov	r4, #0x0
	lsl	r2, r2, #0x7
	mov	ip, r2
	add	r1, r7, #0x4
.L244:
	add	r0, r1, r4
	strb	r3, [r0]
	asr	r3, r3, #0x8
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L244	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x8]
	mov	r6, #0x1
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r2, [r7, #0xb]
	mov	r5, #0x2
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0xb]
	mov	r4, #0x7f
	mov	r1, r9
	and	r1, r1, r4
	ldrb	r2, [r7, #0xa]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	and	r0, r0, r4
	mov	r1, ip
	orr	r0, r0, r1
	strb	r0, [r7, #0xa]
	ldrb	r0, [r7]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x2
	orr	r1, r1, r0
	ldrb	r2, [r7, #0x1]
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r2
	mov	r2, #0x10
	orr	r0, r0, r2
	strb	r0, [r7, #0x1]
	mov	r0, #0x11
	neg	r0, r0
	and	r1, r1, r0
	sub	r0, r0, #0x10
	and	r1, r1, r0
	sub	r0, r0, #0x20
	and	r1, r1, r0
	strb	r1, [r7]
	ldr	r0, .L246+0x4
	bl	FlagGet
	lsl	r0, r0, #0x7
	ldrb	r1, [r7]
	and	r4, r4, r1
	orr	r4, r4, r0
	strb	r4, [r7]
	bl	IsNationalPokedexEnabled
	and	r0, r0, r6
	ldrb	r1, [r7, #0x1]
	and	r5, r5, r1
	orr	r5, r5, r0
	strb	r5, [r7, #0x1]
	ldr	r0, .L246+0x8
	bl	FlagGet
	and	r6, r6, r0
	lsl	r6, r6, #0x1
	ldrb	r1, [r7, #0x1]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r6
	strb	r0, [r7, #0x1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L247:
	.align	2, 0
.L246:
	.word	gSaveBlock2Ptr
	.word	0x847
	.word	0x82f
.Lfe16:
	.size	 InitHostRfuGameData,.Lfe16-InitHostRfuGameData
	.align	2, 0
	.globl	Rfu_GetCompatiblePlayerData
	.type	 Rfu_GetCompatiblePlayerData,function
	.thumb_func
Rfu_GetCompatiblePlayerData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	ldr	r0, .L256
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	bne	.L249	@cond_branch
	mov	r0, #0x1
	mov	r9, r0
	ldr	r6, .L256+0x4
	ldr	r0, [r6]
	lsl	r4, r5, #0x5
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	bl	IsRfuSerialNumberValid
	cmp	r0, #0
	beq	.L250	@cond_branch
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x7]
	asr	r0, r0, r5
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L255	@cond_branch
.L250:
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	mov	r0, r8
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	b	.L252
.L257:
	.align	2, 0
.L256:
	.word	lman
	.word	gRfuLinkStatus
.L249:
	mov	r0, #0x0
	mov	r9, r0
	ldr	r6, .L258
	ldr	r0, [r6]
	lsl	r4, r5, #0x5
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	bl	IsRfuSerialNumberValid
	cmp	r0, #0
	beq	.L253	@cond_branch
	ldr	r1, [r6]
.L255:
	add	r1, r4, r1
	add	r1, r1, #0x1a
	add	r0, r7, #0
	mov	r2, #0xd
	bl	memcpy
	ldr	r1, [r6]
	add	r1, r4, r1
	add	r1, r1, #0x29
	mov	r0, r8
	mov	r2, #0x8
	bl	memcpy
	b	.L252
.L259:
	.align	2, 0
.L258:
	.word	gRfuLinkStatus
.L253:
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	mov	r0, r8
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
.L252:
	mov	r0, r9
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 Rfu_GetCompatiblePlayerData,.Lfe17-Rfu_GetCompatiblePlayerData
	.align	2, 0
	.globl	Rfu_GetWonderDistributorPlayerData
	.type	 Rfu_GetWonderDistributorPlayerData,function
	.thumb_func
Rfu_GetWonderDistributorPlayerData:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	mov	r7, #0x0
	ldr	r6, .L263
	ldr	r0, [r6]
	lsr	r4, r2, #0x13
	add	r2, r0, r4
	ldrh	r1, [r2, #0x18]
	ldr	r0, .L263+0x4
	cmp	r1, r0
	bne	.L261	@cond_branch
	add	r1, r2, #0
	add	r1, r1, #0x1a
	add	r0, r3, #0
	mov	r2, #0xd
	bl	memcpy
	ldr	r1, [r6]
	add	r1, r4, r1
	add	r1, r1, #0x29
	add	r0, r5, #0
	mov	r2, #0x8
	bl	memcpy
	mov	r7, #0x1
	b	.L262
.L264:
	.align	2, 0
.L263:
	.word	gRfuLinkStatus
	.word	0x7f7d
.L261:
	add	r0, r3, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
.L262:
	add	r0, r7, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 Rfu_GetWonderDistributorPlayerData,.Lfe18-Rfu_GetWonderDistributorPlayerData
	.align	2, 0
	.globl	CopyHostRfuGameDataAndUsername
	.type	 CopyHostRfuGameDataAndUsername,function
	.thumb_func
CopyHostRfuGameDataAndUsername:
	push	{r4, lr}
	add	r4, r1, #0
	ldr	r1, .L266
	mov	r2, #0xd
	bl	memcpy
	ldr	r1, .L266+0x4
	add	r0, r4, #0
	mov	r2, #0x8
	bl	memcpy
	pop	{r4}
	pop	{r0}
	bx	r0
.L267:
	.align	2, 0
.L266:
	.word	gHostRfuGameData
	.word	gHostRfuUsername
.Lfe19:
	.size	 CopyHostRfuGameDataAndUsername,.Lfe19-CopyHostRfuGameDataAndUsername
	.align	2, 0
	.globl	CreateWirelessStatusIndicatorSprite
	.type	 CreateWirelessStatusIndicatorSprite,function
	.thumb_func
CreateWirelessStatusIndicatorSprite:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	cmp	r3, #0
	bne	.L269	@cond_branch
	cmp	r2, #0
	bne	.L269	@cond_branch
	mov	r3, #0xe7
	mov	r2, #0x8
.L269:
	ldr	r0, .L272
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L270	@cond_branch
	ldr	r0, .L272+0x4
	add	r1, r3, #0
	mov	r3, #0x0
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L272+0x8
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r0, .L272+0xc
	strh	r0, [r4, #0x3c]
	ldr	r0, .L272+0x10
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	strh	r0, [r4, #0x3a]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
	ldr	r0, .L272+0x14
	strb	r5, [r0]
	b	.L271
.L273:
	.align	2, 0
.L272:
	.word	gRfuLinkStatus
	.word	sWirelessStatusIndicatorSpriteTemplate
	.word	gSprites
	.word	0x1234
	.word	sWirelessStatusIndicatorSpriteSheet
	.word	sWirelessStatusIndicatorSpriteId
.L270:
	ldr	r0, .L274
	add	r1, r3, #0
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r4, .L274+0x4
	strb	r0, [r4]
	ldr	r5, .L274+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L274+0xc
	strh	r1, [r0, #0x3c]
	ldr	r0, .L274+0x10
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	strh	r0, [r1, #0x3a]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L271:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	sWirelessStatusIndicatorSpriteTemplate
	.word	sWirelessStatusIndicatorSpriteId
	.word	gSprites
	.word	0x1234
	.word	sWirelessStatusIndicatorSpriteSheet
.Lfe20:
	.size	 CreateWirelessStatusIndicatorSprite,.Lfe20-CreateWirelessStatusIndicatorSprite
	.align	2, 0
	.globl	DestroyWirelessStatusIndicatorSprite
	.type	 DestroyWirelessStatusIndicatorSprite,function
	.thumb_func
DestroyWirelessStatusIndicatorSprite:
	push	{r4, lr}
	ldr	r4, .L278
	ldr	r3, .L278+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r4
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	ldr	r0, .L278+0x8
	cmp	r1, r0
	bne	.L277	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x3c]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r3, .L278+0xc
	mov	r0, #0x84
	lsl	r0, r0, #0x3
	add	r3, r3, r0
	ldr	r0, .L278+0x10
	ldr	r1, [r0]		@ created by thumb_load_double_from_address
	ldr	r2, [r0, #0x4]		@ created by thumb_load_double_from_address
	str	r1, [r3]
	str	r2, [r3, #0x4]
	ldr	r1, .L278+0x14
	mov	r2, #0x4
	bl	CpuSet
.L277:
	pop	{r4}
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	gSprites
	.word	sWirelessStatusIndicatorSpriteId
	.word	0x1234
	.word	gMain
	.word	gDummyOamData
	.word	0x70003e8
.Lfe21:
	.size	 DestroyWirelessStatusIndicatorSprite,.Lfe21-DestroyWirelessStatusIndicatorSprite
	.align	2, 0
	.globl	LoadWirelessStatusIndicatorSpriteGfx
	.type	 LoadWirelessStatusIndicatorSpriteGfx,function
	.thumb_func
LoadWirelessStatusIndicatorSpriteGfx:
	push	{r4, lr}
	ldr	r4, .L282
	ldrh	r0, [r4, #0x6]
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L282+0x4
	cmp	r0, r1
	bne	.L281	@cond_branch
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
.L281:
	ldr	r0, .L282+0x8
	bl	LoadSpritePalette
	ldr	r1, .L282+0xc
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L283:
	.align	2, 0
.L282:
	.word	sWirelessStatusIndicatorSpriteSheet
	.word	-0x10000
	.word	sWirelessStatusIndicatorSpritePalette
	.word	sWirelessStatusIndicatorSpriteId
.Lfe22:
	.size	 LoadWirelessStatusIndicatorSpriteGfx,.Lfe22-LoadWirelessStatusIndicatorSpriteGfx
	.align	2, 0
	.type	 GetParentSignalStrength,function
	.thumb_func
GetParentSignalStrength:
	push	{r4, lr}
	ldr	r1, .L292
	ldr	r0, [r1]
	ldrb	r2, [r0, #0x2]
	mov	r3, #0x0
	mov	r4, #0x1
.L288:
	add	r0, r2, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L289	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0xa
	add	r0, r0, r3
	ldrb	r0, [r0]
	b	.L291
.L293:
	.align	2, 0
.L292:
	.word	gRfuLinkStatus
.L289:
	lsr	r2, r2, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L288	@cond_branch
	mov	r0, #0x0
.L291:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 GetParentSignalStrength,.Lfe23-GetParentSignalStrength
	.align	2, 0
	.type	 SetAndRestartWirelessStatusIndicatorAnim,function
	.thumb_func
SetAndRestartWirelessStatusIndicatorAnim:
	push	{lr}
	add	r2, r0, #0
	mov	r3, #0x32
	ldrsh	r0, [r2, r3]
	cmp	r0, r1
	beq	.L295	@cond_branch
	mov	r0, #0x0
	strh	r1, [r2, #0x32]
	strh	r0, [r2, #0x34]
	strh	r0, [r2, #0x36]
.L295:
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 SetAndRestartWirelessStatusIndicatorAnim,.Lfe24-SetAndRestartWirelessStatusIndicatorAnim
	.align	2, 0
	.globl	UpdateWirelessStatusIndicatorSprite
	.type	 UpdateWirelessStatusIndicatorSprite,function
	.thumb_func
UpdateWirelessStatusIndicatorSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L321
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.LCB2180
	b	.L297	@long jump
.LCB2180:
	ldr	r2, .L321+0x4
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	ldr	r0, .L321+0x8
	cmp	r1, r0
	beq	.LCB2194
	b	.L297	@long jump
.LCB2194:
	add	r6, r2, #0
	mov	r5, #0xff
	mov	r4, #0x0
	ldr	r0, .L321+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L298	@cond_branch
	add	r7, r6, #0
	add	r7, r7, #0x28
	mov	r1, #0x29
	add	r1, r1, r6
	mov	r8, r1
	b	.L299
.L322:
	.align	2, 0
.L321:
	.word	sWirelessStatusIndicatorSpriteId
	.word	gSprites
	.word	0x1234
	.word	gRfuLinkStatus
.L302:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetConnectedChildStrength
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	bcc	.L299	@cond_branch
	add	r0, r4, #0
	bl	GetConnectedChildStrength
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L299:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	cmp	r4, r0
	blt	.L302	@cond_branch
	b	.L305
.L298:
	bl	GetParentSignalStrength
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r6, #0
	add	r7, r7, #0x28
	mov	r2, #0x29
	add	r2, r2, r6
	mov	r8, r2
.L305:
	bl	IsRfuRecoveringFromLinkLoss
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L306	@cond_branch
	mov	r0, #0x4
	b	.L320
.L306:
	cmp	r5, #0x18
	bhi	.L308	@cond_branch
	mov	r0, #0x3
	b	.L320
.L308:
	add	r0, r5, #0
	sub	r0, r0, #0x19
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x65
	bhi	.L310	@cond_branch
	mov	r0, #0x2
	b	.L320
.L310:
	add	r0, r5, #0
	sub	r0, r0, #0x7f
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x65
	bhi	.L312	@cond_branch
	mov	r0, #0x1
	b	.L320
.L312:
	cmp	r5, #0xe4
	bls	.L307	@cond_branch
	mov	r0, #0x0
.L320:
	strh	r0, [r6, #0x2e]
.L307:
	mov	r3, #0x2e
	ldrsh	r1, [r6, r3]
	mov	r2, #0x30
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	beq	.L315	@cond_branch
	add	r0, r6, #0
	bl	SetAndRestartWirelessStatusIndicatorAnim
	ldrh	r0, [r6, #0x2e]
	strh	r0, [r6, #0x30]
.L315:
	mov	r0, #0x32
	ldrsh	r1, [r6, r0]
	ldr	r2, [r6, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r3, #0x36
	ldrsh	r0, [r6, r3]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0xa
	lsr	r0, r0, #0x1a
	mov	r3, #0x34
	ldrsh	r1, [r6, r3]
	cmp	r0, r1
	bge	.L316	@cond_branch
	ldrh	r0, [r6, #0x36]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r6, #0x36]
	strh	r3, [r6, #0x34]
	mov	r1, #0x32
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r2, #0x36
	ldrsh	r1, [r6, r2]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	bne	.L318	@cond_branch
	strh	r3, [r6, #0x36]
	b	.L318
.L316:
	ldrh	r0, [r6, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x34]
.L318:
	ldr	r4, .L323
	mov	r1, #0x84
	lsl	r1, r1, #0x3
	add	r0, r4, r1
	ldr	r1, .L323+0x4
	ldr	r2, [r1, #0x4]		@ created by thumb_load_double_from_address
	ldr	r1, [r1]		@ created by thumb_load_double_from_address
	str	r1, [r0]
	str	r2, [r0, #0x4]
	mov	r3, #0x20
	ldrsh	r2, [r6, r3]
	mov	r1, #0x0
	ldrsb	r1, [r7, r1]
	add	r2, r2, r1
	ldr	r1, .L323+0x8
	add	r5, r4, r1
	ldr	r3, .L323+0xc
	add	r1, r3, #0
	and	r2, r2, r1
	ldrh	r3, [r5]
	ldr	r1, .L323+0x10
	and	r1, r1, r3
	orr	r1, r1, r2
	strh	r1, [r5]
	ldrh	r1, [r6, #0x22]
	mov	r2, r8
	ldrb	r2, [r2]
	add	r1, r1, r2
	strb	r1, [r0]
	ldrb	r2, [r6, #0x5]
	ldr	r3, .L323+0x14
	add	r5, r4, r3
	lsr	r2, r2, #0x4
	lsl	r2, r2, #0x4
	ldrb	r3, [r5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r2
	strb	r1, [r5]
	mov	r1, #0x32
	ldrsh	r2, [r6, r1]
	ldr	r1, [r6, #0x8]
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	mov	r3, #0x36
	ldrsh	r1, [r6, r3]
	ldr	r2, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r1]
	ldrh	r6, [r6, #0x3a]
	add	r2, r2, r6
	ldr	r1, .L323+0x18
	add	r4, r4, r1
	ldr	r3, .L323+0x1c
	add	r1, r3, #0
	and	r2, r2, r1
	ldrh	r3, [r4]
	ldr	r1, .L323+0x20
	and	r1, r1, r3
	orr	r1, r1, r2
	strh	r1, [r4]
	ldr	r1, .L323+0x24
	mov	r2, #0x4
	bl	CpuSet
	bl	RfuGetStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L297	@cond_branch
	bl	DestroyWirelessStatusIndicatorSprite
.L297:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L324:
	.align	2, 0
.L323:
	.word	gMain
	.word	sWirelessStatusIndicatorOamData
	.word	0x422
	.word	0x1ff
	.word	-0x200
	.word	0x425
	.word	0x424
	.word	0x3ff
	.word	-0x400
	.word	0x70003e8
.Lfe25:
	.size	 UpdateWirelessStatusIndicatorSprite,.Lfe25-UpdateWirelessStatusIndicatorSprite
	.align	2, 0
	.type	 CopyTrainerRecord,function
	.thumb_func
CopyTrainerRecord:
	push	{r4, r5, lr}
	add	r4, r0, #0
	str	r1, [r4]
	mov	r3, #0x0
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L327	@cond_branch
	add	r5, r4, #0x4
.L330:
	add	r1, r5, r3
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x6
	bgt	.L327	@cond_branch
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L330	@cond_branch
.L327:
	add	r0, r4, #0x4
	add	r0, r0, r3
	mov	r1, #0xff
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 CopyTrainerRecord,.Lfe26-CopyTrainerRecord
	.align	2, 0
	.type	 ZeroName,function
	.thumb_func
ZeroName:
	push	{lr}
	mov	r2, #0x0
	mov	r1, #0x7
.L336:
	strb	r2, [r0]
	add	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L336	@cond_branch
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 ZeroName,.Lfe27-ZeroName
	.align	2, 0
	.type	 NameIsEmpty,function
	.thumb_func
NameIsEmpty:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x0
.L342:
	ldrb	r0, [r1]
	add	r1, r1, #0x1
	cmp	r0, #0
	beq	.L341	@cond_branch
	mov	r0, #0x0
	b	.L345
.L341:
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L342	@cond_branch
	mov	r0, #0x1
.L345:
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 NameIsEmpty,.Lfe28-NameIsEmpty
	.align	2, 0
	.globl	SaveLinkTrainerNames
	.type	 SaveLinkTrainerNames,function
	.thumb_func
SaveLinkTrainerNames:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r0, .L373
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB2598
	b	.L347	@long jump
.LCB2598:
	mov	r0, #0xf0
	bl	AllocZeroed
	str	r0, [sp, #0x14]
	mov	r4, #0x0
	b	.L348
.L374:
	.align	2, 0
.L373:
	.word	gWirelessCommType
.L351:
	lsl	r2, r4, #0x2
	mov	r0, sp
	add	r1, r0, r2
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r1]
	mov	r5, #0x0
	mov	r8, r2
	lsl	r0, r4, #0x3
	add	r1, r4, #0x1
	mov	r9, r1
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	str	r0, [sp, #0x1c]
	ldr	r2, .L375
	mov	sl, r2
	ldr	r6, .L375+0x4
	mov	r4, #0x0
	mov	r0, sl
	sub	r0, r0, #0x4
	ldr	r7, [sp, #0x1c]
	add	r3, r7, r0
.L355:
	ldrh	r1, [r3]
	ldr	r0, .L375+0x8
	ldr	r2, [r0]
	ldr	r7, .L375+0x4
	add	r0, r2, r7
	add	r0, r0, r4
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.L354	@cond_branch
	add	r1, r2, r6
	add	r1, r1, #0x4
	ldr	r0, [sp, #0x1c]
	add	r0, r0, sl
	str	r3, [sp, #0x18]
	bl	StringCompare
	ldr	r3, [sp, #0x18]
	cmp	r0, #0
	bne	.L354	@cond_branch
	mov	r0, sp
	add	r0, r0, r8
	str	r5, [r0]
.L354:
	add	r6, r6, #0xc
	add	r4, r4, #0xc
	add	r5, r5, #0x1
	cmp	r5, #0x13
	ble	.L355	@cond_branch
	mov	r4, r9
.L348:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L351	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
	mov	r4, #0x0
	ldr	r1, .L375+0x8
	mov	r9, r1
	mov	r7, sp
	mov	r5, #0x0
	ldr	r6, [sp, #0x14]
	b	.L359
.L376:
	.align	2, 0
.L375:
	.word	gLinkPlayers+0x8
	.word	0x3bbc
	.word	gSaveBlock1Ptr
.L362:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.L361	@cond_branch
	ldr	r2, .L377
	add	r0, r5, r2
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0x1
	beq	.L361	@cond_branch
	add	r0, r2, #0x4
	add	r0, r5, r0
	ldrh	r1, [r0]
	add	r2, r2, #0x8
	add	r2, r5, r2
	add	r0, r6, #0
	bl	CopyTrainerRecord
	ldr	r1, [r7]
	cmp	r1, #0
	blt	.L364	@cond_branch
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r2, r9
	ldr	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0xef
	lsl	r1, r1, #0x6
	add	r0, r0, r1
	bl	ZeroName
.L364:
	add	r6, r6, #0xc
	mov	r2, #0x1
	add	r8, r8, r2
.L361:
	add	r7, r7, #0x4
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
.L359:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L362	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L377+0x4
	mov	r9, r7
	ldr	r6, .L377+0x8
	mov	r7, #0x0
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	ldr	r2, [sp, #0x14]
	add	r5, r0, r2
.L369:
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, r6
	add	r0, r0, #0x4
	bl	NameIsEmpty
	cmp	r0, #0
	bne	.L368	@cond_branch
	mov	r0, r9
	ldr	r2, [r0]
	ldr	r1, .L377+0x8
	add	r0, r2, r1
	add	r0, r0, r7
	ldr	r1, [r0]
	add	r2, r2, r6
	add	r2, r2, #0x4
	add	r0, r5, #0
	bl	CopyTrainerRecord
	add	r5, r5, #0xc
	mov	r2, #0x1
	add	r8, r8, r2
	mov	r0, r8
	cmp	r0, #0x13
	bgt	.L367	@cond_branch
.L368:
	add	r6, r6, #0xc
	add	r7, r7, #0xc
	add	r4, r4, #0x1
	cmp	r4, #0x13
	ble	.L369	@cond_branch
.L367:
	ldr	r0, .L377+0x4
	ldr	r0, [r0]
	ldr	r1, .L377+0x8
	add	r0, r0, r1
	ldr	r1, [sp, #0x14]
	mov	r2, #0xf0
	bl	memcpy
	ldr	r0, [sp, #0x14]
	bl	Free
.L347:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L378:
	.align	2, 0
.L377:
	.word	gLinkPlayers
	.word	gSaveBlock1Ptr
	.word	0x3bbc
.Lfe29:
	.size	 SaveLinkTrainerNames,.Lfe29-SaveLinkTrainerNames
	.align	2, 0
	.globl	PlayerHasMetTrainerBefore
	.type	 PlayerHasMetTrainerBefore,function
	.thumb_func
PlayerHasMetTrainerBefore:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r7, #0x0
	ldr	r6, .L389
	ldr	r4, .L389+0x4
	mov	r5, #0x0
.L383:
	ldr	r0, [r6]
	add	r0, r0, r4
	add	r0, r0, #0x4
	mov	r1, r9
	mov	r2, #0x7
	bl	StringCompareN
	cmp	r0, #0
	bne	.L384	@cond_branch
	ldr	r0, [r6]
	ldr	r1, .L389+0x4
	add	r0, r0, r1
	add	r0, r0, r5
	ldr	r0, [r0]
	cmp	r0, r8
	bne	.L384	@cond_branch
	mov	r0, #0x1
	b	.L387
.L390:
	.align	2, 0
.L389:
	.word	gSaveBlock1Ptr
	.word	0x3bbc
.L384:
	ldr	r0, [r6]
	add	r0, r0, r4
	add	r0, r0, #0x4
	bl	NameIsEmpty
	cmp	r0, #0
	bne	.L388	@cond_branch
	add	r4, r4, #0xc
	add	r5, r5, #0xc
	add	r7, r7, #0x1
	cmp	r7, #0x13
	ble	.L383	@cond_branch
.L388:
	mov	r0, #0x0
.L387:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 PlayerHasMetTrainerBefore,.Lfe30-PlayerHasMetTrainerBefore
.text
	.align	2, 0 @ Don't pad with nop

