@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sMysteryGiftLinkMenu,object
	.size	 sMysteryGiftLinkMenu,8
sMysteryGiftLinkMenu:
	.word	0x0
	.space	4
	.section .rodata
	.align	2, 0
	.type	 sMenuInfoIcons,object
sMenuInfoIcons:
	.byte	0xc
	.byte	0xc
	.short	0x0
	.byte	0x20
	.byte	0xc
	.short	0x20
	.byte	0x20
	.byte	0xc
	.short	0x64
	.byte	0x20
	.byte	0xc
	.short	0x60
	.byte	0x20
	.byte	0xc
	.short	0x80
	.byte	0x20
	.byte	0xc
	.short	0x48
	.byte	0x20
	.byte	0xc
	.short	0x44
	.byte	0x20
	.byte	0xc
	.short	0x6c
	.byte	0x20
	.byte	0xc
	.short	0x68
	.byte	0x20
	.byte	0xc
	.short	0x88
	.byte	0x20
	.byte	0xc
	.short	0xa4
	.byte	0x20
	.byte	0xc
	.short	0x24
	.byte	0x20
	.byte	0xc
	.short	0x28
	.byte	0x20
	.byte	0xc
	.short	0x2c
	.byte	0x20
	.byte	0xc
	.short	0x40
	.byte	0x20
	.byte	0xc
	.short	0x84
	.byte	0x20
	.byte	0xc
	.short	0x4c
	.byte	0x20
	.byte	0xc
	.short	0xa0
	.byte	0x20
	.byte	0xc
	.short	0x8c
	.byte	0x28
	.byte	0xc
	.short	0xa8
	.byte	0x28
	.byte	0xc
	.short	0xc0
	.byte	0x28
	.byte	0xc
	.short	0xc8
	.byte	0x28
	.byte	0xc
	.short	0xe0
	.byte	0x28
	.byte	0xc
	.short	0xe8
	.size	 sMenuInfoIcons,96
.text
	.align	2, 0
	.type	 ListMenuDummyTask,function
	.thumb_func
ListMenuDummyTask:
	bx	lr
.Lfe1:
	.size	 ListMenuDummyTask,.Lfe1-ListMenuDummyTask
	.align	2, 0
	.globl	DoMysteryGiftListMenu
	.type	 DoMysteryGiftListMenu,function
	.thumb_func
DoMysteryGiftListMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	ip, r0
	str	r1, [sp]
	ldr	r0, [sp, #0x28]
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	mov	sl, r6
	lsl	r3, r3, #0x10
	lsr	r7, r3, #0x10
	str	r7, [sp, #0x4]
	lsl	r0, r0, #0x10
	mov	r8, r0
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldr	r5, .L30
	ldrb	r4, [r5, #0x4]
	cmp	r4, #0x1
	beq	.L14	@cond_branch
	cmp	r4, #0x1
	ble	.L8	@cond_branch
	cmp	r4, #0x2
	beq	.L26	@cond_branch
.L8:
	mov	r0, ip
	bl	AddWindow
	strb	r0, [r5, #0x5]
	cmp	r6, #0x1
	beq	.L11	@cond_branch
	cmp	r6, #0x2
	bne	.L9	@cond_branch
	ldrb	r0, [r5, #0x5]
	mov	r1, r9
	lsl	r2, r1, #0x18
	lsr	r2, r2, #0x18
	add	r1, r7, #0
	bl	LoadUserWindowGfx
.L11:
	ldrb	r0, [r5, #0x5]
	mov	r3, r8
	lsr	r2, r3, #0x14
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, [sp, #0x4]
	bl	DrawTextBorderOuter
.L9:
	ldr	r0, .L30+0x4
	add	r2, r0, #0
	ldr	r1, [sp]
	ldmia	r1!, {r3, r4, r5}
	stmia	r2!, {r3, r4, r5}
	ldmia	r1!, {r3, r4, r5}
	stmia	r2!, {r3, r4, r5}
	ldr	r4, .L30
	ldrb	r1, [r4, #0x5]
	strb	r1, [r0, #0x10]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ListMenuInit
	strb	r0, [r4, #0x6]
	ldrb	r0, [r4, #0x5]
	mov	r1, #0x1
	bl	CopyWindowToVram
	mov	r0, #0x1
	strb	r0, [r4, #0x4]
	b	.L6
.L31:
	.align	2, 0
.L30:
	.word	sMysteryGiftLinkMenu
	.word	gMultiuseListMenuTemplate
.L14:
	ldrb	r0, [r5, #0x6]
	bl	ListMenu_ProcessInput
	str	r0, [r5]
	ldr	r1, .L32
	ldrh	r0, [r1, #0x2e]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L15	@cond_branch
	mov	r0, #0x2
	strb	r0, [r5, #0x4]
.L15:
	ldrh	r1, [r1, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L16	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	str	r0, [r5]
	mov	r0, #0x2
	strb	r0, [r5, #0x4]
.L16:
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0x2
	bne	.L6	@cond_branch
	cmp	r6, #0
	bne	.L21	@cond_branch
	ldrb	r0, [r5, #0x5]
	bl	ClearWindowTilemap
	b	.L19
.L33:
	.align	2, 0
.L32:
	.word	gMain
.L21:
	mov	r4, sl
	cmp	r4, #0
	blt	.L19	@cond_branch
	cmp	r4, #0x2
	bgt	.L19	@cond_branch
	ldrb	r0, [r5, #0x5]
	mov	r1, #0x0
	bl	ClearStdWindowAndFrame
.L19:
	ldr	r0, .L34
	ldrb	r0, [r0, #0x5]
	mov	r1, #0x1
	bl	CopyWindowToVram
	b	.L6
.L35:
	.align	2, 0
.L34:
	.word	sMysteryGiftLinkMenu
.L26:
	ldrb	r0, [r5, #0x6]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	ldrb	r0, [r5, #0x5]
	bl	RemoveWindow
	mov	r0, #0x0
	strb	r0, [r5, #0x4]
	ldr	r0, [r5]
	b	.L29
.L6:
	mov	r0, #0x1
	neg	r0, r0
.L29:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 DoMysteryGiftListMenu,.Lfe2-DoMysteryGiftListMenu
	.align	2, 0
	.globl	ListMenuInit
	.type	 ListMenuInit,function
	.thumb_func
ListMenuInit:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	bl	ListMenuInitInternal
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5, #0x10]
	bl	PutWindowTilemap
	ldrb	r0, [r5, #0x10]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 ListMenuInit,.Lfe3-ListMenuInit
	.align	2, 0
	.globl	ListMenuInitInRect
	.type	 ListMenuInitInRect,function
	.thumb_func
ListMenuInitInRect:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	add	r4, r1, #0
	add	r1, r2, #0
	add	r2, r3, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	bl	ListMenuInitInternal
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0xff
	beq	.L39	@cond_branch
	add	r5, r4, #0
.L41:
	ldrb	r0, [r6, #0x10]
	ldrb	r1, [r5]
	ldrb	r2, [r5, #0x1]
	ldrb	r3, [r5, #0x2]
	ldrb	r4, [r5, #0x3]
	str	r4, [sp]
	ldrb	r4, [r5, #0x4]
	str	r4, [sp, #0x4]
	bl	PutWindowRectTilemapOverridePalette
	add	r5, r5, #0x8
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0xff
	bne	.L41	@cond_branch
.L39:
	ldrb	r0, [r6, #0x10]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	r0, r7, #0
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 ListMenuInitInRect,.Lfe4-ListMenuInitInRect
	.align	2, 0
	.globl	ListMenu_ProcessInput
	.type	 ListMenu_ProcessInput,function
	.thumb_func
ListMenu_ProcessInput:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L68
	add	r3, r1, r0
	ldr	r2, .L68+0x4
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L44	@cond_branch
	ldrh	r0, [r3, #0x18]
	ldrh	r1, [r3, #0x1a]
	add	r0, r0, r1
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0, #0x4]
	b	.L63
.L69:
	.align	2, 0
.L68:
	.word	gTasks+0x8
	.word	gMain
.L44:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L46	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	b	.L63
.L46:
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L48	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x0
	b	.L64
.L48:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L50	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x1
	mov	r2, #0x1
	b	.L65
.L50:
	ldrb	r0, [r3, #0x16]
	lsr	r0, r0, #0x6
	cmp	r0, #0x1
	beq	.L55	@cond_branch
	cmp	r0, #0x1
	ble	.L54	@cond_branch
	cmp	r0, #0x2
	beq	.L56	@cond_branch
.L54:
	mov	r2, #0x0
	mov	r0, #0x0
	b	.L52
.L55:
	mov	r0, #0x20
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r0, #0x10
	b	.L66
.L56:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L66:
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L52:
	cmp	r2, #0
	beq	.L59	@cond_branch
	ldrb	r2, [r3, #0xe]
	add	r0, r3, #0
	mov	r1, #0x1
	mov	r3, #0x0
	b	.L64
.L59:
	cmp	r0, #0
	beq	.L67	@cond_branch
	ldrb	r2, [r3, #0xe]
	add	r0, r3, #0
	mov	r1, #0x1
.L65:
	mov	r3, #0x1
.L64:
	bl	ListMenuChangeSelection
.L67:
	mov	r0, #0x1
	neg	r0, r0
.L63:
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 ListMenu_ProcessInput,.Lfe5-ListMenu_ProcessInput
	.align	2, 0
	.globl	DestroyListMenuTask
	.type	 DestroyListMenuTask,function
	.thumb_func
DestroyListMenuTask:
	push	{r4, lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L74
	add	r1, r0, r1
	cmp	r3, #0
	beq	.L71	@cond_branch
	ldrh	r0, [r1, #0x18]
	strh	r0, [r3]
.L71:
	cmp	r2, #0
	beq	.L72	@cond_branch
	ldrh	r0, [r1, #0x1a]
	strh	r0, [r2]
.L72:
	ldrb	r0, [r1, #0x1e]
	cmp	r0, #0xff
	beq	.L73	@cond_branch
	ldrb	r1, [r1, #0x17]
	lsr	r1, r1, #0x6
	sub	r1, r1, #0x2
	bl	ListMenuRemoveCursorObject
.L73:
	add	r0, r4, #0
	bl	DestroyTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	gTasks+0x8
.Lfe6:
	.size	 DestroyListMenuTask,.Lfe6-DestroyListMenuTask
	.align	2, 0
	.globl	RedrawListMenu
	.type	 RedrawListMenu,function
	.thumb_func
RedrawListMenu:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L77
	add	r4, r4, r0
	ldrb	r0, [r4, #0x10]
	ldrb	r2, [r4, #0x15]
	lsl	r2, r2, #0x1c
	lsr	r1, r2, #0x4
	orr	r1, r1, r2
	lsr	r1, r1, #0x18
	bl	FillWindowPixelBuffer
	ldrh	r1, [r4, #0x18]
	ldrh	r3, [r4, #0xe]
	add	r0, r4, #0
	mov	r2, #0x0
	bl	ListMenuPrintEntries
	add	r0, r4, #0
	bl	ListMenuDrawCursor
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	gTasks+0x8
.Lfe7:
	.size	 RedrawListMenu,.Lfe7-RedrawListMenu
	.align	2, 0
	.type	 ChangeListMenuPals,function
	.thumb_func
ChangeListMenuPals:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L80
	add	r4, r4, r0
	lsr	r1, r1, #0x14
	ldrb	r6, [r4, #0x14]
	mov	r5, #0xf
	add	r0, r5, #0
	and	r0, r0, r6
	orr	r0, r0, r1
	strb	r0, [r4, #0x14]
	and	r2, r2, r5
	ldrb	r1, [r4, #0x15]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	lsr	r3, r3, #0x14
	and	r0, r0, r5
	orr	r0, r0, r3
	strb	r0, [r4, #0x15]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	gTasks+0x8
.Lfe8:
	.size	 ChangeListMenuPals,.Lfe8-ChangeListMenuPals
	.align	2, 0
	.type	 ChangeListMenuCoords,function
	.thumb_func
ChangeListMenuCoords:
	push	{r4, r5, lr}
	add	r3, r1, #0
	add	r5, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L83
	add	r4, r4, r0
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x1
	add	r2, r3, #0
	bl	SetWindowAttribute
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x2
	add	r2, r5, #0
	bl	SetWindowAttribute
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	gTasks+0x8
.Lfe9:
	.size	 ChangeListMenuCoords,.Lfe9-ChangeListMenuCoords
	.align	2, 0
	.type	 ListMenuTestInput,function
	.thumb_func
ListMenuTestInput:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x20
	mov	ip, r2
	ldr	r5, [sp, #0x34]
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	add	r4, r3, #0
	mov	r3, sp
	ldmia	r0!, {r2, r6, r7}
	stmia	r3!, {r2, r6, r7}
	ldmia	r0!, {r2, r6, r7}
	stmia	r3!, {r2, r6, r7}
	mov	r0, sp
	mov	r3, #0x0
	strh	r1, [r0, #0x18]
	mov	r1, ip
	strh	r1, [r0, #0x1a]
	strb	r3, [r0, #0x1c]
	strb	r3, [r0, #0x1d]
	cmp	r4, #0x40
	bne	.L86	@cond_branch
	mov	r1, #0x0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	ListMenuChangeSelection
.L86:
	cmp	r4, #0x80
	bne	.L87	@cond_branch
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x1
	mov	r3, #0x1
	bl	ListMenuChangeSelection
.L87:
	cmp	r5, #0
	beq	.L88	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0, #0x18]
	strh	r0, [r5]
.L88:
	ldr	r2, [sp, #0x38]
	cmp	r2, #0
	beq	.L89	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0, #0x1a]
	strh	r0, [r2]
.L89:
	mov	r0, #0x1
	neg	r0, r0
	add	sp, sp, #0x20
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 ListMenuTestInput,.Lfe10-ListMenuTestInput
	.align	2, 0
	.type	 ListMenuGetCurrentItemArrayId,function
	.thumb_func
ListMenuGetCurrentItemArrayId:
	push	{lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L92
	add	r1, r1, r0
	cmp	r2, #0
	beq	.L91	@cond_branch
	ldrh	r0, [r1, #0x1a]
	ldrh	r1, [r1, #0x18]
	add	r0, r0, r1
	strh	r0, [r2]
.L91:
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gTasks+0x8
.Lfe11:
	.size	 ListMenuGetCurrentItemArrayId,.Lfe11-ListMenuGetCurrentItemArrayId
	.align	2, 0
	.globl	ListMenuGetScrollAndRow
	.type	 ListMenuGetScrollAndRow,function
	.thumb_func
ListMenuGetScrollAndRow:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L97
	add	r1, r1, r0
	cmp	r3, #0
	beq	.L95	@cond_branch
	ldrh	r0, [r1, #0x18]
	strh	r0, [r3]
.L95:
	cmp	r2, #0
	beq	.L96	@cond_branch
	ldrh	r0, [r1, #0x1a]
	strh	r0, [r2]
.L96:
	pop	{r0}
	bx	r0
.L98:
	.align	2, 0
.L97:
	.word	gTasks+0x8
.Lfe12:
	.size	 ListMenuGetScrollAndRow,.Lfe12-ListMenuGetScrollAndRow
	.align	2, 0
	.globl	ListMenuGetYCoordForPrintingArrowCursor
	.type	 ListMenuGetYCoordForPrintingArrowCursor,function
	.thumb_func
ListMenuGetYCoordForPrintingArrowCursor:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L100
	add	r4, r4, r0
	ldrb	r0, [r4, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0x1
	bl	GetFontAttribute
	ldrb	r1, [r4, #0x16]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1d
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x1a]
	mov	r2, r1
	mul	r2, r2, r0
	add	r1, r2, #0
	ldrb	r0, [r4, #0x14]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.L101:
	.align	2, 0
.L100:
	.word	gTasks+0x8
.Lfe13:
	.size	 ListMenuGetYCoordForPrintingArrowCursor,.Lfe13-ListMenuGetYCoordForPrintingArrowCursor
	.align	2, 0
	.type	 ListMenuInitInternal,function
	.thumb_func
ListMenuInitInternal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	ldr	r0, .L104
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L104+0x4
	add	r7, r0, r1
	add	r0, r7, #0
	ldmia	r4!, {r1, r2, r3}
	stmia	r0!, {r1, r2, r3}
	ldmia	r4!, {r1, r2, r3}
	stmia	r0!, {r1, r2, r3}
	mov	r1, #0x0
	strh	r5, [r7, #0x18]
	strh	r6, [r7, #0x1a]
	strb	r1, [r7, #0x1c]
	strb	r1, [r7, #0x1d]
	mov	r0, #0xff
	strb	r0, [r7, #0x1e]
	strb	r1, [r7, #0x1f]
	ldr	r3, .L104+0x8
	ldrb	r1, [r7, #0x14]
	mov	r5, #0xf
	lsr	r1, r1, #0x4
	ldrb	r4, [r3]
	mov	r2, #0x10
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrb	r1, [r7, #0x15]
	lsl	r1, r1, #0x1c
	lsr	r1, r1, #0x18
	and	r0, r0, r5
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrb	r0, [r7, #0x15]
	lsr	r0, r0, #0x4
	and	r5, r5, r0
	ldrb	r0, [r3, #0x1]
	and	r2, r2, r0
	orr	r2, r2, r5
	strb	r2, [r3, #0x1]
	ldrb	r1, [r7, #0x16]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x11
	ldr	r0, [r3]
	ldr	r2, .L104+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [r3]
	ldrb	r0, [r7, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	strb	r0, [r3, #0x3]
	ldrh	r0, [r7, #0xc]
	ldrh	r1, [r7, #0xe]
	cmp	r0, r1
	bcs	.L103	@cond_branch
	strh	r0, [r7, #0xe]
.L103:
	ldrb	r0, [r7, #0x10]
	ldrb	r2, [r7, #0x15]
	lsl	r2, r2, #0x1c
	lsr	r1, r2, #0x4
	orr	r1, r1, r2
	lsr	r1, r1, #0x18
	bl	FillWindowPixelBuffer
	ldrh	r1, [r7, #0x18]
	ldrh	r3, [r7, #0xe]
	add	r0, r7, #0
	mov	r2, #0x0
	bl	ListMenuPrintEntries
	add	r0, r7, #0
	bl	ListMenuDrawCursor
	add	r0, r7, #0
	mov	r1, #0x1
	bl	ListMenuCallSelectionChangedCallback
	mov	r0, r8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L105:
	.align	2, 0
.L104:
	.word	ListMenuDummyTask
	.word	gTasks+0x8
	.word	gListMenuOverride
	.word	-0x3f001
.Lfe14:
	.size	 ListMenuInitInternal,.Lfe14-ListMenuInitInternal
	.align	2, 0
	.type	 ListMenuPrint,function
	.thumb_func
ListMenuPrint:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x18
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	ip, r3
	ldr	r5, .L109
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L107	@cond_branch
	add	r1, sp, #0x14
	ldr	r2, [r5]
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x1c
	mov	r3, #0x0
	strb	r0, [r1]
	lsl	r0, r2, #0x1c
	lsr	r0, r0, #0x1c
	strb	r0, [r1, #0x1]
	lsl	r0, r2, #0x14
	lsr	r0, r0, #0x1c
	strb	r0, [r1, #0x2]
	ldrb	r0, [r4, #0x10]
	lsl	r1, r2, #0x1
	lsr	r1, r1, #0x19
	lsl	r2, r2, #0xe
	lsr	r2, r2, #0x1a
	str	r2, [sp]
	str	r3, [sp, #0x4]
	add	r2, sp, #0x14
	str	r2, [sp, #0x8]
	mov	r2, #0x1
	neg	r2, r2
	str	r2, [sp, #0xc]
	str	r6, [sp, #0x10]
	add	r2, r7, #0
	mov	r3, ip
	bl	AddTextPrinterParameterized4
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r5, #0x3]
	b	.L108
.L110:
	.align	2, 0
.L109:
	.word	gListMenuOverride
.L107:
	add	r2, sp, #0x14
	ldrb	r1, [r4, #0x15]
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1c
	strb	r0, [r2]
	ldrb	r0, [r4, #0x14]
	lsr	r0, r0, #0x4
	strb	r0, [r2, #0x1]
	add	r0, r2, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1c
	strb	r1, [r0, #0x2]
	ldrb	r0, [r4, #0x10]
	ldrb	r1, [r4, #0x17]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1a
	ldrb	r2, [r4, #0x16]
	lsl	r2, r2, #0x1d
	lsr	r2, r2, #0x1d
	str	r2, [sp]
	str	r3, [sp, #0x4]
	add	r2, sp, #0x14
	str	r2, [sp, #0x8]
	mov	r2, #0x1
	neg	r2, r2
	str	r2, [sp, #0xc]
	str	r6, [sp, #0x10]
	add	r2, r7, #0
	mov	r3, ip
	bl	AddTextPrinterParameterized4
.L108:
	add	sp, sp, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 ListMenuPrint,.Lfe15-ListMenuPrint
	.align	2, 0
	.type	 ListMenuPrintEntries,function
	.thumb_func
ListMenuPrintEntries:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp]
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	sl, r3
	ldrb	r0, [r4, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0x1
	bl	GetFontAttribute
	ldrb	r1, [r4, #0x16]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1d
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r8, r0
	cmp	r8, sl
	bge	.L113	@cond_branch
.L115:
	ldr	r0, [r4]
	mov	r2, r9
	lsl	r1, r2, #0x3
	add	r0, r1, r0
	ldr	r2, [r0, #0x4]
	mov	r0, #0x3
	neg	r0, r0
	add	r5, r1, #0
	cmp	r2, r0
	beq	.L116	@cond_branch
	ldrb	r6, [r4, #0x12]
	b	.L117
.L116:
	ldrb	r6, [r4, #0x11]
.L117:
	ldr	r0, [sp]
	add	r0, r0, r8
	ldr	r2, [sp, #0x4]
	mov	r1, r0
	mul	r1, r1, r2
	ldrb	r0, [r4, #0x14]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r7, r2, #0
	ldr	r3, [r4, #0x8]
	cmp	r3, #0
	beq	.L118	@cond_branch
	ldrb	r0, [r4, #0x10]
	ldr	r1, [r4]
	add	r1, r5, r1
	ldr	r1, [r1, #0x4]
	bl	_call_via_r3
.L118:
	ldr	r0, [r4]
	add	r0, r5, r0
	ldr	r1, [r0]
	add	r0, r4, #0
	add	r2, r6, #0
	add	r3, r7, #0
	bl	ListMenuPrint
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r0, #0x1
	add	r8, r8, r0
	cmp	r8, sl
	blt	.L115	@cond_branch
.L113:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 ListMenuPrintEntries,.Lfe16-ListMenuPrintEntries
	.align	2, 0
	.type	 ListMenuDrawCursor,function
	.thumb_func
ListMenuDrawCursor:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldrb	r0, [r6, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0x1
	bl	GetFontAttribute
	ldrb	r1, [r6, #0x16]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1d
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r6, #0x13]
	mov	r8, r1
	ldrh	r1, [r6, #0x1a]
	mul	r1, r1, r0
	ldrb	r0, [r6, #0x14]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r6, #0x17]
	lsr	r0, r0, #0x6
	cmp	r0, #0x1
	beq	.L121	@cond_branch
	cmp	r0, #0x1
	bgt	.L130	@cond_branch
	cmp	r0, #0
	beq	.L122	@cond_branch
	b	.L121
.L130:
	cmp	r0, #0x2
	beq	.L124	@cond_branch
	cmp	r0, #0x3
	beq	.L126	@cond_branch
	b	.L121
.L122:
	ldr	r1, .L131
	add	r0, r6, #0
	mov	r2, r8
	add	r3, r7, #0
	bl	ListMenuPrint
	b	.L121
.L132:
	.align	2, 0
.L131:
	.word	gText_SelectorArrow2
.L124:
	ldrb	r0, [r6, #0x1e]
	cmp	r0, #0xff
	bne	.L125	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x0
	bl	ListMenuAddCursorObject
	strb	r0, [r6, #0x1e]
.L125:
	ldrb	r5, [r6, #0x1e]
	ldrb	r0, [r6, #0x10]
	mov	r1, #0x1
	bl	GetWindowAttribute
	add	r4, r0, #0
	lsl	r4, r4, #0x13
	ldr	r0, .L133
	add	r4, r4, r0
	lsr	r4, r4, #0x10
	ldrb	r0, [r6, #0x10]
	mov	r1, #0x2
	bl	GetWindowAttribute
	add	r2, r0, #0
	lsl	r2, r2, #0x3
	add	r2, r2, r7
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r3, #0x0
	bl	ListMenuUpdateCursorObject
	b	.L121
.L134:
	.align	2, 0
.L133:
	.word	-0x10000
.L126:
	ldrb	r0, [r6, #0x1e]
	cmp	r0, #0xff
	bne	.L127	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x1
	bl	ListMenuAddCursorObject
	strb	r0, [r6, #0x1e]
.L127:
	ldrb	r5, [r6, #0x1e]
	ldrb	r0, [r6, #0x10]
	mov	r1, #0x1
	bl	GetWindowAttribute
	add	r4, r0, #0
	lsl	r4, r4, #0x3
	add	r4, r4, r8
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r6, #0x10]
	mov	r1, #0x2
	bl	GetWindowAttribute
	add	r2, r0, #0
	lsl	r2, r2, #0x3
	add	r2, r2, r7
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r3, #0x1
	bl	ListMenuUpdateCursorObject
.L121:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 ListMenuDrawCursor,.Lfe17-ListMenuDrawCursor
	.align	2, 0
	.type	 ListMenuAddCursorObject,function
	.thumb_func
ListMenuAddCursorObject:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r1, sp
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0xa0
	strb	r0, [r1, #0x1]
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x3
	bl	GetWindowAttribute
	mov	r1, sp
	lsl	r0, r0, #0x3
	add	r0, r0, #0x2
	strh	r0, [r1, #0x2]
	ldrb	r0, [r4, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0x1
	bl	GetFontAttribute
	mov	r1, sp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x2
	strh	r0, [r1, #0x4]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	strh	r0, [r1, #0x6]
	ldr	r0, .L136
	strh	r0, [r1, #0x8]
	mov	r0, #0xf
	strb	r0, [r1, #0xa]
	mov	r0, sp
	add	r1, r5, #0
	bl	ListMenuAddCursorObjectInternal
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L137:
	.align	2, 0
.L136:
	.word	0xffff
.Lfe18:
	.size	 ListMenuAddCursorObject,.Lfe18-ListMenuAddCursorObject
	.align	2, 0
	.type	 ListMenuErasePrintedCursor,function
	.thumb_func
ListMenuErasePrintedCursor:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r7, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	ldrb	r1, [r7, #0x17]
	lsr	r0, r1, #0x6
	cmp	r0, #0
	bne	.L139	@cond_branch
	lsl	r0, r1, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r4, r0, #0
	ldrb	r0, [r7, #0x16]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1d
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r7, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r7, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0x1
	bl	GetMenuCursorDimensionByFont
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r6, [r7, #0x10]
	ldrb	r2, [r7, #0x15]
	lsl	r2, r2, #0x1c
	lsr	r1, r2, #0x4
	orr	r1, r1, r2
	lsr	r1, r1, #0x18
	ldrb	r2, [r7, #0x13]
	mov	r3, r8
	mul	r3, r3, r4
	add	r4, r3, #0
	ldrb	r3, [r7, #0x14]
	lsl	r3, r3, #0x1c
	lsr	r3, r3, #0x1c
	add	r3, r3, r4
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	str	r5, [sp]
	str	r0, [sp, #0x4]
	add	r0, r6, #0
	bl	FillWindowPixelRect
.L139:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 ListMenuErasePrintedCursor,.Lfe19-ListMenuErasePrintedCursor
	.align	2, 0
	.type	 ListMenuUpdateSelectedRowIndexAndScrollOffset,function
	.thumb_func
ListMenuUpdateSelectedRowIndexAndScrollOffset:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	ldrh	r3, [r4, #0x1a]
	ldrh	r5, [r4, #0x18]
	cmp	r1, #0
	bne	.L141	@cond_branch
	ldrh	r0, [r4, #0xe]
	cmp	r0, #0x1
	bne	.L142	@cond_branch
	mov	r2, #0x0
	b	.L143
.L142:
	ldrh	r0, [r4, #0xe]
	lsr	r2, r0, #0x1
	mov	r1, #0x1
	and	r1, r1, r0
	add	r2, r2, r1
	sub	r0, r0, r2
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L143:
	cmp	r5, #0
	bne	.L144	@cond_branch
	cmp	r3, #0
	beq	.L161	@cond_branch
	ldr	r1, [r4]
	mov	r2, #0x3
	neg	r2, r2
.L147:
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r0, r5, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0, #0x4]
	cmp	r0, r2
	bne	.L175	@cond_branch
	cmp	r3, #0
	bne	.L147	@cond_branch
	b	.L161
.L144:
	cmp	r3, r2
	bls	.L152	@cond_branch
	ldr	r1, [r4]
	mov	r6, #0x3
	neg	r6, r6
.L153:
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r0, r5, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0, #0x4]
	cmp	r0, r6
	bne	.L175	@cond_branch
	cmp	r3, r2
	bhi	.L153	@cond_branch
.L152:
	sub	r0, r5, #0x1
	b	.L156
.L141:
	ldrh	r0, [r4, #0xe]
	cmp	r0, #0x1
	bne	.L157	@cond_branch
	mov	r2, #0x0
	b	.L176
.L157:
	ldrh	r0, [r4, #0xe]
	lsr	r2, r0, #0x1
	mov	r1, #0x1
	and	r1, r1, r0
	add	r2, r2, r1
.L176:
	add	r1, r0, #0
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, r1
	cmp	r5, r0
	bne	.L159	@cond_branch
	sub	r0, r1, #0x1
	cmp	r3, r0
	bge	.L161	@cond_branch
	ldr	r2, [r4]
	mov	r6, #0x3
	neg	r6, r6
	add	r1, r0, #0
.L162:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r0, r5, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r0, [r0, #0x4]
	cmp	r0, r6
	bne	.L174	@cond_branch
	cmp	r3, r1
	blt	.L162	@cond_branch
.L161:
	mov	r0, #0x0
	b	.L171
.L174:
.L175:
	strh	r3, [r4, #0x1a]
	mov	r0, #0x1
	b	.L171
.L159:
	cmp	r3, r2
	bcs	.L167	@cond_branch
	ldr	r1, [r4]
	mov	r6, #0x3
	neg	r6, r6
.L168:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r0, r5, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0, #0x4]
	cmp	r0, r6
	bne	.L175	@cond_branch
	cmp	r3, r2
	bcc	.L168	@cond_branch
.L167:
	add	r0, r5, #0x1
.L156:
	strh	r2, [r4, #0x1a]
	strh	r0, [r4, #0x18]
	mov	r0, #0x2
.L171:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 ListMenuUpdateSelectedRowIndexAndScrollOffset,.Lfe20-ListMenuUpdateSelectedRowIndexAndScrollOffset
	.align	2, 0
	.type	 ListMenuScroll,function
	.thumb_func
ListMenuScroll:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r7, r5, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldrh	r0, [r6, #0xe]
	cmp	r5, r0
	bcc	.L178	@cond_branch
	ldrb	r0, [r6, #0x10]
	ldrb	r2, [r6, #0x15]
	lsl	r2, r2, #0x1c
	lsr	r1, r2, #0x4
	orr	r1, r1, r2
	lsr	r1, r1, #0x18
	bl	FillWindowPixelBuffer
	ldrh	r1, [r6, #0x18]
	ldrh	r3, [r6, #0xe]
	add	r0, r6, #0
	mov	r2, #0x0
	bl	ListMenuPrintEntries
	b	.L179
.L178:
	ldrb	r0, [r6, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0x1
	bl	GetFontAttribute
	ldrb	r1, [r6, #0x16]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1d
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, r8
	cmp	r1, #0
	bne	.L180	@cond_branch
	ldrb	r0, [r6, #0x10]
	mov	r2, r5
	mul	r2, r2, r4
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r1, [r6, #0x15]
	lsl	r1, r1, #0x1c
	lsr	r3, r1, #0x4
	orr	r3, r3, r1
	lsr	r3, r3, #0x18
	mov	r1, #0x1
	bl	ScrollWindow
	ldrh	r1, [r6, #0x18]
	add	r0, r6, #0
	mov	r2, #0x0
	add	r3, r5, #0
	bl	ListMenuPrintEntries
	ldrh	r0, [r6, #0xe]
	mov	r1, r0
	mul	r1, r1, r4
	add	r0, r1, #0
	ldrb	r4, [r6, #0x14]
	lsl	r4, r4, #0x1c
	lsr	r4, r4, #0x1c
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r6, #0x10]
	mov	r1, #0x3
	bl	GetWindowAttribute
	add	r5, r0, #0
	lsl	r5, r5, #0x13
	lsr	r5, r5, #0x10
	ldrb	r0, [r6, #0x10]
	mov	r1, #0x4
	bl	GetWindowAttribute
	lsl	r0, r0, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r3, [r6, #0x10]
	ldrb	r2, [r6, #0x15]
	lsl	r2, r2, #0x1c
	lsr	r1, r2, #0x4
	orr	r1, r1, r2
	lsr	r1, r1, #0x18
	str	r5, [sp]
	str	r0, [sp, #0x4]
	add	r0, r3, #0
	mov	r2, #0x0
	add	r3, r4, #0
	bl	FillWindowPixelRect
	b	.L179
.L180:
	ldrb	r0, [r6, #0x10]
	mov	r2, r7
	mul	r2, r2, r4
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r1, [r6, #0x15]
	lsl	r1, r1, #0x1c
	lsr	r3, r1, #0x4
	orr	r3, r3, r1
	lsr	r3, r3, #0x18
	mov	r1, #0x0
	bl	ScrollWindow
	ldrh	r2, [r6, #0xe]
	sub	r2, r2, r7
	ldrh	r1, [r6, #0x18]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	add	r3, r7, #0
	bl	ListMenuPrintEntries
	ldrb	r0, [r6, #0x10]
	mov	r1, #0x3
	bl	GetWindowAttribute
	lsl	r0, r0, #0x13
	lsr	r0, r0, #0x10
	ldrb	r3, [r6, #0x10]
	ldrb	r2, [r6, #0x15]
	lsl	r2, r2, #0x1c
	lsr	r1, r2, #0x4
	orr	r1, r1, r2
	lsr	r1, r1, #0x18
	str	r0, [sp]
	ldrb	r0, [r6, #0x14]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	str	r0, [sp, #0x4]
	add	r0, r3, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
.L179:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 ListMenuScroll,.Lfe21-ListMenuScroll
	.align	2, 0
	.type	 ListMenuChangeSelection,function
	.thumb_func
ListMenuChangeSelection:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	ldrh	r0, [r4, #0x1a]
	mov	sl, r0
	mov	r7, #0x0
	mov	r5, #0x0
	mov	r0, #0x0
	cmp	r7, r8
	bcs	.L184	@cond_branch
.L186:
	add	r6, r0, #0x1
	b	.L187
.L190:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r4, #0x18]
	ldrh	r1, [r4, #0x1a]
	add	r0, r0, r1
	ldr	r1, [r4]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, [r0, #0x4]
	mov	r0, #0x3
	neg	r0, r0
	cmp	r1, r0
	bne	.L185	@cond_branch
.L187:
	add	r0, r4, #0
	mov	r1, r9
	bl	ListMenuUpdateSelectedRowIndexAndScrollOffset
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	orr	r5, r5, r0
	cmp	r0, #0x2
	beq	.L190	@cond_branch
.L185:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r8
	bcc	.L186	@cond_branch
.L184:
	ldr	r0, [sp]
	cmp	r0, #0
	beq	.L194	@cond_branch
	cmp	r5, #0x1
	beq	.L198	@cond_branch
	cmp	r5, #0x1
	ble	.L197	@cond_branch
	cmp	r5, #0x3
	ble	.L200	@cond_branch
.L197:
	mov	r0, #0x1
	b	.L203
.L198:
	add	r0, r4, #0
	mov	r1, sl
	bl	ListMenuErasePrintedCursor
	add	r0, r4, #0
	bl	ListMenuDrawCursor
	add	r0, r4, #0
	mov	r1, #0x0
	bl	ListMenuCallSelectionChangedCallback
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L194
.L200:
	add	r0, r4, #0
	mov	r1, sl
	bl	ListMenuErasePrintedCursor
	add	r0, r4, #0
	add	r1, r7, #0
	mov	r2, r9
	bl	ListMenuScroll
	add	r0, r4, #0
	bl	ListMenuDrawCursor
	add	r0, r4, #0
	mov	r1, #0x0
	bl	ListMenuCallSelectionChangedCallback
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x2
	bl	CopyWindowToVram
.L194:
	mov	r0, #0x0
.L203:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 ListMenuChangeSelection,.Lfe22-ListMenuChangeSelection
	.align	2, 0
	.type	 ListMenuCallSelectionChangedCallback,function
	.thumb_func
ListMenuCallSelectionChangedCallback:
	push	{r4, lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r3, [r2, #0x4]
	cmp	r3, #0
	beq	.L205	@cond_branch
	ldrh	r0, [r2, #0x18]
	ldrh	r1, [r2, #0x1a]
	add	r0, r0, r1
	ldr	r1, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0, #0x4]
	add	r1, r4, #0
	bl	_call_via_r3
.L205:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 ListMenuCallSelectionChangedCallback,.Lfe23-ListMenuCallSelectionChangedCallback
	.align	2, 0
	.globl	ListMenuOverrideSetColors
	.type	 ListMenuOverrideSetColors,function
	.thumb_func
ListMenuOverrideSetColors:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r6, .L207
	mov	r5, #0xf
	and	r0, r0, r5
	ldrb	r3, [r6]
	mov	r8, r3
	mov	r4, #0x10
	neg	r4, r4
	add	r3, r4, #0
	mov	r7, r8
	and	r3, r3, r7
	orr	r3, r3, r0
	lsr	r1, r1, #0x14
	and	r3, r3, r5
	orr	r3, r3, r1
	strb	r3, [r6]
	and	r2, r2, r5
	ldrb	r0, [r6, #0x1]
	and	r4, r4, r0
	orr	r4, r4, r2
	strb	r4, [r6, #0x1]
	ldrb	r0, [r6, #0x3]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r6, #0x3]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L208:
	.align	2, 0
.L207:
	.word	gListMenuOverride
.Lfe24:
	.size	 ListMenuOverrideSetColors,.Lfe24-ListMenuOverrideSetColors
	.align	2, 0
	.globl	ListMenuDefaultCursorMoveFunc
	.type	 ListMenuDefaultCursorMoveFunc,function
	.thumb_func
ListMenuDefaultCursorMoveFunc:
	push	{lr}
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L210	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L210:
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 ListMenuDefaultCursorMoveFunc,.Lfe25-ListMenuDefaultCursorMoveFunc
	.align	2, 0
	.type	 ListMenuGetTemplateField,function
	.thumb_func
ListMenuGetTemplateField:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L234
	add	r2, r1, r0
	cmp	r3, #0x10
	bhi	.L230	@cond_branch
	lsl	r0, r3, #0x2
	ldr	r1, .L234+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L235:
	.align	2, 0
.L234:
	.word	gTasks+0x8
	.word	.L231
	.align	2, 0
	.align	2, 0
.L231:
	.word	.L214
	.word	.L214
	.word	.L215
	.word	.L216
	.word	.L217
	.word	.L218
	.word	.L219
	.word	.L220
	.word	.L221
	.word	.L222
	.word	.L223
	.word	.L224
	.word	.L225
	.word	.L226
	.word	.L227
	.word	.L228
	.word	.L229
.L214:
	ldr	r0, [r2, #0x4]
	b	.L232
.L215:
	ldrh	r0, [r2, #0xc]
	b	.L232
.L216:
	ldrh	r0, [r2, #0xe]
	b	.L232
.L217:
	ldrb	r0, [r2, #0x10]
	b	.L232
.L218:
	ldrb	r0, [r2, #0x11]
	b	.L232
.L219:
	ldrb	r0, [r2, #0x12]
	b	.L232
.L220:
	ldrb	r0, [r2, #0x13]
	b	.L232
.L221:
	ldrb	r0, [r2, #0x14]
	b	.L233
.L222:
	ldrb	r0, [r2, #0x14]
	lsr	r0, r0, #0x4
	b	.L232
.L223:
	ldrb	r0, [r2, #0x15]
.L233:
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	b	.L232
.L224:
	ldrb	r0, [r2, #0x15]
	lsr	r0, r0, #0x4
	b	.L232
.L225:
	ldrb	r0, [r2, #0x16]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	b	.L232
.L226:
	ldrb	r0, [r2, #0x16]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1d
	b	.L232
.L227:
	ldrb	r0, [r2, #0x16]
	lsr	r0, r0, #0x6
	b	.L232
.L228:
	ldrb	r0, [r2, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	b	.L232
.L229:
	ldrb	r0, [r2, #0x17]
	lsr	r0, r0, #0x6
	b	.L232
.L230:
	mov	r0, #0x1
	neg	r0, r0
.L232:
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 ListMenuGetTemplateField,.Lfe26-ListMenuGetTemplateField
	.align	2, 0
	.globl	ListMenuSetTemplateField
	.type	 ListMenuSetTemplateField,function
	.thumb_func
ListMenuSetTemplateField:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L261
	add	r3, r1, r0
	cmp	r4, #0x10
	bhi	.L237	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L261+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L262:
	.align	2, 0
.L261:
	.word	gTasks+0x8
	.word	.L255
	.align	2, 0
	.align	2, 0
.L255:
	.word	.L239
	.word	.L239
	.word	.L240
	.word	.L241
	.word	.L242
	.word	.L243
	.word	.L244
	.word	.L245
	.word	.L246
	.word	.L247
	.word	.L248
	.word	.L249
	.word	.L250
	.word	.L251
	.word	.L252
	.word	.L253
	.word	.L254
.L239:
	str	r2, [r3, #0x4]
	b	.L237
.L240:
	strh	r2, [r3, #0xc]
	b	.L237
.L241:
	strh	r2, [r3, #0xe]
	b	.L237
.L242:
	strb	r2, [r3, #0x10]
	b	.L237
.L243:
	strb	r2, [r3, #0x11]
	b	.L237
.L244:
	strb	r2, [r3, #0x12]
	b	.L237
.L245:
	strb	r2, [r3, #0x13]
	b	.L237
.L246:
	mov	r0, #0xf
	and	r2, r2, r0
	ldrb	r1, [r3, #0x14]
	mov	r0, #0x10
	neg	r0, r0
	b	.L257
.L247:
	lsl	r2, r2, #0x4
	ldrb	r1, [r3, #0x14]
	mov	r0, #0xf
.L257:
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3, #0x14]
	b	.L237
.L248:
	mov	r0, #0xf
	and	r2, r2, r0
	ldrb	r1, [r3, #0x15]
	mov	r0, #0x10
	neg	r0, r0
	b	.L258
.L249:
	lsl	r2, r2, #0x4
	ldrb	r1, [r3, #0x15]
	mov	r0, #0xf
.L258:
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3, #0x15]
	b	.L237
.L250:
	mov	r0, #0x7
	and	r2, r2, r0
	ldrb	r1, [r3, #0x16]
	mov	r0, #0x8
	neg	r0, r0
	b	.L259
.L251:
	mov	r0, #0x7
	and	r2, r2, r0
	lsl	r2, r2, #0x3
	ldrb	r1, [r3, #0x16]
	mov	r0, #0x39
	neg	r0, r0
	b	.L259
.L252:
	lsl	r2, r2, #0x6
	ldrb	r1, [r3, #0x16]
	mov	r0, #0x3f
.L259:
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3, #0x16]
	b	.L237
.L253:
	mov	r0, #0x3f
	and	r2, r2, r0
	ldrb	r1, [r3, #0x17]
	mov	r0, #0x40
	neg	r0, r0
	b	.L260
.L254:
	lsl	r2, r2, #0x6
	ldrb	r1, [r3, #0x17]
	mov	r0, #0x3f
.L260:
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3, #0x17]
.L237:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 ListMenuSetTemplateField,.Lfe27-ListMenuSetTemplateField
	.align	2, 0
	.globl	ListMenu_LoadMonIconPalette
	.type	 ListMenu_LoadMonIconPalette,function
	.thumb_func
ListMenu_LoadMonIconPalette:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetValidMonIconPalettePtr
	add	r1, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 ListMenu_LoadMonIconPalette,.Lfe28-ListMenu_LoadMonIconPalette
	.align	2, 0
	.globl	ListMenu_DrawMonIconGraphics
	.type	 ListMenu_DrawMonIconGraphics,function
	.thumb_func
ListMenu_DrawMonIconGraphics:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r4, r3, #0
	ldr	r5, [sp, #0x18]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r2, #0x1
	bl	GetMonIconPtr
	add	r1, r0, #0
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	add	r0, r6, #0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	BlitBitmapToWindow
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 ListMenu_DrawMonIconGraphics,.Lfe29-ListMenu_DrawMonIconGraphics
	.align	2, 0
	.globl	ListMenuLoadStdPalAt
	.type	 ListMenuLoadStdPalAt,function
	.thumb_func
ListMenuLoadStdPalAt:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0
	beq	.L268	@cond_branch
	cmp	r1, #0x1
	beq	.L269	@cond_branch
.L268:
	ldr	r0, .L271
	b	.L266
.L272:
	.align	2, 0
.L271:
	.word	gMenuInfoElements1_Pal
.L269:
	ldr	r0, .L273
.L266:
	add	r1, r2, #0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L274:
	.align	2, 0
.L273:
	.word	gMenuInfoElements2_Pal
.Lfe30:
	.size	 ListMenuLoadStdPalAt,.Lfe30-ListMenuLoadStdPalAt
	.align	2, 0
	.globl	BlitMenuInfoIcon
	.type	 BlitMenuInfoIcon,function
	.thumb_func
BlitMenuInfoIcon:
	push	{r4, r5, lr}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r4, .L276
	lsr	r1, r1, #0x16
	add	r1, r1, r4
	ldrh	r5, [r1, #0x2]
	lsl	r5, r5, #0x5
	ldr	r4, .L276+0x4
	add	r5, r5, r4
	mov	r4, #0x80
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r2, [sp, #0x8]
	str	r3, [sp, #0xc]
	ldrb	r2, [r1]
	str	r2, [sp, #0x10]
	ldrb	r1, [r1, #0x1]
	str	r1, [sp, #0x14]
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlitBitmapRectToWindow
	add	sp, sp, #0x18
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L277:
	.align	2, 0
.L276:
	.word	sMenuInfoIcons
	.word	gMenuInfoElements_Gfx
.Lfe31:
	.size	 BlitMenuInfoIcon,.Lfe31-BlitMenuInfoIcon
	.comm	gMultiuseListMenuTemplate, 24	@ 24
	.comm	gListMenuOverride, 4	@ 4
.text
	.align	2, 0 @ Don't pad with nop

