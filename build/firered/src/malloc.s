@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 head,object
	.size	 head,4
head:
	.word	0x0
	.align	2, 0
	.type	 pos,object
	.size	 pos,4
pos:
	.word	0x0
	.align	2, 0
	.type	 splitBlock,object
	.size	 splitBlock,4
splitBlock:
	.word	0x0
.text
	.align	2, 0
	.globl	PutMemBlockHeader
	.type	 PutMemBlockHeader,function
	.thumb_func
PutMemBlockHeader:
	push	{r4, lr}
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r4, .L3
	strh	r4, [r0, #0x2]
	str	r3, [r0, #0x4]
	str	r1, [r0, #0x8]
	str	r2, [r0, #0xc]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	0xa3a3
.Lfe1:
	.size	 PutMemBlockHeader,.Lfe1-PutMemBlockHeader
	.align	2, 0
	.globl	PutFirstMemBlockHeader
	.type	 PutFirstMemBlockHeader,function
	.thumb_func
PutFirstMemBlockHeader:
	push	{lr}
	add	r2, r0, #0
	add	r3, r1, #0
	sub	r3, r3, #0x10
	add	r1, r2, #0
	bl	PutMemBlockHeader
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 PutFirstMemBlockHeader,.Lfe2-PutFirstMemBlockHeader
	.section .rodata
	.align	2, 0
.LC3:
	.ascii	"C:/WORK/POKeFRLG/src/pm_lgfr_ose/source/gflib/malloc.c\000"
	.align	2, 0
.LC5:
	.ascii	"0\000"
.text
	.align	2, 0
	.globl	AllocInternal
	.type	 AllocInternal,function
	.thumb_func
AllocInternal:
	push	{r4, r5, r6, r7, lr}
	add	r5, r1, #0
	ldr	r2, .L18
	str	r0, [r2]
	ldr	r1, .L18+0x4
	str	r0, [r1]
	mov	r0, #0x3
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L7	@cond_branch
	lsr	r0, r5, #0x2
	add	r0, r0, #0x1
	lsl	r5, r0, #0x2
.L7:
	add	r6, r1, #0
	ldr	r7, .L18+0x8
.L8:
	ldr	r4, [r6]
	ldrh	r0, [r4]
	cmp	r0, #0
	bne	.L11	@cond_branch
	ldr	r3, [r4, #0x4]
	cmp	r3, r5
	bcc	.L11	@cond_branch
	sub	r0, r3, r5
	cmp	r0, #0x1f
	bhi	.L13	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4]
	add	r0, r4, #0
	add	r0, r0, #0x10
	b	.L17
.L19:
	.align	2, 0
.L18:
	.word	head
	.word	pos
	.word	splitBlock
.L13:
	sub	r3, r3, #0x10
	sub	r3, r3, r5
	add	r0, r5, #0
	add	r0, r0, #0x10
	add	r0, r4, r0
	str	r0, [r7]
	mov	r1, #0x1
	strh	r1, [r4]
	str	r5, [r4, #0x4]
	ldr	r2, [r4, #0xc]
	add	r1, r4, #0
	bl	PutMemBlockHeader
	ldr	r0, [r6]
	ldr	r1, [r7]
	str	r1, [r0, #0xc]
	ldr	r0, .L20
	ldr	r2, [r1, #0xc]
	ldr	r0, [r0]
	cmp	r2, r0
	beq	.L15	@cond_branch
	str	r1, [r2, #0x8]
.L15:
	ldr	r0, [r6]
	add	r0, r0, #0x10
	b	.L17
.L21:
	.align	2, 0
.L20:
	.word	head
.L11:
	ldr	r0, [r1]
	ldr	r3, [r0, #0xc]
	ldr	r0, [r2]
	cmp	r3, r0
	beq	.L16	@cond_branch
	str	r3, [r1]
	b	.L8
.L16:
	ldr	r0, .L22
	mov	r1, #0xae
	ldr	r2, .L22+0x4
	mov	r3, #0x1
	bl	AGBAssert
	mov	r0, #0x0
.L17:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L23:
	.align	2, 0
.L22:
	.word	.LC3
	.word	.LC5
.Lfe3:
	.size	 AllocInternal,.Lfe3-AllocInternal
	.section .rodata
	.align	2, 0
.LC8:
	.ascii	"p != NULL\000"
	.align	2, 0
.LC10:
	.ascii	"pos->magic_number == MALLOC_SYSTEM_ID\000"
	.align	2, 0
.LC12:
	.ascii	"pos->flag == TRUE\000"
	.align	2, 0
.LC14:
	.ascii	"pos->next->magic_number == MALLOC_SYSTEM_ID\000"
	.align	2, 0
.LC16:
	.ascii	"pos->prev->magic_number == MALLOC_SYSTEM_ID\000"
.text
	.align	2, 0
	.globl	FreeInternal
	.type	 FreeInternal,function
	.thumb_func
FreeInternal:
	push	{r4, r5, r6, r7, lr}
	cmp	r1, #0
	bne	.L42	@cond_branch
	ldr	r0, .L43
	ldr	r2, .L43+0x4
	mov	r1, #0xc3
	mov	r3, #0x1
	bl	AGBAssert
	b	.L27
.L44:
	.align	2, 0
.L43:
	.word	.LC3
	.word	.LC8
.L42:
	add	r6, r0, #0
	add	r4, r1, #0
	sub	r4, r4, #0x10
	ldrh	r0, [r4, #0x2]
	ldr	r7, .L45
	cmp	r0, r7
	beq	.L29	@cond_branch
	ldr	r0, .L45+0x4
	ldr	r2, .L45+0x8
	mov	r1, #0xcc
	mov	r3, #0x1
	bl	AGBAssert
.L29:
	ldrh	r0, [r4]
	cmp	r0, #0x1
	beq	.L31	@cond_branch
	ldr	r0, .L45+0x4
	ldr	r2, .L45+0xc
	mov	r1, #0xcd
	mov	r3, #0x1
	bl	AGBAssert
.L31:
	mov	r0, #0x0
	strh	r0, [r4]
	ldr	r0, [r4, #0xc]
	cmp	r0, r6
	beq	.L32	@cond_branch
	ldrh	r5, [r0]
	cmp	r5, #0
	bne	.L32	@cond_branch
	ldrh	r0, [r0, #0x2]
	cmp	r0, r7
	beq	.L35	@cond_branch
	ldr	r0, .L45+0x4
	ldr	r2, .L45+0x10
	mov	r1, #0xd3
	mov	r3, #0x1
	bl	AGBAssert
.L35:
	ldr	r0, [r4, #0x4]
	add	r0, r0, #0x10
	ldr	r2, [r4, #0xc]
	ldr	r1, [r2, #0x4]
	add	r0, r0, r1
	str	r0, [r4, #0x4]
	strh	r5, [r2, #0x2]
	ldr	r0, [r4, #0xc]
	ldr	r0, [r0, #0xc]
	str	r0, [r4, #0xc]
	cmp	r0, r6
	beq	.L32	@cond_branch
	str	r4, [r0, #0x8]
.L32:
	cmp	r4, r6
	beq	.L27	@cond_branch
	ldr	r0, [r4, #0x8]
	ldrh	r5, [r0]
	cmp	r5, #0
	bne	.L27	@cond_branch
	ldrh	r1, [r0, #0x2]
	ldr	r0, .L45
	cmp	r1, r0
	beq	.L40	@cond_branch
	ldr	r0, .L45+0x4
	ldr	r2, .L45+0x14
	mov	r1, #0xe4
	mov	r3, #0x1
	bl	AGBAssert
.L40:
	ldr	r1, [r4, #0x8]
	ldr	r0, [r4, #0xc]
	str	r0, [r1, #0xc]
	ldr	r1, [r4, #0xc]
	cmp	r1, r6
	beq	.L41	@cond_branch
	ldr	r0, [r4, #0x8]
	str	r0, [r1, #0x8]
.L41:
	strh	r5, [r4, #0x2]
	ldr	r0, [r4, #0x8]
	ldr	r1, [r0, #0x4]
	add	r1, r1, #0x10
	ldr	r2, [r4, #0x4]
	add	r1, r1, r2
	str	r1, [r0, #0x4]
.L27:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	0xa3a3
	.word	.LC3
	.word	.LC10
	.word	.LC12
	.word	.LC14
	.word	.LC16
.Lfe4:
	.size	 FreeInternal,.Lfe4-FreeInternal
	.align	2, 0
	.globl	AllocZeroedInternal
	.type	 AllocZeroedInternal,function
	.thumb_func
AllocZeroedInternal:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r1, #0
	bl	AllocInternal
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L48	@cond_branch
	mov	r0, #0x3
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L49	@cond_branch
	lsr	r0, r4, #0x2
	add	r0, r0, #0x1
	lsl	r4, r0, #0x2
.L49:
	mov	r0, #0x0
	str	r0, [sp]
	lsl	r2, r4, #0x9
	lsr	r2, r2, #0xb
	mov	r0, #0xa0
	lsl	r0, r0, #0x13
	orr	r2, r2, r0
	mov	r0, sp
	add	r1, r5, #0
	bl	CpuSet
.L48:
	add	r0, r5, #0
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 AllocZeroedInternal,.Lfe5-AllocZeroedInternal
	.align	2, 0
	.globl	CheckMemBlockInternal
	.type	 CheckMemBlockInternal,function
	.thumb_func
CheckMemBlockInternal:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r3, r1, #0
	sub	r3, r3, #0x10
	ldrh	r2, [r3, #0x2]
	ldr	r0, .L59
	cmp	r2, r0
	bne	.L58	@cond_branch
	ldr	r0, [r3, #0xc]
	ldrh	r1, [r0, #0x2]
	add	r4, r0, #0
	cmp	r1, r2
	bne	.L58	@cond_branch
	cmp	r4, r5
	beq	.L53	@cond_branch
	ldr	r0, [r4, #0x8]
	cmp	r0, r3
	bne	.L58	@cond_branch
.L53:
	ldr	r2, [r3, #0x8]
	ldrh	r1, [r2, #0x2]
	ldr	r0, .L59
	cmp	r1, r0
	bne	.L58	@cond_branch
	cmp	r2, r5
	beq	.L55	@cond_branch
	ldr	r0, [r2, #0xc]
	cmp	r0, r3
	bne	.L58	@cond_branch
.L55:
	cmp	r4, r5
	beq	.L56	@cond_branch
	ldr	r0, [r3, #0x4]
	add	r0, r0, #0x10
	add	r0, r3, r0
	cmp	r4, r0
	beq	.L56	@cond_branch
.L58:
	mov	r0, #0x0
	b	.L57
.L60:
	.align	2, 0
.L59:
	.word	0xa3a3
.L56:
	mov	r0, #0x1
.L57:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 CheckMemBlockInternal,.Lfe6-CheckMemBlockInternal
	.align	2, 0
	.globl	InitHeap
	.type	 InitHeap,function
	.thumb_func
InitHeap:
	push	{lr}
	ldr	r2, .L62
	str	r0, [r2]
	ldr	r2, .L62+0x4
	str	r1, [r2]
	bl	PutFirstMemBlockHeader
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	sHeapStart
	.word	sHeapSize
.Lfe7:
	.size	 InitHeap,.Lfe7-InitHeap
	.align	2, 0
	.globl	Alloc
	.type	 Alloc,function
	.thumb_func
Alloc:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L65
	ldr	r0, [r0]
	bl	AllocInternal
	pop	{r1}
	bx	r1
.L66:
	.align	2, 0
.L65:
	.word	sHeapStart
.Lfe8:
	.size	 Alloc,.Lfe8-Alloc
	.align	2, 0
	.globl	AllocZeroed
	.type	 AllocZeroed,function
	.thumb_func
AllocZeroed:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L68
	ldr	r0, [r0]
	bl	AllocZeroedInternal
	pop	{r1}
	bx	r1
.L69:
	.align	2, 0
.L68:
	.word	sHeapStart
.Lfe9:
	.size	 AllocZeroed,.Lfe9-AllocZeroed
	.align	2, 0
	.globl	Free
	.type	 Free,function
	.thumb_func
Free:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L71
	ldr	r0, [r0]
	bl	FreeInternal
	pop	{r0}
	bx	r0
.L72:
	.align	2, 0
.L71:
	.word	sHeapStart
.Lfe10:
	.size	 Free,.Lfe10-Free
	.align	2, 0
	.globl	CheckMemBlock
	.type	 CheckMemBlock,function
	.thumb_func
CheckMemBlock:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L74
	ldr	r0, [r0]
	bl	CheckMemBlockInternal
	pop	{r1}
	bx	r1
.L75:
	.align	2, 0
.L74:
	.word	sHeapStart
.Lfe11:
	.size	 CheckMemBlock,.Lfe11-CheckMemBlock
	.align	2, 0
	.globl	CheckHeap
	.type	 CheckHeap,function
	.thumb_func
CheckHeap:
	push	{r4, r5, lr}
	ldr	r0, .L84
	ldr	r4, [r0]
	add	r5, r0, #0
.L77:
	ldr	r0, [r5]
	add	r1, r4, #0
	add	r1, r1, #0x10
	bl	CheckMemBlockInternal
	cmp	r0, #0
	beq	.L80	@cond_branch
	ldr	r4, [r4, #0xc]
	ldr	r0, [r5]
	cmp	r4, r0
	bne	.L77	@cond_branch
	mov	r0, #0x1
	b	.L83
.L85:
	.align	2, 0
.L84:
	.word	sHeapStart
.L80:
	mov	r0, #0x0
.L83:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 CheckHeap,.Lfe12-CheckHeap

	.lcomm	sHeapStart,4

	.lcomm	sHeapSize,4
.text
	.align	2, 0 @ Don't pad with nop

