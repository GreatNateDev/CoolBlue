@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	Q_8_8_mul
	.type	 Q_8_8_mul,function
	.thumb_func
Q_8_8_mul:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mul	r0, r0, r1
	add	r1, r0, #0
	cmp	r0, #0
	bge	.L3	@cond_branch
	add	r1, r1, #0xff
.L3:
	lsl	r0, r1, #0x8
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 Q_8_8_mul,.Lfe1-Q_8_8_mul
	.align	2, 0
	.globl	Q_N_S_mul
	.type	 Q_N_S_mul,function
	.thumb_func
Q_N_S_mul:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mul	r3, r3, r2
	mov	r1, #0x1
	lsl	r1, r1, r0
	add	r0, r3, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 Q_N_S_mul,.Lfe2-Q_N_S_mul
	.align	2, 0
	.globl	Q_24_8_mul
	.type	 Q_24_8_mul,function
	.thumb_func
Q_24_8_mul:
	push	{r4, r5, r6, r7, lr}
	add	r2, r1, #0
	add	r4, r0, #0
	asr	r5, r0, #0x1f
	asr	r3, r2, #0x1f
	add	r1, r5, #0
	add	r0, r4, #0
	bl	__muldi3
	add	r5, r1, #0
	add	r4, r0, #0
	add	r7, r5, #0
	add	r6, r4, #0
	cmp	r5, #0
	bge	.L6	@cond_branch
	mov	r6, #0xff
	mov	r7, #0
	add	r6, r6, r4
	adc	r7, r7, r5
.L6:
	lsl	r3, r7, #0x18
	lsr	r2, r6, #0x8
	add	r0, r3, #0
	orr	r0, r0, r2
	asr	r1, r7, #0x8
	add	r5, r1, #0
	add	r4, r0, #0
	add	r0, r4, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 Q_24_8_mul,.Lfe3-Q_24_8_mul
	.align	2, 0
	.globl	Q_8_8_div
	.type	 Q_8_8_div,function
	.thumb_func
Q_8_8_div:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0
	beq	.L9	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x8
	bl	__divsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	b	.L10
.L9:
	mov	r0, #0x0
.L10:
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 Q_8_8_div,.Lfe4-Q_8_8_div
	.align	2, 0
	.globl	Q_N_S_div
	.type	 Q_N_S_div,function
	.thumb_func
Q_N_S_div:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	lsl	r2, r2, #0x10
	asr	r1, r2, #0x10
	cmp	r1, #0
	beq	.L12	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r0, r0, r3
	bl	__divsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	b	.L13
.L12:
	mov	r0, #0x0
.L13:
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 Q_N_S_div,.Lfe5-Q_N_S_div
	.align	2, 0
	.globl	Q_24_8_div
	.type	 Q_24_8_div,function
	.thumb_func
Q_24_8_div:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	cmp	r6, #0
	beq	.L15	@cond_branch
	add	r2, r0, #0
	asr	r3, r0, #0x1f
	lsr	r5, r2, #0x18
	lsl	r4, r3, #0x8
	add	r1, r5, #0
	orr	r1, r1, r4
	lsl	r0, r2, #0x8
	add	r2, r6, #0
	asr	r3, r6, #0x1f
	bl	__divdi3
	b	.L16
.L15:
	mov	r0, #0x0
.L16:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 Q_24_8_div,.Lfe6-Q_24_8_div
	.align	2, 0
	.globl	Q_8_8_inv
	.type	 Q_8_8_inv,function
	.thumb_func
Q_8_8_inv:
	push	{lr}
	add	r1, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	__divsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 Q_8_8_inv,.Lfe7-Q_8_8_inv
	.align	2, 0
	.globl	Q_N_S_inv
	.type	 Q_N_S_inv,function
	.thumb_func
Q_N_S_inv:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	lsl	r2, r2, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 Q_N_S_inv,.Lfe8-Q_N_S_inv
	.align	2, 0
	.globl	Q_24_8_inv
	.type	 Q_24_8_inv,function
	.thumb_func
Q_24_8_inv:
	push	{lr}
	add	r2, r0, #0
	ldr	r1, .L20+0x4		@ created by thumb_load_double_from_address
	ldr	r0, .L20		@ created by thumb_load_double_from_address
	asr	r3, r2, #0x1f
	bl	__divdi3
	pop	{r1}
	bx	r1
.L21:
	.align	2, 0
.L20:
	.word	0x10000
	.word	0x0
.Lfe9:
	.size	 Q_24_8_inv,.Lfe9-Q_24_8_inv
.text
	.align	2, 0 @ Don't pad with nop

