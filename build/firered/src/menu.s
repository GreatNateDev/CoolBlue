@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sMenu,object
	.size	 sMenu,12
sMenu:
	.byte	0x0
	.space	11
	.align	1, 0
	.type	 sTileNum,object
	.size	 sTileNum,2
sTileNum:
	.short	0x0
	.type	 sPaletteNum,object
	.size	 sPaletteNum,1
sPaletteNum:
	.byte	0x0
	.type	 sYesNoWindowId,object
	.size	 sYesNoWindowId,1
sYesNoWindowId:
	.byte	0x0
	.type	 sTopBarWindowId,object
	.size	 sTopBarWindowId,1
sTopBarWindowId:
	.byte	0x0
	.section .rodata
	.type	 sTopBarWindowTextColors,object
	.size	 sTopBarWindowTextColors,3
sTopBarWindowTextColors:
	.byte	0xf
	.byte	0x1
	.byte	0x2
.text
	.align	2, 0
	.globl	DrawDialogFrameWithCustomTileAndPalette
	.type	 DrawDialogFrameWithCustomTileAndPalette,function
	.thumb_func
DrawDialogFrameWithCustomTileAndPalette:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L6
	strh	r2, [r0]
	ldr	r0, .L6+0x4
	strb	r3, [r0]
	ldr	r1, .L6+0x8
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L5	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L5:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	sTileNum
	.word	sPaletteNum
	.word	WindowFunc_DrawDialogFrameWithCustomTileAndPalette
.Lfe1:
	.size	 DrawDialogFrameWithCustomTileAndPalette,.Lfe1-DrawDialogFrameWithCustomTileAndPalette
	.align	2, 0
	.type	 DrawDialogFrameWithCustomTile,function
	.thumb_func
DrawDialogFrameWithCustomTile:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L10
	strh	r2, [r0]
	ldr	r5, .L10+0x4
	add	r0, r6, #0
	mov	r1, #0x5
	bl	GetWindowAttribute
	strb	r0, [r5]
	ldr	r1, .L10+0x8
	add	r0, r6, #0
	bl	CallWindowFunction
	add	r0, r6, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r6, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L9	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L9:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	sTileNum
	.word	sPaletteNum
	.word	WindowFunc_DrawDialogFrameWithCustomTileAndPalette
.Lfe2:
	.size	 DrawDialogFrameWithCustomTile,.Lfe2-DrawDialogFrameWithCustomTile
	.align	2, 0
	.type	 WindowFunc_DrawDialogFrameWithCustomTileAndPalette,function
	.thumb_func
WindowFunc_DrawDialogFrameWithCustomTileAndPalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	add	r6, r0, #0
	add	r5, r2, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r0, r1, #0x18
	lsl	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	ldr	r1, .L13
	mov	r9, r1
	ldrh	r1, [r1]
	lsr	r2, r0, #0x18
	str	r2, [sp, #0xc]
	mov	r3, #0xfe
	lsl	r3, r3, #0x18
	add	r2, r0, r3
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x14]
	lsr	r0, r5, #0x18
	mov	sl, r0
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	ldr	r3, .L13+0x4
	mov	r8, r3
	ldrb	r0, [r3]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x14]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r0, r9
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0xc]
	sub	r0, r0, #0x1
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x18]
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x18]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r3, r9
	ldrh	r1, [r3]
	add	r1, r1, #0x2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x10]
	str	r0, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0xc]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r3, r9
	ldrh	r1, [r3]
	add	r1, r1, #0x3
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0xc]
	ldr	r2, [sp, #0x10]
	add	r7, r0, r2
	lsl	r2, r7, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x1c]
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r3, r8
	ldrb	r0, [r3]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r0, r9
	ldrh	r1, [r0]
	add	r1, r1, #0x4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r7, #0x1
	lsl	r2, r0, #0x18
	lsr	r7, r2, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	add	r2, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r3, r9
	ldrh	r1, [r3]
	add	r1, r1, #0x5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x14]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	mov	r3, r9
	ldrh	r1, [r3]
	add	r1, r1, #0x6
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x18]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	mov	r3, r9
	ldrh	r1, [r3]
	add	r1, r1, #0x8
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x1c]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	mov	r3, r9
	ldrh	r1, [r3]
	add	r1, r1, #0x9
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	add	r2, r7, #0
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	mov	r3, r9
	ldrh	r1, [r3]
	add	r1, r1, #0xa
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r5, sl
	add	r5, r5, #0x1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x14]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r3, r9
	ldrh	r1, [r3]
	add	r1, r1, #0xb
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x18]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r3, r9
	ldrh	r1, [r3]
	add	r1, r1, #0xc
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x1c]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r3, r9
	ldrh	r1, [r3]
	add	r1, r1, #0xd
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	add	r2, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L13+0x8
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r5, sl
	add	r5, r5, #0x2
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x14]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L13+0xc
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x18]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L13+0x10
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x1c]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L13+0x14
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	add	r2, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L13+0x18
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r5, sl
	add	r5, r5, #0x3
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x14]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L13+0x1c
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x18]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L13+0x20
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x1c]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L13+0x24
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	add	r2, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r3, #0x80
	lsl	r3, r3, #0x4
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r2, #0x4
	add	sl, sl, r2
	mov	r3, sl
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	sl, r3
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x14]
	bl	FillBgTilemapBufferRect
	ldr	r3, .L13+0x28
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x18]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	ldr	r3, .L13+0x2c
	add	r1, r3, #0
	mov	r0, r9
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, [sp, #0x10]
	str	r2, [sp]
	str	r4, [sp, #0x4]
	mov	r3, r8
	ldrb	r0, [r3]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0xc]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	ldr	r0, .L13+0x30
	add	r1, r0, #0
	mov	r2, r9
	ldrh	r2, [r2]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r3, r8
	ldrb	r0, [r3]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x1c]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	ldr	r0, .L13+0x34
	add	r1, r0, #0
	mov	r2, r9
	ldrh	r2, [r2]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r3, r8
	ldrb	r0, [r3]
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	add	r2, r7, #0
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	sTileNum
	.word	sPaletteNum
	.word	0x80a
	.word	0x80b
	.word	0x80c
	.word	0x80d
	.word	0x805
	.word	0x806
	.word	0x808
	.word	0x809
	.word	0x801
	.word	0x802
	.word	0x803
	.word	0x804
.Lfe3:
	.size	 WindowFunc_DrawDialogFrameWithCustomTileAndPalette,.Lfe3-WindowFunc_DrawDialogFrameWithCustomTileAndPalette
	.align	2, 0
	.globl	ClearDialogWindowAndFrameToTransparent
	.type	 ClearDialogWindowAndFrameToTransparent,function
	.thumb_func
ClearDialogWindowAndFrameToTransparent:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L17
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	ClearWindowTilemap
	cmp	r4, #0x1
	bne	.L16	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L16:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	WindowFunc_ClearDialogWindowAndFrameNullPalette
.Lfe4:
	.size	 ClearDialogWindowAndFrameToTransparent,.Lfe4-ClearDialogWindowAndFrameToTransparent
	.align	2, 0
	.type	 WindowFunc_ClearDialogWindowAndFrameNullPalette,function
	.thumb_func
WindowFunc_ClearDialogWindowAndFrameNullPalette:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsl	r1, r1, #0x18
	mov	r2, #0xfe
	lsl	r2, r2, #0x18
	add	r4, r4, r2
	lsr	r4, r4, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x13
	add	r3, r3, r2
	lsr	r3, r3, #0x18
	str	r3, [sp]
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 WindowFunc_ClearDialogWindowAndFrameNullPalette,.Lfe5-WindowFunc_ClearDialogWindowAndFrameNullPalette
	.align	2, 0
	.globl	DrawStdFrameWithCustomTileAndPalette
	.type	 DrawStdFrameWithCustomTileAndPalette,function
	.thumb_func
DrawStdFrameWithCustomTileAndPalette:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L22
	strh	r2, [r0]
	ldr	r0, .L22+0x4
	strb	r3, [r0]
	ldr	r1, .L22+0x8
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L21	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L21:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	sTileNum
	.word	sPaletteNum
	.word	WindowFunc_DrawStdFrameWithCustomTileAndPalette
.Lfe6:
	.size	 DrawStdFrameWithCustomTileAndPalette,.Lfe6-DrawStdFrameWithCustomTileAndPalette
	.align	2, 0
	.type	 DrawStdFrameWithCustomTile,function
	.thumb_func
DrawStdFrameWithCustomTile:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L26
	strh	r2, [r0]
	ldr	r5, .L26+0x4
	add	r0, r6, #0
	mov	r1, #0x5
	bl	GetWindowAttribute
	strb	r0, [r5]
	ldr	r1, .L26+0x8
	add	r0, r6, #0
	bl	CallWindowFunction
	add	r0, r6, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r6, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L25	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L25:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	sTileNum
	.word	sPaletteNum
	.word	WindowFunc_DrawStdFrameWithCustomTileAndPalette
.Lfe7:
	.size	 DrawStdFrameWithCustomTile,.Lfe7-DrawStdFrameWithCustomTile
	.align	2, 0
	.type	 WindowFunc_DrawStdFrameWithCustomTileAndPalette,function
	.thumb_func
WindowFunc_DrawStdFrameWithCustomTileAndPalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	mov	r9, r0
	add	r6, r1, #0
	add	r4, r2, #0
	ldr	r0, [sp, #0x38]
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	ldr	r2, .L29
	ldrh	r1, [r2]
	lsr	r0, r6, #0x18
	str	r0, [sp, #0xc]
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r6, r6, r2
	lsr	r6, r6, #0x18
	lsr	r0, r4, #0x18
	mov	r8, r0
	add	r4, r4, r2
	lsr	r4, r4, #0x18
	mov	r5, #0x1
	str	r5, [sp]
	str	r5, [sp, #0x4]
	ldr	r7, .L29+0x4
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	add	r2, r6, #0
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r2, .L29
	ldrh	r1, [r2]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x10]
	str	r0, [sp]
	str	r5, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	ldr	r2, [sp, #0xc]
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r2, .L29
	ldrh	r1, [r2]
	add	r1, r1, #0x2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0xc]
	ldr	r2, [sp, #0x10]
	add	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	str	r5, [sp]
	str	r5, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	mov	r2, sl
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r0, .L29
	ldrh	r1, [r0]
	add	r1, r1, #0x3
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r5, [sp]
	ldr	r2, [sp, #0x14]
	str	r2, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	add	r2, r6, #0
	mov	r3, r8
	bl	FillBgTilemapBufferRect
	ldr	r0, .L29
	ldrh	r1, [r0]
	add	r1, r1, #0x5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r5, [sp]
	ldr	r2, [sp, #0x14]
	str	r2, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	mov	r2, sl
	mov	r3, r8
	bl	FillBgTilemapBufferRect
	ldr	r0, .L29
	ldrh	r1, [r0]
	add	r1, r1, #0x6
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, [sp, #0x14]
	add	r8, r8, r2
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	str	r5, [sp]
	str	r5, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	add	r2, r6, #0
	mov	r3, r8
	bl	FillBgTilemapBufferRect
	ldr	r2, .L29
	ldrh	r1, [r2]
	add	r1, r1, #0x7
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x10]
	str	r0, [sp]
	str	r5, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	ldr	r2, [sp, #0xc]
	mov	r3, r8
	bl	FillBgTilemapBufferRect
	ldr	r2, .L29
	ldrh	r1, [r2]
	add	r1, r1, #0x8
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r5, [sp]
	str	r5, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	mov	r2, sl
	mov	r3, r8
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	sTileNum
	.word	sPaletteNum
.Lfe8:
	.size	 WindowFunc_DrawStdFrameWithCustomTileAndPalette,.Lfe8-WindowFunc_DrawStdFrameWithCustomTileAndPalette
	.align	2, 0
	.globl	ClearStdWindowAndFrameToTransparent
	.type	 ClearStdWindowAndFrameToTransparent,function
	.thumb_func
ClearStdWindowAndFrameToTransparent:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L33
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	ClearWindowTilemap
	cmp	r4, #0x1
	bne	.L32	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L32:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	WindowFunc_ClearStdWindowAndFrameToTransparent
.Lfe9:
	.size	 ClearStdWindowAndFrameToTransparent,.Lfe9-ClearStdWindowAndFrameToTransparent
	.align	2, 0
	.type	 WindowFunc_ClearStdWindowAndFrameToTransparent,function
	.thumb_func
WindowFunc_ClearStdWindowAndFrameToTransparent:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsl	r1, r1, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r4, r4, r2
	lsr	r4, r4, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r3, r3, r2
	lsr	r3, r3, #0x18
	str	r3, [sp]
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 WindowFunc_ClearStdWindowAndFrameToTransparent,.Lfe10-WindowFunc_ClearStdWindowAndFrameToTransparent
	.align	2, 0
	.globl	CreateTopBarWindowLoadPalette
	.type	 CreateTopBarWindowLoadPalette,function
	.thumb_func
CreateTopBarWindowLoadPalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	ldr	r4, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	cmp	r6, #0x3
	bls	.L37	@cond_branch
	mov	r1, #0x0
	mov	r0, sp
	strb	r1, [r0]
	b	.L38
.L37:
	mov	r0, sp
	strb	r6, [r0]
.L38:
	mov	r1, sp
	mov	r0, r8
	strb	r0, [r1, #0x2]
	mov	r0, #0x2
	strb	r0, [r1, #0x4]
	mov	r0, #0x1e
	sub	r0, r0, r7
	strb	r0, [r1, #0x1]
	strb	r7, [r1, #0x3]
	strb	r5, [r1, #0x5]
	strh	r4, [r1, #0x6]
	ldr	r4, .L41
	mov	r0, sp
	bl	AddWindow
	strb	r0, [r4]
	cmp	r5, #0xf
	bls	.L39	@cond_branch
	mov	r5, #0xf0
	b	.L40
.L42:
	.align	2, 0
.L41:
	.word	sTopBarWindowId
.L39:
	lsl	r0, r5, #0x1c
	lsr	r5, r0, #0x18
.L40:
	mov	r0, #0x2
	bl	GetTextWindowPalette
	add	r1, r5, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L43
	ldrb	r0, [r0]
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L44:
	.align	2, 0
.L43:
	.word	sTopBarWindowId
.Lfe11:
	.size	 CreateTopBarWindowLoadPalette,.Lfe11-CreateTopBarWindowLoadPalette
	.align	2, 0
	.globl	TopBarWindowPrintString
	.type	 TopBarWindowPrintString,function
	.thumb_func
TopBarWindowPrintString:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r4, .L48
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L46	@cond_branch
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0xff
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	ldrb	r1, [r4]
	mov	r3, #0x14
	neg	r3, r3
	add	r2, r3, #0
	sub	r2, r2, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L48+0x4
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	add	r0, r1, #0
	mov	r1, #0x0
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	cmp	r6, #0
	beq	.L46	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	CopyWindowToVram
.L46:
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	sTopBarWindowId
	.word	sTopBarWindowTextColors
.Lfe12:
	.size	 TopBarWindowPrintString,.Lfe12-TopBarWindowPrintString
	.align	2, 0
	.globl	TopBarWindowPrintTwoStrings
	.type	 TopBarWindowPrintTwoStrings,function
	.thumb_func
TopBarWindowPrintTwoStrings:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x18
	mov	r8, r0
	add	r5, r1, #0
	ldr	r0, [sp, #0x30]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L57
	ldrb	r1, [r0]
	add	r6, r0, #0
	cmp	r1, #0xff
	beq	.L51	@cond_branch
	cmp	r2, #0
	beq	.L52	@cond_branch
	add	r1, sp, #0x14
	mov	r0, #0x0
	b	.L56
.L58:
	.align	2, 0
.L57:
	.word	sTopBarWindowId
.L52:
	add	r1, sp, #0x14
	mov	r0, #0xf
.L56:
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	add	r4, r6, #0
	ldrb	r0, [r4]
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0xff
	bl	FillWindowPixelBuffer
	cmp	r5, #0
	beq	.L54	@cond_branch
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	ldrb	r1, [r4]
	mov	r3, #0x14
	neg	r3, r3
	add	r2, r3, #0
	sub	r2, r2, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, sp, #0x14
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	add	r0, r1, #0
	mov	r1, #0x0
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
.L54:
	ldrb	r0, [r6]
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	add	r2, sp, #0x14
	str	r2, [sp, #0x8]
	str	r1, [sp, #0xc]
	mov	r3, r8
	str	r3, [sp, #0x10]
	mov	r1, #0x1
	mov	r2, #0x4
	mov	r3, #0x1
	bl	AddTextPrinterParameterized4
	cmp	r7, #0
	beq	.L51	@cond_branch
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	CopyWindowToVram
.L51:
	add	sp, sp, #0x18
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 TopBarWindowPrintTwoStrings,.Lfe13-TopBarWindowPrintTwoStrings
	.align	2, 0
	.type	 CopyTopBarWindowToVram,function
	.thumb_func
CopyTopBarWindowToVram:
	push	{lr}
	ldr	r1, .L61
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L60	@cond_branch
	mov	r1, #0x3
	bl	CopyWindowToVram
.L60:
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	sTopBarWindowId
.Lfe14:
	.size	 CopyTopBarWindowToVram,.Lfe14-CopyTopBarWindowToVram
	.align	2, 0
	.globl	ClearTopBarWindow
	.type	 ClearTopBarWindow,function
	.thumb_func
ClearTopBarWindow:
	push	{r4, lr}
	ldr	r4, .L65
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L64	@cond_branch
	mov	r1, #0xff
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	CopyWindowToVram
.L64:
	pop	{r4}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	sTopBarWindowId
.Lfe15:
	.size	 ClearTopBarWindow,.Lfe15-ClearTopBarWindow
	.align	2, 0
	.globl	DestroyTopBarWindow
	.type	 DestroyTopBarWindow,function
	.thumb_func
DestroyTopBarWindow:
	push	{r4, lr}
	ldr	r4, .L69
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L68	@cond_branch
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	bl	RemoveWindow
	mov	r0, #0xff
	strb	r0, [r4]
.L68:
	pop	{r4}
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	sTopBarWindowId
.Lfe16:
	.size	 DestroyTopBarWindow,.Lfe16-DestroyTopBarWindow
	.align	2, 0
	.globl	Menu_InitCursorInternal
	.type	 Menu_InitCursorInternal,function
	.thumb_func
Menu_InitCursorInternal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, [sp, #0x18]
	mov	r8, r4
	ldr	r4, [sp, #0x1c]
	ldr	r5, [sp, #0x20]
	ldr	r6, [sp, #0x24]
	mov	ip, r6
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r7, r5, #0x18
	ldr	r5, .L75
	mov	r6, #0x0
	strb	r2, [r5]
	strb	r3, [r5, #0x1]
	strb	r6, [r5, #0x3]
	sub	r4, r4, #0x1
	strb	r4, [r5, #0x4]
	strb	r0, [r5, #0x5]
	strb	r1, [r5, #0x6]
	mov	r0, r8
	strb	r0, [r5, #0x8]
	mov	r4, ip
	strb	r4, [r5, #0xb]
	cmp	r7, #0
	blt	.L73	@cond_branch
	mov	r0, #0x4
	ldrsb	r0, [r5, r0]
	cmp	r7, r0
	ble	.L72	@cond_branch
.L73:
	strb	r6, [r5, #0x2]
	b	.L74
.L76:
	.align	2, 0
.L75:
	.word	sMenu
.L72:
	strb	r7, [r5, #0x2]
.L74:
	mov	r0, #0x0
	bl	Menu_MoveCursor
	ldr	r0, .L77
	ldrb	r0, [r0, #0x2]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L78:
	.align	2, 0
.L77:
	.word	sMenu
.Lfe17:
	.size	 Menu_InitCursorInternal,.Lfe17-Menu_InitCursorInternal
	.align	2, 0
	.globl	Menu_InitCursor
	.type	 Menu_InitCursor,function
	.thumb_func
Menu_InitCursor:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x20]
	ldr	r5, [sp, #0x24]
	ldr	r6, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r4, #0x0
	str	r4, [sp, #0xc]
	bl	Menu_InitCursorInternal
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 Menu_InitCursor,.Lfe18-Menu_InitCursor
	.align	2, 0
	.type	 InitMenuDefaultCursorHeight,function
	.thumb_func
InitMenuDefaultCursorHeight:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x14
	mov	r8, r0
	add	r6, r1, #0
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	mov	r1, #0x1
	str	r2, [sp, #0xc]
	str	r3, [sp, #0x10]
	bl	GetMenuCursorDimensionByFont
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, r8
	add	r1, r6, #0
	ldr	r2, [sp, #0xc]
	ldr	r3, [sp, #0x10]
	bl	Menu_InitCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 InitMenuDefaultCursorHeight,.Lfe19-InitMenuDefaultCursorHeight
	.align	2, 0
	.type	 Menu_RedrawCursor,function
	.thumb_func
Menu_RedrawCursor:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	mov	r8, r1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r5, .L82
	ldrb	r0, [r5, #0x6]
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5, #0x6]
	mov	r1, #0x1
	bl	GetMenuCursorDimensionByFont
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r5, #0x5]
	mov	r9, r1
	ldrb	r2, [r5]
	ldrb	r1, [r5, #0x8]
	mov	r3, r1
	mul	r3, r3, r6
	ldrb	r6, [r5, #0x1]
	add	r3, r3, r6
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	str	r4, [sp]
	str	r0, [sp, #0x4]
	mov	r0, r9
	mov	r1, #0x1
	bl	FillWindowPixelRect
	ldrb	r0, [r5, #0x5]
	ldrb	r1, [r5, #0x6]
	ldr	r2, .L82+0x4
	ldrb	r3, [r5]
	ldrb	r4, [r5, #0x8]
	mov	r6, r8
	mul	r6, r6, r4
	add	r4, r6, #0
	ldrb	r5, [r5, #0x1]
	add	r4, r4, r5
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	sMenu
	.word	gText_SelectorArrow2
.Lfe20:
	.size	 Menu_RedrawCursor,.Lfe20-Menu_RedrawCursor
	.align	2, 0
	.globl	Menu_MoveCursor
	.type	 Menu_MoveCursor,function
	.thumb_func
Menu_MoveCursor:
	push	{r4, r5, lr}
	ldr	r1, .L90
	ldrb	r5, [r1, #0x2]
	mov	r2, #0x2
	ldrsb	r2, [r1, r2]
	lsl	r0, r0, #0x18
	asr	r3, r0, #0x18
	add	r2, r2, r3
	mov	r0, #0x3
	ldrsb	r0, [r1, r0]
	add	r4, r1, #0
	cmp	r2, r0
	bge	.L85	@cond_branch
	ldrb	r0, [r4, #0x4]
	b	.L89
.L91:
	.align	2, 0
.L90:
	.word	sMenu
.L85:
	mov	r0, #0x4
	ldrsb	r0, [r4, r0]
	cmp	r2, r0
	ble	.L87	@cond_branch
	ldrb	r0, [r4, #0x3]
	b	.L89
.L87:
	add	r0, r3, r5
.L89:
	strb	r0, [r4, #0x2]
	ldrb	r1, [r4, #0x2]
	add	r0, r5, #0
	bl	Menu_RedrawCursor
	ldrb	r0, [r4, #0x2]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 Menu_MoveCursor,.Lfe21-Menu_MoveCursor
	.align	2, 0
	.globl	Menu_MoveCursorNoWrapAround
	.type	 Menu_MoveCursorNoWrapAround,function
	.thumb_func
Menu_MoveCursorNoWrapAround:
	push	{r4, r5, lr}
	ldr	r1, .L98
	ldrb	r5, [r1, #0x2]
	mov	r2, #0x2
	ldrsb	r2, [r1, r2]
	lsl	r0, r0, #0x18
	asr	r3, r0, #0x18
	add	r2, r2, r3
	mov	r0, #0x3
	ldrsb	r0, [r1, r0]
	add	r4, r1, #0
	cmp	r2, r0
	bge	.L93	@cond_branch
	ldrb	r0, [r4, #0x3]
	b	.L97
.L99:
	.align	2, 0
.L98:
	.word	sMenu
.L93:
	mov	r0, #0x4
	ldrsb	r0, [r4, r0]
	cmp	r2, r0
	ble	.L95	@cond_branch
	ldrb	r0, [r4, #0x4]
	b	.L97
.L95:
	add	r0, r3, r5
.L97:
	strb	r0, [r4, #0x2]
	ldrb	r1, [r4, #0x2]
	add	r0, r5, #0
	bl	Menu_RedrawCursor
	ldrb	r0, [r4, #0x2]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 Menu_MoveCursorNoWrapAround,.Lfe22-Menu_MoveCursorNoWrapAround
	.align	2, 0
	.globl	Menu_GetCursorPos
	.type	 Menu_GetCursorPos,function
	.thumb_func
Menu_GetCursorPos:
	ldr	r0, .L101
	ldrb	r0, [r0, #0x2]
	bx	lr
.L102:
	.align	2, 0
.L101:
	.word	sMenu
.Lfe23:
	.size	 Menu_GetCursorPos,.Lfe23-Menu_GetCursorPos
	.align	2, 0
	.globl	Menu_ProcessInput
	.type	 Menu_ProcessInput,function
	.thumb_func
Menu_ProcessInput:
	push	{r4, lr}
	ldr	r0, .L112
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L104	@cond_branch
	ldr	r4, .L112+0x4
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	bne	.L105	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L105:
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	b	.L109
.L113:
	.align	2, 0
.L112:
	.word	gMain
	.word	sMenu
.L104:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L106	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L109
.L106:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L107	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L110
.L107:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L111	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L110:
	bl	Menu_MoveCursor
.L111:
	mov	r0, #0x2
	neg	r0, r0
.L109:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 Menu_ProcessInput,.Lfe24-Menu_ProcessInput
	.align	2, 0
	.globl	Menu_ProcessInputNoWrapAround
	.type	 Menu_ProcessInputNoWrapAround,function
	.thumb_func
Menu_ProcessInputNoWrapAround:
	push	{r4, r5, r6, lr}
	ldr	r4, .L124
	ldrb	r5, [r4, #0x2]
	add	r6, r5, #0
	ldr	r0, .L124+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L115	@cond_branch
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	bne	.L116	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L116:
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	b	.L122
.L125:
	.align	2, 0
.L124:
	.word	sMenu
	.word	gMain
.L115:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L117	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L122
.L117:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L118	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	bl	Menu_MoveCursorNoWrapAround
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	beq	.L120	@cond_branch
	b	.L123
.L118:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L120	@cond_branch
	mov	r0, #0x1
	bl	Menu_MoveCursorNoWrapAround
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L121	@cond_branch
.L123:
	mov	r0, #0x5
	bl	PlaySE
.L121:
.L120:
	mov	r0, #0x2
	neg	r0, r0
.L122:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 Menu_ProcessInputNoWrapAround,.Lfe25-Menu_ProcessInputNoWrapAround
	.align	2, 0
	.globl	Menu_ProcessInput_other
	.type	 Menu_ProcessInput_other,function
	.thumb_func
Menu_ProcessInput_other:
	push	{r4, lr}
	ldr	r2, .L135
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L127	@cond_branch
	ldr	r4, .L135+0x4
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	bne	.L128	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L128:
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	b	.L132
.L136:
	.align	2, 0
.L135:
	.word	gMain
	.word	sMenu
.L127:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L129	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L132
.L129:
	ldrh	r0, [r2, #0x30]
	mov	r1, #0xf0
	and	r1, r1, r0
	cmp	r1, #0x40
	bne	.L130	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L133
.L130:
	cmp	r1, #0x80
	bne	.L134	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L133:
	bl	Menu_MoveCursor
.L134:
	mov	r0, #0x2
	neg	r0, r0
.L132:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 Menu_ProcessInput_other,.Lfe26-Menu_ProcessInput_other
	.align	2, 0
	.globl	Menu_ProcessInputNoWrapAround_other
	.type	 Menu_ProcessInputNoWrapAround_other,function
	.thumb_func
Menu_ProcessInputNoWrapAround_other:
	push	{r4, r5, r6, lr}
	ldr	r4, .L147
	ldrb	r5, [r4, #0x2]
	add	r6, r5, #0
	ldr	r2, .L147+0x4
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L138	@cond_branch
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	bne	.L139	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L139:
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	b	.L145
.L148:
	.align	2, 0
.L147:
	.word	sMenu
	.word	gMain
.L138:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L140	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L145
.L140:
	ldrh	r0, [r2, #0x30]
	mov	r1, #0xf0
	and	r1, r1, r0
	cmp	r1, #0x40
	bne	.L141	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	bl	Menu_MoveCursorNoWrapAround
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	beq	.L143	@cond_branch
	b	.L146
.L141:
	cmp	r1, #0x80
	bne	.L143	@cond_branch
	mov	r0, #0x1
	bl	Menu_MoveCursorNoWrapAround
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L144	@cond_branch
.L146:
	mov	r0, #0x5
	bl	PlaySE
.L144:
.L143:
	mov	r0, #0x2
	neg	r0, r0
.L145:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 Menu_ProcessInputNoWrapAround_other,.Lfe27-Menu_ProcessInputNoWrapAround_other
	.align	2, 0
	.globl	PrintTextArray
	.type	 PrintTextArray,function
	.thumb_func
PrintTextArray:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r4, [sp, #0x2c]
	ldr	r5, [sp, #0x30]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L151	@cond_branch
.L153:
	lsl	r0, r4, #0x3
	ldr	r1, [sp, #0x34]
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, r7
	mul	r0, r0, r4
	add	r0, r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	mov	r1, sl
	mov	r3, r9
	bl	AddTextPrinterParameterized
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L153	@cond_branch
.L151:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 PrintTextArray,.Lfe28-PrintTextArray
	.align	2, 0
	.globl	MultichoiceList_PrintItems
	.type	 MultichoiceList_PrintItems,function
	.thumb_func
MultichoiceList_PrintItems:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r4, [sp, #0x40]
	ldr	r5, [sp, #0x44]
	ldr	r6, [sp, #0x4c]
	ldr	r7, [sp, #0x50]
	mov	r8, r7
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x14]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x18]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x1c]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r9, r6
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L157	@cond_branch
.L159:
	lsl	r0, r4, #0x3
	ldr	r1, [sp, #0x48]
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, sl
	mul	r0, r0, r4
	ldr	r1, [sp, #0x1c]
	add	r0, r1, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	str	r6, [sp, #0x10]
	add	r0, r7, #0
	ldr	r1, [sp, #0x14]
	ldr	r3, [sp, #0x18]
	bl	AddTextPrinterParameterized5
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L159	@cond_branch
.L157:
	add	r0, r7, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 MultichoiceList_PrintItems,.Lfe29-MultichoiceList_PrintItems
	.align	2, 0
	.globl	PrintMenuTable
	.type	 PrintMenuTable,function
	.thumb_func
PrintMenuTable:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	mov	r8, r0
	add	r6, r1, #0
	add	r4, r2, #0
	add	r5, r3, #0
	ldr	r7, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, r8
	add	r1, r6, #0
	mov	r3, #0x0
	bl	PrintTextArray
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 PrintMenuTable,.Lfe30-PrintMenuTable
	.align	2, 0
	.globl	AddItemMenuActionTextPrinters
	.type	 AddItemMenuActionTextPrinters,function
	.thumb_func
AddItemMenuActionTextPrinters:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	add	r6, r1, #0
	mov	r8, r2
	ldr	r1, [sp, #0x38]
	mov	r9, r1
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r4, r8
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r8, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x14]
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	mov	r0, sp
	ldrb	r1, [r0, #0x10]
	strb	r1, [r0, #0x4]
	strb	r6, [r0, #0x5]
	add	r0, r6, #0
	mov	r1, #0x5
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xc]
	mov	r5, #0xf
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
	add	r0, r6, #0
	mov	r1, #0x6
	bl	GetFontAttribute
	mov	r3, sp
	add	r1, r5, #0
	and	r1, r1, r0
	ldrb	r2, [r3, #0xd]
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0xd]
	add	r0, r6, #0
	mov	r1, #0x7
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xd]
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xd]
	add	r0, r6, #0
	mov	r1, #0x4
	bl	GetFontAttribute
	mov	r1, sp
	and	r5, r5, r0
	ldrb	r0, [r1, #0xc]
	and	r4, r4, r0
	orr	r4, r4, r5
	strb	r4, [r1, #0xc]
	mov	r0, sp
	mov	r2, r9
	strb	r2, [r0, #0xa]
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetFontAttribute
	mov	r1, sp
	strb	r0, [r1, #0xb]
	mov	r0, sp
	mov	r4, r8
	strb	r4, [r0, #0x6]
	strb	r4, [r0, #0x8]
	mov	r4, #0x0
	cmp	r4, r7
	bcs	.L164	@cond_branch
	mov	r5, sp
.L166:
	ldr	r1, [sp, #0x48]
	add	r0, r1, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	ldr	r2, [sp, #0x44]
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [sp]
	mov	r0, sl
	mul	r0, r0, r4
	ldr	r1, [sp, #0x14]
	add	r0, r1, r0
	strb	r0, [r5, #0x7]
	strb	r0, [r5, #0x9]
	mov	r0, sp
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r7
	bcc	.L166	@cond_branch
.L164:
	ldr	r0, [sp, #0x10]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 AddItemMenuActionTextPrinters,.Lfe31-AddItemMenuActionTextPrinters
	.align	2, 0
	.type	 PrintMenuActionTextsAtTopById,function
	.thumb_func
PrintMenuActionTextsAtTopById:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	mov	r9, r0
	add	r4, r1, #0
	add	r6, r2, #0
	mov	r8, r3
	ldr	r7, [sp, #0x30]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetFontAttribute
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	str	r6, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	str	r7, [sp, #0xc]
	ldr	r0, [sp, #0x34]
	str	r0, [sp, #0x10]
	mov	r0, r9
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AddItemMenuActionTextPrinters
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 PrintMenuActionTextsAtTopById,.Lfe32-PrintMenuActionTextsAtTopById
	.align	2, 0
	.globl	SetWindowTemplateFields
	.type	 SetWindowTemplateFields,function
	.thumb_func
SetWindowTemplateFields:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r4, [sp, #0x28]
	mov	ip, r4
	ldr	r4, [sp, #0x2c]
	mov	r9, r4
	ldr	r4, [sp, #0x30]
	mov	sl, r4
	ldr	r7, [sp, #0x34]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsl	r3, r3, #0x18
	mov	r4, r9
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r9, r4
	mov	r4, sl
	lsl	r4, r4, #0x18
	mov	sl, r4
	ldr	r4, .L170
	mov	r8, r4
	mov	r5, r8
	ldr	r4, [sp]
	and	r5, r5, r4
	orr	r5, r5, r1
	str	r5, [sp]
	lsr	r2, r2, #0x10
	ldr	r6, .L170+0x4
	add	r4, r6, #0
	and	r4, r4, r5
	orr	r4, r4, r2
	str	r4, [sp]
	lsr	r3, r3, #0x8
	ldr	r1, .L170+0x8
	and	r1, r1, r4
	orr	r1, r1, r3
	str	r1, [sp]
	mov	r2, ip
	lsl	r2, r2, #0x18
	mov	ip, r2
	ldr	r2, .L170+0xc
	and	r1, r1, r2
	mov	r4, ip
	orr	r4, r4, r1
	str	r4, [sp]
	ldr	r1, [sp, #0x4]
	mov	r2, r8
	and	r1, r1, r2
	mov	r4, r9
	orr	r1, r1, r4
	mov	r8, r1
	str	r1, [sp, #0x4]
	mov	r1, sl
	lsr	r1, r1, #0x10
	mov	r2, r8
	and	r6, r6, r2
	orr	r6, r6, r1
	str	r6, [sp, #0x4]
	lsl	r2, r7, #0x10
	ldr	r1, .L170+0x10
	and	r6, r6, r1
	orr	r6, r6, r2
	str	r6, [sp, #0x4]
	ldr	r1, [sp]		@ created by thumb_load_double_from_address
	ldr	r2, [sp, #0x4]		@ created by thumb_load_double_from_address
	str	r1, [r0]
	str	r2, [r0, #0x4]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r2}
	bx	r2
.L171:
	.align	2, 0
.L170:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
	.word	0xffff
.Lfe33:
	.size	 SetWindowTemplateFields,.Lfe33-SetWindowTemplateFields
	.align	2, 0
	.type	 CreateWindowTemplate,function
	.thumb_func
CreateWindowTemplate:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x20
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r0, [sp, #0x30]
	ldr	r1, [sp, #0x34]
	ldr	r2, [sp, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r3, [sp]
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	str	r2, [sp, #0xc]
	add	r0, sp, #0x10
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	SetWindowTemplateFields
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r0, sp, #0x18
	bl	AddWindow
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x20
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 CreateWindowTemplate,.Lfe34-CreateWindowTemplate
	.align	2, 0
	.globl	CreateYesNoMenu
	.type	 CreateYesNoMenu,function
	.thumb_func
CreateYesNoMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	add	r6, r1, #0
	mov	r8, r2
	mov	r9, r3
	ldr	r4, [sp, #0x3c]
	ldr	r5, [sp, #0x40]
	ldr	r1, [sp, #0x44]
	mov	sl, r1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r1, r8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, sl
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	ldr	r7, .L174
	bl	AddWindow
	strb	r0, [r7]
	ldrb	r0, [r7]
	mov	r1, #0x1
	add	r2, r4, #0
	add	r3, r5, #0
	bl	DrawStdFrameWithCustomTileAndPalette
	ldr	r0, .L174+0x4
	str	r0, [sp, #0xc]
	add	r1, sp, #0xc
	ldrb	r0, [r7]
	strb	r0, [r1, #0x4]
	add	r0, r1, #0
	strb	r6, [r0, #0x5]
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	add	r1, sp, #0xc
	add	r0, r0, r8
	strb	r0, [r1, #0x6]
	add	r0, r1, #0
	mov	r1, r9
	strb	r1, [r0, #0x7]
	add	r1, r0, #0
	ldrb	r0, [r0, #0x6]
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	ldrb	r0, [r0, #0x7]
	strb	r0, [r1, #0x9]
	add	r0, r6, #0
	mov	r1, #0x5
	bl	GetFontAttribute
	add	r3, sp, #0xc
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xc]
	mov	r5, #0xf
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
	add	r0, r6, #0
	mov	r1, #0x6
	bl	GetFontAttribute
	add	r3, sp, #0xc
	add	r1, r5, #0
	and	r1, r1, r0
	ldrb	r2, [r3, #0xd]
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0xd]
	add	r0, r6, #0
	mov	r1, #0x7
	bl	GetFontAttribute
	add	r3, sp, #0xc
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xd]
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xd]
	add	r0, r6, #0
	mov	r1, #0x4
	bl	GetFontAttribute
	add	r1, sp, #0xc
	and	r5, r5, r0
	ldrb	r0, [r1, #0xc]
	and	r4, r4, r0
	orr	r4, r4, r5
	strb	r4, [r1, #0xc]
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetFontAttribute
	add	r1, sp, #0xc
	strb	r0, [r1, #0xa]
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetFontAttribute
	add	r1, sp, #0xc
	strb	r0, [r1, #0xb]
	add	r0, r1, #0
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r1, sp, #0xc
	ldrb	r1, [r1, #0xb]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r7]
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, sl
	str	r0, [sp, #0x8]
	add	r0, r1, #0
	add	r1, r6, #0
	mov	r2, r8
	mov	r3, r9
	bl	Menu_InitCursor
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L175:
	.align	2, 0
.L174:
	.word	sYesNoWindowId
	.word	gText_YesNo
.Lfe35:
	.size	 CreateYesNoMenu,.Lfe35-CreateYesNoMenu
	.align	2, 0
	.type	 CreateYesNoMenu2,function
	.thumb_func
CreateYesNoMenu2:
	push	{lr}
	add	sp, sp, #-0xc
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r2, [sp]
	str	r3, [sp, #0x4]
	mov	r2, #0x0
	str	r2, [sp, #0x8]
	mov	r3, #0x0
	bl	CreateYesNoMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 CreateYesNoMenu2,.Lfe36-CreateYesNoMenu2
	.align	2, 0
	.globl	Menu_ProcessInputNoWrapClearOnChoose
	.type	 Menu_ProcessInputNoWrapClearOnChoose,function
	.thumb_func
Menu_ProcessInputNoWrapClearOnChoose:
	push	{r4, lr}
	bl	Menu_ProcessInputNoWrapAround
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L178	@cond_branch
	bl	DestroyYesNoMenu
.L178:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 Menu_ProcessInputNoWrapClearOnChoose,.Lfe37-Menu_ProcessInputNoWrapClearOnChoose
	.align	2, 0
	.globl	DestroyYesNoMenu
	.type	 DestroyYesNoMenu,function
	.thumb_func
DestroyYesNoMenu:
	push	{r4, lr}
	ldr	r4, .L180
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	RemoveWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	sYesNoWindowId
.Lfe38:
	.size	 DestroyYesNoMenu,.Lfe38-DestroyYesNoMenu
	.align	2, 0
	.globl	MultichoiceGrid_PrintItems
	.type	 MultichoiceGrid_PrintItems,function
	.thumb_func
MultichoiceGrid_PrintItems:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r4, [sp, #0x40]
	ldr	r5, [sp, #0x44]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x10]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x14]
	lsl	r4, r4, #0x18
	lsr	r6, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x18]
	mov	r0, r9
	mov	r1, #0x0
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r0, r9
	mov	r1, #0x1
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x10
	sub	r1, r1, r0
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x1c]
	mov	r5, #0x0
	b	.L193
.L186:
	mov	r4, #0x0
	add	r1, r5, #0x1
	mov	r8, r1
	cmp	r4, r6
	bcs	.L185	@cond_branch
	ldr	r1, [sp, #0x14]
	mov	r0, r1
	mul	r0, r0, r5
	ldr	r1, [sp, #0x1c]
	add	r0, r1, r0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L190:
	mov	r0, r5
	mul	r0, r0, r6
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, [sp, #0x48]
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r0, [sp, #0x10]
	mov	r3, r0
	mul	r3, r3, r4
	add	r3, r3, sl
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r7, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldr	r0, [sp, #0xc]
	mov	r1, r9
	bl	AddTextPrinterParameterized
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bcc	.L190	@cond_branch
.L185:
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
.L193:
	ldr	r0, [sp, #0x18]
	cmp	r5, r0
	bcc	.L186	@cond_branch
	ldr	r0, [sp, #0xc]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 MultichoiceGrid_PrintItems,.Lfe39-MultichoiceGrid_PrintItems
	.align	2, 0
	.type	 MultichoiceGrid_PrintItemsCustomOrder,function
	.thumb_func
MultichoiceGrid_PrintItemsCustomOrder:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	ldr	r4, [sp, #0x3c]
	ldr	r5, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x10]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x14]
	lsl	r4, r4, #0x18
	lsr	r6, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x18]
	mov	r0, sl
	mov	r1, #0x0
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r5, #0x0
	b	.L205
.L198:
	mov	r4, #0x0
	add	r1, r5, #0x1
	mov	r8, r1
	cmp	r4, r6
	bcs	.L197	@cond_branch
	ldr	r1, [sp, #0x14]
	mov	r0, r1
	mul	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L202:
	mov	r0, r5
	mul	r0, r0, r6
	add	r0, r0, r4
	ldr	r1, [sp, #0x48]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	ldr	r1, [sp, #0x44]
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r0, [sp, #0x10]
	mov	r3, r0
	mul	r3, r3, r4
	add	r3, r3, r9
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r7, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldr	r0, [sp, #0xc]
	mov	r1, sl
	bl	AddTextPrinterParameterized
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bcc	.L202	@cond_branch
.L197:
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
.L205:
	ldr	r0, [sp, #0x18]
	cmp	r5, r0
	bcc	.L198	@cond_branch
	ldr	r0, [sp, #0xc]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 MultichoiceGrid_PrintItemsCustomOrder,.Lfe40-MultichoiceGrid_PrintItemsCustomOrder
	.align	2, 0
	.type	 MultichoiceGrid_InitCursorInternal,function
	.thumb_func
MultichoiceGrid_InitCursorInternal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, [sp, #0x20]
	mov	ip, r4
	ldr	r4, [sp, #0x24]
	mov	r8, r4
	ldr	r4, [sp, #0x28]
	mov	r9, r4
	ldr	r4, [sp, #0x2c]
	mov	sl, r4
	ldr	r4, [sp, #0x30]
	ldr	r5, [sp, #0x34]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r7, r5, #0x18
	ldr	r5, .L210
	mov	r6, #0x0
	strb	r2, [r5]
	strb	r3, [r5, #0x1]
	strb	r6, [r5, #0x3]
	sub	r4, r4, #0x1
	strb	r4, [r5, #0x4]
	strb	r0, [r5, #0x5]
	strb	r1, [r5, #0x6]
	mov	r0, ip
	strb	r0, [r5, #0x7]
	mov	r4, r8
	strb	r4, [r5, #0x8]
	mov	r0, r9
	strb	r0, [r5, #0x9]
	mov	r4, sl
	strb	r4, [r5, #0xa]
	cmp	r7, #0
	blt	.L208	@cond_branch
	mov	r0, #0x4
	ldrsb	r0, [r5, r0]
	cmp	r7, r0
	ble	.L207	@cond_branch
.L208:
	strb	r6, [r5, #0x2]
	b	.L209
.L211:
	.align	2, 0
.L210:
	.word	sMenu
.L207:
	strb	r7, [r5, #0x2]
.L209:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	MultichoiceGrid_MoveCursor
	ldr	r0, .L212
	ldrb	r0, [r0, #0x2]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L213:
	.align	2, 0
.L212:
	.word	sMenu
.Lfe41:
	.size	 MultichoiceGrid_InitCursorInternal,.Lfe41-MultichoiceGrid_InitCursorInternal
	.align	2, 0
	.globl	MultichoiceGrid_InitCursor
	.type	 MultichoiceGrid_InitCursor,function
	.thumb_func
MultichoiceGrid_InitCursor:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	ldr	r4, [sp, #0x38]
	ldr	r5, [sp, #0x3c]
	ldr	r6, [sp, #0x40]
	ldr	r7, [sp, #0x44]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r8, r4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r7, r7, #0x18
	add	r4, r7, #0
	lsr	r4, r4, #0x18
	mov	r9, r4
	mov	r7, #0x10
	mov	sl, r7
	mov	r4, r5
	mul	r4, r4, r6
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r7, r8
	str	r7, [sp]
	mov	r7, sl
	str	r7, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r6, [sp, #0xc]
	str	r4, [sp, #0x10]
	mov	r4, r9
	str	r4, [sp, #0x14]
	bl	MultichoiceGrid_InitCursorInternal
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 MultichoiceGrid_InitCursor,.Lfe42-MultichoiceGrid_InitCursor
	.align	2, 0
	.type	 MultichoiceGrid_RedrawCursor,function
	.thumb_func
MultichoiceGrid_RedrawCursor:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r1, #0x18
	lsr	r7, r0, #0x18
	ldr	r5, .L216
	ldrb	r0, [r5, #0x6]
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	mov	r9, r0
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	ldrb	r0, [r5, #0x6]
	mov	r1, #0x1
	bl	GetMenuCursorDimensionByFont
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldrb	r0, [r5, #0x9]
	mov	sl, r0
	mov	r0, r8
	mov	r1, sl
	bl	__umodsi3
	ldrb	r1, [r5, #0x7]
	mov	r4, r1
	mul	r4, r4, r0
	ldrb	r1, [r5]
	add	r4, r4, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	mov	r1, sl
	bl	__udivsi3
	ldrb	r1, [r5, #0x8]
	mov	r3, r1
	mul	r3, r3, r0
	ldrb	r0, [r5, #0x1]
	add	r3, r3, r0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r0, [r5, #0x5]
	mov	r1, r9
	str	r1, [sp]
	str	r6, [sp, #0x4]
	mov	r1, #0x11
	add	r2, r4, #0
	bl	FillWindowPixelRect
	ldrb	r6, [r5, #0x9]
	add	r0, r7, #0
	add	r1, r6, #0
	bl	__umodsi3
	ldrb	r1, [r5, #0x7]
	mov	r4, r1
	mul	r4, r4, r0
	ldrb	r0, [r5]
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r7, #0
	add	r1, r6, #0
	bl	__udivsi3
	ldrb	r1, [r5, #0x8]
	mov	r3, r1
	mul	r3, r3, r0
	ldrb	r1, [r5, #0x1]
	add	r3, r3, r1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r0, [r5, #0x5]
	ldrb	r1, [r5, #0x6]
	ldr	r2, .L216+0x4
	str	r3, [sp]
	mov	r3, #0x0
	str	r3, [sp, #0x4]
	str	r3, [sp, #0x8]
	add	r3, r4, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L217:
	.align	2, 0
.L216:
	.word	sMenu
	.word	gText_SelectorArrow2
.Lfe43:
	.size	 MultichoiceGrid_RedrawCursor,.Lfe43-MultichoiceGrid_RedrawCursor
	.align	2, 0
	.type	 MultichoiceGrid_MoveCursor,function
	.thumb_func
MultichoiceGrid_MoveCursor:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	ldr	r1, .L236
	ldrb	r2, [r1, #0x2]
	mov	r8, r2
	lsl	r0, r0, #0x18
	asr	r6, r0, #0x18
	add	r5, r1, #0
	cmp	r6, #0
	beq	.L219	@cond_branch
	mov	r7, #0x2
	ldrsb	r7, [r5, r7]
	ldrb	r4, [r5, #0x9]
	add	r0, r7, #0
	add	r1, r4, #0
	bl	__modsi3
	add	r0, r0, r6
	cmp	r0, #0
	bge	.L220	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0xff
	add	r0, r0, r8
	b	.L232
.L237:
	.align	2, 0
.L236:
	.word	sMenu
.L220:
	cmp	r0, r4
	blt	.L222	@cond_branch
	add	r0, r7, #0
	add	r1, r4, #0
	bl	__divsi3
	mul	r0, r0, r4
	b	.L232
.L222:
	mov	r1, r8
	add	r0, r6, r1
.L232:
	strb	r0, [r5, #0x2]
.L219:
	mov	r2, r9
	lsl	r0, r2, #0x18
	asr	r6, r0, #0x18
	cmp	r6, #0
	beq	.L224	@cond_branch
	mov	r0, #0x2
	ldrsb	r0, [r5, r0]
	ldrb	r4, [r5, #0x9]
	add	r1, r4, #0
	bl	__divsi3
	add	r1, r0, r6
	cmp	r1, #0
	bge	.L225	@cond_branch
	ldrb	r0, [r5, #0xa]
	sub	r0, r0, #0x1
	mul	r0, r0, r4
	ldrb	r1, [r5, #0x2]
	add	r0, r0, r1
	b	.L233
.L225:
	ldrb	r0, [r5, #0xa]
	cmp	r1, r0
	blt	.L227	@cond_branch
	sub	r0, r0, #0x1
	mov	r1, r4
	mul	r1, r1, r0
	ldrb	r0, [r5, #0x2]
	sub	r0, r0, r1
	b	.L233
.L227:
	mov	r0, r4
	mul	r0, r0, r6
	ldrb	r2, [r5, #0x2]
	add	r0, r0, r2
.L233:
	strb	r0, [r5, #0x2]
.L224:
	mov	r1, #0x2
	ldrsb	r1, [r5, r1]
	mov	r0, #0x4
	ldrsb	r0, [r5, r0]
	cmp	r1, r0
	bgt	.L229	@cond_branch
	ldrb	r1, [r5, #0x2]
	mov	r0, r8
	bl	MultichoiceGrid_RedrawCursor
	b	.L235
.L229:
	mov	r0, r8
	strb	r0, [r5, #0x2]
.L235:
	ldrb	r0, [r5, #0x2]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 MultichoiceGrid_MoveCursor,.Lfe44-MultichoiceGrid_MoveCursor
	.align	2, 0
	.type	 MultichoiceGrid_MoveCursorIfValid,function
	.thumb_func
MultichoiceGrid_MoveCursorIfValid:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	ldr	r1, .L248
	ldrb	r7, [r1, #0x2]
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L239	@cond_branch
	mov	r0, #0x2
	ldrsb	r0, [r5, r0]
	ldrb	r6, [r5, #0x9]
	add	r1, r6, #0
	bl	__modsi3
	add	r0, r0, r4
	cmp	r0, #0
	blt	.L239	@cond_branch
	cmp	r0, r6
	bge	.L239	@cond_branch
	add	r0, r4, r7
	strb	r0, [r5, #0x2]
.L239:
	mov	r1, r8
	lsl	r0, r1, #0x18
	asr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L241	@cond_branch
	mov	r0, #0x2
	ldrsb	r0, [r5, r0]
	ldrb	r6, [r5, #0x9]
	add	r1, r6, #0
	bl	__divsi3
	add	r0, r0, r4
	cmp	r0, #0
	blt	.L241	@cond_branch
	ldrb	r1, [r5, #0xa]
	cmp	r0, r1
	bge	.L241	@cond_branch
	mov	r0, r6
	mul	r0, r0, r4
	ldrb	r1, [r5, #0x2]
	add	r0, r0, r1
	strb	r0, [r5, #0x2]
.L241:
	mov	r1, #0x2
	ldrsb	r1, [r5, r1]
	mov	r0, #0x4
	ldrsb	r0, [r5, r0]
	cmp	r1, r0
	bgt	.L243	@cond_branch
	ldrb	r1, [r5, #0x2]
	add	r0, r7, #0
	bl	MultichoiceGrid_RedrawCursor
	b	.L247
.L249:
	.align	2, 0
.L248:
	.word	sMenu
.L243:
	strb	r7, [r5, #0x2]
.L247:
	ldrb	r0, [r5, #0x2]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 MultichoiceGrid_MoveCursorIfValid,.Lfe45-MultichoiceGrid_MoveCursorIfValid
	.align	2, 0
	.type	 Menu_ProcessGridInput_NoSoundLimit,function
	.thumb_func
Menu_ProcessGridInput_NoSoundLimit:
	push	{r4, lr}
	ldr	r4, .L267
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L251	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L267+0x4
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	b	.L264
.L268:
	.align	2, 0
.L267:
	.word	gMain
	.word	sMenu
.L251:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L253	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L264
.L253:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L255	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	b	.L265
.L255:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L257	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	mov	r1, #0x1
	b	.L265
.L257:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L260	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L259	@cond_branch
.L260:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L266
.L259:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L263	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L252	@cond_branch
.L263:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L266:
	mov	r1, #0x0
.L265:
	bl	MultichoiceGrid_MoveCursor
.L252:
	mov	r0, #0x2
	neg	r0, r0
.L264:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 Menu_ProcessGridInput_NoSoundLimit,.Lfe46-Menu_ProcessGridInput_NoSoundLimit
	.align	2, 0
	.globl	Menu_ProcessInputGridLayout
	.type	 Menu_ProcessInputGridLayout,function
	.thumb_func
Menu_ProcessInputGridLayout:
	push	{r4, r5, r6, lr}
	ldr	r5, .L290
	ldrb	r4, [r5, #0x2]
	ldr	r6, .L290+0x4
	ldrh	r1, [r6, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L270	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x2
	ldrsb	r0, [r5, r0]
	b	.L287
.L291:
	.align	2, 0
.L290:
	.word	sMenu
	.word	gMain
.L270:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L272	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L287
.L272:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L274	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	b	.L288
.L274:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L277	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	b	.L288
.L277:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L281	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L280	@cond_branch
.L281:
	mov	r0, #0x1
	neg	r0, r0
	b	.L289
.L280:
	ldrh	r1, [r6, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L285	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L271	@cond_branch
.L285:
	mov	r0, #0x1
.L289:
	mov	r1, #0x0
.L288:
	bl	MultichoiceGrid_MoveCursorIfValid
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.L286	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L286:
.L271:
	mov	r0, #0x2
	neg	r0, r0
.L287:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 Menu_ProcessInputGridLayout,.Lfe47-Menu_ProcessInputGridLayout
	.align	2, 0
	.type	 Menu_ProcessGridInputRepeat_NoSoundLimit,function
	.thumb_func
Menu_ProcessGridInputRepeat_NoSoundLimit:
	push	{r4, r5, lr}
	ldr	r4, .L309
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L293	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L309+0x4
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	b	.L306
.L310:
	.align	2, 0
.L309:
	.word	gMain
	.word	sMenu
.L293:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L295	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L306
.L295:
	ldrh	r0, [r4, #0x30]
	mov	r5, #0xf0
	add	r1, r5, #0
	and	r1, r1, r0
	cmp	r1, #0x40
	bne	.L297	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	b	.L307
.L297:
	cmp	r1, #0x80
	bne	.L299	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	mov	r1, #0x1
	b	.L307
.L299:
	cmp	r1, #0x20
	beq	.L302	@cond_branch
	bl	GetLRKeysPressedAndHeld
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L301	@cond_branch
.L302:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L308
.L301:
	ldrh	r1, [r4, #0x30]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0x10
	beq	.L305	@cond_branch
	bl	GetLRKeysPressedAndHeld
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L294	@cond_branch
.L305:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L308:
	mov	r1, #0x0
.L307:
	bl	MultichoiceGrid_MoveCursor
.L294:
	mov	r0, #0x2
	neg	r0, r0
.L306:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 Menu_ProcessGridInputRepeat_NoSoundLimit,.Lfe48-Menu_ProcessGridInputRepeat_NoSoundLimit
	.align	2, 0
	.type	 Menu_ProcessGridInputRepeat,function
	.thumb_func
Menu_ProcessGridInputRepeat:
	push	{r4, r5, r6, lr}
	ldr	r6, .L332
	ldrb	r4, [r6, #0x2]
	ldr	r5, .L332+0x4
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L312	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x2
	ldrsb	r0, [r6, r0]
	b	.L329
.L333:
	.align	2, 0
.L332:
	.word	sMenu
	.word	gMain
.L312:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L314	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L329
.L314:
	ldrh	r0, [r5, #0x30]
	mov	r6, #0xf0
	add	r1, r6, #0
	and	r1, r1, r0
	cmp	r1, #0x40
	bne	.L316	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	b	.L330
.L316:
	cmp	r1, #0x80
	bne	.L319	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	b	.L330
.L319:
	cmp	r1, #0x20
	beq	.L323	@cond_branch
	bl	GetLRKeysPressedAndHeld
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L322	@cond_branch
.L323:
	mov	r0, #0x1
	neg	r0, r0
	b	.L331
.L322:
	ldrh	r1, [r5, #0x30]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0x10
	beq	.L327	@cond_branch
	bl	GetLRKeysPressedAndHeld
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L313	@cond_branch
.L327:
	mov	r0, #0x1
.L331:
	mov	r1, #0x0
.L330:
	bl	MultichoiceGrid_MoveCursorIfValid
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.L328	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L328:
.L313:
	mov	r0, #0x2
	neg	r0, r0
.L329:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 Menu_ProcessGridInputRepeat,.Lfe49-Menu_ProcessGridInputRepeat
.text
	.align	2, 0 @ Don't pad with nop

