@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sYesNo,object
	.size	 sYesNo,4
sYesNo:
	.word	0x0
	.align	2, 0
	.type	 sMessageNextTask,object
	.size	 sMessageNextTask,4
sMessageNextTask:
	.word	0x0
	.type	 sMessageWindowId,object
	.size	 sMessageWindowId,1
sMessageWindowId:
	.byte	0x0
.text
	.align	2, 0
	.globl	DisplayMessageAndContinueTask
	.type	 DisplayMessageAndContinueTask,function
	.thumb_func
DisplayMessageAndContinueTask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r6, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L6
	strb	r6, [r0]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	DrawDialogFrameWithCustomTileAndPalette
	ldr	r4, .L6+0x4
	ldr	r0, [sp, #0x30]
	cmp	r0, r4
	beq	.L5	@cond_branch
	add	r0, r4, #0
	ldr	r1, [sp, #0x30]
	bl	StringExpandPlaceholders
.L5:
	ldr	r2, .L6+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	add	r0, r6, #0
	add	r1, r7, #0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	AddTextPrinterParameterized2
	ldr	r1, .L6+0xc
	ldr	r0, [sp, #0x34]
	str	r0, [r1]
	ldr	r1, .L6+0x10
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L6+0x14
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	sMessageWindowId
	.word	gStringVar4
	.word	gTextFlags
	.word	sMessageNextTask
	.word	gTasks
	.word	Task_ContinueTaskAfterMessagePrints
.Lfe1:
	.size	 DisplayMessageAndContinueTask,.Lfe1-DisplayMessageAndContinueTask
	.align	2, 0
	.globl	RunTextPrinters_CheckActive
	.type	 RunTextPrinters_CheckActive,function
	.thumb_func
RunTextPrinters_CheckActive:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	RunTextPrinters
	add	r0, r4, #0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 RunTextPrinters_CheckActive,.Lfe2-RunTextPrinters_CheckActive
	.align	2, 0
	.type	 Task_ContinueTaskAfterMessagePrints,function
	.thumb_func
Task_ContinueTaskAfterMessagePrints:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L11
	ldrb	r0, [r0]
	bl	RunTextPrinters_CheckActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L10	@cond_branch
	ldr	r0, .L11+0x4
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
.L10:
	pop	{r4}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	sMessageWindowId
	.word	sMessageNextTask
.Lfe3:
	.size	 Task_ContinueTaskAfterMessagePrints,.Lfe3-Task_ContinueTaskAfterMessagePrints
	.align	2, 0
	.type	 Task_CallYesOrNoCallback,function
	.thumb_func
Task_CallYesOrNoCallback:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L15	@cond_branch
	cmp	r1, #0
	bgt	.L20	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L17	@cond_branch
	b	.L14
.L20:
	cmp	r1, #0x1
	beq	.L17	@cond_branch
	b	.L14
.L15:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L22
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L22+0x4
	ldr	r1, [r1]
	ldr	r1, [r1]
	b	.L21
.L23:
	.align	2, 0
.L22:
	.word	gTasks
	.word	sYesNo
.L17:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L24
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L24+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
.L21:
	str	r1, [r0]
.L14:
	pop	{r4}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	gTasks
	.word	sYesNo
.Lfe4:
	.size	 Task_CallYesOrNoCallback,.Lfe4-Task_CallYesOrNoCallback
	.align	2, 0
	.globl	CreateYesNoMenuWithCallbacks
	.type	 CreateYesNoMenuWithCallbacks,function
	.thumb_func
CreateYesNoMenuWithCallbacks:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r2, r3, #0
	ldr	r3, [sp, #0x20]
	ldr	r4, [sp, #0x24]
	ldr	r5, [sp, #0x28]
	ldr	r7, [sp, #0x2c]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	bl	CreateYesNoMenu
	ldr	r0, .L27
	str	r7, [r0]
	ldr	r1, .L27+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L27+0x8
	str	r1, [r0]
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	sYesNo
	.word	gTasks
	.word	Task_CallYesOrNoCallback
.Lfe5:
	.size	 CreateYesNoMenuWithCallbacks,.Lfe5-CreateYesNoMenuWithCallbacks
	.align	2, 0
	.globl	GetLRKeysPressed
	.type	 GetLRKeysPressed,function
	.thumb_func
GetLRKeysPressed:
	push	{lr}
	ldr	r0, .L34
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L30	@cond_branch
	ldr	r0, .L34+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L31	@cond_branch
	mov	r0, #0x1
	b	.L33
.L35:
	.align	2, 0
.L34:
	.word	gSaveBlock2Ptr
	.word	gMain
.L31:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L30	@cond_branch
	mov	r0, #0x2
	b	.L33
.L30:
	mov	r0, #0x0
.L33:
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 GetLRKeysPressed,.Lfe6-GetLRKeysPressed
	.align	2, 0
	.globl	GetLRKeysPressedAndHeld
	.type	 GetLRKeysPressedAndHeld,function
	.thumb_func
GetLRKeysPressedAndHeld:
	push	{lr}
	ldr	r0, .L41
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L37	@cond_branch
	ldr	r0, .L41+0x4
	ldrh	r1, [r0, #0x30]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L38	@cond_branch
	mov	r0, #0x1
	b	.L40
.L42:
	.align	2, 0
.L41:
	.word	gSaveBlock2Ptr
	.word	gMain
.L38:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L37	@cond_branch
	mov	r0, #0x2
	b	.L40
.L37:
	mov	r0, #0x0
.L40:
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 GetLRKeysPressedAndHeld,.Lfe7-GetLRKeysPressedAndHeld
	.align	2, 0
	.globl	IsHoldingItemAllowed
	.type	 IsHoldingItemAllowed,function
	.thumb_func
IsHoldingItemAllowed:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L44	@cond_branch
	ldr	r0, .L48
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L45	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L44	@cond_branch
.L45:
	mov	r0, #0x0
	b	.L47
.L49:
	.align	2, 0
.L48:
	.word	gSaveBlock1Ptr
.L44:
	mov	r0, #0x1
.L47:
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 IsHoldingItemAllowed,.Lfe8-IsHoldingItemAllowed
	.align	2, 0
	.globl	IsWritingMailAllowed
	.type	 IsWritingMailAllowed,function
	.thumb_func
IsWritingMailAllowed:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0x1
	beq	.L52	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L51	@cond_branch
.L52:
	add	r0, r4, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L51	@cond_branch
	mov	r0, #0x0
	b	.L54
.L51:
	mov	r0, #0x1
.L54:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 IsWritingMailAllowed,.Lfe9-IsWritingMailAllowed
	.align	2, 0
	.globl	MenuHelpers_IsLinkActive
	.type	 MenuHelpers_IsLinkActive,function
	.thumb_func
MenuHelpers_IsLinkActive:
	push	{lr}
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0x1
	beq	.L57	@cond_branch
	ldr	r0, .L60
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L56	@cond_branch
.L57:
	mov	r0, #0x1
	b	.L59
.L61:
	.align	2, 0
.L60:
	.word	gReceivedRemoteLinkPlayers
.L56:
	mov	r0, #0x0
.L59:
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 MenuHelpers_IsLinkActive,.Lfe10-MenuHelpers_IsLinkActive
	.align	2, 0
	.globl	IsActiveOverworldLinkBusy
	.type	 IsActiveOverworldLinkBusy,function
	.thumb_func
IsActiveOverworldLinkBusy:
	push	{lr}
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L63	@cond_branch
	bl	Overworld_LinkRecvQueueLengthMoreThan2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L65
.L63:
	mov	r0, #0x0
.L65:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 IsActiveOverworldLinkBusy,.Lfe11-IsActiveOverworldLinkBusy
	.align	2, 0
	.globl	MenuHelpers_ShouldWaitForLinkRecv
	.type	 MenuHelpers_ShouldWaitForLinkRecv,function
	.thumb_func
MenuHelpers_ShouldWaitForLinkRecv:
	push	{lr}
	bl	IsActiveOverworldLinkBusy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L68	@cond_branch
	bl	IsLinkRecvQueueAtOverworldMax
	cmp	r0, #0x1
	bne	.L67	@cond_branch
.L68:
	mov	r0, #0x1
	b	.L70
.L67:
	mov	r0, #0x0
.L70:
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 MenuHelpers_ShouldWaitForLinkRecv,.Lfe12-MenuHelpers_ShouldWaitForLinkRecv
	.align	2, 0
	.globl	SetVBlankHBlankCallbacksToNull
	.type	 SetVBlankHBlankCallbacksToNull,function
	.thumb_func
SetVBlankHBlankCallbacksToNull:
	push	{lr}
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 SetVBlankHBlankCallbacksToNull,.Lfe13-SetVBlankHBlankCallbacksToNull
	.align	2, 0
	.globl	ResetVramOamAndBgCntRegs
	.type	 ResetVramOamAndBgCntRegs,function
	.thumb_func
ResetVramOamAndBgCntRegs:
	push	{r4, lr}
	add	sp, sp, #-0xc
	bl	ResetAllBgsCoordinatesAndBgCntRegs
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L73
	mov	r0, sp
	bl	CpuSet
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	add	r0, sp, #0x4
	mov	r1, #0xe0
	lsl	r1, r1, #0x13
	ldr	r2, .L73+0x4
	bl	CpuSet
	add	r0, sp, #0x8
	strh	r4, [r0]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	ldr	r2, .L73+0x8
	bl	CpuSet
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	0x100c000
	.word	0x5000100
	.word	0x1000200
.Lfe14:
	.size	 ResetVramOamAndBgCntRegs,.Lfe14-ResetVramOamAndBgCntRegs
	.align	2, 0
	.globl	ResetAllBgsCoordinatesAndBgCntRegs
	.type	 ResetAllBgsCoordinatesAndBgCntRegs,function
	.thumb_func
ResetAllBgsCoordinatesAndBgCntRegs:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xe
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xc
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 ResetAllBgsCoordinatesAndBgCntRegs,.Lfe15-ResetAllBgsCoordinatesAndBgCntRegs
	.align	2, 0
	.globl	AdjustQuantityAccordingToDPadInput
	.type	 AdjustQuantityAccordingToDPadInput,function
	.thumb_func
AdjustQuantityAccordingToDPadInput:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r5, r1, #0
	ldrh	r4, [r2]
	add	r6, r4, #0
	ldr	r0, .L99
	ldrh	r0, [r0, #0x30]
	mov	r3, #0xf0
	and	r3, r3, r0
	cmp	r3, #0x40
	bne	.L77	@cond_branch
	add	r0, r4, #0x1
	strh	r0, [r2]
	mov	r3, #0x0
	ldrsh	r0, [r2, r3]
	cmp	r0, r1
	ble	.L78	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
.L78:
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
.L97:
	lsl	r0, r4, #0x10
	b	.L98
.L100:
	.align	2, 0
.L99:
	.word	gMain
.L77:
	cmp	r3, #0x80
	bne	.L82	@cond_branch
	sub	r0, r4, #0x1
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L83	@cond_branch
	strh	r1, [r2]
.L83:
	mov	r3, #0x0
	ldrsh	r1, [r2, r3]
	b	.L97
.L82:
	cmp	r3, #0x10
	bne	.L87	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0xa
	strh	r0, [r2]
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	cmp	r0, r5
	ble	.L88	@cond_branch
	strh	r5, [r2]
.L88:
	mov	r3, #0x0
	ldrsh	r1, [r2, r3]
	b	.L97
.L87:
	cmp	r3, #0x20
	bne	.L81	@cond_branch
	add	r0, r4, #0
	sub	r0, r0, #0xa
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L93	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
.L93:
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r0, r6, #0x10
.L98:
	asr	r0, r0, #0x10
	cmp	r1, r0
	beq	.L81	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	b	.L96
.L81:
	mov	r0, #0x0
.L96:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 AdjustQuantityAccordingToDPadInput,.Lfe16-AdjustQuantityAccordingToDPadInput
	.align	2, 0
	.globl	GetDialogBoxFontId
	.type	 GetDialogBoxFontId,function
	.thumb_func
GetDialogBoxFontId:
	push	{lr}
	bl	ContextNpcGetTextColor
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L102	@cond_branch
	mov	r0, #0x5
	b	.L104
.L102:
	mov	r0, #0x4
.L104:
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 GetDialogBoxFontId,.Lfe17-GetDialogBoxFontId
.text
	.align	2, 0 @ Don't pad with nop

