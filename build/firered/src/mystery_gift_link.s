@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	MysteryGiftLink_Recv
	.type	 MysteryGiftLink_Recv,function
	.thumb_func
MysteryGiftLink_Recv:
	push	{lr}
	ldr	r1, [r0, #0x20]
	bl	_call_via_r1
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 MysteryGiftLink_Recv,.Lfe1-MysteryGiftLink_Recv
	.align	2, 0
	.globl	MysteryGiftLink_Send
	.type	 MysteryGiftLink_Send,function
	.thumb_func
MysteryGiftLink_Send:
	push	{lr}
	ldr	r1, [r0, #0x24]
	bl	_call_via_r1
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 MysteryGiftLink_Send,.Lfe2-MysteryGiftLink_Send
	.align	2, 0
	.globl	MysteryGiftLink_Init
	.type	 MysteryGiftLink_Init,function
	.thumb_func
MysteryGiftLink_Init:
	mov	r3, #0x0
	strb	r1, [r0, #0x4]
	strb	r2, [r0, #0x5]
	str	r3, [r0]
	strh	r3, [r0, #0x12]
	strh	r3, [r0, #0x14]
	strh	r3, [r0, #0x10]
	strh	r3, [r0, #0xa]
	strh	r3, [r0, #0xc]
	strh	r3, [r0, #0x8]
	str	r3, [r0, #0x1c]
	str	r3, [r0, #0x18]
	ldr	r1, .L5
	str	r1, [r0, #0x24]
	ldr	r1, .L5+0x4
	str	r1, [r0, #0x20]
	bx	lr
.L6:
	.align	2, 0
.L5:
	.word	MGL_Send
	.word	MGL_Receive
.Lfe3:
	.size	 MysteryGiftLink_Init,.Lfe3-MysteryGiftLink_Init
	.align	2, 0
	.globl	MysteryGiftLink_InitSend
	.type	 MysteryGiftLink_InitSend,function
	.thumb_func
MysteryGiftLink_InitSend:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x0
	str	r0, [r4]
	strh	r1, [r4, #0xe]
	strh	r0, [r4, #0x10]
	strh	r0, [r4, #0x12]
	cmp	r3, #0
	beq	.L8	@cond_branch
	strh	r3, [r4, #0x14]
	b	.L9
.L8:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	strh	r0, [r4, #0x14]
.L9:
	str	r2, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 MysteryGiftLink_InitSend,.Lfe4-MysteryGiftLink_InitSend
	.align	2, 0
	.globl	MysteryGiftLink_InitRecv
	.type	 MysteryGiftLink_InitRecv,function
	.thumb_func
MysteryGiftLink_InitRecv:
	mov	r3, #0x0
	str	r3, [r0]
	strh	r1, [r0, #0x6]
	strh	r3, [r0, #0x8]
	strh	r3, [r0, #0xa]
	strh	r3, [r0, #0xc]
	str	r2, [r0, #0x18]
	bx	lr
.Lfe5:
	.size	 MysteryGiftLink_InitRecv,.Lfe5-MysteryGiftLink_InitRecv
	.align	2, 0
	.type	 MGL_ReceiveBlock,function
	.thumb_func
MGL_ReceiveBlock:
	push	{lr}
	add	r3, r0, #0
	add	r0, r1, #0
	lsl	r3, r3, #0x8
	ldr	r1, .L12
	add	r3, r3, r1
	add	r1, r3, #0
	bl	memcpy
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	gBlockRecvBuffer
.Lfe6:
	.size	 MGL_ReceiveBlock,.Lfe6-MGL_ReceiveBlock
	.align	2, 0
	.type	 MGL_HasReceived,function
	.thumb_func
MGL_HasReceived:
	push	{r4, lr}
	add	r4, r0, #0
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	asr	r0, r0, r4
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L15	@cond_branch
	mov	r0, #0x0
	b	.L17
.L15:
	mov	r0, #0x1
.L17:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 MGL_HasReceived,.Lfe7-MGL_HasReceived
	.align	2, 0
	.type	 MGL_ResetReceived,function
	.thumb_func
MGL_ResetReceived:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetBlockReceivedFlag
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 MGL_ResetReceived,.Lfe8-MGL_ResetReceived
	.align	2, 0
	.type	 MGL_Receive,function
	.thumb_func
MGL_Receive:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	ldr	r6, [r5]
	cmp	r6, #0x1
	beq	.L27	@cond_branch
	cmp	r6, #0x1
	bgt	.L36	@cond_branch
	cmp	r6, #0
	beq	.L21	@cond_branch
	b	.L20
.L36:
	cmp	r6, #0x2
	beq	.L31	@cond_branch
	b	.L20
.L21:
	ldrb	r0, [r5, #0x5]
	bl	MGL_HasReceived
	cmp	r0, #0
	beq	.L20	@cond_branch
	ldrb	r0, [r5, #0x5]
	mov	r4, sp
	mov	r1, sp
	mov	r2, #0x8
	bl	MGL_ReceiveBlock
	ldrh	r1, [r4, #0x4]
	strh	r1, [r5, #0xc]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0xa]
	lsl	r1, r1, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	cmp	r1, r0
	bls	.L23	@cond_branch
.L38:
	bl	LinkRfu_FatalError
	b	.L20
.L23:
	mov	r1, sp
	ldrh	r0, [r5, #0x6]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L38	@cond_branch
	strh	r6, [r5, #0x8]
	ldrb	r0, [r5, #0x5]
	bl	MGL_ResetReceived
	ldr	r0, [r5]
	add	r0, r0, #0x1
	str	r0, [r5]
	b	.L20
.L27:
	ldrb	r0, [r5, #0x5]
	bl	MGL_HasReceived
	cmp	r0, #0
	beq	.L20	@cond_branch
	ldrh	r0, [r5, #0x8]
	lsl	r1, r0, #0x6
	sub	r1, r1, r0
	lsl	r3, r1, #0x2
	ldrh	r0, [r5, #0xc]
	sub	r2, r0, r3
	cmp	r2, #0xfc
	bhi	.L29	@cond_branch
	ldrb	r0, [r5, #0x5]
	ldr	r1, [r5, #0x18]
	add	r1, r1, r3
	bl	MGL_ReceiveBlock
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	ldr	r0, [r5]
	add	r0, r0, #0x1
	str	r0, [r5]
	b	.L30
.L29:
	ldrb	r0, [r5, #0x5]
	ldr	r1, [r5, #0x18]
	add	r1, r1, r3
	mov	r2, #0xfc
	bl	MGL_ReceiveBlock
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
.L30:
	ldrb	r0, [r5, #0x5]
	bl	MGL_ResetReceived
	b	.L20
.L31:
	ldr	r0, [r5, #0x18]
	ldrh	r1, [r5, #0xc]
	bl	CalcCRC16WithTable
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r5, #0xa]
	cmp	r0, r1
	bne	.L38	@cond_branch
	mov	r0, #0x0
	str	r0, [r5]
	mov	r0, #0x1
	b	.L37
.L20:
	mov	r0, #0x0
.L37:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 MGL_Receive,.Lfe9-MGL_Receive
	.align	2, 0
	.type	 MGL_Send,function
	.thumb_func
MGL_Send:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldr	r5, [r4]
	cmp	r5, #0x1
	beq	.L43	@cond_branch
	cmp	r5, #0x1
	bgt	.L56	@cond_branch
	cmp	r5, #0
	beq	.L41	@cond_branch
	b	.L40
.L56:
	cmp	r5, #0x2
	beq	.L48	@cond_branch
	cmp	r5, #0x3
	beq	.L52	@cond_branch
	b	.L40
.L41:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldrh	r1, [r4, #0xe]
	ldr	r2, .L58
	ldr	r0, [sp]
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp]
	ldrh	r1, [r4, #0x14]
	ldr	r0, [sp, #0x4]
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	ldr	r0, [r4, #0x1c]
	bl	CalcCRC16WithTable
	lsl	r0, r0, #0x10
	ldr	r2, .L58+0x4
	ldr	r1, [sp]
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [sp]
	lsr	r1, r1, #0x10
	strh	r1, [r4, #0x12]
	strh	r5, [r4, #0x10]
	mov	r0, #0x0
	mov	r1, sp
	mov	r2, #0x8
	bl	SendBlock
	b	.L50
.L59:
	.align	2, 0
.L58:
	.word	-0x10000
	.word	0xffff
.L43:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldrb	r0, [r4, #0x4]
	bl	MGL_HasReceived
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldrb	r0, [r4, #0x4]
	bl	MGL_ResetReceived
	ldrh	r1, [r4, #0x10]
	lsl	r0, r1, #0x6
	sub	r0, r0, r1
	lsl	r3, r0, #0x2
	ldrh	r0, [r4, #0x14]
	sub	r0, r0, r3
	cmp	r0, #0xfc
	bhi	.L46	@cond_branch
	ldr	r1, [r4, #0x1c]
	add	r1, r1, r3
	lsl	r2, r0, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x0
	bl	SendBlock
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	b	.L50
.L46:
	ldr	r1, [r4, #0x1c]
	add	r1, r1, r3
	mov	r0, #0x0
	mov	r2, #0xfc
	bl	SendBlock
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	b	.L40
.L48:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldr	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x14]
	bl	CalcCRC16WithTable
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r4, #0x12]
	cmp	r0, r1
	beq	.L50	@cond_branch
	bl	LinkRfu_FatalError
	b	.L40
.L50:
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	b	.L40
.L52:
	ldrb	r0, [r4, #0x4]
	bl	MGL_HasReceived
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldrb	r0, [r4, #0x4]
	bl	MGL_ResetReceived
	mov	r0, #0x0
	str	r0, [r4]
	mov	r0, #0x1
	b	.L57
.L40:
	mov	r0, #0x0
.L57:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 MGL_Send,.Lfe10-MGL_Send
.text
	.align	2, 0 @ Don't pad with nop

