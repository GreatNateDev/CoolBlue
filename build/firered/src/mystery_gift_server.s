@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sServer,object
	.size	 sServer,4
sServer:
	.word	0x0
.text
	.align	2, 0
	.globl	MysterGiftServer_CreateForNews
	.type	 MysterGiftServer_CreateForNews,function
	.thumb_func
MysterGiftServer_CreateForNews:
	push	{r4, lr}
	ldr	r4, .L5
	mov	r0, #0x60
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, .L5+0x4
	mov	r2, #0x0
	mov	r3, #0x1
	bl	MysteryGiftServer_Init
	pop	{r4}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	sServer
	.word	gMysteryGiftServerScript_SendWonderNews
.Lfe1:
	.size	 MysterGiftServer_CreateForNews,.Lfe1-MysterGiftServer_CreateForNews
	.align	2, 0
	.globl	MysterGiftServer_CreateForCard
	.type	 MysterGiftServer_CreateForCard,function
	.thumb_func
MysterGiftServer_CreateForCard:
	push	{r4, lr}
	ldr	r4, .L8
	mov	r0, #0x60
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, .L8+0x4
	mov	r2, #0x0
	mov	r3, #0x1
	bl	MysteryGiftServer_Init
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	sServer
	.word	gMysteryGiftServerScript_SendWonderCard
.Lfe2:
	.size	 MysterGiftServer_CreateForCard,.Lfe2-MysterGiftServer_CreateForCard
	.align	2, 0
	.globl	MysterGiftServer_Run
	.type	 MysterGiftServer_Run,function
	.thumb_func
MysterGiftServer_Run:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r4, .L14
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L11	@cond_branch
	mov	r0, #0x3
	b	.L13
.L15:
	.align	2, 0
.L14:
	.word	sServer
.L11:
	bl	MysteryGiftServer_CallFunc
	add	r5, r0, #0
	cmp	r5, #0x3
	bne	.L12	@cond_branch
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	strh	r1, [r6]
	bl	MysteryGiftServer_Free
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L12:
	add	r0, r5, #0
.L13:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 MysterGiftServer_Run,.Lfe3-MysterGiftServer_Run
	.align	2, 0
	.type	 MysteryGiftServer_Init,function
	.thumb_func
MysteryGiftServer_Init:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	r4, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	mov	r9, r3
	mov	r5, #0x0
	str	r5, [r4]
	str	r5, [r4, #0x8]
	mov	r0, #0xa6
	lsl	r0, r0, #0x1
	bl	AllocZeroed
	str	r0, [r4, #0x18]
	mov	r0, #0xde
	lsl	r0, r0, #0x1
	bl	AllocZeroed
	str	r0, [r4, #0x1c]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	bl	AllocZeroed
	str	r0, [r4, #0x14]
	mov	r0, #0x64
	bl	AllocZeroed
	str	r0, [r4, #0x20]
	str	r6, [r4, #0x10]
	str	r5, [r4, #0xc]
	add	r4, r4, #0x38
	add	r0, r4, #0
	mov	r1, r8
	mov	r2, r9
	bl	MysteryGiftLink_Init
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 MysteryGiftServer_Init,.Lfe4-MysteryGiftServer_Init
	.align	2, 0
	.type	 MysteryGiftServer_Free,function
	.thumb_func
MysteryGiftServer_Free:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x18]
	bl	Free
	ldr	r0, [r4, #0x1c]
	bl	Free
	ldr	r0, [r4, #0x14]
	bl	Free
	ldr	r0, [r4, #0x20]
	bl	Free
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 MysteryGiftServer_Free,.Lfe5-MysteryGiftServer_Free
	.section .rodata
	.align	2, 0
.LC5:
	.ascii	"C:/WORK/POKeFRLG/src/pm_lgfr_ose/source/mevent_server.c\000"
	.align	2, 0
.LC7:
	.ascii	"size <= ME_SEND_BUF_SIZE\000"
.text
	.align	2, 0
	.type	 MysteryGiftServer_InitSend,function
	.thumb_func
MysteryGiftServer_InitSend:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	add	r7, r2, #0
	add	r4, r3, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r4, r0
	bls	.L20	@cond_branch
	ldr	r0, .L21
	ldr	r1, .L21+0x4
	ldr	r2, .L21+0x8
	mov	r3, #0x1
	bl	AGBAssert
.L20:
	add	r0, r5, #0
	add	r0, r0, #0x38
	add	r1, r6, #0
	add	r2, r7, #0
	add	r3, r4, #0
	bl	MysteryGiftLink_InitSend
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	.LC5
	.word	0x101
	.word	.LC7
.Lfe6:
	.size	 MysteryGiftServer_InitSend,.Lfe6-MysteryGiftServer_InitSend
	.align	2, 0
	.type	 MysteryGiftServer_GetSendData,function
	.thumb_func
MysteryGiftServer_GetSendData:
	push	{lr}
	cmp	r0, #0
	bne	.L26	@cond_branch
	add	r0, r1, #0
.L26:
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 MysteryGiftServer_GetSendData,.Lfe7-MysteryGiftServer_GetSendData
	.align	2, 0
	.type	 MysteryGiftServer_Compare,function
	.thumb_func
MysteryGiftServer_Compare:
	push	{lr}
	cmp	r1, r0
	bcs	.L28	@cond_branch
	mov	r0, #0x0
	b	.L32
.L28:
	cmp	r1, r0
	beq	.L30	@cond_branch
	mov	r0, #0x2
	b	.L32
.L30:
	mov	r0, #0x1
.L32:
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 MysteryGiftServer_Compare,.Lfe8-MysteryGiftServer_Compare
	.align	2, 0
	.type	 Server_Init,function
	.thumb_func
Server_Init:
	mov	r1, #0x4
	str	r1, [r0, #0x8]
	mov	r0, #0x0
	bx	lr
.Lfe9:
	.size	 Server_Init,.Lfe9-Server_Init
	.align	2, 0
	.type	 Server_Done,function
	.thumb_func
Server_Done:
	mov	r0, #0x3
	bx	lr
.Lfe10:
	.size	 Server_Done,.Lfe10-Server_Done
	.align	2, 0
	.type	 Server_Recv,function
	.thumb_func
Server_Recv:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x38
	bl	MysteryGiftLink_Recv
	cmp	r0, #0
	beq	.L36	@cond_branch
	mov	r0, #0x4
	str	r0, [r4, #0x8]
.L36:
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 Server_Recv,.Lfe11-Server_Recv
	.align	2, 0
	.type	 Server_Send,function
	.thumb_func
Server_Send:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x38
	bl	MysteryGiftLink_Send
	cmp	r0, #0
	beq	.L38	@cond_branch
	mov	r0, #0x4
	str	r0, [r4, #0x8]
.L38:
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 Server_Send,.Lfe12-Server_Send
	.section .rodata
	.align	2, 0
.LC10:
	.ascii	"cmd->parameter == NULL\000"
	.align	2, 0
.LC12:
	.ascii	"cmd->flag == FALSE\000"
	.align	2, 0
.LC14:
	.ascii	"cmd->flag == FALSE && cmd->parameter == NULL\000"
.text
	.align	2, 0
	.type	 Server_Run,function
	.thumb_func
Server_Run:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, [r5, #0xc]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, [r5, #0x10]
	add	r4, r2, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0xc]
	ldr	r0, [r4]
	cmp	r0, #0x1d
	bls	.LCB343
	b	.L40	@long jump
.LCB343:
	lsl	r0, r0, #0x2
	ldr	r1, .L129
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L130:
	.align	2, 0
.L129:
	.word	.L124
	.align	2, 0
	.align	2, 0
.L124:
	.word	.L41
	.word	.L44
	.word	.L45
	.word	.L48
	.word	.L61
	.word	.L51
	.word	.L56
	.word	.L63
	.word	.L66
	.word	.L71
	.word	.L74
	.word	.L77
	.word	.L80
	.word	.L86
	.word	.L83
	.word	.L92
	.word	.L89
	.word	.L102
	.word	.L95
	.word	.L98
	.word	.L101
	.word	.L109
	.word	.L103
	.word	.L106
	.word	.L112
	.word	.L113
	.word	.L114
	.word	.L117
	.word	.L120
	.word	.L123
.L41:
	ldr	r0, [r4, #0x8]
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldr	r0, .L131
	mov	r1, #0xb1
	lsl	r1, r1, #0x1
	ldr	r2, .L131+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L43:
	mov	r0, #0x1
	str	r0, [r5, #0x8]
	ldr	r0, [r4, #0x4]
	str	r0, [r5, #0x4]
	b	.L40
.L132:
	.align	2, 0
.L131:
	.word	.LC5
	.word	.LC10
.L44:
	mov	r0, #0x3
	str	r0, [r5, #0x8]
	b	.L40
.L45:
	ldr	r0, [r4, #0x8]
	cmp	r0, #0
	beq	.L47	@cond_branch
	ldr	r0, .L133
	mov	r1, #0xb6
	lsl	r1, r1, #0x1
	ldr	r2, .L133+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L47:
	add	r0, r5, #0
	add	r0, r0, #0x38
	ldr	r1, [r4, #0x4]
	ldr	r2, [r5, #0x14]
	bl	MysteryGiftLink_InitRecv
	mov	r0, #0x2
	str	r0, [r5, #0x8]
	b	.L40
.L134:
	.align	2, 0
.L133:
	.word	.LC5
	.word	.LC10
.L48:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L126	@cond_branch
	ldr	r0, .L135
	mov	r1, #0xb9
	lsl	r1, r1, #0x1
	ldr	r2, .L135+0x4
	mov	r3, #0x1
	bl	AGBAssert
	b	.L126
.L136:
	.align	2, 0
.L135:
	.word	.LC5
	.word	.LC12
.L51:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L53	@cond_branch
	ldr	r0, .L137
	mov	r1, #0xbc
	lsl	r1, r1, #0x1
	ldr	r2, .L137+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L53:
	ldr	r0, [r4, #0x8]
	cmp	r0, #0
	beq	.L55	@cond_branch
	ldr	r0, .L137
	ldr	r1, .L137+0x8
	ldr	r2, .L137+0xc
	mov	r3, #0x1
	bl	AGBAssert
.L55:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r5, #0x14]
	mov	r2, #0x64
	bl	memcpy
	b	.L40
.L138:
	.align	2, 0
.L137:
	.word	.LC5
	.word	.LC12
	.word	0x179
	.word	.LC10
.L56:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L58	@cond_branch
	ldr	r0, .L139
	mov	r1, #0xbf
	lsl	r1, r1, #0x1
	ldr	r2, .L139+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L58:
	ldr	r0, [r4, #0x8]
	cmp	r0, #0
	beq	.L60	@cond_branch
	ldr	r0, .L139
	ldr	r1, .L139+0x8
	ldr	r2, .L139+0xc
	mov	r3, #0x1
	bl	AGBAssert
.L60:
	ldr	r0, [r5, #0x20]
	bl	MysteryGift_ValidateLinkGameData
	str	r0, [r5, #0x4]
	b	.L40
.L140:
	.align	2, 0
.L139:
	.word	.LC5
	.word	.LC12
	.word	0x17f
	.word	.LC10
.L61:
	ldr	r1, [r5, #0x4]
	ldr	r0, [r4, #0x4]
	cmp	r1, r0
	beq	.LCB544
	b	.L40	@long jump
.LCB544:
.L126:
	mov	r0, #0x0
	str	r0, [r5, #0xc]
	ldr	r0, [r4, #0x8]
	str	r0, [r5, #0x10]
	b	.L40
.L63:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L65	@cond_branch
	ldr	r0, .L141
	mov	r1, #0xc6
	lsl	r1, r1, #0x1
	ldr	r2, .L141+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L65:
	ldr	r0, [r4, #0x8]
	ldr	r1, [r5, #0x18]
	bl	MysteryGiftServer_GetSendData
	add	r2, r0, #0
	ldr	r1, [r5, #0x20]
	bl	MysteryGift_CompareCardFlags
	str	r0, [r5, #0x4]
	b	.L40
.L142:
	.align	2, 0
.L141:
	.word	.LC5
	.word	.LC12
.L66:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L68	@cond_branch
	ldr	r0, .L143
	mov	r1, #0xc9
	lsl	r1, r1, #0x1
	ldr	r2, .L143+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L68:
	ldr	r0, [r4, #0x8]
	cmp	r0, #0
	beq	.L70	@cond_branch
	ldr	r0, .L143
	ldr	r1, .L143+0x8
	ldr	r2, .L143+0xc
	mov	r3, #0x1
	bl	AGBAssert
.L70:
	ldr	r0, [r5, #0x14]
	ldr	r0, [r0]
	str	r0, [r5, #0x4]
	b	.L40
.L144:
	.align	2, 0
.L143:
	.word	.LC5
	.word	.LC12
	.word	0x193
	.word	.LC10
.L71:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L73	@cond_branch
	ldr	r0, .L145
	mov	r1, #0xcc
	lsl	r1, r1, #0x1
	ldr	r2, .L145+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L73:
	ldr	r0, [r4, #0x8]
	add	r1, r5, #0
	add	r1, r1, #0x34
	bl	MysteryGiftServer_GetSendData
	add	r2, r0, #0
	ldr	r1, [r5, #0x20]
	bl	MysteryGift_CheckStamps
	str	r0, [r5, #0x4]
	b	.L40
.L146:
	.align	2, 0
.L145:
	.word	.LC5
	.word	.LC12
.L74:
	ldr	r0, [r4, #0x8]
	cmp	r0, #0
	beq	.L76	@cond_branch
	ldr	r0, .L147
	ldr	r1, .L147+0x4
	ldr	r2, .L147+0x8
	mov	r3, #0x1
	bl	AGBAssert
.L76:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r4, #0x4]
	bl	MysteryGift_GetCardStatFromLinkData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [r5, #0x4]
	b	.L40
.L148:
	.align	2, 0
.L147:
	.word	.LC5
	.word	0x19f
	.word	.LC10
.L77:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L79	@cond_branch
	ldr	r0, .L149
	mov	r1, #0xd2
	lsl	r1, r1, #0x1
	ldr	r2, .L149+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L79:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r4, #0x8]
	bl	MysteryGift_DoesQuestionnaireMatch
	str	r0, [r5, #0x4]
	b	.L40
.L150:
	.align	2, 0
.L149:
	.word	.LC5
	.word	.LC12
.L80:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L82	@cond_branch
	ldr	r0, .L151
	mov	r1, #0xd5
	lsl	r1, r1, #0x1
	ldr	r2, .L151+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L82:
	ldr	r0, [r4, #0x8]
	ldr	r1, [r5, #0x14]
	ldr	r1, [r1]
	bl	MysteryGiftServer_Compare
	str	r0, [r5, #0x4]
	b	.L40
.L152:
	.align	2, 0
.L151:
	.word	.LC5
	.word	.LC12
.L83:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L85	@cond_branch
	ldr	r0, .L153
	mov	r1, #0xd8
	lsl	r1, r1, #0x1
	ldr	r2, .L153+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L85:
	ldr	r0, [r4, #0x8]
	ldr	r1, [r5, #0x1c]
	bl	MysteryGiftServer_GetSendData
	add	r2, r0, #0
	mov	r3, #0xde
	lsl	r3, r3, #0x1
	add	r0, r5, #0
	mov	r1, #0x17
	bl	MysteryGiftServer_InitSend
	b	.L40
.L154:
	.align	2, 0
.L153:
	.word	.LC5
	.word	.LC12
.L86:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L88	@cond_branch
	ldr	r0, .L155
	mov	r1, #0xdb
	lsl	r1, r1, #0x1
	ldr	r2, .L155+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L88:
	ldr	r0, [r4, #0x8]
	ldr	r1, [r5, #0x18]
	bl	MysteryGiftServer_GetSendData
	add	r2, r0, #0
	mov	r3, #0xa6
	lsl	r3, r3, #0x1
	add	r0, r5, #0
	mov	r1, #0x16
	bl	MysteryGiftServer_InitSend
	b	.L40
.L156:
	.align	2, 0
.L155:
	.word	.LC5
	.word	.LC12
.L89:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L91	@cond_branch
	ldr	r0, .L157
	mov	r1, #0xde
	lsl	r1, r1, #0x1
	ldr	r2, .L157+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L91:
	ldr	r0, [r4, #0x8]
	add	r1, r5, #0
	add	r1, r1, #0x34
	bl	MysteryGiftServer_GetSendData
	add	r2, r0, #0
	add	r0, r5, #0
	mov	r1, #0x18
	mov	r3, #0x4
	bl	MysteryGiftServer_InitSend
	b	.L40
.L158:
	.align	2, 0
.L157:
	.word	.LC5
	.word	.LC12
.L92:
	ldr	r2, [r4, #0x8]
	cmp	r2, #0
	bne	.L93	@cond_branch
	ldr	r2, [r5, #0x24]
	ldr	r3, [r5, #0x28]
	b	.L127
.L93:
	ldr	r3, [r4, #0x4]
.L127:
	add	r0, r5, #0
	mov	r1, #0x19
	bl	MysteryGiftServer_InitSend
	b	.L40
.L95:
	ldr	r2, [r4, #0x8]
	cmp	r2, #0
	bne	.L96	@cond_branch
	ldr	r2, [r5, #0x2c]
	ldr	r3, [r5, #0x30]
	b	.L128
.L96:
	ldr	r3, [r4, #0x4]
.L128:
	add	r0, r5, #0
	mov	r1, #0x10
	bl	MysteryGiftServer_InitSend
	b	.L40
.L98:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L100	@cond_branch
	ldr	r0, .L159
	mov	r1, #0xe9
	lsl	r1, r1, #0x1
	ldr	r2, .L159+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L100:
	ldr	r2, [r4, #0x8]
	add	r0, r5, #0
	mov	r1, #0x1a
	mov	r3, #0xbc
	bl	MysteryGiftServer_InitSend
	b	.L40
.L160:
	.align	2, 0
.L159:
	.word	.LC5
	.word	.LC12
.L101:
	ldr	r2, [r4, #0x8]
	ldr	r3, [r4, #0x4]
	add	r0, r5, #0
	mov	r1, #0x15
	bl	MysteryGiftServer_InitSend
	b	.L40
.L102:
	ldr	r2, [r4, #0x8]
	ldr	r3, [r4, #0x4]
	add	r0, r5, #0
	mov	r1, #0x1c
	bl	MysteryGiftServer_InitSend
	b	.L40
.L103:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L105	@cond_branch
	ldr	r0, .L161
	ldr	r1, .L161+0x4
	ldr	r2, .L161+0x8
	mov	r3, #0x1
	bl	AGBAssert
.L105:
	ldr	r0, [r5, #0x18]
	ldr	r1, [r4, #0x8]
	mov	r2, #0xa6
	lsl	r2, r2, #0x1
	bl	memcpy
	b	.L40
.L162:
	.align	2, 0
.L161:
	.word	.LC5
	.word	0x1e1
	.word	.LC12
.L106:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L108	@cond_branch
	ldr	r0, .L163
	mov	r1, #0xf3
	lsl	r1, r1, #0x1
	ldr	r2, .L163+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L108:
	ldr	r0, [r5, #0x1c]
	ldr	r1, [r4, #0x8]
	mov	r2, #0xde
	lsl	r2, r2, #0x1
	bl	memcpy
	b	.L40
.L164:
	.align	2, 0
.L163:
	.word	.LC5
	.word	.LC12
.L109:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L111	@cond_branch
	ldr	r0, .L165
	ldr	r1, .L165+0x4
	ldr	r2, .L165+0x8
	mov	r3, #0x1
	bl	AGBAssert
.L111:
	ldr	r0, [r4, #0x8]
	ldr	r0, [r0]
	str	r0, [r5, #0x34]
	b	.L40
.L166:
	.align	2, 0
.L165:
	.word	.LC5
	.word	0x1eb
	.word	.LC12
.L112:
	ldr	r0, [r4, #0x8]
	str	r0, [r5, #0x24]
	ldr	r0, [r4, #0x4]
	str	r0, [r5, #0x28]
	b	.L40
.L113:
	ldr	r0, [r4, #0x8]
	str	r0, [r5, #0x2c]
	ldr	r0, [r4, #0x4]
	str	r0, [r5, #0x30]
	b	.L40
.L114:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	bne	.L115	@cond_branch
	ldr	r0, [r4, #0x8]
	cmp	r0, #0
	beq	.L116	@cond_branch
.L115:
	ldr	r0, .L167
	mov	r1, #0xfd
	lsl	r1, r1, #0x1
	ldr	r2, .L167+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L116:
	ldr	r4, [r5, #0x18]
	bl	GetSavedWonderCard
	add	r1, r0, #0
	mov	r2, #0xa6
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	bl	memcpy
	ldr	r0, [r5, #0x18]
	bl	DisableWonderCardSending
	b	.L40
.L168:
	.align	2, 0
.L167:
	.word	.LC5
	.word	.LC14
.L117:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	bne	.L118	@cond_branch
	ldr	r0, [r4, #0x8]
	cmp	r0, #0
	beq	.L119	@cond_branch
.L118:
	ldr	r0, .L169
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	ldr	r2, .L169+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L119:
	ldr	r4, [r5, #0x1c]
	bl	GetSavedWonderNews
	add	r1, r0, #0
	mov	r2, #0xde
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	bl	memcpy
	b	.L40
.L170:
	.align	2, 0
.L169:
	.word	.LC5
	.word	.LC14
.L120:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	bne	.L121	@cond_branch
	ldr	r0, [r4, #0x8]
	cmp	r0, #0
	beq	.L122	@cond_branch
.L121:
	ldr	r0, .L171
	ldr	r1, .L171+0x4
	ldr	r2, .L171+0x8
	mov	r3, #0x1
	bl	AGBAssert
.L122:
	bl	GetSavedRamScriptIfValid
	str	r0, [r5, #0x24]
	b	.L40
.L172:
	.align	2, 0
.L171:
	.word	.LC5
	.word	0x205
	.word	.LC14
.L123:
	ldr	r2, [r4, #0x8]
	ldr	r3, [r4, #0x4]
	add	r0, r5, #0
	mov	r1, #0x1b
	bl	MysteryGiftServer_InitSend
.L40:
	mov	r0, #0x1
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 Server_Run,.Lfe13-Server_Run
	.section .rodata
	.align	2, 0
	.type	 sFuncTable,object
sFuncTable:
	.word	Server_Init
	.word	Server_Done
	.word	Server_Recv
	.word	Server_Send
	.word	Server_Run
	.size	 sFuncTable,20
	.align	2, 0
.LC18:
	.ascii	"svr->mainseqno < NELEMS(func_tbl)\000"
.text
	.align	2, 0
	.type	 MysteryGiftServer_CallFunc,function
	.thumb_func
MysteryGiftServer_CallFunc:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x8]
	cmp	r0, #0x4
	bls	.L175	@cond_branch
	ldr	r0, .L178
	ldr	r1, .L178+0x4
	ldr	r2, .L178+0x8
	mov	r3, #0x1
	bl	AGBAssert
.L175:
	ldr	r1, .L178+0xc
	ldr	r0, [r4, #0x8]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	add	r5, r0, #0
	ldr	r0, [r4, #0x8]
	cmp	r0, #0x4
	bls	.L177	@cond_branch
	ldr	r0, .L178
	mov	r1, #0x89
	lsl	r1, r1, #0x2
	ldr	r2, .L178+0x8
	mov	r3, #0x1
	bl	AGBAssert
.L177:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L179:
	.align	2, 0
.L178:
	.word	.LC5
	.word	0x222
	.word	.LC18
	.word	sFuncTable
.Lfe14:
	.size	 MysteryGiftServer_CallFunc,.Lfe14-MysteryGiftServer_CallFunc
.text
	.align	2, 0 @ Don't pad with nop

