@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gPlttBufferUnfaded
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gPlttBufferUnfaded,object
	.size	 gPlttBufferUnfaded,1024
gPlttBufferUnfaded:
	.short	0x0
	.space	1022
	.globl	gPlttBufferFaded
	.align	2, 0
	.type	 gPlttBufferFaded,object
	.size	 gPlttBufferFaded,1024
gPlttBufferFaded:
	.short	0x0
	.space	1022
	.align	2, 0
	.type	 sPaletteStructs,object
	.size	 sPaletteStructs,192
sPaletteStructs:
	.word	0x0
	.space	8
	.space	180
	.globl	gPaletteFade
	.align	2, 0
	.type	 gPaletteFade,object
	.size	 gPaletteFade,16
gPaletteFade:
	.word	0x0
	.space	12
	.align	2, 0
	.type	 sPlttBufferTransferPending,object
	.size	 sPlttBufferTransferPending,4
sPlttBufferTransferPending:
	.word	0x0
	.globl	gPaletteDecompressionBuffer
	.type	 gPaletteDecompressionBuffer,object
	.size	 gPaletteDecompressionBuffer,1024
gPaletteDecompressionBuffer:
	.byte	0x0
	.space	1023
	.section .rodata
	.align	2, 0
	.type	 sDummyPaletteStructTemplate,object
	.size	 sDummyPaletteStructTemplate,16
sDummyPaletteStructTemplate:
	.short	0xffff
	.space	9
	.byte	0x20
	.space	4
	.type	 sRoundedDownGrayscaleMap,object
sRoundedDownGrayscaleMap:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0xb
	.byte	0xb
	.byte	0xb
	.byte	0xb
	.byte	0xb
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x15
	.byte	0x15
	.byte	0x15
	.byte	0x15
	.byte	0x15
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1f
	.byte	0x1f
	.size	 sRoundedDownGrayscaleMap,32
.text
	.align	2, 0
	.globl	LoadCompressedPalette
	.type	 LoadCompressedPalette,function
	.thumb_func
LoadCompressedPalette:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	ldr	r6, .L5
	add	r1, r6, #0
	bl	LZDecompressWram
	lsl	r4, r4, #0x1
	ldr	r1, .L5+0x4
	add	r1, r4, r1
	lsr	r5, r5, #0x11
	add	r0, r6, #0
	add	r2, r5, #0
	bl	CpuSet
	ldr	r0, .L5+0x8
	add	r4, r4, r0
	add	r0, r6, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	CpuSet
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	gPaletteDecompressionBuffer
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.Lfe1:
	.size	 LoadCompressedPalette,.Lfe1-LoadCompressedPalette
	.align	2, 0
	.globl	LoadPalette
	.type	 LoadPalette,function
	.thumb_func
LoadPalette:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r4, r4, #0xf
	ldr	r1, .L8
	add	r1, r4, r1
	lsr	r5, r5, #0x11
	add	r2, r5, #0
	bl	CpuSet
	ldr	r0, .L8+0x4
	add	r4, r4, r0
	add	r0, r6, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	CpuSet
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.Lfe2:
	.size	 LoadPalette,.Lfe2-LoadPalette
	.align	2, 0
	.globl	FillPalette
	.type	 FillPalette,function
	.thumb_func
FillPalette:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	lsl	r4, r4, #0x10
	lsl	r5, r5, #0x10
	mov	r0, sp
	strh	r6, [r0]
	lsr	r4, r4, #0xf
	ldr	r1, .L11
	add	r1, r4, r1
	lsr	r5, r5, #0x11
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	orr	r5, r5, r0
	mov	r0, sp
	add	r2, r5, #0
	bl	CpuSet
	mov	r0, sp
	add	r0, r0, #0x2
	strh	r6, [r0]
	ldr	r1, .L11+0x4
	add	r4, r4, r1
	add	r1, r4, #0
	add	r2, r5, #0
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.Lfe3:
	.size	 FillPalette,.Lfe3-FillPalette
	.align	2, 0
	.globl	TransferPlttBuffer
	.type	 TransferPlttBuffer,function
	.thumb_func
TransferPlttBuffer:
	push	{r4, r5, lr}
	ldr	r4, .L16
	ldrb	r1, [r4, #0x8]
	mov	r5, #0x80
	add	r0, r5, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.L14	@cond_branch
	ldr	r1, .L16+0x4
	mov	r2, #0xa0
	lsl	r2, r2, #0x13
	ldr	r0, .L16+0x8
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L16+0xc
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	ldr	r0, .L16+0x10
	str	r3, [r0]
	ldrb	r1, [r4, #0x9]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L14	@cond_branch
	ldrb	r1, [r4, #0x7]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L14	@cond_branch
	bl	UpdateBlendRegisters
.L14:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gPaletteFade
	.word	gPlttBufferFaded
	.word	0x40000d4
	.word	-0x7ffffe00
	.word	sPlttBufferTransferPending
.Lfe4:
	.size	 TransferPlttBuffer,.Lfe4-TransferPlttBuffer
	.align	2, 0
	.globl	UpdatePaletteFade
	.type	 UpdatePaletteFade,function
	.thumb_func
UpdatePaletteFade:
	push	{lr}
	ldr	r0, .L26
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L19	@cond_branch
	mov	r0, #0xff
	b	.L24
.L27:
	.align	2, 0
.L26:
	.word	sPlttBufferTransferPending
.L19:
	ldr	r0, .L28
	ldrb	r0, [r0, #0x9]
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L20	@cond_branch
	bl	UpdateNormalPaletteFade
	b	.L25
.L29:
	.align	2, 0
.L28:
	.word	gPaletteFade
.L20:
	cmp	r1, #0x1
	bne	.L22	@cond_branch
	bl	UpdateFastPaletteFade
	b	.L25
.L22:
	bl	UpdateHardwarePaletteFade
.L25:
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L30
	ldr	r0, .L30+0x4
	ldr	r0, [r0]
	mov	r1, #0x0
	orr	r0, r0, r1
	str	r0, [r2]
	add	r0, r3, #0
.L24:
	pop	{r1}
	bx	r1
.L31:
	.align	2, 0
.L30:
	.word	sPlttBufferTransferPending
	.word	gPaletteFade
.Lfe5:
	.size	 UpdatePaletteFade,.Lfe5-UpdatePaletteFade
	.align	2, 0
	.globl	ResetPaletteFade
	.type	 ResetPaletteFade,function
	.thumb_func
ResetPaletteFade:
	push	{r4, lr}
	mov	r4, #0x0
.L36:
	add	r0, r4, #0
	bl	PaletteStruct_Reset
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bls	.L36	@cond_branch
	bl	ResetPaletteFadeControl
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 ResetPaletteFade,.Lfe6-ResetPaletteFade
	.align	2, 0
	.globl	ReadPlttIntoBuffers
	.type	 ReadPlttIntoBuffers,function
	.thumb_func
ReadPlttIntoBuffers:
	push	{r4, r5, r6, r7, lr}
	mov	r0, #0xa0
	lsl	r0, r0, #0x13
	mov	ip, r0
	mov	r4, #0x0
	ldr	r7, .L44
	ldr	r6, .L44+0x4
	ldr	r5, .L44+0x8
.L42:
	lsl	r1, r4, #0x1
	add	r3, r1, r7
	mov	r0, ip
	add	r2, r1, r0
	ldrh	r0, [r2]
	strh	r0, [r3]
	add	r1, r1, r6
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r5
	bls	.L42	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x1ff
.Lfe7:
	.size	 ReadPlttIntoBuffers,.Lfe7-ReadPlttIntoBuffers
	.align	2, 0
	.globl	BeginNormalPaletteFade
	.type	 BeginNormalPaletteFade,function
	.thumb_func
BeginNormalPaletteFade:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	ldr	r0, [sp, #0x18]
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	ip, r2
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r5, .L55
	ldrb	r1, [r5, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L47	@cond_branch
	mov	r0, #0x0
	b	.L53
.L56:
	.align	2, 0
.L55:
	.word	gPaletteFade
.L47:
	ldrb	r0, [r5, #0xa]
	mov	r3, #0x79
	neg	r3, r3
	add	r2, r3, #0
	and	r2, r2, r0
	mov	r0, #0x10
	orr	r2, r2, r0
	strb	r2, [r5, #0xa]
	lsl	r0, r6, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bge	.L49	@cond_branch
	lsl	r0, r2, #0x19
	lsr	r0, r0, #0x1c
	neg	r1, r1
	add	r0, r0, r1
	mov	r1, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x3
	and	r2, r2, r3
	orr	r2, r2, r0
	strb	r2, [r5, #0xa]
	mov	r6, #0x0
.L49:
	str	r4, [r5]
	mov	r4, #0x3f
	add	r1, r6, #0
	and	r1, r1, r4
	ldrb	r2, [r5, #0x4]
	mov	r3, #0x40
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x4]
	and	r6, r6, r4
	ldrb	r0, [r5, #0x8]
	and	r3, r3, r0
	orr	r3, r3, r6
	strb	r3, [r5, #0x8]
	mov	r0, #0x1f
	mov	r1, ip
	and	r1, r1, r0
	lsl	r1, r1, #0x6
	ldrh	r2, [r5, #0x4]
	ldr	r0, .L57
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	lsl	r2, r7, #0x3
	ldrb	r1, [r5, #0x5]
	mov	r0, #0x7
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	ldr	r1, .L57+0x4
	mov	r0, r8
	and	r1, r1, r0
	ldrh	r2, [r5, #0x6]
	ldr	r0, .L57+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x6]
	ldrb	r0, [r5, #0x7]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r5, #0x7]
	ldrb	r1, [r5, #0x9]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r5, #0x9]
	cmp	ip, r7
	bcs	.L50	@cond_branch
	mov	r0, #0x41
	neg	r0, r0
	and	r3, r3, r0
	b	.L54
.L58:
	.align	2, 0
.L57:
	.word	-0x7c1
	.word	0x7fff
	.word	-0x8000
.L50:
	mov	r0, #0x40
	orr	r3, r3, r0
.L54:
	strb	r3, [r5, #0x8]
	bl	UpdatePaletteFade
	ldr	r4, .L59
	ldrb	r1, [r4, #0x8]
	lsr	r5, r1, #0x7
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r4, #0x8]
	ldr	r0, .L59+0x4
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	ldr	r2, .L59+0x8
	bl	CpuSet
	ldr	r1, .L59+0xc
	mov	r0, #0x0
	str	r0, [r1]
	ldrb	r1, [r4, #0x9]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L52	@cond_branch
	ldrb	r1, [r4, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L52	@cond_branch
	bl	UpdateBlendRegisters
.L52:
	ldr	r2, .L59
	lsl	r3, r5, #0x7
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2, #0x8]
	mov	r0, #0x1
.L53:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L60:
	.align	2, 0
.L59:
	.word	gPaletteFade
	.word	gPlttBufferFaded
	.word	0x4000100
	.word	sPlttBufferTransferPending
.Lfe8:
	.size	 BeginNormalPaletteFade,.Lfe8-BeginNormalPaletteFade
	.align	2, 0
	.type	 BeginPlttFade,function
	.thumb_func
BeginPlttFade:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x8
	mov	r8, r0
	add	r4, r1, #0
	add	r6, r2, #0
	ldr	r5, [sp, #0x1c]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	str	r3, [sp, #0x4]
	bl	ReadPlttIntoBuffers
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	str	r5, [sp]
	mov	r0, r8
	add	r1, r4, #0
	add	r2, r6, #0
	ldr	r3, [sp, #0x4]
	bl	BeginNormalPaletteFade
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 BeginPlttFade,.Lfe9-BeginPlttFade
	.align	2, 0
	.type	 PaletteStruct_Run,function
	.thumb_func
PaletteStruct_Run:
	push	{r4, r5, r6, r7, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r5, #0x0
.L66:
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L74
	add	r4, r0, r1
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L65	@cond_branch
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	cmp	r0, r7
	bne	.L65	@cond_branch
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x14
	lsr	r1, r1, #0x19
	ldrb	r0, [r2, #0xb]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	bne	.L69	@cond_branch
	add	r0, r4, #0
	bl	PaletteStruct_TryEnd
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L65	@cond_branch
.L69:
	ldrb	r0, [r4, #0x8]
	cmp	r0, #0
	bne	.L71	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	bl	PaletteStruct_Copy
	b	.L72
.L75:
	.align	2, 0
.L74:
	.word	sPaletteStructs
.L71:
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x8]
.L72:
	add	r0, r4, #0
	add	r1, r6, #0
	bl	PaletteStruct_Blend
.L65:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xf
	bls	.L66	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 PaletteStruct_Run,.Lfe10-PaletteStruct_Run
	.align	2, 0
	.type	 PaletteStruct_Copy,function
	.thumb_func
PaletteStruct_Copy:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	mov	r8, r1
	mov	r6, #0x0
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x14
	lsr	r1, r1, #0x19
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x9]
	lsl	r2, r0, #0x19
	lsr	r0, r2, #0x1b
	mov	r5, r1
	mul	r5, r5, r0
	ldrb	r1, [r3, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L77	@cond_branch
	lsr	r0, r2, #0x1b
	cmp	r6, r0
	bcs	.L82	@cond_branch
	ldr	r0, .L89
	mov	ip, r0
	ldr	r7, .L89+0x4
.L80:
	ldr	r0, [r4, #0x4]
	lsl	r0, r0, #0xb
	lsr	r0, r0, #0x16
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	ldr	r1, [r3, #0x4]
	lsl	r2, r5, #0x1
	add	r1, r2, r1
	ldrh	r1, [r1]
	strh	r1, [r0]
	ldr	r0, [r4, #0x4]
	lsl	r0, r0, #0xb
	lsr	r0, r0, #0x16
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldr	r1, [r4]
	ldr	r1, [r1, #0x4]
	add	r2, r2, r1
	ldrh	r1, [r2]
	strh	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, [r4, #0x4]
	lsl	r1, r2, #0xb
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	ldr	r0, .L89+0x8
	and	r1, r1, r0
	lsl	r1, r1, #0xb
	ldr	r0, .L89+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [r4, #0x4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	cmp	r6, r0
	bcc	.L80	@cond_branch
	b	.L82
.L90:
	.align	2, 0
.L89:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x3ff
	.word	-0x1ff801
.L77:
	lsr	r0, r2, #0x1b
	cmp	r6, r0
	bcs	.L82	@cond_branch
	ldr	r3, .L91
.L85:
	ldr	r1, [r4, #0x4]
	lsl	r1, r1, #0xb
	lsr	r1, r1, #0x16
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	ldr	r0, [r4]
	ldr	r2, [r0, #0x4]
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, [r4, #0x4]
	lsl	r1, r2, #0xb
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	ldr	r0, .L91+0x4
	and	r1, r1, r0
	lsl	r1, r1, #0xb
	ldr	r0, .L91+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [r4, #0x4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x9]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	cmp	r6, r0
	bcc	.L85	@cond_branch
.L82:
	ldrh	r0, [r4, #0x4]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x17
	lsl	r0, r0, #0xb
	ldr	r1, [r4, #0x4]
	ldr	r2, .L91+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [r4, #0x4]
	ldr	r3, [r4]
	ldrb	r0, [r3, #0xa]
	strb	r0, [r4, #0x8]
	ldrh	r2, [r4, #0x6]
	lsl	r0, r2, #0x14
	lsr	r0, r0, #0x19
	add	r0, r0, #0x1
	mov	r1, #0x7f
	and	r0, r0, r1
	lsl	r0, r0, #0x5
	ldr	r5, .L91+0xc
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r4, #0x6]
	lsl	r1, r1, #0x14
	lsr	r1, r1, #0x19
	ldrb	r0, [r3, #0xb]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	blt	.L87	@cond_branch
	ldrb	r0, [r4, #0x9]
	cmp	r0, #0
	beq	.L88	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x9]
.L88:
	ldrh	r1, [r4, #0x6]
	add	r0, r5, #0
	and	r0, r0, r1
	strh	r0, [r4, #0x6]
.L87:
	ldrh	r0, [r4, #0x4]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x1b
	mov	r1, #0x1
	lsl	r1, r1, r0
	mov	r2, r8
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gPlttBufferFaded
	.word	0x3ff
	.word	-0x1ff801
	.word	-0xfe1
.Lfe11:
	.size	 PaletteStruct_Copy,.Lfe11-PaletteStruct_Copy
	.align	2, 0
	.type	 PaletteStruct_Blend,function
	.thumb_func
PaletteStruct_Blend:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r3, .L105
	ldrb	r1, [r3, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L94	@cond_branch
	ldrh	r0, [r4, #0x4]
	lsl	r0, r0, #0x15
	lsr	r6, r0, #0x17
	asr	r1, r6, #0x4
	mov	r5, #0x1
	add	r0, r5, #0
	lsl	r0, r0, r1
	ldr	r1, [r3]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L94	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x8]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L95	@cond_branch
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x1a
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x1a
	cmp	r1, r0
	beq	.L94	@cond_branch
	add	r0, r6, #0
	ldrb	r1, [r2, #0x9]
	lsl	r1, r1, #0x19
	lsr	r1, r1, #0x1b
	ldrh	r2, [r3, #0x4]
	lsl	r2, r2, #0x15
	lsr	r2, r2, #0x1b
	ldrh	r3, [r3, #0x6]
	lsl	r3, r3, #0x11
	lsr	r3, r3, #0x11
	bl	BlendPalette
	b	.L94
.L106:
	.align	2, 0
.L105:
	.word	gPaletteFade
.L95:
	ldrb	r1, [r3, #0x4]
	mov	r0, #0x3f
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L94	@cond_branch
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r2, #0xa]
	cmp	r0, r1
	beq	.L94	@cond_branch
	ldrh	r0, [r4, #0x6]
	lsl	r0, r0, #0x14
	lsr	r0, r0, #0x19
	ldrb	r1, [r2, #0x9]
	lsl	r1, r1, #0x19
	lsr	r2, r1, #0x1b
	mov	r5, r0
	mul	r5, r5, r2
	mov	r3, #0x0
	add	r1, r2, #0
	cmp	r3, r1
	bcs	.L94	@cond_branch
	ldr	r6, .L107
.L103:
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x17
	add	r1, r1, r3
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldr	r2, [r4]
	add	r0, r5, r3
	ldr	r2, [r2, #0x4]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x9]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	cmp	r3, r0
	bcc	.L103	@cond_branch
.L94:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	gPlttBufferFaded
.Lfe12:
	.size	 PaletteStruct_Blend,.Lfe12-PaletteStruct_Blend
	.align	2, 0
	.type	 PaletteStruct_TryEnd,function
	.thumb_func
PaletteStruct_TryEnd:
	push	{lr}
	add	r3, r0, #0
	ldrb	r0, [r3, #0x9]
	cmp	r0, #0
	bne	.L110	@cond_branch
	ldr	r2, [r3]
	ldrb	r0, [r2, #0xb]
	lsr	r0, r0, #0x5
	cmp	r0, #0
	bne	.L111	@cond_branch
	ldrh	r1, [r3, #0x6]
	ldr	r0, .L116
	and	r0, r0, r1
	strh	r0, [r3, #0x6]
	ldrb	r0, [r2, #0xa]
	strb	r0, [r3, #0x8]
	ldrb	r0, [r2, #0xc]
	strb	r0, [r3, #0x9]
	ldrh	r0, [r3, #0x4]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x17
	lsl	r0, r0, #0xb
	ldr	r1, [r3, #0x4]
	ldr	r2, .L116+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [r3, #0x4]
	b	.L109
.L117:
	.align	2, 0
.L116:
	.word	-0xfe1
	.word	-0x1ff801
.L111:
	cmp	r0, #0
	blt	.L109	@cond_branch
	cmp	r0, #0x2
	bgt	.L109	@cond_branch
	ldrh	r0, [r2]
	bl	PaletteStruct_ResetById
	b	.L109
.L110:
	sub	r0, r0, #0x1
	strb	r0, [r3, #0x9]
.L109:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 PaletteStruct_TryEnd,.Lfe13-PaletteStruct_TryEnd
	.align	2, 0
	.globl	PaletteStruct_ResetById
	.type	 PaletteStruct_ResetById,function
	.thumb_func
PaletteStruct_ResetById:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	PaletteStruct_GetPalNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x10
	beq	.L119	@cond_branch
	bl	PaletteStruct_Reset
.L119:
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 PaletteStruct_ResetById,.Lfe14-PaletteStruct_ResetById
	.align	2, 0
	.type	 PaletteStruct_Reset,function
	.thumb_func
PaletteStruct_Reset:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L121
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, .L121+0x4
	str	r0, [r1]
	ldrb	r2, [r1, #0x4]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x4]
	ldrh	r2, [r1, #0x4]
	ldr	r0, .L121+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0x4]
	ldr	r0, [r1, #0x4]
	ldr	r2, .L121+0xc
	and	r0, r0, r2
	str	r0, [r1, #0x4]
	ldrh	r2, [r1, #0x6]
	ldr	r0, .L121+0x10
	and	r0, r0, r2
	strh	r0, [r1, #0x6]
	ldrb	r2, [r1, #0x4]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x4]
	mov	r0, #0x0
	strb	r0, [r1, #0x8]
	strb	r0, [r1, #0x9]
	bx	lr
.L122:
	.align	2, 0
.L121:
	.word	sPaletteStructs
	.word	sDummyPaletteStructTemplate
	.word	-0x7fd
	.word	-0x1ff801
	.word	-0xfe1
.Lfe15:
	.size	 PaletteStruct_Reset,.Lfe15-PaletteStruct_Reset
	.align	2, 0
	.globl	ResetPaletteFadeControl
	.type	 ResetPaletteFadeControl,function
	.thumb_func
ResetPaletteFadeControl:
	ldr	r2, .L124
	mov	r0, #0x0
	str	r0, [r2]
	sub	r0, r0, #0x40
	ldrb	r1, [r2, #0x4]
	and	r0, r0, r1
	strb	r0, [r2, #0x4]
	ldrh	r1, [r2, #0x4]
	ldr	r0, .L124+0x4
	and	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0x7
	and	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldrh	r1, [r2, #0x6]
	ldr	r0, .L124+0x8
	and	r0, r0, r1
	strh	r0, [r2, #0x6]
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x7]
	mov	r0, #0x0
	strb	r0, [r2, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r3, #0x5
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r1
	mov	r1, #0x9
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldrb	r1, [r2, #0xa]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0xa]
	ldr	r0, [r2, #0x8]
	ldr	r1, .L124+0xc
	and	r0, r0, r1
	str	r0, [r2, #0x8]
	ldrb	r0, [r2, #0xa]
	and	r3, r3, r0
	mov	r0, #0x79
	neg	r0, r0
	and	r3, r3, r0
	mov	r0, #0x10
	orr	r3, r3, r0
	strb	r3, [r2, #0xa]
	bx	lr
.L125:
	.align	2, 0
.L124:
	.word	gPaletteFade
	.word	-0x7c1
	.word	-0x8000
	.word	-0x1f001
.Lfe16:
	.size	 ResetPaletteFadeControl,.Lfe16-ResetPaletteFadeControl
	.align	2, 0
	.type	 PaletteStruct_SetUnusedFlag,function
	.thumb_func
PaletteStruct_SetUnusedFlag:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	PaletteStruct_GetPalNum
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x10
	beq	.L127	@cond_branch
	ldr	r1, .L128
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x4]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x4]
.L127:
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	sPaletteStructs
.Lfe17:
	.size	 PaletteStruct_SetUnusedFlag,.Lfe17-PaletteStruct_SetUnusedFlag
	.align	2, 0
	.type	 PaletteStruct_ClearUnusedFlag,function
	.thumb_func
PaletteStruct_ClearUnusedFlag:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	PaletteStruct_GetPalNum
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x10
	beq	.L131	@cond_branch
	ldr	r0, .L132
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x4]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x4]
.L131:
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	sPaletteStructs
.Lfe18:
	.size	 PaletteStruct_ClearUnusedFlag,.Lfe18-PaletteStruct_ClearUnusedFlag
	.align	2, 0
	.type	 PaletteStruct_GetPalNum,function
	.thumb_func
PaletteStruct_GetPalNum:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, #0x0
	ldr	r3, .L142
.L138:
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L137	@cond_branch
	add	r0, r1, #0
	b	.L141
.L143:
	.align	2, 0
.L142:
	.word	sPaletteStructs
.L137:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xf
	bls	.L138	@cond_branch
	mov	r0, #0x10
.L141:
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 PaletteStruct_GetPalNum,.Lfe19-PaletteStruct_GetPalNum
	.align	2, 0
	.type	 UpdateNormalPaletteFade,function
	.thumb_func
UpdateNormalPaletteFade:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L167
	ldrb	r1, [r4, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L145	@cond_branch
	mov	r0, #0x0
	b	.L164
.L168:
	.align	2, 0
.L167:
	.word	gPaletteFade
.L145:
	bl	IsSoftwarePaletteFadeFinishing
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L146	@cond_branch
	ldrb	r0, [r4, #0x7]
	b	.L166
.L146:
	ldrb	r1, [r4, #0xa]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L148	@cond_branch
	ldrb	r2, [r4, #0x4]
	lsl	r1, r2, #0x1a
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x1a
	cmp	r1, r0
	bcs	.L149	@cond_branch
	lsr	r0, r1, #0x1a
	add	r0, r0, #0x1
	mov	r1, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x4]
	mov	r0, #0x2
	b	.L164
.L149:
	mov	r0, #0x40
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r4, #0x4]
.L148:
	mov	r5, #0x0
	ldr	r2, .L169
	ldrb	r1, [r2, #0xa]
	mov	r0, #0x4
	and	r0, r0, r1
	add	r7, r2, #0
	cmp	r0, #0
	bne	.L150	@cond_branch
	ldrh	r4, [r7]
	b	.L151
.L170:
	.align	2, 0
.L169:
	.word	gPaletteFade
.L150:
	ldrh	r4, [r7, #0x2]
	mov	r5, #0x80
	lsl	r5, r5, #0x1
.L151:
	cmp	r4, #0
	beq	.L153	@cond_branch
	ldr	r7, .L171
	add	r6, r7, #0
.L154:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L155	@cond_branch
	ldrh	r2, [r6, #0x4]
	lsl	r2, r2, #0x15
	lsr	r2, r2, #0x1b
	ldrh	r3, [r6, #0x6]
	lsl	r3, r3, #0x11
	lsr	r3, r3, #0x11
	add	r0, r5, #0
	mov	r1, #0x10
	bl	BlendPalette
.L155:
	lsr	r4, r4, #0x1
	add	r0, r5, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r4, #0
	bne	.L154	@cond_branch
.L153:
	ldrb	r2, [r7, #0xa]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r4, #0x5
	neg	r4, r4
	and	r4, r4, r2
	orr	r4, r4, r1
	strb	r4, [r7, #0xa]
	mov	r0, #0x4
	and	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.L157	@cond_branch
	ldrh	r6, [r7, #0x4]
	lsl	r2, r6, #0x15
	ldrb	r0, [r7, #0x5]
	lsl	r5, r0, #0x18
	lsr	r1, r2, #0x1b
	lsr	r0, r5, #0x1b
	cmp	r1, r0
	bne	.L158	@cond_branch
	str	r3, [r7]
	mov	r0, #0x2
	orr	r4, r4, r0
	strb	r4, [r7, #0xa]
	b	.L157
.L172:
	.align	2, 0
.L171:
	.word	gPaletteFade
.L158:
	ldrb	r1, [r7, #0x8]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L160	@cond_branch
	lsr	r3, r2, #0x1b
	lsl	r0, r4, #0x19
	lsr	r0, r0, #0x1c
	add	r3, r0, r3
	lsr	r0, r5, #0x1b
	cmp	r3, r0
	ble	.L163	@cond_branch
	add	r3, r0, #0
	b	.L163
.L160:
	lsr	r3, r2, #0x1b
	lsl	r0, r4, #0x19
	lsr	r0, r0, #0x1c
	sub	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	asr	r0, r0, #0x18
	lsr	r1, r5, #0x1b
	cmp	r0, r1
	bge	.L163	@cond_branch
	add	r3, r1, #0
.L163:
	lsl	r0, r3, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x1f
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldr	r1, .L173
	and	r1, r1, r6
	orr	r1, r1, r0
	strh	r1, [r7, #0x4]
.L157:
	ldrb	r0, [r7, #0x7]
.L166:
	lsr	r0, r0, #0x7
.L164:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L174:
	.align	2, 0
.L173:
	.word	-0x7c1
.Lfe20:
	.size	 UpdateNormalPaletteFade,.Lfe20-UpdateNormalPaletteFade
	.align	2, 0
	.globl	InvertPlttBuffer
	.type	 InvertPlttBuffer,function
	.thumb_func
InvertPlttBuffer:
	push	{r4, r5, r6, r7, lr}
	add	r1, r0, #0
	mov	r3, #0x0
	cmp	r1, #0
	beq	.L177	@cond_branch
	ldr	r7, .L186
.L178:
	mov	r0, #0x1
	and	r0, r0, r1
	lsr	r4, r1, #0x1
	add	r5, r3, #0
	add	r5, r5, #0x10
	cmp	r0, #0
	beq	.L179	@cond_branch
	mov	r2, #0x0
	add	r6, r7, #0
.L183:
	add	r0, r3, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	mvn	r1, r1
	strh	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xf
	bls	.L183	@cond_branch
.L179:
	add	r1, r4, #0
	lsl	r0, r5, #0x10
	lsr	r3, r0, #0x10
	cmp	r1, #0
	bne	.L178	@cond_branch
.L177:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L187:
	.align	2, 0
.L186:
	.word	gPlttBufferFaded
.Lfe21:
	.size	 InvertPlttBuffer,.Lfe21-InvertPlttBuffer
	.align	2, 0
	.globl	TintPlttBuffer
	.type	 TintPlttBuffer,function
	.thumb_func
TintPlttBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x4]
	mov	r0, #0x0
	mov	r9, r0
	cmp	r4, #0
	beq	.L190	@cond_branch
	lsl	r1, r1, #0x18
	str	r1, [sp, #0x8]
.L191:
	mov	r0, #0x1
	and	r0, r0, r4
	lsr	r4, r4, #0x1
	str	r4, [sp, #0xc]
	mov	r1, #0x10
	add	r1, r1, r9
	mov	sl, r1
	cmp	r0, #0
	beq	.L192	@cond_branch
	mov	r4, #0x0
	ldr	r2, .L199
	mov	r8, r2
	ldr	r1, [sp]
	lsl	r0, r1, #0x18
	ldr	r2, [sp, #0x4]
	lsl	r1, r2, #0x18
	ldr	r2, [sp, #0x8]
	asr	r2, r2, #0x18
	mov	ip, r2
	mov	r5, #0x1f
	asr	r7, r0, #0x18
	asr	r6, r1, #0x18
.L196:
	mov	r0, r9
	add	r2, r0, r4
	lsl	r2, r2, #0x1
	add	r2, r2, r8
	ldr	r1, [r2]
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x1b
	add	r1, r1, ip
	and	r1, r1, r5
	ldrb	r3, [r2]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r2]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x1b
	add	r1, r1, r7
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x5
	ldrh	r3, [r2]
	ldr	r0, .L199+0x4
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, [r2]
	lsl	r1, r1, #0x11
	lsr	r1, r1, #0x1b
	add	r1, r1, r6
	and	r1, r1, r5
	lsl	r1, r1, #0x2
	ldrb	r3, [r2, #0x1]
	mov	r0, #0x7d
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bls	.L196	@cond_branch
.L192:
	ldr	r4, [sp, #0xc]
	mov	r1, sl
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	cmp	r4, #0
	bne	.L191	@cond_branch
.L190:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L200:
	.align	2, 0
.L199:
	.word	gPlttBufferFaded
	.word	-0x3e1
.Lfe22:
	.size	 TintPlttBuffer,.Lfe22-TintPlttBuffer
	.align	2, 0
	.globl	UnfadePlttBuffer
	.type	 UnfadePlttBuffer,function
	.thumb_func
UnfadePlttBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r1, r0, #0
	mov	r3, #0x0
	cmp	r1, #0
	beq	.L203	@cond_branch
	ldr	r0, .L212
	mov	r8, r0
	ldr	r0, .L212+0x4
	mov	ip, r0
.L204:
	mov	r0, #0x1
	and	r0, r0, r1
	lsr	r4, r1, #0x1
	add	r5, r3, #0
	add	r5, r5, #0x10
	cmp	r0, #0
	beq	.L205	@cond_branch
	mov	r2, #0x0
	mov	r7, r8
	mov	r6, ip
.L209:
	add	r0, r3, r2
	lsl	r0, r0, #0x1
	add	r1, r0, r7
	add	r0, r0, r6
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xf
	bls	.L209	@cond_branch
.L205:
	add	r1, r4, #0
	lsl	r0, r5, #0x10
	lsr	r3, r0, #0x10
	cmp	r1, #0
	bne	.L204	@cond_branch
.L203:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L213:
	.align	2, 0
.L212:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
.Lfe23:
	.size	 UnfadePlttBuffer,.Lfe23-UnfadePlttBuffer
	.align	2, 0
	.globl	BeginFastPaletteFade
	.type	 BeginFastPaletteFade,function
	.thumb_func
BeginFastPaletteFade:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L215
	ldrb	r2, [r3, #0xa]
	mov	r1, #0x79
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x10
	orr	r1, r1, r2
	strb	r1, [r3, #0xa]
	bl	BeginFastPaletteFadeInternal
	pop	{r0}
	bx	r0
.L216:
	.align	2, 0
.L215:
	.word	gPaletteFade
.Lfe24:
	.size	 BeginFastPaletteFade,.Lfe24-BeginFastPaletteFade
	.align	2, 0
	.type	 BeginFastPaletteFadeInternal,function
	.thumb_func
BeginFastPaletteFadeInternal:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r2, .L220
	ldrh	r0, [r2, #0x4]
	mov	r3, #0xf8
	lsl	r3, r3, #0x3
	add	r1, r3, #0
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	mov	r1, #0x3f
	and	r1, r1, r4
	ldrb	r3, [r2, #0x8]
	mov	r0, #0x40
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldrb	r0, [r2, #0x7]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x7]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	cmp	r4, #0x2
	bne	.L218	@cond_branch
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L220+0x4
	ldr	r2, .L220+0x8
	mov	r0, sp
	bl	CpuSet
.L218:
	cmp	r4, #0
	bne	.L219	@cond_branch
	mov	r0, sp
	add	r0, r0, #0x2
	ldr	r2, .L220+0xc
	add	r1, r2, #0
	strh	r1, [r0]
	ldr	r1, .L220+0x4
	ldr	r2, .L220+0x8
	bl	CpuSet
.L219:
	bl	UpdatePaletteFade
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	gPaletteFade
	.word	gPlttBufferFaded
	.word	0x1000200
	.word	0x7fff
.Lfe25:
	.size	 BeginFastPaletteFadeInternal,.Lfe25-BeginFastPaletteFadeInternal
	.align	2, 0
	.type	 UpdateFastPaletteFade,function
	.thumb_func
UpdateFastPaletteFade:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r4, .L283
	ldrb	r1, [r4, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L223	@cond_branch
	mov	r0, #0x0
	b	.L279
.L284:
	.align	2, 0
.L283:
	.word	gPaletteFade
.L223:
	bl	IsSoftwarePaletteFadeFinishing
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L224	@cond_branch
	ldrb	r0, [r4, #0x7]
	b	.L281
.L224:
	ldrb	r1, [r4, #0xa]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L225	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	mov	sl, r0
	b	.L226
.L225:
	mov	r2, #0x0
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	mov	sl, r1
.L226:
	ldr	r1, .L285
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	cmp	r0, #0x1
	beq	.L237	@cond_branch
	cmp	r0, #0x1
	bgt	.L266	@cond_branch
	cmp	r0, #0
	beq	.L228	@cond_branch
	b	.L227
.L286:
	.align	2, 0
.L285:
	.word	gPaletteFade
.L266:
	cmp	r0, #0x2
	bne	.LCB2274
	b	.L246	@long jump
.LCB2274:
	cmp	r0, #0x3
	bne	.LCB2276
	b	.L255	@long jump
.LCB2276:
	b	.L227
.L228:
	add	r7, r2, #0
	cmp	r7, sl
	bcc	.LCB2284
	b	.L227	@long jump
.LCB2284:
.L232:
	lsl	r2, r7, #0x1
	ldr	r0, .L287
	add	r0, r2, r0
	ldr	r1, [r0]
	lsl	r3, r1, #0x1b
	lsl	r0, r1, #0x16
	lsr	r0, r0, #0x1b
	mov	ip, r0
	lsl	r1, r1, #0x11
	lsr	r1, r1, #0x1b
	mov	r8, r1
	ldr	r0, .L287+0x4
	add	r2, r2, r0
	mov	r9, r2
	ldr	r1, [r2]
	lsl	r2, r1, #0x1b
	lsr	r2, r2, #0x3
	mov	r4, #0xfe
	lsl	r4, r4, #0x18
	add	r2, r2, r4
	lsl	r0, r1, #0x16
	lsr	r0, r0, #0x1b
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x11
	lsr	r1, r1, #0x1b
	sub	r1, r1, #0x2
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	lsr	r6, r2, #0x18
	asr	r2, r2, #0x18
	lsr	r3, r3, #0x3
	asr	r0, r3, #0x18
	cmp	r2, r0
	bge	.L233	@cond_branch
	lsr	r6, r3, #0x18
.L233:
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	mov	r2, ip
	lsl	r1, r2, #0x18
	cmp	r0, ip
	bge	.L234	@cond_branch
	lsr	r5, r1, #0x18
.L234:
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	mov	r3, r8
	lsl	r1, r3, #0x18
	cmp	r0, r8
	bge	.L235	@cond_branch
	lsr	r4, r1, #0x18
.L235:
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x13
	orr	r1, r1, r0
	lsl	r0, r4, #0x18
	asr	r0, r0, #0xe
	orr	r1, r1, r0
	mov	r4, r9
	strh	r1, [r4]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, sl
	bcc	.L232	@cond_branch
	b	.L227
.L288:
	.align	2, 0
.L287:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.L237:
	add	r7, r2, #0
	cmp	r7, sl
	bcc	.LCB2389
	b	.L227	@long jump
.LCB2389:
.L241:
	lsl	r1, r7, #0x1
	ldr	r0, .L289
	add	r2, r1, r0
	ldr	r1, [r2]
	lsl	r0, r1, #0x1b
	lsr	r0, r0, #0x3
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	add	r0, r0, r3
	lsr	r6, r0, #0x18
	lsl	r0, r1, #0x16
	lsr	r0, r0, #0x1b
	add	r5, r0, #0x2
	lsl	r1, r1, #0x11
	lsr	r1, r1, #0x1b
	add	r4, r1, #0x2
	cmp	r6, #0x1f
	ble	.L242	@cond_branch
	mov	r6, #0x1f
.L242:
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x1f
	ble	.L243	@cond_branch
	mov	r5, #0x1f
.L243:
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x1f
	ble	.L244	@cond_branch
	mov	r4, #0x1f
.L244:
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x13
	orr	r1, r1, r0
	lsl	r0, r4, #0x18
	asr	r0, r0, #0xe
	orr	r1, r1, r0
	strh	r1, [r2]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, sl
	bcc	.L241	@cond_branch
	b	.L227
.L290:
	.align	2, 0
.L289:
	.word	gPlttBufferFaded
.L246:
	add	r7, r2, #0
	cmp	r7, sl
	bcs	.L227	@cond_branch
.L250:
	lsl	r2, r7, #0x1
	ldr	r0, .L291
	add	r0, r2, r0
	ldr	r1, [r0]
	lsl	r3, r1, #0x1b
	lsl	r0, r1, #0x16
	lsr	r0, r0, #0x1b
	mov	ip, r0
	lsl	r1, r1, #0x11
	lsr	r1, r1, #0x1b
	mov	r8, r1
	ldr	r0, .L291+0x4
	add	r2, r2, r0
	ldr	r1, [r2]
	lsl	r0, r1, #0x1b
	lsr	r0, r0, #0x3
	mov	r4, #0x80
	lsl	r4, r4, #0x12
	add	r0, r0, r4
	lsr	r6, r0, #0x18
	lsl	r0, r1, #0x16
	lsr	r0, r0, #0x1b
	add	r5, r0, #0x2
	lsl	r1, r1, #0x11
	lsr	r1, r1, #0x1b
	add	r4, r1, #0x2
	lsr	r3, r3, #0x3
	asr	r0, r3, #0x18
	cmp	r6, r0
	ble	.L251	@cond_branch
	lsr	r6, r3, #0x18
.L251:
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	mov	r3, ip
	lsl	r1, r3, #0x18
	cmp	r0, ip
	ble	.L252	@cond_branch
	lsr	r5, r1, #0x18
.L252:
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	mov	r3, r8
	lsl	r1, r3, #0x18
	cmp	r0, r8
	ble	.L253	@cond_branch
	lsr	r4, r1, #0x18
.L253:
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x13
	orr	r1, r1, r0
	lsl	r0, r4, #0x18
	asr	r0, r0, #0xe
	orr	r1, r1, r0
	strh	r1, [r2]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, sl
	bcc	.L250	@cond_branch
	b	.L227
.L292:
	.align	2, 0
.L291:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.L255:
	add	r7, r2, #0
	cmp	r7, sl
	bcs	.L227	@cond_branch
	ldr	r4, .L293
	mov	r8, r4
.L259:
	lsl	r0, r7, #0x1
	mov	r1, r8
	add	r3, r0, r1
	ldr	r1, [r3]
	lsl	r2, r1, #0x1b
	lsr	r2, r2, #0x3
	mov	r4, #0xfe
	lsl	r4, r4, #0x18
	add	r2, r2, r4
	lsl	r0, r1, #0x16
	lsr	r0, r0, #0x1b
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x11
	lsr	r1, r1, #0x1b
	sub	r1, r1, #0x2
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	lsr	r6, r2, #0x18
	cmp	r2, #0
	bge	.L260	@cond_branch
	mov	r6, #0x0
.L260:
	lsl	r0, r5, #0x18
	cmp	r0, #0
	bge	.L261	@cond_branch
	mov	r5, #0x0
.L261:
	lsl	r0, r4, #0x18
	cmp	r0, #0
	bge	.L262	@cond_branch
	mov	r4, #0x0
.L262:
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x13
	orr	r1, r1, r0
	lsl	r0, r4, #0x18
	asr	r0, r0, #0xe
	orr	r1, r1, r0
	strh	r1, [r3]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, sl
	bcc	.L259	@cond_branch
.L227:
	ldr	r0, .L293+0x4
	ldrb	r2, [r0, #0xa]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r3, #0x5
	neg	r3, r3
	and	r3, r3, r2
	orr	r3, r3, r1
	ldr	r1, .L293+0x4
	strb	r3, [r1, #0xa]
	mov	r0, #0x4
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L267	@cond_branch
	ldrb	r0, [r1, #0x7]
	b	.L281
.L294:
	.align	2, 0
.L293:
	.word	gPlttBufferFaded
	.word	gPaletteFade
.L267:
	ldr	r2, .L295
	ldrh	r4, [r2, #0x4]
	lsl	r5, r4, #0x15
	lsr	r0, r5, #0x1b
	lsl	r2, r3, #0x19
	lsr	r1, r2, #0x1c
	sub	r0, r0, r1
	cmp	r0, #0
	bge	.L268	@cond_branch
	ldr	r0, .L295+0x4
	and	r0, r0, r4
	ldr	r3, .L295
	strh	r0, [r3, #0x4]
	b	.L269
.L296:
	.align	2, 0
.L295:
	.word	gPaletteFade
	.word	-0x7c1
.L268:
	lsr	r1, r5, #0x1b
	lsr	r0, r2, #0x1c
	sub	r1, r1, r0
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x6
	ldr	r0, .L297
	and	r0, r0, r4
	orr	r0, r0, r1
	ldr	r4, .L297+0x4
	strh	r0, [r4, #0x4]
.L269:
	ldr	r1, .L297+0x4
	ldrh	r0, [r1, #0x4]
	mov	r1, #0xf8
	lsl	r1, r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L270	@cond_branch
	ldr	r2, .L297+0x4
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	cmp	r0, #0x1
	beq	.L274	@cond_branch
	cmp	r0, #0x1
	bgt	.L278	@cond_branch
	cmp	r0, #0
	beq	.L273	@cond_branch
	b	.L271
.L298:
	.align	2, 0
.L297:
	.word	-0x7c1
	.word	gPaletteFade
.L278:
	cmp	r0, #0x2
	beq	.L273	@cond_branch
	cmp	r0, #0x3
	beq	.L275	@cond_branch
	b	.L271
.L273:
	ldr	r0, .L299
	ldr	r1, .L299+0x4
	ldr	r2, .L299+0x8
	bl	CpuSet
	b	.L271
.L300:
	.align	2, 0
.L299:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000100
.L274:
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp]
	ldr	r1, .L301
	ldr	r2, .L301+0x4
	mov	r0, sp
	bl	CpuSet
	b	.L271
.L302:
	.align	2, 0
.L301:
	.word	gPlttBufferFaded
	.word	0x5000100
.L275:
	str	r1, [sp, #0x4]
	add	r0, sp, #0x4
	ldr	r1, .L303
	ldr	r2, .L303+0x4
	bl	CpuSet
.L271:
	ldr	r2, .L303+0x8
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldrb	r0, [r2, #0xa]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0xa]
.L270:
	ldr	r3, .L303+0x8
	ldrb	r0, [r3, #0x7]
.L281:
	lsr	r0, r0, #0x7
.L279:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L304:
	.align	2, 0
.L303:
	.word	gPlttBufferFaded
	.word	0x5000100
	.word	gPaletteFade
.Lfe26:
	.size	 UpdateFastPaletteFade,.Lfe26-UpdateFastPaletteFade
	.align	2, 0
	.globl	BeginHardwarePaletteFade
	.type	 BeginHardwarePaletteFade,function
	.thumb_func
BeginHardwarePaletteFade:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, [sp, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r7, .L309
	str	r0, [r7]
	mov	r0, #0x3f
	and	r1, r1, r0
	ldrb	r4, [r7, #0x4]
	mov	r6, #0x40
	neg	r6, r6
	add	r0, r6, #0
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r7, #0x4]
	ldrb	r0, [r7, #0x8]
	and	r6, r6, r0
	orr	r6, r6, r1
	strb	r6, [r7, #0x8]
	mov	r0, #0x1f
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x6
	ldrh	r4, [r7, #0x4]
	ldr	r0, .L309+0x4
	and	r0, r0, r4
	orr	r0, r0, r1
	strh	r0, [r7, #0x4]
	lsl	r4, r3, #0x3
	ldrb	r1, [r7, #0x5]
	mov	r0, #0x7
	and	r0, r0, r1
	orr	r0, r0, r4
	strb	r0, [r7, #0x5]
	ldrb	r0, [r7, #0x7]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r7, #0x7]
	ldrb	r1, [r7, #0x9]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	mov	r1, #0x1
	and	r5, r5, r1
	lsl	r5, r5, #0x2
	sub	r1, r1, #0x6
	and	r0, r0, r1
	orr	r0, r0, r5
	sub	r1, r1, #0x4
	and	r0, r0, r1
	strb	r0, [r7, #0x9]
	cmp	r2, r3
	bcs	.L306	@cond_branch
	mov	r0, #0x41
	neg	r0, r0
	and	r6, r6, r0
	b	.L308
.L310:
	.align	2, 0
.L309:
	.word	gPaletteFade
	.word	-0x7c1
.L306:
	mov	r0, #0x40
	orr	r6, r6, r0
.L308:
	strb	r6, [r7, #0x8]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 BeginHardwarePaletteFade,.Lfe27-BeginHardwarePaletteFade
	.align	2, 0
	.type	 UpdateHardwarePaletteFade,function
	.thumb_func
UpdateHardwarePaletteFade:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L322
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	add	r4, r2, #0
	cmp	r0, #0
	bne	.L312	@cond_branch
	mov	r0, #0x0
	b	.L320
.L323:
	.align	2, 0
.L322:
	.word	gPaletteFade
.L312:
	ldrb	r2, [r4, #0x4]
	lsl	r1, r2, #0x1a
	ldrb	r3, [r4, #0x8]
	lsl	r0, r3, #0x1a
	cmp	r1, r0
	bcs	.L313	@cond_branch
	lsr	r0, r1, #0x1a
	add	r0, r0, #0x1
	mov	r1, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x4]
	mov	r0, #0x2
	b	.L320
.L313:
	mov	r0, #0x40
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r4, #0x4]
	mov	r0, #0x40
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L314	@cond_branch
	ldrh	r1, [r4, #0x4]
	lsl	r0, r1, #0x15
	lsr	r0, r0, #0x1b
	add	r0, r0, #0x1
	mov	r7, #0x1f
	and	r0, r0, r7
	lsl	r0, r0, #0x6
	ldr	r6, .L324
	add	r3, r6, #0
	and	r3, r3, r1
	orr	r3, r3, r0
	strh	r3, [r4, #0x4]
	lsl	r5, r3, #0x15
	ldrb	r0, [r4, #0x5]
	lsr	r1, r5, #0x1b
	lsr	r0, r0, #0x3
	cmp	r1, r0
	bls	.L316	@cond_branch
	ldrb	r2, [r4, #0x9]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1f
	add	r1, r1, #0x1
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x9]
	lsr	r0, r5, #0x1b
	sub	r0, r0, #0x1
	and	r0, r0, r7
	lsl	r0, r0, #0x6
	and	r3, r3, r6
	b	.L321
.L325:
	.align	2, 0
.L324:
	.word	-0x7c1
.L314:
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x15
	lsr	r0, r1, #0x1b
	sub	r0, r0, #0x1
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x6
	ldr	r5, .L326
	add	r3, r5, #0
	and	r3, r3, r2
	orr	r3, r3, r0
	strh	r3, [r4, #0x4]
	lsr	r1, r1, #0x1b
	sub	r1, r1, #0x1
	ldrb	r0, [r4, #0x5]
	lsr	r0, r0, #0x3
	cmp	r1, r0
	bge	.L316	@cond_branch
	ldrb	r2, [r4, #0x9]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1f
	add	r1, r1, #0x1
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x9]
	lsl	r0, r3, #0x15
	lsr	r0, r0, #0x1b
	add	r0, r0, #0x1
	and	r0, r0, r6
	lsl	r0, r0, #0x6
	and	r3, r3, r5
.L321:
	orr	r3, r3, r0
	strh	r3, [r4, #0x4]
.L316:
	ldrb	r1, [r4, #0x9]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L318	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L319	@cond_branch
	mov	r0, #0x0
	str	r0, [r4]
	ldrh	r1, [r4, #0x4]
	ldr	r0, .L326
	and	r0, r0, r1
	strh	r0, [r4, #0x4]
.L319:
	ldrb	r1, [r4, #0x9]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4, #0x9]
.L318:
	ldrb	r0, [r4, #0x7]
	lsr	r0, r0, #0x7
.L320:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L327:
	.align	2, 0
.L326:
	.word	-0x7c1
.Lfe28:
	.size	 UpdateHardwarePaletteFade,.Lfe28-UpdateHardwarePaletteFade
	.align	2, 0
	.type	 UpdateBlendRegisters,function
	.thumb_func
UpdateBlendRegisters:
	push	{r4, lr}
	ldr	r4, .L330
	ldrh	r1, [r4]
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x1b
	mov	r0, #0x54
	bl	SetGpuReg
	ldrb	r1, [r4, #0x9]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L329	@cond_branch
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r4, #0x9]
	mov	r0, #0x0
	str	r0, [r4]
	ldrh	r1, [r4, #0x4]
	ldr	r0, .L330+0x4
	and	r0, r0, r1
	strh	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x7]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r4, #0x7]
.L329:
	pop	{r4}
	pop	{r0}
	bx	r0
.L331:
	.align	2, 0
.L330:
	.word	gPaletteFade
	.word	-0x7c1
.Lfe29:
	.size	 UpdateBlendRegisters,.Lfe29-UpdateBlendRegisters
	.align	2, 0
	.type	 IsSoftwarePaletteFadeFinishing,function
	.thumb_func
IsSoftwarePaletteFadeFinishing:
	push	{r4, lr}
	ldr	r3, .L338
	ldrb	r4, [r3, #0xa]
	mov	r0, #0x2
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L333	@cond_branch
	ldr	r2, [r3, #0x8]
	mov	r0, #0xf8
	lsl	r0, r0, #0x9
	and	r0, r0, r2
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	cmp	r0, r1
	bne	.L334	@cond_branch
	ldrb	r1, [r3, #0x7]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r3, #0x7]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r4
	strb	r0, [r3, #0xa]
	ldr	r0, [r3, #0x8]
	ldr	r1, .L338+0x4
	and	r0, r0, r1
	str	r0, [r3, #0x8]
	b	.L335
.L339:
	.align	2, 0
.L338:
	.word	gPaletteFade
	.word	-0x1f001
.L334:
	lsl	r0, r2, #0xf
	lsr	r0, r0, #0x1b
	add	r0, r0, #0x1
	mov	r1, #0x1f
	and	r0, r0, r1
	lsl	r0, r0, #0xc
	ldr	r1, .L340
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [r3, #0x8]
.L335:
	mov	r0, #0x1
	b	.L337
.L341:
	.align	2, 0
.L340:
	.word	-0x1f001
.L333:
	mov	r0, #0x0
.L337:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 IsSoftwarePaletteFadeFinishing,.Lfe30-IsSoftwarePaletteFadeFinishing
	.align	2, 0
	.globl	BlendPalettes
	.type	 BlendPalettes,function
	.thumb_func
BlendPalettes:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	mov	r5, #0x0
	cmp	r4, #0
	beq	.L344	@cond_branch
.L346:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L347	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x10
	add	r2, r7, #0
	add	r3, r6, #0
	bl	BlendPalette
.L347:
	lsr	r4, r4, #0x1
	add	r0, r5, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r4, #0
	bne	.L346	@cond_branch
.L344:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 BlendPalettes,.Lfe31-BlendPalettes
	.align	2, 0
	.globl	BlendPalettesUnfaded
	.type	 BlendPalettesUnfaded,function
	.thumb_func
BlendPalettesUnfaded:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L350
	ldr	r1, .L350+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	CpuFastSet
	add	r0, r6, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	BlendPalettes
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L351:
	.align	2, 0
.L350:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.Lfe32:
	.size	 BlendPalettesUnfaded,.Lfe32-BlendPalettesUnfaded
	.align	2, 0
	.globl	TintPalette_GrayScale
	.type	 TintPalette_GrayScale,function
	.thumb_func
TintPalette_GrayScale:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0
	beq	.L354	@cond_branch
	mov	r6, #0x1f
	add	r5, r1, #0
.L356:
	ldrh	r1, [r4]
	mov	r2, #0x1f
	and	r2, r2, r1
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x15
	and	r3, r3, r6
	lsr	r1, r1, #0x1a
	and	r1, r1, r6
	mov	r0, #0x4c
	mul	r2, r2, r0
	mov	r0, #0x97
	mul	r0, r0, r3
	add	r2, r2, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r2, r2, r0
	asr	r2, r2, #0x8
	lsl	r0, r2, #0xa
	lsl	r1, r2, #0x5
	orr	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r4]
	add	r4, r4, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L356	@cond_branch
.L354:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 TintPalette_GrayScale,.Lfe33-TintPalette_GrayScale
	.align	2, 0
	.globl	TintPalette_GrayScale2
	.type	 TintPalette_GrayScale2,function
	.thumb_func
TintPalette_GrayScale2:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0
	beq	.L360	@cond_branch
	mov	r6, #0x1f
	ldr	r7, .L365
	add	r5, r1, #0
.L362:
	ldrh	r1, [r4]
	mov	r2, #0x1f
	and	r2, r2, r1
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x15
	and	r3, r3, r6
	lsr	r1, r1, #0x1a
	and	r1, r1, r6
	mov	r0, #0x4c
	mul	r2, r2, r0
	mov	r0, #0x97
	mul	r0, r0, r3
	add	r2, r2, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r2, r2, r0
	asr	r2, r2, #0x8
	cmp	r2, #0x1f
	bls	.L363	@cond_branch
	mov	r2, #0x1f
.L363:
	add	r0, r2, r7
	ldrb	r2, [r0]
	lsl	r0, r2, #0xa
	lsl	r1, r2, #0x5
	orr	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r4]
	add	r4, r4, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L362	@cond_branch
.L360:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L366:
	.align	2, 0
.L365:
	.word	sRoundedDownGrayscaleMap
.Lfe34:
	.size	 TintPalette_GrayScale2,.Lfe34-TintPalette_GrayScale2
	.align	2, 0
	.globl	TintPalette_SepiaTone
	.type	 TintPalette_SepiaTone,function
	.thumb_func
TintPalette_SepiaTone:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0
	beq	.L369	@cond_branch
	mov	r7, #0x1f
	add	r6, r1, #0
.L371:
	ldrh	r0, [r5]
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x15
	and	r2, r2, r7
	lsr	r3, r0, #0x1a
	and	r3, r3, r7
	mov	r0, #0x4c
	mul	r1, r1, r0
	mov	r0, #0x97
	mul	r0, r0, r2
	add	r1, r1, r0
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r1, r1, r0
	asr	r1, r1, #0x8
	ldr	r0, .L374
	mul	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x18
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x14
	lsr	r3, r0, #0x18
	cmp	r2, #0x1f
	ble	.L372	@cond_branch
	mov	r2, #0x1f
.L372:
	lsl	r0, r3, #0xa
	lsl	r1, r4, #0x5
	orr	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r5]
	add	r5, r5, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bne	.L371	@cond_branch
.L369:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	0x133
.Lfe35:
	.size	 TintPalette_SepiaTone,.Lfe35-TintPalette_SepiaTone
	.align	2, 0
	.globl	TintPalette_CustomTone
	.type	 TintPalette_CustomTone,function
	.thumb_func
TintPalette_CustomTone:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r0, #0
	ldr	r0, [sp, #0x1c]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r9, r2
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r8, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	ip, r0
	cmp	r1, #0
	beq	.L378	@cond_branch
	mov	r7, #0x1f
	add	r6, r1, #0
.L380:
	ldrh	r0, [r5]
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x15
	and	r2, r2, r7
	lsr	r3, r0, #0x1a
	and	r3, r3, r7
	mov	r0, #0x4c
	mul	r1, r1, r0
	mov	r0, #0x97
	mul	r0, r0, r2
	add	r1, r1, r0
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r1, r1, r0
	asr	r1, r1, #0x8
	mov	r0, r9
	mul	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x18
	mov	r0, r8
	mul	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x18
	mov	r0, ip
	mul	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x18
	cmp	r4, #0x1f
	ble	.L381	@cond_branch
	mov	r4, #0x1f
.L381:
	cmp	r2, #0x1f
	ble	.L382	@cond_branch
	mov	r2, #0x1f
.L382:
	cmp	r3, #0x1f
	ble	.L383	@cond_branch
	mov	r3, #0x1f
.L383:
	lsl	r0, r3, #0xa
	lsl	r1, r2, #0x5
	orr	r0, r0, r1
	orr	r0, r0, r4
	strh	r0, [r5]
	add	r5, r5, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bne	.L380	@cond_branch
.L378:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 TintPalette_CustomTone,.Lfe36-TintPalette_CustomTone
	.align	2, 0
	.globl	CopyPaletteInvertedTint
	.type	 CopyPaletteInvertedTint,function
	.thumb_func
CopyPaletteInvertedTint:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	add	r6, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	ip, r3
	cmp	r3, #0
	bne	.L386	@cond_branch
	cmp	r2, #0
	beq	.L392	@cond_branch
	add	r5, r2, #0
.L390:
	mov	r1, r9
	ldrh	r0, [r1]
	strh	r0, [r6]
	mov	r7, #0x2
	add	r9, r9, r7
	add	r6, r6, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L390	@cond_branch
	b	.L392
.L386:
	cmp	r2, #0
	beq	.L392	@cond_branch
	mov	r0, #0x1f
	mov	r8, r0
	add	r5, r2, #0
.L396:
	mov	r7, r9
	ldrh	r1, [r7]
	mov	r4, #0x1f
	and	r4, r4, r1
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x15
	mov	r0, r8
	and	r3, r3, r0
	lsr	r1, r1, #0x1a
	and	r1, r1, r0
	mov	r0, #0x4c
	mov	r2, r4
	mul	r2, r2, r0
	mov	r0, #0x97
	mul	r0, r0, r3
	add	r2, r2, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r2, r2, r0
	asr	r2, r2, #0x8
	sub	r0, r2, r4
	mov	r7, ip
	mul	r7, r7, r0
	add	r0, r7, #0
	lsr	r0, r0, #0x4
	add	r4, r4, r0
	sub	r0, r2, r3
	mov	r7, ip
	mul	r7, r7, r0
	add	r0, r7, #0
	lsr	r0, r0, #0x4
	add	r3, r3, r0
	sub	r2, r2, r1
	mov	r0, ip
	mul	r0, r0, r2
	lsr	r0, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0xa
	lsl	r3, r3, #0x5
	orr	r1, r1, r3
	orr	r1, r1, r4
	strh	r1, [r6]
	mov	r0, #0x2
	add	r9, r9, r0
	add	r6, r6, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L396	@cond_branch
.L392:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 CopyPaletteInvertedTint,.Lfe37-CopyPaletteInvertedTint
	.align	2, 0
	.globl	BlendPalettesGradually
	.type	 BlendPalettesGradually,function
	.thumb_func
BlendPalettesGradually:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	add	r4, r1, #0
	ldr	r0, [sp, #0x20]
	ldr	r1, [sp, #0x24]
	ldr	r5, [sp, #0x28]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r8, r5
	ldr	r0, .L403
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L403+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	strh	r7, [r1, #0x8]
	strh	r6, [r1, #0xa]
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	cmp	r4, #0
	blt	.L399	@cond_branch
	strh	r4, [r1, #0xe]
	mov	r0, #0x1
	b	.L402
.L404:
	.align	2, 0
.L403:
	.word	Task_BlendPalettesGradually
	.word	gTasks
.L399:
	mov	r0, #0x0
	strh	r0, [r1, #0xe]
	neg	r0, r4
	add	r0, r0, #0x1
.L402:
	strh	r0, [r1, #0xc]
	lsl	r4, r5, #0x2
	cmp	r6, r7
	bcs	.L401	@cond_branch
	ldr	r0, .L405
	add	r1, r4, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0xc
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0xc]
.L401:
	add	r0, r5, #0
	mov	r1, #0x5
	mov	r2, sl
	bl	SetWordTaskArg
	ldr	r0, .L405
	add	r1, r4, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, r9
	strh	r0, [r1, #0x16]
	mov	r2, r8
	strh	r2, [r1, #0x18]
	ldr	r1, [r1]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L406:
	.align	2, 0
.L405:
	.word	gTasks
.Lfe38:
	.size	 BlendPalettesGradually,.Lfe38-BlendPalettesGradually
	.align	2, 0
	.globl	IsBlendPalettesGraduallyTaskActive
	.type	 IsBlendPalettesGraduallyTaskActive,function
	.thumb_func
IsBlendPalettesGraduallyTaskActive:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r2, #0x0
	ldr	r4, .L415
	ldr	r1, .L415+0x4
.L411:
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0x1
	bne	.L410	@cond_branch
	ldr	r0, [r1]
	cmp	r0, r4
	bne	.L410	@cond_branch
	mov	r5, #0x18
	ldrsh	r0, [r1, r5]
	cmp	r0, r3
	bne	.L410	@cond_branch
	mov	r0, #0x1
	b	.L414
.L416:
	.align	2, 0
.L415:
	.word	Task_BlendPalettesGradually
	.word	gTasks
.L410:
	add	r1, r1, #0x28
	add	r2, r2, #0x1
	cmp	r2, #0xf
	ble	.L411	@cond_branch
	mov	r0, #0x0
.L414:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 IsBlendPalettesGraduallyTaskActive,.Lfe39-IsBlendPalettesGraduallyTaskActive
	.align	2, 0
	.globl	DestroyBlendPalettesGraduallyTask
	.type	 DestroyBlendPalettesGraduallyTask,function
	.thumb_func
DestroyBlendPalettesGraduallyTask:
	push	{lr}
	b	.L420
.L421:
	bl	DestroyTask
.L420:
	ldr	r0, .L423
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L421	@cond_branch
	pop	{r0}
	bx	r0
.L424:
	.align	2, 0
.L423:
	.word	Task_BlendPalettesGradually
.Lfe40:
	.size	 DestroyBlendPalettesGraduallyTask,.Lfe40-DestroyBlendPalettesGraduallyTask
	.align	2, 0
	.type	 Task_BlendPalettesGradually,function
	.thumb_func
Task_BlendPalettesGradually:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L433
	add	r4, r0, r1
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetWordTaskArg
	add	r3, r0, #0
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x6
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	ble	.L425	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrb	r1, [r4]
	ldrh	r2, [r4, #0xe]
	add	r0, r3, #0
	bl	BlendPalettes
	ldrh	r1, [r4]
	mov	r6, #0x0
	ldrsh	r0, [r4, r6]
	ldrh	r3, [r4, #0x2]
	mov	r6, #0x2
	ldrsh	r2, [r4, r6]
	cmp	r0, r2
	bne	.L427	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	b	.L425
.L434:
	.align	2, 0
.L433:
	.word	gTasks+0x8
.L427:
	ldrh	r0, [r4, #0x4]
	add	r1, r1, r0
	strh	r1, [r4]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L429	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r2
	blt	.L425	@cond_branch
	b	.L431
.L429:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r2
	bgt	.L425	@cond_branch
.L431:
	strh	r3, [r4]
.L425:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 Task_BlendPalettesGradually,.Lfe41-Task_BlendPalettesGradually
.text
	.align	2, 0 @ Don't pad with nop

