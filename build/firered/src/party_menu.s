@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sPartyMenuInternal,object
	.size	 sPartyMenuInternal,4
sPartyMenuInternal:
	.word	0x0
	.globl	gPartyMenu
	.align	2, 0
	.type	 gPartyMenu,object
	.size	 gPartyMenu,20
gPartyMenu:
	.word	0x0
	.space	16
	.align	2, 0
	.type	 sPartyMenuBoxes,object
	.size	 sPartyMenuBoxes,4
sPartyMenuBoxes:
	.word	0x0
	.align	2, 0
	.type	 sPartyBgGfxTilemap,object
	.size	 sPartyBgGfxTilemap,4
sPartyBgGfxTilemap:
	.word	0x0
	.align	2, 0
	.type	 sPartyBgTilemapBuffer,object
	.size	 sPartyBgTilemapBuffer,4
sPartyBgTilemapBuffer:
	.word	0x0
	.globl	gPartyMenuUseExitCallback
	.type	 gPartyMenuUseExitCallback,object
	.size	 gPartyMenuUseExitCallback,1
gPartyMenuUseExitCallback:
	.byte	0x0
	.globl	gSelectedMonPartyId
	.type	 gSelectedMonPartyId,object
	.size	 gSelectedMonPartyId,1
gSelectedMonPartyId:
	.byte	0x0
	.globl	gPostMenuFieldCallback
	.align	2, 0
	.type	 gPostMenuFieldCallback,object
	.size	 gPostMenuFieldCallback,4
gPostMenuFieldCallback:
	.word	0x0
	.align	2, 0
	.type	 sSlot1TilemapBuffer,object
	.size	 sSlot1TilemapBuffer,4
sSlot1TilemapBuffer:
	.word	0x0
	.align	2, 0
	.type	 sSlot2TilemapBuffer,object
	.size	 sSlot2TilemapBuffer,4
sSlot2TilemapBuffer:
	.word	0x0
	.align	2, 0
	.type	 sSacredAshQuestLogMonBackup,object
	.size	 sSacredAshQuestLogMonBackup,4
sSacredAshQuestLogMonBackup:
	.word	0x0
	.globl	gSelectedOrderFromParty
	.type	 gSelectedOrderFromParty,object
	.size	 gSelectedOrderFromParty,3
gSelectedOrderFromParty:
	.byte	0x0
	.space	2
	.align	1, 0
	.type	 sPartyMenuItemId,object
	.size	 sPartyMenuItemId,2
sPartyMenuItemId:
	.short	0x0
	.globl	gBattlePartyCurrentOrder
	.align	2, 0
	.type	 gBattlePartyCurrentOrder,object
	.size	 gBattlePartyCurrentOrder,3
gBattlePartyCurrentOrder:
	.byte	0x0
	.space	2
	.section .rodata
	.align	1, 0
	.type	 sTutorMoves,object
	.size	 sTutorMoves,30
sTutorMoves:
	.short	0x5
	.short	0xe
	.short	0x19
	.short	0x22
	.short	0x26
	.short	0x44
	.short	0x45
	.short	0x66
	.short	0x76
	.short	0x87
	.short	0x8a
	.short	0x56
	.short	0x99
	.short	0x9d
	.short	0xa4
	.align	1, 0
	.type	 sTutorLearnsets,object
sTutorLearnsets:
	.short	0x0
	.short	0x409a
	.short	0x409a
	.short	0x409a
	.short	0x60ff
	.short	0x60ff
	.short	0x60ff
	.short	0x40fd
	.short	0x40fd
	.short	0x40fd
	.short	0x0
	.short	0x0
	.short	0x4490
	.short	0x0
	.short	0x0
	.short	0x4092
	.short	0x4090
	.short	0x4090
	.short	0x4090
	.short	0x48b8
	.short	0x48b8
	.short	0x4090
	.short	0x4090
	.short	0x6098
	.short	0x6098
	.short	0x48fd
	.short	0x48fd
	.short	0x60fa
	.short	0x60fa
	.short	0x40b8
	.short	0x40b8
	.short	0x60fd
	.short	0x40b8
	.short	0x40b8
	.short	0x60fd
	.short	0x4ffd
	.short	0x4ffd
	.short	0x4098
	.short	0x4098
	.short	0x4cfd
	.short	0x4cfd
	.short	0x4090
	.short	0x4090
	.short	0x4092
	.short	0x4092
	.short	0x409a
	.short	0x40ba
	.short	0x40ba
	.short	0x4090
	.short	0x4090
	.short	0x6098
	.short	0x6098
	.short	0x4498
	.short	0x4498
	.short	0x40fd
	.short	0x40fd
	.short	0x61fd
	.short	0x61fd
	.short	0x4098
	.short	0x4098
	.short	0x4098
	.short	0x41fd
	.short	0x41fd
	.short	0x4dfd
	.short	0x4dfd
	.short	0x4dfd
	.short	0x61fd
	.short	0x61fd
	.short	0x61fd
	.short	0x4092
	.short	0x4092
	.short	0x409a
	.short	0x4092
	.short	0x4092
	.short	0x71f9
	.short	0x71f9
	.short	0x71fd
	.short	0x4098
	.short	0x4098
	.short	0x4c98
	.short	0x4cfd
	.short	0x4890
	.short	0x4890
	.short	0x409a
	.short	0x4098
	.short	0x4098
	.short	0x4098
	.short	0x4098
	.short	0x5088
	.short	0x5088
	.short	0x5090
	.short	0x5090
	.short	0x5480
	.short	0x5480
	.short	0x55fd
	.short	0x7098
	.short	0x4dfd
	.short	0x4dfd
	.short	0x409a
	.short	0x409a
	.short	0x5880
	.short	0x5880
	.short	0x5490
	.short	0x5490
	.short	0x60ff
	.short	0x60ff
	.short	0x61fd
	.short	0x61fd
	.short	0x64ff
	.short	0x5080
	.short	0x5080
	.short	0x60ba
	.short	0x60ff
	.short	0x4ffd
	.short	0x409a
	.short	0x60fd
	.short	0x4090
	.short	0x4090
	.short	0x4090
	.short	0x4090
	.short	0x4890
	.short	0x4c90
	.short	0x4dfd
	.short	0x40b2
	.short	0x45fd
	.short	0x48fd
	.short	0x40fd
	.short	0x60da
	.short	0x4098
	.short	0x0
	.short	0x4898
	.short	0x4498
	.short	0x0
	.short	0x4098
	.short	0x4098
	.short	0x4898
	.short	0x4098
	.short	0x4c90
	.short	0x6098
	.short	0x60d8
	.short	0x6098
	.short	0x60de
	.short	0x6090
	.short	0x61fd
	.short	0x4090
	.short	0x4890
	.short	0x4090
	.short	0x4898
	.short	0x4898
	.short	0x4898
	.short	0x4dfd
	.short	0x7fff
	.short	0x40ba
	.short	0x40ba
	.short	0x40ba
	.short	0x4098
	.short	0x4098
	.short	0x60fd
	.short	0x60ff
	.short	0x60ff
	.short	0x60ff
	.short	0x4098
	.short	0x4098
	.short	0x4490
	.short	0x4490
	.short	0x4093
	.short	0x4093
	.short	0x4098
	.short	0x4098
	.short	0x4090
	.short	0x4890
	.short	0x4890
	.short	0x48fd
	.short	0x4ffd
	.short	0x4cfd
	.short	0x4ffd
	.short	0x4ffd
	.short	0x4c90
	.short	0x4c90
	.short	0x4898
	.short	0x48fd
	.short	0x48fd
	.short	0x4092
	.short	0x40dd
	.short	0x40dd
	.short	0x70fd
	.short	0x41fd
	.short	0x4092
	.short	0x4092
	.short	0x4092
	.short	0x4dfd
	.short	0x4092
	.short	0x4092
	.short	0x4490
	.short	0x4098
	.short	0x40fd
	.short	0x4498
	.short	0x4498
	.short	0x4c90
	.short	0x4cfd
	.short	0x4c90
	.short	0x0
	.short	0x0
	.short	0x4c98
	.short	0x70b8
	.short	0x70b8
	.short	0x6cb8
	.short	0x64b2
	.short	0x7098
	.short	0x49fd
	.short	0x69fd
	.short	0x4892
	.short	0x40b2
	.short	0x6098
	.short	0x60fa
	.short	0x44b2
	.short	0x41ff
	.short	0x61ff
	.short	0x6098
	.short	0x6098
	.short	0x6098
	.short	0x6098
	.short	0x7098
	.short	0x4890
	.short	0x48d0
	.short	0x40fd
	.short	0x4098
	.short	0x60b0
	.short	0x44b8
	.short	0x44b8
	.short	0x4098
	.short	0x40b8
	.short	0x60b8
	.short	0x4c90
	.short	0x4c98
	.short	0x0
	.short	0x60fc
	.short	0x60fc
	.short	0x45fd
	.short	0x48fd
	.short	0x40fd
	.short	0x69fd
	.short	0x4ffd
	.short	0x4898
	.short	0x4098
	.short	0x4098
	.short	0x6098
	.short	0x6098
	.short	0x68fd
	.short	0x4c98
	.short	0x4c90
	.short	0x4592
	.space	50
	.short	0x40ff
	.short	0x40ff
	.short	0x40ff
	.short	0x60ff
	.short	0x60ff
	.short	0x60ff
	.short	0x4098
	.short	0x60fd
	.short	0x60fd
	.short	0x40b8
	.short	0x40b8
	.short	0x4898
	.short	0x4898
	.short	0x0
	.short	0x0
	.short	0x4090
	.short	0x0
	.short	0x4090
	.short	0x409a
	.short	0x409a
	.short	0x41ff
	.short	0x509a
	.short	0x509e
	.short	0x509e
	.short	0x4090
	.short	0x4092
	.short	0x4490
	.short	0x40b0
	.short	0x40b0
	.short	0x409a
	.short	0x40ff
	.short	0x65fd
	.short	0x4090
	.short	0x4090
	.short	0x4090
	.short	0x4090
	.short	0x4098
	.short	0x4098
	.short	0x4c98
	.short	0x4c98
	.short	0x69fd
	.short	0x7490
	.short	0x7490
	.short	0x7898
	.short	0x7098
	.short	0x45fd
	.short	0x4090
	.short	0x6090
	.short	0x4090
	.short	0x40ba
	.short	0x40ba
	.short	0x4090
	.short	0x4098
	.short	0x4090
	.short	0x4090
	.short	0x6098
	.short	0x6098
	.short	0x6098
	.short	0x61fd
	.short	0x61fd
	.short	0x4898
	.short	0x4898
	.short	0x6098
	.short	0x7098
	.short	0x6098
	.short	0x6098
	.short	0x6098
	.short	0x40fb
	.short	0x40ff
	.short	0x4098
	.short	0x5098
	.short	0x7498
	.short	0x7498
	.short	0x4098
	.short	0x4498
	.short	0x44fd
	.short	0x49fd
	.short	0x49fd
	.short	0x60ff
	.short	0x45fd
	.short	0x65fd
	.short	0x4498
	.short	0x4498
	.short	0x0
	.short	0x4498
	.short	0x65fd
	.short	0x409a
	.short	0x60fd
	.short	0x60fd
	.short	0x60fd
	.short	0x54b8
	.short	0x54b8
	.short	0x409a
	.short	0x40fd
	.short	0x60fd
	.short	0x60fd
	.short	0x4098
	.short	0x4098
	.short	0x4098
	.short	0x6cba
	.short	0x4c98
	.short	0x4d98
	.short	0x4098
	.short	0x68ff
	.short	0x6098
	.short	0x6098
	.short	0x6098
	.short	0x68fd
	.short	0x4898
	.short	0x49fd
	.short	0x49fd
	.short	0x6098
	.short	0x6098
	.short	0x609a
	.short	0x60da
	.short	0x4c98
	.short	0x4c98
	.short	0x4c98
	.short	0x6098
	.short	0x6098
	.short	0x6098
	.short	0x0
	.short	0x7098
	.short	0x7098
	.short	0x78fd
	.short	0x78fd
	.short	0x78fd
	.short	0x6898
	.short	0x68ff
	.short	0x6898
	.short	0x4c98
	.short	0x4c98
	.short	0x4d98
	.short	0x6cfd
	.short	0x4490
	.size	 sTutorLearnsets,824
	.align	2, 0
	.type	 sPartyMenuBgTemplates,object
	.size	 sPartyMenuBgTemplates,12
sPartyMenuBgTemplates:
	.byte	0xf0
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xe1
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xc2
	.byte	0x3
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sPartyBoxInfoRects,object
sPartyBoxInfoRects:
	.word	BlitBitmapToPartyWindow_LeftColumn
	.byte	0x18
	.byte	0xb
	.byte	0x28
	.byte	0xd
	.byte	0x20
	.byte	0x14
	.byte	0x20
	.byte	0x8
	.byte	0x40
	.byte	0x14
	.byte	0x8
	.byte	0x8
	.byte	0x26
	.byte	0x24
	.byte	0x18
	.byte	0x8
	.byte	0x35
	.byte	0x24
	.byte	0x18
	.byte	0x8
	.byte	0x18
	.byte	0x23
	.byte	0x30
	.byte	0x3
	.byte	0xc
	.byte	0x22
	.byte	0x40
	.byte	0x10
	.word	BlitBitmapToPartyWindow_RightColumn
	.byte	0x16
	.byte	0x3
	.byte	0x28
	.byte	0xd
	.byte	0x20
	.byte	0xc
	.byte	0x20
	.byte	0x8
	.byte	0x40
	.byte	0xc
	.byte	0x8
	.byte	0x8
	.byte	0x66
	.byte	0xc
	.byte	0x18
	.byte	0x8
	.byte	0x75
	.byte	0xc
	.byte	0x18
	.byte	0x8
	.byte	0x58
	.byte	0xa
	.byte	0x30
	.byte	0x3
	.byte	0x4d
	.byte	0x4
	.byte	0x40
	.byte	0x10
	.size	 sPartyBoxInfoRects,64
	.type	 sPartyMenuSpriteCoords,object
	.size	 sPartyMenuSpriteCoords,192
sPartyMenuSpriteCoords:
	.byte	0x10
	.byte	0x28
	.byte	0x14
	.byte	0x32
	.byte	0x38
	.byte	0x34
	.byte	0x10
	.byte	0x22
	.byte	0x68
	.byte	0x12
	.byte	0x6c
	.byte	0x1c
	.byte	0x90
	.byte	0x1b
	.byte	0x66
	.byte	0x19
	.byte	0x68
	.byte	0x2a
	.byte	0x6c
	.byte	0x34
	.byte	0x90
	.byte	0x33
	.byte	0x66
	.byte	0x31
	.byte	0x68
	.byte	0x42
	.byte	0x6c
	.byte	0x4c
	.byte	0x90
	.byte	0x4b
	.byte	0x66
	.byte	0x49
	.byte	0x68
	.byte	0x5a
	.byte	0x6c
	.byte	0x64
	.byte	0x90
	.byte	0x63
	.byte	0x66
	.byte	0x61
	.byte	0x68
	.byte	0x72
	.byte	0x6c
	.byte	0x7c
	.byte	0x90
	.byte	0x7b
	.byte	0x66
	.byte	0x79
	.byte	0x10
	.byte	0x18
	.byte	0x14
	.byte	0x22
	.byte	0x38
	.byte	0x24
	.byte	0x10
	.byte	0x12
	.byte	0x10
	.byte	0x50
	.byte	0x14
	.byte	0x5a
	.byte	0x38
	.byte	0x5c
	.byte	0x10
	.byte	0x4a
	.byte	0x68
	.byte	0x12
	.byte	0x6c
	.byte	0x1c
	.byte	0x90
	.byte	0x1b
	.byte	0x66
	.byte	0x19
	.byte	0x68
	.byte	0x32
	.byte	0x6c
	.byte	0x3c
	.byte	0x90
	.byte	0x3b
	.byte	0x66
	.byte	0x39
	.byte	0x68
	.byte	0x52
	.byte	0x6c
	.byte	0x5c
	.byte	0x90
	.byte	0x5b
	.byte	0x66
	.byte	0x59
	.byte	0x68
	.byte	0x72
	.byte	0x6c
	.byte	0x7c
	.byte	0x90
	.byte	0x7b
	.byte	0x66
	.byte	0x79
	.byte	0x10
	.byte	0x18
	.byte	0x14
	.byte	0x22
	.byte	0x38
	.byte	0x24
	.byte	0x10
	.byte	0x12
	.byte	0x10
	.byte	0x50
	.byte	0x14
	.byte	0x5a
	.byte	0x38
	.byte	0x5c
	.byte	0x10
	.byte	0x4a
	.byte	0x68
	.byte	0x1a
	.byte	0x6a
	.byte	0x24
	.byte	0x90
	.byte	0x23
	.byte	0x66
	.byte	0x21
	.byte	0x68
	.byte	0x32
	.byte	0x6a
	.byte	0x3c
	.byte	0x90
	.byte	0x3b
	.byte	0x66
	.byte	0x39
	.byte	0x68
	.byte	0x52
	.byte	0x6a
	.byte	0x5c
	.byte	0x90
	.byte	0x5b
	.byte	0x66
	.byte	0x59
	.byte	0x68
	.byte	0x6a
	.byte	0x6a
	.byte	0x74
	.byte	0x90
	.byte	0x73
	.byte	0x66
	.byte	0x71
	.byte	0x10
	.byte	0x20
	.byte	0x14
	.byte	0x2a
	.byte	0x38
	.byte	0x2c
	.byte	0x10
	.byte	0x1a
	.byte	0x68
	.byte	0x22
	.byte	0x6a
	.byte	0x2c
	.byte	0x90
	.byte	0x2b
	.byte	0x66
	.byte	0x29
	.byte	0x68
	.byte	0x3a
	.byte	0x6a
	.byte	0x44
	.byte	0x90
	.byte	0x43
	.byte	0x66
	.byte	0x41
	.byte	0x10
	.byte	0x68
	.byte	0x14
	.byte	0x72
	.byte	0x38
	.byte	0x74
	.byte	0x10
	.byte	0x62
	.byte	0x68
	.byte	0x6a
	.byte	0x6a
	.byte	0x74
	.byte	0x90
	.byte	0x73
	.byte	0x66
	.byte	0x71
	.byte	0x68
	.byte	0x82
	.byte	0x6a
	.byte	0x8c
	.byte	0x90
	.byte	0x8b
	.byte	0x66
	.byte	0x89
	.align	2, 0
	.type	 sConfirmButton_Tilemap,object
sConfirmButton_Tilemap:
	.word	0x101c101b
	.word	0x101c101c
	.word	0x101c101c
	.word	0x1023101d
	.word	0x181c181c
	.word	0x181c181c
	.word	0x1024181c
	.size	 sConfirmButton_Tilemap,28
	.align	2, 0
	.type	 sCancelButton_Tilemap,object
sCancelButton_Tilemap:
	.word	0x100b100a
	.word	0x100b100b
	.word	0x100b100b
	.word	0x1012100c
	.word	0x180b180b
	.word	0x180b180b
	.word	0x1013180b
	.size	 sCancelButton_Tilemap,28
	.type	 sFontColorTable,object
sFontColorTable:
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x6
	.byte	0x0
	.byte	0xb
	.byte	0xc
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x1
	.byte	0x8
	.byte	0x9
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.size	 sFontColorTable,18
	.align	2, 0
	.type	 sSinglePartyMenuWindowTemplate,object
sSinglePartyMenuWindowTemplate:
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x7
	.byte	0x3
	.short	0x63
	.byte	0x0
	.byte	0xc
	.byte	0x1
	.byte	0x12
	.byte	0x3
	.byte	0x4
	.short	0xa9
	.byte	0x0
	.byte	0xc
	.byte	0x4
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.short	0xdf
	.byte	0x0
	.byte	0xc
	.byte	0x7
	.byte	0x12
	.byte	0x3
	.byte	0x6
	.short	0x115
	.byte	0x0
	.byte	0xc
	.byte	0xa
	.byte	0x12
	.byte	0x3
	.byte	0x7
	.short	0x14b
	.byte	0x0
	.byte	0xc
	.byte	0xd
	.byte	0x12
	.byte	0x3
	.byte	0x8
	.short	0x181
	.byte	0x2
	.byte	0x1
	.byte	0xf
	.byte	0x1c
	.byte	0x4
	.byte	0xe
	.short	0x1df
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sSinglePartyMenuWindowTemplate,64
	.align	2, 0
	.type	 sDoublePartyMenuWindowTemplate,object
sDoublePartyMenuWindowTemplate:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0xa
	.byte	0x7
	.byte	0x3
	.short	0x63
	.byte	0x0
	.byte	0x1
	.byte	0x8
	.byte	0xa
	.byte	0x7
	.byte	0x4
	.short	0xa9
	.byte	0x0
	.byte	0xc
	.byte	0x1
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.short	0xef
	.byte	0x0
	.byte	0xc
	.byte	0x5
	.byte	0x12
	.byte	0x3
	.byte	0x6
	.short	0x125
	.byte	0x0
	.byte	0xc
	.byte	0x9
	.byte	0x12
	.byte	0x3
	.byte	0x7
	.short	0x15b
	.byte	0x0
	.byte	0xc
	.byte	0xd
	.byte	0x12
	.byte	0x3
	.byte	0x8
	.short	0x191
	.byte	0x2
	.byte	0x1
	.byte	0xf
	.byte	0x1c
	.byte	0x4
	.byte	0xe
	.short	0x1df
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sDoublePartyMenuWindowTemplate,64
	.align	2, 0
	.type	 sMultiPartyMenuWindowTemplate,object
sMultiPartyMenuWindowTemplate:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0xa
	.byte	0x7
	.byte	0x3
	.short	0x63
	.byte	0x0
	.byte	0x1
	.byte	0x8
	.byte	0xa
	.byte	0x7
	.byte	0x4
	.short	0xa9
	.byte	0x0
	.byte	0xc
	.byte	0x2
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.short	0xef
	.byte	0x0
	.byte	0xc
	.byte	0x5
	.byte	0x12
	.byte	0x3
	.byte	0x6
	.short	0x125
	.byte	0x0
	.byte	0xc
	.byte	0x9
	.byte	0x12
	.byte	0x3
	.byte	0x7
	.short	0x15b
	.byte	0x0
	.byte	0xc
	.byte	0xc
	.byte	0x12
	.byte	0x3
	.byte	0x8
	.short	0x191
	.byte	0x2
	.byte	0x1
	.byte	0xf
	.byte	0x1c
	.byte	0x4
	.byte	0xe
	.short	0x1df
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sMultiPartyMenuWindowTemplate,64
	.align	2, 0
	.type	 sShowcaseMultiPartyMenuWindowTemplate,object
sShowcaseMultiPartyMenuWindowTemplate:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0xa
	.byte	0x7
	.byte	0x3
	.short	0x63
	.byte	0x0
	.byte	0xc
	.byte	0x3
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.short	0xa9
	.byte	0x0
	.byte	0xc
	.byte	0x6
	.byte	0x12
	.byte	0x3
	.byte	0x6
	.short	0xdf
	.byte	0x2
	.byte	0x1
	.byte	0xb
	.byte	0xa
	.byte	0x7
	.byte	0x4
	.short	0x115
	.byte	0x2
	.byte	0xc
	.byte	0xc
	.byte	0x12
	.byte	0x3
	.byte	0x7
	.short	0x16b
	.byte	0x2
	.byte	0xc
	.byte	0xf
	.byte	0x12
	.byte	0x3
	.byte	0x8
	.short	0x1a1
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sShowcaseMultiPartyMenuWindowTemplate,56
	.align	2, 0
	.type	 sCancelButtonWindowTemplate,object
	.size	 sCancelButtonWindowTemplate,8
sCancelButtonWindowTemplate:
	.byte	0x0
	.byte	0x18
	.byte	0x11
	.byte	0x6
	.byte	0x2
	.byte	0x3
	.short	0x1c7
	.align	2, 0
	.type	 sMultiCancelButtonWindowTemplate,object
	.size	 sMultiCancelButtonWindowTemplate,8
sMultiCancelButtonWindowTemplate:
	.byte	0x0
	.byte	0x18
	.byte	0x12
	.byte	0x6
	.byte	0x2
	.byte	0x3
	.short	0x1c7
	.align	2, 0
	.type	 sConfirmButtonWindowTemplate,object
	.size	 sConfirmButtonWindowTemplate,8
sConfirmButtonWindowTemplate:
	.byte	0x0
	.byte	0x18
	.byte	0x10
	.byte	0x6
	.byte	0x2
	.byte	0x3
	.short	0x1d3
	.align	2, 0
	.type	 sDefaultPartyMsgWindowTemplate,object
	.size	 sDefaultPartyMsgWindowTemplate,8
sDefaultPartyMsgWindowTemplate:
	.byte	0x2
	.byte	0x1
	.byte	0x11
	.byte	0x15
	.byte	0x2
	.byte	0xf
	.short	0x24f
	.align	2, 0
	.type	 sDoWhatWithMonMsgWindowTemplate,object
	.size	 sDoWhatWithMonMsgWindowTemplate,8
sDoWhatWithMonMsgWindowTemplate:
	.byte	0x2
	.byte	0x1
	.byte	0x11
	.byte	0x10
	.byte	0x2
	.byte	0xf
	.short	0x279
	.align	2, 0
	.type	 sDoWhatWithItemMsgWindowTemplate,object
	.size	 sDoWhatWithItemMsgWindowTemplate,8
sDoWhatWithItemMsgWindowTemplate:
	.byte	0x2
	.byte	0x1
	.byte	0x11
	.byte	0x13
	.byte	0x2
	.byte	0xf
	.short	0x299
	.align	2, 0
	.type	 sDoWhatWithMailMsgWindowTemplate,object
	.size	 sDoWhatWithMailMsgWindowTemplate,8
sDoWhatWithMailMsgWindowTemplate:
	.byte	0x2
	.byte	0x1
	.byte	0x11
	.byte	0x10
	.byte	0x2
	.byte	0xf
	.short	0x299
	.align	2, 0
	.type	 sWhichMoveMsgWindowTemplate,object
	.size	 sWhichMoveMsgWindowTemplate,8
sWhichMoveMsgWindowTemplate:
	.byte	0x2
	.byte	0x1
	.byte	0x11
	.byte	0xf
	.byte	0x2
	.byte	0xf
	.short	0x299
	.align	2, 0
	.type	 sItemGiveTakeWindowTemplate,object
	.size	 sItemGiveTakeWindowTemplate,8
sItemGiveTakeWindowTemplate:
	.byte	0x2
	.byte	0x16
	.byte	0xd
	.byte	0x7
	.byte	0x6
	.byte	0xe
	.short	0x373
	.align	2, 0
	.type	 sMailReadTakeWindowTemplate,object
	.size	 sMailReadTakeWindowTemplate,8
sMailReadTakeWindowTemplate:
	.byte	0x2
	.byte	0x13
	.byte	0xd
	.byte	0xa
	.byte	0x6
	.byte	0xe
	.short	0x373
	.align	2, 0
	.type	 sMoveSelectWindowTemplate,object
	.size	 sMoveSelectWindowTemplate,8
sMoveSelectWindowTemplate:
	.byte	0x2
	.byte	0x12
	.byte	0xb
	.byte	0xb
	.byte	0x8
	.byte	0xe
	.short	0x2bf
	.align	2, 0
	.type	 sPartyMenuYesNoWindowTemplate,object
	.size	 sPartyMenuYesNoWindowTemplate,8
sPartyMenuYesNoWindowTemplate:
	.byte	0x2
	.byte	0x15
	.byte	0x9
	.byte	0x6
	.byte	0x4
	.byte	0xe
	.short	0x2bf
	.align	2, 0
	.type	 sLevelUpStatsWindowTemplate,object
	.size	 sLevelUpStatsWindowTemplate,8
sLevelUpStatsWindowTemplate:
	.byte	0x2
	.byte	0x13
	.byte	0x1
	.byte	0xa
	.byte	0xb
	.byte	0xe
	.short	0x2bf
	.align	2, 0
	.type	 sWindowTemplate_FirstBattleOakVoiceover,object
	.size	 sWindowTemplate_FirstBattleOakVoiceover,8
sWindowTemplate_FirstBattleOakVoiceover:
	.byte	0x2
	.byte	0x2
	.byte	0xf
	.byte	0x1a
	.byte	0x4
	.byte	0xe
	.short	0x1df
	.align	2, 0
	.type	 sFieldMoveDescriptionWindowTemplate,object
	.size	 sFieldMoveDescriptionWindowTemplate,8
sFieldMoveDescriptionWindowTemplate:
	.byte	0x2
	.byte	0x0
	.byte	0xd
	.byte	0x12
	.byte	0x3
	.byte	0xc
	.short	0x373
	.type	 sSlotTilemap_Main,object
sSlotTilemap_Main:
	.byte	0x18
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x1a
	.byte	0x20
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x22
	.byte	0x20
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x22
	.byte	0x20
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x22
	.byte	0x28
	.byte	0x3b
	.byte	0x3c
	.byte	0x3a
	.byte	0x3a
	.byte	0x3a
	.byte	0x3a
	.byte	0x3a
	.byte	0x3a
	.byte	0x3d
	.byte	0xf
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x11
	.byte	0x2e
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x30
	.size	 sSlotTilemap_Main,70
	.type	 sSlotTilemap_MainNoHP,object
sSlotTilemap_MainNoHP:
	.byte	0x18
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x1a
	.byte	0x20
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x22
	.byte	0x20
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x22
	.byte	0x20
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x22
	.byte	0x28
	.byte	0x29
	.byte	0x29
	.byte	0x29
	.byte	0x29
	.byte	0x29
	.byte	0x29
	.byte	0x29
	.byte	0x29
	.byte	0x2a
	.byte	0xf
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x11
	.byte	0x2e
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x2f
	.byte	0x30
	.size	 sSlotTilemap_MainNoHP,70
	.type	 sSlotTilemap_Wide,object
sSlotTilemap_Wide:
	.byte	0x2b
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2d
	.byte	0x31
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x34
	.byte	0x35
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x36
	.byte	0x37
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x39
	.size	 sSlotTilemap_Wide,54
	.type	 sSlotTilemap_WideNoHP,object
sSlotTilemap_WideNoHP:
	.byte	0x2b
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2c
	.byte	0x2d
	.byte	0x31
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x32
	.byte	0x37
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x38
	.byte	0x39
	.size	 sSlotTilemap_WideNoHP,54
	.type	 sSlotTilemap_WideEmpty,object
sSlotTilemap_WideEmpty:
	.byte	0x15
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x17
	.byte	0x1e
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1f
	.byte	0x25
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x26
	.byte	0x27
	.size	 sSlotTilemap_WideEmpty,54
	.type	 sGenderPalOffsets,object
sGenderPalOffsets:
	.byte	0xb
	.byte	0xc
	.size	 sGenderPalOffsets,2
	.type	 sHPBarPalOffsets,object
sHPBarPalOffsets:
	.byte	0x9
	.byte	0xa
	.size	 sHPBarPalOffsets,2
	.type	 sPartyBoxPalOffsets1,object
sPartyBoxPalOffsets1:
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.size	 sPartyBoxPalOffsets1,3
	.type	 sPartyBoxPalOffsets2,object
sPartyBoxPalOffsets2:
	.byte	0x1
	.byte	0x7
	.byte	0x8
	.size	 sPartyBoxPalOffsets2,3
	.type	 sGenderMalePalIds,object
sGenderMalePalIds:
	.byte	0x3b
	.byte	0x3c
	.size	 sGenderMalePalIds,2
	.type	 sGenderFemalePalIds,object
sGenderFemalePalIds:
	.byte	0x4b
	.byte	0x4c
	.size	 sGenderFemalePalIds,2
	.type	 sHPBarGreenPalIds,object
sHPBarGreenPalIds:
	.byte	0x39
	.byte	0x3a
	.size	 sHPBarGreenPalIds,2
	.type	 sHPBarYellowPalIds,object
sHPBarYellowPalIds:
	.byte	0x49
	.byte	0x4a
	.size	 sHPBarYellowPalIds,2
	.type	 sHPBarRedPalIds,object
sHPBarRedPalIds:
	.byte	0x59
	.byte	0x5a
	.size	 sHPBarRedPalIds,2
	.type	 sPartyBoxEmptySlotPalIds1,object
sPartyBoxEmptySlotPalIds1:
	.byte	0x34
	.byte	0x35
	.byte	0x36
	.size	 sPartyBoxEmptySlotPalIds1,3
	.type	 sPartyBoxMultiPalIds1,object
sPartyBoxMultiPalIds1:
	.byte	0x44
	.byte	0x45
	.byte	0x46
	.size	 sPartyBoxMultiPalIds1,3
	.type	 sPartyBoxFaintedPalIds1,object
sPartyBoxFaintedPalIds1:
	.byte	0x54
	.byte	0x55
	.byte	0x56
	.size	 sPartyBoxFaintedPalIds1,3
	.type	 sPartyBoxCurrSelectionPalIds1,object
sPartyBoxCurrSelectionPalIds1:
	.byte	0x74
	.byte	0x75
	.byte	0x76
	.size	 sPartyBoxCurrSelectionPalIds1,3
	.type	 sPartyBoxCurrSelectionMultiPalIds,object
sPartyBoxCurrSelectionMultiPalIds:
	.byte	0x84
	.byte	0x85
	.byte	0x86
	.size	 sPartyBoxCurrSelectionMultiPalIds,3
	.type	 sPartyBoxCurrSelectionFaintedPalIds,object
sPartyBoxCurrSelectionFaintedPalIds:
	.byte	0x94
	.byte	0x95
	.byte	0x96
	.size	 sPartyBoxCurrSelectionFaintedPalIds,3
	.type	 sPartyBoxSelectedForActionPalIds1,object
sPartyBoxSelectedForActionPalIds1:
	.byte	0x64
	.byte	0x65
	.byte	0x66
	.size	 sPartyBoxSelectedForActionPalIds1,3
	.type	 sPartyBoxEmptySlotPalIds2,object
sPartyBoxEmptySlotPalIds2:
	.byte	0x31
	.byte	0x37
	.byte	0x38
	.size	 sPartyBoxEmptySlotPalIds2,3
	.type	 sPartyBoxMultiPalIds2,object
sPartyBoxMultiPalIds2:
	.byte	0x41
	.byte	0x47
	.byte	0x48
	.size	 sPartyBoxMultiPalIds2,3
	.type	 sPartyBoxFaintedPalIds2,object
sPartyBoxFaintedPalIds2:
	.byte	0x51
	.byte	0x57
	.byte	0x58
	.size	 sPartyBoxFaintedPalIds2,3
	.type	 sPartyBoxCurrSelectionPalIds2,object
sPartyBoxCurrSelectionPalIds2:
	.byte	0x61
	.byte	0x67
	.byte	0x68
	.size	 sPartyBoxCurrSelectionPalIds2,3
	.type	 sPartyBoxSelectedForActionPalIds2,object
sPartyBoxSelectedForActionPalIds2:
	.byte	0xa1
	.byte	0xa7
	.byte	0xa8
	.size	 sPartyBoxSelectedForActionPalIds2,3
	.align	2, 0
	.type	 sActionStringTable,object
sActionStringTable:
	.word	gText_ChoosePokemon
	.word	gText_ChoosePokemonCancel
	.word	gText_ChoosePokemonConfirm
	.word	gText_MoveToWhere
	.word	gText_TeachWhichPokemon
	.word	gText_UseOnWhichPokemon
	.word	gText_GiveToWhichPokemon
	.word	gText_NothingToCut
	.word	gText_CantSurfHere
	.word	gText_AlreadySurfing
	.word	gText_CurrentIsTooFast
	.word	gText_EnjoyCycling
	.word	gText_InUseAlready_PM
	.word	gText_CantUseHere
	.word	gText_NoPokemonForBattle
	.word	gText_ChoosePokemon2
	.word	gText_NotEnoughHp
	.word	gText_ThreePkmnAreNeeded
	.word	gText_TwoPokemonAreNeeded
	.word	gText_PokemonCantBeSame
	.word	gText_NoIdenticalHoldItems
	.word	gString_Dummy
	.word	gText_DoWhatWithPokemon
	.word	gText_RestoreWhichMove
	.word	gText_BoostPp
	.word	gText_DoWhatWithItem
	.word	gText_DoWhatWithMail
	.size	 sActionStringTable,108
	.align	2, 0
	.type	 sDescriptionStringTable,object
sDescriptionStringTable:
	.word	gText_NoUse
	.word	gText_Able
	.word	gText_First_PM
	.word	gText_Second_PM
	.word	gText_Third_PM
	.word	gText_Able2
	.word	gText_NotAble
	.word	gText_Able3
	.word	gText_NotAble2
	.word	gText_Learned
	.size	 sDescriptionStringTable,40
	.align	2, 0
	.type	 sFieldMoveDescriptionTable,object
sFieldMoveDescriptionTable:
	.word	gText_LightUpDarkness
	.word	gText_CutATreeOrGrass
	.word	gText_FlyToAKnownTown
	.word	gText_MoveHeavyBoulders
	.word	gText_TravelOnWater
	.word	gText_ShatterACrackedRock
	.word	gText_ClimbAWaterfall
	.word	gText_ReturnToAHealingSpot
	.word	gText_EscapeFromHere
	.word	gText_ShareHp
	.word	gText_ShareHp
	.word	gText_LureWildPokemon
	.size	 sFieldMoveDescriptionTable,48
	.align	2, 0
	.type	 sHeldItemGfx,object
sHeldItemGfx:
	.word	0x0
	.word	0x5444450
	.word	-0xabbbbb0
	.word	-0xabbbbb0
	.word	-0x8999990
	.word	-0x8999990
	.word	-0xabbbbb0
	.word	-0x100
	.word	0x0
	.word	0x1111110
	.word	-0xceeeed0
	.word	-0xeceecf0
	.word	-0xddccde0
	.word	-0xddddde0
	.word	-0x100
	.word	0x0
	.size	 sHeldItemGfx,64
	.align	1, 0
	.type	 sHeldItemPalette,object
sHeldItemPalette:
	.short	0x3727
	.short	0x7fff
	.short	0x7f5a
	.short	0x5a52
	.short	0x4fdf
	.short	0x3b7b
	.short	0x155e
	.short	0x2974
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x318c
	.size	 sHeldItemPalette,32
	.align	2, 0
	.type	 sOamData_HeldItem,object
	.size	 sOamData_HeldItem,8
sOamData_HeldItem:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sSpriteAnim_HeldItem,object
sSpriteAnim_HeldItem:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_HeldItem,8
	.align	2, 0
	.type	 sSpriteAnim_HeldMail,object
sSpriteAnim_HeldMail:
	.short	0x1
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_HeldMail,8
	.align	2, 0
	.type	 sSpriteAnimTable_HeldItem,object
sSpriteAnimTable_HeldItem:
	.word	sSpriteAnim_HeldItem
	.word	sSpriteAnim_HeldMail
	.size	 sSpriteAnimTable_HeldItem,8
	.align	2, 0
	.type	 sSpriteSheet_HeldItem,object
	.size	 sSpriteSheet_HeldItem,8
sSpriteSheet_HeldItem:
	.word	sHeldItemGfx
	.short	0x40
	.short	0xd750
	.align	2, 0
	.type	 sSpritePalette_HeldItem,object
	.size	 sSpritePalette_HeldItem,8
sSpritePalette_HeldItem:
	.word	sHeldItemPalette
	.short	0xd750
	.space	2
	.align	2, 0
	.type	 sSpriteTemplate_HeldItem,object
	.size	 sSpriteTemplate_HeldItem,24
sSpriteTemplate_HeldItem:
	.short	0xd750
	.short	0xd750
	.word	sOamData_HeldItem
	.word	sSpriteAnimTable_HeldItem
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sOamData_MenuPokeball,object
	.size	 sOamData_MenuPokeball,8
sOamData_MenuPokeball:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sPokeballAnim_Closed,object
sPokeballAnim_Closed:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sPokeballAnim_Closed,8
	.align	2, 0
	.type	 sPokeballAnim_Open,object
sPokeballAnim_Open:
	.short	0x10
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sPokeballAnim_Open,8
	.align	2, 0
	.type	 sSpriteAnimTable_MenuPokeball,object
sSpriteAnimTable_MenuPokeball:
	.word	sPokeballAnim_Closed
	.word	sPokeballAnim_Open
	.size	 sSpriteAnimTable_MenuPokeball,8
	.align	2, 0
	.type	 sSpriteSheet_MenuPokeball,object
	.size	 sSpriteSheet_MenuPokeball,8
sSpriteSheet_MenuPokeball:
	.word	gPartyMenuPokeball_Gfx
	.short	0x400
	.short	0x4b0
	.align	2, 0
	.type	 sSpritePalette_MenuPokeball,object
	.size	 sSpritePalette_MenuPokeball,8
sSpritePalette_MenuPokeball:
	.word	gPartyMenuPokeball_Pal
	.short	0x4b0
	.space	2
	.align	2, 0
	.type	 sSpriteTemplate_MenuPokeball,object
	.size	 sSpriteTemplate_MenuPokeball,24
sSpriteTemplate_MenuPokeball:
	.short	0x4b0
	.short	0x4b0
	.word	sOamData_MenuPokeball
	.word	sSpriteAnimTable_MenuPokeball
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sOamData_MenuPokeballSmall,object
	.size	 sOamData_MenuPokeballSmall,8
sOamData_MenuPokeballSmall:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sSmallPokeballAnim_Closed,object
sSmallPokeballAnim_Closed:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSmallPokeballAnim_Closed,8
	.align	2, 0
	.type	 sSmallPokeballAnim_Open,object
sSmallPokeballAnim_Open:
	.short	0x4
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSmallPokeballAnim_Open,8
	.align	2, 0
	.type	 sSmallPokeballAnim_Blank1,object
sSmallPokeballAnim_Blank1:
	.short	0x8
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSmallPokeballAnim_Blank1,8
	.align	2, 0
	.type	 sSmallPokeballAnim_Blank2,object
sSmallPokeballAnim_Blank2:
	.short	0xc
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSmallPokeballAnim_Blank2,8
	.align	2, 0
	.type	 sSmallPokeballAnim_Blank3,object
sSmallPokeballAnim_Blank3:
	.short	0x10
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSmallPokeballAnim_Blank3,8
	.align	2, 0
	.type	 sSmallPokeballAnim_Blank4,object
sSmallPokeballAnim_Blank4:
	.short	0x14
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSmallPokeballAnim_Blank4,8
	.align	2, 0
	.type	 sSpriteAnimTable_MenuPokeballSmall,object
sSpriteAnimTable_MenuPokeballSmall:
	.word	sSmallPokeballAnim_Closed
	.word	sSmallPokeballAnim_Open
	.word	sSmallPokeballAnim_Blank1
	.word	sSmallPokeballAnim_Blank2
	.word	sSmallPokeballAnim_Blank3
	.word	sSmallPokeballAnim_Blank4
	.size	 sSpriteAnimTable_MenuPokeballSmall,24
	.align	2, 0
	.type	 sSpriteSheet_MenuPokeballSmall,object
	.size	 sSpriteSheet_MenuPokeballSmall,8
sSpriteSheet_MenuPokeballSmall:
	.word	gPartyMenuPokeballSmall_Gfx
	.short	0x300
	.short	0x4b1
	.align	2, 0
	.type	 sSpriteTemplate_MenuPokeballSmall,object
	.size	 sSpriteTemplate_MenuPokeballSmall,24
sSpriteTemplate_MenuPokeballSmall:
	.short	0x4b1
	.short	0x4b0
	.word	sOamData_MenuPokeballSmall
	.word	sSpriteAnimTable_MenuPokeballSmall
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sOamData_StatusCondition,object
	.size	 sOamData_StatusCondition,8
sOamData_StatusCondition:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sSpriteAnim_StatusPoison,object
sSpriteAnim_StatusPoison:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_StatusPoison,8
	.align	2, 0
	.type	 sSpriteAnim_StatusParalyzed,object
sSpriteAnim_StatusParalyzed:
	.short	0x4
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_StatusParalyzed,8
	.align	2, 0
	.type	 sSpriteAnim_StatusSleep,object
sSpriteAnim_StatusSleep:
	.short	0x8
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_StatusSleep,8
	.align	2, 0
	.type	 sSpriteAnim_StatusFrozen,object
sSpriteAnim_StatusFrozen:
	.short	0xc
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_StatusFrozen,8
	.align	2, 0
	.type	 sSpriteAnim_StatusBurn,object
sSpriteAnim_StatusBurn:
	.short	0x10
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_StatusBurn,8
	.align	2, 0
	.type	 sSpriteAnim_StatusPokerus,object
sSpriteAnim_StatusPokerus:
	.short	0x14
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_StatusPokerus,8
	.align	2, 0
	.type	 sSpriteAnim_StatusFaint,object
sSpriteAnim_StatusFaint:
	.short	0x18
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_StatusFaint,8
	.align	2, 0
	.type	 sSpriteAnim_Blank,object
sSpriteAnim_Blank:
	.short	0x1c
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_Blank,8
	.align	2, 0
	.type	 sSpriteTemplate_StatusCondition,object
sSpriteTemplate_StatusCondition:
	.word	sSpriteAnim_StatusPoison
	.word	sSpriteAnim_StatusParalyzed
	.word	sSpriteAnim_StatusSleep
	.word	sSpriteAnim_StatusFrozen
	.word	sSpriteAnim_StatusBurn
	.word	sSpriteAnim_StatusPokerus
	.word	sSpriteAnim_StatusFaint
	.word	sSpriteAnim_Blank
	.size	 sSpriteTemplate_StatusCondition,32
	.align	2, 0
	.type	 sSpriteSheet_StatusIcons,object
	.size	 sSpriteSheet_StatusIcons,8
sSpriteSheet_StatusIcons:
	.word	gStatusGfx_Icons
	.short	0x400
	.short	0x4b2
	.align	2, 0
	.type	 sSpritePalette_StatusIcons,object
	.size	 sSpritePalette_StatusIcons,8
sSpritePalette_StatusIcons:
	.word	gStatusPal_Icons
	.short	0x4b2
	.space	2
	.align	2, 0
	.type	 sSpriteTemplate_StatusIcons,object
	.size	 sSpriteTemplate_StatusIcons,24
sSpriteTemplate_StatusIcons:
	.short	0x4b2
	.short	0x4b2
	.word	sOamData_StatusCondition
	.word	sSpriteTemplate_StatusCondition
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.type	 sMultiBattlePartnersPartyMask,object
	.size	 sMultiBattlePartnersPartyMask,8
sMultiBattlePartnersPartyMask:
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.space	1
	.align	1, 0
	.type	 sTMHMMoves_Duplicate,object
sTMHMMoves_Duplicate:
	.short	0x108
	.short	0x151
	.short	0x160
	.short	0x15b
	.short	0x2e
	.short	0x5c
	.short	0x102
	.short	0x153
	.short	0x14b
	.short	0xed
	.short	0xf1
	.short	0x10d
	.short	0x3a
	.short	0x3b
	.short	0x3f
	.short	0x71
	.short	0xb6
	.short	0xf0
	.short	0xca
	.short	0xdb
	.short	0xda
	.short	0x4c
	.short	0xe7
	.short	0x55
	.short	0x57
	.short	0x59
	.short	0xd8
	.short	0x5b
	.short	0x5e
	.short	0xf7
	.short	0x118
	.short	0x68
	.short	0x73
	.short	0x15f
	.short	0x35
	.short	0xbc
	.short	0xc9
	.short	0x7e
	.short	0x13d
	.short	0x14c
	.short	0x103
	.short	0x107
	.short	0x122
	.short	0x9c
	.short	0xd5
	.short	0xa8
	.short	0xd3
	.short	0x11d
	.short	0x121
	.short	0x13b
	.short	0xf
	.short	0x13
	.short	0x39
	.short	0x46
	.short	0x94
	.short	0xf9
	.short	0x7f
	.short	0x123
	.size	 sTMHMMoves_Duplicate,116
	.align	2, 0
	.type	 sCursorOptions,object
sCursorOptions:
	.word	gText_Summary5
	.word	CursorCB_Summary
	.word	gText_Switch2
	.word	CursorCB_Switch
	.word	gFameCheckerText_Cancel
	.word	CursorCB_Cancel1
	.word	gText_Item
	.word	CursorCB_Item
	.word	gOtherText_Give
	.word	CursorCB_Give
	.word	gText_Take
	.word	CursorCB_TakeItem
	.word	gText_Mail
	.word	CursorCB_Mail
	.word	gText_Take2
	.word	CursorCB_TakeMail
	.word	gText_Read2
	.word	CursorCB_Read
	.word	gFameCheckerText_Cancel
	.word	CursorCB_Cancel2
	.word	gText_Shift
	.word	CursorCB_SendMon
	.word	gText_SendOut
	.word	CursorCB_SendMon
	.word	gText_Enter
	.word	CursorCB_Enter
	.word	gText_NoEntry
	.word	CursorCB_NoEntry
	.word	gText_Store
	.word	CursorCB_Store
	.word	gText_Register
	.word	CursorCB_Register
	.word	gText_Trade4
	.word	CursorCB_Trade1
	.word	gText_Trade4
	.word	CursorCB_Trade2
	.word	gMoveNames+0x784
	.word	CursorCB_FieldMove
	.word	gMoveNames+0xc3
	.word	CursorCB_FieldMove
	.word	gMoveNames+0xf7
	.word	CursorCB_FieldMove
	.word	gMoveNames+0x38e
	.word	CursorCB_FieldMove
	.word	gMoveNames+0x2e5
	.word	CursorCB_FieldMove
	.word	gMoveNames+0xca5
	.word	CursorCB_FieldMove
	.word	gMoveNames+0x673
	.word	CursorCB_FieldMove
	.word	gMoveNames+0x514
	.word	CursorCB_FieldMove
	.word	gMoveNames+0x49f
	.word	CursorCB_FieldMove
	.word	gMoveNames+0xa90
	.word	CursorCB_FieldMove
	.word	gMoveNames+0x6db
	.word	CursorCB_FieldMove
	.word	gMoveNames+0xbae
	.word	CursorCB_FieldMove
	.size	 sCursorOptions,240
	.type	 sPartyMenuAction_SummarySwitchCancel,object
sPartyMenuAction_SummarySwitchCancel:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.size	 sPartyMenuAction_SummarySwitchCancel,3
	.type	 sPartyMenuAction_ShiftSummaryCancel,object
sPartyMenuAction_ShiftSummaryCancel:
	.byte	0xa
	.byte	0x0
	.byte	0x2
	.size	 sPartyMenuAction_ShiftSummaryCancel,3
	.type	 sPartyMenuAction_SendOutSummaryCancel,object
sPartyMenuAction_SendOutSummaryCancel:
	.byte	0xb
	.byte	0x0
	.byte	0x2
	.size	 sPartyMenuAction_SendOutSummaryCancel,3
	.type	 sPartyMenuAction_SummaryCancel,object
sPartyMenuAction_SummaryCancel:
	.byte	0x0
	.byte	0x2
	.size	 sPartyMenuAction_SummaryCancel,2
	.type	 sPartyMenuAction_EnterSummaryCancel,object
sPartyMenuAction_EnterSummaryCancel:
	.byte	0xc
	.byte	0x0
	.byte	0x2
	.size	 sPartyMenuAction_EnterSummaryCancel,3
	.type	 sPartyMenuAction_NoEntrySummaryCancel,object
sPartyMenuAction_NoEntrySummaryCancel:
	.byte	0xd
	.byte	0x0
	.byte	0x2
	.size	 sPartyMenuAction_NoEntrySummaryCancel,3
	.type	 sPartyMenuAction_StoreSummaryCancel,object
sPartyMenuAction_StoreSummaryCancel:
	.byte	0xe
	.byte	0x0
	.byte	0x2
	.size	 sPartyMenuAction_StoreSummaryCancel,3
	.type	 sPartyMenuAction_GiveTakeItemCancel,object
sPartyMenuAction_GiveTakeItemCancel:
	.byte	0x4
	.byte	0x5
	.byte	0x9
	.size	 sPartyMenuAction_GiveTakeItemCancel,3
	.type	 sPartyMenuAction_ReadTakeMailCancel,object
sPartyMenuAction_ReadTakeMailCancel:
	.byte	0x8
	.byte	0x7
	.byte	0x9
	.size	 sPartyMenuAction_ReadTakeMailCancel,3
	.type	 sPartyMenuAction_RegisterSummaryCancel,object
sPartyMenuAction_RegisterSummaryCancel:
	.byte	0xf
	.byte	0x0
	.byte	0x2
	.size	 sPartyMenuAction_RegisterSummaryCancel,3
	.type	 sPartyMenuAction_TradeSummaryCancel1,object
sPartyMenuAction_TradeSummaryCancel1:
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.size	 sPartyMenuAction_TradeSummaryCancel1,3
	.type	 sPartyMenuAction_TradeSummaryCancel2,object
sPartyMenuAction_TradeSummaryCancel2:
	.byte	0x11
	.byte	0x0
	.byte	0x2
	.size	 sPartyMenuAction_TradeSummaryCancel2,3
	.align	2, 0
	.type	 sPartyMenuActions,object
sPartyMenuActions:
	.word	0x0
	.word	sPartyMenuAction_SummarySwitchCancel
	.word	sPartyMenuAction_ShiftSummaryCancel
	.word	sPartyMenuAction_SendOutSummaryCancel
	.word	sPartyMenuAction_EnterSummaryCancel
	.word	sPartyMenuAction_NoEntrySummaryCancel
	.word	sPartyMenuAction_StoreSummaryCancel
	.word	sPartyMenuAction_SummaryCancel
	.word	sPartyMenuAction_GiveTakeItemCancel
	.word	sPartyMenuAction_ReadTakeMailCancel
	.word	sPartyMenuAction_RegisterSummaryCancel
	.word	sPartyMenuAction_TradeSummaryCancel1
	.word	sPartyMenuAction_TradeSummaryCancel2
	.size	 sPartyMenuActions,52
	.type	 sPartyMenuActionCounts,object
sPartyMenuActionCounts:
	.byte	0x0
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.size	 sPartyMenuActionCounts,13
	.align	1, 0
	.type	 sFieldMoves,object
sFieldMoves:
	.short	0x94
	.short	0xf
	.short	0x13
	.short	0x46
	.short	0x39
	.short	0xf9
	.short	0x7f
	.short	0x64
	.short	0x5b
	.short	0xd0
	.short	0x87
	.short	0xe6
	.short	0xc
	.size	 sFieldMoves,26
	.align	2, 0
	.type	 sFieldMoveCursorCallbacks,object
sFieldMoveCursorCallbacks:
	.word	SetUpFieldMove_Flash
	.byte	0xd
	.space	3
	.word	SetUpFieldMove_Cut
	.byte	0x7
	.space	3
	.word	SetUpFieldMove_Fly
	.byte	0xd
	.space	3
	.word	SetUpFieldMove_Strength
	.byte	0xd
	.space	3
	.word	SetUpFieldMove_Surf
	.byte	0x8
	.space	3
	.word	SetUpFieldMove_RockSmash
	.byte	0xd
	.space	3
	.word	SetUpFieldMove_Waterfall
	.byte	0xd
	.space	3
	.word	SetUpFieldMove_Teleport
	.byte	0xd
	.space	3
	.word	SetUpFieldMove_Dig
	.byte	0xd
	.space	3
	.word	SetUpFieldMove_SoftBoiled
	.byte	0x10
	.space	3
	.word	SetUpFieldMove_SoftBoiled
	.byte	0x10
	.space	3
	.word	SetUpFieldMove_SweetScent
	.byte	0xd
	.space	3
	.size	 sFieldMoveCursorCallbacks,96
	.align	2, 0
	.type	 sUnionRoomTradeMessages,object
sUnionRoomTradeMessages:
	.word	gText_NotPkmnOtherTrainerWants
	.word	gText_ThatIsntAnEgg
	.word	gText_PkmnCantBeTradedNow
	.word	gText_PkmnCantBeTradedNow
	.word	gText_OtherTrainersPkmnCantBeTraded
	.word	gText_EggCantBeTradedNow
	.word	gText_OtherTrainerCantAcceptPkmn
	.word	gText_CantTradeWithTrainer
	.word	gText_CantTradeWithTrainer
	.size	 sUnionRoomTradeMessages,36
	.align	1, 0
	.type	 sTMHMMoves,object
sTMHMMoves:
	.short	0x108
	.short	0x151
	.short	0x160
	.short	0x15b
	.short	0x2e
	.short	0x5c
	.short	0x102
	.short	0x153
	.short	0x14b
	.short	0xed
	.short	0xf1
	.short	0x10d
	.short	0x3a
	.short	0x3b
	.short	0x3f
	.short	0x71
	.short	0xb6
	.short	0xf0
	.short	0xca
	.short	0xdb
	.short	0xda
	.short	0x4c
	.short	0xe7
	.short	0x55
	.short	0x57
	.short	0x59
	.short	0xd8
	.short	0x5b
	.short	0x5e
	.short	0xf7
	.short	0x118
	.short	0x68
	.short	0x73
	.short	0x15f
	.short	0x35
	.short	0xbc
	.short	0xc9
	.short	0x7e
	.short	0x13d
	.short	0x14c
	.short	0x103
	.short	0x107
	.short	0x122
	.short	0x9c
	.short	0xd5
	.short	0xa8
	.short	0xd3
	.short	0x11d
	.short	0x121
	.short	0x13b
	.short	0xf
	.short	0x13
	.short	0x39
	.short	0x46
	.short	0x94
	.short	0xf9
	.short	0x7f
	.short	0x123
	.size	 sTMHMMoves,116
.text
	.align	2, 0
	.globl	InitPartyMenu
	.type	 InitPartyMenu,function
	.thumb_func
InitPartyMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp]
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	bl	ResetPartyMenu
	ldr	r6, .L25
	mov	r0, #0x8e
	lsl	r0, r0, #0x2
	bl	Alloc
	add	r5, r0, #0
	str	r5, [r6]
	cmp	r5, #0
	bne	.L5	@cond_branch
	ldr	r0, [sp, #0x2c]
	bl	SetMainCallback2
	b	.L6
.L26:
	.align	2, 0
.L25:
	.word	sPartyMenuInternal
.L5:
	ldr	r3, .L27
	mov	r1, #0xf
	mov	r0, r9
	and	r1, r1, r0
	ldrb	r2, [r3, #0x8]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x8]
	ldr	r1, [sp, #0x2c]
	str	r1, [r3]
	mov	r4, #0x0
	mov	r0, r8
	strb	r0, [r3, #0xb]
	lsl	r2, r7, #0x2
	ldrh	r1, [r5, #0xa]
	mov	r0, #0x3
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r5, #0xa]
	ldr	r0, [sp, #0x28]
	str	r0, [r5]
	str	r4, [r5, #0x4]
	ldrb	r1, [r5, #0x8]
	mov	r0, #0xf
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r5, #0x8]
	add	r7, r3, #0
	mov	r1, r9
	cmp	r1, #0x4
	bne	.L7	@cond_branch
	ldr	r0, [r6]
	ldrb	r1, [r0, #0x8]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x8]
	b	.L8
.L28:
	.align	2, 0
.L27:
	.word	gPartyMenu
.L7:
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
.L8:
	mov	r5, sl
	cmp	r5, #0xff
	beq	.L9	@cond_branch
	mov	r0, #0x3
	and	r0, r0, r5
	lsl	r0, r0, #0x4
	ldrb	r2, [r7, #0x8]
	mov	r1, #0x31
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r7, #0x8]
.L9:
	mov	r2, #0x0
	ldr	r5, .L29
	mov	r4, #0x86
	lsl	r4, r4, #0x2
	mov	r3, #0x0
.L13:
	ldr	r0, [r5]
	lsl	r1, r2, #0x1
	add	r0, r0, r4
	add	r0, r0, r1
	strh	r3, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0xf
	bls	.L13	@cond_branch
	mov	r2, #0x0
	ldr	r4, .L29
	mov	r3, #0xff
.L18:
	ldr	r0, [r4]
	add	r0, r0, #0xc
	add	r0, r0, r2
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x2
	bls	.L18	@cond_branch
	ldr	r0, [sp]
	cmp	r0, #0
	beq	.L24	@cond_branch
	add	r1, r7, #0
	mov	r0, #0x9
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L23	@cond_branch
	add	r1, r0, #0
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L29+0x4
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	bne	.L21	@cond_branch
.L23:
	mov	r0, #0x0
.L24:
	strb	r0, [r7, #0x9]
.L21:
	ldr	r2, .L29+0x8
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	CalculatePlayerPartyCount
	ldr	r0, .L29+0xc
	bl	SetMainCallback2
.L6:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	sPartyMenuInternal
	.word	gPlayerParty
	.word	gTextFlags
	.word	CB2_InitPartyMenu
.Lfe1:
	.size	 InitPartyMenu,.Lfe1-InitPartyMenu
	.align	2, 0
	.type	 CB2_UpdatePartyMenu,function
	.thumb_func
CB2_UpdatePartyMenu:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	DoScheduledBgTilemapCopiesToVram
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 CB2_UpdatePartyMenu,.Lfe2-CB2_UpdatePartyMenu
	.align	2, 0
	.type	 VBlankCB_PartyMenu,function
	.thumb_func
VBlankCB_PartyMenu:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 VBlankCB_PartyMenu,.Lfe3-VBlankCB_PartyMenu
	.align	2, 0
	.type	 CB2_InitPartyMenu,function
	.thumb_func
CB2_InitPartyMenu:
	push	{lr}
.L34:
	bl	MenuHelpers_ShouldWaitForLinkRecv
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L35	@cond_branch
	bl	ShowPartyMenu
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L35	@cond_branch
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L34	@cond_branch
.L35:
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 CB2_InitPartyMenu,.Lfe4-CB2_InitPartyMenu
	.align	2, 0
	.type	 ShowPartyMenu,function
	.thumb_func
ShowPartyMenu:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L76
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x16
	bls	.LCB294
	b	.L71	@long jump
.LCB294:
	lsl	r0, r0, #0x2
	ldr	r1, .L76+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L77:
	.align	2, 0
.L76:
	.word	gMain
	.word	.L72
	.align	2, 0
	.align	2, 0
.L72:
	.word	.L42
	.word	.L43
	.word	.L44
	.word	.L45
	.word	.L46
	.word	.L47
	.word	.L49
	.word	.L50
	.word	.L53
	.word	.L55
	.word	.L56
	.word	.L57
	.word	.L58
	.word	.L59
	.word	.L60
	.word	.L61
	.word	.L63
	.word	.L65
	.word	.L66
	.word	.L67
	.word	.L68
	.word	.L69
	.word	.L70
.L42:
	bl	SetVBlankHBlankCallbacksToNull
	bl	ResetVramOamAndBgCntRegs
	bl	ClearScheduledBgCopiesToVram
	b	.L74
.L43:
	bl	ScanlineEffect_Stop
	b	.L74
.L44:
	bl	ResetPaletteFade
	ldr	r2, .L78
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	b	.L75
.L79:
	.align	2, 0
.L78:
	.word	gPaletteFade
.L45:
	bl	ResetSpriteData
	b	.L74
.L46:
	bl	FreeAllSpritePalettes
	b	.L74
.L47:
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB356
	b	.L74	@long jump
.LCB356:
	bl	ResetTasks
	b	.L74
.L49:
	bl	SetPartyMonsAllowedInMinigame
	b	.L74
.L50:
	bl	AllocPartyMenuBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L51	@cond_branch
	bl	ExitPartyMenu
	mov	r0, #0x1
	b	.L73
.L51:
	ldr	r0, .L80
	ldr	r0, [r0]
	mov	r1, #0x86
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	b	.L74
.L81:
	.align	2, 0
.L80:
	.word	sPartyMenuInternal
.L53:
	bl	AllocPartyMenuBgGfx
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB404
	b	.L41	@long jump
.LCB404:
	b	.L74
.L55:
	ldr	r0, .L82
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	bl	InitPartyMenuWindows
	b	.L74
.L83:
	.align	2, 0
.L82:
	.word	gPartyMenu
.L56:
	ldr	r0, .L84
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	bl	InitPartyMenuBoxes
	ldr	r0, .L84+0x4
	ldr	r0, [r0]
	mov	r1, #0x86
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	b	.L74
.L85:
	.align	2, 0
.L84:
	.word	gPartyMenu
	.word	sPartyMenuInternal
.L57:
	bl	LoadHeldItemIcons
	b	.L74
.L58:
	bl	LoadPartyMenuPokeballGfx
	b	.L74
.L59:
	bl	LoadPartyMenuAilmentGfx
	b	.L74
.L60:
	bl	LoadMonIconPalettes
	b	.L74
.L61:
	bl	CreatePartyMonSpritesLoop
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldr	r0, .L86
	ldr	r0, [r0]
	mov	r1, #0x86
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	b	.L74
.L87:
	.align	2, 0
.L86:
	.word	sPartyMenuInternal
.L63:
	bl	RenderPartyMenuBoxes
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldr	r0, .L88
	ldr	r0, [r0]
	mov	r1, #0x86
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	b	.L74
.L89:
	.align	2, 0
.L88:
	.word	sPartyMenuInternal
.L65:
	bl	CreateCancelConfirmPokeballSprites
	b	.L74
.L66:
	ldr	r0, .L90
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	bl	CreateCancelConfirmWindows
	b	.L74
.L91:
	.align	2, 0
.L90:
	.word	sPartyMenuInternal
.L67:
	mov	r0, #0x5
	bl	SetHelpContext
	b	.L74
.L68:
	ldr	r4, .L92
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, [r4]
	ldrh	r0, [r0, #0xa]
	lsr	r0, r0, #0x2
	bl	DisplayPartyMenuStdMessage
	b	.L74
.L93:
	.align	2, 0
.L92:
	.word	sPartyMenuInternal
.L69:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	b	.L74
.L70:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r2, .L94
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
.L75:
	strb	r0, [r2, #0x8]
.L74:
	ldr	r1, .L94+0x4
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L41
.L95:
	.align	2, 0
.L94:
	.word	gPaletteFade
	.word	gMain
.L71:
	ldr	r0, .L96
	bl	SetVBlankCallback
	ldr	r0, .L96+0x4
	bl	SetMainCallback2
	mov	r0, #0x1
	b	.L73
.L97:
	.align	2, 0
.L96:
	.word	VBlankCB_PartyMenu
	.word	CB2_UpdatePartyMenu
.L41:
	mov	r0, #0x0
.L73:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 ShowPartyMenu,.Lfe5-ShowPartyMenu
	.align	2, 0
	.type	 ExitPartyMenu,function
	.thumb_func
ExitPartyMenu:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L99
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L99+0x4
	bl	SetVBlankCallback
	ldr	r0, .L99+0x8
	bl	SetMainCallback2
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	Task_ExitPartyMenu
	.word	VBlankCB_PartyMenu
	.word	CB2_UpdatePartyMenu
.Lfe6:
	.size	 ExitPartyMenu,.Lfe6-ExitPartyMenu
	.align	2, 0
	.type	 Task_ExitPartyMenu,function
	.thumb_func
Task_ExitPartyMenu:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L103
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L102	@cond_branch
	ldr	r0, .L103+0x4
	ldr	r0, [r0]
	bl	SetMainCallback2
	bl	FreePartyPointers
	add	r0, r4, #0
	bl	DestroyTask
.L102:
	pop	{r4}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	gPaletteFade
	.word	gPartyMenu
.Lfe7:
	.size	 Task_ExitPartyMenu,.Lfe7-Task_ExitPartyMenu
	.align	2, 0
	.type	 ResetPartyMenu,function
	.thumb_func
ResetPartyMenu:
	ldr	r0, .L106
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L106+0x4
	str	r1, [r0]
	ldr	r0, .L106+0x8
	str	r1, [r0]
	ldr	r0, .L106+0xc
	str	r1, [r0]
	bx	lr
.L107:
	.align	2, 0
.L106:
	.word	sPartyMenuInternal
	.word	sPartyBgTilemapBuffer
	.word	sPartyMenuBoxes
	.word	sPartyBgGfxTilemap
.Lfe8:
	.size	 ResetPartyMenu,.Lfe8-ResetPartyMenu
	.align	2, 0
	.type	 AllocPartyMenuBg,function
	.thumb_func
AllocPartyMenuBg:
	push	{r4, r5, lr}
	bl	ResetAllBgsCoordinatesAndBgCntRegs
	ldr	r5, .L111
	mov	r4, #0x80
	lsl	r4, r4, #0x4
	add	r0, r4, #0
	bl	Alloc
	str	r0, [r5]
	cmp	r0, #0
	beq	.L109	@cond_branch
	mov	r1, #0x0
	add	r2, r4, #0
	bl	memset
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L111+0x4
	mov	r0, #0x0
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	ldr	r1, [r5]
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x1
	b	.L110
.L112:
	.align	2, 0
.L111:
	.word	sPartyBgTilemapBuffer
	.word	sPartyMenuBgTemplates
.L109:
	mov	r0, #0x0
.L110:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 AllocPartyMenuBg,.Lfe9-AllocPartyMenuBg
	.align	2, 0
	.type	 AllocPartyMenuBgGfx,function
	.thumb_func
AllocPartyMenuBgGfx:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L130
	ldr	r0, [r0]
	mov	r1, #0x86
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x7
	bhi	.L124	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L130+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L131:
	.align	2, 0
.L130:
	.word	sPartyMenuInternal
	.word	.L125
	.align	2, 0
	.align	2, 0
.L125:
	.word	.L115
	.word	.L116
	.word	.L118
	.word	.L119
	.word	.L120
	.word	.L121
	.word	.L122
	.word	.L123
.L115:
	ldr	r4, .L132
	ldr	r0, .L132+0x4
	mov	r1, sp
	bl	MallocAndDecompress
	add	r1, r0, #0
	str	r1, [r4]
	ldr	r2, [sp]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r3, #0x0
	bl	LoadBgTiles
	b	.L127
.L133:
	.align	2, 0
.L132:
	.word	sPartyBgGfxTilemap
	.word	gPartyMenuBg_Gfx
.L116:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L114	@cond_branch
	ldr	r0, .L134
	ldr	r1, .L134+0x4
	ldr	r1, [r1]
	bl	LZDecompressWram
	b	.L127
.L135:
	.align	2, 0
.L134:
	.word	gPartyMenuBg_Tilemap
	.word	sPartyBgTilemapBuffer
.L118:
	ldr	r0, .L136
	mov	r2, #0xb0
	lsl	r2, r2, #0x1
	mov	r1, #0x0
	bl	LoadCompressedPalette
	ldr	r0, .L136+0x4
	ldr	r4, .L136+0x8
	ldr	r1, [r4]
	add	r1, r1, #0x18
	mov	r2, #0xb0
	bl	CpuSet
	ldr	r1, [r4]
	b	.L128
.L137:
	.align	2, 0
.L136:
	.word	gPartyMenuBg_Pal
	.word	gPlttBufferUnfaded
	.word	sPartyMenuInternal
.L119:
	mov	r0, #0x4
	b	.L129
.L120:
	mov	r0, #0x5
	b	.L129
.L121:
	mov	r0, #0x6
	b	.L129
.L122:
	mov	r0, #0x7
	b	.L129
.L123:
	mov	r0, #0x8
.L129:
	bl	PartyPaletteBufferCopy
.L127:
	ldr	r0, .L138
	ldr	r1, [r0]
.L128:
	mov	r0, #0x86
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L114
.L139:
	.align	2, 0
.L138:
	.word	sPartyMenuInternal
.L124:
	mov	r0, #0x1
	b	.L126
.L114:
	mov	r0, #0x0
.L126:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 AllocPartyMenuBgGfx,.Lfe10-AllocPartyMenuBgGfx
	.align	2, 0
	.type	 PartyPaletteBufferCopy,function
	.thumb_func
PartyPaletteBufferCopy:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x1c
	ldr	r5, .L141
	lsr	r4, r4, #0x17
	add	r1, r5, #0
	sub	r1, r1, #0x60
	add	r1, r4, r1
	add	r0, r5, #0
	mov	r2, #0x10
	bl	CpuSet
	ldr	r0, .L141+0x4
	add	r4, r4, r0
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x10
	bl	CpuSet
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	gPlttBufferUnfaded+0x60
	.word	gPlttBufferFaded
.Lfe11:
	.size	 PartyPaletteBufferCopy,.Lfe11-PartyPaletteBufferCopy
	.align	2, 0
	.type	 FreePartyPointers,function
	.thumb_func
FreePartyPointers:
	push	{lr}
	ldr	r0, .L148
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L144	@cond_branch
	bl	Free
.L144:
	ldr	r0, .L148+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L145	@cond_branch
	bl	Free
.L145:
	ldr	r0, .L148+0x8
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L146	@cond_branch
	bl	Free
.L146:
	ldr	r0, .L148+0xc
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L147	@cond_branch
	bl	Free
.L147:
	bl	FreeAllWindowBuffers
	pop	{r0}
	bx	r0
.L149:
	.align	2, 0
.L148:
	.word	sPartyMenuInternal
	.word	sPartyBgTilemapBuffer
	.word	sPartyBgGfxTilemap
	.word	sPartyMenuBoxes
.Lfe12:
	.size	 FreePartyPointers,.Lfe12-FreePartyPointers
	.align	2, 0
	.type	 InitPartyMenuBoxes,function
	.thumb_func
InitPartyMenuBoxes:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L159
	mov	r0, #0x60
	bl	Alloc
	str	r0, [r4]
	mov	r2, #0x0
	ldr	r7, .L159+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r3, r0, #0x4
	mov	ip, r4
	ldr	r6, .L159+0x8
.L154:
	ldr	r0, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	str	r7, [r1]
	lsl	r0, r2, #0x3
	add	r0, r0, r6
	add	r0, r3, r0
	str	r0, [r1, #0x4]
	strb	r2, [r1, #0x8]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x5
	bls	.L154	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r1, .L159+0xc
	str	r1, [r0]
	cmp	r5, #0x3
	bne	.L156	@cond_branch
	str	r1, [r0, #0x30]
	b	.L157
.L160:
	.align	2, 0
.L159:
	.word	sPartyMenuBoxes
	.word	sPartyBoxInfoRects+0x20
	.word	sPartyMenuSpriteCoords
	.word	sPartyBoxInfoRects
.L156:
	cmp	r5, #0
	beq	.L157	@cond_branch
	str	r1, [r0, #0x10]
.L157:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 InitPartyMenuBoxes,.Lfe13-InitPartyMenuBoxes
	.align	2, 0
	.type	 RenderPartyMenuBox,function
	.thumb_func
RenderPartyMenuBox:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L176
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.L162	@cond_branch
	cmp	r4, #0x2
	bls	.L162	@cond_branch
	add	r0, r4, #0
	bl	DisplayPartyPokemonDataForMultiBattle
	ldr	r5, .L176+0x4
	lsl	r4, r4, #0x4
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0x8
	bl	LoadPartyBoxPalette
	ldr	r0, [r5]
	add	r0, r4, r0
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldr	r0, [r5]
	add	r4, r4, r0
	ldrb	r0, [r4, #0x8]
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	b	.L163
.L177:
	.align	2, 0
.L176:
	.word	gPartyMenu
	.word	sPartyMenuBoxes
.L162:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L178
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	bne	.L164	@cond_branch
	ldr	r5, .L178+0x4
	ldr	r0, [r5]
	lsl	r4, r4, #0x4
	add	r0, r4, r0
	ldrb	r0, [r0, #0x8]
	bl	DrawEmptySlot
	ldr	r0, [r5]
	add	r0, r4, r0
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L165
.L179:
	.align	2, 0
.L178:
	.word	gPlayerParty
	.word	sPartyMenuBoxes
.L164:
	ldr	r0, .L180
	ldrb	r0, [r0, #0x8]
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0x4
	bne	.L166	@cond_branch
	add	r0, r4, #0
	bl	DisplayPartyPokemonDataForChooseMultiple
	b	.L167
.L181:
	.align	2, 0
.L180:
	.word	gPartyMenu
.L166:
	cmp	r1, #0xb
	bne	.L168	@cond_branch
	add	r0, r4, #0
	bl	DisplayPartyPokemonDataForWirelessMinigame
	b	.L167
.L168:
	add	r0, r4, #0
	bl	DisplayPartyPokemonDataForMoveTutorOrEvolutionItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L167	@cond_branch
	add	r0, r4, #0
	bl	DisplayPartyPokemonData
.L167:
	ldr	r2, .L182
	ldrb	r1, [r2, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.L171	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	AnimatePartySlot
	b	.L175
.L183:
	.align	2, 0
.L182:
	.word	gPartyMenu
.L171:
	mov	r0, #0x9
	ldrsb	r0, [r2, r0]
	cmp	r0, r4
	bne	.L173	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	AnimatePartySlot
	b	.L175
.L173:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	AnimatePartySlot
.L175:
	lsl	r4, r4, #0x4
.L165:
	ldr	r0, .L184
	ldr	r0, [r0]
	add	r0, r4, r0
	ldrb	r0, [r0, #0x8]
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
.L163:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L185:
	.align	2, 0
.L184:
	.word	sPartyMenuBoxes
.Lfe14:
	.size	 RenderPartyMenuBox,.Lfe14-RenderPartyMenuBox
	.align	2, 0
	.type	 DisplayPartyPokemonData,function
	.thumb_func
DisplayPartyPokemonData:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x64
	mov	r1, r4
	mul	r1, r1, r0
	ldr	r0, .L189
	add	r7, r1, r0
	add	r0, r7, #0
	mov	r1, #0x2d
	bl	GetMonData
	add	r2, r0, #0
	cmp	r2, #0
	beq	.L187	@cond_branch
	ldr	r6, .L189+0x4
	ldr	r0, [r6]
	lsl	r5, r4, #0x4
	add	r0, r5, r0
	ldr	r2, [r0]
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	ldr	r4, [r2]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	_call_via_r4
	ldr	r1, [r6]
	add	r1, r1, r5
	add	r0, r7, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonNickname
	b	.L188
.L190:
	.align	2, 0
.L189:
	.word	gPlayerParty
	.word	sPartyMenuBoxes
.L187:
	ldr	r5, .L191
	ldr	r0, [r5]
	lsl	r4, r4, #0x4
	add	r0, r4, r0
	ldr	r1, [r0]
	ldrb	r0, [r0, #0x8]
	str	r2, [sp]
	str	r2, [sp, #0x4]
	ldr	r6, [r1]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	_call_via_r6
	ldr	r1, [r5]
	add	r1, r1, r4
	add	r0, r7, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonNickname
	ldr	r1, [r5]
	add	r1, r1, r4
	add	r0, r7, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonLevelCheck
	ldr	r1, [r5]
	add	r1, r1, r4
	add	r0, r7, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonGenderNidoranCheck
	ldr	r1, [r5]
	add	r1, r1, r4
	add	r0, r7, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonHPCheck
	ldr	r1, [r5]
	add	r1, r1, r4
	add	r0, r7, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonMaxHPCheck
	ldr	r1, [r5]
	add	r1, r1, r4
	add	r0, r7, #0
	bl	DisplayPartyPokemonHPBarCheck
.L188:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L192:
	.align	2, 0
.L191:
	.word	sPartyMenuBoxes
.Lfe15:
	.size	 DisplayPartyPokemonData,.Lfe15-DisplayPartyPokemonData
	.align	2, 0
	.type	 DisplayPartyPokemonDescriptionData,function
	.thumb_func
DisplayPartyPokemonDescriptionData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r1, #0x64
	mov	r2, r0
	mul	r2, r2, r1
	ldr	r1, .L195
	add	r6, r2, r1
	ldr	r7, .L195+0x4
	ldr	r1, [r7]
	lsl	r5, r0, #0x4
	add	r1, r5, r1
	ldr	r2, [r1]
	ldrb	r0, [r1, #0x8]
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	ldr	r4, [r2]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	_call_via_r4
	ldr	r1, [r7]
	add	r1, r1, r5
	add	r0, r6, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonNickname
	add	r0, r6, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L194	@cond_branch
	ldr	r1, [r7]
	add	r1, r1, r5
	add	r0, r6, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonLevelCheck
	ldr	r1, [r7]
	add	r1, r1, r5
	add	r0, r6, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonGenderNidoranCheck
.L194:
	ldr	r1, [r7]
	add	r1, r1, r5
	mov	r0, r8
	mov	r2, #0x0
	bl	DisplayPartyPokemonDescriptionText
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L196:
	.align	2, 0
.L195:
	.word	gPlayerParty
	.word	sPartyMenuBoxes
.Lfe16:
	.size	 DisplayPartyPokemonDescriptionData,.Lfe16-DisplayPartyPokemonDescriptionData
	.align	2, 0
	.type	 DisplayPartyPokemonDataForChooseMultiple,function
	.thumb_func
DisplayPartyPokemonDataForChooseMultiple:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L209
	add	r0, r0, r1
	ldr	r5, .L209+0x4
	bl	GetBattleEntryEligibility
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L198	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x6
	bl	DisplayPartyPokemonDescriptionData
	b	.L197
.L210:
	.align	2, 0
.L209:
	.word	gPlayerParty
	.word	gSelectedOrderFromParty
.L208:
	add	r1, r1, #0x2
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	DisplayPartyPokemonDescriptionData
	b	.L197
.L198:
	ldr	r0, .L211
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xc0
	and	r0, r0, r1
	mov	r3, #0x3
	cmp	r0, #0x80
	bne	.L200	@cond_branch
	mov	r3, #0x2
.L200:
	mov	r1, #0x0
	cmp	r1, r3
	bcs	.L203	@cond_branch
.L205:
	add	r2, r5, r1
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L204	@cond_branch
	sub	r0, r0, #0x1
	cmp	r0, r4
	beq	.L208	@cond_branch
.L204:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r3
	bcc	.L205	@cond_branch
.L203:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayPartyPokemonDescriptionData
.L197:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L212:
	.align	2, 0
.L211:
	.word	gPartyMenu
.Lfe17:
	.size	 DisplayPartyPokemonDataForChooseMultiple,.Lfe17-DisplayPartyPokemonDataForChooseMultiple
	.align	2, 0
	.type	 DisplayPartyPokemonDataForWirelessMinigame,function
	.thumb_func
DisplayPartyPokemonDataForWirelessMinigame:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsMonAllowedInMinigame
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L214	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x5
	bl	DisplayPartyPokemonDescriptionData
	b	.L215
.L214:
	add	r0, r4, #0
	mov	r1, #0x6
	bl	DisplayPartyPokemonDescriptionData
.L215:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 DisplayPartyPokemonDataForWirelessMinigame,.Lfe18-DisplayPartyPokemonDataForWirelessMinigame
	.align	2, 0
	.type	 DisplayPartyPokemonDataForMoveTutorOrEvolutionItem,function
	.thumb_func
DisplayPartyPokemonDataForMoveTutorOrEvolutionItem:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L230
	add	r6, r1, r0
	ldr	r0, .L230+0x4
	ldrh	r4, [r0]
	ldr	r0, .L230+0x8
	ldrb	r0, [r0, #0xb]
	cmp	r0, #0xc
	bne	.L217	@cond_branch
	ldr	r0, .L230+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L230+0x10
	ldrh	r0, [r0]
	cmp	r0, #0xe
	bhi	.L229	@cond_branch
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	mov	r1, #0x0
	bl	DisplayPartyPokemonDataToTeachMove
	b	.L219
.L231:
	.align	2, 0
.L230:
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
	.word	gPartyMenu
	.word	gSpecialVar_Result
	.word	gSpecialVar_0x8005
.L217:
	cmp	r0, #0x3
	bne	.L229	@cond_branch
	add	r0, r4, #0
	bl	CheckIfItemIsTMHMOrEvolutionStone
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L223	@cond_branch
	cmp	r0, #0x2
	beq	.L224	@cond_branch
.L229:
	mov	r0, #0x0
	b	.L227
.L223:
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonDataToTeachMove
	b	.L219
.L224:
	add	r0, r6, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L225	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x3
	add	r2, r4, #0
	bl	GetEvolutionTargetSpecies
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L229	@cond_branch
.L225:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	DisplayPartyPokemonDescriptionData
.L219:
	mov	r0, #0x1
.L227:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 DisplayPartyPokemonDataForMoveTutorOrEvolutionItem,.Lfe19-DisplayPartyPokemonDataForMoveTutorOrEvolutionItem
	.align	2, 0
	.type	 DisplayPartyPokemonDataToTeachMove,function
	.thumb_func
DisplayPartyPokemonDataToTeachMove:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r3, .L240
	add	r0, r0, r3
	bl	CanMonLearnTMTutor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	beq	.L236	@cond_branch
	cmp	r0, #0x2
	bgt	.L239	@cond_branch
	cmp	r0, #0x1
	beq	.L235	@cond_branch
	b	.L237
.L241:
	.align	2, 0
.L240:
	.word	gPlayerParty
.L239:
	cmp	r0, #0x3
	bne	.L237	@cond_branch
.L235:
	add	r0, r4, #0
	mov	r1, #0x8
	bl	DisplayPartyPokemonDescriptionData
	b	.L233
.L236:
	add	r0, r4, #0
	mov	r1, #0x9
	bl	DisplayPartyPokemonDescriptionData
	b	.L233
.L237:
	add	r0, r4, #0
	mov	r1, #0x7
	bl	DisplayPartyPokemonDescriptionData
.L233:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 DisplayPartyPokemonDataToTeachMove,.Lfe20-DisplayPartyPokemonDataToTeachMove
	.align	2, 0
	.type	 DisplayPartyPokemonDataForMultiBattle,function
	.thumb_func
DisplayPartyPokemonDataForMultiBattle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L246
	lsl	r2, r0, #0x4
	ldr	r1, [r1]
	add	r5, r1, r2
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x18
	ldr	r1, .L246+0x4
	mov	r8, r1
	lsr	r7, r0, #0x13
	add	r6, r7, r1
	ldrh	r0, [r6]
	cmp	r0, #0
	bne	.L243	@cond_branch
	ldrb	r0, [r5, #0x8]
	bl	DrawEmptySlot
	b	.L244
.L247:
	.align	2, 0
.L246:
	.word	sPartyMenuBoxes
	.word	gMultiPartnerParty
.L243:
	ldr	r2, [r5]
	ldrb	r0, [r5, #0x8]
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	ldr	r4, [r2]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	_call_via_r4
	ldr	r4, .L248
	mov	r0, r8
	add	r0, r0, #0x4
	add	r7, r7, r0
	add	r0, r4, #0
	add	r1, r7, #0
	bl	StringCopy
	add	r0, r4, #0
	bl	StringGet_Nickname
	add	r0, r4, #0
	bl	StringLength
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bhi	.L245	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ConvertInternationalString
.L245:
	ldrb	r0, [r5, #0x8]
	ldr	r3, [r5]
	add	r3, r3, #0x4
	add	r1, r4, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonBarDetail
	ldrb	r0, [r6, #0xf]
	add	r1, r5, #0
	bl	DisplayPartyPokemonLevel
	ldrb	r0, [r6, #0x1c]
	ldrh	r1, [r6]
	add	r2, r7, #0
	add	r3, r5, #0
	bl	DisplayPartyPokemonGender
	ldrh	r0, [r6, #0x10]
	add	r1, r5, #0
	bl	DisplayPartyPokemonHP
	ldrh	r0, [r6, #0x12]
	add	r1, r5, #0
	bl	DisplayPartyPokemonMaxHP
	ldrh	r0, [r6, #0x10]
	ldrh	r1, [r6, #0x12]
	add	r2, r5, #0
	bl	DisplayPartyPokemonHPBar
.L244:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L249:
	.align	2, 0
.L248:
	.word	gStringVar1
.Lfe21:
	.size	 DisplayPartyPokemonDataForMultiBattle,.Lfe21-DisplayPartyPokemonDataForMultiBattle
	.align	2, 0
	.type	 RenderPartyMenuBoxes,function
	.thumb_func
RenderPartyMenuBoxes:
	push	{r4, r5, lr}
	ldr	r5, .L254
	ldr	r0, [r5]
	mov	r4, #0x86
	lsl	r4, r4, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	RenderPartyMenuBox
	ldr	r1, [r5]
	add	r1, r1, r4
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	beq	.L251	@cond_branch
	mov	r0, #0x0
	b	.L253
.L255:
	.align	2, 0
.L254:
	.word	sPartyMenuInternal
.L251:
	mov	r0, #0x1
.L253:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 RenderPartyMenuBoxes,.Lfe22-RenderPartyMenuBoxes
	.align	2, 0
	.type	 GetPartyMenuBgTile,function
	.thumb_func
GetPartyMenuBgTile:
	lsl	r0, r0, #0x10
	ldr	r1, .L257
	lsr	r0, r0, #0xb
	ldr	r1, [r1]
	add	r1, r1, r0
	add	r0, r1, #0
	bx	lr
.L258:
	.align	2, 0
.L257:
	.word	sPartyBgGfxTilemap
.Lfe23:
	.size	 GetPartyMenuBgTile,.Lfe23-GetPartyMenuBgTile
	.align	2, 0
	.type	 CreatePartyMonSprites,function
	.thumb_func
CreatePartyMonSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L266
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.L260	@cond_branch
	cmp	r7, #0x2
	bls	.L260	@cond_branch
	sub	r0, r7, #0x3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L266+0x4
	mov	r9, r0
	mov	r2, sl
	lsl	r2, r2, #0x5
	mov	r8, r2
	mov	r6, r8
	add	r6, r6, r9
	ldrh	r0, [r6]
	cmp	r0, #0
	beq	.L264	@cond_branch
	mov	r1, r9
	add	r1, r1, #0x18
	add	r1, r1, r8
	ldr	r1, [r1]
	ldr	r4, .L266+0x8
	lsl	r5, r7, #0x4
	ldr	r2, [r4]
	add	r2, r2, r5
	mov	r3, #0x0
	str	r3, [sp]
	bl	CreatePartyMonIconSpriteParameterized
	ldrh	r0, [r6]
	ldrh	r1, [r6, #0x2]
	ldr	r2, [r4]
	add	r2, r2, r5
	bl	CreatePartyMonHeldItemSpriteParameterized
	ldrh	r0, [r6]
	ldr	r1, [r4]
	add	r1, r1, r5
	bl	CreatePartyMonPokeballSpriteParameterized
	ldrh	r0, [r6, #0x10]
	cmp	r0, #0
	bne	.L262	@cond_branch
	mov	r3, #0x7
	b	.L263
.L267:
	.align	2, 0
.L266:
	.word	gPartyMenu
	.word	gMultiPartnerParty
	.word	sPartyMenuBoxes
.L262:
	mov	r0, r9
	add	r0, r0, #0x14
	add	r0, r0, r8
	ldr	r0, [r0]
	bl	GetAilmentFromStatus
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L263:
	ldr	r1, .L268
	mov	r2, sl
	lsl	r0, r2, #0x5
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r1, .L268+0x4
	ldr	r2, [r1]
	add	r2, r2, r5
	add	r1, r3, #0
	bl	CreatePartyMonStatusSpriteParameterized
	b	.L264
.L269:
	.align	2, 0
.L268:
	.word	gMultiPartnerParty
	.word	sPartyMenuBoxes
.L260:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L270
	add	r6, r1, r0
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L264	@cond_branch
	ldr	r4, .L270+0x4
	lsl	r5, r7, #0x4
	ldr	r1, [r4]
	add	r1, r1, r5
	add	r0, r6, #0
	add	r2, r7, #0
	bl	CreatePartyMonIconSprite
	ldr	r1, [r4]
	add	r1, r1, r5
	add	r0, r6, #0
	bl	CreatePartyMonHeldItemSprite
	ldr	r1, [r4]
	add	r1, r1, r5
	add	r0, r6, #0
	bl	CreatePartyMonPokeballSprite
	ldr	r1, [r4]
	add	r1, r1, r5
	add	r0, r6, #0
	bl	CreatePartyMonStatusSprite
.L264:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gPlayerParty
	.word	sPartyMenuBoxes
.Lfe24:
	.size	 CreatePartyMonSprites,.Lfe24-CreatePartyMonSprites
	.align	2, 0
	.type	 CreatePartyMonSpritesLoop,function
	.thumb_func
CreatePartyMonSpritesLoop:
	push	{r4, r5, lr}
	ldr	r5, .L276
	ldr	r0, [r5]
	mov	r4, #0x86
	lsl	r4, r4, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	CreatePartyMonSprites
	ldr	r1, [r5]
	add	r1, r1, r4
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	beq	.L273	@cond_branch
	mov	r0, #0x0
	b	.L275
.L277:
	.align	2, 0
.L276:
	.word	sPartyMenuInternal
.L273:
	mov	r0, #0x1
.L275:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 CreatePartyMonSpritesLoop,.Lfe25-CreatePartyMonSpritesLoop
	.align	2, 0
	.type	 CreateCancelConfirmPokeballSprites,function
	.thumb_func
CreateCancelConfirmPokeballSprites:
	push	{r4, lr}
	add	sp, sp, #-0xc
	ldr	r0, .L284
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.L279	@cond_branch
	mov	r0, #0x7
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r1, #0xe
	mov	r2, #0x17
	mov	r3, #0x11
	bl	FillBgTilemapBufferRect
	b	.L280
.L285:
	.align	2, 0
.L284:
	.word	gPartyMenu
.L279:
	ldr	r4, .L286
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L281	@cond_branch
	mov	r0, #0xbf
	mov	r1, #0x88
	bl	CreateSmallPokeballButtonSprite
	ldr	r3, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x7f
	and	r0, r0, r1
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x8]
	ldr	r1, .L286+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x8]
	bl	DrawCancelConfirmButtons
	mov	r0, #0xbf
	mov	r1, #0x98
	bl	CreateSmallPokeballButtonSprite
	b	.L283
.L287:
	.align	2, 0
.L286:
	.word	sPartyMenuInternal
	.word	-0x7f1
.L281:
	mov	r0, #0xc6
	mov	r1, #0x94
	bl	CreatePokeballButtonSprite
.L283:
	ldr	r3, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x7f
	and	r0, r0, r1
	lsl	r0, r0, #0xb
	ldr	r1, [r3, #0x8]
	ldr	r2, .L288
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [r3, #0x8]
	ldr	r0, .L288+0x4
	ldrb	r0, [r0, #0x9]
	mov	r1, #0x1
	bl	AnimatePartySlot
.L280:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L289:
	.align	2, 0
.L288:
	.word	-0x3f801
	.word	gPartyMenu
.Lfe26:
	.size	 CreateCancelConfirmPokeballSprites,.Lfe26-CreateCancelConfirmPokeballSprites
	.align	2, 0
	.globl	AnimatePartySlot
	.type	 AnimatePartySlot,function
	.thumb_func
AnimatePartySlot:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	cmp	r7, #0x6
	beq	.L294	@cond_branch
	cmp	r7, #0x7
	beq	.L297	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r7
	ldr	r1, .L307
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L290	@cond_branch
	ldr	r6, .L307+0x4
	lsl	r5, r7, #0x4
	ldr	r4, [r6]
	add	r4, r4, r5
	add	r0, r7, #0
	mov	r1, r8
	bl	GetPartyBoxPaletteFlags
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	LoadPartyBoxPalette
	ldr	r0, [r6]
	add	r0, r5, r0
	ldrb	r0, [r0, #0x9]
	mov	r1, r8
	bl	AnimateSelectedPartyIcon
	ldr	r0, [r6]
	add	r5, r5, r0
	ldrb	r0, [r5, #0xb]
	mov	r1, r8
	bl	PartyMenuStartSpriteAnim
	b	.L290
.L308:
	.align	2, 0
.L307:
	.word	gPlayerParty
	.word	sPartyMenuBoxes
.L294:
	mov	r0, r8
	cmp	r0, #0
	bne	.L295	@cond_branch
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r1, #0x17
	mov	r2, #0x10
	mov	r3, #0x7
	bl	SetBgTilemapPalette
	b	.L296
.L295:
	mov	r0, #0x2
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x17
	mov	r2, #0x10
	mov	r3, #0x7
	bl	SetBgTilemapPalette
.L296:
	ldr	r0, .L309
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x8]
	lsl	r0, r0, #0x15
	b	.L305
.L310:
	.align	2, 0
.L309:
	.word	sPartyMenuInternal
.L297:
	ldr	r0, .L311
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L298	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	bne	.L299	@cond_branch
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r1, #0x17
	mov	r2, #0x11
	b	.L306
.L312:
	.align	2, 0
.L311:
	.word	sPartyMenuInternal
.L299:
	mov	r0, #0x2
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x17
	mov	r2, #0x11
	b	.L306
.L298:
	mov	r0, r8
	cmp	r0, #0
	bne	.L302	@cond_branch
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r1, #0x17
	mov	r2, #0x12
.L306:
	mov	r3, #0x7
	bl	SetBgTilemapPalette
	b	.L301
.L302:
	mov	r0, #0x2
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x17
	mov	r2, #0x12
	mov	r3, #0x7
	bl	SetBgTilemapPalette
.L301:
	ldr	r0, .L313
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	lsl	r0, r0, #0xe
.L305:
	lsr	r0, r0, #0x19
	mov	r1, r8
	bl	PartyMenuStartSpriteAnim
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
.L290:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	sPartyMenuInternal
.Lfe27:
	.size	 AnimatePartySlot,.Lfe27-AnimatePartySlot
	.align	2, 0
	.type	 GetPartyBoxPaletteFlags,function
	.thumb_func
GetPartyBoxPaletteFlags:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r4, #0x0
	cmp	r1, #0x1
	bne	.L316	@cond_branch
	mov	r4, #0x1
.L316:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L325
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.L317	@cond_branch
	mov	r0, #0x2
	orr	r4, r4, r0
.L317:
	ldr	r2, .L325+0x4
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0x20
	bne	.L318	@cond_branch
	cmp	r5, #0x1
	beq	.L319	@cond_branch
	cmp	r5, #0x4
	beq	.L319	@cond_branch
	cmp	r5, #0x5
	bne	.L318	@cond_branch
.L319:
	mov	r0, #0x8
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L318:
	ldrb	r1, [r2, #0xb]
	cmp	r1, #0x9
	bne	.L320	@cond_branch
	mov	r0, #0x10
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L320:
	cmp	r1, #0x8
	bne	.L321	@cond_branch
	mov	r0, #0x9
	ldrsb	r0, [r2, r0]
	cmp	r5, r0
	beq	.L323	@cond_branch
	mov	r0, #0xa
	ldrsb	r0, [r2, r0]
	cmp	r5, r0
	bne	.L321	@cond_branch
.L323:
	mov	r0, #0x4
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L321:
	ldrb	r0, [r2, #0xb]
	cmp	r0, #0xa
	bne	.L324	@cond_branch
	mov	r0, #0x9
	ldrsb	r0, [r2, r0]
	cmp	r5, r0
	bne	.L324	@cond_branch
	mov	r0, #0x20
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L324:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L326:
	.align	2, 0
.L325:
	.word	gPlayerParty
	.word	gPartyMenu
.Lfe28:
	.size	 GetPartyBoxPaletteFlags,.Lfe28-GetPartyBoxPaletteFlags
	.align	2, 0
	.type	 DrawCancelConfirmButtons,function
	.thumb_func
DrawCancelConfirmButtons:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	ldr	r1, .L328
	mov	r6, #0x7
	str	r6, [sp]
	mov	r5, #0x2
	str	r5, [sp, #0x4]
	mov	r4, #0x11
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x17
	mov	r3, #0x10
	bl	CopyToBgTilemapBufferRect_ChangePalette
	ldr	r1, .L328+0x4
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x17
	mov	r3, #0x12
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L329:
	.align	2, 0
.L328:
	.word	sConfirmButton_Tilemap
	.word	sCancelButton_Tilemap
.Lfe29:
	.size	 DrawCancelConfirmButtons,.Lfe29-DrawCancelConfirmButtons
	.align	2, 0
	.globl	IsMultiBattle
	.type	 IsMultiBattle,function
	.thumb_func
IsMultiBattle:
	push	{lr}
	ldr	r0, .L334
	ldr	r0, [r0]
	mov	r1, #0x4b
	and	r0, r0, r1
	cmp	r0, #0x4b
	beq	.L331	@cond_branch
	mov	r0, #0x0
	b	.L333
.L335:
	.align	2, 0
.L334:
	.word	gBattleTypeFlags
.L331:
	mov	r0, #0x1
.L333:
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 IsMultiBattle,.Lfe30-IsMultiBattle
	.align	2, 0
	.type	 SwapPartyPokemon,function
	.thumb_func
SwapPartyPokemon:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	mov	r0, #0x64
	bl	Alloc
	add	r5, r0, #0
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x64
	bl	memcpy
	add	r0, r6, #0
	add	r1, r5, #0
	mov	r2, #0x64
	bl	memcpy
	add	r0, r5, #0
	bl	Free
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 SwapPartyPokemon,.Lfe31-SwapPartyPokemon
	.align	2, 0
	.type	 Task_ClosePartyMenu,function
	.thumb_func
Task_ClosePartyMenu:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L338
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L338+0x4
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L339:
	.align	2, 0
.L338:
	.word	gTasks
	.word	Task_ClosePartyMenuAndSetCB2
.Lfe32:
	.size	 Task_ClosePartyMenu,.Lfe32-Task_ClosePartyMenu
	.align	2, 0
	.type	 Task_ClosePartyMenuAndSetCB2,function
	.thumb_func
Task_ClosePartyMenuAndSetCB2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L345
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L341	@cond_branch
	ldr	r4, .L345+0x4
	ldrb	r1, [r4, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L342	@cond_branch
	bl	UpdatePartyToFieldOrder
.L342:
	ldr	r0, .L345+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L343	@cond_branch
	bl	SetMainCallback2
	b	.L344
.L346:
	.align	2, 0
.L345:
	.word	gPaletteFade
	.word	gPartyMenu
	.word	sPartyMenuInternal
.L343:
	ldr	r0, [r4]
	bl	SetMainCallback2
.L344:
	bl	FreePartyPointers
	add	r0, r5, #0
	bl	DestroyTask
.L341:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 Task_ClosePartyMenuAndSetCB2,.Lfe33-Task_ClosePartyMenuAndSetCB2
	.align	2, 0
	.globl	GetCursorSelectionMonId
	.type	 GetCursorSelectionMonId,function
	.thumb_func
GetCursorSelectionMonId:
	ldr	r0, .L348
	ldrb	r0, [r0, #0x9]
	bx	lr
.L349:
	.align	2, 0
.L348:
	.word	gPartyMenu
.Lfe34:
	.size	 GetCursorSelectionMonId,.Lfe34-GetCursorSelectionMonId
	.align	2, 0
	.globl	GetPartyMenuType
	.type	 GetPartyMenuType,function
	.thumb_func
GetPartyMenuType:
	ldr	r0, .L351
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	bx	lr
.L352:
	.align	2, 0
.L351:
	.word	gPartyMenu
.Lfe35:
	.size	 GetPartyMenuType,.Lfe35-GetPartyMenuType
	.align	2, 0
	.globl	Task_HandleChooseMonInput
	.type	 Task_HandleChooseMonInput,function
	.thumb_func
Task_HandleChooseMonInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	ldr	r0, .L363
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L354	@cond_branch
	bl	MenuHelpers_ShouldWaitForLinkRecv
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L354	@cond_branch
	bl	GetCurrentPartySlotPtr
	add	r4, r0, #0
	bl	PartyMenuButtonHandler
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	beq	.L357	@cond_branch
	cmp	r0, #0x2
	bgt	.L362	@cond_branch
	cmp	r0, #0x1
	beq	.L356	@cond_branch
	b	.L354
.L364:
	.align	2, 0
.L363:
	.word	gPaletteFade
.L362:
	cmp	r0, #0x8
	beq	.L358	@cond_branch
	b	.L354
.L356:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	HandleChooseMonSelection
	b	.L354
.L357:
	add	r0, r6, #0
	add	r1, r4, #0
	bl	HandleChooseMonCancel
	b	.L354
.L358:
	ldr	r0, .L365
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L354	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	MoveCursorToConfirm
.L354:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L366:
	.align	2, 0
.L365:
	.word	sPartyMenuInternal
.Lfe36:
	.size	 Task_HandleChooseMonInput,.Lfe36-Task_HandleChooseMonInput
	.align	2, 0
	.type	 GetCurrentPartySlotPtr,function
	.thumb_func
GetCurrentPartySlotPtr:
	push	{lr}
	ldr	r0, .L372
	ldrb	r1, [r0, #0xb]
	cmp	r1, #0x8
	beq	.L369	@cond_branch
	cmp	r1, #0xa
	bne	.L368	@cond_branch
.L369:
	add	r0, r0, #0xa
	b	.L371
.L373:
	.align	2, 0
.L372:
	.word	gPartyMenu
.L368:
	add	r0, r0, #0x9
.L371:
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 GetCurrentPartySlotPtr,.Lfe37-GetCurrentPartySlotPtr
	.align	2, 0
	.type	 HandleChooseMonSelection,function
	.thumb_func
HandleChooseMonSelection:
	push	{r4, r5, r6, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	cmp	r0, #0x6
	bne	.L375	@cond_branch
	ldr	r0, .L399
	ldr	r1, [r0, #0x4]
	add	r0, r6, #0
	bl	_call_via_r1
	b	.L376
.L400:
	.align	2, 0
.L399:
	.word	gPartyMenu
.L375:
	ldr	r0, .L401
	ldrb	r0, [r0, #0xb]
	sub	r0, r0, #0x3
	cmp	r0, #0xa
	bls	.LCB3041
	b	.L397	@long jump
.LCB3041:
	lsl	r0, r0, #0x2
	ldr	r1, .L401+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L402:
	.align	2, 0
.L401:
	.word	gPartyMenu
	.word	.L398
	.align	2, 0
	.align	2, 0
.L398:
	.word	.L380
	.word	.L397
	.word	.L388
	.word	.L388
	.word	.L385
	.word	.L390
	.word	.L397
	.word	.L378
	.word	.L391
	.word	.L383
	.word	.L393
.L378:
	add	r0, r5, #0
	bl	IsSelectedMonNotEgg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB3067
	b	.L376	@long jump
.LCB3067:
	add	r0, r6, #0
	bl	Task_TryUseSoftboiledOnPartyMon
	b	.L376
.L380:
	add	r0, r5, #0
	bl	IsSelectedMonNotEgg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB3079
	b	.L376	@long jump
.LCB3079:
	ldr	r0, .L403
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L382	@cond_branch
	ldr	r0, .L403+0x4
	ldr	r1, [r0]
	ldr	r0, .L403+0x8
	str	r0, [r1, #0x4]
.L382:
	ldr	r0, .L403+0xc
	ldr	r1, .L403+0x10
	ldr	r2, [r0]
	add	r0, r6, #0
	bl	_call_via_r2
	b	.L376
.L404:
	.align	2, 0
.L403:
	.word	gPartyMenu
	.word	sPartyMenuInternal
	.word	CB2_SetUpExitToBattleScreen
	.word	gItemUseCB
	.word	Task_ClosePartyMenuAfterText
.L383:
	add	r0, r5, #0
	bl	IsSelectedMonNotEgg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L376	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r6, #0
	bl	TryTutorSelectedMon
	b	.L376
.L385:
	add	r0, r5, #0
	bl	IsSelectedMonNotEgg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L376	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r6, #0
	bl	TryGiveMailToSelectedMon
	b	.L376
.L388:
	add	r0, r5, #0
	bl	IsSelectedMonNotEgg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L376	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r6, #0
	bl	TryGiveItemOrMailToSelectedMon
	b	.L376
.L390:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r6, #0
	bl	SwitchSelectedMons
	b	.L376
.L391:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L405
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	strh	r0, [r1]
	ldr	r0, .L405+0x4
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x7
	bne	.L392	@cond_branch
	ldr	r4, .L405+0x8
	mov	r1, #0x0
	ldrsb	r1, [r5, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L405+0xc
	add	r0, r0, r1
	bl	GetNumberOfRelearnableMoves
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
.L392:
	add	r0, r6, #0
	bl	Task_ClosePartyMenu
	b	.L376
.L406:
	.align	2, 0
.L405:
	.word	gSpecialVar_0x8004
	.word	gPartyMenu
	.word	gSpecialVar_0x8005
	.word	gPlayerParty
.L393:
	add	r0, r5, #0
	bl	IsSelectedMonNotEgg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L376	@cond_branch
	ldrb	r1, [r5]
	add	r0, r6, #0
	bl	TryEnterMonForMinigame
	b	.L376
.L397:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r6, #0
	bl	Task_TryCreateSelectionWindow
.L376:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 HandleChooseMonSelection,.Lfe38-HandleChooseMonSelection
	.align	2, 0
	.type	 IsSelectedMonNotEgg,function
	.thumb_func
IsSelectedMonNotEgg:
	push	{lr}
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L410
	add	r0, r0, r1
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L408	@cond_branch
	mov	r0, #0x1
	b	.L409
.L411:
	.align	2, 0
.L410:
	.word	gPlayerParty
.L408:
	mov	r0, #0x1a
	bl	PlaySE
	mov	r0, #0x0
.L409:
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 IsSelectedMonNotEgg,.Lfe39-IsSelectedMonNotEgg
	.align	2, 0
	.type	 HandleChooseMonCancel,function
	.thumb_func
HandleChooseMonCancel:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L424
	ldrb	r0, [r0, #0xb]
	cmp	r0, #0x8
	beq	.L416	@cond_branch
	cmp	r0, #0x8
	bgt	.L423	@cond_branch
	cmp	r0, #0x1
	beq	.L414	@cond_branch
	b	.L418
.L425:
	.align	2, 0
.L424:
	.word	gPartyMenu
.L423:
	cmp	r0, #0xa
	beq	.L416	@cond_branch
	cmp	r0, #0xd
	beq	.L417	@cond_branch
	b	.L418
.L414:
	mov	r0, #0x1a
	bl	PlaySE
	b	.L413
.L416:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	FinishTwoMonAction
	b	.L413
.L417:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	CancelParticipationPrompt
	b	.L413
.L418:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L426
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x4
	bne	.L419	@cond_branch
	add	r0, r4, #0
	bl	DisplayCancelChooseMonYesNo
	b	.L413
.L427:
	.align	2, 0
.L426:
	.word	gPartyMenu
.L419:
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L421	@cond_branch
	ldr	r1, .L428
	mov	r0, #0x7
	strh	r0, [r1]
.L421:
	ldr	r0, .L428+0x4
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r0, #0x7
	strb	r0, [r5]
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
.L413:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L429:
	.align	2, 0
.L428:
	.word	gSpecialVar_0x8004
	.word	gPartyMenuUseExitCallback
.Lfe40:
	.size	 HandleChooseMonCancel,.Lfe40-HandleChooseMonCancel
	.align	2, 0
	.type	 DisplayCancelChooseMonYesNo,function
	.thumb_func
DisplayCancelChooseMonYesNo:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L431
	ldr	r0, [r0]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldr	r5, .L431+0x4
	ldr	r1, .L431+0x8
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	add	r0, r5, #0
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	ldr	r1, .L431+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L431+0x10
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L432:
	.align	2, 0
.L431:
	.word	sPartyMenuInternal
	.word	gStringVar4
	.word	gText_CancelBattle
	.word	gTasks
	.word	Task_CancelChooseMonYesNo
.Lfe41:
	.size	 DisplayCancelChooseMonYesNo,.Lfe41-DisplayCancelChooseMonYesNo
	.align	2, 0
	.type	 Task_CancelChooseMonYesNo,function
	.thumb_func
Task_CancelChooseMonYesNo:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L434	@cond_branch
	bl	PartyMenuDisplayYesNoMenu
	ldr	r0, .L435
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L435+0x4
	str	r0, [r1]
.L434:
	pop	{r4}
	pop	{r0}
	bx	r0
.L436:
	.align	2, 0
.L435:
	.word	gTasks
	.word	Task_HandleCancelChooseMonYesNoInput
.Lfe42:
	.size	 Task_CancelChooseMonYesNo,.Lfe42-Task_CancelChooseMonYesNo
	.align	2, 0
	.type	 Task_HandleCancelChooseMonYesNoInput,function
	.thumb_func
Task_HandleCancelChooseMonYesNoInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L439	@cond_branch
	cmp	r1, #0
	bgt	.L444	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L440	@cond_branch
	b	.L438
.L444:
	cmp	r1, #0x1
	beq	.L441	@cond_branch
	b	.L438
.L439:
	ldr	r0, .L445
	strb	r1, [r0]
	ldr	r1, .L445+0x4
	mov	r0, #0x7
	strb	r0, [r1, #0x9]
	bl	ClearSelectedPartyOrder
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
	b	.L438
.L446:
	.align	2, 0
.L445:
	.word	gPartyMenuUseExitCallback
	.word	gPartyMenu
.L440:
	mov	r0, #0x5
	bl	PlaySE
.L441:
	add	r0, r4, #0
	bl	Task_ReturnToChooseMonAfterText
.L438:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 Task_HandleCancelChooseMonYesNoInput,.Lfe43-Task_HandleCancelChooseMonYesNoInput
	.align	2, 0
	.type	 PartyMenuButtonHandler,function
	.thumb_func
PartyMenuButtonHandler:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L466
	ldrh	r1, [r0, #0x30]
	add	r3, r0, #0
	cmp	r1, #0x20
	beq	.L451	@cond_branch
	cmp	r1, #0x20
	bgt	.L460	@cond_branch
	cmp	r1, #0x10
	beq	.L452	@cond_branch
	b	.L453
.L467:
	.align	2, 0
.L466:
	.word	gMain
.L460:
	cmp	r1, #0x40
	beq	.L449	@cond_branch
	cmp	r1, #0x80
	beq	.L450	@cond_branch
	b	.L453
.L449:
	mov	r1, #0xff
	b	.L448
.L450:
	mov	r1, #0x1
	b	.L448
.L451:
	mov	r1, #0xfe
	b	.L448
.L452:
	mov	r1, #0x2
	b	.L448
.L453:
	bl	GetLRKeysPressedAndHeld
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L455	@cond_branch
	cmp	r0, #0x2
	beq	.L456	@cond_branch
	mov	r1, #0x0
	b	.L465
.L455:
	mov	r1, #0xff
	b	.L465
.L456:
	mov	r1, #0x1
.L465:
	ldr	r3, .L468
.L448:
	ldrh	r2, [r3, #0x2e]
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L461	@cond_branch
	mov	r0, #0x8
	b	.L464
.L469:
	.align	2, 0
.L468:
	.word	gMain
.L461:
	lsl	r0, r1, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L462	@cond_branch
	add	r0, r4, #0
	bl	UpdateCurrentPartySelection
	mov	r0, #0x0
	b	.L464
.L462:
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L463	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0x7
	bne	.L463	@cond_branch
	mov	r0, #0x2
	b	.L464
.L463:
	ldrh	r1, [r3, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
.L464:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 PartyMenuButtonHandler,.Lfe44-PartyMenuButtonHandler
	.align	2, 0
	.type	 UpdateCurrentPartySelection,function
	.thumb_func
UpdateCurrentPartySelection:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r4, [r5]
	ldr	r0, .L474
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L471	@cond_branch
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	UpdatePartySelectionSingleLayout
	b	.L472
.L475:
	.align	2, 0
.L474:
	.word	gPartyMenu
.L471:
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	UpdatePartySelectionDoubleLayout
.L472:
	mov	r1, #0x0
	ldrsb	r1, [r5, r1]
	lsl	r4, r4, #0x18
	asr	r0, r4, #0x18
	cmp	r1, r0
	beq	.L473	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	lsr	r0, r4, #0x18
	mov	r1, #0x0
	bl	AnimatePartySlot
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	AnimatePartySlot
.L473:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 UpdateCurrentPartySelection,.Lfe45-UpdateCurrentPartySelection
	.align	2, 0
	.type	 UpdatePartySelectionSingleLayout,function
	.thumb_func
UpdatePartySelectionSingleLayout:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L478	@cond_branch
	cmp	r1, r0
	bgt	.L502	@cond_branch
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L498	@cond_branch
	b	.L477
.L502:
	cmp	r1, #0x1
	beq	.L487	@cond_branch
	cmp	r1, #0x2
	beq	.L494	@cond_branch
	b	.L477
.L478:
	ldrb	r0, [r4]
	mov	r1, #0x0
	ldrsb	r1, [r4, r1]
	cmp	r1, #0
	bne	.L479	@cond_branch
	mov	r0, #0x7
	b	.L503
.L479:
	cmp	r1, #0x6
	bne	.L481	@cond_branch
	ldr	r0, .L505
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	b	.L503
.L506:
	.align	2, 0
.L505:
	.word	gPlayerPartyCount
.L481:
	cmp	r1, #0x7
	bne	.L483	@cond_branch
	ldr	r0, .L507
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L484	@cond_branch
	mov	r0, #0x6
	b	.L503
.L508:
	.align	2, 0
.L507:
	.word	sPartyMenuInternal
.L484:
	ldr	r0, .L509
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	b	.L503
.L510:
	.align	2, 0
.L509:
	.word	gPlayerPartyCount
.L483:
	sub	r0, r0, #0x1
	b	.L503
.L487:
	ldrb	r2, [r4]
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0x7
	beq	.L504	@cond_branch
	mov	r1, #0x0
	ldrsb	r1, [r4, r1]
	ldr	r0, .L511
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L490	@cond_branch
	ldr	r0, .L511+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L491	@cond_branch
	mov	r0, #0x6
	b	.L503
.L512:
	.align	2, 0
.L511:
	.word	gPlayerPartyCount
	.word	sPartyMenuInternal
.L491:
	mov	r0, #0x7
	b	.L503
.L490:
	add	r0, r2, #0x1
	b	.L503
.L494:
	ldr	r0, .L513
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L477	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0
	bne	.L477	@cond_branch
	ldr	r0, .L513+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1d
	cmp	r0, #0
	bne	.L503	@cond_branch
	mov	r0, #0x1
	b	.L503
.L514:
	.align	2, 0
.L513:
	.word	gPlayerPartyCount
	.word	sPartyMenuInternal
.L498:
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0
	beq	.L477	@cond_branch
	cmp	r0, #0x6
	beq	.L477	@cond_branch
	cmp	r0, #0x7
	beq	.L477	@cond_branch
	ldr	r0, .L515
	ldr	r3, [r0]
	mov	r1, #0x0
	ldrsb	r1, [r4, r1]
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r3, #0x8]
	mov	r0, #0xf
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x8]
.L504:
	mov	r0, #0x0
.L503:
	strb	r0, [r4]
.L477:
	pop	{r4}
	pop	{r0}
	bx	r0
.L516:
	.align	2, 0
.L515:
	.word	sPartyMenuInternal
.Lfe46:
	.size	 UpdatePartySelectionSingleLayout,.Lfe46-UpdatePartySelectionSingleLayout
	.align	2, 0
	.type	 UpdatePartySelectionDoubleLayout,function
	.thumb_func
UpdatePartySelectionDoubleLayout:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	asr	r5, r1, #0x18
	mov	r6, #0x1
	neg	r6, r6
	cmp	r5, r6
	beq	.L519	@cond_branch
	cmp	r5, r6
	bgt	.L554	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	cmp	r5, r0
	bne	.LCB3937
	b	.L548	@long jump
.LCB3937:
	b	.L518
.L554:
	cmp	r5, #0x1
	beq	.L527	@cond_branch
	cmp	r5, #0x2
	beq	.L536	@cond_branch
	b	.L518
.L519:
	ldrb	r1, [r4]
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0
	bne	.L520	@cond_branch
	mov	r0, #0x7
	b	.L555
.L520:
	cmp	r0, #0x6
	bne	.L522	@cond_branch
	ldr	r0, .L558
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	b	.L555
.L559:
	.align	2, 0
.L558:
	.word	gPlayerPartyCount
.L522:
	cmp	r0, #0x7
	bne	.L521	@cond_branch
	ldr	r0, .L560
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L525	@cond_branch
	mov	r0, #0x6
	b	.L555
.L561:
	.align	2, 0
.L560:
	.word	sPartyMenuInternal
.L525:
	sub	r0, r1, #0x1
	strb	r0, [r4]
.L521:
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	lsl	r1, r2, #0x18
	asr	r1, r1, #0x18
	bl	GetNewSlotDoubleLayout
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.LCB4015
	b	.L518	@long jump
.LCB4015:
.L556:
	strb	r2, [r4]
	b	.L518
.L527:
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0x6
	bne	.L528	@cond_branch
	mov	r0, #0x7
	b	.L555
.L528:
	cmp	r0, #0x7
	bne	.L530	@cond_branch
	mov	r0, #0x0
	b	.L555
.L530:
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	mov	r1, #0x1
	bl	GetNewSlotDoubleLayout
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, r6
	bne	.L556	@cond_branch
	ldr	r0, .L562
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L533	@cond_branch
	mov	r0, #0x6
	b	.L555
.L563:
	.align	2, 0
.L562:
	.word	sPartyMenuInternal
.L533:
	mov	r0, #0x7
	b	.L555
.L536:
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0
	bne	.L537	@cond_branch
	ldr	r0, .L564
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r6, r0, #0x1d
	cmp	r6, #0x3
	bne	.L538	@cond_branch
	ldr	r0, .L564+0x4
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L518	@cond_branch
	strb	r6, [r4]
	b	.L518
.L565:
	.align	2, 0
.L564:
	.word	sPartyMenuInternal
	.word	gPlayerParty+0x12c
.L538:
	ldr	r0, .L566
	b	.L557
.L567:
	.align	2, 0
.L566:
	.word	gPlayerParty+0xc8
.L537:
	cmp	r0, #0x1
	bne	.L518	@cond_branch
	ldr	r0, .L568
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r5, r0, #0x1d
	cmp	r5, #0x5
	bne	.L544	@cond_branch
	ldr	r0, .L568+0x4
.L557:
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L518	@cond_branch
	strb	r5, [r4]
	b	.L518
.L569:
	.align	2, 0
.L568:
	.word	sPartyMenuInternal
	.word	gPlayerParty+0x1f4
.L544:
	ldr	r0, .L570
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L518	@cond_branch
	mov	r0, #0x4
	b	.L555
.L571:
	.align	2, 0
.L570:
	.word	gPlayerParty+0x190
.L548:
	ldrb	r1, [r4]
	sub	r0, r1, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L549	@cond_branch
	ldr	r0, .L572
	ldr	r3, [r0]
	mov	r1, #0x0
	ldrsb	r1, [r4, r1]
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r3, #0x8]
	mov	r0, #0xf
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x8]
	mov	r0, #0x0
	b	.L555
.L573:
	.align	2, 0
.L572:
	.word	sPartyMenuInternal
.L549:
	sub	r0, r1, #0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L518	@cond_branch
	ldr	r0, .L574
	ldr	r3, [r0]
	mov	r1, #0x0
	ldrsb	r1, [r4, r1]
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r3, #0x8]
	mov	r0, #0xf
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x8]
	mov	r0, #0x1
.L555:
	strb	r0, [r4]
.L518:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L575:
	.align	2, 0
.L574:
	.word	sPartyMenuInternal
.Lfe47:
	.size	 UpdatePartySelectionDoubleLayout,.Lfe47-UpdatePartySelectionDoubleLayout
	.align	2, 0
	.type	 GetNewSlotDoubleLayout,function
	.thumb_func
GetNewSlotDoubleLayout:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	asr	r6, r1, #0x18
.L579:
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	add	r0, r0, r6
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r5, #0x18
	lsr	r0, r1, #0x18
	cmp	r0, #0x5
	bhi	.L580	@cond_branch
	asr	r4, r1, #0x18
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L584
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L579	@cond_branch
	add	r0, r4, #0
	b	.L583
.L585:
	.align	2, 0
.L584:
	.word	gPlayerParty
.L580:
	mov	r0, #0x1
	neg	r0, r0
.L583:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 GetNewSlotDoubleLayout,.Lfe48-GetNewSlotDoubleLayout
	.align	2, 0
	.globl	GetMonNickname
	.type	 GetMonNickname,function
	.thumb_func
GetMonNickname:
	push	{r4, lr}
	add	r4, r1, #0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	GetMonData
	add	r0, r4, #0
	bl	StringGet_Nickname
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 GetMonNickname,.Lfe49-GetMonNickname
	.align	2, 0
	.globl	DisplayPartyMenuMessage
	.type	 DisplayPartyMenuMessage,function
	.thumb_func
DisplayPartyMenuMessage:
	push	{r4, lr}
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	bl	PartyMenuPrintText
	ldr	r0, .L588
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L588+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	pop	{r4}
	pop	{r1}
	bx	r1
.L589:
	.align	2, 0
.L588:
	.word	Task_PrintAndWaitForText
	.word	gTasks
.Lfe50:
	.size	 DisplayPartyMenuMessage,.Lfe50-DisplayPartyMenuMessage
	.align	2, 0
	.type	 Task_PrintAndWaitForText,function
	.thumb_func
Task_PrintAndWaitForText:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	mov	r0, #0x6
	bl	RunTextPrinters_CheckActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	beq	.L591	@cond_branch
	ldr	r0, .L593
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L592	@cond_branch
	mov	r0, #0x6
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x6
	bl	ClearWindowTilemap
.L592:
	add	r0, r5, #0
	bl	DestroyTask
.L591:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L594:
	.align	2, 0
.L593:
	.word	gTasks
.Lfe51:
	.size	 Task_PrintAndWaitForText,.Lfe51-Task_PrintAndWaitForText
	.align	2, 0
	.globl	IsPartyMenuTextPrinterActive
	.type	 IsPartyMenuTextPrinterActive,function
	.thumb_func
IsPartyMenuTextPrinterActive:
	push	{lr}
	ldr	r0, .L596
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L597:
	.align	2, 0
.L596:
	.word	Task_PrintAndWaitForText
.Lfe52:
	.size	 IsPartyMenuTextPrinterActive,.Lfe52-IsPartyMenuTextPrinterActive
	.align	2, 0
	.type	 Task_WaitForLinkAndReturnToChooseMon,function
	.thumb_func
Task_WaitForLinkAndReturnToChooseMon:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	MenuHelpers_ShouldWaitForLinkRecv
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L599	@cond_branch
	mov	r0, #0x0
	bl	DisplayPartyMenuStdMessage
	ldr	r0, .L600
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L600+0x4
	str	r0, [r1]
.L599:
	pop	{r4}
	pop	{r0}
	bx	r0
.L601:
	.align	2, 0
.L600:
	.word	gTasks
	.word	Task_HandleChooseMonInput
.Lfe53:
	.size	 Task_WaitForLinkAndReturnToChooseMon,.Lfe53-Task_WaitForLinkAndReturnToChooseMon
	.align	2, 0
	.type	 Task_ReturnToChooseMonAfterText,function
	.thumb_func
Task_ReturnToChooseMonAfterText:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L603	@cond_branch
	mov	r0, #0x6
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x6
	bl	ClearWindowTilemap
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L604	@cond_branch
	ldr	r0, .L607
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L607+0x4
	b	.L606
.L608:
	.align	2, 0
.L607:
	.word	gTasks
	.word	Task_WaitForLinkAndReturnToChooseMon
.L604:
	mov	r0, #0x0
	bl	DisplayPartyMenuStdMessage
	ldr	r0, .L609
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L609+0x4
.L606:
	str	r0, [r1]
.L603:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L610:
	.align	2, 0
.L609:
	.word	gTasks
	.word	Task_HandleChooseMonInput
.Lfe54:
	.size	 Task_ReturnToChooseMonAfterText,.Lfe54-Task_ReturnToChooseMonAfterText
	.align	2, 0
	.type	 DisplayGaveHeldItemMessage,function
	.thumb_func
DisplayGaveHeldItemMessage:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	lsl	r3, r3, #0x18
	cmp	r3, #0
	bne	.L612	@cond_branch
	ldr	r3, .L617
	mov	r0, #0x5
	b	.L616
.L618:
	.align	2, 0
.L617:
	.word	0xffff
.L612:
	ldr	r0, .L619
	ldrb	r0, [r0, #0xb]
	cmp	r0, #0x6
	bne	.L614	@cond_branch
	ldr	r3, .L619+0x4
	mov	r0, #0x7
.L616:
	add	r1, r5, #0
	add	r2, r4, #0
	bl	ItemUse_SetQuestLogEvent
	b	.L613
.L620:
	.align	2, 0
.L619:
	.word	gPartyMenu
	.word	0xffff
.L614:
	ldr	r3, .L621
	mov	r0, #0x6
	add	r1, r5, #0
	add	r2, r4, #0
	bl	ItemUse_SetQuestLogEvent
.L613:
	ldr	r1, .L621+0x4
	add	r0, r5, #0
	bl	GetMonNickname
	ldr	r1, .L621+0x8
	add	r0, r4, #0
	bl	CopyItemName
	ldr	r4, .L621+0xc
	ldr	r1, .L621+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	add	r1, r6, #0
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L622:
	.align	2, 0
.L621:
	.word	0xffff
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_PkmnWasGivenItem
.Lfe55:
	.size	 DisplayGaveHeldItemMessage,.Lfe55-DisplayGaveHeldItemMessage
	.align	2, 0
	.type	 DisplayTookHeldItemMessage,function
	.thumb_func
DisplayTookHeldItemMessage:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r3, .L624
	mov	r0, #0x8
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ItemUse_SetQuestLogEvent
	ldr	r1, .L624+0x4
	add	r0, r6, #0
	bl	GetMonNickname
	ldr	r1, .L624+0x8
	add	r0, r4, #0
	bl	CopyItemName
	ldr	r4, .L624+0xc
	ldr	r1, .L624+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	add	r1, r5, #0
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L625:
	.align	2, 0
.L624:
	.word	0xffff
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_ReceivedItemFromPkmn
.Lfe56:
	.size	 DisplayTookHeldItemMessage,.Lfe56-DisplayTookHeldItemMessage
	.align	2, 0
	.type	 DisplayAlreadyHoldingItemSwitchMessage,function
	.thumb_func
DisplayAlreadyHoldingItemSwitchMessage:
	push	{r4, r5, lr}
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r1, .L627
	bl	GetMonNickname
	ldr	r1, .L627+0x4
	add	r0, r4, #0
	bl	CopyItemName
	ldr	r4, .L627+0x8
	ldr	r1, .L627+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	add	r1, r5, #0
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_PkmnAlreadyHoldingItemSwitch
.Lfe57:
	.size	 DisplayAlreadyHoldingItemSwitchMessage,.Lfe57-DisplayAlreadyHoldingItemSwitchMessage
	.align	2, 0
	.type	 DisplaySwitchedHeldItemMessage,function
	.thumb_func
DisplaySwitchedHeldItemMessage:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L630
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L630+0x4
	add	r0, r0, r1
	add	r1, r5, #0
	add	r2, r4, #0
	bl	SetSwappedHeldItemQuestLogEvent
	ldr	r1, .L630+0x8
	add	r0, r4, #0
	bl	CopyItemName
	ldr	r1, .L630+0xc
	add	r0, r5, #0
	bl	CopyItemName
	ldr	r4, .L630+0x10
	ldr	r1, .L630+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	add	r1, r6, #0
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L631:
	.align	2, 0
.L630:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_SwitchedPkmnItem
.Lfe58:
	.size	 DisplaySwitchedHeldItemMessage,.Lfe58-DisplaySwitchedHeldItemMessage
	.align	2, 0
	.type	 GiveItemToMon,function
	.thumb_func
GiveItemToMon:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	lsl	r5, r1, #0x10
	lsr	r4, r5, #0x10
	add	r7, r4, #0
	add	r0, r4, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L633	@cond_branch
	add	r0, r6, #0
	add	r1, r4, #0
	bl	GiveMailToMon
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L632	@cond_branch
.L633:
	mov	r0, sp
	strb	r7, [r0]
	mov	r1, sp
	lsr	r0, r5, #0x18
	strb	r0, [r1, #0x1]
	add	r0, r6, #0
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
.L632:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 GiveItemToMon,.Lfe59-GiveItemToMon
	.align	2, 0
	.type	 TryTakeMonItem,function
	.thumb_func
TryTakeMonItem:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sp
	strh	r0, [r1]
	cmp	r0, #0
	bne	.L636	@cond_branch
	mov	r0, #0x0
	b	.L638
.L636:
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L637	@cond_branch
	mov	r1, #0x0
	mov	r0, sp
	strh	r1, [r0]
	add	r0, r4, #0
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	mov	r0, #0x2
	b	.L638
.L637:
	mov	r0, #0x1
.L638:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 TryTakeMonItem,.Lfe60-TryTakeMonItem
	.align	2, 0
	.type	 BufferBagFullCantTakeItemMessage,function
	.thumb_func
BufferBagFullCantTakeItemMessage:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	beq	.L642	@cond_branch
	cmp	r0, #0x5
	beq	.L643	@cond_branch
	ldr	r1, .L646
	b	.L640
.L647:
	.align	2, 0
.L646:
	.word	gText_MenuBag
.L642:
	mov	r0, #0xb6
	lsl	r0, r0, #0x1
	b	.L645
.L643:
	ldr	r0, .L648
.L645:
	bl	ItemId_GetName
	add	r1, r0, #0
.L640:
	ldr	r0, .L648+0x4
	bl	StringCopy
	ldr	r0, .L648+0x8
	ldr	r1, .L648+0xc
	bl	StringExpandPlaceholders
	pop	{r0}
	bx	r0
.L649:
	.align	2, 0
.L648:
	.word	0x16d
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_BagFullCouldNotRemoveItem
.Lfe61:
	.size	 BufferBagFullCantTakeItemMessage,.Lfe61-BufferBagFullCantTakeItemMessage
	.align	2, 0
	.type	 Task_PartyMenuModifyHP,function
	.thumb_func
Task_PartyMenuModifyHP:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L654
	add	r7, r0, r1
	ldrh	r0, [r7, #0x4]
	ldrh	r1, [r7]
	add	r0, r0, r1
	strh	r0, [r7]
	ldrh	r0, [r7, #0x6]
	sub	r0, r0, #0x1
	strh	r0, [r7, #0x6]
	mov	r2, #0x8
	ldrsh	r0, [r7, r2]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L654+0x4
	add	r0, r0, r4
	mov	r1, #0x39
	add	r2, r7, #0
	bl	SetMonData
	mov	r3, #0x8
	ldrsh	r2, [r7, r3]
	mov	r0, r2
	mul	r0, r0, r5
	add	r0, r0, r4
	ldr	r6, .L654+0x8
	lsl	r2, r2, #0x4
	ldr	r1, [r6]
	add	r1, r1, r2
	mov	r2, #0x1
	bl	DisplayPartyPokemonHPCheck
	mov	r0, #0x8
	ldrsh	r2, [r7, r0]
	mov	r0, r2
	mul	r0, r0, r5
	add	r0, r0, r4
	lsl	r2, r2, #0x4
	ldr	r1, [r6]
	add	r1, r1, r2
	bl	DisplayPartyPokemonHPBarCheck
	mov	r1, #0x6
	ldrsh	r0, [r7, r1]
	cmp	r0, #0
	beq	.L652	@cond_branch
	mov	r2, #0x0
	ldrsh	r1, [r7, r2]
	cmp	r1, #0
	beq	.L652	@cond_branch
	mov	r3, #0x2
	ldrsh	r0, [r7, r3]
	cmp	r1, r0
	bne	.L651	@cond_branch
.L652:
	mov	r0, #0x0
	ldrsh	r1, [r7, r0]
	mov	r2, #0xa
	ldrsh	r0, [r7, r2]
	cmp	r1, r0
	ble	.L653	@cond_branch
	ldr	r0, .L654+0xc
	mov	r3, #0xa
	ldrsh	r2, [r7, r3]
	sub	r1, r1, r2
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
.L653:
	mov	r0, r8
	bl	SwitchTaskToFollowupFunc
.L651:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L655:
	.align	2, 0
.L654:
	.word	gTasks+0x8
	.word	gPlayerParty
	.word	sPartyMenuBoxes
	.word	gStringVar2
.Lfe62:
	.size	 Task_PartyMenuModifyHP,.Lfe62-Task_PartyMenuModifyHP
	.align	2, 0
	.globl	PartyMenuModifyHP
	.type	 PartyMenuModifyHP,function
	.thumb_func
PartyMenuModifyHP:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r0
	mov	r9, r1
	add	r5, r2, #0
	mov	sl, r3
	ldr	r7, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, sl
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	mov	r0, #0x64
	mov	r6, r9
	mul	r6, r6, r0
	ldr	r0, .L657
	add	r6, r6, r0
	mov	r0, r8
	lsl	r4, r0, #0x2
	add	r4, r4, r8
	lsl	r4, r4, #0x3
	ldr	r0, .L657+0x4
	add	r4, r4, r0
	add	r0, r6, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r4]
	add	r0, r6, #0
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r4, #0x2]
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	strh	r5, [r4, #0x4]
	mov	r0, sl
	strh	r0, [r4, #0x6]
	mov	r0, r9
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4]
	strh	r0, [r4, #0xa]
	ldr	r1, .L657+0x8
	mov	r0, r8
	add	r2, r7, #0
	bl	SetTaskFuncWithFollowupFunc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L658:
	.align	2, 0
.L657:
	.word	gPlayerParty
	.word	gTasks+0x8
	.word	Task_PartyMenuModifyHP
.Lfe63:
	.size	 PartyMenuModifyHP,.Lfe63-PartyMenuModifyHP
	.align	2, 0
	.type	 ResetHPTaskData,function
	.thumb_func
ResetHPTaskData:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L669
	add	r3, r0, r1
	cmp	r5, #0x5
	bhi	.L660	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L669+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L670:
	.align	2, 0
.L669:
	.word	gTasks+0x8
	.word	.L667
	.align	2, 0
	.align	2, 0
.L667:
	.word	.L661
	.word	.L662
	.word	.L663
	.word	.L664
	.word	.L665
	.word	.L666
.L661:
	strh	r2, [r3]
	strh	r2, [r3, #0xa]
	b	.L660
.L662:
	strh	r2, [r3, #0x2]
	b	.L660
.L663:
	strh	r2, [r3, #0x4]
	b	.L660
.L664:
	strh	r2, [r3, #0x6]
	b	.L660
.L665:
	strh	r2, [r3, #0x8]
	b	.L660
.L666:
	ldr	r1, .L671
	add	r0, r4, #0
	bl	SetTaskFuncWithFollowupFunc
.L660:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L672:
	.align	2, 0
.L671:
	.word	Task_PartyMenuModifyHP
.Lfe64:
	.size	 ResetHPTaskData,.Lfe64-ResetHPTaskData
	.align	2, 0
	.globl	GetAilmentFromStatus
	.type	 GetAilmentFromStatus,function
	.thumb_func
GetAilmentFromStatus:
	push	{lr}
	add	r1, r0, #0
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L674	@cond_branch
	mov	r0, #0x1
	b	.L679
.L674:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L675	@cond_branch
	mov	r0, #0x2
	b	.L679
.L675:
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L676	@cond_branch
	mov	r0, #0x3
	b	.L679
.L676:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L677	@cond_branch
	mov	r0, #0x4
	b	.L679
.L677:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L678	@cond_branch
	mov	r0, #0x0
	b	.L679
.L678:
	mov	r0, #0x5
.L679:
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 GetAilmentFromStatus,.Lfe65-GetAilmentFromStatus
	.align	2, 0
	.globl	GetMonAilment
	.type	 GetMonAilment,function
	.thumb_func
GetMonAilment:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.L681	@cond_branch
	mov	r0, #0x7
	b	.L684
.L681:
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	bl	GetAilmentFromStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L684	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CheckPartyPokerus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L683	@cond_branch
	mov	r0, #0x0
	b	.L684
.L683:
	mov	r0, #0x6
.L684:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 GetMonAilment,.Lfe66-GetMonAilment
	.align	2, 0
	.type	 SetPartyMonsAllowedInMinigame,function
	.thumb_func
SetPartyMonsAllowedInMinigame:
	push	{r4, r5, lr}
	ldr	r2, .L700
	ldrb	r1, [r2, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0xb
	bne	.L686	@cond_branch
	add	r5, r2, #0
	add	r5, r5, #0xe
	mov	r0, #0x0
	strh	r0, [r2, #0xe]
	ldr	r0, .L700+0x4
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L687	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L700+0x8
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L686	@cond_branch
.L691:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L700+0xc
	add	r0, r0, r1
	bl	IsMonAllowedInPokemonJump
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r0, r0, r4
	ldrh	r1, [r5]
	add	r0, r0, r1
	strh	r0, [r5]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L700+0x8
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L691	@cond_branch
	b	.L686
.L701:
	.align	2, 0
.L700:
	.word	gPartyMenu
	.word	gSpecialVar_0x8005
	.word	gPlayerPartyCount
	.word	gPlayerParty
.L687:
	mov	r4, #0x0
	b	.L699
.L697:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L702
	add	r0, r0, r1
	bl	IsMonAllowedInDodrioBerryPicking
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r0, r0, r4
	ldrh	r1, [r5]
	add	r0, r0, r1
	strh	r0, [r5]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L699:
	ldr	r0, .L702+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L697	@cond_branch
.L686:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L703:
	.align	2, 0
.L702:
	.word	gPlayerParty
	.word	gPlayerPartyCount
.Lfe67:
	.size	 SetPartyMonsAllowedInMinigame,.Lfe67-SetPartyMonsAllowedInMinigame
	.align	2, 0
	.type	 IsMonAllowedInPokemonJump,function
	.thumb_func
IsMonAllowedInPokemonJump:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L705	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	IsSpeciesAllowedInPokemonJump
	cmp	r0, #0
	beq	.L705	@cond_branch
	mov	r0, #0x1
	b	.L706
.L705:
	mov	r0, #0x0
.L706:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 IsMonAllowedInPokemonJump,.Lfe68-IsMonAllowedInPokemonJump
	.align	2, 0
	.type	 IsMonAllowedInDodrioBerryPicking,function
	.thumb_func
IsMonAllowedInDodrioBerryPicking:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L708	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0x55
	bne	.L708	@cond_branch
	mov	r0, #0x1
	b	.L709
.L708:
	mov	r0, #0x0
.L709:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 IsMonAllowedInDodrioBerryPicking,.Lfe69-IsMonAllowedInDodrioBerryPicking
	.align	2, 0
	.type	 IsMonAllowedInMinigame,function
	.thumb_func
IsMonAllowedInMinigame:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L713
	mov	r2, #0xe
	ldrsh	r1, [r1, r2]
	asr	r1, r1, r0
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L712	@cond_branch
	mov	r0, #0x0
.L712:
	pop	{r1}
	bx	r1
.L714:
	.align	2, 0
.L713:
	.word	gPartyMenu
.Lfe70:
	.size	 IsMonAllowedInMinigame,.Lfe70-IsMonAllowedInMinigame
	.align	2, 0
	.type	 TryEnterMonForMinigame,function
	.thumb_func
TryEnterMonForMinigame:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r0, r5, #0
	bl	IsMonAllowedInMinigame
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L716	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L718
	strh	r5, [r0]
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
	b	.L717
.L719:
	.align	2, 0
.L718:
	.word	gSpecialVar_0x8004
.L716:
	mov	r0, #0x1a
	bl	PlaySE
	ldr	r0, .L720
	mov	r1, #0x0
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L720+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L720+0x8
	str	r1, [r0]
.L717:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L721:
	.align	2, 0
.L720:
	.word	gText_PkmnCantParticipate
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.Lfe71:
	.size	 TryEnterMonForMinigame,.Lfe71-TryEnterMonForMinigame
	.align	2, 0
	.type	 CancelParticipationPrompt,function
	.thumb_func
CancelParticipationPrompt:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L723
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L723+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L723+0x8
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L724:
	.align	2, 0
.L723:
	.word	gText_CancelParticipation
	.word	gTasks
	.word	Task_CancelParticipationYesNo
.Lfe72:
	.size	 CancelParticipationPrompt,.Lfe72-CancelParticipationPrompt
	.align	2, 0
	.type	 Task_CancelParticipationYesNo,function
	.thumb_func
Task_CancelParticipationYesNo:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L726	@cond_branch
	bl	PartyMenuDisplayYesNoMenu
	ldr	r0, .L727
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L727+0x4
	str	r0, [r1]
.L726:
	pop	{r4}
	pop	{r0}
	bx	r0
.L728:
	.align	2, 0
.L727:
	.word	gTasks
	.word	Task_HandleCancelParticipationYesNoInput
.Lfe73:
	.size	 Task_CancelParticipationYesNo,.Lfe73-Task_CancelParticipationYesNo
	.align	2, 0
	.type	 Task_HandleCancelParticipationYesNoInput,function
	.thumb_func
Task_HandleCancelParticipationYesNoInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L731	@cond_branch
	cmp	r1, #0
	bgt	.L736	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L732	@cond_branch
	b	.L730
.L736:
	cmp	r1, #0x1
	beq	.L733	@cond_branch
	b	.L730
.L731:
	ldr	r1, .L737
	mov	r0, #0x7
	strh	r0, [r1]
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
	b	.L730
.L738:
	.align	2, 0
.L737:
	.word	gSpecialVar_0x8004
.L732:
	mov	r0, #0x5
	bl	PlaySE
.L733:
	ldr	r0, .L739
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L739+0x4
	str	r0, [r1]
.L730:
	pop	{r4}
	pop	{r0}
	bx	r0
.L740:
	.align	2, 0
.L739:
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.Lfe74:
	.size	 Task_HandleCancelParticipationYesNoInput,.Lfe74-Task_HandleCancelParticipationYesNoInput
	.align	2, 0
	.type	 CanMonLearnTMTutor,function
	.thumb_func
CanMonLearnTMTutor:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r7, r4, #0
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	mov	r8, r6
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	beq	.L742	@cond_branch
	mov	r0, #0x3
	b	.L751
.L742:
	mov	r0, #0x90
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bls	.L743	@cond_branch
	add	r1, r4, #0
	sub	r1, r1, #0x21
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	CanMonLearnTMHM
	cmp	r0, #0
	beq	.L752	@cond_branch
	add	r0, r7, #0
	bl	ItemIdToBattleMoveId
	b	.L753
.L743:
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	CanLearnTutorMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L747	@cond_branch
.L752:
	mov	r0, #0x1
	b	.L751
.L747:
	mov	r0, r8
	bl	GetTutorMove
.L753:
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r0, r5, #0
	bl	MonKnowsMove
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L749	@cond_branch
	mov	r0, #0x0
	b	.L751
.L749:
	mov	r0, #0x2
.L751:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe75:
	.size	 CanMonLearnTMTutor,.Lfe75-CanMonLearnTMTutor
	.align	2, 0
	.type	 GetTutorMove,function
	.thumb_func
GetTutorMove:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x10
	beq	.L757	@cond_branch
	cmp	r1, #0x10
	bgt	.L761	@cond_branch
	cmp	r1, #0xf
	beq	.L756	@cond_branch
	b	.L759
.L761:
	cmp	r1, #0x11
	beq	.L758	@cond_branch
	b	.L759
.L756:
	mov	r0, #0xa9
	lsl	r0, r0, #0x1
	b	.L762
.L757:
	ldr	r0, .L763
	b	.L762
.L764:
	.align	2, 0
.L763:
	.word	0x133
.L758:
	mov	r0, #0x9a
	lsl	r0, r0, #0x1
	b	.L762
.L759:
	ldr	r0, .L765
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
.L762:
	pop	{r1}
	bx	r1
.L766:
	.align	2, 0
.L765:
	.word	sTutorMoves
.Lfe76:
	.size	 GetTutorMove,.Lfe76-GetTutorMove
	.align	2, 0
	.type	 CanLearnTutorMove,function
	.thumb_func
CanLearnTutorMove:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	cmp	r2, #0x10
	beq	.L772	@cond_branch
	cmp	r2, #0x10
	bgt	.L782	@cond_branch
	cmp	r2, #0xf
	beq	.L769	@cond_branch
	b	.L778
.L782:
	cmp	r2, #0x11
	beq	.L775	@cond_branch
	b	.L778
.L769:
	cmp	r0, #0x3
	beq	.L779	@cond_branch
	b	.L784
.L772:
	cmp	r0, #0x6
	beq	.L779	@cond_branch
	b	.L784
.L775:
	cmp	r0, #0x9
	beq	.L779	@cond_branch
	b	.L784
.L778:
	ldr	r1, .L785
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	asr	r0, r0, r2
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L779	@cond_branch
.L784:
	mov	r0, #0x0
	b	.L783
.L786:
	.align	2, 0
.L785:
	.word	sTutorLearnsets
.L779:
	mov	r0, #0x1
.L783:
	pop	{r1}
	bx	r1
.Lfe77:
	.size	 CanLearnTutorMove,.Lfe77-CanLearnTutorMove
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_WaitFadeIn,function
	.thumb_func
Task_FirstBattleEnterParty_WaitFadeIn:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L789
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L788	@cond_branch
	ldr	r0, .L789+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L789+0x8
	str	r0, [r1]
.L788:
	pop	{r0}
	bx	r0
.L790:
	.align	2, 0
.L789:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_FirstBattleEnterParty_DarkenScreen
.Lfe78:
	.size	 Task_FirstBattleEnterParty_WaitFadeIn,.Lfe78-Task_FirstBattleEnterParty_WaitFadeIn
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_DarkenScreen,function
	.thumb_func
Task_FirstBattleEnterParty_DarkenScreen:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L792
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x6
	bl	BeginNormalPaletteFade
	ldr	r1, .L792+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L792+0x8
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L793:
	.align	2, 0
.L792:
	.word	-0xe001
	.word	gTasks
	.word	Task_FirstBattleEnterParty_WaitDarken
.Lfe79:
	.size	 Task_FirstBattleEnterParty_DarkenScreen,.Lfe79-Task_FirstBattleEnterParty_DarkenScreen
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_WaitDarken,function
	.thumb_func
Task_FirstBattleEnterParty_WaitDarken:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L796
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L795	@cond_branch
	ldr	r0, .L796+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L796+0x8
	str	r0, [r1]
.L795:
	pop	{r0}
	bx	r0
.L797:
	.align	2, 0
.L796:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_FirstBattleEnterParty_CreatePrinter
.Lfe80:
	.size	 Task_FirstBattleEnterParty_WaitDarken,.Lfe80-Task_FirstBattleEnterParty_WaitDarken
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_CreatePrinter,function
	.thumb_func
Task_FirstBattleEnterParty_CreatePrinter:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	FirstBattleEnterParty_CreateWindowAndMsg1Printer
	ldr	r2, .L799
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x8]
	ldr	r0, .L799+0x4
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L800:
	.align	2, 0
.L799:
	.word	gTasks
	.word	Task_FirstBattleEnterParty_RunPrinterMsg1
.Lfe81:
	.size	 Task_FirstBattleEnterParty_CreatePrinter,.Lfe81-Task_FirstBattleEnterParty_CreatePrinter
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_RunPrinterMsg1,function
	.thumb_func
Task_FirstBattleEnterParty_RunPrinterMsg1:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r4, r1, #0x3
	ldr	r5, .L803
	add	r0, r4, r5
	ldrb	r0, [r0]
	bl	RunTextPrinters_CheckActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	beq	.L802	@cond_branch
	add	r0, r5, #0
	sub	r0, r0, #0x8
	add	r0, r4, r0
	ldr	r1, .L803+0x4
	str	r1, [r0]
.L802:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L804:
	.align	2, 0
.L803:
	.word	gTasks+0x8
	.word	Task_FirstBattleEnterParty_LightenFirstMonIcon
.Lfe82:
	.size	 Task_FirstBattleEnterParty_RunPrinterMsg1,.Lfe82-Task_FirstBattleEnterParty_RunPrinterMsg1
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_LightenFirstMonIcon,function
	.thumb_func
Task_FirstBattleEnterParty_LightenFirstMonIcon:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L806
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x6
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, .L806+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L806+0x8
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L807:
	.align	2, 0
.L806:
	.word	-0xfff8
	.word	gTasks
	.word	Task_FirstBattleEnterParty_WaitLightenFirstMonIcon
.Lfe83:
	.size	 Task_FirstBattleEnterParty_LightenFirstMonIcon,.Lfe83-Task_FirstBattleEnterParty_LightenFirstMonIcon
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_WaitLightenFirstMonIcon,function
	.thumb_func
Task_FirstBattleEnterParty_WaitLightenFirstMonIcon:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L810
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L809	@cond_branch
	ldr	r0, .L810+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L810+0x8
	str	r0, [r1]
.L809:
	pop	{r0}
	bx	r0
.L811:
	.align	2, 0
.L810:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_FirstBattleEnterParty_StartPrintMsg2
.Lfe84:
	.size	 Task_FirstBattleEnterParty_WaitLightenFirstMonIcon,.Lfe84-Task_FirstBattleEnterParty_WaitLightenFirstMonIcon
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_StartPrintMsg2,function
	.thumb_func
Task_FirstBattleEnterParty_StartPrintMsg2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r5, .L813
	add	r0, r4, r5
	ldrb	r0, [r0]
	ldr	r1, .L813+0x4
	bl	PartyMenu_Oak_PrintText
	sub	r5, r5, #0x8
	add	r4, r4, r5
	ldr	r0, .L813+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L814:
	.align	2, 0
.L813:
	.word	gTasks+0x8
	.word	gText_OakThisIsListOfPokemon
	.word	Task_FirstBattleEnterParty_RunPrinterMsg2
.Lfe85:
	.size	 Task_FirstBattleEnterParty_StartPrintMsg2,.Lfe85-Task_FirstBattleEnterParty_StartPrintMsg2
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_RunPrinterMsg2,function
	.thumb_func
Task_FirstBattleEnterParty_RunPrinterMsg2:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r5, r1, #0x3
	ldr	r6, .L817
	add	r4, r5, r6
	ldrb	r0, [r4]
	bl	RunTextPrinters_CheckActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	beq	.L816	@cond_branch
	ldrb	r0, [r4]
	bl	FirstBattleEnterParty_DestroyVoiceoverWindow
	add	r0, r6, #0
	sub	r0, r0, #0x8
	add	r0, r5, r0
	ldr	r1, .L817+0x4
	str	r1, [r0]
.L816:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L818:
	.align	2, 0
.L817:
	.word	gTasks+0x8
	.word	Task_FirstBattleEnterParty_FadeNormal
.Lfe86:
	.size	 Task_FirstBattleEnterParty_RunPrinterMsg2,.Lfe86-Task_FirstBattleEnterParty_RunPrinterMsg2
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_FadeNormal,function
	.thumb_func
Task_FirstBattleEnterParty_FadeNormal:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L820
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x6
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, .L820+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L820+0x8
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L821:
	.align	2, 0
.L820:
	.word	0xfff7
	.word	gTasks
	.word	Task_FirstBattleEnterParty_WaitFadeNormal
.Lfe87:
	.size	 Task_FirstBattleEnterParty_FadeNormal,.Lfe87-Task_FirstBattleEnterParty_FadeNormal
	.align	2, 0
	.type	 Task_FirstBattleEnterParty_WaitFadeNormal,function
	.thumb_func
Task_FirstBattleEnterParty_WaitFadeNormal:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L826
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L823	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x4f
	mov	r2, #0xd0
	bl	LoadUserWindowGfx
	mov	r0, #0x0
	mov	r1, #0x58
	mov	r2, #0xf0
	bl	LoadStdWindowGfx
	ldr	r0, .L826+0x4
	ldrb	r0, [r0, #0xb]
	cmp	r0, #0x3
	bne	.L824	@cond_branch
	mov	r0, #0x5
	bl	DisplayPartyMenuStdMessage
	b	.L825
.L827:
	.align	2, 0
.L826:
	.word	gPaletteFade
	.word	gPartyMenu
.L824:
	mov	r0, #0x0
	bl	DisplayPartyMenuStdMessage
.L825:
	ldr	r0, .L828
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L828+0x4
	str	r0, [r1]
.L823:
	pop	{r4}
	pop	{r0}
	bx	r0
.L829:
	.align	2, 0
.L828:
	.word	gTasks
	.word	Task_HandleChooseMonInput
.Lfe88:
	.size	 Task_FirstBattleEnterParty_WaitFadeNormal,.Lfe88-Task_FirstBattleEnterParty_WaitFadeNormal
	.align	2, 0
	.type	 Task_PartyMenu_Pokedude,function
	.thumb_func
Task_PartyMenu_Pokedude:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L831
	add	r3, r1, r0
	mov	r2, #0x0
	strh	r2, [r3]
	sub	r0, r0, #0x8
	add	r1, r1, r0
	ldr	r0, .L831+0x4
	str	r0, [r1]
	bx	lr
.L832:
	.align	2, 0
.L831:
	.word	gTasks+0x8
	.word	Task_PartyMenu_PokedudeStep
.Lfe89:
	.size	 Task_PartyMenu_Pokedude,.Lfe89-Task_PartyMenu_Pokedude
	.align	2, 0
	.type	 Task_PartyMenu_PokedudeStep,function
	.thumb_func
Task_PartyMenu_PokedudeStep:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L842
	add	r6, r0, r1
	ldr	r0, .L842+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L834	@cond_branch
	add	r0, r5, #0
	bl	PartyMenuPokedudeIsCancelled
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L834	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0xa0
	beq	.L837	@cond_branch
	cmp	r0, #0xa0
	bgt	.L841	@cond_branch
	cmp	r0, #0x50
	beq	.L836	@cond_branch
	b	.L835
.L843:
	.align	2, 0
.L842:
	.word	gTasks+0x8
	.word	gPaletteFade
.L841:
	cmp	r0, #0xf0
	beq	.L838	@cond_branch
	b	.L835
.L836:
	ldr	r0, .L844
	mov	r1, #0x2
	bl	UpdateCurrentPartySelection
	b	.L835
.L845:
	.align	2, 0
.L844:
	.word	gPartyMenu+0x9
.L837:
	mov	r0, #0x5
	bl	PlaySE
	bl	CreateSelectionWindow
	b	.L835
.L838:
	ldr	r4, .L846
	ldr	r0, [r4]
	add	r0, r0, #0xe
	bl	PartyMenuRemoveWindow
	ldr	r1, .L846+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xf]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
.L835:
	ldrh	r0, [r6]
	add	r0, r0, #0x1
	strh	r0, [r6]
.L834:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L847:
	.align	2, 0
.L846:
	.word	sPartyMenuInternal
	.word	sCursorOptions
.Lfe90:
	.size	 Task_PartyMenu_PokedudeStep,.Lfe90-Task_PartyMenu_PokedudeStep
	.align	2, 0
	.type	 PartyMenuPokedudeIsCancelled,function
	.thumb_func
PartyMenuPokedudeIsCancelled:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L851
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L849	@cond_branch
	mov	r0, #0x0
	b	.L850
.L852:
	.align	2, 0
.L851:
	.word	gMain
.L849:
	ldr	r0, .L853
	ldr	r1, [r0]
	ldr	r0, .L853+0x4
	str	r0, [r1, #0x4]
	add	r0, r2, #0
	bl	Task_ClosePartyMenu
	mov	r0, #0x1
.L850:
	pop	{r1}
	bx	r1
.L854:
	.align	2, 0
.L853:
	.word	sPartyMenuInternal
	.word	PartyMenuHandlePokedudeCancel
.Lfe91:
	.size	 PartyMenuPokedudeIsCancelled,.Lfe91-PartyMenuPokedudeIsCancelled
	.align	2, 0
	.type	 PartyMenuHandlePokedudeCancel,function
	.thumb_func
PartyMenuHandlePokedudeCancel:
	push	{lr}
	bl	FreeRestoreBattleData
	bl	LoadPlayerParty
	bl	SetTeachyTvControllerModeToResume
	ldr	r0, .L856
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L857:
	.align	2, 0
.L856:
	.word	CB2_ReturnToTeachyTV
.Lfe92:
	.size	 PartyMenuHandlePokedudeCancel,.Lfe92-PartyMenuHandlePokedudeCancel
	.align	2, 0
	.type	 Task_PartyMenuFromBag_Pokedude,function
	.thumb_func
Task_PartyMenuFromBag_Pokedude:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L859
	add	r3, r1, r0
	mov	r2, #0x0
	strh	r2, [r3]
	sub	r0, r0, #0x8
	add	r1, r1, r0
	ldr	r0, .L859+0x4
	str	r0, [r1]
	bx	lr
.L860:
	.align	2, 0
.L859:
	.word	gTasks+0x8
	.word	Task_PartyMenuFromBag_PokedudeStep
.Lfe93:
	.size	 Task_PartyMenuFromBag_Pokedude,.Lfe93-Task_PartyMenuFromBag_Pokedude
	.align	2, 0
	.type	 Task_PartyMenuFromBag_PokedudeStep,function
	.thumb_func
Task_PartyMenuFromBag_PokedudeStep:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r5, r2, #0
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L865
	add	r4, r0, r1
	ldr	r0, .L865+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L862	@cond_branch
	add	r0, r2, #0
	bl	PartyMenuPokedudeIsCancelled
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L862	@cond_branch
	ldrh	r1, [r4]
	mov	r2, #0x0
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x50
	beq	.L863	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4]
	b	.L862
.L866:
	.align	2, 0
.L865:
	.word	gTasks+0x8
	.word	gPaletteFade
.L863:
	ldr	r0, .L867
	ldr	r1, [r0]
	ldr	r0, .L867+0x4
	str	r0, [r1, #0x4]
	ldr	r0, .L867+0x8
	ldr	r1, .L867+0xc
	ldr	r2, [r0]
	add	r0, r5, #0
	bl	_call_via_r2
.L862:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L868:
	.align	2, 0
.L867:
	.word	sPartyMenuInternal
	.word	CB2_SetUpExitToBattleScreen
	.word	gItemUseCB
	.word	Task_ClosePartyMenuAfterText
.Lfe94:
	.size	 Task_PartyMenuFromBag_PokedudeStep,.Lfe94-Task_PartyMenuFromBag_PokedudeStep
	.align	2, 0
	.type	 InitPartyMenuWindows,function
	.thumb_func
InitPartyMenuWindows:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x1
	beq	.L872	@cond_branch
	cmp	r0, #0x1
	bgt	.L876	@cond_branch
	cmp	r0, #0
	beq	.L871	@cond_branch
	b	.L874
.L876:
	cmp	r1, #0x2
	beq	.L873	@cond_branch
	b	.L874
.L871:
	ldr	r0, .L882
	bl	InitWindows
	b	.L870
.L883:
	.align	2, 0
.L882:
	.word	sSinglePartyMenuWindowTemplate
.L872:
	ldr	r0, .L884
	bl	InitWindows
	b	.L870
.L885:
	.align	2, 0
.L884:
	.word	sDoublePartyMenuWindowTemplate
.L873:
	ldr	r0, .L886
	bl	InitWindows
	b	.L870
.L887:
	.align	2, 0
.L886:
	.word	sMultiPartyMenuWindowTemplate
.L874:
	ldr	r0, .L888
	bl	InitWindows
.L870:
	bl	DeactivateAllTextPrinters
	mov	r4, #0x0
.L880:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L880	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x4f
	mov	r2, #0xd0
	bl	LoadUserWindowGfx
	mov	r0, #0x0
	mov	r1, #0x58
	mov	r2, #0xf0
	bl	LoadStdWindowGfx
	mov	r0, #0x2
	bl	GetTextWindowPalette
	mov	r1, #0xc0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x0
	bl	GetTextWindowPalette
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r4}
	pop	{r0}
	bx	r0
.L889:
	.align	2, 0
.L888:
	.word	sShowcaseMultiPartyMenuWindowTemplate
.Lfe95:
	.size	 InitPartyMenuWindows,.Lfe95-InitPartyMenuWindows
	.align	2, 0
	.type	 CreateCancelConfirmWindows,function
	.thumb_func
CreateCancelConfirmWindows:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L896
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.LCB6816
	b	.L891	@long jump
.LCB6816:
	cmp	r2, #0x1
	bne	.L892	@cond_branch
	ldr	r0, .L896+0x4
	bl	AddWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldr	r5, .L896+0x8
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r2, #0x30
	sub	r2, r2, r0
	lsr	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	ldr	r0, .L896+0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0xc]
	str	r5, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r3, #0x1
	bl	AddTextPrinterParameterized4
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldr	r0, .L896+0x10
	bl	AddWindow
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	b	.L893
.L897:
	.align	2, 0
.L896:
	.word	gPartyMenu
	.word	sConfirmButtonWindowTemplate
	.word	gText_PartyMenu_OK
	.word	sFontColorTable
	.word	sMultiCancelButtonWindowTemplate
.L892:
	ldr	r0, .L898
	bl	AddWindow
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x3
.L893:
	add	r0, r6, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldr	r0, .L898+0x4
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0xa
	beq	.L894	@cond_branch
	ldr	r4, .L898+0x8
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r1, #0x30
	sub	r1, r1, r0
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	add	r1, r5, r1
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L898+0xc
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	add	r0, r6, #0
	mov	r1, #0x0
	add	r2, r5, #0
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	b	.L895
.L899:
	.align	2, 0
.L898:
	.word	sCancelButtonWindowTemplate
	.word	gPartyMenu
	.word	gFameCheckerText_Cancel
	.word	sFontColorTable
.L894:
	ldr	r4, .L900
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r1, #0x30
	sub	r1, r1, r0
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	add	r1, r5, r1
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L900+0x4
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	add	r0, r6, #0
	mov	r1, #0x0
	add	r2, r5, #0
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
.L895:
	add	r0, r6, #0
	bl	PutWindowTilemap
	add	r0, r6, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
.L891:
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L901:
	.align	2, 0
.L900:
	.word	gOtherText_Exit
	.word	sFontColorTable
.Lfe96:
	.size	 CreateCancelConfirmWindows,.Lfe96-CreateCancelConfirmWindows
	.align	2, 0
	.type	 GetPartyMenuPalBufferPtr,function
	.thumb_func
GetPartyMenuPalBufferPtr:
	lsl	r0, r0, #0x18
	ldr	r1, .L903
	lsr	r0, r0, #0x17
	add	r0, r0, #0x18
	ldr	r1, [r1]
	add	r1, r1, r0
	add	r0, r1, #0
	bx	lr
.L904:
	.align	2, 0
.L903:
	.word	sPartyMenuInternal
.Lfe97:
	.size	 GetPartyMenuPalBufferPtr,.Lfe97-GetPartyMenuPalBufferPtr
	.align	2, 0
	.type	 BlitBitmapToPartyWindow,function
	.thumb_func
BlitBitmapToPartyWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	str	r1, [sp, #0xc]
	ldr	r1, [sp, #0x4c]
	ldr	r4, [sp, #0x50]
	ldr	r5, [sp, #0x54]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x10]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x14]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x18]
	lsl	r4, r4, #0x18
	lsr	r6, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	sl, r5
	mov	r0, sl
	mul	r0, r0, r6
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	mov	r9, r0
	cmp	r0, #0
	beq	.L906	@cond_branch
	mov	r5, #0x0
	ldr	r0, [sp, #0x14]
	lsl	r0, r0, #0x13
	str	r0, [sp, #0x1c]
	ldr	r1, [sp, #0x18]
	lsl	r1, r1, #0x13
	str	r1, [sp, #0x20]
	lsl	r2, r6, #0x13
	str	r2, [sp, #0x24]
	mov	r0, sl
	lsl	r0, r0, #0x13
	str	r0, [sp, #0x28]
	cmp	r5, sl
	bcs	.L908	@cond_branch
.L910:
	mov	r4, #0x0
	add	r1, r5, #0x1
	mov	r8, r1
	cmp	r4, r6
	bcs	.L909	@cond_branch
	ldr	r2, [sp, #0x18]
	add	r0, r2, r5
	ldr	r2, [sp, #0x10]
	mov	r1, r0
	mul	r1, r1, r2
	add	r7, r1, #0
.L914:
	ldr	r1, [sp, #0x14]
	add	r0, r1, r4
	add	r0, r0, r7
	ldr	r2, [sp, #0xc]
	add	r0, r2, r0
	ldrb	r0, [r0]
	bl	GetPartyMenuBgTile
	mov	r1, r5
	mul	r1, r1, r6
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	add	r1, r1, r9
	mov	r2, #0x10
	bl	CpuSet
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bcc	.L914	@cond_branch
.L909:
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, sl
	bcc	.L910	@cond_branch
.L908:
	ldr	r0, [sp, #0x1c]
	lsr	r2, r0, #0x10
	ldr	r1, [sp, #0x20]
	lsr	r3, r1, #0x10
	ldr	r1, [sp, #0x24]
	lsr	r0, r1, #0x10
	str	r0, [sp]
	ldr	r1, [sp, #0x28]
	lsr	r0, r1, #0x10
	str	r0, [sp, #0x4]
	ldr	r0, [sp, #0x8]
	mov	r1, r9
	bl	BlitBitmapToWindow
	mov	r0, r9
	bl	Free
.L906:
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe98:
	.size	 BlitBitmapToPartyWindow,.Lfe98-BlitBitmapToPartyWindow
	.align	2, 0
	.type	 BlitBitmapToPartyWindow_LeftColumn,function
	.thumb_func
BlitBitmapToPartyWindow_LeftColumn:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	ldr	r4, [sp, #0x1c]
	ldr	r5, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	cmp	r3, #0
	bne	.L918	@cond_branch
	cmp	r4, #0
	bne	.L918	@cond_branch
	mov	r3, #0xa
	mov	r4, #0x7
.L918:
	cmp	r5, #0
	bne	.L919	@cond_branch
	ldr	r1, .L921
	str	r2, [sp]
	str	r3, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r2, #0xa
	add	r3, r6, #0
	bl	BlitBitmapToPartyWindow
	b	.L920
.L922:
	.align	2, 0
.L921:
	.word	sSlotTilemap_Main
.L919:
	ldr	r1, .L923
	str	r2, [sp]
	str	r3, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r2, #0xa
	add	r3, r6, #0
	bl	BlitBitmapToPartyWindow
.L920:
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L924:
	.align	2, 0
.L923:
	.word	sSlotTilemap_MainNoHP
.Lfe99:
	.size	 BlitBitmapToPartyWindow_LeftColumn,.Lfe99-BlitBitmapToPartyWindow_LeftColumn
	.align	2, 0
	.type	 BlitBitmapToPartyWindow_RightColumn,function
	.thumb_func
BlitBitmapToPartyWindow_RightColumn:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	ldr	r4, [sp, #0x1c]
	ldr	r5, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	cmp	r3, #0
	bne	.L926	@cond_branch
	cmp	r4, #0
	bne	.L926	@cond_branch
	mov	r3, #0x12
	mov	r4, #0x3
.L926:
	cmp	r5, #0
	bne	.L927	@cond_branch
	ldr	r1, .L929
	str	r2, [sp]
	str	r3, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r2, #0x12
	add	r3, r6, #0
	bl	BlitBitmapToPartyWindow
	b	.L928
.L930:
	.align	2, 0
.L929:
	.word	sSlotTilemap_Wide
.L927:
	ldr	r1, .L931
	str	r2, [sp]
	str	r3, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r2, #0x12
	add	r3, r6, #0
	bl	BlitBitmapToPartyWindow
.L928:
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L932:
	.align	2, 0
.L931:
	.word	sSlotTilemap_WideNoHP
.Lfe100:
	.size	 BlitBitmapToPartyWindow_RightColumn,.Lfe100-BlitBitmapToPartyWindow_RightColumn
	.align	2, 0
	.type	 DrawEmptySlot,function
	.thumb_func
DrawEmptySlot:
	push	{lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L934
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x12
	str	r2, [sp, #0x4]
	mov	r2, #0x3
	str	r2, [sp, #0x8]
	mov	r2, #0x12
	mov	r3, #0x0
	bl	BlitBitmapToPartyWindow
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L935:
	.align	2, 0
.L934:
	.word	sSlotTilemap_WideEmpty
.Lfe101:
	.size	 DrawEmptySlot,.Lfe101-DrawEmptySlot
	.align	2, 0
	.type	 LoadPartyBoxPalette,function
	.thumb_func
LoadPartyBoxPalette:
	push	{r4, r5, r6, r7, lr}
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r5, r4, #0
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x5
	bl	GetWindowAttribute
	lsl	r0, r0, #0x1c
	lsr	r6, r0, #0x18
	add	r7, r6, #0
	mov	r0, #0x20
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L937	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L938	@cond_branch
	ldr	r5, .L959
	b	.L957
.L960:
	.align	2, 0
.L959:
	.word	sPartyBoxSelectedForActionPalIds1
.L938:
	ldr	r5, .L961
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L961+0x4
	ldrb	r1, [r4]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x2]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x2]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r5, .L961+0x8
	b	.L958
.L962:
	.align	2, 0
.L961:
	.word	sPartyBoxSelectedForActionPalIds1
	.word	sPartyBoxPalOffsets1
	.word	sPartyBoxSelectedForActionPalIds2
.L937:
	mov	r0, #0x10
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L941	@cond_branch
	ldr	r5, .L963
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L963+0x4
	ldrb	r1, [r4]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x2]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x2]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r5, .L963+0x8
	b	.L958
.L964:
	.align	2, 0
.L963:
	.word	sPartyBoxSelectedForActionPalIds1
	.word	sPartyBoxPalOffsets1
	.word	sPartyBoxSelectedForActionPalIds2
.L941:
	mov	r0, #0x4
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L943	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L944	@cond_branch
	ldr	r5, .L965
	b	.L957
.L966:
	.align	2, 0
.L965:
	.word	sPartyBoxSelectedForActionPalIds1
.L944:
	ldr	r5, .L967
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L967+0x4
	ldrb	r1, [r4]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x2]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x2]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r5, .L967+0x8
	b	.L958
.L968:
	.align	2, 0
.L967:
	.word	sPartyBoxSelectedForActionPalIds1
	.word	sPartyBoxPalOffsets1
	.word	sPartyBoxSelectedForActionPalIds2
.L943:
	mov	r0, #0x2
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L947	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L948	@cond_branch
	ldr	r5, .L969
	b	.L957
.L970:
	.align	2, 0
.L969:
	.word	sPartyBoxCurrSelectionFaintedPalIds
.L948:
	ldr	r5, .L971
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L971+0x4
	ldrb	r1, [r4]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x2]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x2]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r5, .L971+0x8
	b	.L958
.L972:
	.align	2, 0
.L971:
	.word	sPartyBoxFaintedPalIds1
	.word	sPartyBoxPalOffsets1
	.word	sPartyBoxFaintedPalIds2
.L947:
	mov	r0, #0x8
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L951	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L952	@cond_branch
	ldr	r5, .L973
	b	.L957
.L974:
	.align	2, 0
.L973:
	.word	sPartyBoxCurrSelectionMultiPalIds
.L952:
	ldr	r5, .L975
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L975+0x4
	ldrb	r1, [r4]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x2]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x2]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r5, .L975+0x8
	b	.L958
.L976:
	.align	2, 0
.L975:
	.word	sPartyBoxMultiPalIds1
	.word	sPartyBoxPalOffsets1
	.word	sPartyBoxMultiPalIds2
.L951:
	mov	r0, #0x1
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L955	@cond_branch
	ldr	r5, .L977
.L957:
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L977+0x4
	ldrb	r1, [r4]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x2]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x2]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r5, .L977+0x8
.L958:
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L977+0xc
	ldrb	r1, [r4]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x2]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x2]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	b	.L940
.L978:
	.align	2, 0
.L977:
	.word	sPartyBoxCurrSelectionPalIds1
	.word	sPartyBoxPalOffsets1
	.word	sPartyBoxCurrSelectionPalIds2
	.word	sPartyBoxPalOffsets2
.L955:
	ldr	r5, .L979
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L979+0x4
	ldrb	r1, [r4]
	add	r1, r1, r7
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r7
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x2]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x2]
	add	r1, r1, r7
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r5, .L979+0x8
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L979+0xc
	ldrb	r1, [r4]
	add	r1, r1, r7
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r7
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x2]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x2]
	add	r1, r1, r7
	mov	r2, #0x2
	bl	LoadPalette
.L940:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L980:
	.align	2, 0
.L979:
	.word	sPartyBoxEmptySlotPalIds1
	.word	sPartyBoxPalOffsets1
	.word	sPartyBoxEmptySlotPalIds2
	.word	sPartyBoxPalOffsets2
.Lfe102:
	.size	 LoadPartyBoxPalette,.Lfe102-LoadPartyBoxPalette
	.align	2, 0
	.type	 DisplayPartyPokemonBarDetail,function
	.thumb_func
DisplayPartyPokemonBarDetail:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r5, [r3]
	ldrb	r3, [r3, #0x1]
	lsl	r4, r2, #0x1
	add	r4, r4, r2
	ldr	r2, .L982
	add	r4, r4, r2
	str	r4, [sp]
	mov	r2, #0x0
	str	r2, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	add	r2, r5, #0
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L983:
	.align	2, 0
.L982:
	.word	sFontColorTable
.Lfe103:
	.size	 DisplayPartyPokemonBarDetail,.Lfe103-DisplayPartyPokemonBarDetail
	.align	2, 0
	.type	 DisplayPartyPokemonNickname,function
	.thumb_func
DisplayPartyPokemonNickname:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	add	r7, r0, #0
	add	r6, r1, #0
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L985	@cond_branch
	cmp	r4, #0x1
	bne	.L986	@cond_branch
	ldr	r5, [r6]
	ldrb	r0, [r6, #0x8]
	ldrb	r1, [r5, #0x4]
	lsr	r1, r1, #0x3
	ldrb	r2, [r5, #0x5]
	lsr	r2, r2, #0x3
	ldrb	r3, [r5, #0x6]
	lsr	r3, r3, #0x3
	ldrb	r4, [r5, #0x7]
	lsr	r4, r4, #0x3
	str	r4, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r4, [r5]
	bl	_call_via_r4
.L986:
	add	r0, r7, #0
	add	r1, sp, #0x8
	bl	GetMonNickname
	ldrb	r0, [r6, #0x8]
	ldr	r3, [r6]
	add	r3, r3, #0x4
	add	r1, sp, #0x8
	mov	r2, #0x0
	bl	DisplayPartyPokemonBarDetail
.L985:
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 DisplayPartyPokemonNickname,.Lfe104-DisplayPartyPokemonNickname
	.align	2, 0
	.type	 DisplayPartyPokemonLevelCheck,function
	.thumb_func
DisplayPartyPokemonLevelCheck:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	add	r7, r1, #0
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	mov	r8, r4
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L988	@cond_branch
	add	r0, r6, #0
	bl	GetMonAilment
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L990	@cond_branch
	cmp	r0, #0x6
	bne	.L988	@cond_branch
.L990:
	cmp	r4, #0
	beq	.L991	@cond_branch
	ldr	r5, [r7]
	ldrb	r0, [r7, #0x8]
	ldrb	r1, [r5, #0x8]
	lsr	r1, r1, #0x3
	ldrb	r2, [r5, #0x9]
	lsr	r2, r2, #0x3
	add	r2, r2, #0x1
	ldrb	r3, [r5, #0xa]
	lsr	r3, r3, #0x3
	ldrb	r4, [r5, #0xb]
	lsr	r4, r4, #0x3
	str	r4, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r4, [r5]
	bl	_call_via_r4
.L991:
	mov	r0, r8
	cmp	r0, #0x2
	beq	.L988	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r7, #0
	bl	DisplayPartyPokemonLevel
.L988:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe105:
	.size	 DisplayPartyPokemonLevelCheck,.Lfe105-DisplayPartyPokemonLevelCheck
	.align	2, 0
	.type	 DisplayPartyPokemonLevel,function
	.thumb_func
DisplayPartyPokemonLevel:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	add	r6, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r5, .L994
	add	r0, r5, #0
	add	r1, r2, #0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L994+0x4
	ldr	r1, .L994+0x8
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r4, #0
	add	r1, r5, #0
	bl	StringAppend
	ldrb	r0, [r6, #0x8]
	ldr	r3, [r6]
	add	r3, r3, #0x8
	add	r1, r4, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonBarDetail
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L995:
	.align	2, 0
.L994:
	.word	gStringVar2
	.word	gStringVar1
	.word	gText_Lv
.Lfe106:
	.size	 DisplayPartyPokemonLevel,.Lfe106-DisplayPartyPokemonLevel
	.align	2, 0
	.type	 DisplayPartyPokemonGenderNidoranCheck,function
	.thumb_func
DisplayPartyPokemonGenderNidoranCheck:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	add	r6, r0, #0
	add	r7, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r2, #0x1
	bne	.L997	@cond_branch
	ldr	r5, [r7]
	ldrb	r0, [r7, #0x8]
	ldrb	r1, [r5, #0xc]
	lsr	r1, r1, #0x3
	ldrb	r2, [r5, #0xd]
	lsr	r2, r2, #0x3
	add	r2, r2, #0x1
	ldrb	r3, [r5, #0xe]
	lsr	r3, r3, #0x3
	ldrb	r4, [r5, #0xf]
	lsr	r4, r4, #0x3
	str	r4, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r4, [r5]
	bl	_call_via_r4
.L997:
	add	r0, r6, #0
	add	r1, sp, #0x8
	bl	GetMonNickname
	add	r0, r6, #0
	bl	GetMonGender
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	add	r2, sp, #0x8
	add	r3, r7, #0
	bl	DisplayPartyPokemonGender
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe107:
	.size	 DisplayPartyPokemonGenderNidoranCheck,.Lfe107-DisplayPartyPokemonGenderNidoranCheck
	.align	2, 0
	.type	 DisplayPartyPokemonGender,function
	.thumb_func
DisplayPartyPokemonGender:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r2
	add	r7, r3, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r5, r4, #0
	ldrb	r0, [r7, #0x8]
	mov	r1, #0x5
	bl	GetWindowAttribute
	lsl	r0, r0, #0x1c
	lsr	r6, r0, #0x18
	cmp	r4, #0
	beq	.L998	@cond_branch
	cmp	r4, #0x20
	beq	.L1001	@cond_branch
	cmp	r4, #0x1d
	bne	.L1000	@cond_branch
.L1001:
	mov	r0, #0xb
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L1007
	add	r1, r1, r0
	mov	r0, r9
	bl	StringCompare
	cmp	r0, #0
	beq	.L998	@cond_branch
.L1000:
	mov	r0, r8
	cmp	r0, #0
	beq	.L1003	@cond_branch
	cmp	r0, #0xfe
	beq	.L1004	@cond_branch
	b	.L998
.L1008:
	.align	2, 0
.L1007:
	.word	gSpeciesNames
.L1003:
	ldr	r5, .L1009
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L1009+0x4
	ldrb	r1, [r4]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r7, #0x8]
	ldr	r1, .L1009+0x8
	ldr	r3, [r7]
	add	r3, r3, #0xc
	mov	r2, #0x2
	bl	DisplayPartyPokemonBarDetail
	b	.L998
.L1010:
	.align	2, 0
.L1009:
	.word	sGenderMalePalIds
	.word	sGenderPalOffsets
	.word	gText_MaleSymbol
.L1004:
	ldr	r5, .L1011
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L1011+0x4
	ldrb	r1, [r4]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r6
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r7, #0x8]
	ldr	r1, .L1011+0x8
	ldr	r3, [r7]
	add	r3, r3, #0xc
	mov	r2, #0x2
	bl	DisplayPartyPokemonBarDetail
.L998:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1012:
	.align	2, 0
.L1011:
	.word	sGenderFemalePalIds
	.word	sGenderPalOffsets
	.word	gText_FemaleSymbol
.Lfe108:
	.size	 DisplayPartyPokemonGender,.Lfe108-DisplayPartyPokemonGender
	.align	2, 0
	.type	 DisplayPartyPokemonHPCheck,function
	.thumb_func
DisplayPartyPokemonHPCheck:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r7, r0, #0
	add	r6, r1, #0
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	mov	r8, r4
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1014	@cond_branch
	cmp	r4, #0
	beq	.L1015	@cond_branch
	ldr	r5, [r6]
	ldrb	r0, [r6, #0x8]
	ldrb	r1, [r5, #0x10]
	lsr	r1, r1, #0x3
	ldrb	r2, [r5, #0x11]
	lsr	r2, r2, #0x3
	add	r2, r2, #0x1
	ldrb	r3, [r5, #0x12]
	lsr	r3, r3, #0x3
	ldrb	r4, [r5, #0x13]
	lsr	r4, r4, #0x3
	str	r4, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r4, [r5]
	bl	_call_via_r4
.L1015:
	mov	r0, r8
	cmp	r0, #0x2
	beq	.L1014	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	DisplayPartyPokemonHP
.L1014:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe109:
	.size	 DisplayPartyPokemonHPCheck,.Lfe109-DisplayPartyPokemonHPCheck
	.align	2, 0
	.type	 DisplayPartyPokemonHP,function
	.thumb_func
DisplayPartyPokemonHP:
	push	{r4, r5, lr}
	add	r2, r0, #0
	add	r4, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r5, .L1018
	add	r0, r5, #0
	add	r1, r2, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r1, #0xba
	strb	r1, [r0]
	mov	r1, #0xff
	strb	r1, [r0, #0x1]
	ldrb	r0, [r4, #0x8]
	ldr	r3, [r4]
	add	r3, r3, #0x10
	add	r1, r5, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonBarDetail
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1019:
	.align	2, 0
.L1018:
	.word	gStringVar1
.Lfe110:
	.size	 DisplayPartyPokemonHP,.Lfe110-DisplayPartyPokemonHP
	.align	2, 0
	.type	 DisplayPartyPokemonMaxHPCheck,function
	.thumb_func
DisplayPartyPokemonMaxHPCheck:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r7, r0, #0
	add	r6, r1, #0
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	mov	r8, r4
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1021	@cond_branch
	cmp	r4, #0
	beq	.L1022	@cond_branch
	ldr	r5, [r6]
	ldrb	r0, [r6, #0x8]
	ldrb	r1, [r5, #0x14]
	lsr	r1, r1, #0x3
	add	r1, r1, #0x1
	ldrb	r2, [r5, #0x15]
	lsr	r2, r2, #0x3
	add	r2, r2, #0x1
	ldrb	r3, [r5, #0x16]
	lsr	r3, r3, #0x3
	ldrb	r4, [r5, #0x17]
	lsr	r4, r4, #0x3
	str	r4, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r4, [r5]
	bl	_call_via_r4
.L1022:
	mov	r0, r8
	cmp	r0, #0x2
	beq	.L1021	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x3a
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	DisplayPartyPokemonMaxHP
.L1021:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe111:
	.size	 DisplayPartyPokemonMaxHPCheck,.Lfe111-DisplayPartyPokemonMaxHPCheck
	.align	2, 0
	.type	 DisplayPartyPokemonMaxHP,function
	.thumb_func
DisplayPartyPokemonMaxHP:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	add	r6, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r5, .L1025
	add	r0, r5, #0
	add	r1, r2, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L1025+0x4
	ldr	r1, .L1025+0x8
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r4, #0
	add	r1, r5, #0
	bl	StringAppend
	ldrb	r0, [r6, #0x8]
	ldr	r3, [r6]
	add	r3, r3, #0x14
	add	r1, r4, #0
	mov	r2, #0x0
	bl	DisplayPartyPokemonBarDetail
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1026:
	.align	2, 0
.L1025:
	.word	gStringVar2
	.word	gStringVar1
	.word	gText_Slash
.Lfe112:
	.size	 DisplayPartyPokemonMaxHP,.Lfe112-DisplayPartyPokemonMaxHP
	.align	2, 0
	.type	 DisplayPartyPokemonHPBarCheck,function
	.thumb_func
DisplayPartyPokemonHPBarCheck:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1028	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	add	r2, r6, #0
	bl	DisplayPartyPokemonHPBar
.L1028:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe113:
	.size	 DisplayPartyPokemonHPBarCheck,.Lfe113-DisplayPartyPokemonHPBarCheck
	.align	2, 0
	.type	 DisplayPartyPokemonHPBar,function
	.thumb_func
DisplayPartyPokemonHPBar:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	add	r6, r2, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	ldrb	r0, [r6, #0x8]
	mov	r1, #0x5
	bl	GetWindowAttribute
	lsl	r0, r0, #0x1c
	lsr	r7, r0, #0x18
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r2, r9
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	beq	.L1033	@cond_branch
	cmp	r0, #0x2
	blt	.L1034	@cond_branch
	cmp	r0, #0x4
	bgt	.L1034	@cond_branch
	ldr	r5, .L1038
	b	.L1037
.L1039:
	.align	2, 0
.L1038:
	.word	sHPBarGreenPalIds
.L1033:
	ldr	r5, .L1040
.L1037:
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L1040+0x4
	ldrb	r1, [r4]
	add	r1, r1, r7
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r7
	mov	r2, #0x2
	bl	LoadPalette
	b	.L1030
.L1041:
	.align	2, 0
.L1040:
	.word	sHPBarYellowPalIds
	.word	sHPBarPalOffsets
.L1034:
	ldr	r5, .L1042
	ldrb	r0, [r5]
	bl	GetPartyMenuPalBufferPtr
	ldr	r4, .L1042+0x4
	ldrb	r1, [r4]
	add	r1, r1, r7
	mov	r2, #0x2
	bl	LoadPalette
	ldrb	r0, [r5, #0x1]
	bl	GetPartyMenuPalBufferPtr
	ldrb	r1, [r4, #0x1]
	add	r1, r1, r7
	mov	r2, #0x2
	bl	LoadPalette
.L1030:
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r2, r9
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	ldr	r2, [r6]
	ldrb	r2, [r2, #0x1a]
	bl	GetScaledHPFraction
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r6, #0x8]
	ldr	r4, .L1042+0x4
	ldrb	r1, [r4, #0x1]
	ldr	r3, [r6]
	ldrb	r2, [r3, #0x18]
	ldrb	r3, [r3, #0x19]
	str	r5, [sp]
	mov	r7, #0x1
	str	r7, [sp, #0x4]
	bl	FillWindowPixelRect
	ldrb	r0, [r6, #0x8]
	ldrb	r1, [r4]
	ldr	r3, [r6]
	ldrb	r2, [r3, #0x18]
	ldrb	r3, [r3, #0x19]
	add	r3, r3, #0x1
	str	r5, [sp]
	mov	r4, #0x2
	str	r4, [sp, #0x4]
	bl	FillWindowPixelRect
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x1a]
	cmp	r5, r0
	beq	.L1036	@cond_branch
	ldrb	r0, [r6, #0x8]
	ldrb	r2, [r1, #0x18]
	add	r2, r2, r5
	ldrb	r3, [r1, #0x19]
	ldrb	r1, [r1, #0x1a]
	sub	r1, r1, r5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp]
	str	r7, [sp, #0x4]
	mov	r1, #0xd
	bl	FillWindowPixelRect
	ldrb	r0, [r6, #0x8]
	ldr	r1, [r6]
	ldrb	r2, [r1, #0x18]
	add	r2, r2, r5
	ldrb	r3, [r1, #0x19]
	add	r3, r3, #0x1
	ldrb	r1, [r1, #0x1a]
	sub	r1, r1, r5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp]
	str	r4, [sp, #0x4]
	mov	r1, #0x2
	bl	FillWindowPixelRect
.L1036:
	ldrb	r0, [r6, #0x8]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1043:
	.align	2, 0
.L1042:
	.word	sHPBarRedPalIds
	.word	sHPBarPalOffsets
.Lfe114:
	.size	 DisplayPartyPokemonHPBar,.Lfe114-DisplayPartyPokemonHPBar
	.align	2, 0
	.type	 DisplayPartyPokemonDescriptionText,function
	.thumb_func
DisplayPartyPokemonDescriptionText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r7, r2, #0
	cmp	r7, #0
	beq	.L1045	@cond_branch
	ldr	r5, [r6]
	ldrb	r0, [r6, #0x8]
	ldrb	r1, [r5, #0x1c]
	lsr	r1, r1, #0x3
	ldrb	r2, [r5, #0x1d]
	lsr	r2, r2, #0x3
	ldrb	r3, [r5, #0x1e]
	lsr	r3, r3, #0x3
	ldrb	r4, [r5, #0x1f]
	lsr	r4, r4, #0x3
	str	r4, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	ldr	r4, [r5]
	bl	_call_via_r4
.L1045:
	cmp	r7, #0x2
	beq	.L1046	@cond_branch
	ldrb	r0, [r6, #0x8]
	ldr	r1, [r6]
	ldrb	r2, [r1, #0x1c]
	ldrb	r3, [r1, #0x1d]
	ldr	r1, .L1047
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	ldr	r4, .L1047+0x4
	mov	r5, r8
	lsl	r1, r5, #0x2
	add	r1, r1, r4
	ldr	r1, [r1]
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	bl	AddTextPrinterParameterized3
.L1046:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1048:
	.align	2, 0
.L1047:
	.word	sFontColorTable
	.word	sDescriptionStringTable
.Lfe115:
	.size	 DisplayPartyPokemonDescriptionText,.Lfe115-DisplayPartyPokemonDescriptionText
	.align	2, 0
	.type	 PartyMenuRemoveWindow,function
	.thumb_func
PartyMenuRemoveWindow:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L1050	@cond_branch
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	RemoveWindow
	mov	r0, #0xff
	strb	r0, [r4]
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
.L1050:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe116:
	.size	 PartyMenuRemoveWindow,.Lfe116-PartyMenuRemoveWindow
	.align	2, 0
	.globl	DisplayPartyMenuStdMessage
	.type	 DisplayPartyMenuStdMessage,function
	.thumb_func
DisplayPartyMenuStdMessage:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	ldr	r0, .L1067
	ldr	r4, [r0]
	add	r5, r4, #0
	add	r5, r5, #0xd
	ldrb	r0, [r4, #0xd]
	cmp	r0, #0xff
	beq	.L1052	@cond_branch
	add	r0, r5, #0
	bl	PartyMenuRemoveWindow
.L1052:
	cmp	r6, #0x7f
	beq	.L1053	@cond_branch
	add	r0, r6, #0
	sub	r0, r0, #0x16
	cmp	r0, #0x4
	bhi	.L1060	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1067+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1068:
	.align	2, 0
.L1067:
	.word	sPartyMenuInternal
	.word	.L1061
	.align	2, 0
	.align	2, 0
.L1061:
	.word	.L1055
	.word	.L1059
	.word	.L1059
	.word	.L1056
	.word	.L1057
.L1055:
	ldr	r0, .L1069
	b	.L1066
.L1070:
	.align	2, 0
.L1069:
	.word	sDoWhatWithMonMsgWindowTemplate
.L1056:
	ldr	r0, .L1071
	b	.L1066
.L1072:
	.align	2, 0
.L1071:
	.word	sDoWhatWithItemMsgWindowTemplate
.L1057:
	ldr	r0, .L1073
	b	.L1066
.L1074:
	.align	2, 0
.L1073:
	.word	sDoWhatWithMailMsgWindowTemplate
.L1059:
	ldr	r0, .L1075
.L1066:
	bl	AddWindow
	strb	r0, [r5]
	b	.L1054
.L1076:
	.align	2, 0
.L1075:
	.word	sWhichMoveMsgWindowTemplate
.L1060:
	ldr	r0, .L1077
	bl	AddWindow
	strb	r0, [r4, #0xd]
.L1054:
	cmp	r6, #0
	bne	.L1062	@cond_branch
	ldr	r0, .L1077+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L1063	@cond_branch
	mov	r6, #0x2
	b	.L1062
.L1078:
	.align	2, 0
.L1077:
	.word	sDefaultPartyMsgWindowTemplate
	.word	sPartyMenuInternal
.L1063:
	bl	ShouldUseChooseMonText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1062	@cond_branch
	mov	r6, #0x1
.L1062:
	ldrb	r0, [r5]
	mov	r1, #0x0
	mov	r2, #0x58
	mov	r3, #0xf
	bl	DrawStdFrameWithCustomTileAndPalette
	ldr	r4, .L1079
	ldr	r1, .L1079+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldrb	r0, [r5]
	mov	r1, #0x2
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
.L1053:
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1080:
	.align	2, 0
.L1079:
	.word	gStringVar4
	.word	sActionStringTable
.Lfe117:
	.size	 DisplayPartyMenuStdMessage,.Lfe117-DisplayPartyMenuStdMessage
	.align	2, 0
	.type	 ShouldUseChooseMonText,function
	.thumb_func
ShouldUseChooseMonText:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L1094
	mov	r6, #0x0
	ldr	r0, .L1094+0x4
	ldrb	r0, [r0, #0xb]
	cmp	r0, #0x1
	bne	.L1082	@cond_branch
.L1093:
	mov	r0, #0x1
	b	.L1091
.L1095:
	.align	2, 0
.L1094:
	.word	gPlayerParty
	.word	gPartyMenu
.L1082:
	mov	r5, #0x0
.L1086:
	mov	r0, #0x64
	mul	r0, r0, r5
	add	r4, r7, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1087	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.L1088	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	beq	.L1087	@cond_branch
.L1088:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L1087:
	cmp	r6, #0x1
	bhi	.L1093	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L1086	@cond_branch
	mov	r0, #0x0
.L1091:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe118:
	.size	 ShouldUseChooseMonText,.Lfe118-ShouldUseChooseMonText
	.align	2, 0
	.type	 DisplaySelectionWindow,function
	.thumb_func
DisplaySelectionWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x24
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	beq	.L1099	@cond_branch
	cmp	r4, #0x1
	bgt	.L1103	@cond_branch
	cmp	r4, #0
	beq	.L1098	@cond_branch
	b	.L1101
.L1103:
	cmp	r4, #0x2
	beq	.L1100	@cond_branch
	b	.L1101
.L1098:
	ldr	r0, .L1117
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x17]
	lsl	r0, r0, #0x1
	mov	r3, #0x13
	sub	r3, r3, r0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0xa
	str	r0, [sp]
	ldrb	r0, [r1, #0x17]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0xe
	str	r0, [sp, #0x8]
	ldr	r0, .L1117+0x4
	str	r0, [sp, #0xc]
	add	r0, sp, #0x14
	mov	r1, #0x2
	mov	r2, #0x13
	bl	SetWindowTemplateFields
	ldr	r0, [sp, #0x14]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x18]		@ created by thumb_load_double_from_address
	b	.L1113
.L1118:
	.align	2, 0
.L1117:
	.word	sPartyMenuInternal
	.word	0x2bf
.L1099:
	ldr	r0, .L1119
	b	.L1114
.L1120:
	.align	2, 0
.L1119:
	.word	sItemGiveTakeWindowTemplate
.L1100:
	ldr	r0, .L1121
	b	.L1114
.L1122:
	.align	2, 0
.L1121:
	.word	sMailReadTakeWindowTemplate
.L1101:
	ldr	r0, .L1123
.L1114:
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
.L1113:
	str	r0, [sp, #0x1c]
	str	r1, [sp, #0x20]
	add	r0, sp, #0x1c
	bl	AddWindow
	ldr	r6, .L1123+0x4
	ldr	r1, [r6]
	strb	r0, [r1, #0xc]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0xc]
	mov	r1, #0x0
	mov	r2, #0x4f
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	cmp	r4, #0x3
	bne	.L1104	@cond_branch
	ldr	r0, [r6]
	b	.L1116
.L1124:
	.align	2, 0
.L1123:
	.word	sMoveSelectWindowTemplate
	.word	sPartyMenuInternal
.L1104:
	mov	r0, #0x2
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r0, #0x2
	mov	r1, #0x2
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x17]
	cmp	r5, r0
	bcs	.L1106	@cond_branch
	add	r7, r6, #0
	mov	r6, #0x0
.L1108:
	ldr	r1, [r7]
	add	r0, r1, #0
	add	r0, r0, #0xf
	add	r4, r0, r5
	ldrb	r0, [r4]
	mov	r2, #0x3
	cmp	r0, #0x11
	bls	.L1109	@cond_branch
	mov	r2, #0x4
.L1109:
	ldrb	r0, [r1, #0xc]
	lsl	r3, r5, #0x4
	add	r3, r3, #0x2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, r8
	str	r1, [sp]
	str	r6, [sp, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	ldr	r2, .L1125
	add	r1, r1, r2
	str	r1, [sp, #0x8]
	str	r6, [sp, #0xc]
	ldr	r2, .L1125+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r1, [r1]
	str	r1, [sp, #0x10]
	mov	r1, #0x2
	mov	r2, r9
	bl	AddTextPrinterParameterized4
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x17]
	cmp	r5, r0
	bcc	.L1108	@cond_branch
.L1106:
	ldr	r4, .L1125+0x8
	ldr	r2, [r4]
	ldrb	r0, [r2, #0xc]
	mov	r1, #0x10
	str	r1, [sp]
	ldrb	r1, [r2, #0x17]
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	str	r1, [sp, #0xc]
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	Menu_InitCursorInternal
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, [r4]
.L1116:
	ldrb	r0, [r0, #0xc]
	add	sp, sp, #0x24
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1126:
	.align	2, 0
.L1125:
	.word	sFontColorTable
	.word	sCursorOptions
	.word	sPartyMenuInternal
.Lfe119:
	.size	 DisplaySelectionWindow,.Lfe119-DisplaySelectionWindow
	.align	2, 0
	.type	 PartyMenuPrintText,function
	.thumb_func
PartyMenuPrintText:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	mov	r0, #0x6
	mov	r1, #0x0
	mov	r2, #0x4f
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	ldr	r2, .L1128
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	GetTextSpeedSetting
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x6
	mov	r1, #0x2
	add	r2, r4, #0
	bl	AddTextPrinterParameterized2
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L1129:
	.align	2, 0
.L1128:
	.word	gTextFlags
.Lfe120:
	.size	 PartyMenuPrintText,.Lfe120-PartyMenuPrintText
	.align	2, 0
	.type	 PartyMenuDisplayYesNoMenu,function
	.thumb_func
PartyMenuDisplayYesNoMenu:
	push	{lr}
	add	sp, sp, #-0xc
	ldr	r0, .L1131
	mov	r1, #0x4f
	str	r1, [sp]
	mov	r1, #0xd
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	CreateYesNoMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L1132:
	.align	2, 0
.L1131:
	.word	sPartyMenuYesNoWindowTemplate
.Lfe121:
	.size	 PartyMenuDisplayYesNoMenu,.Lfe121-PartyMenuDisplayYesNoMenu
	.align	2, 0
	.type	 CreateLevelUpStatsWindow,function
	.thumb_func
CreateLevelUpStatsWindow:
	push	{r4, lr}
	ldr	r0, .L1134
	bl	AddWindow
	ldr	r4, .L1134+0x4
	ldr	r1, [r4]
	strb	r0, [r1, #0xc]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xc]
	mov	r1, #0x0
	mov	r2, #0x4f
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xc]
	pop	{r4}
	pop	{r1}
	bx	r1
.L1135:
	.align	2, 0
.L1134:
	.word	sLevelUpStatsWindowTemplate
	.word	sPartyMenuInternal
.Lfe122:
	.size	 CreateLevelUpStatsWindow,.Lfe122-CreateLevelUpStatsWindow
	.align	2, 0
	.type	 RemoveLevelUpStatsWindow,function
	.thumb_func
RemoveLevelUpStatsWindow:
	push	{r4, lr}
	ldr	r4, .L1137
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xc]
	bl	ClearWindowTilemap
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L1138:
	.align	2, 0
.L1137:
	.word	sPartyMenuInternal
.Lfe123:
	.size	 RemoveLevelUpStatsWindow,.Lfe123-RemoveLevelUpStatsWindow
	.align	2, 0
	.type	 PartyMenu_Oak_PrintText,function
	.thumb_func
PartyMenu_Oak_PrintText:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L1140
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	ldr	r2, .L1140+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	GetTextSpeedSetting
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0x4
	add	r2, r5, #0
	bl	AddTextPrinterParameterized2
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1141:
	.align	2, 0
.L1140:
	.word	gStringVar4
	.word	gTextFlags
.Lfe124:
	.size	 PartyMenu_Oak_PrintText,.Lfe124-PartyMenu_Oak_PrintText
	.align	2, 0
	.type	 FirstBattleEnterParty_CreateWindowAndMsg1Printer,function
	.thumb_func
FirstBattleEnterParty_CreateWindowAndMsg1Printer:
	push	{r4, lr}
	ldr	r0, .L1143
	bl	AddWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x4f
	mov	r2, #0xe0
	bl	LoadMenuMessageWindowGfx
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x4f
	mov	r3, #0xe
	bl	DrawDialogFrameWithCustomTileAndPalette
	ldr	r1, .L1143+0x4
	add	r0, r4, #0
	bl	PartyMenu_Oak_PrintText
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L1144:
	.align	2, 0
.L1143:
	.word	sWindowTemplate_FirstBattleOakVoiceover
	.word	gText_OakImportantToGetToKnowPokemonThroughly
.Lfe125:
	.size	 FirstBattleEnterParty_CreateWindowAndMsg1Printer,.Lfe125-FirstBattleEnterParty_CreateWindowAndMsg1Printer
	.align	2, 0
	.type	 FirstBattleEnterParty_DestroyVoiceoverWindow,function
	.thumb_func
FirstBattleEnterParty_DestroyVoiceoverWindow:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	ClearWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrameToTransparent
	add	r0, r4, #0
	bl	RemoveWindow
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe126:
	.size	 FirstBattleEnterParty_DestroyVoiceoverWindow,.Lfe126-FirstBattleEnterParty_DestroyVoiceoverWindow
	.align	2, 0
	.type	 ToggleFieldMoveDescriptionWindow,function
	.thumb_func
ToggleFieldMoveDescriptionWindow:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r0, .L1151
	ldr	r4, [r0]
	cmp	r5, #0x11
	bhi	.L1147	@cond_branch
	ldrb	r0, [r4, #0xe]
	cmp	r0, #0xff
	beq	.L1149	@cond_branch
	bl	ClearWindowTilemap
	ldrb	r0, [r4, #0xe]
	bl	RemoveWindow
	mov	r0, #0xff
	strb	r0, [r4, #0xe]
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	b	.L1149
.L1152:
	.align	2, 0
.L1151:
	.word	sPartyMenuInternal
.L1147:
	ldrb	r0, [r4, #0xe]
	cmp	r0, #0xff
	bne	.L1150	@cond_branch
	ldr	r0, .L1153
	bl	AddWindow
	strb	r0, [r4, #0xe]
.L1150:
	ldrb	r0, [r4, #0xe]
	bl	DrawHelpMessageWindowTilesById
	mov	r0, #0x2
	mov	r1, #0x2
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4, #0xe]
	str	r0, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	ldr	r0, .L1153+0x4
	str	r0, [sp, #0x8]
	str	r1, [sp, #0xc]
	ldr	r1, .L1153+0x8
	add	r0, r5, #0
	sub	r0, r0, #0x12
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [sp, #0x10]
	add	r0, r2, #0
	mov	r1, #0x2
	mov	r2, #0x3
	mov	r3, #0x6
	bl	AddTextPrinterParameterized4
	ldrb	r0, [r4, #0xe]
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
.L1149:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1154:
	.align	2, 0
.L1153:
	.word	sFieldMoveDescriptionWindowTemplate
	.word	sFontColorTable+0xf
	.word	sFieldMoveDescriptionTable
.Lfe127:
	.size	 ToggleFieldMoveDescriptionWindow,.Lfe127-ToggleFieldMoveDescriptionWindow
	.align	2, 0
	.type	 CreatePartyMonIconSprite,function
	.thumb_func
CreatePartyMonIconSprite:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r7, r1, #0
	add	r4, r2, #0
	mov	r6, #0x1
	bl	IsMultiBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1156	@cond_branch
	ldr	r0, .L1158
	ldr	r1, .L1158+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1156	@cond_branch
	ldr	r0, .L1158+0x8
	add	r0, r4, r0
	ldrb	r1, [r0]
	eor	r1, r1, r6
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r6, r0, #0x1f
.L1156:
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r1, r0, #0
	str	r6, [sp]
	add	r0, r4, #0
	add	r2, r7, #0
	mov	r3, #0x1
	bl	CreatePartyMonIconSpriteParameterized
	ldrb	r0, [r7, #0x9]
	add	r1, r5, #0
	bl	UpdatePartyMonHPBar
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1159:
	.align	2, 0
.L1158:
	.word	gMain
	.word	0x439
	.word	sMultiBattlePartnersPartyMask
.Lfe128:
	.size	 CreatePartyMonIconSprite,.Lfe128-CreatePartyMonIconSprite
	.align	2, 0
	.type	 CreatePartyMonIconSpriteParameterized,function
	.thumb_func
CreatePartyMonIconSpriteParameterized:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r6, r1, #0
	add	r4, r2, #0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	cmp	r5, #0
	beq	.L1161	@cond_branch
	ldr	r1, .L1162
	ldr	r0, [r4, #0x4]
	ldrb	r2, [r0]
	ldrb	r3, [r0, #0x1]
	mov	r0, #0x4
	str	r0, [sp]
	str	r6, [sp, #0x4]
	ldr	r0, [sp, #0x20]
	str	r0, [sp, #0x8]
	add	r0, r5, #0
	bl	CreateMonIcon
	strb	r0, [r4, #0x9]
	ldr	r2, .L1162+0x4
	ldrb	r0, [r4, #0x9]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r7, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L1161:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1163:
	.align	2, 0
.L1162:
	.word	SpriteCB_MonIcon
	.word	gSprites
.Lfe129:
	.size	 CreatePartyMonIconSpriteParameterized,.Lfe129-CreatePartyMonIconSpriteParameterized
	.align	2, 0
	.type	 UpdateHPBar,function
	.thumb_func
UpdateHPBar:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	add	r0, r1, #0
	add	r1, r2, #0
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	beq	.L1168	@cond_branch
	cmp	r0, #0x2
	bgt	.L1172	@cond_branch
	cmp	r0, #0x1
	beq	.L1169	@cond_branch
	b	.L1170
.L1172:
	cmp	r0, #0x3
	beq	.L1167	@cond_branch
	cmp	r0, #0x4
	bne	.L1170	@cond_branch
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L1173
	add	r0, r0, r1
	mov	r1, #0x0
	bl	SetPartyHPBarSprite
	b	.L1165
.L1174:
	.align	2, 0
.L1173:
	.word	gSprites
.L1167:
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L1175
	add	r0, r0, r1
	mov	r1, #0x1
	bl	SetPartyHPBarSprite
	b	.L1165
.L1176:
	.align	2, 0
.L1175:
	.word	gSprites
.L1168:
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L1177
	add	r0, r0, r1
	mov	r1, #0x2
	bl	SetPartyHPBarSprite
	b	.L1165
.L1178:
	.align	2, 0
.L1177:
	.word	gSprites
.L1169:
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L1179
	add	r0, r0, r1
	mov	r1, #0x3
	bl	SetPartyHPBarSprite
	b	.L1165
.L1180:
	.align	2, 0
.L1179:
	.word	gSprites
.L1170:
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L1181
	add	r0, r0, r1
	mov	r1, #0x4
	bl	SetPartyHPBarSprite
.L1165:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1182:
	.align	2, 0
.L1181:
	.word	gSprites
.Lfe130:
	.size	 UpdateHPBar,.Lfe130-UpdateHPBar
	.align	2, 0
	.type	 UpdatePartyMonHPBar,function
	.thumb_func
UpdatePartyMonHPBar:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r6, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	UpdateHPBar
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe131:
	.size	 UpdatePartyMonHPBar,.Lfe131-UpdatePartyMonHPBar
	.align	2, 0
	.type	 AnimateSelectedPartyIcon,function
	.thumb_func
AnimateSelectedPartyIcon:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r5, .L1190
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r6, r0, #0x2
	add	r2, r6, r5
	mov	r7, #0x0
	mov	r3, #0x0
	strh	r3, [r2, #0x2e]
	mov	ip, r5
	cmp	r1, #0
	bne	.L1185	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x10
	bne	.L1186	@cond_branch
	strh	r3, [r2, #0x24]
	ldr	r0, .L1190+0x4
	strh	r0, [r2, #0x26]
	b	.L1187
.L1191:
	.align	2, 0
.L1190:
	.word	gSprites
	.word	0xfffc
.L1186:
	ldr	r0, .L1192
	strh	r0, [r2, #0x24]
	strh	r3, [r2, #0x26]
.L1187:
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	mov	r1, ip
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L1192+0x4
	b	.L1189
.L1193:
	.align	2, 0
.L1192:
	.word	0xfffc
	.word	SpriteCB_UpdatePartyMonIcon
.L1185:
	strh	r3, [r2, #0x24]
	strh	r3, [r2, #0x26]
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r0, r6, r0
	ldr	r1, .L1194
.L1189:
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1195:
	.align	2, 0
.L1194:
	.word	SpriteCB_BouncePartyMonIcon
.Lfe132:
	.size	 AnimateSelectedPartyIcon,.Lfe132-AnimateSelectedPartyIcon
	.align	2, 0
	.type	 SpriteCB_BouncePartyMonIcon,function
	.thumb_func
SpriteCB_BouncePartyMonIcon:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateMonIconFrame
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1197	@cond_branch
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1198	@cond_branch
	ldr	r0, .L1200
	strh	r0, [r4, #0x26]
	b	.L1197
.L1201:
	.align	2, 0
.L1200:
	.word	0xfffd
.L1198:
	strh	r1, [r4, #0x26]
.L1197:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe133:
	.size	 SpriteCB_BouncePartyMonIcon,.Lfe133-SpriteCB_BouncePartyMonIcon
	.align	2, 0
	.type	 SpriteCB_UpdatePartyMonIcon,function
	.thumb_func
SpriteCB_UpdatePartyMonIcon:
	push	{lr}
	bl	UpdateMonIconFrame
	pop	{r0}
	bx	r0
.Lfe134:
	.size	 SpriteCB_UpdatePartyMonIcon,.Lfe134-SpriteCB_UpdatePartyMonIcon
	.align	2, 0
	.type	 CreatePartyMonHeldItemSprite,function
	.thumb_func
CreatePartyMonHeldItemSprite:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1204	@cond_branch
	ldr	r0, .L1205
	ldr	r2, [r4, #0x4]
	ldrb	r1, [r2, #0x2]
	ldrb	r2, [r2, #0x3]
	mov	r3, #0x0
	bl	CreateSprite
	strb	r0, [r4, #0xa]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	UpdatePartyMonHeldItemSprite
.L1204:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1206:
	.align	2, 0
.L1205:
	.word	sSpriteTemplate_HeldItem
.Lfe135:
	.size	 CreatePartyMonHeldItemSprite,.Lfe135-CreatePartyMonHeldItemSprite
	.align	2, 0
	.type	 CreatePartyMonHeldItemSpriteParameterized,function
	.thumb_func
CreatePartyMonHeldItemSpriteParameterized:
	push	{r4, r5, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	cmp	r0, #0
	beq	.L1208	@cond_branch
	ldr	r0, .L1209
	ldr	r2, [r4, #0x4]
	ldrb	r1, [r2, #0x2]
	ldrb	r2, [r2, #0x3]
	mov	r3, #0x0
	bl	CreateSprite
	strb	r0, [r4, #0xa]
	ldr	r2, .L1209+0x4
	ldrb	r0, [r4, #0xa]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	ShowOrHideHeldItemSprite
.L1208:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1210:
	.align	2, 0
.L1209:
	.word	sSpriteTemplate_HeldItem
	.word	gSprites
.Lfe136:
	.size	 CreatePartyMonHeldItemSpriteParameterized,.Lfe136-CreatePartyMonHeldItemSpriteParameterized
	.align	2, 0
	.type	 UpdatePartyMonHeldItemSprite,function
	.thumb_func
UpdatePartyMonHeldItemSprite:
	push	{r4, lr}
	add	r4, r1, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	ShowOrHideHeldItemSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe137:
	.size	 UpdatePartyMonHeldItemSprite,.Lfe137-UpdatePartyMonHeldItemSprite
	.align	2, 0
	.type	 ShowOrHideHeldItemSprite,function
	.thumb_func
ShowOrHideHeldItemSprite:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1213	@cond_branch
	ldr	r2, .L1218
	ldrb	r1, [r4, #0xa]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	b	.L1217
.L1219:
	.align	2, 0
.L1218:
	.word	gSprites
.L1213:
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1215	@cond_branch
	ldrb	r1, [r4, #0xa]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1220
	add	r0, r0, r1
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L1216
.L1221:
	.align	2, 0
.L1220:
	.word	gSprites
.L1215:
	ldrb	r1, [r4, #0xa]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1222
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAnim
.L1216:
	ldr	r2, .L1222
	ldrb	r1, [r4, #0xa]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
.L1217:
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1223:
	.align	2, 0
.L1222:
	.word	gSprites
.Lfe138:
	.size	 ShowOrHideHeldItemSprite,.Lfe138-ShowOrHideHeldItemSprite
	.align	2, 0
	.globl	LoadHeldItemIcons
	.type	 LoadHeldItemIcons,function
	.thumb_func
LoadHeldItemIcons:
	push	{lr}
	ldr	r0, .L1225
	bl	LoadSpriteSheet
	ldr	r0, .L1225+0x4
	bl	LoadSpritePalette
	pop	{r0}
	bx	r0
.L1226:
	.align	2, 0
.L1225:
	.word	sSpriteSheet_HeldItem
	.word	sSpritePalette_HeldItem
.Lfe139:
	.size	 LoadHeldItemIcons,.Lfe139-LoadHeldItemIcons
	.align	2, 0
	.globl	DrawHeldItemIconsForTrade
	.type	 DrawHeldItemIconsForTrade,function
	.thumb_func
DrawHeldItemIconsForTrade:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r7, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r2, #0
	beq	.L1229	@cond_branch
	cmp	r2, #0x1
	beq	.L1236	@cond_branch
	b	.L1228
.L1229:
	mov	r5, #0x0
	ldrb	r0, [r6]
	cmp	r5, r0
	bcs	.L1228	@cond_branch
.L1233:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L1246
	add	r0, r0, r1
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L1232	@cond_branch
	add	r0, r7, r5
	ldrb	r4, [r0]
	add	r0, r1, #0
	bl	ItemIsMail
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	CreateHeldItemSpriteForTrade
.L1232:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrb	r0, [r6]
	cmp	r5, r0
	bcc	.L1233	@cond_branch
	b	.L1228
.L1247:
	.align	2, 0
.L1246:
	.word	gPlayerParty
.L1236:
	mov	r5, #0x0
	b	.L1245
.L1240:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L1248
	add	r0, r0, r1
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L1239	@cond_branch
	add	r0, r5, r7
	ldrb	r4, [r0, #0x6]
	add	r0, r1, #0
	bl	ItemIsMail
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	CreateHeldItemSpriteForTrade
.L1239:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L1245:
	ldrb	r0, [r6, #0x1]
	cmp	r5, r0
	bcc	.L1240	@cond_branch
.L1228:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1249:
	.align	2, 0
.L1248:
	.word	gEnemyParty
.Lfe140:
	.size	 DrawHeldItemIconsForTrade,.Lfe140-DrawHeldItemIconsForTrade
	.align	2, 0
	.type	 CreateHeldItemSpriteForTrade,function
	.thumb_func
CreateHeldItemSpriteForTrade:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	r6, r0, #0
	mov	r9, r1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L1251
	mov	r8, r0
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x43
	ldrb	r3, [r0]
	ldr	r0, .L1251+0x4
	sub	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0xfa
	mov	r2, #0xaa
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	mov	r0, r8
	add	r5, r4, r0
	mov	r0, #0x4
	strh	r0, [r5, #0x24]
	mov	r0, #0xa
	strh	r0, [r5, #0x26]
	mov	r0, #0x1c
	add	r8, r8, r0
	add	r4, r4, r8
	ldr	r0, .L1251+0x8
	str	r0, [r4]
	strh	r6, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, r9
	bl	StartSpriteAnim
	ldr	r1, [r4]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1252:
	.align	2, 0
.L1251:
	.word	gSprites
	.word	sSpriteTemplate_HeldItem
	.word	SpriteCB_HeldItem
.Lfe141:
	.size	 CreateHeldItemSpriteForTrade,.Lfe141-CreateHeldItemSpriteForTrade
	.align	2, 0
	.type	 SpriteCB_HeldItem,function
	.thumb_func
SpriteCB_HeldItem:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1256
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	add	r0, r2, #0
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1254	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1255
.L1257:
	.align	2, 0
.L1256:
	.word	gSprites
.L1254:
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x26]
	ldrh	r2, [r2, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
.L1255:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe142:
	.size	 SpriteCB_HeldItem,.Lfe142-SpriteCB_HeldItem
	.align	2, 0
	.type	 CreatePartyMonPokeballSprite,function
	.thumb_func
CreatePartyMonPokeballSprite:
	push	{r4, lr}
	add	r4, r1, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1259	@cond_branch
	ldr	r0, .L1260
	ldr	r2, [r4, #0x4]
	ldrb	r1, [r2, #0x6]
	ldrb	r2, [r2, #0x7]
	mov	r3, #0x8
	bl	CreateSprite
	strb	r0, [r4, #0xb]
.L1259:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1261:
	.align	2, 0
.L1260:
	.word	sSpriteTemplate_MenuPokeball
.Lfe143:
	.size	 CreatePartyMonPokeballSprite,.Lfe143-CreatePartyMonPokeballSprite
	.align	2, 0
	.type	 CreatePartyMonPokeballSpriteParameterized,function
	.thumb_func
CreatePartyMonPokeballSpriteParameterized:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1263	@cond_branch
	ldr	r0, .L1264
	ldr	r2, [r4, #0x4]
	ldrb	r1, [r2, #0x6]
	ldrb	r2, [r2, #0x7]
	mov	r3, #0x8
	bl	CreateSprite
	strb	r0, [r4, #0xb]
	ldr	r2, .L1264+0x4
	ldrb	r0, [r4, #0xb]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
.L1263:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1265:
	.align	2, 0
.L1264:
	.word	sSpriteTemplate_MenuPokeball
	.word	gSprites
.Lfe144:
	.size	 CreatePartyMonPokeballSpriteParameterized,.Lfe144-CreatePartyMonPokeballSpriteParameterized
	.align	2, 0
	.type	 CreatePokeballButtonSprite,function
	.thumb_func
CreatePokeballButtonSprite:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L1267
	add	r1, r3, #0
	mov	r3, #0x8
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1267+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r3, [r1, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	and	r2, r2, r3
	mov	r3, #0x8
	orr	r2, r2, r3
	strb	r2, [r1, #0x5]
	pop	{r1}
	bx	r1
.L1268:
	.align	2, 0
.L1267:
	.word	sSpriteTemplate_MenuPokeball
	.word	gSprites
.Lfe145:
	.size	 CreatePokeballButtonSprite,.Lfe145-CreatePokeballButtonSprite
	.align	2, 0
	.type	 CreateSmallPokeballButtonSprite,function
	.thumb_func
CreateSmallPokeballButtonSprite:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L1270
	add	r1, r3, #0
	mov	r3, #0x8
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L1271:
	.align	2, 0
.L1270:
	.word	sSpriteTemplate_MenuPokeballSmall
.Lfe146:
	.size	 CreateSmallPokeballButtonSprite,.Lfe146-CreateSmallPokeballButtonSprite
	.align	2, 0
	.type	 PartyMenuStartSpriteAnim,function
	.thumb_func
PartyMenuStartSpriteAnim:
	push	{lr}
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r2, .L1273
	add	r0, r0, r2
	bl	StartSpriteAnim
	pop	{r0}
	bx	r0
.L1274:
	.align	2, 0
.L1273:
	.word	gSprites
.Lfe147:
	.size	 PartyMenuStartSpriteAnim,.Lfe147-PartyMenuStartSpriteAnim
	.align	2, 0
	.globl	SpriteCB_BounceConfirmCancelButton
	.type	 SpriteCB_BounceConfirmCancelButton,function
	.thumb_func
SpriteCB_BounceConfirmCancelButton:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	cmp	r6, #0
	bne	.L1276	@cond_branch
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L1278
	mov	r8, r0
	add	r4, r4, r8
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	lsl	r5, r7, #0x4
	add	r5, r5, r7
	lsl	r5, r5, #0x2
	add	r5, r5, r8
	add	r0, r5, #0
	mov	r1, #0x4
	bl	StartSpriteAnim
	strh	r6, [r4, #0x26]
	strh	r6, [r5, #0x26]
	b	.L1277
.L1279:
	.align	2, 0
.L1278:
	.word	gSprites
.L1276:
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	ldr	r0, .L1280
	mov	r8, r0
	add	r5, r5, r8
	add	r0, r5, #0
	mov	r1, #0x3
	bl	StartSpriteAnim
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r8
	add	r0, r4, #0
	mov	r1, #0x5
	bl	StartSpriteAnim
	ldr	r0, .L1280+0x4
	strh	r0, [r5, #0x26]
	mov	r0, #0x4
	strh	r0, [r4, #0x26]
.L1277:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1281:
	.align	2, 0
.L1280:
	.word	gSprites
	.word	0xfffc
.Lfe148:
	.size	 SpriteCB_BounceConfirmCancelButton,.Lfe148-SpriteCB_BounceConfirmCancelButton
	.align	2, 0
	.type	 LoadPartyMenuPokeballGfx,function
	.thumb_func
LoadPartyMenuPokeballGfx:
	push	{lr}
	ldr	r0, .L1283
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1283+0x4
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1283+0x8
	bl	LoadCompressedSpritePalette
	pop	{r0}
	bx	r0
.L1284:
	.align	2, 0
.L1283:
	.word	sSpriteSheet_MenuPokeball
	.word	sSpriteSheet_MenuPokeballSmall
	.word	sSpritePalette_MenuPokeball
.Lfe149:
	.size	 LoadPartyMenuPokeballGfx,.Lfe149-LoadPartyMenuPokeballGfx
	.align	2, 0
	.type	 CreatePartyMonStatusSprite,function
	.thumb_func
CreatePartyMonStatusSprite:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1286	@cond_branch
	ldr	r0, .L1287
	ldr	r2, [r4, #0x4]
	ldrb	r1, [r2, #0x4]
	ldrb	r2, [r2, #0x5]
	mov	r3, #0x0
	bl	CreateSprite
	strb	r0, [r4, #0xc]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	SetPartyMonAilmentGfx
.L1286:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1288:
	.align	2, 0
.L1287:
	.word	sSpriteTemplate_StatusIcons
.Lfe150:
	.size	 CreatePartyMonStatusSprite,.Lfe150-CreatePartyMonStatusSprite
	.align	2, 0
	.type	 CreatePartyMonStatusSpriteParameterized,function
	.thumb_func
CreatePartyMonStatusSpriteParameterized:
	push	{r4, r5, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	cmp	r0, #0
	beq	.L1290	@cond_branch
	ldr	r0, .L1291
	ldr	r2, [r4, #0x4]
	ldrb	r1, [r2, #0x4]
	ldrb	r2, [r2, #0x5]
	mov	r3, #0x0
	bl	CreateSprite
	strb	r0, [r4, #0xc]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	UpdatePartyMonAilmentGfx
	ldr	r2, .L1291+0x4
	ldrb	r0, [r4, #0xc]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
.L1290:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1292:
	.align	2, 0
.L1291:
	.word	sSpriteTemplate_StatusIcons
	.word	gSprites
.Lfe151:
	.size	 CreatePartyMonStatusSpriteParameterized,.Lfe151-CreatePartyMonStatusSpriteParameterized
	.align	2, 0
	.type	 SetPartyMonAilmentGfx,function
	.thumb_func
SetPartyMonAilmentGfx:
	push	{r4, lr}
	add	r4, r1, #0
	bl	GetMonAilment
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	UpdatePartyMonAilmentGfx
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe152:
	.size	 SetPartyMonAilmentGfx,.Lfe152-SetPartyMonAilmentGfx
	.align	2, 0
	.type	 UpdatePartyMonAilmentGfx,function
	.thumb_func
UpdatePartyMonAilmentGfx:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L1297	@cond_branch
	cmp	r2, #0x6
	bne	.L1298	@cond_branch
.L1297:
	ldr	r2, .L1301
	ldrb	r1, [r5, #0xc]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	b	.L1300
.L1302:
	.align	2, 0
.L1301:
	.word	gSprites
.L1298:
	ldrb	r1, [r5, #0xc]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L1303
	add	r0, r0, r4
	sub	r1, r2, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	StartSpriteAnim
	ldrb	r1, [r5, #0xc]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
.L1300:
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1304:
	.align	2, 0
.L1303:
	.word	gSprites
.Lfe153:
	.size	 UpdatePartyMonAilmentGfx,.Lfe153-UpdatePartyMonAilmentGfx
	.align	2, 0
	.type	 LoadPartyMenuAilmentGfx,function
	.thumb_func
LoadPartyMenuAilmentGfx:
	push	{lr}
	ldr	r0, .L1306
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1306+0x4
	bl	LoadCompressedSpritePalette
	pop	{r0}
	bx	r0
.L1307:
	.align	2, 0
.L1306:
	.word	sSpriteSheet_StatusIcons
	.word	sSpritePalette_StatusIcons
.Lfe154:
	.size	 LoadPartyMenuAilmentGfx,.Lfe154-LoadPartyMenuAilmentGfx
	.align	2, 0
	.type	 SetPartyMonSelectionActions,function
	.thumb_func
SetPartyMonSelectionActions:
	push	{r4, lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r2, #0
	bne	.L1309	@cond_branch
	bl	SetPartyMonFieldSelectionActions
	b	.L1310
.L1309:
	ldr	r4, .L1316
	ldr	r1, [r4]
	ldr	r0, .L1316+0x4
	add	r0, r2, r0
	ldrb	r0, [r0]
	strb	r0, [r1, #0x17]
	mov	r3, #0x0
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x17]
	cmp	r3, r0
	bcs	.L1310	@cond_branch
	ldr	r1, .L1316+0x8
	lsl	r0, r2, #0x2
	add	r2, r0, r1
.L1314:
	ldr	r1, [r4]
	add	r1, r1, #0xf
	add	r1, r1, r3
	ldr	r0, [r2]
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x17]
	cmp	r3, r0
	bcc	.L1314	@cond_branch
.L1310:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1317:
	.align	2, 0
.L1316:
	.word	sPartyMenuInternal
	.word	sPartyMenuActionCounts
	.word	sPartyMenuActions
.Lfe155:
	.size	 SetPartyMonSelectionActions,.Lfe155-SetPartyMonSelectionActions
	.align	2, 0
	.type	 SetPartyMonFieldSelectionActions,function
	.thumb_func
SetPartyMonFieldSelectionActions:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r9, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	ldr	r2, .L1333
	ldr	r1, [r2]
	mov	r0, #0x0
	strb	r0, [r1, #0x17]
	ldr	r1, [r2]
	add	r0, r1, #0
	add	r0, r0, #0xf
	add	r1, r1, #0x17
	mov	r2, #0x0
	bl	AppendToList
	mov	r7, #0x0
	ldr	r0, .L1333+0x4
	ldrh	r0, [r0]
	str	r0, [sp]
	mov	r0, r9
	add	r0, r0, #0x64
	str	r0, [sp, #0x4]
.L1322:
	mov	r4, #0x0
	add	r1, r7, #0x1
	mov	r8, r1
	ldr	r0, [sp]
	cmp	r0, #0xc
	beq	.L1321	@cond_branch
	mov	r0, #0x64
	mov	r6, sl
	mul	r6, r6, r0
	ldr	r5, .L1333+0x4
.L1326:
	mov	r1, r9
	add	r0, r1, r6
	add	r1, r7, #0
	add	r1, r1, #0xd
	bl	GetMonData
	lsl	r1, r4, #0x1
	add	r1, r1, r5
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L1325	@cond_branch
	ldr	r0, .L1333
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xf
	add	r1, r1, #0x17
	add	r2, r4, #0
	add	r2, r2, #0x12
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	bl	AppendToList
	b	.L1321
.L1334:
	.align	2, 0
.L1333:
	.word	sPartyMenuInternal
	.word	sFieldMoves
.L1325:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	cmp	r0, #0xc
	bne	.L1326	@cond_branch
.L1321:
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L1322	@cond_branch
	ldr	r0, [sp, #0x4]
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1330	@cond_branch
	ldr	r0, .L1335
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xf
	add	r1, r1, #0x17
	mov	r2, #0x1
	bl	AppendToList
.L1330:
	mov	r0, #0x64
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r9
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1331	@cond_branch
	ldr	r0, .L1335
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xf
	add	r1, r1, #0x17
	mov	r2, #0x6
	bl	AppendToList
	b	.L1332
.L1336:
	.align	2, 0
.L1335:
	.word	sPartyMenuInternal
.L1331:
	ldr	r0, .L1337
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xf
	add	r1, r1, #0x17
	mov	r2, #0x3
	bl	AppendToList
.L1332:
	ldr	r0, .L1337
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xf
	add	r1, r1, #0x17
	mov	r2, #0x2
	bl	AppendToList
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1338:
	.align	2, 0
.L1337:
	.word	sPartyMenuInternal
.Lfe156:
	.size	 SetPartyMonFieldSelectionActions,.Lfe156-SetPartyMonFieldSelectionActions
	.align	2, 0
	.type	 GetPartyMenuActionsType,function
	.thumb_func
GetPartyMenuActionsType:
	push	{lr}
	add	r2, r0, #0
	ldr	r1, .L1359
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	add	r3, r1, #0
	cmp	r0, #0xa
	bhi	.L1357	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1359+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1360:
	.align	2, 0
.L1359:
	.word	gPartyMenu
	.word	.L1358
	.align	2, 0
	.align	2, 0
.L1358:
	.word	.L1341
	.word	.L1344
	.word	.L1357
	.word	.L1357
	.word	.L1345
	.word	.L1357
	.word	.L1351
	.word	.L1357
	.word	.L1354
	.word	.L1355
	.word	.L1356
.L1341:
	add	r0, r2, #0
	mov	r1, #0x2d
	bl	GetMonData
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r1, r1, #0x1f
	b	.L1340
.L1344:
	add	r0, r2, #0
	bl	GetPartyMenuActionsTypeInBattle
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	b	.L1340
.L1345:
	mov	r0, #0x9
	ldrsb	r0, [r3, r0]
	bl	GetPartySlotEntryStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1348	@cond_branch
	cmp	r0, #0x1
	beq	.L1349	@cond_branch
	mov	r1, #0x7
	b	.L1340
.L1348:
	mov	r1, #0x4
	b	.L1340
.L1349:
	mov	r1, #0x5
	b	.L1340
.L1351:
	add	r0, r2, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r1, #0x6
	cmp	r0, #0
	beq	.L1340	@cond_branch
	mov	r1, #0x7
	b	.L1340
.L1354:
	mov	r1, #0xa
	b	.L1340
.L1355:
	mov	r1, #0xb
	b	.L1340
.L1356:
	mov	r1, #0xc
	b	.L1340
.L1357:
	mov	r1, #0x0
.L1340:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.Lfe157:
	.size	 GetPartyMenuActionsType,.Lfe157-GetPartyMenuActionsType
	.align	2, 0
	.type	 CreateSelectionWindow,function
	.thumb_func
CreateSelectionWindow:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1362
	mov	r1, #0x9
	ldrsb	r1, [r5, r1]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r6, .L1362+0x4
	add	r4, r4, r6
	ldr	r1, .L1362+0x8
	add	r0, r4, #0
	bl	GetMonNickname
	ldr	r0, .L1362+0xc
	ldr	r0, [r0]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldrb	r5, [r5, #0x9]
	add	r0, r4, #0
	bl	GetPartyMenuActionsType
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	SetPartyMonSelectionActions
	mov	r0, #0x0
	bl	DisplaySelectionWindow
	mov	r0, #0x16
	bl	DisplayPartyMenuStdMessage
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1363:
	.align	2, 0
.L1362:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gStringVar1
	.word	sPartyMenuInternal
.Lfe158:
	.size	 CreateSelectionWindow,.Lfe158-CreateSelectionWindow
	.align	2, 0
	.type	 Task_TryCreateSelectionWindow,function
	.thumb_func
Task_TryCreateSelectionWindow:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	CreateSelectionWindow
	ldr	r1, .L1365
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xff
	strh	r1, [r0, #0x8]
	ldr	r1, .L1365+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1366:
	.align	2, 0
.L1365:
	.word	gTasks
	.word	Task_HandleSelectionMenuInput
.Lfe159:
	.size	 Task_TryCreateSelectionWindow,.Lfe159-Task_TryCreateSelectionWindow
	.align	2, 0
	.type	 Task_HandleSelectionMenuInput,function
	.thumb_func
Task_HandleSelectionMenuInput:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L1378
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1368	@cond_branch
	bl	MenuHelpers_ShouldWaitForLinkRecv
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1368	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1378+0x4
	add	r7, r0, r1
	ldr	r0, .L1378+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x3
	bhi	.L1369	@cond_branch
	bl	Menu_ProcessInputNoWrapAround_other
	b	.L1377
.L1379:
	.align	2, 0
.L1378:
	.word	gPaletteFade
	.word	gTasks+0x8
	.word	sPartyMenuInternal
.L1369:
	bl	Menu_ProcessInput_other
.L1377:
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x0
	ldrsh	r4, [r7, r0]
	bl	Menu_GetCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1371	@cond_branch
	ldr	r0, .L1380
	ldr	r4, [r0]
	bl	Menu_GetCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r4, #0xf
	add	r4, r4, r0
	ldrb	r0, [r4]
	bl	ToggleFieldMoveDescriptionWindow
.L1371:
	bl	Menu_GetCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7]
	lsl	r0, r5, #0x18
	asr	r5, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r5, r0
	beq	.L1368	@cond_branch
	add	r0, r0, #0x1
	cmp	r5, r0
	bne	.L1375	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L1380
	ldr	r0, [r4]
	add	r0, r0, #0xe
	bl	PartyMenuRemoveWindow
	ldr	r2, .L1380+0x4
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x17]
	add	r0, r0, r1
	ldrb	r0, [r0, #0xe]
	lsl	r0, r0, #0x3
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, [r0]
	add	r0, r6, #0
	bl	_call_via_r1
	b	.L1368
.L1381:
	.align	2, 0
.L1380:
	.word	sPartyMenuInternal
	.word	sCursorOptions
.L1375:
	ldr	r4, .L1382
	ldr	r0, [r4]
	add	r0, r0, #0xe
	bl	PartyMenuRemoveWindow
	ldr	r1, .L1382+0x4
	ldr	r0, [r4]
	add	r0, r0, #0xf
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r6, #0
	bl	_call_via_r1
.L1368:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1383:
	.align	2, 0
.L1382:
	.word	sPartyMenuInternal
	.word	sCursorOptions
.Lfe160:
	.size	 Task_HandleSelectionMenuInput,.Lfe160-Task_HandleSelectionMenuInput
	.align	2, 0
	.type	 CursorCB_Summary,function
	.thumb_func
CursorCB_Summary:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1385
	ldr	r1, [r0]
	ldr	r0, .L1385+0x4
	str	r0, [r1, #0x4]
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L1386:
	.align	2, 0
.L1385:
	.word	sPartyMenuInternal
	.word	CB2_ShowPokemonSummaryScreen
.Lfe161:
	.size	 CursorCB_Summary,.Lfe161-CursorCB_Summary
	.align	2, 0
	.type	 CB2_ShowPokemonSummaryScreen,function
	.thumb_func
CB2_ShowPokemonSummaryScreen:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L1389
	ldrb	r1, [r4, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L1388	@cond_branch
	bl	UpdatePartyToBattleOrder
.L1388:
	ldr	r0, .L1389+0x4
	ldrb	r1, [r4, #0x9]
	ldr	r2, .L1389+0x8
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L1389+0xc
	mov	r4, #0x0
	str	r4, [sp]
	bl	ShowPokemonSummaryScreen
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1390:
	.align	2, 0
.L1389:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gPlayerPartyCount
	.word	CB2_ReturnToPartyMenuFromSummaryScreen
.Lfe162:
	.size	 CB2_ShowPokemonSummaryScreen,.Lfe162-CB2_ShowPokemonSummaryScreen
	.align	2, 0
	.type	 CB2_ReturnToPartyMenuFromSummaryScreen,function
	.thumb_func
CB2_ReturnToPartyMenuFromSummaryScreen:
	push	{lr}
	add	sp, sp, #-0xc
	ldr	r2, .L1392
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	bl	GetLastViewedMonIndex
	ldr	r3, .L1392+0x4
	strb	r0, [r3, #0x9]
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r2, [r3, #0xb]
	mov	r1, #0x16
	str	r1, [sp]
	ldr	r1, .L1392+0x8
	str	r1, [sp, #0x4]
	ldr	r1, [r3]
	str	r1, [sp, #0x8]
	mov	r1, #0xff
	mov	r3, #0x1
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L1393:
	.align	2, 0
.L1392:
	.word	gPaletteFade
	.word	gPartyMenu
	.word	Task_TryCreateSelectionWindow
.Lfe163:
	.size	 CB2_ReturnToPartyMenuFromSummaryScreen,.Lfe163-CB2_ReturnToPartyMenuFromSummaryScreen
	.align	2, 0
	.type	 CursorCB_Switch,function
	.thumb_func
CursorCB_Switch:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r5, .L1395
	mov	r0, #0x8
	strb	r0, [r5, #0xb]
	ldr	r4, .L1395+0x4
	ldr	r0, [r4]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	mov	r0, #0x3
	bl	DisplayPartyMenuStdMessage
	ldrb	r0, [r5, #0x9]
	mov	r1, #0x1
	bl	AnimatePartySlot
	ldrb	r0, [r5, #0x9]
	strb	r0, [r5, #0xa]
	ldr	r1, .L1395+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1395+0xc
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1396:
	.align	2, 0
.L1395:
	.word	gPartyMenu
	.word	sPartyMenuInternal
	.word	gTasks
	.word	Task_HandleChooseMonInput
.Lfe164:
	.size	 CursorCB_Switch,.Lfe164-CursorCB_Switch
	.align	2, 0
	.type	 SwitchSelectedMons,function
	.thumb_func
SwitchSelectedMons:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L1406
	add	r6, r0, r1
	ldr	r4, .L1406+0x4
	mov	r1, #0xa
	ldrsb	r1, [r4, r1]
	mov	r0, #0x9
	ldrsb	r0, [r4, r0]
	cmp	r1, r0
	bne	.L1398	@cond_branch
	add	r0, r7, #0
	bl	FinishTwoMonAction
	b	.L1399
.L1407:
	.align	2, 0
.L1406:
	.word	gTasks+0x8
	.word	gPartyMenu
.L1398:
	bl	SetSwitchedPartyOrderQuestLogEvent
	add	r2, sp, #0x8
	mov	r0, #0x9
	ldrsb	r0, [r4, r0]
	ldr	r1, .L1408
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	mov	r4, #0x0
	strb	r0, [r2]
	add	r0, r2, #0
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetWindowAttribute
	strh	r0, [r6]
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetWindowAttribute
	strh	r0, [r6, #0x2]
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetWindowAttribute
	strh	r0, [r6, #0x4]
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	mov	r1, #0x4
	bl	GetWindowAttribute
	strh	r0, [r6, #0x6]
	strh	r4, [r6, #0x10]
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0xa
	bne	.L1400	@cond_branch
	mov	r2, #0x1
	neg	r2, r2
	add	r0, r2, #0
	b	.L1404
.L1409:
	.align	2, 0
.L1408:
	.word	sPartyMenuBoxes
.L1400:
	mov	r0, #0x1
.L1404:
	strh	r0, [r6, #0x14]
	add	r2, sp, #0x8
	ldr	r0, .L1410
	ldrb	r0, [r0, #0xa]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldr	r1, .L1410+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	mov	r4, #0x0
	strb	r0, [r2, #0x1]
	add	r0, r2, #0
	ldrb	r0, [r0, #0x1]
	mov	r1, #0x1
	bl	GetWindowAttribute
	strh	r0, [r6, #0x8]
	add	r0, sp, #0x8
	ldrb	r0, [r0, #0x1]
	mov	r1, #0x2
	bl	GetWindowAttribute
	strh	r0, [r6, #0xa]
	add	r0, sp, #0x8
	ldrb	r0, [r0, #0x1]
	mov	r1, #0x3
	bl	GetWindowAttribute
	strh	r0, [r6, #0xc]
	add	r0, sp, #0x8
	ldrb	r0, [r0, #0x1]
	mov	r1, #0x4
	bl	GetWindowAttribute
	strh	r0, [r6, #0xe]
	strh	r4, [r6, #0x12]
	mov	r1, #0xc
	ldrsh	r0, [r6, r1]
	cmp	r0, #0xa
	bne	.L1402	@cond_branch
	mov	r2, #0x1
	neg	r2, r2
	add	r0, r2, #0
	b	.L1405
.L1411:
	.align	2, 0
.L1410:
	.word	gPartyMenu
	.word	sPartyMenuBoxes
.L1402:
	mov	r0, #0x1
.L1405:
	strh	r0, [r6, #0x16]
	ldr	r4, .L1412
	mov	r0, #0x4
	ldrsh	r1, [r6, r0]
	mov	r2, #0x6
	ldrsh	r0, [r6, r2]
	lsl	r0, r0, #0x1
	mul	r0, r0, r1
	bl	Alloc
	str	r0, [r4]
	ldr	r5, .L1412+0x4
	mov	r0, #0xc
	ldrsh	r1, [r6, r0]
	mov	r2, #0xe
	ldrsh	r0, [r6, r2]
	lsl	r0, r0, #0x1
	mul	r0, r0, r1
	bl	Alloc
	str	r0, [r5]
	ldr	r1, [r4]
	ldrb	r2, [r6]
	ldrb	r3, [r6, #0x2]
	ldrb	r0, [r6, #0x4]
	str	r0, [sp]
	ldrb	r0, [r6, #0x6]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	bl	CopyToBufferFromBgTilemap
	ldr	r1, [r5]
	ldrb	r2, [r6, #0x8]
	ldrb	r3, [r6, #0xa]
	ldrb	r0, [r6, #0xc]
	str	r0, [sp]
	ldrb	r0, [r6, #0xe]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	bl	CopyToBufferFromBgTilemap
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	bl	ClearWindowTilemap
	add	r0, sp, #0x8
	ldrb	r0, [r0, #0x1]
	bl	ClearWindowTilemap
	ldr	r4, .L1412+0x8
	mov	r0, #0x9
	strb	r0, [r4, #0xb]
	ldrb	r0, [r4, #0x9]
	mov	r1, #0x1
	bl	AnimatePartySlot
	ldrb	r0, [r4, #0xa]
	mov	r1, #0x1
	bl	AnimatePartySlot
	add	r0, r7, #0
	bl	SlidePartyMenuBoxOneStep
	ldr	r1, .L1412+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1412+0x10
	str	r1, [r0]
.L1399:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1413:
	.align	2, 0
.L1412:
	.word	sSlot1TilemapBuffer
	.word	sSlot2TilemapBuffer
	.word	gPartyMenu
	.word	gTasks
	.word	Task_SlideSelectedSlotsOffscreen
.Lfe165:
	.size	 SwitchSelectedMons,.Lfe165-SwitchSelectedMons
	.align	2, 0
	.type	 TryMovePartySlot,function
	.thumb_func
TryMovePartySlot:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r2, #0
	mov	ip, r3
	ldr	r7, [sp, #0x18]
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r5, r3, #0
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	mov	r8, r2
	lsl	r0, r3, #0x10
	asr	r1, r0, #0x10
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	add	r4, r1, r0
	cmp	r4, #0
	blt	.L1422	@cond_branch
	cmp	r1, #0x1f
	ble	.L1416	@cond_branch
.L1422:
	mov	r0, #0x0
	b	.L1421
.L1416:
	cmp	r1, #0
	bge	.L1417	@cond_branch
	neg	r0, r1
	strb	r0, [r6]
	mov	r0, #0x0
	mov	r1, ip
	strb	r0, [r1]
	add	r0, r2, r3
	strb	r0, [r7]
	b	.L1418
.L1417:
	mov	r0, #0x0
	strb	r0, [r6]
	mov	r0, ip
	strb	r5, [r0]
	cmp	r4, #0x1f
	ble	.L1419	@cond_branch
	mov	r0, #0x20
	sub	r0, r0, r5
	strb	r0, [r7]
	b	.L1418
.L1419:
	mov	r1, r8
	strb	r1, [r7]
.L1418:
	mov	r0, #0x1
.L1421:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe166:
	.size	 TryMovePartySlot,.Lfe166-TryMovePartySlot
	.align	2, 0
	.type	 MoveAndBufferPartySlot,function
	.thumb_func
MoveAndBufferPartySlot:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x34
	str	r0, [sp, #0x28]
	ldr	r0, [sp, #0x54]
	ldr	r4, [sp, #0x58]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r9, r2
	lsl	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	str	r4, [sp, #0x30]
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	lsr	r0, r3, #0x10
	str	r0, [sp, #0x2c]
	asr	r3, r3, #0x10
	mov	r8, r3
	mov	r5, sp
	add	r5, r5, #0x25
	mov	r6, sp
	add	r6, r6, #0x26
	str	r6, [sp]
	add	r0, r7, #0
	mov	r1, r8
	add	r2, sp, #0x24
	add	r3, r5, #0
	bl	TryMovePartySlot
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1424	@cond_branch
	ldrb	r2, [r5]
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldrb	r0, [r6]
	str	r0, [sp]
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
	str	r4, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r3, r9
	bl	FillBgTilemapBufferRect_Palette0
	ldr	r1, [sp, #0x30]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	add	r0, r7, r0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	str	r6, [sp]
	mov	r1, r8
	add	r2, sp, #0x24
	add	r3, r5, #0
	bl	TryMovePartySlot
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1424	@cond_branch
	add	r0, sp, #0x24
	ldrb	r2, [r0]
	ldr	r1, [sp, #0x2c]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	str	r4, [sp, #0x4]
	ldrb	r0, [r5]
	str	r0, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	ldrb	r0, [r6]
	str	r0, [sp, #0x10]
	str	r4, [sp, #0x14]
	mov	r0, #0x11
	str	r0, [sp, #0x18]
	mov	r0, #0x0
	str	r0, [sp, #0x1c]
	str	r0, [sp, #0x20]
	ldr	r1, [sp, #0x28]
	mov	r3, #0x0
	bl	CopyRectToBgTilemapBufferRect
.L1424:
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe167:
	.size	 MoveAndBufferPartySlot,.Lfe167-MoveAndBufferPartySlot
	.align	2, 0
	.type	 MovePartyMenuBoxSprites,function
	.thumb_func
MovePartyMenuBoxSprites:
	push	{r4, lr}
	ldr	r4, .L1427
	ldrb	r2, [r0, #0xb]
	lsl	r3, r2, #0x4
	add	r3, r3, r2
	lsl	r3, r3, #0x2
	add	r3, r3, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0xd
	ldrh	r2, [r3, #0x24]
	add	r2, r2, r1
	strh	r2, [r3, #0x24]
	ldrb	r3, [r0, #0xa]
	lsl	r2, r3, #0x4
	add	r2, r2, r3
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrh	r3, [r2, #0x24]
	add	r3, r3, r1
	strh	r3, [r2, #0x24]
	ldrb	r3, [r0, #0x9]
	lsl	r2, r3, #0x4
	add	r2, r2, r3
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrh	r3, [r2, #0x24]
	add	r3, r3, r1
	strh	r3, [r2, #0x24]
	ldrb	r2, [r0, #0xc]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r2, [r0, #0x24]
	add	r2, r2, r1
	strh	r2, [r0, #0x24]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1428:
	.align	2, 0
.L1427:
	.word	gSprites
.Lfe168:
	.size	 MovePartyMenuBoxSprites,.Lfe168-MovePartyMenuBoxSprites
	.align	2, 0
	.type	 SlidePartyMenuBoxSpritesOneStep,function
	.thumb_func
SlidePartyMenuBoxSpritesOneStep:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1432
	add	r4, r1, r0
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1430	@cond_branch
	ldr	r2, .L1432+0x4
	ldr	r0, .L1432+0x8
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	lsl	r1, r1, #0x4
	ldr	r0, [r2]
	add	r0, r0, r1
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	bl	MovePartyMenuBoxSprites
.L1430:
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1431	@cond_branch
	ldr	r2, .L1432+0x4
	ldr	r0, .L1432+0x8
	mov	r1, #0xa
	ldrsb	r1, [r0, r1]
	lsl	r1, r1, #0x4
	ldr	r0, [r2]
	add	r0, r0, r1
	mov	r2, #0x16
	ldrsh	r1, [r4, r2]
	bl	MovePartyMenuBoxSprites
.L1431:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1433:
	.align	2, 0
.L1432:
	.word	gTasks+0x8
	.word	sPartyMenuBoxes
	.word	gPartyMenu
.Lfe169:
	.size	 SlidePartyMenuBoxSpritesOneStep,.Lfe169-SlidePartyMenuBoxSpritesOneStep
	.align	2, 0
	.type	 SlidePartyMenuBoxOneStep,function
	.thumb_func
SlidePartyMenuBoxOneStep:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1437
	add	r5, r1, r0
	mov	r1, #0x14
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L1435	@cond_branch
	ldr	r0, .L1437+0x4
	ldr	r0, [r0]
	ldrh	r1, [r5, #0x10]
	ldrh	r2, [r5]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r3, #0x2
	ldrsh	r2, [r5, r3]
	mov	r4, #0x4
	ldrsh	r3, [r5, r4]
	mov	r6, #0x6
	ldrsh	r4, [r5, r6]
	str	r4, [sp]
	mov	r6, #0x14
	ldrsh	r4, [r5, r6]
	str	r4, [sp, #0x4]
	bl	MoveAndBufferPartySlot
.L1435:
	mov	r1, #0x16
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L1436	@cond_branch
	ldr	r0, .L1437+0x8
	ldr	r0, [r0]
	ldrh	r1, [r5, #0x12]
	ldrh	r2, [r5, #0x8]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r3, #0xa
	ldrsh	r2, [r5, r3]
	mov	r4, #0xc
	ldrsh	r3, [r5, r4]
	mov	r6, #0xe
	ldrsh	r4, [r5, r6]
	str	r4, [sp]
	mov	r6, #0x16
	ldrsh	r4, [r5, r6]
	str	r4, [sp, #0x4]
	bl	MoveAndBufferPartySlot
.L1436:
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1438:
	.align	2, 0
.L1437:
	.word	gTasks+0x8
	.word	sSlot1TilemapBuffer
	.word	sSlot2TilemapBuffer
.Lfe170:
	.size	 SlidePartyMenuBoxOneStep,.Lfe170-SlidePartyMenuBoxOneStep
	.align	2, 0
	.type	 Task_SlideSelectedSlotsOffscreen,function
	.thumb_func
Task_SlideSelectedSlotsOffscreen:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r7, r0, #0x3
	ldr	r0, .L1441
	mov	r8, r0
	add	r6, r7, r0
	add	r0, r4, #0
	bl	SlidePartyMenuBoxOneStep
	add	r0, r4, #0
	bl	SlidePartyMenuBoxSpritesOneStep
	ldrh	r1, [r6, #0x14]
	ldrh	r2, [r6, #0x10]
	add	r1, r1, r2
	strh	r1, [r6, #0x10]
	ldrh	r0, [r6, #0x16]
	ldrh	r3, [r6, #0x12]
	add	r0, r0, r3
	strh	r0, [r6, #0x12]
	add	r2, sp, #0x8
	ldrh	r0, [r6]
	add	r0, r0, r1
	strh	r0, [r2]
	add	r1, r2, #0
	ldrh	r0, [r6, #0x12]
	ldrh	r3, [r6, #0x8]
	add	r2, r0, r3
	strh	r2, [r1, #0x2]
	add	r0, r1, #0
	ldrh	r0, [r0]
	cmp	r0, #0x21
	bls	.L1440	@cond_branch
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x21
	bls	.L1440	@cond_branch
	mov	r1, #0x14
	ldrsh	r0, [r6, r1]
	neg	r0, r0
	strh	r0, [r6, #0x14]
	mov	r2, #0x16
	ldrsh	r0, [r6, r2]
	neg	r0, r0
	strh	r0, [r6, #0x16]
	bl	SwitchPartyMon
	ldr	r4, .L1441+0x4
	ldrb	r0, [r4, #0x9]
	bl	DisplayPartyPokemonData
	ldrb	r0, [r4, #0xa]
	bl	DisplayPartyPokemonData
	mov	r0, #0x9
	ldrsb	r0, [r4, r0]
	ldr	r5, .L1441+0x8
	ldr	r1, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	bl	PutWindowTilemap
	mov	r0, #0xa
	ldrsb	r0, [r4, r0]
	ldr	r1, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	bl	PutWindowTilemap
	ldr	r0, .L1441+0xc
	ldr	r1, [r0]
	ldrb	r2, [r6]
	ldrb	r3, [r6, #0x2]
	ldrb	r0, [r6, #0x4]
	str	r0, [sp]
	ldrb	r0, [r6, #0x6]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	bl	CopyToBufferFromBgTilemap
	ldr	r0, .L1441+0x10
	ldr	r1, [r0]
	ldrb	r2, [r6, #0x8]
	ldrb	r3, [r6, #0xa]
	ldrb	r0, [r6, #0xc]
	str	r0, [sp]
	ldrb	r0, [r6, #0xe]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	bl	CopyToBufferFromBgTilemap
	mov	r0, #0x9
	ldrsb	r0, [r4, r0]
	ldr	r1, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	bl	ClearWindowTilemap
	mov	r0, #0xa
	ldrsb	r0, [r4, r0]
	ldr	r1, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	bl	ClearWindowTilemap
	mov	r0, r8
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L1441+0x14
	str	r1, [r0]
.L1440:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1442:
	.align	2, 0
.L1441:
	.word	gTasks+0x8
	.word	gPartyMenu
	.word	sPartyMenuBoxes
	.word	sSlot1TilemapBuffer
	.word	sSlot2TilemapBuffer
	.word	Task_SlideSelectedSlotsOnscreen
.Lfe171:
	.size	 Task_SlideSelectedSlotsOffscreen,.Lfe171-Task_SlideSelectedSlotsOffscreen
	.align	2, 0
	.type	 Task_SlideSelectedSlotsOnscreen,function
	.thumb_func
Task_SlideSelectedSlotsOnscreen:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1448
	add	r4, r0, r1
	add	r0, r6, #0
	bl	SlidePartyMenuBoxOneStep
	add	r0, r6, #0
	bl	SlidePartyMenuBoxSpritesOneStep
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1444	@cond_branch
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L1444	@cond_branch
	ldr	r5, .L1448+0x4
	mov	r0, #0x9
	ldrsb	r0, [r5, r0]
	ldr	r4, .L1448+0x8
	ldr	r1, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	bl	PutWindowTilemap
	mov	r0, #0xa
	ldrsb	r0, [r5, r0]
	ldr	r1, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r6, #0
	bl	FinishTwoMonAction
	b	.L1445
.L1449:
	.align	2, 0
.L1448:
	.word	gTasks+0x8
	.word	gPartyMenu
	.word	sPartyMenuBoxes
.L1444:
	ldrh	r1, [r4, #0x14]
	ldrh	r0, [r4, #0x10]
	add	r1, r1, r0
	strh	r1, [r4, #0x10]
	ldrh	r0, [r4, #0x16]
	ldrh	r2, [r4, #0x12]
	add	r0, r0, r2
	strh	r0, [r4, #0x12]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0
	bne	.L1446	@cond_branch
	strh	r1, [r4, #0x14]
.L1446:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1445	@cond_branch
	strh	r0, [r4, #0x16]
.L1445:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe172:
	.size	 Task_SlideSelectedSlotsOnscreen,.Lfe172-Task_SlideSelectedSlotsOnscreen
	.align	2, 0
	.type	 SwitchMenuBoxSprites,function
	.thumb_func
SwitchMenuBoxSprites:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	ldrb	r3, [r0]
	ldrb	r2, [r1]
	strb	r2, [r0]
	strb	r3, [r1]
	ldr	r5, .L1451
	ldrb	r2, [r0]
	lsl	r3, r2, #0x4
	add	r3, r3, r2
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldrh	r6, [r3, #0x20]
	ldrh	r2, [r3, #0x22]
	mov	r8, r2
	ldrh	r2, [r3, #0x24]
	mov	r9, r2
	ldrh	r2, [r3, #0x26]
	mov	sl, r2
	ldrb	r4, [r1]
	lsl	r2, r4, #0x4
	add	r2, r2, r4
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldrh	r2, [r2, #0x20]
	strh	r2, [r3, #0x20]
	ldrb	r2, [r0]
	lsl	r3, r2, #0x4
	add	r3, r3, r2
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldrb	r4, [r1]
	lsl	r2, r4, #0x4
	add	r2, r2, r4
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldrh	r2, [r2, #0x22]
	strh	r2, [r3, #0x22]
	ldrb	r2, [r0]
	lsl	r3, r2, #0x4
	add	r3, r3, r2
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldrb	r4, [r1]
	lsl	r2, r4, #0x4
	add	r2, r2, r4
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldrh	r2, [r2, #0x24]
	strh	r2, [r3, #0x24]
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldrb	r3, [r1]
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r0, [r0, #0x26]
	strh	r0, [r2, #0x26]
	ldrb	r2, [r1]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x20]
	ldrb	r2, [r1]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r2, r8
	strh	r2, [r0, #0x22]
	ldrb	r2, [r1]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r2, r9
	strh	r2, [r0, #0x24]
	ldrb	r1, [r1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, sl
	strh	r1, [r0, #0x26]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1452:
	.align	2, 0
.L1451:
	.word	gSprites
.Lfe173:
	.size	 SwitchMenuBoxSprites,.Lfe173-SwitchMenuBoxSprites
	.align	2, 0
	.type	 SwitchPartyMon,function
	.thumb_func
SwitchPartyMon:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	ldr	r1, .L1454
	ldr	r2, .L1454+0x4
	mov	r3, #0x9
	ldrsb	r3, [r2, r3]
	lsl	r0, r3, #0x4
	ldr	r1, [r1]
	add	r0, r1, r0
	str	r0, [sp]
	ldrb	r2, [r2, #0xa]
	lsl	r2, r2, #24
	asr	r2, r2, #24
	lsl	r0, r2, #0x4
	add	r0, r1, r0
	str	r0, [sp, #0x4]
	mov	r1, #0x64
	mov	r4, r3
	mul	r4, r4, r1
	ldr	r0, .L1454+0x8
	add	r4, r4, r0
	mov	r5, r2
	mul	r5, r5, r1
	add	r5, r5, r0
	mov	r0, #0x64
	bl	Alloc
	add	r6, r0, #0
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x64
	bl	memcpy
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x64
	bl	memcpy
	add	r0, r6, #0
	bl	Free
	ldr	r0, [sp]
	add	r0, r0, #0xb
	ldr	r1, [sp, #0x4]
	add	r1, r1, #0xb
	bl	SwitchMenuBoxSprites
	ldr	r0, [sp]
	add	r0, r0, #0xa
	ldr	r1, [sp, #0x4]
	add	r1, r1, #0xa
	bl	SwitchMenuBoxSprites
	ldr	r0, [sp]
	add	r0, r0, #0x9
	ldr	r1, [sp, #0x4]
	add	r1, r1, #0x9
	bl	SwitchMenuBoxSprites
	ldr	r0, [sp]
	add	r0, r0, #0xc
	ldr	r1, [sp, #0x4]
	add	r1, r1, #0xc
	bl	SwitchMenuBoxSprites
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1455:
	.align	2, 0
.L1454:
	.word	sPartyMenuBoxes
	.word	gPartyMenu
	.word	gPlayerParty
.Lfe174:
	.size	 SwitchPartyMon,.Lfe174-SwitchPartyMon
	.align	2, 0
	.type	 SetSwitchedPartyOrderQuestLogEvent,function
	.thumb_func
SetSwitchedPartyOrderQuestLogEvent:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r0, #0x4
	bl	Alloc
	add	r4, r0, #0
	ldr	r0, .L1457
	mov	r8, r0
	ldrb	r0, [r0, #0x9]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L1457+0x4
	add	r0, r0, r5
	mov	r1, #0x41
	bl	GetMonData
	strh	r0, [r4]
	mov	r1, r8
	mov	r0, #0xa
	ldrsb	r0, [r1, r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x41
	bl	GetMonData
	strh	r0, [r4, #0x2]
	mov	r0, #0x3
	add	r1, r4, #0
	bl	SetQuestLogEvent
	add	r0, r4, #0
	bl	Free
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1458:
	.align	2, 0
.L1457:
	.word	gPartyMenu
	.word	gPlayerParty
.Lfe175:
	.size	 SetSwitchedPartyOrderQuestLogEvent,.Lfe175-SetSwitchedPartyOrderQuestLogEvent
	.align	2, 0
	.type	 FinishTwoMonAction,function
	.thumb_func
FinishTwoMonAction:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L1460
	ldr	r0, [r0]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldr	r4, .L1460+0x4
	mov	r0, #0x0
	strb	r0, [r4, #0xb]
	ldrb	r0, [r4, #0x9]
	mov	r1, #0x0
	bl	AnimatePartySlot
	ldrb	r0, [r4, #0xa]
	strb	r0, [r4, #0x9]
	ldrb	r0, [r4, #0xa]
	mov	r1, #0x1
	bl	AnimatePartySlot
	mov	r0, #0x0
	bl	DisplayPartyMenuStdMessage
	ldr	r1, .L1460+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1460+0xc
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1461:
	.align	2, 0
.L1460:
	.word	sPartyMenuInternal
	.word	gPartyMenu
	.word	gTasks
	.word	Task_HandleChooseMonInput
.Lfe176:
	.size	 FinishTwoMonAction,.Lfe176-FinishTwoMonAction
	.align	2, 0
	.type	 CursorCB_Cancel1,function
	.thumb_func
CursorCB_Cancel1:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L1465
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, [r4]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldr	r0, .L1465+0x4
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x6
	bne	.L1463	@cond_branch
	mov	r0, #0xf
	bl	DisplayPartyMenuStdMessage
	b	.L1464
.L1466:
	.align	2, 0
.L1465:
	.word	sPartyMenuInternal
	.word	gPartyMenu
.L1463:
	mov	r0, #0x0
	bl	DisplayPartyMenuStdMessage
.L1464:
	ldr	r0, .L1467
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1467+0x4
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1468:
	.align	2, 0
.L1467:
	.word	gTasks
	.word	Task_HandleChooseMonInput
.Lfe177:
	.size	 CursorCB_Cancel1,.Lfe177-CursorCB_Cancel1
	.align	2, 0
	.type	 CursorCB_Item,function
	.thumb_func
CursorCB_Item:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L1470
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, [r4]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldr	r0, .L1470+0x4
	ldr	r1, .L1470+0x8
	ldrb	r1, [r1, #0x9]
	mov	r2, #0x8
	bl	SetPartyMonSelectionActions
	mov	r0, #0x1
	bl	DisplaySelectionWindow
	mov	r0, #0x19
	bl	DisplayPartyMenuStdMessage
	ldr	r1, .L1470+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xff
	strh	r1, [r0, #0x8]
	ldr	r1, .L1470+0x10
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1471:
	.align	2, 0
.L1470:
	.word	sPartyMenuInternal
	.word	gPlayerParty
	.word	gPartyMenu
	.word	gTasks
	.word	Task_HandleSelectionMenuInput
.Lfe178:
	.size	 CursorCB_Item,.Lfe178-CursorCB_Item
	.align	2, 0
	.type	 CursorCB_Give,function
	.thumb_func
CursorCB_Give:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1473
	ldr	r1, [r0]
	ldr	r0, .L1473+0x4
	str	r0, [r1, #0x4]
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L1474:
	.align	2, 0
.L1473:
	.word	sPartyMenuInternal
	.word	CB2_SelectBagItemToGive
.Lfe179:
	.size	 CursorCB_Give,.Lfe179-CursorCB_Give
	.align	2, 0
	.globl	CB2_SelectBagItemToGive
	.type	 CB2_SelectBagItemToGive,function
	.thumb_func
CB2_SelectBagItemToGive:
	push	{lr}
	ldr	r2, .L1476
	mov	r0, #0x1
	mov	r1, #0x3
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L1477:
	.align	2, 0
.L1476:
	.word	CB2_GiveHoldItem
.Lfe180:
	.size	 CB2_SelectBagItemToGive,.Lfe180-CB2_SelectBagItemToGive
	.align	2, 0
	.globl	CB2_GiveHoldItem
	.type	 CB2_GiveHoldItem,function
	.thumb_func
CB2_GiveHoldItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	ldr	r6, .L1486
	ldrh	r0, [r6]
	cmp	r0, #0
	bne	.L1479	@cond_branch
	ldr	r3, .L1486+0x4
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r2, [r3, #0xb]
	mov	r1, #0x7f
	str	r1, [sp]
	ldr	r1, .L1486+0x8
	str	r1, [sp, #0x4]
	ldr	r1, [r3]
	b	.L1485
.L1487:
	.align	2, 0
.L1486:
	.word	gSpecialVar_ItemId
	.word	gPartyMenu
	.word	Task_TryCreateSelectionWindow
.L1479:
	ldr	r4, .L1488
	ldr	r5, .L1488+0x4
	mov	r0, #0x9
	ldrsb	r0, [r5, r0]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r7, .L1488+0x8
	add	r0, r0, r7
	mov	r1, #0xc
	bl	GetMonData
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1481	@cond_branch
	ldrb	r0, [r5, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r2, [r5, #0xb]
	mov	r1, #0x7f
	str	r1, [sp]
	ldr	r1, .L1488+0xc
	str	r1, [sp, #0x4]
	ldr	r1, [r5]
.L1485:
	str	r1, [sp, #0x8]
	mov	r1, #0xff
	mov	r3, #0x1
	bl	InitPartyMenu
	b	.L1480
.L1489:
	.align	2, 0
.L1488:
	.word	sPartyMenuItemId
	.word	gPartyMenu
	.word	gPlayerParty
	.word	Task_SwitchHoldItemsPrompt
.L1481:
	ldrh	r0, [r6]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1483	@cond_branch
	ldrh	r0, [r6]
	mov	r1, #0x1
	bl	RemoveBagItem
	mov	r0, #0x9
	ldrsb	r0, [r5, r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	ldrh	r1, [r6]
	bl	GiveItemToMon
	bl	CB2_WriteMailToGiveMon
	b	.L1480
.L1483:
	ldrb	r0, [r5, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r2, [r5, #0xb]
	mov	r1, #0x7f
	str	r1, [sp]
	ldr	r1, .L1490
	str	r1, [sp, #0x4]
	ldr	r1, [r5]
	str	r1, [sp, #0x8]
	mov	r1, #0xff
	mov	r3, #0x1
	bl	InitPartyMenu
.L1480:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1491:
	.align	2, 0
.L1490:
	.word	Task_GiveHoldItem
.Lfe181:
	.size	 CB2_GiveHoldItem,.Lfe181-CB2_GiveHoldItem
	.align	2, 0
	.type	 Task_GiveHoldItem,function
	.thumb_func
Task_GiveHoldItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1494
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1493	@cond_branch
	ldr	r0, .L1494+0x4
	ldrh	r4, [r0]
	ldr	r0, .L1494+0x8
	mov	r8, r0
	ldrb	r0, [r0, #0x9]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L1494+0xc
	add	r0, r0, r5
	add	r1, r4, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DisplayGaveHeldItemMessage
	mov	r1, r8
	mov	r0, #0x9
	ldrsb	r0, [r1, r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	add	r1, r4, #0
	bl	GiveItemToMon
	add	r0, r4, #0
	mov	r1, #0x1
	bl	RemoveBagItem
	ldr	r1, .L1494+0x10
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1494+0x14
	str	r1, [r0]
.L1493:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1495:
	.align	2, 0
.L1494:
	.word	gPaletteFade
	.word	gSpecialVar_ItemId
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gTasks
	.word	Task_UpdateHeldItemSprite
.Lfe182:
	.size	 Task_GiveHoldItem,.Lfe182-Task_GiveHoldItem
	.align	2, 0
	.type	 Task_SwitchHoldItemsPrompt,function
	.thumb_func
Task_SwitchHoldItemsPrompt:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1498
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1497	@cond_branch
	ldr	r0, .L1498+0x4
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1498+0x8
	add	r0, r0, r1
	ldr	r1, .L1498+0xc
	ldrh	r1, [r1]
	mov	r2, #0x1
	bl	DisplayAlreadyHoldingItemSwitchMessage
	ldr	r1, .L1498+0x10
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1498+0x14
	str	r1, [r0]
.L1497:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1499:
	.align	2, 0
.L1498:
	.word	gPaletteFade
	.word	gPartyMenu
	.word	gPlayerParty
	.word	sPartyMenuItemId
	.word	gTasks
	.word	Task_SwitchItemsYesNo
.Lfe183:
	.size	 Task_SwitchHoldItemsPrompt,.Lfe183-Task_SwitchHoldItemsPrompt
	.align	2, 0
	.type	 Task_SwitchItemsYesNo,function
	.thumb_func
Task_SwitchItemsYesNo:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1501	@cond_branch
	bl	PartyMenuDisplayYesNoMenu
	ldr	r0, .L1502
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1502+0x4
	str	r0, [r1]
.L1501:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1503:
	.align	2, 0
.L1502:
	.word	gTasks
	.word	Task_HandleSwitchItemsYesNoInput
.Lfe184:
	.size	 Task_SwitchItemsYesNo,.Lfe184-Task_SwitchItemsYesNo
	.align	2, 0
	.type	 Task_HandleSwitchItemsYesNoInput,function
	.thumb_func
Task_HandleSwitchItemsYesNoInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L1506	@cond_branch
	cmp	r1, #0
	bgt	.L1515	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L1511	@cond_branch
	b	.L1505
.L1515:
	cmp	r1, #0x1
	beq	.L1512	@cond_branch
	b	.L1505
.L1506:
	ldr	r5, .L1516
	ldrh	r0, [r5]
	mov	r1, #0x1
	bl	RemoveBagItem
	ldr	r6, .L1516+0x4
	ldrh	r0, [r6]
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1507	@cond_branch
	ldrh	r0, [r5]
	mov	r1, #0x1
	bl	AddBagItem
	ldrh	r0, [r6]
	bl	BufferBagFullCantTakeItemMessage
	ldr	r0, .L1516+0x8
	mov	r1, #0x0
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1516+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1516+0x10
	str	r1, [r0]
	b	.L1505
.L1517:
	.align	2, 0
.L1516:
	.word	gSpecialVar_ItemId
	.word	sPartyMenuItemId
	.word	gStringVar4
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.L1507:
	ldrh	r0, [r5]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1509	@cond_branch
	ldr	r0, .L1518
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1518+0x4
	add	r0, r0, r1
	ldrh	r1, [r5]
	bl	GiveItemToMon
	ldr	r1, .L1518+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1518+0xc
	str	r1, [r0]
	b	.L1505
.L1519:
	.align	2, 0
.L1518:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gTasks
	.word	Task_WriteMailToGiveMonAfterText
.L1509:
	ldr	r0, .L1520
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1520+0x4
	add	r0, r0, r1
	ldrh	r1, [r5]
	bl	GiveItemToMon
	ldrh	r0, [r5]
	ldrh	r1, [r6]
	mov	r2, #0x1
	bl	DisplaySwitchedHeldItemMessage
	ldr	r1, .L1520+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1520+0xc
	str	r1, [r0]
	b	.L1505
.L1521:
	.align	2, 0
.L1520:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gTasks
	.word	Task_UpdateHeldItemSprite
.L1511:
	mov	r0, #0x5
	bl	PlaySE
.L1512:
	ldr	r0, .L1522
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1522+0x4
	str	r0, [r1]
.L1505:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1523:
	.align	2, 0
.L1522:
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.Lfe185:
	.size	 Task_HandleSwitchItemsYesNoInput,.Lfe185-Task_HandleSwitchItemsYesNoInput
	.align	2, 0
	.type	 Task_WriteMailToGiveMonAfterText,function
	.thumb_func
Task_WriteMailToGiveMonAfterText:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1525	@cond_branch
	ldr	r0, .L1526
	ldr	r1, [r0]
	ldr	r0, .L1526+0x4
	str	r0, [r1, #0x4]
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
.L1525:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1527:
	.align	2, 0
.L1526:
	.word	sPartyMenuInternal
	.word	CB2_WriteMailToGiveMon
.Lfe186:
	.size	 Task_WriteMailToGiveMonAfterText,.Lfe186-Task_WriteMailToGiveMonAfterText
	.align	2, 0
	.type	 CB2_WriteMailToGiveMon,function
	.thumb_func
CB2_WriteMailToGiveMon:
	push	{lr}
	ldr	r0, .L1529
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1529+0x4
	add	r0, r0, r1
	mov	r1, #0x40
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1529+0x8
	lsl	r2, r0, #0x3
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L1529+0xc
	add	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	ldr	r2, .L1529+0x10
	mov	r0, #0x4
	bl	DoEasyChatScreen
	pop	{r0}
	bx	r0
.L1530:
	.align	2, 0
.L1529:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSaveBlock1Ptr
	.word	0x2ce4
	.word	CB2_ReturnToPartyMenuFromWritingMail
.Lfe187:
	.size	 CB2_WriteMailToGiveMon,.Lfe187-CB2_WriteMailToGiveMon
	.align	2, 0
	.type	 CB2_ReturnToPartyMenuFromWritingMail,function
	.thumb_func
CB2_ReturnToPartyMenuFromWritingMail:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	ldr	r6, .L1534
	mov	r1, #0x9
	ldrsb	r1, [r6, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1534+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L1534+0x8
	ldrh	r7, [r0]
	cmp	r7, #0
	bne	.L1532	@cond_branch
	add	r0, r5, #0
	bl	TakeMailFromMon
	ldr	r4, .L1534+0xc
	add	r0, r5, #0
	mov	r1, #0xc
	add	r2, r4, #0
	bl	SetMonData
	ldrh	r0, [r4]
	mov	r1, #0x1
	bl	RemoveBagItem
	mov	r0, r8
	mov	r1, #0x1
	bl	AddBagItem
	ldrb	r0, [r6, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r2, [r6, #0xb]
	str	r7, [sp]
	ldr	r1, .L1534+0x10
	str	r1, [sp, #0x4]
	ldr	r1, [r6]
	str	r1, [sp, #0x8]
	mov	r1, #0xff
	mov	r3, #0x1
	bl	InitPartyMenu
	b	.L1533
.L1535:
	.align	2, 0
.L1534:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_Result
	.word	sPartyMenuItemId
	.word	Task_TryCreateSelectionWindow
.L1532:
	ldrb	r0, [r6, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r2, [r6, #0xb]
	mov	r1, #0x0
	str	r1, [sp]
	ldr	r1, .L1536
	str	r1, [sp, #0x4]
	ldr	r1, [r6]
	str	r1, [sp, #0x8]
	mov	r1, #0xff
	mov	r3, #0x1
	bl	InitPartyMenu
.L1533:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1537:
	.align	2, 0
.L1536:
	.word	Task_DisplayGaveMailFromPartyMessage
.Lfe188:
	.size	 CB2_ReturnToPartyMenuFromWritingMail,.Lfe188-CB2_ReturnToPartyMenuFromWritingMail
	.align	2, 0
	.type	 Task_DisplayGaveMailFromPartyMessage,function
	.thumb_func
Task_DisplayGaveMailFromPartyMessage:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1542
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1539	@cond_branch
	ldr	r1, .L1542+0x4
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L1540	@cond_branch
	ldr	r0, .L1542+0x8
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1542+0xc
	add	r0, r0, r1
	ldr	r1, .L1542+0x10
	ldrh	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DisplayGaveHeldItemMessage
	b	.L1541
.L1543:
	.align	2, 0
.L1542:
	.word	gPaletteFade
	.word	sPartyMenuItemId
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
.L1540:
	ldr	r0, .L1544
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	mov	r2, #0x0
	bl	DisplaySwitchedHeldItemMessage
.L1541:
	ldr	r0, .L1544+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1544+0x8
	str	r0, [r1]
.L1539:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1545:
	.align	2, 0
.L1544:
	.word	gSpecialVar_ItemId
	.word	gTasks
	.word	Task_UpdateHeldItemSprite
.Lfe189:
	.size	 Task_DisplayGaveMailFromPartyMessage,.Lfe189-Task_DisplayGaveMailFromPartyMessage
	.align	2, 0
	.type	 Task_UpdateHeldItemSprite,function
	.thumb_func
Task_UpdateHeldItemSprite:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1548
	ldrb	r4, [r0, #0x9]
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1547	@cond_branch
	lsl	r2, r4, #0x18
	asr	r2, r2, #0x18
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r1, .L1548+0x4
	add	r0, r0, r1
	ldr	r1, .L1548+0x8
	lsl	r2, r2, #0x4
	ldr	r1, [r1]
	add	r1, r1, r2
	bl	UpdatePartyMonHeldItemSprite
	add	r0, r5, #0
	bl	Task_ReturnToChooseMonAfterText
.L1547:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1549:
	.align	2, 0
.L1548:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	sPartyMenuBoxes
.Lfe190:
	.size	 Task_UpdateHeldItemSprite,.Lfe190-Task_UpdateHeldItemSprite
	.align	2, 0
	.type	 CursorCB_TakeItem,function
	.thumb_func
CursorCB_TakeItem:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1559
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1559+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L1559+0x8
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, [r4]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	add	r0, r5, #0
	bl	TryTakeMonItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1552	@cond_branch
	cmp	r0, #0x1
	beq	.L1553	@cond_branch
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x1
	bl	DisplayTookHeldItemMessage
	b	.L1551
.L1560:
	.align	2, 0
.L1559:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	sPartyMenuInternal
.L1552:
	ldr	r1, .L1561
	add	r0, r5, #0
	bl	GetMonNickname
	ldr	r4, .L1561+0x4
	ldr	r1, .L1561+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	b	.L1558
.L1562:
	.align	2, 0
.L1561:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_PkmnNotHolding
.L1553:
	add	r0, r6, #0
	bl	BufferBagFullCantTakeItemMessage
	ldr	r0, .L1563
.L1558:
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
.L1551:
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L1563+0x4
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1563+0x8
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1564:
	.align	2, 0
.L1563:
	.word	gStringVar4
	.word	gTasks
	.word	Task_UpdateHeldItemSprite
.Lfe191:
	.size	 CursorCB_TakeItem,.Lfe191-CursorCB_TakeItem
	.align	2, 0
	.type	 CursorCB_Mail,function
	.thumb_func
CursorCB_Mail:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L1566
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, [r4]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldr	r0, .L1566+0x4
	ldr	r1, .L1566+0x8
	ldrb	r1, [r1, #0x9]
	mov	r2, #0x9
	bl	SetPartyMonSelectionActions
	mov	r0, #0x2
	bl	DisplaySelectionWindow
	mov	r0, #0x1a
	bl	DisplayPartyMenuStdMessage
	ldr	r1, .L1566+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xff
	strh	r1, [r0, #0x8]
	ldr	r1, .L1566+0x10
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1567:
	.align	2, 0
.L1566:
	.word	sPartyMenuInternal
	.word	gPlayerParty
	.word	gPartyMenu
	.word	gTasks
	.word	Task_HandleSelectionMenuInput
.Lfe192:
	.size	 CursorCB_Mail,.Lfe192-CursorCB_Mail
	.align	2, 0
	.type	 CursorCB_Read,function
	.thumb_func
CursorCB_Read:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1569
	ldr	r1, [r0]
	ldr	r0, .L1569+0x4
	str	r0, [r1, #0x4]
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L1570:
	.align	2, 0
.L1569:
	.word	sPartyMenuInternal
	.word	CB2_ReadHeldMail
.Lfe193:
	.size	 CursorCB_Read,.Lfe193-CursorCB_Read
	.align	2, 0
	.type	 CB2_ReadHeldMail,function
	.thumb_func
CB2_ReadHeldMail:
	push	{lr}
	ldr	r0, .L1572
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1572+0x4
	add	r0, r0, r1
	mov	r1, #0x40
	bl	GetMonData
	ldr	r2, .L1572+0x8
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L1572+0xc
	add	r1, r1, r0
	ldr	r0, [r2]
	add	r0, r0, r1
	ldr	r1, .L1572+0x10
	mov	r2, #0x1
	bl	ReadMail
	pop	{r0}
	bx	r0
.L1573:
	.align	2, 0
.L1572:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSaveBlock1Ptr
	.word	0x2ce4
	.word	CB2_ReturnToPartyMenuFromReadingMail
.Lfe194:
	.size	 CB2_ReadHeldMail,.Lfe194-CB2_ReadHeldMail
	.align	2, 0
	.type	 CB2_ReturnToPartyMenuFromReadingMail,function
	.thumb_func
CB2_ReturnToPartyMenuFromReadingMail:
	push	{lr}
	add	sp, sp, #-0xc
	ldr	r2, .L1575
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r3, .L1575+0x4
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r2, [r3, #0xb]
	mov	r1, #0x16
	str	r1, [sp]
	ldr	r1, .L1575+0x8
	str	r1, [sp, #0x4]
	ldr	r1, [r3]
	str	r1, [sp, #0x8]
	mov	r1, #0xff
	mov	r3, #0x1
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L1576:
	.align	2, 0
.L1575:
	.word	gPaletteFade
	.word	gPartyMenu
	.word	Task_TryCreateSelectionWindow
.Lfe195:
	.size	 CB2_ReturnToPartyMenuFromReadingMail,.Lfe195-CB2_ReturnToPartyMenuFromReadingMail
	.align	2, 0
	.type	 CursorCB_TakeMail,function
	.thumb_func
CursorCB_TakeMail:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r5, .L1578
	ldr	r0, [r5]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldr	r0, [r5]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, .L1578+0x4
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1578+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1578+0xc
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1579:
	.align	2, 0
.L1578:
	.word	sPartyMenuInternal
	.word	gText_SendMailToPC
	.word	gTasks
	.word	Task_SendMailToPCYesNo
.Lfe196:
	.size	 CursorCB_TakeMail,.Lfe196-CursorCB_TakeMail
	.align	2, 0
	.type	 Task_SendMailToPCYesNo,function
	.thumb_func
Task_SendMailToPCYesNo:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1581	@cond_branch
	bl	PartyMenuDisplayYesNoMenu
	ldr	r0, .L1582
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1582+0x4
	str	r0, [r1]
.L1581:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1583:
	.align	2, 0
.L1582:
	.word	gTasks
	.word	Task_HandleSendMailToPCYesNoInput
.Lfe197:
	.size	 Task_SendMailToPCYesNo,.Lfe197-Task_SendMailToPCYesNo
	.align	2, 0
	.type	 Task_HandleSendMailToPCYesNoInput,function
	.thumb_func
Task_HandleSendMailToPCYesNoInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L1586	@cond_branch
	cmp	r1, #0
	bgt	.L1593	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L1589	@cond_branch
	b	.L1585
.L1593:
	cmp	r1, #0x1
	beq	.L1590	@cond_branch
	b	.L1585
.L1586:
	ldr	r0, .L1595
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1595+0x4
	add	r0, r0, r1
	bl	TakeMailFromMon2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1587	@cond_branch
	ldr	r0, .L1595+0x8
	mov	r1, #0x0
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1595+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1595+0x10
	b	.L1594
.L1596:
	.align	2, 0
.L1595:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gText_MailSentToPC
	.word	gTasks
	.word	Task_UpdateHeldItemSprite
.L1587:
	ldr	r0, .L1597
	mov	r1, #0x0
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1597+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1597+0x8
	b	.L1594
.L1598:
	.align	2, 0
.L1597:
	.word	gText_PCMailboxFull
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.L1589:
	mov	r0, #0x5
	bl	PlaySE
.L1590:
	ldr	r0, .L1599
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1599+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1599+0x8
.L1594:
	str	r1, [r0]
.L1585:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1600:
	.align	2, 0
.L1599:
	.word	gText_MailMessageWillBeLost
	.word	gTasks
	.word	Task_LoseMailMessageYesNo
.Lfe198:
	.size	 Task_HandleSendMailToPCYesNoInput,.Lfe198-Task_HandleSendMailToPCYesNoInput
	.align	2, 0
	.type	 Task_LoseMailMessageYesNo,function
	.thumb_func
Task_LoseMailMessageYesNo:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1602	@cond_branch
	bl	PartyMenuDisplayYesNoMenu
	ldr	r0, .L1603
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1603+0x4
	str	r0, [r1]
.L1602:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1604:
	.align	2, 0
.L1603:
	.word	gTasks
	.word	Task_HandleLoseMailMessageYesNoInput
.Lfe199:
	.size	 Task_LoseMailMessageYesNo,.Lfe199-Task_LoseMailMessageYesNo
	.align	2, 0
	.type	 Task_HandleLoseMailMessageYesNoInput,function
	.thumb_func
Task_HandleLoseMailMessageYesNoInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L1607	@cond_branch
	cmp	r1, #0
	bgt	.L1614	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L1610	@cond_branch
	b	.L1606
.L1614:
	cmp	r1, #0x1
	beq	.L1611	@cond_branch
	b	.L1606
.L1607:
	ldr	r0, .L1615
	mov	r8, r0
	ldrb	r0, [r0, #0x9]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r6, .L1615+0x4
	add	r0, r0, r6
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1608	@cond_branch
	mov	r1, r8
	mov	r0, #0x9
	ldrsb	r0, [r1, r0]
	mul	r0, r0, r7
	add	r0, r0, r6
	bl	TakeMailFromMon
	ldr	r0, .L1615+0x8
	mov	r1, #0x0
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1615+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1615+0x10
	str	r1, [r0]
	b	.L1606
.L1616:
	.align	2, 0
.L1615:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gText_MailTakenFromPkmn
	.word	gTasks
	.word	Task_UpdateHeldItemSprite
.L1608:
	add	r0, r4, #0
	bl	BufferBagFullCantTakeItemMessage
	ldr	r0, .L1617
	mov	r1, #0x0
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1617+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1617+0x8
	str	r1, [r0]
	b	.L1606
.L1618:
	.align	2, 0
.L1617:
	.word	gStringVar4
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.L1610:
	mov	r0, #0x5
	bl	PlaySE
.L1611:
	ldr	r0, .L1619
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1619+0x4
	str	r0, [r1]
.L1606:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1620:
	.align	2, 0
.L1619:
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.Lfe200:
	.size	 Task_HandleLoseMailMessageYesNoInput,.Lfe200-Task_HandleLoseMailMessageYesNoInput
	.align	2, 0
	.type	 CursorCB_Cancel2,function
	.thumb_func
CursorCB_Cancel2:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L1622
	mov	r8, r0
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mov	r5, r1
	mul	r5, r5, r0
	ldr	r0, .L1622+0x4
	mov	r9, r0
	add	r5, r5, r9
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L1622+0x8
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, [r4]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	mov	r0, r8
	ldrb	r4, [r0, #0x9]
	add	r0, r5, #0
	bl	GetPartyMenuActionsType
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, r9
	add	r1, r4, #0
	bl	SetPartyMonSelectionActions
	mov	r0, #0x0
	bl	DisplaySelectionWindow
	mov	r0, #0x16
	bl	DisplayPartyMenuStdMessage
	ldr	r1, .L1622+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xff
	strh	r1, [r0, #0x8]
	ldr	r1, .L1622+0x10
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1623:
	.align	2, 0
.L1622:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	sPartyMenuInternal
	.word	gTasks
	.word	Task_HandleSelectionMenuInput
.Lfe201:
	.size	 CursorCB_Cancel2,.Lfe201-CursorCB_Cancel2
	.align	2, 0
	.type	 CursorCB_SendMon,function
	.thumb_func
CursorCB_SendMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r5, .L1627
	ldr	r0, [r5]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	bl	TrySwitchInPokemon
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1625	@cond_branch
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
	b	.L1626
.L1628:
	.align	2, 0
.L1627:
	.word	sPartyMenuInternal
.L1625:
	ldr	r0, [r5]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldr	r0, .L1629
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1629+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1629+0x8
	str	r1, [r0]
.L1626:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1630:
	.align	2, 0
.L1629:
	.word	gStringVar4
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.Lfe202:
	.size	 CursorCB_SendMon,.Lfe202-CursorCB_SendMon
	.align	2, 0
	.type	 CursorCB_Enter,function
	.thumb_func
CursorCB_Enter:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1642
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x80
	bne	.L1632	@cond_branch
	mov	r0, #0x2
	mov	r8, r0
	ldr	r1, .L1642+0x4
	str	r1, [sp]
	b	.L1633
.L1643:
	.align	2, 0
.L1642:
	.word	gPartyMenu
	.word	gText_NoMoreThanTwoMayEnter
.L1632:
	mov	r2, #0x3
	mov	r8, r2
	ldr	r0, .L1644
	str	r0, [sp]
.L1633:
	ldr	r4, .L1644+0x4
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, [r4]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	mov	r5, #0x0
	lsl	r1, r7, #0x2
	mov	r9, r1
	cmp	r5, r8
	bcs	.L1635	@cond_branch
	ldr	r6, .L1644+0x8
	ldr	r1, .L1644+0xc
	mov	r2, r9
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	sl, r0
.L1637:
	ldr	r0, .L1644+0x10
	add	r4, r5, r0
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L1636	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r6, #0x9]
	add	r0, r0, #0x1
	strb	r0, [r4]
	add	r0, r5, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1644+0x14
	mov	r2, #0x9
	ldrsb	r2, [r6, r2]
	lsl	r2, r2, #0x4
	ldr	r1, [r1]
	add	r1, r1, r2
	mov	r2, #0x1
	bl	DisplayPartyPokemonDescriptionText
	mov	r0, r8
	sub	r0, r0, #0x1
	cmp	r5, r0
	bne	.L1639	@cond_branch
	bl	MoveCursorToConfirm
.L1639:
	mov	r0, #0x0
	bl	DisplayPartyMenuStdMessage
	ldr	r0, .L1644+0x18
	mov	r1, sl
	b	.L1641
.L1645:
	.align	2, 0
.L1644:
	.word	gText_NoMoreThanThreeMayEnter
	.word	sPartyMenuInternal
	.word	gPartyMenu
	.word	gTasks
	.word	gSelectedOrderFromParty
	.word	sPartyMenuBoxes
	.word	Task_HandleChooseMonInput
.L1636:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r8
	bcc	.L1637	@cond_branch
.L1635:
	mov	r0, #0x1a
	bl	PlaySE
	ldr	r0, [sp]
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	ldr	r0, .L1646
	mov	r2, r9
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1646+0x4
.L1641:
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1647:
	.align	2, 0
.L1646:
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.Lfe203:
	.size	 CursorCB_Enter,.Lfe203-CursorCB_Enter
	.align	2, 0
	.type	 MoveCursorToConfirm,function
	.thumb_func
MoveCursorToConfirm:
	push	{r4, lr}
	ldr	r4, .L1649
	ldrb	r0, [r4, #0x9]
	mov	r1, #0x0
	bl	AnimatePartySlot
	mov	r0, #0x6
	strb	r0, [r4, #0x9]
	mov	r1, #0x1
	bl	AnimatePartySlot
	pop	{r4}
	pop	{r0}
	bx	r0
.L1650:
	.align	2, 0
.L1649:
	.word	gPartyMenu
.Lfe204:
	.size	 MoveCursorToConfirm,.Lfe204-MoveCursorToConfirm
	.align	2, 0
	.type	 CursorCB_NoEntry,function
	.thumb_func
CursorCB_NoEntry:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L1665
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, [r4]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	mov	r4, #0x0
	ldr	r3, .L1665+0x4
	ldr	r6, .L1665+0x8
	add	r5, r6, #0
.L1655:
	add	r2, r4, r3
	ldrb	r1, [r2]
	mov	r0, #0x9
	ldrsb	r0, [r5, r0]
	add	r0, r0, #0x1
	cmp	r1, r0
	bne	.L1654	@cond_branch
	mov	r1, #0x0
	strb	r1, [r2]
	cmp	r4, #0
	beq	.L1658	@cond_branch
	cmp	r4, #0x1
	beq	.L1659	@cond_branch
	b	.L1653
.L1666:
	.align	2, 0
.L1665:
	.word	sPartyMenuInternal
	.word	gSelectedOrderFromParty
	.word	gPartyMenu
.L1658:
	ldrb	r0, [r3, #0x1]
	strb	r0, [r3]
	ldrb	r0, [r3, #0x2]
	strb	r0, [r3, #0x1]
	strb	r4, [r3, #0x2]
	b	.L1653
.L1659:
	ldrb	r0, [r3, #0x2]
	strb	r0, [r3, #0x1]
	strb	r1, [r3, #0x2]
	b	.L1653
.L1654:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L1655	@cond_branch
.L1653:
	ldr	r5, .L1667
	mov	r0, #0x9
	ldrsb	r0, [r6, r0]
	lsl	r0, r0, #0x4
	ldr	r1, [r5]
	add	r1, r1, r0
	mov	r0, #0x1
	mov	r2, #0x1
	bl	DisplayPartyPokemonDescriptionText
	ldr	r4, .L1667+0x4
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L1663	@cond_branch
	lsl	r0, r0, #0x4
	sub	r0, r0, #0x10
	ldr	r1, [r5]
	add	r1, r1, r0
	mov	r0, #0x2
	mov	r2, #0x1
	bl	DisplayPartyPokemonDescriptionText
.L1663:
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L1664	@cond_branch
	lsl	r0, r0, #0x4
	sub	r0, r0, #0x10
	ldr	r1, [r5]
	add	r1, r1, r0
	mov	r0, #0x3
	mov	r2, #0x1
	bl	DisplayPartyPokemonDescriptionText
.L1664:
	mov	r0, #0x0
	bl	DisplayPartyMenuStdMessage
	ldr	r0, .L1667+0x8
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1667+0xc
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1668:
	.align	2, 0
.L1667:
	.word	sPartyMenuBoxes
	.word	gSelectedOrderFromParty
	.word	gTasks
	.word	Task_HandleChooseMonInput
.Lfe205:
	.size	 CursorCB_NoEntry,.Lfe205-CursorCB_NoEntry
	.align	2, 0
	.type	 CursorCB_Store,function
	.thumb_func
CursorCB_Store:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L1670
	ldr	r0, .L1670+0x4
	ldrb	r0, [r0, #0x9]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	strh	r0, [r1]
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L1671:
	.align	2, 0
.L1670:
	.word	gSpecialVar_0x8004
	.word	gPartyMenu
.Lfe206:
	.size	 CursorCB_Store,.Lfe206-CursorCB_Store
	.align	2, 0
	.type	 CursorCB_Register,function
	.thumb_func
CursorCB_Register:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1678
	mov	r9, r0
	ldrb	r0, [r0, #0x9]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r4, .L1678+0x4
	add	r0, r0, r4
	mov	r1, #0x41
	bl	GetMonData
	add	r6, r0, #0
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r1, r9
	mov	r0, #0x9
	ldrsb	r0, [r1, r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r4
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r1, r9
	mov	r0, #0x9
	ldrsb	r0, [r1, r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r4
	mov	r1, #0x50
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	GetHostRfuGameData
	ldr	r0, [r0]
	add	r1, r6, #0
	add	r2, r5, #0
	add	r3, r4, #0
	bl	CanRegisterMonForTradingBoard
	cmp	r0, #0x1
	beq	.L1674	@cond_branch
	cmp	r0, #0x2
	beq	.L1675	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r7, #0
	bl	Task_ClosePartyMenu
	b	.L1672
.L1679:
	.align	2, 0
.L1678:
	.word	gPartyMenu
	.word	gPlayerParty
.L1674:
	ldr	r0, .L1680
	ldr	r1, .L1680+0x4
	bl	StringExpandPlaceholders
	b	.L1673
.L1681:
	.align	2, 0
.L1680:
	.word	gStringVar4
	.word	gText_PkmnCantBeTradedNow
.L1675:
	ldr	r0, .L1682
	ldr	r1, .L1682+0x4
	bl	StringExpandPlaceholders
.L1673:
	mov	r0, #0x1a
	bl	PlaySE
	ldr	r4, .L1682+0x8
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, [r4]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldr	r4, .L1682
	ldr	r1, .L1682+0xc
	add	r0, r4, #0
	bl	StringAppend
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1682+0x10
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1682+0x14
	str	r1, [r0]
.L1672:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1683:
	.align	2, 0
.L1682:
	.word	gStringVar4
	.word	gText_EggCantBeTradedNow
	.word	sPartyMenuInternal
	.word	gText_PauseUntilPress
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.Lfe207:
	.size	 CursorCB_Register,.Lfe207-CursorCB_Register
	.align	2, 0
	.type	 CursorCB_Trade1,function
	.thumb_func
CursorCB_Trade1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1687
	mov	r8, r0
	ldrb	r0, [r0, #0x9]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r4, .L1687+0x4
	add	r0, r0, r4
	mov	r1, #0x41
	bl	GetMonData
	mov	r9, r0
	mov	r1, r9
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	mov	r1, r8
	mov	r0, #0x9
	ldrsb	r0, [r1, r0]
	mul	r0, r0, r6
	add	r0, r0, r4
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r1, r8
	mov	r0, #0x9
	ldrsb	r0, [r1, r0]
	mul	r0, r0, r6
	add	r0, r0, r4
	mov	r1, #0x50
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	GetHostRfuGameData
	ldr	r0, [r0]
	ldr	r1, .L1687+0x8
	ldr	r1, [r1]
	ldr	r2, .L1687+0xc
	ldrh	r3, [r2]
	ldr	r2, .L1687+0x10
	ldrb	r2, [r2]
	str	r2, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r2, r9
	bl	GetUnionRoomTradeMessageId
	cmp	r0, #0
	beq	.L1685	@cond_branch
	ldr	r5, .L1687+0x14
	ldr	r1, .L1687+0x18
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1a
	bl	PlaySE
	ldr	r4, .L1687+0x1c
	ldr	r0, [r4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, [r4]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	ldr	r1, .L1687+0x20
	add	r0, r5, #0
	bl	StringAppend
	add	r0, r5, #0
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1687+0x24
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1687+0x28
	str	r1, [r0]
	b	.L1686
.L1688:
	.align	2, 0
.L1687:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gRfuPartnerCompatibilityData
	.word	gUnionRoomOfferedSpecies
	.word	gUnionRoomRequestedMonType
	.word	gStringVar4
	.word	sUnionRoomTradeMessages
	.word	sPartyMenuInternal
	.word	gText_PauseUntilPress
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.L1685:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r7, #0
	bl	Task_ClosePartyMenu
.L1686:
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe208:
	.size	 CursorCB_Trade1,.Lfe208-CursorCB_Trade1
	.align	2, 0
	.type	 CursorCB_Trade2,function
	.thumb_func
CursorCB_Trade2:
	bx	lr
.Lfe209:
	.size	 CursorCB_Trade2,.Lfe209-CursorCB_Trade2
	.align	2, 0
	.type	 CursorCB_FieldMove,function
	.thumb_func
CursorCB_FieldMove:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	Menu_GetCursorPos
	ldr	r5, .L1718
	ldr	r1, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0xf
	add	r1, r1, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x12
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L1718+0x4
	lsl	r0, r4, #0x3
	add	r7, r0, r1
	ldr	r0, [r7]
	cmp	r0, #0
	bne	.LCB15843
	b	.L1690	@long jump
.LCB15843:
	ldr	r0, [r5]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	ldr	r0, [r5]
	add	r0, r0, #0xd
	bl	PartyMenuRemoveWindow
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1693	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L1692	@cond_branch
.L1693:
	add	r0, r4, #0
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1694	@cond_branch
	mov	r0, #0xd
	bl	DisplayPartyMenuStdMessage
	b	.L1709
.L1719:
	.align	2, 0
.L1718:
	.word	sPartyMenuInternal
	.word	sFieldMoveCursorCallbacks
.L1694:
	ldrb	r0, [r7, #0x4]
	b	.L1717
.L1692:
	cmp	r4, #0x6
	bhi	.L1697	@cond_branch
	ldr	r1, .L1720
	add	r0, r4, r1
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1697	@cond_branch
	ldr	r0, .L1720+0x4
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1720+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1720+0xc
	str	r1, [r0]
	b	.L1690
.L1721:
	.align	2, 0
.L1720:
	.word	0x821
	.word	gText_CantUseUntilNewBadge
	.word	gTasks
	.word	Task_ReturnToChooseMonAfterText
.L1697:
	ldr	r1, .L1722
	lsl	r0, r4, #0x3
	add	r5, r0, r1
	ldr	r0, [r5]
	bl	_call_via_r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB15935
	b	.L1699	@long jump
.LCB15935:
	sub	r0, r4, #0x2
	cmp	r0, #0x8
	bhi	.L1706	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1722+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1723:
	.align	2, 0
.L1722:
	.word	sFieldMoveCursorCallbacks
	.word	.L1707
	.align	2, 0
	.align	2, 0
.L1707:
	.word	.L1705
	.word	.L1706
	.word	.L1706
	.word	.L1706
	.word	.L1706
	.word	.L1703
	.word	.L1704
	.word	.L1702
	.word	.L1702
.L1702:
	add	r0, r6, #0
	bl	ChooseMonForSoftboiled
	b	.L1690
.L1703:
	ldr	r0, .L1724
	ldr	r1, [r0]
	mov	r0, #0x1c
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x1d]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	add	r1, r0, #0
	ldr	r0, .L1724+0x4
	ldrb	r1, [r1, #0x14]
	bl	GetMapNameGeneric
	ldr	r0, .L1724+0x8
	ldr	r1, .L1724+0xc
	b	.L1714
.L1725:
	.align	2, 0
.L1724:
	.word	gSaveBlock1Ptr
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_ReturnToHealingSpot
.L1704:
	ldr	r0, .L1726
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r1, #0x25
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	add	r1, r0, #0
	ldr	r0, .L1726+0x4
	ldrb	r1, [r1, #0x14]
	bl	GetMapNameGeneric
	ldr	r0, .L1726+0x8
	ldr	r1, .L1726+0xc
.L1714:
	bl	StringExpandPlaceholders
	add	r0, r6, #0
	bl	DisplayFieldMoveExitAreaMessage
	ldr	r0, .L1726+0x10
	ldr	r0, [r0]
	mov	r1, #0x86
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strh	r4, [r0]
	b	.L1690
.L1727:
	.align	2, 0
.L1726:
	.word	gSaveBlock1Ptr
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_EscapeFromHereAndReturnTo
	.word	sPartyMenuInternal
.L1705:
	ldr	r1, .L1728
	ldr	r0, .L1728+0x4
	str	r0, [r1]
	b	.L1715
.L1729:
	.align	2, 0
.L1728:
	.word	gPartyMenu
	.word	CB2_OpenFlyMap
.L1706:
	ldr	r1, .L1730
	ldr	r0, .L1730+0x4
	str	r0, [r1]
	bl	GetCursorSelectionMonId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1730+0x8
	add	r0, r0, r1
	add	r1, r4, #0
	bl	SetUsedFieldMoveQuestLogEvent
.L1715:
	add	r0, r6, #0
	bl	Task_ClosePartyMenu
	b	.L1690
.L1731:
	.align	2, 0
.L1730:
	.word	gPartyMenu
	.word	CB2_ReturnToField
	.word	gPlayerParty
.L1699:
	cmp	r4, #0
	beq	.L1711	@cond_branch
	cmp	r4, #0x4
	bne	.L1712	@cond_branch
	bl	DisplayCantUseSurfMessage
	b	.L1709
.L1711:
	bl	DisplayCantUseFlashMessage
	b	.L1709
.L1712:
	ldrb	r0, [r5, #0x4]
.L1717:
	bl	DisplayPartyMenuStdMessage
.L1709:
	ldr	r0, .L1732
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1732+0x4
	str	r0, [r1]
.L1690:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1733:
	.align	2, 0
.L1732:
	.word	gTasks
	.word	Task_CancelAfterAorBPress
.Lfe210:
	.size	 CursorCB_FieldMove,.Lfe210-CursorCB_FieldMove
	.align	2, 0
	.type	 DisplayFieldMoveExitAreaMessage,function
	.thumb_func
DisplayFieldMoveExitAreaMessage:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1735
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	ldr	r1, .L1735+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1735+0x8
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1736:
	.align	2, 0
.L1735:
	.word	gStringVar4
	.word	gTasks
	.word	Task_FieldMoveExitAreaYesNo
.Lfe211:
	.size	 DisplayFieldMoveExitAreaMessage,.Lfe211-DisplayFieldMoveExitAreaMessage
	.align	2, 0
	.type	 Task_FieldMoveExitAreaYesNo,function
	.thumb_func
Task_FieldMoveExitAreaYesNo:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1738	@cond_branch
	bl	PartyMenuDisplayYesNoMenu
	ldr	r0, .L1739
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1739+0x4
	str	r0, [r1]
.L1738:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1740:
	.align	2, 0
.L1739:
	.word	gTasks
	.word	Task_HandleFieldMoveExitAreaYesNoInput
.Lfe212:
	.size	 Task_FieldMoveExitAreaYesNo,.Lfe212-Task_FieldMoveExitAreaYesNo
	.align	2, 0
	.type	 Task_HandleFieldMoveExitAreaYesNoInput,function
	.thumb_func
Task_HandleFieldMoveExitAreaYesNoInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L1743	@cond_branch
	cmp	r1, #0
	bgt	.L1748	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L1744	@cond_branch
	b	.L1742
.L1748:
	cmp	r1, #0x1
	beq	.L1745	@cond_branch
	b	.L1742
.L1743:
	ldr	r1, .L1749
	ldr	r0, .L1749+0x4
	str	r0, [r1]
	bl	GetCursorSelectionMonId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1749+0x8
	add	r0, r0, r1
	ldr	r1, .L1749+0xc
	ldr	r1, [r1]
	mov	r2, #0x86
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	SetUsedFieldMoveQuestLogEvent
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
	b	.L1742
.L1750:
	.align	2, 0
.L1749:
	.word	gPartyMenu
	.word	CB2_ReturnToField
	.word	gPlayerParty
	.word	sPartyMenuInternal
.L1744:
	mov	r0, #0x5
	bl	PlaySE
.L1745:
	ldr	r0, .L1751
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L1751+0x4
	str	r1, [r0]
	add	r0, r4, #0
	bl	Task_ReturnToChooseMonAfterText
.L1742:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1752:
	.align	2, 0
.L1751:
	.word	gFieldCallback2
	.word	gPostMenuFieldCallback
.Lfe213:
	.size	 Task_HandleFieldMoveExitAreaYesNoInput,.Lfe213-Task_HandleFieldMoveExitAreaYesNoInput
	.align	2, 0
	.globl	FieldCallback_PrepareFadeInFromMenu
	.type	 FieldCallback_PrepareFadeInFromMenu,function
	.thumb_func
FieldCallback_PrepareFadeInFromMenu:
	push	{lr}
	bl	FadeInFromBlack
	ldr	r0, .L1754
	mov	r1, #0x8
	bl	CreateTask
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L1755:
	.align	2, 0
.L1754:
	.word	Task_FieldMoveWaitForFade
.Lfe214:
	.size	 FieldCallback_PrepareFadeInFromMenu,.Lfe214-FieldCallback_PrepareFadeInFromMenu
	.align	2, 0
	.type	 Task_FieldMoveWaitForFade,function
	.thumb_func
Task_FieldMoveWaitForFade:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsWeatherNotFadingIn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1757	@cond_branch
	bl	GetFieldMoveMonSpecies
	ldr	r1, .L1758
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [r1]
	ldr	r0, .L1758+0x4
	ldr	r0, [r0]
	bl	_call_via_r0
	add	r0, r4, #0
	bl	DestroyTask
.L1757:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1759:
	.align	2, 0
.L1758:
	.word	gFieldEffectArguments
	.word	gPostMenuFieldCallback
.Lfe215:
	.size	 Task_FieldMoveWaitForFade,.Lfe215-Task_FieldMoveWaitForFade
	.align	2, 0
	.type	 GetFieldMoveMonSpecies,function
	.thumb_func
GetFieldMoveMonSpecies:
	push	{lr}
	ldr	r0, .L1761
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1761+0x4
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L1762:
	.align	2, 0
.L1761:
	.word	gPartyMenu
	.word	gPlayerParty
.Lfe216:
	.size	 GetFieldMoveMonSpecies,.Lfe216-GetFieldMoveMonSpecies
	.align	2, 0
	.type	 Task_CancelAfterAorBPress,function
	.thumb_func
Task_CancelAfterAorBPress:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L1766
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1765	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1764	@cond_branch
.L1765:
	add	r0, r2, #0
	bl	CursorCB_Cancel1
.L1764:
	pop	{r0}
	bx	r0
.L1767:
	.align	2, 0
.L1766:
	.word	gMain
.Lfe217:
	.size	 Task_CancelAfterAorBPress,.Lfe217-Task_CancelAfterAorBPress
	.align	2, 0
	.type	 DisplayCantUseFlashMessage,function
	.thumb_func
DisplayCantUseFlashMessage:
	push	{lr}
	ldr	r0, .L1771
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1769	@cond_branch
	mov	r0, #0xc
	bl	DisplayPartyMenuStdMessage
	b	.L1770
.L1772:
	.align	2, 0
.L1771:
	.word	0x807
.L1769:
	mov	r0, #0xd
	bl	DisplayPartyMenuStdMessage
.L1770:
	pop	{r0}
	bx	r0
.Lfe218:
	.size	 DisplayCantUseFlashMessage,.Lfe218-DisplayCantUseFlashMessage
	.align	2, 0
	.type	 FieldCallback_Surf,function
	.thumb_func
FieldCallback_Surf:
	push	{lr}
	bl	GetCursorSelectionMonId
	ldr	r1, .L1774
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1]
	mov	r0, #0x9
	bl	FieldEffectStart
	pop	{r0}
	bx	r0
.L1775:
	.align	2, 0
.L1774:
	.word	gFieldEffectArguments
.Lfe219:
	.size	 FieldCallback_Surf,.Lfe219-FieldCallback_Surf
	.align	2, 0
	.type	 SetUpFieldMove_Surf,function
	.thumb_func
SetUpFieldMove_Surf:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MetatileBehavior_IsFastWater
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1777	@cond_branch
	bl	PartyHasMonWithSurf
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1777	@cond_branch
	bl	IsPlayerFacingSurfableFishableWater
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1777	@cond_branch
	ldr	r1, .L1779
	ldr	r0, .L1779+0x4
	str	r0, [r1]
	ldr	r1, .L1779+0x8
	ldr	r0, .L1779+0xc
	str	r0, [r1]
	mov	r0, #0x1
	b	.L1778
.L1780:
	.align	2, 0
.L1779:
	.word	gFieldCallback2
	.word	FieldCallback_PrepareFadeInFromMenu
	.word	gPostMenuFieldCallback
	.word	FieldCallback_Surf
.L1777:
	mov	r0, #0x0
.L1778:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe220:
	.size	 SetUpFieldMove_Surf,.Lfe220-SetUpFieldMove_Surf
	.align	2, 0
	.type	 DisplayCantUseSurfMessage,function
	.thumb_func
DisplayCantUseSurfMessage:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x8
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1782	@cond_branch
	mov	r0, #0x9
	bl	DisplayPartyMenuStdMessage
	b	.L1783
.L1782:
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MetatileBehavior_IsFastWater
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1784	@cond_branch
	mov	r0, #0xa
	bl	DisplayPartyMenuStdMessage
	b	.L1783
.L1784:
	ldr	r0, .L1788
	ldr	r1, [r0]
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x3
	bne	.L1786	@cond_branch
	ldrb	r0, [r1, #0x5]
	sub	r0, r0, #0x23
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1786	@cond_branch
	mov	r0, #0xb
	bl	DisplayPartyMenuStdMessage
	b	.L1783
.L1789:
	.align	2, 0
.L1788:
	.word	gSaveBlock1Ptr
.L1786:
	mov	r0, #0x8
	bl	DisplayPartyMenuStdMessage
.L1783:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe221:
	.size	 DisplayCantUseSurfMessage,.Lfe221-DisplayCantUseSurfMessage
	.align	2, 0
	.type	 SetUpFieldMove_Fly,function
	.thumb_func
SetUpFieldMove_Fly:
	push	{lr}
	ldr	r0, .L1794
	ldrb	r0, [r0, #0x17]
	bl	Overworld_MapTypeAllowsTeleportAndFly
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1791	@cond_branch
	mov	r0, #0x0
	b	.L1793
.L1795:
	.align	2, 0
.L1794:
	.word	gMapHeader
.L1791:
	mov	r0, #0x1
.L1793:
	pop	{r1}
	bx	r1
.Lfe222:
	.size	 SetUpFieldMove_Fly,.Lfe222-SetUpFieldMove_Fly
	.align	2, 0
	.globl	CB2_ReturnToPartyMenuFromFlyMap
	.type	 CB2_ReturnToPartyMenuFromFlyMap,function
	.thumb_func
CB2_ReturnToPartyMenuFromFlyMap:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L1797
	str	r0, [sp, #0x4]
	ldr	r0, .L1797+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L1798:
	.align	2, 0
.L1797:
	.word	Task_HandleChooseMonInput
	.word	CB2_ReturnToFieldWithOpenMenu
.Lfe223:
	.size	 CB2_ReturnToPartyMenuFromFlyMap,.Lfe223-CB2_ReturnToPartyMenuFromFlyMap
	.align	2, 0
	.type	 FieldCallback_Waterfall,function
	.thumb_func
FieldCallback_Waterfall:
	push	{lr}
	bl	GetCursorSelectionMonId
	ldr	r1, .L1800
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1]
	mov	r0, #0x2b
	bl	FieldEffectStart
	pop	{r0}
	bx	r0
.L1801:
	.align	2, 0
.L1800:
	.word	gFieldEffectArguments
.Lfe224:
	.size	 FieldCallback_Waterfall,.Lfe224-FieldCallback_Waterfall
	.align	2, 0
	.type	 SetUpFieldMove_Waterfall,function
	.thumb_func
SetUpFieldMove_Waterfall:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MetatileBehavior_IsWaterfall
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1803	@cond_branch
	bl	IsPlayerSurfingNorth
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1803	@cond_branch
	ldr	r1, .L1805
	ldr	r0, .L1805+0x4
	str	r0, [r1]
	ldr	r1, .L1805+0x8
	ldr	r0, .L1805+0xc
	str	r0, [r1]
	mov	r0, #0x1
	b	.L1804
.L1806:
	.align	2, 0
.L1805:
	.word	gFieldCallback2
	.word	FieldCallback_PrepareFadeInFromMenu
	.word	gPostMenuFieldCallback
	.word	FieldCallback_Waterfall
.L1803:
	mov	r0, #0x0
.L1804:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe225:
	.size	 SetUpFieldMove_Waterfall,.Lfe225-SetUpFieldMove_Waterfall
	.align	2, 0
	.type	 SetSwappedHeldItemQuestLogEvent,function
	.thumb_func
SetSwappedHeldItemQuestLogEvent:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, #0x8
	bl	Alloc
	add	r7, r0, #0
	add	r0, r6, #0
	mov	r1, #0x41
	bl	GetMonData
	strh	r0, [r7, #0x4]
	strh	r4, [r7]
	strh	r5, [r7, #0x2]
	ldr	r0, .L1810
	ldrb	r0, [r0, #0xb]
	cmp	r0, #0x6
	bne	.L1808	@cond_branch
	mov	r0, #0xa
	add	r1, r7, #0
	bl	SetQuestLogEvent
	b	.L1809
.L1811:
	.align	2, 0
.L1810:
	.word	gPartyMenu
.L1808:
	mov	r0, #0x9
	add	r1, r7, #0
	bl	SetQuestLogEvent
.L1809:
	add	r0, r7, #0
	bl	Free
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe226:
	.size	 SetSwappedHeldItemQuestLogEvent,.Lfe226-SetSwappedHeldItemQuestLogEvent
	.align	2, 0
	.type	 SetUsedFieldMoveQuestLogEvent,function
	.thumb_func
SetUsedFieldMoveQuestLogEvent:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x4
	bl	Alloc
	add	r6, r0, #0
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	strh	r0, [r6]
	strb	r4, [r6, #0x2]
	ldrb	r0, [r6, #0x2]
	cmp	r0, #0x7
	beq	.L1814	@cond_branch
	cmp	r0, #0x8
	beq	.L1815	@cond_branch
	mov	r0, #0xff
	b	.L1818
.L1814:
	ldr	r0, .L1820
	ldr	r1, [r0]
	mov	r0, #0x1c
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x1d]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	b	.L1819
.L1821:
	.align	2, 0
.L1820:
	.word	gSaveBlock1Ptr
.L1815:
	ldr	r0, .L1822
.L1819:
	ldrb	r0, [r0, #0x14]
.L1818:
	strb	r0, [r6, #0x3]
	mov	r0, #0x24
	add	r1, r6, #0
	bl	SetQuestLogEvent
	add	r0, r6, #0
	bl	Free
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1823:
	.align	2, 0
.L1822:
	.word	gMapHeader
.Lfe227:
	.size	 SetUsedFieldMoveQuestLogEvent,.Lfe227-SetUsedFieldMoveQuestLogEvent
	.align	2, 0
	.globl	SetUsedFlyQuestLogEvent
	.type	 SetUsedFlyQuestLogEvent,function
	.thumb_func
SetUsedFlyQuestLogEvent:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r0, #0x8
	bl	Alloc
	add	r4, r0, #0
	ldrb	r0, [r5]
	strb	r0, [r4]
	ldrb	r0, [r5, #0x1]
	strb	r0, [r4, #0x1]
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	ldrsb	r1, [r4, r1]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	add	r5, r0, #0
	add	r0, r4, #0
	bl	Free
	mov	r0, #0x4
	bl	Alloc
	add	r4, r0, #0
	bl	GetCursorSelectionMonId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1825
	add	r0, r0, r1
	mov	r1, #0x41
	bl	GetMonData
	strh	r0, [r4]
	mov	r0, #0x2
	strb	r0, [r4, #0x2]
	ldrb	r0, [r5, #0x14]
	strb	r0, [r4, #0x3]
	mov	r0, #0x24
	add	r1, r4, #0
	bl	SetQuestLogEvent
	add	r0, r4, #0
	bl	Free
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1826:
	.align	2, 0
.L1825:
	.word	gPlayerParty
.Lfe228:
	.size	 SetUsedFlyQuestLogEvent,.Lfe228-SetUsedFlyQuestLogEvent
	.align	2, 0
	.globl	CB2_ShowPartyMenuForItemUse
	.type	 CB2_ShowPartyMenuForItemUse,function
	.thumb_func
CB2_ShowPartyMenuForItemUse:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	ldr	r6, .L1845
	ldr	r0, .L1845+0x4
	ldr	r1, .L1845+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1828	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
	bl	GetPartyLayoutFromBattleType
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	b	.L1829
.L1846:
	.align	2, 0
.L1845:
	.word	CB2_ReturnToBagMenu
	.word	gMain
	.word	0x439
.L1844:
	ldr	r0, .L1847
	strb	r5, [r0, #0x9]
	b	.L1832
.L1848:
	.align	2, 0
.L1847:
	.word	gPartyMenu
.L1828:
	mov	r1, #0x0
	mov	r8, r1
	mov	r7, #0x0
.L1829:
	ldr	r4, .L1849
	ldrh	r0, [r4]
	bl	GetItemEffectType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xa
	bne	.L1830	@cond_branch
	ldr	r1, .L1849+0x4
	mov	r0, #0x0
	strb	r0, [r1, #0x9]
	mov	r5, #0x0
.L1834:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L1849+0x8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1833	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1844	@cond_branch
.L1833:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L1834	@cond_branch
.L1832:
	ldr	r0, .L1849
	ldrh	r0, [r0]
	bl	GetPocketByItemId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bne	.L1837	@cond_branch
	ldr	r6, .L1849+0xc
.L1837:
	ldr	r1, .L1849+0x10
	mov	r0, #0x7f
	b	.L1838
.L1850:
	.align	2, 0
.L1849:
	.word	gSpecialVar_ItemId
	.word	gPartyMenu
	.word	gPlayerParty
	.word	CB2_ReturnToBerryPouchMenu
	.word	Task_SetSacredAshCB
.L1830:
	ldrh	r0, [r4]
	bl	GetPocketByItemId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	beq	.L1841	@cond_branch
	cmp	r0, #0x5
	beq	.L1842	@cond_branch
	mov	r0, #0x5
	b	.L1839
.L1841:
	mov	r0, #0x4
	ldr	r6, .L1851
	b	.L1839
.L1852:
	.align	2, 0
.L1851:
	.word	CB2_ReturnToTMCaseMenu
.L1842:
	mov	r0, #0x5
	ldr	r6, .L1853
.L1839:
	ldr	r1, .L1853+0x4
.L1838:
	str	r0, [sp]
	str	r1, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, r8
	add	r1, r7, #0
	mov	r2, #0x3
	mov	r3, #0x1
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1854:
	.align	2, 0
.L1853:
	.word	CB2_ReturnToBerryPouchMenu
	.word	Task_HandleChooseMonInput
.Lfe229:
	.size	 CB2_ShowPartyMenuForItemUse,.Lfe229-CB2_ShowPartyMenuForItemUse
	.align	2, 0
	.type	 CB2_ReturnToBagMenu,function
	.thumb_func
CB2_ReturnToBagMenu:
	push	{lr}
	mov	r0, #0xb
	mov	r1, #0x3
	mov	r2, #0x0
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.Lfe230:
	.size	 CB2_ReturnToBagMenu,.Lfe230-CB2_ReturnToBagMenu
	.align	2, 0
	.type	 CB2_ReturnToTMCaseMenu,function
	.thumb_func
CB2_ReturnToTMCaseMenu:
	push	{lr}
	mov	r0, #0x5
	mov	r1, #0x0
	mov	r2, #0xff
	bl	InitTMCase
	pop	{r0}
	bx	r0
.Lfe231:
	.size	 CB2_ReturnToTMCaseMenu,.Lfe231-CB2_ReturnToTMCaseMenu
	.align	2, 0
	.type	 CB2_ReturnToBerryPouchMenu,function
	.thumb_func
CB2_ReturnToBerryPouchMenu:
	push	{lr}
	mov	r0, #0x6
	mov	r1, #0x0
	mov	r2, #0xff
	bl	InitBerryPouch
	pop	{r0}
	bx	r0
.Lfe232:
	.size	 CB2_ReturnToBerryPouchMenu,.Lfe232-CB2_ReturnToBerryPouchMenu
	.align	2, 0
	.type	 Task_DoUseItemAnim,function
	.thumb_func
Task_DoUseItemAnim:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1859
	ldr	r2, [r1]
	ldr	r1, .L1859+0x4
	str	r1, [r2, #0x4]
	bl	Task_ClosePartyMenu
	pop	{r0}
	bx	r0
.L1860:
	.align	2, 0
.L1859:
	.word	sPartyMenuInternal
	.word	CB2_DoUseItemAnim
.Lfe233:
	.size	 Task_DoUseItemAnim,.Lfe233-Task_DoUseItemAnim
	.align	2, 0
	.type	 CB2_DoUseItemAnim,function
	.thumb_func
CB2_DoUseItemAnim:
	push	{r4, lr}
	ldr	r4, .L1866
	ldrh	r0, [r4]
	bl	CheckIfItemIsTMHMOrEvolutionStone
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L1862	@cond_branch
	bl	MonCanEvolve
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1863	@cond_branch
	ldr	r0, .L1866+0x4
	ldrb	r0, [r0, #0x9]
	ldrh	r1, [r4]
	ldr	r2, .L1866+0x8
	bl	StartUseItemAnim_Normal
	b	.L1865
.L1867:
	.align	2, 0
.L1866:
	.word	gSpecialVar_ItemId
	.word	gPartyMenu
	.word	CB2_UseEvolutionStone
.L1863:
	ldr	r2, .L1868
	ldrb	r0, [r2, #0x9]
	ldrh	r1, [r4]
	ldr	r2, [r2]
	bl	StartUseItemAnim_CantEvolve
	b	.L1865
.L1869:
	.align	2, 0
.L1868:
	.word	gPartyMenu
.L1862:
	ldr	r0, .L1870
	ldrb	r0, [r0, #0x9]
	ldrh	r1, [r4]
	ldr	r2, .L1870+0x4
	bl	StartUseItemAnim_Normal
.L1865:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1871:
	.align	2, 0
.L1870:
	.word	gPartyMenu
	.word	CB2_UseItem
.Lfe234:
	.size	 CB2_DoUseItemAnim,.Lfe234-CB2_DoUseItemAnim
	.align	2, 0
	.type	 CB2_UseItem,function
	.thumb_func
CB2_UseItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	ldr	r7, .L1876
	ldrh	r0, [r7]
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L1873	@cond_branch
	bl	PSA_IsCancelDisabled
	cmp	r0, #0x1
	bne	.L1873	@cond_branch
	ldr	r0, .L1876+0x4
	mov	r8, r0
	ldrb	r0, [r0, #0x9]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r6, #0x64
	mov	r4, r0
	mul	r4, r4, r6
	ldr	r5, .L1876+0x8
	add	r4, r4, r5
	ldrh	r0, [r7]
	bl	ItemIdToBattleMoveId
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GiveMoveToMon
	mov	r1, r8
	mov	r0, #0x9
	ldrsb	r0, [r1, r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x4
	bl	AdjustFriendship
	ldrh	r1, [r7]
	mov	r0, #0xa9
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bhi	.L1874	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x1
	bl	RemoveBagItem
.L1874:
	mov	r1, r8
	ldr	r0, [r1]
	bl	SetMainCallback2
	b	.L1875
.L1877:
	.align	2, 0
.L1876:
	.word	gSpecialVar_ItemId
	.word	gPartyMenu
	.word	gPlayerParty
.L1873:
	ldr	r2, .L1878
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r3, [r2, #0x9]
	mov	r1, #0x7f
	str	r1, [sp]
	ldr	r1, .L1878+0x4
	str	r1, [sp, #0x4]
	ldr	r1, [r2]
	str	r1, [sp, #0x8]
	mov	r1, #0xff
	mov	r2, #0x0
	bl	InitPartyMenu
.L1875:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1879:
	.align	2, 0
.L1878:
	.word	gPartyMenu
	.word	Task_SetSacredAshCB
.Lfe235:
	.size	 CB2_UseItem,.Lfe235-CB2_UseItem
	.align	2, 0
	.type	 CB2_UseTMHMAfterForgettingMove,function
	.thumb_func
CB2_UseTMHMAfterForgettingMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	bl	PSA_IsCancelDisabled
	cmp	r0, #0x1
	bne	.L1881	@cond_branch
	ldr	r0, .L1884
	mov	r8, r0
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mov	r5, r1
	mul	r5, r5, r0
	ldr	r0, .L1884+0x4
	add	r5, r5, r0
	bl	GetMoveSlotToReplace
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r5, #0
	bl	GetMonData
	add	r6, r0, #0
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	RemoveMonPPBonus
	ldr	r7, .L1884+0x8
	ldrh	r0, [r7]
	bl	ItemIdToBattleMoveId
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	add	r2, r4, #0
	bl	SetMonMoveSlot
	add	r0, r5, #0
	mov	r1, #0x4
	bl	AdjustFriendship
	ldrh	r2, [r7]
	mov	r0, #0x4
	add	r1, r5, #0
	add	r3, r6, #0
	bl	ItemUse_SetQuestLogEvent
	ldrh	r1, [r7]
	mov	r0, #0xa9
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bhi	.L1882	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x1
	bl	RemoveBagItem
.L1882:
	mov	r1, r8
	ldr	r0, [r1]
	bl	SetMainCallback2
	b	.L1883
.L1885:
	.align	2, 0
.L1884:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
.L1881:
	ldr	r4, .L1886
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r2, [r4, #0xb]
	ldrb	r3, [r4, #0x9]
	mov	r1, #0x7f
	str	r1, [sp]
	ldr	r1, .L1886+0x4
	str	r1, [sp, #0x4]
	ldr	r1, [r4]
	str	r1, [sp, #0x8]
	mov	r1, #0xff
	bl	InitPartyMenu
.L1883:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1887:
	.align	2, 0
.L1886:
	.word	gPartyMenu
	.word	Task_SetSacredAshCB
.Lfe236:
	.size	 CB2_UseTMHMAfterForgettingMove,.Lfe236-CB2_UseTMHMAfterForgettingMove
	.align	2, 0
	.type	 Task_SetSacredAshCB,function
	.thumb_func
Task_SetSacredAshCB:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L1891
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1889	@cond_branch
	ldr	r0, .L1891+0x4
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L1890	@cond_branch
	ldr	r0, .L1891+0x8
	ldr	r1, [r0]
	ldr	r0, .L1891+0xc
	str	r0, [r1, #0x4]
.L1890:
	ldr	r0, .L1891+0x10
	ldr	r1, .L1891+0x14
	ldr	r2, [r0]
	add	r0, r3, #0
	bl	_call_via_r2
.L1889:
	pop	{r0}
	bx	r0
.L1892:
	.align	2, 0
.L1891:
	.word	gPaletteFade
	.word	gPartyMenu
	.word	sPartyMenuInternal
	.word	CB2_SetUpExitToBattleScreen
	.word	gItemUseCB
	.word	Task_ClosePartyMenuAfterText
.Lfe237:
	.size	 Task_SetSacredAshCB,.Lfe237-Task_SetSacredAshCB
	.align	2, 0
	.type	 IsHPRecoveryItem,function
	.thumb_func
IsHPRecoveryItem:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L1894	@cond_branch
	ldr	r0, .L1899
	ldr	r0, [r0]
	ldr	r1, .L1899+0x4
	add	r0, r0, r1
	b	.L1895
.L1900:
	.align	2, 0
.L1899:
	.word	gSaveBlock1Ptr
	.word	0x311c
.L1894:
	ldr	r1, .L1901
	sub	r0, r0, #0xd
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
.L1895:
	ldrb	r1, [r0, #0x4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1896	@cond_branch
	mov	r0, #0x0
	b	.L1898
.L1902:
	.align	2, 0
.L1901:
	.word	gItemEffectTable
.L1896:
	mov	r0, #0x1
.L1898:
	pop	{r1}
	bx	r1
.Lfe238:
	.size	 IsHPRecoveryItem,.Lfe238-IsHPRecoveryItem
	.align	2, 0
	.type	 GetMedicineItemEffectMessage,function
	.thumb_func
GetMedicineItemEffectMessage:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetItemEffectType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x3
	cmp	r0, #0x12
	bls	.LCB17640
	b	.L1922	@long jump
.LCB17640:
	lsl	r0, r0, #0x2
	ldr	r1, .L1925
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1926:
	.align	2, 0
.L1925:
	.word	.L1923
	.align	2, 0
	.align	2, 0
.L1923:
	.word	.L1905
	.word	.L1906
	.word	.L1907
	.word	.L1908
	.word	.L1909
	.word	.L1910
	.word	.L1911
	.word	.L1922
	.word	.L1912
	.word	.L1914
	.word	.L1913
	.word	.L1917
	.word	.L1918
	.word	.L1916
	.word	.L1915
	.word	.L1922
	.word	.L1920
	.word	.L1920
	.word	.L1921
.L1905:
	ldr	r0, .L1927
	ldr	r1, .L1927+0x4
	bl	StringExpandPlaceholders
	b	.L1904
.L1928:
	.align	2, 0
.L1927:
	.word	gStringVar4
	.word	gText_PkmnCuredOfPoison
.L1906:
	ldr	r0, .L1929
	ldr	r1, .L1929+0x4
	bl	StringExpandPlaceholders
	b	.L1904
.L1930:
	.align	2, 0
.L1929:
	.word	gStringVar4
	.word	gText_PkmnWokeUp2
.L1907:
	ldr	r0, .L1931
	ldr	r1, .L1931+0x4
	bl	StringExpandPlaceholders
	b	.L1904
.L1932:
	.align	2, 0
.L1931:
	.word	gStringVar4
	.word	gText_PkmnBurnHealed
.L1908:
	ldr	r0, .L1933
	ldr	r1, .L1933+0x4
	bl	StringExpandPlaceholders
	b	.L1904
.L1934:
	.align	2, 0
.L1933:
	.word	gStringVar4
	.word	gText_PkmnThawedOut
.L1909:
	ldr	r0, .L1935
	ldr	r1, .L1935+0x4
	bl	StringExpandPlaceholders
	b	.L1904
.L1936:
	.align	2, 0
.L1935:
	.word	gStringVar4
	.word	gText_PkmnCuredOfParalysis
.L1910:
	ldr	r0, .L1937
	ldr	r1, .L1937+0x4
	bl	StringExpandPlaceholders
	b	.L1904
.L1938:
	.align	2, 0
.L1937:
	.word	gStringVar4
	.word	gText_PkmnSnappedOutOfConfusion
.L1911:
	ldr	r0, .L1939
	ldr	r1, .L1939+0x4
	bl	StringExpandPlaceholders
	b	.L1904
.L1940:
	.align	2, 0
.L1939:
	.word	gStringVar4
	.word	gText_PkmnGotOverInfatuation
.L1912:
	ldr	r0, .L1941
	ldr	r1, .L1941+0x4
	bl	StringExpandPlaceholders
	b	.L1904
.L1942:
	.align	2, 0
.L1941:
	.word	gStringVar4
	.word	gText_PkmnBecameHealthy
.L1913:
	ldr	r0, .L1943
	ldr	r1, .L1943+0x4
	b	.L1924
.L1944:
	.align	2, 0
.L1943:
	.word	gStringVar2
	.word	gText_ItemEffect_HP
.L1914:
	ldr	r0, .L1945
	ldr	r1, .L1945+0x4
	b	.L1924
.L1946:
	.align	2, 0
.L1945:
	.word	gStringVar2
	.word	gText_ItemEffect_Attack
.L1915:
	ldr	r0, .L1947
	ldr	r1, .L1947+0x4
	b	.L1924
.L1948:
	.align	2, 0
.L1947:
	.word	gStringVar2
	.word	gText_ItemEffect_Defense
.L1916:
	ldr	r0, .L1949
	ldr	r1, .L1949+0x4
	b	.L1924
.L1950:
	.align	2, 0
.L1949:
	.word	gStringVar2
	.word	gText_ItemEffect_Speed
.L1917:
	ldr	r0, .L1951
	ldr	r1, .L1951+0x4
	b	.L1924
.L1952:
	.align	2, 0
.L1951:
	.word	gStringVar2
	.word	gText_ItemEffect_SpAtk
.L1918:
	ldr	r0, .L1953
	ldr	r1, .L1953+0x4
.L1924:
	bl	StringCopy
	ldr	r0, .L1953+0x8
	ldr	r1, .L1953+0xc
	bl	StringExpandPlaceholders
	b	.L1904
.L1954:
	.align	2, 0
.L1953:
	.word	gStringVar2
	.word	gText_ItemEffect_SpDef
	.word	gStringVar4
	.word	gText_PkmnBaseVar2StatIncreased
.L1920:
	ldr	r0, .L1955
	ldr	r1, .L1955+0x4
	bl	StringExpandPlaceholders
	b	.L1904
.L1956:
	.align	2, 0
.L1955:
	.word	gStringVar4
	.word	gText_MovesPPIncreased
.L1921:
	ldr	r0, .L1957
	ldr	r1, .L1957+0x4
	bl	StringExpandPlaceholders
	b	.L1904
.L1958:
	.align	2, 0
.L1957:
	.word	gStringVar4
	.word	gText_PPWasRestored
.L1922:
	ldr	r0, .L1959
	ldr	r1, .L1959+0x4
	bl	StringExpandPlaceholders
.L1904:
	pop	{r0}
	bx	r0
.L1960:
	.align	2, 0
.L1959:
	.word	gStringVar4
	.word	gText_WontHaveEffect
.Lfe239:
	.size	 GetMedicineItemEffectMessage,.Lfe239-GetMedicineItemEffectMessage
	.align	2, 0
	.type	 NotUsingHPEVItemOnShedinja,function
	.thumb_func
NotUsingHPEVItemOnShedinja:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	bl	GetItemEffectType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xd
	bne	.L1962	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	ldr	r1, .L1964
	cmp	r0, r1
	bne	.L1962	@cond_branch
	mov	r0, #0x0
	b	.L1963
.L1965:
	.align	2, 0
.L1964:
	.word	0x12f
.L1962:
	mov	r0, #0x1
.L1963:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe240:
	.size	 NotUsingHPEVItemOnShedinja,.Lfe240-NotUsingHPEVItemOnShedinja
	.align	2, 0
	.type	 IsItemFlute,function
	.thumb_func
IsItemFlute:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x27
	beq	.L1968	@cond_branch
	cmp	r0, #0x29
	beq	.L1968	@cond_branch
	cmp	r0, #0x28
	bne	.L1967	@cond_branch
.L1968:
	mov	r0, #0x1
	b	.L1969
.L1967:
	mov	r0, #0x0
.L1969:
	pop	{r1}
	bx	r1
.Lfe241:
	.size	 IsItemFlute,.Lfe241-IsItemFlute
	.align	2, 0
	.type	 ExecuteTableBasedItemEffect_,function
	.thumb_func
ExecuteTableBasedItemEffect_:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r0, .L1976
	ldr	r1, .L1976+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1971	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r3
	ldr	r1, .L1976+0x8
	add	r0, r0, r1
	add	r1, r5, #0
	add	r2, r3, #0
	b	.L1975
.L1977:
	.align	2, 0
.L1976:
	.word	gMain
	.word	0x439
	.word	gPlayerParty
.L1971:
	mov	r0, #0x64
	mov	r4, r3
	mul	r4, r4, r0
	ldr	r0, .L1978
	add	r4, r4, r0
	add	r0, r3, #0
	bl	GetPartyIdFromBattleSlot
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
.L1975:
	add	r3, r6, #0
	bl	ExecuteTableBasedItemEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1979:
	.align	2, 0
.L1978:
	.word	gPlayerParty
.Lfe242:
	.size	 ExecuteTableBasedItemEffect_,.Lfe242-ExecuteTableBasedItemEffect_
	.align	2, 0
	.globl	ItemUseCB_Medicine
	.type	 ItemUseCB_Medicine,function
	.thumb_func
ItemUseCB_Medicine:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1987
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1987+0x4
	add	r5, r1, r0
	ldr	r0, .L1987+0x8
	ldrh	r6, [r0]
	add	r0, r5, #0
	add	r1, r6, #0
	bl	NotUsingHPEVItemOnShedinja
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1981	@cond_branch
	mov	r4, #0x1
	b	.L1982
.L1988:
	.align	2, 0
.L1987:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
.L1981:
	add	r0, r6, #0
	bl	IsHPRecoveryItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1983	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
.L1983:
	ldr	r0, .L1989
	ldrb	r2, [r0, #0x9]
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r3, #0x0
	bl	PokemonItemUseNoEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L1982:
	mov	r0, #0x5
	bl	PlaySE
	cmp	r4, #0
	beq	.L1985	@cond_branch
	ldr	r1, .L1989+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1989+0x8
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L1989+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r8
	str	r1, [r0]
	b	.L1986
.L1990:
	.align	2, 0
.L1989:
	.word	gPartyMenu
	.word	gPartyMenuUseExitCallback
	.word	gText_WontHaveEffect
	.word	gTasks
.L1985:
	ldr	r3, .L1991
	mov	r0, #0x4
	add	r1, r5, #0
	add	r2, r6, #0
	bl	ItemUse_SetQuestLogEvent
	add	r0, r7, #0
	bl	Task_DoUseItemAnim
	ldr	r1, .L1991+0x4
	ldr	r0, .L1991+0x8
	str	r0, [r1]
.L1986:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1992:
	.align	2, 0
.L1991:
	.word	0xffff
	.word	gItemUseCB
	.word	ItemUseCB_MedicineStep
.Lfe243:
	.size	 ItemUseCB_Medicine,.Lfe243-ItemUseCB_Medicine
	.align	2, 0
	.globl	ItemUseCB_MedicineStep
	.type	 ItemUseCB_MedicineStep,function
	.thumb_func
ItemUseCB_MedicineStep:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	str	r1, [sp, #0x4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r0, #0x0
	mov	sl, r0
	ldr	r0, .L2009
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2009+0x4
	add	r5, r1, r0
	ldr	r0, .L2009+0x8
	ldrh	r6, [r0]
	add	r0, r5, #0
	add	r1, r6, #0
	bl	NotUsingHPEVItemOnShedinja
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2007	@cond_branch
	add	r0, r6, #0
	bl	IsHPRecoveryItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x1
	bne	.L1996	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	cmp	sl, r0
	bne	.L1996	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
.L1996:
	ldr	r4, .L2009
	ldrb	r0, [r4, #0x9]
	add	r1, r6, #0
	mov	r2, #0x0
	bl	ExecuteTableBasedItemEffect_
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1998	@cond_branch
.L2007:
	ldr	r1, .L2009+0xc
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L2009+0x10
	b	.L2008
.L2010:
	.align	2, 0
.L2009:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
	.word	gPartyMenuUseExitCallback
	.word	gText_WontHaveEffect
.L1998:
	ldr	r1, .L2011
	mov	r0, #0x1
	strb	r0, [r1]
	add	r0, r6, #0
	bl	IsItemFlute
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2000	@cond_branch
	mov	r0, #0x1
	bl	PlaySE
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0xe
	beq	.L2002	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x1
	bl	RemoveBagItem
	b	.L2002
.L2012:
	.align	2, 0
.L2011:
	.word	gPartyMenuUseExitCallback
.L2000:
	mov	r0, #0x6e
	bl	PlaySE
.L2002:
	ldr	r4, .L2013
	ldr	r7, .L2013+0x4
	mov	r0, #0x9
	ldrsb	r0, [r7, r0]
	lsl	r0, r0, #0x4
	ldr	r1, [r4]
	add	r1, r1, r0
	add	r0, r5, #0
	bl	SetPartyMonAilmentGfx
	ldr	r2, .L2013+0x8
	mov	r0, #0x9
	ldrsb	r0, [r7, r0]
	ldr	r1, [r4]
	lsl	r0, r0, #0x4
	add	r3, r0, r1
	ldrb	r1, [r3, #0xc]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L2003	@cond_branch
	add	r0, r5, #0
	add	r1, r3, #0
	mov	r2, #0x1
	bl	DisplayPartyPokemonLevelCheck
.L2003:
	mov	r2, r8
	cmp	r2, #0x1
	bne	.L2004	@cond_branch
	mov	r0, sl
	cmp	r0, #0
	bne	.L2005	@cond_branch
	ldrb	r0, [r7, #0x9]
	mov	r1, #0x1
	bl	AnimatePartySlot
.L2005:
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, sl
	sub	r3, r3, r1
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	ldrb	r1, [r7, #0x9]
	ldr	r0, .L2013+0xc
	str	r0, [sp]
	mov	r0, r9
	mov	r2, #0x1
	bl	PartyMenuModifyHP
	mov	r0, r9
	mov	r1, #0x0
	mov	r2, sl
	bl	ResetHPTaskData
	b	.L1999
.L2014:
	.align	2, 0
.L2013:
	.word	sPartyMenuBoxes
	.word	gPartyMenu
	.word	gSprites
	.word	Task_DisplayHPRestoredMessage
.L2004:
	ldr	r1, .L2015
	add	r0, r5, #0
	bl	GetMonNickname
	add	r0, r6, #0
	bl	GetMedicineItemEffectMessage
	ldr	r0, .L2015+0x4
.L2008:
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2015+0x8
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, [sp, #0x4]
	str	r1, [r0]
.L1999:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2016:
	.align	2, 0
.L2015:
	.word	gStringVar1
	.word	gStringVar4
	.word	gTasks
.Lfe244:
	.size	 ItemUseCB_MedicineStep,.Lfe244-ItemUseCB_MedicineStep
	.align	2, 0
	.type	 Task_DisplayHPRestoredMessage,function
	.thumb_func
Task_DisplayHPRestoredMessage:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L2018
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2018+0x4
	add	r0, r0, r1
	ldr	r1, .L2018+0x8
	bl	GetMonNickname
	ldr	r4, .L2018+0xc
	ldr	r1, .L2018+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x0
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	bl	HandleBattleLowHpMusicChange
	ldr	r1, .L2018+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2018+0x18
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2019:
	.align	2, 0
.L2018:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_PkmnHPRestoredByVar2
	.word	gTasks
	.word	Task_ClosePartyMenuAfterText
.Lfe245:
	.size	 Task_DisplayHPRestoredMessage,.Lfe245-Task_DisplayHPRestoredMessage
	.align	2, 0
	.type	 Task_ClosePartyMenuAfterText,function
	.thumb_func
Task_ClosePartyMenuAfterText:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2021	@cond_branch
	ldr	r0, .L2023
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L2022	@cond_branch
	ldr	r0, .L2023+0x4
	ldr	r0, [r0]
	str	r1, [r0, #0x4]
.L2022:
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
.L2021:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2024:
	.align	2, 0
.L2023:
	.word	gPartyMenuUseExitCallback
	.word	sPartyMenuInternal
.Lfe246:
	.size	 Task_ClosePartyMenuAfterText,.Lfe246-Task_ClosePartyMenuAfterText
	.align	2, 0
	.type	 ShowMoveSelectWindow,function
	.thumb_func
ShowMoveSelectWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0x2
	mov	r8, r1
	mov	r0, #0x3
	bl	DisplaySelectionWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r2, r4
	mul	r2, r2, r0
	str	r2, [sp, #0xc]
.L2029:
	ldr	r0, .L2032
	add	r1, r6, #0
	add	r1, r1, #0xd
	ldr	r2, [sp, #0xc]
	add	r0, r2, r0
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, r8
	mov	r1, #0x0
	bl	GetFontAttribute
	add	r4, r0, #0
	mov	r0, r8
	mov	r1, #0x2
	bl	GetFontAttribute
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0xd
	mov	r2, r5
	mul	r2, r2, r0
	ldr	r0, .L2032+0x4
	add	r2, r2, r0
	lsl	r0, r6, #0x4
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r7, #0x0
	str	r7, [sp, #0x8]
	mov	r0, r9
	mov	r1, r8
	add	r3, r4, #0
	bl	AddTextPrinterParameterized
	cmp	r5, #0
	beq	.L2028	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
.L2028:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L2029	@cond_branch
	mov	r0, #0x10
	str	r0, [sp]
	mov	r0, sl
	str	r0, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, r9
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x2
	bl	Menu_InitCursor
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2033:
	.align	2, 0
.L2032:
	.word	gPlayerParty
	.word	gMoveNames
.Lfe247:
	.size	 ShowMoveSelectWindow,.Lfe247-ShowMoveSelectWindow
	.align	2, 0
	.type	 Task_HandleRestoreWhichMoveInput,function
	.thumb_func
Task_HandleRestoreWhichMoveInput:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	Menu_ProcessInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	beq	.L2035	@cond_branch
	add	r0, r0, #0x1
	cmp	r1, r0
	bne	.L2036	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	ReturnToUseOnWhichMon
	b	.L2035
.L2036:
	add	r0, r5, #0
	bl	SetSelectedMoveForPPItem
.L2035:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe248:
	.size	 Task_HandleRestoreWhichMoveInput,.Lfe248-Task_HandleRestoreWhichMoveInput
	.align	2, 0
	.globl	ItemUseCB_TryRestorePP
	.type	 ItemUseCB_TryRestorePP,function
	.thumb_func
ItemUseCB_TryRestorePP:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L2045
	ldrh	r0, [r0]
	cmp	r0, #0xaf
	bne	.L2039	@cond_branch
	ldr	r0, .L2045+0x4
	ldr	r0, [r0]
	ldr	r1, .L2045+0x8
	add	r0, r0, r1
	b	.L2040
.L2046:
	.align	2, 0
.L2045:
	.word	gSpecialVar_ItemId
	.word	gSaveBlock1Ptr
	.word	0x311c
.L2039:
	ldr	r1, .L2047
	sub	r0, r0, #0xd
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
.L2040:
	ldrb	r1, [r0, #0x4]
	mov	r0, #0x10
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L2041	@cond_branch
	ldr	r0, .L2047+0x4
	strh	r1, [r0, #0xe]
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L2042	@cond_branch
	add	r0, r4, #0
	bl	TryUsePPItemInBattle
	b	.L2044
.L2048:
	.align	2, 0
.L2047:
	.word	gItemEffectTable
	.word	gPartyMenu
.L2042:
	add	r0, r4, #0
	bl	TryUsePPItemOutsideBattle
	b	.L2044
.L2041:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x17
	bl	DisplayPartyMenuStdMessage
	ldr	r0, .L2049
	ldrb	r0, [r0, #0x9]
	bl	ShowMoveSelectWindow
	ldr	r1, .L2049+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2049+0x8
	str	r1, [r0]
.L2044:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2050:
	.align	2, 0
.L2049:
	.word	gPartyMenu
	.word	gTasks
	.word	Task_HandleRestoreWhichMoveInput
.Lfe249:
	.size	 ItemUseCB_TryRestorePP,.Lfe249-ItemUseCB_TryRestorePP
	.align	2, 0
	.type	 SetSelectedMoveForPPItem,function
	.thumb_func
SetSelectedMoveForPPItem:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L2054
	ldr	r0, [r0]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	bl	Menu_GetCursorPos
	ldr	r1, .L2054+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	ldrb	r1, [r1, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L2052	@cond_branch
	add	r0, r4, #0
	bl	TryUsePPItemInBattle
	b	.L2053
.L2055:
	.align	2, 0
.L2054:
	.word	sPartyMenuInternal
	.word	gPartyMenu
.L2052:
	add	r0, r4, #0
	bl	TryUsePPItemOutsideBattle
.L2053:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe250:
	.size	 SetSelectedMoveForPPItem,.Lfe250-SetSelectedMoveForPPItem
	.align	2, 0
	.type	 ReturnToUseOnWhichMon,function
	.thumb_func
ReturnToUseOnWhichMon:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2057
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L2057+0x4
	str	r0, [r1]
	ldr	r0, .L2057+0x8
	ldr	r0, [r0]
	mov	r1, #0x0
	str	r1, [r0, #0x4]
	add	r0, r0, #0xc
	bl	PartyMenuRemoveWindow
	mov	r0, #0x5
	bl	DisplayPartyMenuStdMessage
	pop	{r0}
	bx	r0
.L2058:
	.align	2, 0
.L2057:
	.word	gTasks
	.word	Task_HandleChooseMonInput
	.word	sPartyMenuInternal
.Lfe251:
	.size	 ReturnToUseOnWhichMon,.Lfe251-ReturnToUseOnWhichMon
	.align	2, 0
	.type	 TryUsePPItemOutsideBattle,function
	.thumb_func
TryUsePPItemOutsideBattle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, .L2062
	mov	r1, #0x9
	ldrsb	r1, [r3, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2062+0x4
	add	r0, r0, r1
	ldr	r1, .L2062+0x8
	ldrh	r1, [r1]
	ldrb	r2, [r3, #0x9]
	ldrb	r3, [r3, #0xe]
	bl	PokemonItemUseNoEffect
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x5
	bl	PlaySE
	cmp	r4, #0
	beq	.L2060	@cond_branch
	ldr	r1, .L2062+0xc
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L2062+0x10
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2062+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2062+0x18
	str	r1, [r0]
	b	.L2061
.L2063:
	.align	2, 0
.L2062:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
	.word	gPartyMenuUseExitCallback
	.word	gText_WontHaveEffect
	.word	gTasks
	.word	Task_ClosePartyMenuAfterText
.L2060:
	add	r0, r5, #0
	bl	Task_DoUseItemAnim
	ldr	r1, .L2064
	ldr	r0, .L2064+0x4
	str	r0, [r1]
.L2061:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2065:
	.align	2, 0
.L2064:
	.word	gItemUseCB
	.word	ItemUseCB_RestorePP
.Lfe252:
	.size	 TryUsePPItemOutsideBattle,.Lfe252-TryUsePPItemOutsideBattle
	.align	2, 0
	.type	 ItemUseCB_RestorePP,function
	.thumb_func
ItemUseCB_RestorePP:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r5, .L2067
	mov	r1, #0x9
	ldrsb	r1, [r5, r1]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L2067+0x4
	add	r4, r4, r0
	ldrb	r0, [r5, #0x9]
	ldr	r6, .L2067+0x8
	ldrh	r1, [r6]
	ldrb	r2, [r5, #0xe]
	bl	ExecuteTableBasedItemEffect_
	ldr	r1, .L2067+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	ldrh	r2, [r6]
	ldr	r3, .L2067+0x10
	mov	r0, #0x4
	add	r1, r4, #0
	bl	ItemUse_SetQuestLogEvent
	mov	r0, #0x1
	bl	PlaySE
	ldrh	r0, [r6]
	mov	r1, #0x1
	bl	RemoveBagItem
	mov	r2, #0xe
	ldrsh	r1, [r5, r2]
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L2067+0x14
	mov	r1, #0xd
	mul	r1, r1, r0
	ldr	r0, .L2067+0x18
	add	r1, r1, r0
	add	r0, r2, #0
	bl	StringCopy
	ldrh	r0, [r6]
	bl	GetMedicineItemEffectMessage
	ldr	r0, .L2067+0x1c
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2067+0x20
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2067+0x24
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2068:
	.align	2, 0
.L2067:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
	.word	gPartyMenuUseExitCallback
	.word	0xffff
	.word	gStringVar1
	.word	gMoveNames
	.word	gStringVar4
	.word	gTasks
	.word	Task_ClosePartyMenuAfterText
.Lfe253:
	.size	 ItemUseCB_RestorePP,.Lfe253-ItemUseCB_RestorePP
	.align	2, 0
	.type	 TryUsePPItemInBattle,function
	.thumb_func
TryUsePPItemInBattle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	ldr	r7, .L2073
	ldr	r0, .L2073+0x4
	ldrh	r5, [r0]
	mov	r0, #0xe
	neg	r0, r0
	add	r0, r0, r7
	mov	r8, r0
	ldrb	r0, [r0, #0x9]
	ldrb	r2, [r7]
	add	r1, r5, #0
	bl	ExecuteTableBasedItemEffect_
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2070	@cond_branch
	ldr	r0, .L2073+0x8
	strb	r4, [r0]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L2073+0xc
	b	.L2072
.L2074:
	.align	2, 0
.L2073:
	.word	gPartyMenu+0xe
	.word	gSpecialVar_ItemId
	.word	gPartyMenuUseExitCallback
	.word	gText_WontHaveEffect
.L2070:
	ldr	r1, .L2075
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, r8
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L2075+0x4
	add	r4, r4, r0
	ldr	r3, .L2075+0x8
	mov	r0, #0x4
	add	r1, r4, #0
	add	r2, r5, #0
	bl	ItemUse_SetQuestLogEvent
	mov	r0, #0x1
	bl	PlaySE
	add	r0, r5, #0
	mov	r1, #0x1
	bl	RemoveBagItem
	mov	r0, #0x0
	ldrsh	r1, [r7, r0]
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L2075+0xc
	mov	r1, #0xd
	mul	r1, r1, r4
	ldr	r2, .L2075+0x10
	add	r1, r1, r2
	bl	StringCopy
	add	r0, r5, #0
	bl	GetMedicineItemEffectMessage
	ldr	r0, .L2075+0x14
.L2072:
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2075+0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2075+0x1c
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2076:
	.align	2, 0
.L2075:
	.word	gPartyMenuUseExitCallback
	.word	gPlayerParty
	.word	0xffff
	.word	gStringVar1
	.word	gMoveNames
	.word	gStringVar4
	.word	gTasks
	.word	Task_ClosePartyMenuAfterText
.Lfe254:
	.size	 TryUsePPItemInBattle,.Lfe254-TryUsePPItemInBattle
	.align	2, 0
	.globl	ItemUseCB_PPUp
	.type	 ItemUseCB_PPUp,function
	.thumb_func
ItemUseCB_PPUp:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x18
	bl	DisplayPartyMenuStdMessage
	ldr	r0, .L2078
	ldrb	r0, [r0, #0x9]
	bl	ShowMoveSelectWindow
	ldr	r1, .L2078+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2078+0x8
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2079:
	.align	2, 0
.L2078:
	.word	gPartyMenu
	.word	gTasks
	.word	Task_HandleRestoreWhichMoveInput
.Lfe255:
	.size	 ItemUseCB_PPUp,.Lfe255-ItemUseCB_PPUp
	.align	2, 0
	.globl	ItemIdToBattleMoveId
	.type	 ItemIdToBattleMoveId,function
	.thumb_func
ItemIdToBattleMoveId:
	lsl	r0, r0, #0x10
	ldr	r1, .L2081
	add	r0, r0, r1
	ldr	r1, .L2081+0x4
	lsr	r0, r0, #0xf
	add	r0, r0, r1
	ldrh	r0, [r0]
	bx	lr
.L2082:
	.align	2, 0
.L2081:
	.word	-0x1210000
	.word	sTMHMMoves
.Lfe256:
	.size	 ItemIdToBattleMoveId,.Lfe256-ItemIdToBattleMoveId
	.align	2, 0
	.globl	IsMoveHm
	.type	 IsMoveHm,function
	.thumb_func
IsMoveHm:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, #0x0
	ldr	r3, .L2091
.L2087:
	add	r0, r1, #0
	add	r0, r0, #0x32
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L2086	@cond_branch
	mov	r0, #0x1
	b	.L2090
.L2092:
	.align	2, 0
.L2091:
	.word	sTMHMMoves
.L2086:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x6
	bls	.L2087	@cond_branch
	mov	r0, #0x0
.L2090:
	pop	{r1}
	bx	r1
.Lfe257:
	.size	 IsMoveHm,.Lfe257-IsMoveHm
	.align	2, 0
	.globl	MonKnowsMove
	.type	 MonKnowsMove,function
	.thumb_func
MonKnowsMove:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r4, #0x0
.L2097:
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	bl	GetMonData
	cmp	r0, r5
	bne	.L2096	@cond_branch
	mov	r0, #0x1
	b	.L2100
.L2096:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L2097	@cond_branch
	mov	r0, #0x0
.L2100:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe258:
	.size	 MonKnowsMove,.Lfe258-MonKnowsMove
	.align	2, 0
	.type	 DisplayLearnMoveMessage,function
	.thumb_func
DisplayLearnMoveMessage:
	push	{r4, lr}
	add	r1, r0, #0
	ldr	r4, .L2102
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L2103:
	.align	2, 0
.L2102:
	.word	gStringVar4
.Lfe259:
	.size	 DisplayLearnMoveMessage,.Lfe259-DisplayLearnMoveMessage
	.align	2, 0
	.type	 DisplayLearnMoveMessageAndClose,function
	.thumb_func
DisplayLearnMoveMessageAndClose:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	DisplayLearnMoveMessage
	ldr	r1, .L2105
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2105+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2106:
	.align	2, 0
.L2105:
	.word	gTasks
	.word	Task_ClosePartyMenuAfterText
.Lfe260:
	.size	 DisplayLearnMoveMessageAndClose,.Lfe260-DisplayLearnMoveMessageAndClose
	.align	2, 0
	.globl	ItemUseCB_TMHM
	.type	 ItemUseCB_TMHM,function
	.thumb_func
ItemUseCB_TMHM:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r7, .L2117
	mov	r1, #0x9
	ldrsb	r1, [r7, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2117+0x4
	add	r4, r1, r0
	mov	r0, #0xe
	add	r0, r0, r7
	mov	r8, r0
	ldr	r0, .L2117+0x8
	ldrh	r5, [r0]
	ldr	r1, .L2117+0xc
	add	r0, r4, #0
	bl	GetMonNickname
	add	r0, r5, #0
	bl	ItemIdToBattleMoveId
	strh	r0, [r7, #0xe]
	ldr	r0, .L2117+0x10
	mov	r1, #0xe
	ldrsh	r2, [r7, r1]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L2117+0x14
	add	r1, r1, r2
	bl	StringCopy
	mov	r0, #0x0
	mov	r1, r8
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	CanMonLearnTMTutor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2109	@cond_branch
	cmp	r0, #0x2
	beq	.L2110	@cond_branch
	ldrh	r1, [r7, #0xe]
	add	r0, r4, #0
	bl	GiveMoveToMon
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r3, .L2117+0x18
	cmp	r0, r3
	beq	.L2113	@cond_branch
	mov	r0, #0x4
	add	r1, r4, #0
	add	r2, r5, #0
	bl	ItemUse_SetQuestLogEvent
	add	r0, r6, #0
	bl	Task_DoUseItemAnim
	ldr	r1, .L2117+0x1c
	ldr	r0, .L2117+0x20
	str	r0, [r1]
	b	.L2107
.L2118:
	.align	2, 0
.L2117:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	0xffff
	.word	gItemUseCB
	.word	ItemUseCB_LearnedMove
.L2109:
	ldr	r1, .L2119
	b	.L2116
.L2120:
	.align	2, 0
.L2119:
	.word	gText_PkmnCantLearnMove
.L2110:
	ldr	r1, .L2121
.L2116:
	add	r0, r6, #0
	bl	DisplayLearnMoveMessageAndClose
	b	.L2107
.L2122:
	.align	2, 0
.L2121:
	.word	gText_PkmnAlreadyKnows
.L2113:
	ldr	r0, .L2123
	bl	DisplayLearnMoveMessage
	ldr	r1, .L2123+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2123+0x8
	str	r1, [r0]
.L2107:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2124:
	.align	2, 0
.L2123:
	.word	gText_PkmnNeedsToReplaceMove
	.word	gTasks
	.word	Task_ReplaceMoveYesNo
.Lfe261:
	.size	 ItemUseCB_TMHM,.Lfe261-ItemUseCB_TMHM
	.align	2, 0
	.type	 ItemUseCB_LearnedMove,function
	.thumb_func
ItemUseCB_LearnedMove:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	Task_LearnedMove
	pop	{r0}
	bx	r0
.Lfe262:
	.size	 ItemUseCB_LearnedMove,.Lfe262-ItemUseCB_LearnedMove
	.align	2, 0
	.type	 Task_LearnedMove,function
	.thumb_func
Task_LearnedMove:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r2, .L2129
	mov	r1, #0x9
	ldrsb	r1, [r2, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2129+0x4
	add	r5, r1, r0
	add	r6, r2, #0
	add	r6, r6, #0xe
	ldr	r0, .L2129+0x8
	ldrh	r4, [r0]
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L2127	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x4
	bl	AdjustFriendship
	mov	r0, #0xa9
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bhi	.L2127	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	RemoveBagItem
.L2127:
	ldr	r1, .L2129+0xc
	add	r0, r5, #0
	bl	GetMonNickname
	ldr	r0, .L2129+0x10
	mov	r1, #0x0
	ldrsh	r2, [r6, r1]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L2129+0x14
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L2129+0x18
	ldr	r1, .L2129+0x1c
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2129+0x20
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2129+0x24
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2130:
	.align	2, 0
.L2129:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gText_PkmnLearnedMove3
	.word	gTasks
	.word	Task_DoLearnedMoveFanfareAfterText
.Lfe263:
	.size	 Task_LearnedMove,.Lfe263-Task_LearnedMove
	.align	2, 0
	.type	 Task_DoLearnedMoveFanfareAfterText,function
	.thumb_func
Task_DoLearnedMoveFanfareAfterText:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2132	@cond_branch
	ldr	r0, .L2133
	bl	PlayFanfare
	ldr	r1, .L2133+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2133+0x8
	str	r1, [r0]
.L2132:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2134:
	.align	2, 0
.L2133:
	.word	0x101
	.word	gTasks
	.word	Task_LearnNextMoveOrClosePartyMenu
.Lfe264:
	.size	 Task_DoLearnedMoveFanfareAfterText,.Lfe264-Task_DoLearnedMoveFanfareAfterText
	.align	2, 0
	.type	 Task_LearnNextMoveOrClosePartyMenu,function
	.thumb_func
Task_LearnNextMoveOrClosePartyMenu:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2136	@cond_branch
	ldr	r0, .L2141
	ldrh	r1, [r0, #0x2e]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2137	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2136	@cond_branch
.L2137:
	ldr	r0, .L2141+0x4
	mov	r1, #0x10
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L2138	@cond_branch
	add	r0, r4, #0
	bl	Task_TryLearningNextMove
	b	.L2136
.L2142:
	.align	2, 0
.L2141:
	.word	gMain
	.word	gPartyMenu
.L2138:
	cmp	r0, #0x2
	bne	.L2140	@cond_branch
	ldr	r0, .L2143
	strh	r2, [r0]
.L2140:
	add	r0, r5, #0
	bl	Task_ClosePartyMenu
.L2136:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2144:
	.align	2, 0
.L2143:
	.word	gSpecialVar_Result
.Lfe265:
	.size	 Task_LearnNextMoveOrClosePartyMenu,.Lfe265-Task_LearnNextMoveOrClosePartyMenu
	.align	2, 0
	.type	 Task_ReplaceMoveYesNo,function
	.thumb_func
Task_ReplaceMoveYesNo:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2146	@cond_branch
	bl	PartyMenuDisplayYesNoMenu
	ldr	r0, .L2147
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2147+0x4
	str	r0, [r1]
.L2146:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2148:
	.align	2, 0
.L2147:
	.word	gTasks
	.word	Task_HandleReplaceMoveYesNoInput
.Lfe266:
	.size	 Task_ReplaceMoveYesNo,.Lfe266-Task_ReplaceMoveYesNo
	.align	2, 0
	.type	 Task_HandleReplaceMoveYesNoInput,function
	.thumb_func
Task_HandleReplaceMoveYesNoInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L2151	@cond_branch
	cmp	r1, #0
	bgt	.L2156	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L2152	@cond_branch
	b	.L2150
.L2156:
	cmp	r1, #0x1
	beq	.L2153	@cond_branch
	b	.L2150
.L2151:
	ldr	r0, .L2157
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	ldr	r1, .L2157+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2157+0x8
	str	r1, [r0]
	b	.L2150
.L2158:
	.align	2, 0
.L2157:
	.word	gText_WhichMoveToForget
	.word	gTasks
	.word	Task_ShowSummaryScreenToForgetMove
.L2152:
	mov	r0, #0x5
	bl	PlaySE
.L2153:
	add	r0, r4, #0
	bl	StopLearningMovePrompt
.L2150:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe267:
	.size	 Task_HandleReplaceMoveYesNoInput,.Lfe267-Task_HandleReplaceMoveYesNoInput
	.align	2, 0
	.type	 Task_ShowSummaryScreenToForgetMove,function
	.thumb_func
Task_ShowSummaryScreenToForgetMove:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2160	@cond_branch
	ldr	r0, .L2161
	ldr	r1, [r0]
	ldr	r0, .L2161+0x4
	str	r0, [r1, #0x4]
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
.L2160:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2162:
	.align	2, 0
.L2161:
	.word	sPartyMenuInternal
	.word	CB2_ShowSummaryScreenToForgetMove
.Lfe268:
	.size	 Task_ShowSummaryScreenToForgetMove,.Lfe268-Task_ShowSummaryScreenToForgetMove
	.align	2, 0
	.type	 CB2_ShowSummaryScreenToForgetMove,function
	.thumb_func
CB2_ShowSummaryScreenToForgetMove:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L2164
	ldr	r4, .L2164+0x4
	ldrb	r1, [r4, #0x9]
	ldr	r2, .L2164+0x8
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L2164+0xc
	ldrh	r4, [r4, #0xe]
	str	r4, [sp]
	bl	ShowSelectMovePokemonSummaryScreen
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L2165:
	.align	2, 0
.L2164:
	.word	gPlayerParty
	.word	gPartyMenu
	.word	gPlayerPartyCount
	.word	CB2_ReturnToPartyMenuWhileLearningMove
.Lfe269:
	.size	 CB2_ShowSummaryScreenToForgetMove,.Lfe269-CB2_ShowSummaryScreenToForgetMove
	.align	2, 0
	.type	 CB2_ReturnToPartyMenuWhileLearningMove,function
	.thumb_func
CB2_ReturnToPartyMenuWhileLearningMove:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	bl	GetMoveSlotToReplace
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r4, .L2169
	mov	r0, #0x10
	ldrsh	r5, [r4, r0]
	cmp	r5, #0
	bne	.L2167	@cond_branch
	cmp	r2, #0x4
	beq	.L2167	@cond_branch
	mov	r1, #0x9
	ldrsb	r1, [r4, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2169+0x4
	add	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0xd
	bl	GetMonData
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldrb	r0, [r4, #0x9]
	ldr	r1, .L2169+0x8
	ldrh	r1, [r1]
	ldr	r3, .L2169+0xc
	bl	StartUseItemAnim_ForgetMoveAndLearnTMorHM
	ldr	r1, .L2169+0x10
	ldr	r0, .L2169+0x14
	str	r0, [r1]
	strb	r5, [r4, #0xb]
	b	.L2168
.L2170:
	.align	2, 0
.L2169:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
	.word	CB2_UseTMHMAfterForgettingMove
	.word	gItemUseCB
	.word	ItemUseCB_ReplaceMoveWithTMHM
.L2167:
	mov	r0, #0x7f
	str	r0, [sp]
	ldr	r0, .L2171
	str	r0, [sp, #0x4]
	ldr	r0, .L2171+0x4
	ldr	r0, [r0]
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	InitPartyMenu
.L2168:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2172:
	.align	2, 0
.L2171:
	.word	Task_ReturnToPartyMenuWhileLearningMove
	.word	gPartyMenu
.Lfe270:
	.size	 CB2_ReturnToPartyMenuWhileLearningMove,.Lfe270-CB2_ReturnToPartyMenuWhileLearningMove
	.align	2, 0
	.type	 Task_ReturnToPartyMenuWhileLearningMove,function
	.thumb_func
Task_ReturnToPartyMenuWhileLearningMove:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	ldr	r0, .L2177
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2174	@cond_branch
	bl	GetMoveSlotToReplace
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	beq	.L2175	@cond_branch
	add	r0, r4, #0
	bl	DisplayPartyMenuForgotMoveMessage
	b	.L2174
.L2178:
	.align	2, 0
.L2177:
	.word	gPaletteFade
.L2175:
	add	r0, r5, #0
	bl	StopLearningMovePrompt
.L2174:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe271:
	.size	 Task_ReturnToPartyMenuWhileLearningMove,.Lfe271-Task_ReturnToPartyMenuWhileLearningMove
	.align	2, 0
	.type	 ItemUseCB_ReplaceMoveWithTMHM,function
	.thumb_func
ItemUseCB_ReplaceMoveWithTMHM:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	Task_ReplaceMoveWithTMHM
	pop	{r0}
	bx	r0
.Lfe272:
	.size	 ItemUseCB_ReplaceMoveWithTMHM,.Lfe272-ItemUseCB_ReplaceMoveWithTMHM
	.align	2, 0
	.type	 Task_ReplaceMoveWithTMHM,function
	.thumb_func
Task_ReplaceMoveWithTMHM:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L2181
	mov	r9, r0
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mov	r6, r1
	mul	r6, r6, r0
	ldr	r0, .L2181+0x4
	add	r6, r6, r0
	bl	GetMoveSlotToReplace
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r1, r5, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, .L2181+0x8
	ldrh	r2, [r0]
	mov	r0, #0x4
	add	r1, r6, #0
	add	r3, r4, #0
	bl	ItemUse_SetQuestLogEvent
	ldr	r1, .L2181+0xc
	add	r0, r6, #0
	bl	GetMonNickname
	ldr	r0, .L2181+0x10
	mov	r1, #0xd
	mul	r1, r1, r4
	ldr	r2, .L2181+0x14
	add	r1, r1, r2
	bl	StringCopy
	add	r0, r6, #0
	add	r1, r5, #0
	bl	RemoveMonPPBonus
	mov	r0, r9
	ldrh	r1, [r0, #0xe]
	add	r0, r6, #0
	add	r2, r5, #0
	bl	SetMonMoveSlot
	mov	r0, r8
	bl	Task_LearnedMove
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2182:
	.align	2, 0
.L2181:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
.Lfe273:
	.size	 Task_ReplaceMoveWithTMHM,.Lfe273-Task_ReplaceMoveWithTMHM
	.align	2, 0
	.type	 DisplayPartyMenuForgotMoveMessage,function
	.thumb_func
DisplayPartyMenuForgotMoveMessage:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L2184
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mov	r5, r1
	mul	r5, r5, r0
	ldr	r0, .L2184+0x4
	add	r5, r5, r0
	bl	GetMoveSlotToReplace
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r1, r1, #0xd
	add	r0, r5, #0
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r1, .L2184+0x8
	add	r0, r5, #0
	bl	GetMonNickname
	ldr	r0, .L2184+0xc
	mov	r1, #0xd
	mul	r1, r1, r4
	ldr	r2, .L2184+0x10
	add	r1, r1, r2
	bl	StringCopy
	ldr	r0, .L2184+0x14
	bl	DisplayLearnMoveMessage
	ldr	r1, .L2184+0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2184+0x1c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2185:
	.align	2, 0
.L2184:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gText_12PoofForgotMove
	.word	gTasks
	.word	Task_PartyMenuReplaceMove
.Lfe274:
	.size	 DisplayPartyMenuForgotMoveMessage,.Lfe274-DisplayPartyMenuForgotMoveMessage
	.align	2, 0
	.type	 Task_PartyMenuReplaceMove,function
	.thumb_func
Task_PartyMenuReplaceMove:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2187	@cond_branch
	ldr	r5, .L2188
	mov	r1, #0x9
	ldrsb	r1, [r5, r1]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L2188+0x4
	add	r4, r4, r0
	bl	GetMoveSlotToReplace
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	RemoveMonPPBonus
	ldrh	r5, [r5, #0xe]
	bl	GetMoveSlotToReplace
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SetMonMoveSlot
	add	r0, r6, #0
	bl	Task_LearnedMove
.L2187:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2189:
	.align	2, 0
.L2188:
	.word	gPartyMenu
	.word	gPlayerParty
.Lfe275:
	.size	 Task_PartyMenuReplaceMove,.Lfe275-Task_PartyMenuReplaceMove
	.align	2, 0
	.type	 StopLearningMovePrompt,function
	.thumb_func
StopLearningMovePrompt:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L2191
	ldr	r1, .L2191+0x4
	mov	r3, #0xe
	ldrsh	r2, [r1, r3]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L2191+0x8
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L2191+0xc
	ldr	r1, .L2191+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2191+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2191+0x18
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2192:
	.align	2, 0
.L2191:
	.word	gStringVar2
	.word	gPartyMenu
	.word	gMoveNames
	.word	gStringVar4
	.word	gText_StopLearningMove2
	.word	gTasks
	.word	Task_StopLearningMoveYesNo
.Lfe276:
	.size	 StopLearningMovePrompt,.Lfe276-StopLearningMovePrompt
	.align	2, 0
	.type	 Task_StopLearningMoveYesNo,function
	.thumb_func
Task_StopLearningMoveYesNo:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2194	@cond_branch
	bl	PartyMenuDisplayYesNoMenu
	ldr	r0, .L2195
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2195+0x4
	str	r0, [r1]
.L2194:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2196:
	.align	2, 0
.L2195:
	.word	gTasks
	.word	Task_HandleStopLearningMoveYesNoInput
.Lfe277:
	.size	 Task_StopLearningMoveYesNo,.Lfe277-Task_StopLearningMoveYesNo
	.align	2, 0
	.type	 Task_HandleStopLearningMoveYesNoInput,function
	.thumb_func
Task_HandleStopLearningMoveYesNoInput:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r7, .L2208
	mov	r1, #0x9
	ldrsb	r1, [r7, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2208+0x4
	add	r4, r1, r0
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L2199	@cond_branch
	cmp	r5, #0
	bgt	.L2207	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L2203	@cond_branch
	b	.L2198
.L2209:
	.align	2, 0
.L2208:
	.word	gPartyMenu
	.word	gPlayerParty
.L2207:
	cmp	r5, #0x1
	beq	.L2204	@cond_branch
	b	.L2198
.L2199:
	ldr	r1, .L2210
	add	r0, r4, #0
	bl	GetMonNickname
	ldr	r0, .L2210+0x4
	mov	r1, #0xe
	ldrsh	r2, [r7, r1]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L2210+0x8
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L2210+0xc
	ldr	r1, .L2210+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r3, #0x10
	ldrsh	r0, [r7, r3]
	cmp	r0, #0x1
	bne	.L2200	@cond_branch
	ldr	r0, .L2210+0x14
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2210+0x18
	str	r0, [r1]
	b	.L2198
.L2211:
	.align	2, 0
.L2210:
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gText_MoveNotLearned
	.word	gTasks
	.word	Task_TryLearningNextMoveAfterText
.L2200:
	cmp	r0, #0x2
	bne	.L2202	@cond_branch
	ldr	r0, .L2212
	strh	r5, [r0]
.L2202:
	ldr	r0, .L2212+0x4
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2212+0x8
	str	r0, [r1]
	b	.L2198
.L2213:
	.align	2, 0
.L2212:
	.word	gSpecialVar_Result
	.word	gTasks
	.word	Task_ClosePartyMenuAfterText
.L2203:
	mov	r0, #0x5
	bl	PlaySE
.L2204:
	ldr	r1, .L2214
	add	r0, r4, #0
	bl	GetMonNickname
	ldr	r0, .L2214+0x4
	ldr	r1, .L2214+0x8
	mov	r3, #0xe
	ldrsh	r2, [r1, r3]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L2214+0xc
	add	r1, r1, r2
	bl	StringCopy
	ldr	r0, .L2214+0x10
	bl	DisplayLearnMoveMessage
	ldr	r1, .L2214+0x14
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2214+0x18
	str	r1, [r0]
.L2198:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2215:
	.align	2, 0
.L2214:
	.word	gStringVar1
	.word	gStringVar2
	.word	gPartyMenu
	.word	gMoveNames
	.word	gText_PkmnNeedsToReplaceMove
	.word	gTasks
	.word	Task_ReplaceMoveYesNo
.Lfe278:
	.size	 Task_HandleStopLearningMoveYesNoInput,.Lfe278-Task_HandleStopLearningMoveYesNoInput
	.align	2, 0
	.type	 Task_TryLearningNextMoveAfterText,function
	.thumb_func
Task_TryLearningNextMoveAfterText:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2217	@cond_branch
	add	r0, r4, #0
	bl	Task_TryLearningNextMove
.L2217:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe279:
	.size	 Task_TryLearningNextMoveAfterText,.Lfe279-Task_TryLearningNextMoveAfterText
	.align	2, 0
	.globl	ItemUseCB_RareCandy
	.type	 ItemUseCB_RareCandy,function
	.thumb_func
ItemUseCB_RareCandy:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r7, .L2223
	mov	r1, #0x9
	ldrsb	r1, [r7, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2223+0x4
	add	r4, r1, r0
	ldr	r0, .L2223+0x8
	ldrh	r5, [r0]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x64
	beq	.L2219	@cond_branch
	ldrb	r2, [r7, #0x9]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r3, #0x0
	bl	PokemonItemUseNoEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	b	.L2220
.L2224:
	.align	2, 0
.L2223:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
.L2219:
	mov	r4, #0x1
.L2220:
	mov	r0, #0x5
	bl	PlaySE
	cmp	r4, #0
	beq	.L2221	@cond_branch
	ldr	r1, .L2225
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L2225+0x4
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2225+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r8
	str	r1, [r0]
	b	.L2222
.L2226:
	.align	2, 0
.L2225:
	.word	gPartyMenuUseExitCallback
	.word	gText_WontHaveEffect
	.word	gTasks
.L2221:
	add	r0, r6, #0
	bl	Task_DoUseItemAnim
	ldr	r1, .L2227
	ldr	r0, .L2227+0x4
	str	r0, [r1]
.L2222:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2228:
	.align	2, 0
.L2227:
	.word	gItemUseCB
	.word	ItemUseCB_RareCandyStep
.Lfe280:
	.size	 ItemUseCB_RareCandy,.Lfe280-ItemUseCB_RareCandy
	.align	2, 0
	.type	 ItemUseCB_RareCandyStep,function
	.thumb_func
ItemUseCB_RareCandyStep:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r6, .L2230
	mov	r1, #0x9
	ldrsb	r1, [r6, r1]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L2230+0x4
	add	r4, r4, r0
	ldr	r0, .L2230+0x8
	ldr	r7, [r0]
	mov	r2, #0x86
	lsl	r2, r2, #0x2
	add	r1, r7, r2
	add	r0, r4, #0
	bl	GetMonLevelUpWindowStats
	ldrb	r0, [r6, #0x9]
	ldr	r5, .L2230+0xc
	ldrh	r1, [r5]
	mov	r2, #0x0
	bl	ExecuteTableBasedItemEffect_
	mov	r0, #0x89
	lsl	r0, r0, #0x2
	add	r1, r7, r0
	add	r0, r4, #0
	bl	GetMonLevelUpWindowStats
	ldr	r1, .L2230+0x10
	mov	r0, #0x1
	strb	r0, [r1]
	ldrh	r2, [r5]
	ldr	r3, .L2230+0x14
	mov	r0, #0x4
	add	r1, r4, #0
	bl	ItemUse_SetQuestLogEvent
	mov	r0, #0x0
	bl	PlayFanfareByFanfareNum
	ldrb	r0, [r6, #0x9]
	add	r1, r4, #0
	bl	UpdateMonDisplayInfoAfterRareCandy
	ldrh	r0, [r5]
	mov	r1, #0x1
	bl	RemoveBagItem
	ldr	r1, .L2230+0x18
	add	r0, r4, #0
	bl	GetMonNickname
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L2230+0x1c
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L2230+0x20
	ldr	r1, .L2230+0x24
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2230+0x28
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2230+0x2c
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2231:
	.align	2, 0
.L2230:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	sPartyMenuInternal
	.word	gSpecialVar_ItemId
	.word	gPartyMenuUseExitCallback
	.word	0xffff
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_PkmnElevatedToLvVar2
	.word	gTasks
	.word	Task_DisplayLevelUpStatsPg1
.Lfe281:
	.size	 ItemUseCB_RareCandyStep,.Lfe281-ItemUseCB_RareCandyStep
	.align	2, 0
	.type	 UpdateMonDisplayInfoAfterRareCandy,function
	.thumb_func
UpdateMonDisplayInfoAfterRareCandy:
	push	{r4, r5, r6, r7, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	ldr	r6, .L2234
	lsl	r4, r7, #0x4
	ldr	r1, [r6]
	add	r1, r1, r4
	add	r0, r5, #0
	bl	SetPartyMonAilmentGfx
	ldr	r2, .L2234+0x4
	ldr	r0, [r6]
	add	r3, r4, r0
	ldrb	r1, [r3, #0xc]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L2233	@cond_branch
	add	r0, r5, #0
	add	r1, r3, #0
	mov	r2, #0x1
	bl	DisplayPartyPokemonLevelCheck
.L2233:
	ldr	r1, [r6]
	add	r1, r1, r4
	add	r0, r5, #0
	mov	r2, #0x1
	bl	DisplayPartyPokemonHPCheck
	ldr	r1, [r6]
	add	r1, r1, r4
	add	r0, r5, #0
	mov	r2, #0x1
	bl	DisplayPartyPokemonMaxHPCheck
	ldr	r1, [r6]
	add	r1, r1, r4
	add	r0, r5, #0
	bl	DisplayPartyPokemonHPBarCheck
	ldr	r0, [r6]
	add	r0, r4, r0
	ldrb	r0, [r0, #0x9]
	add	r1, r5, #0
	bl	UpdatePartyMonHPBar
	add	r0, r7, #0
	mov	r1, #0x1
	bl	AnimatePartySlot
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2235:
	.align	2, 0
.L2234:
	.word	sPartyMenuBoxes
	.word	gSprites
.Lfe282:
	.size	 UpdateMonDisplayInfoAfterRareCandy,.Lfe282-UpdateMonDisplayInfoAfterRareCandy
	.align	2, 0
	.type	 Task_DisplayLevelUpStatsPg1,function
	.thumb_func
Task_DisplayLevelUpStatsPg1:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	bl	WaitFanfare
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2237	@cond_branch
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2237	@cond_branch
	ldr	r0, .L2239
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2238	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2237	@cond_branch
.L2238:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	DisplayLevelUpStatsPg1
	ldr	r0, .L2239+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2239+0x8
	str	r0, [r1]
.L2237:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2240:
	.align	2, 0
.L2239:
	.word	gMain
	.word	gTasks
	.word	Task_DisplayLevelUpStatsPg2
.Lfe283:
	.size	 Task_DisplayLevelUpStatsPg1,.Lfe283-Task_DisplayLevelUpStatsPg1
	.align	2, 0
	.type	 Task_DisplayLevelUpStatsPg2,function
	.thumb_func
Task_DisplayLevelUpStatsPg2:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L2244
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2243	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2242	@cond_branch
.L2243:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	DisplayLevelUpStatsPg2
	ldr	r0, .L2244+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2244+0x8
	str	r0, [r1]
.L2242:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2245:
	.align	2, 0
.L2244:
	.word	gMain
	.word	gTasks
	.word	Task_TryLearnNewMoves
.Lfe284:
	.size	 Task_DisplayLevelUpStatsPg2,.Lfe284-Task_DisplayLevelUpStatsPg2
	.align	2, 0
	.type	 DisplayLevelUpStatsPg1,function
	.thumb_func
DisplayLevelUpStatsPg1:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	ldr	r0, .L2247
	ldr	r5, [r0]
	mov	r0, #0x86
	lsl	r0, r0, #0x2
	add	r4, r5, r0
	bl	CreateLevelUpStatsWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x18]
	ldrh	r0, [r4, #0x18]
	mov	r1, #0x89
	lsl	r1, r1, #0x2
	add	r2, r5, r1
	mov	r1, #0x2
	str	r1, [sp]
	mov	r1, #0x3
	str	r1, [sp, #0x4]
	add	r1, r4, #0
	mov	r3, #0x1
	bl	DrawLevelUpWindowPg1
	ldrb	r0, [r4, #0x18]
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2248:
	.align	2, 0
.L2247:
	.word	sPartyMenuInternal
.Lfe285:
	.size	 DisplayLevelUpStatsPg1,.Lfe285-DisplayLevelUpStatsPg1
	.align	2, 0
	.type	 DisplayLevelUpStatsPg2,function
	.thumb_func
DisplayLevelUpStatsPg2:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L2250
	ldr	r1, [r0]
	mov	r0, #0x86
	lsl	r0, r0, #0x2
	add	r4, r1, r0
	ldrh	r0, [r4, #0x18]
	mov	r2, #0x89
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	mov	r2, #0x3
	str	r2, [sp]
	mov	r2, #0x1
	mov	r3, #0x2
	bl	DrawLevelUpWindowPg2
	ldrb	r0, [r4, #0x18]
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L2251:
	.align	2, 0
.L2250:
	.word	sPartyMenuInternal
.Lfe286:
	.size	 DisplayLevelUpStatsPg2,.Lfe286-DisplayLevelUpStatsPg2
	.align	2, 0
	.type	 Task_TryLearnNewMoves,function
	.thumb_func
Task_TryLearnNewMoves:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x0
	bl	WaitFanfare
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2253	@cond_branch
	ldr	r0, .L2262
	ldrh	r1, [r0, #0x2e]
	mov	r6, #0x1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2254	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2253	@cond_branch
.L2254:
	bl	RemoveLevelUpStatsWindow
	ldr	r4, .L2262+0x4
	mov	r1, #0x9
	ldrsb	r1, [r4, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2262+0x8
	add	r0, r0, r1
	mov	r1, #0x1
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	strh	r6, [r4, #0x10]
	ldr	r0, .L2262+0xc
	cmp	r1, r0
	beq	.L2258	@cond_branch
	cmp	r1, r0
	bgt	.L2261	@cond_branch
	cmp	r1, #0
	beq	.L2256	@cond_branch
	b	.L2259
.L2263:
	.align	2, 0
.L2262:
	.word	gMain
	.word	gPartyMenu
	.word	gPlayerParty
	.word	0xfffe
.L2261:
	ldr	r0, .L2264
	cmp	r1, r0
	beq	.L2257	@cond_branch
	b	.L2259
.L2265:
	.align	2, 0
.L2264:
	.word	0xffff
.L2256:
	add	r0, r5, #0
	bl	PartyMenuTryEvolution
	b	.L2253
.L2257:
	add	r0, r5, #0
	bl	DisplayMonNeedsToReplaceMove
	b	.L2253
.L2258:
	ldr	r0, .L2266
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2266+0x4
	str	r0, [r1]
	b	.L2253
.L2267:
	.align	2, 0
.L2266:
	.word	gTasks
	.word	Task_TryLearningNextMove
.L2259:
	add	r0, r5, #0
	bl	DisplayMonLearnedMove
.L2253:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe287:
	.size	 Task_TryLearnNewMoves,.Lfe287-Task_TryLearnNewMoves
	.align	2, 0
	.type	 Task_TryLearningNextMove,function
	.thumb_func
Task_TryLearningNextMove:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L2276
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2276+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L2276+0x8
	cmp	r1, r0
	beq	.L2268	@cond_branch
	cmp	r1, r0
	bgt	.L2275	@cond_branch
	cmp	r1, #0
	beq	.L2270	@cond_branch
	b	.L2273
.L2277:
	.align	2, 0
.L2276:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	0xfffe
.L2275:
	ldr	r0, .L2278
	cmp	r1, r0
	beq	.L2271	@cond_branch
	b	.L2273
.L2279:
	.align	2, 0
.L2278:
	.word	0xffff
.L2270:
	add	r0, r4, #0
	bl	PartyMenuTryEvolution
	b	.L2268
.L2271:
	add	r0, r4, #0
	bl	DisplayMonNeedsToReplaceMove
	b	.L2268
.L2273:
	add	r0, r4, #0
	bl	DisplayMonLearnedMove
.L2268:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe288:
	.size	 Task_TryLearningNextMove,.Lfe288-Task_TryLearningNextMove
	.align	2, 0
	.type	 PartyMenuTryEvolution,function
	.thumb_func
PartyMenuTryEvolution:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L2283
	mov	r1, #0x9
	ldrsb	r1, [r6, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2283+0x4
	add	r7, r1, r0
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetEvolutionTargetSpecies
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.L2281	@cond_branch
	bl	FreePartyPointers
	ldr	r0, .L2283+0x8
	ldr	r1, [r6]
	str	r1, [r0]
	ldrb	r3, [r6, #0x9]
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, #0x1
	bl	BeginEvolutionScene
	add	r0, r5, #0
	bl	DestroyTask
	b	.L2282
.L2284:
	.align	2, 0
.L2283:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gCB2_AfterEvolution
.L2281:
	ldr	r0, .L2285
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2285+0x4
	str	r0, [r1]
.L2282:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2286:
	.align	2, 0
.L2285:
	.word	gTasks
	.word	Task_ClosePartyMenuAfterText
.Lfe289:
	.size	 PartyMenuTryEvolution,.Lfe289-PartyMenuTryEvolution
	.align	2, 0
	.type	 DisplayMonNeedsToReplaceMove,function
	.thumb_func
DisplayMonNeedsToReplaceMove:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L2288
	mov	r8, r0
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2288+0x4
	add	r0, r0, r1
	ldr	r1, .L2288+0x8
	bl	GetMonNickname
	ldr	r0, .L2288+0xc
	ldr	r6, .L2288+0x10
	ldrh	r2, [r6]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L2288+0x14
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L2288+0x18
	ldr	r1, .L2288+0x1c
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldrh	r0, [r6]
	mov	r1, r8
	strh	r0, [r1, #0xe]
	ldr	r1, .L2288+0x20
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2288+0x24
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2289:
	.align	2, 0
.L2288:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveToLearn
	.word	gMoveNames
	.word	gStringVar4
	.word	gText_PkmnNeedsToReplaceMove
	.word	gTasks
	.word	Task_ReplaceMoveYesNo
.Lfe290:
	.size	 DisplayMonNeedsToReplaceMove,.Lfe290-DisplayMonNeedsToReplaceMove
	.align	2, 0
	.type	 DisplayMonLearnedMove,function
	.thumb_func
DisplayMonLearnedMove:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r6, r0, #0
	add	r5, r1, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L2291
	mov	r8, r0
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2291+0x4
	add	r0, r0, r1
	ldr	r1, .L2291+0x8
	bl	GetMonNickname
	ldr	r0, .L2291+0xc
	mov	r1, #0xd
	mul	r1, r1, r5
	ldr	r2, .L2291+0x10
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L2291+0x14
	ldr	r1, .L2291+0x18
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, r8
	strh	r5, [r0, #0xe]
	ldr	r1, .L2291+0x1c
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2291+0x20
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2292:
	.align	2, 0
.L2291:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gText_PkmnLearnedMove3
	.word	gTasks
	.word	Task_DoLearnedMoveFanfareAfterText
.Lfe291:
	.size	 DisplayMonLearnedMove,.Lfe291-DisplayMonLearnedMove
	.align	2, 0
	.globl	ItemUseCB_SacredAsh
	.type	 ItemUseCB_SacredAsh,function
	.thumb_func
ItemUseCB_SacredAsh:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L2294
	ldr	r2, [r1]
	mov	r3, #0x86
	lsl	r3, r3, #0x2
	add	r1, r2, r3
	mov	r3, #0x0
	strh	r3, [r1]
	ldr	r4, .L2294+0x4
	add	r1, r2, r4
	strh	r3, [r1]
	ldr	r1, .L2294+0x8
	ldrb	r1, [r1, #0x9]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	mov	r3, #0x87
	lsl	r3, r3, #0x2
	add	r2, r2, r3
	strh	r1, [r2]
	bl	UseSacredAsh
	pop	{r4}
	pop	{r0}
	bx	r0
.L2295:
	.align	2, 0
.L2294:
	.word	sPartyMenuInternal
	.word	0x21a
	.word	gPartyMenu
.Lfe292:
	.size	 ItemUseCB_SacredAsh,.Lfe292-ItemUseCB_SacredAsh
	.align	2, 0
	.type	 UseSacredAsh,function
	.thumb_func
UseSacredAsh:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r9, r4
	ldr	r6, .L2302
	mov	r1, #0x9
	ldrsb	r1, [r6, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2302+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2301	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r0, [r6, #0x9]
	ldr	r1, .L2302+0x8
	ldrh	r1, [r1]
	mov	r2, #0x0
	bl	ExecuteTableBasedItemEffect_
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2298	@cond_branch
.L2301:
	ldr	r0, .L2302+0xc
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2302+0x10
	str	r0, [r1]
	b	.L2296
.L2303:
	.align	2, 0
.L2302:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
	.word	gTasks
	.word	Task_SacredAshLoop
.L2298:
	mov	r0, #0x1
	bl	PlaySE
	ldr	r7, .L2304
	ldr	r0, [r7]
	ldr	r1, .L2304+0x4
	mov	sl, r1
	add	r0, r0, sl
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L2299	@cond_branch
	ldr	r0, .L2304+0x8
	str	r5, [r0]
.L2299:
	ldr	r4, .L2304+0xc
	mov	r0, #0x9
	ldrsb	r0, [r6, r0]
	lsl	r0, r0, #0x4
	ldr	r1, [r4]
	add	r1, r1, r0
	add	r0, r5, #0
	bl	SetPartyMonAilmentGfx
	ldr	r2, .L2304+0x10
	mov	r0, #0x9
	ldrsb	r0, [r6, r0]
	ldr	r1, [r4]
	lsl	r0, r0, #0x4
	add	r3, r0, r1
	ldrb	r1, [r3, #0xc]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L2300	@cond_branch
	add	r0, r5, #0
	add	r1, r3, #0
	mov	r2, #0x1
	bl	DisplayPartyPokemonLevelCheck
.L2300:
	ldr	r0, [r7]
	mov	r1, #0x87
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	AnimatePartySlot
	ldrb	r0, [r6, #0x9]
	mov	r1, #0x1
	bl	AnimatePartySlot
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r2, r8
	sub	r3, r3, r2
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	ldrb	r1, [r6, #0x9]
	ldr	r0, .L2304+0x14
	str	r0, [sp]
	mov	r0, r9
	mov	r2, #0x1
	bl	PartyMenuModifyHP
	mov	r0, r9
	mov	r1, #0x0
	mov	r2, r8
	bl	ResetHPTaskData
	ldr	r0, [r7]
	mov	r2, #0x86
	lsl	r2, r2, #0x2
	add	r1, r0, r2
	mov	r2, #0x1
	strh	r2, [r1]
	add	r0, r0, sl
	strh	r2, [r0]
.L2296:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2305:
	.align	2, 0
.L2304:
	.word	sPartyMenuInternal
	.word	0x21a
	.word	sSacredAshQuestLogMonBackup
	.word	sPartyMenuBoxes
	.word	gSprites
	.word	Task_SacredAshDisplayHPRestored
.Lfe293:
	.size	 UseSacredAsh,.Lfe293-UseSacredAsh
	.align	2, 0
	.type	 Task_SacredAshLoop,function
	.thumb_func
Task_SacredAshLoop:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2307	@cond_branch
	ldr	r5, .L2314
	ldr	r2, [r5]
	mov	r0, #0x86
	lsl	r0, r0, #0x2
	add	r1, r2, r0
	mov	r3, #0x0
	ldrsh	r0, [r1, r3]
	ldr	r3, .L2314+0x4
	cmp	r0, #0x1
	bne	.L2308	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0x9
	ldrsb	r1, [r3, r1]
	mov	r6, #0x87
	lsl	r6, r6, #0x2
	add	r0, r2, r6
	strh	r1, [r0]
.L2308:
	add	r1, r3, #0
	ldrb	r0, [r1, #0x9]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L2309	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L2314+0x8
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	cmp	r1, #0
	bne	.L2310	@cond_branch
	ldr	r0, .L2314+0xc
	strb	r1, [r0]
	ldr	r0, .L2314+0x10
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	b	.L2311
.L2315:
	.align	2, 0
.L2314:
	.word	sPartyMenuInternal
	.word	gPartyMenu
	.word	0x21a
	.word	gPartyMenuUseExitCallback
	.word	gText_WontHaveEffect
.L2310:
	ldr	r1, .L2316
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r1, [r3, #0x8]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L2312	@cond_branch
	ldr	r0, .L2316+0x4
	ldr	r1, [r0]
	ldr	r0, .L2316+0x8
	ldrh	r2, [r0]
	ldr	r3, .L2316+0xc
	mov	r0, #0x4
	bl	ItemUse_SetQuestLogEvent
.L2312:
	ldr	r0, .L2316+0x8
	ldrh	r0, [r0]
	mov	r1, #0x1
	bl	RemoveBagItem
.L2311:
	ldr	r1, .L2316+0x10
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2316+0x14
	str	r1, [r0]
	ldr	r1, .L2316+0x18
	mov	r0, #0x0
	strb	r0, [r1, #0x9]
	b	.L2307
.L2317:
	.align	2, 0
.L2316:
	.word	gPartyMenuUseExitCallback
	.word	sSacredAshQuestLogMonBackup
	.word	gSpecialVar_ItemId
	.word	0xffff
	.word	gTasks
	.word	Task_ClosePartyMenuAfterText
	.word	gPartyMenu
.L2309:
	add	r0, r4, #0
	bl	UseSacredAsh
.L2307:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe294:
	.size	 Task_SacredAshLoop,.Lfe294-Task_SacredAshLoop
	.align	2, 0
	.type	 Task_SacredAshDisplayHPRestored,function
	.thumb_func
Task_SacredAshDisplayHPRestored:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L2319
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2319+0x4
	add	r0, r0, r1
	ldr	r1, .L2319+0x8
	bl	GetMonNickname
	ldr	r4, .L2319+0xc
	ldr	r1, .L2319+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x0
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2319+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2319+0x18
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2320:
	.align	2, 0
.L2319:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_PkmnHPRestoredByVar2
	.word	gTasks
	.word	Task_SacredAshLoop
.Lfe295:
	.size	 Task_SacredAshDisplayHPRestored,.Lfe295-Task_SacredAshDisplayHPRestored
	.align	2, 0
	.globl	ItemUseCB_EvolutionStone
	.type	 ItemUseCB_EvolutionStone,function
	.thumb_func
ItemUseCB_EvolutionStone:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L2324
	mov	r1, #0x9
	ldrsb	r1, [r2, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2324+0x4
	add	r0, r0, r1
	ldr	r1, .L2324+0x8
	ldrh	r1, [r1]
	ldrb	r2, [r2, #0x9]
	mov	r3, #0x0
	bl	PokemonItemUseNoEffect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2322	@cond_branch
	ldr	r1, .L2324+0xc
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L2324+0x10
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2324+0x14
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	str	r5, [r0]
	b	.L2323
.L2325:
	.align	2, 0
.L2324:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
	.word	gPartyMenuUseExitCallback
	.word	gText_WontHaveEffect
	.word	gTasks
.L2322:
	add	r0, r4, #0
	bl	Task_DoUseItemAnim
.L2323:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe296:
	.size	 ItemUseCB_EvolutionStone,.Lfe296-ItemUseCB_EvolutionStone
	.align	2, 0
	.type	 CB2_UseEvolutionStone,function
	.thumb_func
CB2_UseEvolutionStone:
	push	{r4, r5, lr}
	ldr	r1, .L2327
	ldr	r4, .L2327+0x4
	ldr	r0, [r4]
	str	r0, [r1]
	ldrb	r0, [r4, #0x9]
	ldr	r5, .L2327+0x8
	ldrh	r1, [r5]
	mov	r2, #0x0
	bl	ExecuteTableBasedItemEffect_
	mov	r1, #0x9
	ldrsb	r1, [r4, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2327+0xc
	add	r1, r1, r0
	ldrh	r2, [r5]
	ldr	r3, .L2327+0x10
	mov	r0, #0x4
	bl	ItemUse_SetQuestLogEvent
	ldrh	r0, [r5]
	mov	r1, #0x1
	bl	RemoveBagItem
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2328:
	.align	2, 0
.L2327:
	.word	gCB2_AfterEvolution
	.word	gPartyMenu
	.word	gSpecialVar_ItemId
	.word	gPlayerParty
	.word	0xffff
.Lfe297:
	.size	 CB2_UseEvolutionStone,.Lfe297-CB2_UseEvolutionStone
	.align	2, 0
	.type	 MonCanEvolve,function
	.thumb_func
MonCanEvolve:
	push	{lr}
	bl	IsNationalPokedexEnabled
	cmp	r0, #0
	bne	.L2330	@cond_branch
	ldr	r0, .L2333
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2333+0x4
	add	r0, r0, r1
	ldr	r1, .L2333+0x8
	ldrh	r2, [r1]
	mov	r1, #0x2
	bl	GetEvolutionTargetSpecies
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x97
	bls	.L2330	@cond_branch
	mov	r0, #0x0
	b	.L2332
.L2334:
	.align	2, 0
.L2333:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_ItemId
.L2330:
	mov	r0, #0x1
.L2332:
	pop	{r1}
	bx	r1
.Lfe298:
	.size	 MonCanEvolve,.Lfe298-MonCanEvolve
	.align	2, 0
	.globl	GetItemEffectType
	.type	 GetItemEffectType,function
	.thumb_func
GetItemEffectType:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r2, r1, #0
	sub	r2, r2, #0xd
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xa5
	bls	.LCB22016
	b	.L2384	@long jump
.LCB22016:
	cmp	r1, #0xaf
	bne	.L2337	@cond_branch
	ldr	r0, .L2385
	ldr	r0, [r0]
	ldr	r1, .L2385+0x4
	add	r4, r0, r1
	b	.L2338
.L2386:
	.align	2, 0
.L2385:
	.word	gSaveBlock1Ptr
	.word	0x311c
.L2337:
	ldr	r1, .L2387
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r4, [r0]
.L2338:
	ldrb	r1, [r4]
	mov	r5, #0x3f
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2340	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L2340	@cond_branch
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0
	bne	.L2340	@cond_branch
	ldrb	r3, [r4, #0x3]
	mov	r0, #0x80
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2339	@cond_branch
.L2340:
	mov	r0, #0x0
	b	.L2383
.L2388:
	.align	2, 0
.L2387:
	.word	gItemEffectTable
.L2339:
	mov	r2, #0x40
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2342	@cond_branch
	mov	r0, #0xa
	b	.L2383
.L2342:
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2341	@cond_branch
	mov	r0, #0x1
	b	.L2383
.L2341:
	add	r2, r5, #0
	and	r2, r2, r3
	cmp	r2, #0
	bne	.L2346	@cond_branch
	lsr	r0, r1, #0x7
	cmp	r0, #0
	beq	.L2345	@cond_branch
.L2346:
	cmp	r2, #0x20
	bne	.L2347	@cond_branch
	mov	r0, #0x4
	b	.L2383
.L2347:
	cmp	r2, #0x10
	bne	.L2349	@cond_branch
	mov	r0, #0x3
	b	.L2383
.L2349:
	cmp	r2, #0x8
	bne	.L2351	@cond_branch
	mov	r0, #0x5
	b	.L2383
.L2351:
	cmp	r2, #0x4
	bne	.L2353	@cond_branch
	mov	r0, #0x6
	b	.L2383
.L2353:
	cmp	r2, #0x2
	bne	.L2355	@cond_branch
	mov	r0, #0x7
	b	.L2383
.L2355:
	cmp	r2, #0x1
	bne	.L2357	@cond_branch
	mov	r0, #0x8
	b	.L2383
.L2357:
	lsr	r0, r1, #0x7
	cmp	r0, #0
	beq	.L2359	@cond_branch
	cmp	r2, #0
	bne	.L2359	@cond_branch
	mov	r0, #0x9
	b	.L2383
.L2359:
	mov	r0, #0xb
	b	.L2383
.L2345:
	ldrb	r1, [r4, #0x4]
	mov	r0, #0x44
	and	r0, r0, r1
	add	r2, r1, #0
	cmp	r0, #0
	beq	.L2361	@cond_branch
	mov	r0, #0x2
	b	.L2383
.L2361:
	mov	r5, #0x2
	add	r0, r5, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2363	@cond_branch
	mov	r0, #0xc
	b	.L2383
.L2363:
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2365	@cond_branch
	mov	r0, #0xd
	b	.L2383
.L2365:
	ldrb	r1, [r4, #0x5]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2367	@cond_branch
	mov	r0, #0xe
	b	.L2383
.L2367:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2369	@cond_branch
	mov	r0, #0xf
	b	.L2383
.L2369:
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2371	@cond_branch
	mov	r0, #0x10
	b	.L2383
.L2371:
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2373	@cond_branch
	mov	r0, #0x11
	b	.L2383
.L2373:
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2375	@cond_branch
	mov	r0, #0x12
	b	.L2383
.L2375:
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2377	@cond_branch
	mov	r0, #0x13
	b	.L2383
.L2377:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2379	@cond_branch
	mov	r0, #0x14
	b	.L2383
.L2379:
	mov	r0, #0x18
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L2381	@cond_branch
.L2384:
	mov	r0, #0x16
	b	.L2383
.L2381:
	mov	r0, #0x15
.L2383:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe299:
	.size	 GetItemEffectType,.Lfe299-GetItemEffectType
	.align	2, 0
	.type	 TryTutorSelectedMon,function
	.thumb_func
TryTutorSelectedMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L2399
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2389	@cond_branch
	ldr	r7, .L2399+0x4
	mov	r1, #0x9
	ldrsb	r1, [r7, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2399+0x8
	add	r5, r1, r0
	mov	r0, #0xe
	add	r0, r0, r7
	mov	r8, r0
	ldr	r1, .L2399+0xc
	add	r0, r5, #0
	bl	GetMonNickname
	ldr	r4, .L2399+0x10
	ldrb	r0, [r4]
	bl	GetTutorMove
	strh	r0, [r7, #0xe]
	ldr	r0, .L2399+0x14
	mov	r1, #0xe
	ldrsh	r2, [r7, r1]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L2399+0x18
	add	r1, r1, r2
	bl	StringCopy
	mov	r0, #0x2
	mov	r1, r8
	strh	r0, [r1, #0x2]
	ldrb	r2, [r4]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	CanMonLearnTMTutor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2392	@cond_branch
	cmp	r0, #0x2
	beq	.L2393	@cond_branch
	ldrh	r1, [r7, #0xe]
	add	r0, r5, #0
	bl	GiveMoveToMon
	lsl	r0, r0, #0x10
	ldr	r1, .L2399+0x1c
	cmp	r0, r1
	beq	.L2391	@cond_branch
	add	r0, r6, #0
	bl	Task_LearnedMove
	b	.L2389
.L2400:
	.align	2, 0
.L2399:
	.word	gPaletteFade
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gStringVar1
	.word	gSpecialVar_0x8005
	.word	gStringVar2
	.word	gMoveNames
	.word	-0x10000
.L2392:
	ldr	r1, .L2401
	b	.L2398
.L2402:
	.align	2, 0
.L2401:
	.word	gText_PkmnCantLearnMove
.L2393:
	ldr	r1, .L2403
.L2398:
	add	r0, r6, #0
	bl	DisplayLearnMoveMessageAndClose
	b	.L2389
.L2404:
	.align	2, 0
.L2403:
	.word	gText_PkmnAlreadyKnows
.L2391:
	ldr	r0, .L2405
	bl	DisplayLearnMoveMessage
	ldr	r1, .L2405+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2405+0x8
	str	r1, [r0]
.L2389:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2406:
	.align	2, 0
.L2405:
	.word	gText_PkmnNeedsToReplaceMove
	.word	gTasks
	.word	Task_ReplaceMoveYesNo
.Lfe300:
	.size	 TryTutorSelectedMon,.Lfe300-TryTutorSelectedMon
	.align	2, 0
	.globl	CB2_PartyMenuFromStartMenu
	.type	 CB2_PartyMenuFromStartMenu,function
	.thumb_func
CB2_PartyMenuFromStartMenu:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L2408
	str	r0, [sp, #0x4]
	ldr	r0, .L2408+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2409:
	.align	2, 0
.L2408:
	.word	Task_HandleChooseMonInput
	.word	CB2_ReturnToFieldWithOpenMenu
.Lfe301:
	.size	 CB2_PartyMenuFromStartMenu,.Lfe301-CB2_PartyMenuFromStartMenu
	.align	2, 0
	.globl	CB2_ChooseMonToGiveItem
	.type	 CB2_ChooseMonToGiveItem,function
	.thumb_func
CB2_ChooseMonToGiveItem:
	push	{lr}
	add	sp, sp, #-0xc
	ldr	r0, .L2416
	ldrh	r0, [r0]
	bl	GetPocketByItemId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	beq	.L2413	@cond_branch
	cmp	r0, #0x5
	beq	.L2414	@cond_branch
	ldr	r1, .L2416+0x4
	b	.L2411
.L2417:
	.align	2, 0
.L2416:
	.word	gSpecialVar_ItemId
	.word	CB2_ReturnToBagMenu
.L2413:
	ldr	r1, .L2418
	b	.L2411
.L2419:
	.align	2, 0
.L2418:
	.word	CB2_ReturnToTMCaseMenu
.L2414:
	ldr	r1, .L2420
.L2411:
	mov	r0, #0x6
	str	r0, [sp]
	ldr	r0, .L2420+0x4
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x5
	mov	r3, #0x0
	bl	InitPartyMenu
	ldr	r1, .L2420+0x8
	ldr	r0, .L2420+0xc
	ldrh	r0, [r0]
	strh	r0, [r1, #0xc]
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2421:
	.align	2, 0
.L2420:
	.word	CB2_ReturnToBerryPouchMenu
	.word	Task_HandleChooseMonInput
	.word	gPartyMenu
	.word	gSpecialVar_ItemId
.Lfe302:
	.size	 CB2_ChooseMonToGiveItem,.Lfe302-CB2_ChooseMonToGiveItem
	.align	2, 0
	.type	 TryGiveItemOrMailToSelectedMon,function
	.thumb_func
TryGiveItemOrMailToSelectedMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	ldr	r5, .L2427
	ldr	r0, .L2427+0x4
	mov	r9, r0
	ldrb	r0, [r0, #0x9]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r7, .L2427+0x8
	add	r0, r0, r7
	mov	r1, #0xc
	bl	GetMonData
	strh	r0, [r5]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L2423	@cond_branch
	add	r0, r4, #0
	bl	GiveItemOrMailToSelectedMon
	b	.L2424
.L2428:
	.align	2, 0
.L2427:
	.word	sPartyMenuItemId
	.word	gPartyMenu
	.word	gPlayerParty
.L2423:
	ldrh	r0, [r5]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2425	@cond_branch
	add	r0, r4, #0
	bl	DisplayItemMustBeRemovedFirstMessage
	b	.L2424
.L2425:
	mov	r1, r9
	mov	r0, #0x9
	ldrsb	r0, [r1, r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	ldrh	r1, [r5]
	mov	r2, #0x1
	bl	DisplayAlreadyHoldingItemSwitchMessage
	ldr	r1, .L2429
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2429+0x4
	str	r1, [r0]
.L2424:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2430:
	.align	2, 0
.L2429:
	.word	gTasks
	.word	Task_SwitchItemsFromBagYesNo
.Lfe303:
	.size	 TryGiveItemOrMailToSelectedMon,.Lfe303-TryGiveItemOrMailToSelectedMon
	.align	2, 0
	.type	 GiveItemOrMailToSelectedMon,function
	.thumb_func
GiveItemOrMailToSelectedMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L2434
	ldrh	r0, [r5, #0xc]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2432	@cond_branch
	ldrh	r0, [r5, #0xc]
	bl	RemoveItemToGiveFromBag
	ldr	r0, .L2434+0x4
	ldr	r1, [r0]
	ldr	r0, .L2434+0x8
	str	r0, [r1, #0x4]
	add	r0, r4, #0
	bl	Task_ClosePartyMenu
	b	.L2433
.L2435:
	.align	2, 0
.L2434:
	.word	gPartyMenu
	.word	sPartyMenuInternal
	.word	CB2_WriteMailToGiveMonFromBag
.L2432:
	add	r0, r4, #0
	bl	GiveItemToSelectedMon
.L2433:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe304:
	.size	 GiveItemOrMailToSelectedMon,.Lfe304-GiveItemOrMailToSelectedMon
	.align	2, 0
	.type	 GiveItemToSelectedMon,function
	.thumb_func
GiveItemToSelectedMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L2438
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2437	@cond_branch
	ldr	r4, .L2438+0x4
	ldrh	r5, [r4, #0xc]
	mov	r0, #0x9
	ldrsb	r0, [r4, r0]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r6, .L2438+0x8
	add	r0, r0, r6
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	DisplayGaveHeldItemMessage
	mov	r0, #0x9
	ldrsb	r0, [r4, r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	add	r1, r5, #0
	bl	GiveItemToMon
	add	r0, r5, #0
	bl	RemoveItemToGiveFromBag
	ldr	r1, .L2438+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2438+0x10
	str	r1, [r0]
.L2437:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2439:
	.align	2, 0
.L2438:
	.word	gPaletteFade
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gTasks
	.word	Task_UpdateHeldItemSpriteAndClosePartyMenu
.Lfe305:
	.size	 GiveItemToSelectedMon,.Lfe305-GiveItemToSelectedMon
	.align	2, 0
	.type	 Task_UpdateHeldItemSpriteAndClosePartyMenu,function
	.thumb_func
Task_UpdateHeldItemSpriteAndClosePartyMenu:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L2442
	ldrb	r4, [r0, #0x9]
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2441	@cond_branch
	lsl	r2, r4, #0x18
	asr	r2, r2, #0x18
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r1, .L2442+0x4
	add	r0, r0, r1
	ldr	r1, .L2442+0x8
	lsl	r2, r2, #0x4
	ldr	r1, [r1]
	add	r1, r1, r2
	bl	UpdatePartyMonHeldItemSprite
	add	r0, r5, #0
	bl	Task_ClosePartyMenu
.L2441:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2443:
	.align	2, 0
.L2442:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	sPartyMenuBoxes
.Lfe306:
	.size	 Task_UpdateHeldItemSpriteAndClosePartyMenu,.Lfe306-Task_UpdateHeldItemSpriteAndClosePartyMenu
	.align	2, 0
	.type	 CB2_WriteMailToGiveMonFromBag,function
	.thumb_func
CB2_WriteMailToGiveMonFromBag:
	push	{r4, r5, r6, lr}
	ldr	r4, .L2445
	mov	r0, #0x9
	ldrsb	r0, [r4, r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L2445+0x4
	add	r0, r0, r5
	ldrh	r1, [r4, #0xc]
	bl	GiveItemToMon
	mov	r0, #0x9
	ldrsb	r0, [r4, r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x40
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L2445+0x8
	lsl	r2, r0, #0x3
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L2445+0xc
	add	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	ldr	r2, .L2445+0x10
	mov	r0, #0x4
	bl	DoEasyChatScreen
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2446:
	.align	2, 0
.L2445:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSaveBlock1Ptr
	.word	0x2ce4
	.word	CB2_ReturnToPartyOrBagMenuFromWritingMail
.Lfe307:
	.size	 CB2_WriteMailToGiveMonFromBag,.Lfe307-CB2_WriteMailToGiveMonFromBag
	.align	2, 0
	.type	 CB2_ReturnToPartyOrBagMenuFromWritingMail,function
	.thumb_func
CB2_ReturnToPartyOrBagMenuFromWritingMail:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	ldr	r6, .L2450
	mov	r1, #0x9
	ldrsb	r1, [r6, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2450+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L2450+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L2448	@cond_branch
	add	r0, r5, #0
	bl	TakeMailFromMon
	ldr	r4, .L2450+0xc
	add	r0, r5, #0
	mov	r1, #0xc
	add	r2, r4, #0
	bl	SetMonData
	ldrh	r0, [r4]
	mov	r1, #0x1
	bl	RemoveBagItem
	add	r0, r7, #0
	bl	ReturnGiveItemToBagOrPC
	ldr	r0, [r6]
	bl	SetMainCallback2
	b	.L2449
.L2451:
	.align	2, 0
.L2450:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gSpecialVar_Result
	.word	sPartyMenuItemId
.L2448:
	ldrb	r0, [r6, #0x8]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r2, [r6, #0xb]
	mov	r1, #0x7f
	str	r1, [sp]
	ldr	r1, .L2452
	str	r1, [sp, #0x4]
	ldr	r1, [r6]
	str	r1, [sp, #0x8]
	mov	r1, #0xff
	mov	r3, #0x1
	bl	InitPartyMenu
.L2449:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2453:
	.align	2, 0
.L2452:
	.word	Task_DisplayGaveMailFromBagMessage
.Lfe308:
	.size	 CB2_ReturnToPartyOrBagMenuFromWritingMail,.Lfe308-CB2_ReturnToPartyOrBagMenuFromWritingMail
	.align	2, 0
	.type	 Task_DisplayGaveMailFromBagMessage,function
	.thumb_func
Task_DisplayGaveMailFromBagMessage:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L2458
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2455	@cond_branch
	ldr	r1, .L2458+0x4
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L2456	@cond_branch
	ldr	r0, .L2458+0x8
	ldrh	r0, [r0, #0xc]
	ldrh	r1, [r1]
	mov	r2, #0x0
	bl	DisplaySwitchedHeldItemMessage
	b	.L2457
.L2459:
	.align	2, 0
.L2458:
	.word	gPaletteFade
	.word	sPartyMenuItemId
	.word	gPartyMenu
.L2456:
	ldr	r2, .L2460
	mov	r1, #0x9
	ldrsb	r1, [r2, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2460+0x4
	add	r0, r0, r1
	ldrh	r1, [r2, #0xc]
	mov	r2, #0x0
	mov	r3, #0x1
	bl	DisplayGaveHeldItemMessage
.L2457:
	ldr	r0, .L2460+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2460+0xc
	str	r0, [r1]
.L2455:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2461:
	.align	2, 0
.L2460:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gTasks
	.word	Task_UpdateHeldItemSpriteAndClosePartyMenu
.Lfe309:
	.size	 Task_DisplayGaveMailFromBagMessage,.Lfe309-Task_DisplayGaveMailFromBagMessage
	.align	2, 0
	.type	 Task_SwitchItemsFromBagYesNo,function
	.thumb_func
Task_SwitchItemsFromBagYesNo:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsPartyMenuTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2463	@cond_branch
	bl	PartyMenuDisplayYesNoMenu
	ldr	r0, .L2464
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2464+0x4
	str	r0, [r1]
.L2463:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2465:
	.align	2, 0
.L2464:
	.word	gTasks
	.word	Task_HandleSwitchItemsFromBagYesNoInput
.Lfe310:
	.size	 Task_SwitchItemsFromBagYesNo,.Lfe310-Task_SwitchItemsFromBagYesNo
	.align	2, 0
	.type	 Task_HandleSwitchItemsFromBagYesNoInput,function
	.thumb_func
Task_HandleSwitchItemsFromBagYesNoInput:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L2468	@cond_branch
	cmp	r1, #0
	bgt	.L2477	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L2473	@cond_branch
	b	.L2467
.L2477:
	cmp	r1, #0x1
	beq	.L2474	@cond_branch
	b	.L2467
.L2468:
	ldr	r7, .L2479
	ldrh	r4, [r7, #0xc]
	add	r0, r4, #0
	bl	RemoveItemToGiveFromBag
	ldr	r6, .L2479+0x4
	ldrh	r0, [r6]
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2469	@cond_branch
	add	r0, r4, #0
	bl	ReturnGiveItemToBagOrPC
	ldrh	r0, [r6]
	bl	BufferBagFullCantTakeItemMessage
	ldr	r0, .L2479+0x8
	mov	r1, #0x0
	bl	DisplayPartyMenuMessage
	b	.L2478
.L2480:
	.align	2, 0
.L2479:
	.word	gPartyMenu
	.word	sPartyMenuItemId
	.word	gStringVar4
.L2469:
	add	r0, r4, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2471	@cond_branch
	ldr	r0, .L2481
	ldr	r1, [r0]
	ldr	r0, .L2481+0x4
	str	r0, [r1, #0x4]
	add	r0, r5, #0
	bl	Task_ClosePartyMenu
	b	.L2467
.L2482:
	.align	2, 0
.L2481:
	.word	sPartyMenuInternal
	.word	CB2_WriteMailToGiveMonFromBag
.L2471:
	mov	r1, #0x9
	ldrsb	r1, [r7, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2483
	add	r0, r0, r1
	add	r1, r4, #0
	bl	GiveItemToMon
	ldrh	r1, [r6]
	add	r0, r4, #0
	mov	r2, #0x1
	bl	DisplaySwitchedHeldItemMessage
.L2478:
	ldr	r1, .L2483+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2483+0x8
	str	r1, [r0]
	b	.L2467
.L2484:
	.align	2, 0
.L2483:
	.word	gPlayerParty
	.word	gTasks
	.word	Task_UpdateHeldItemSpriteAndClosePartyMenu
.L2473:
	mov	r0, #0x5
	bl	PlaySE
.L2474:
	ldr	r0, .L2485
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2485+0x4
	str	r0, [r1]
.L2467:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2486:
	.align	2, 0
.L2485:
	.word	gTasks
	.word	Task_UpdateHeldItemSpriteAndClosePartyMenu
.Lfe311:
	.size	 Task_HandleSwitchItemsFromBagYesNoInput,.Lfe311-Task_HandleSwitchItemsFromBagYesNoInput
	.align	2, 0
	.type	 DisplayItemMustBeRemovedFirstMessage,function
	.thumb_func
DisplayItemMustBeRemovedFirstMessage:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L2488
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L2488+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L2488+0x8
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2489:
	.align	2, 0
.L2488:
	.word	gText_RemoveMailBeforeItem
	.word	gTasks
	.word	Task_UpdateHeldItemSpriteAndClosePartyMenu
.Lfe312:
	.size	 DisplayItemMustBeRemovedFirstMessage,.Lfe312-DisplayItemMustBeRemovedFirstMessage
	.align	2, 0
	.type	 RemoveItemToGiveFromBag,function
	.thumb_func
RemoveItemToGiveFromBag:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L2493
	ldrb	r0, [r0, #0xb]
	cmp	r0, #0x6
	bne	.L2491	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x1
	bl	RemovePCItem
	b	.L2492
.L2494:
	.align	2, 0
.L2493:
	.word	gPartyMenu
.L2491:
	add	r0, r1, #0
	mov	r1, #0x1
	bl	RemoveBagItem
.L2492:
	pop	{r0}
	bx	r0
.Lfe313:
	.size	 RemoveItemToGiveFromBag,.Lfe313-RemoveItemToGiveFromBag
	.align	2, 0
	.type	 ReturnGiveItemToBagOrPC,function
	.thumb_func
ReturnGiveItemToBagOrPC:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L2501
	ldrb	r0, [r0, #0xb]
	cmp	r0, #0x5
	beq	.L2496	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x1
	bl	AddPCItem
	b	.L2500
.L2502:
	.align	2, 0
.L2501:
	.word	gPartyMenu
.L2496:
	add	r0, r1, #0
	mov	r1, #0x1
	bl	AddBagItem
.L2500:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe314:
	.size	 ReturnGiveItemToBagOrPC,.Lfe314-ReturnGiveItemToBagOrPC
	.align	2, 0
	.globl	ChooseMonToGiveMailFromMailbox
	.type	 ChooseMonToGiveMailFromMailbox,function
	.thumb_func
ChooseMonToGiveMailFromMailbox:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x6
	str	r0, [sp]
	ldr	r0, .L2504
	str	r0, [sp, #0x4]
	ldr	r0, .L2504+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x7
	mov	r3, #0x0
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2505:
	.align	2, 0
.L2504:
	.word	Task_HandleChooseMonInput
	.word	Mailbox_ReturnToMailListAfterDeposit
.Lfe315:
	.size	 ChooseMonToGiveMailFromMailbox,.Lfe315-ChooseMonToGiveMailFromMailbox
	.align	2, 0
	.type	 TryGiveMailToSelectedMon,function
	.thumb_func
TryGiveMailToSelectedMon:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L2509
	mov	r1, #0x9
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2509+0x4
	add	r5, r1, r0
	ldr	r1, .L2509+0x8
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r2, .L2509+0xc
	ldr	r0, .L2509+0x10
	ldrh	r1, [r0]
	add	r1, r1, #0x6
	ldrh	r0, [r0, #0x2]
	add	r1, r1, r0
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L2509+0x14
	add	r0, r0, r1
	ldr	r1, [r2]
	add	r4, r1, r0
	add	r0, r5, #0
	mov	r1, #0xc
	bl	GetMonData
	cmp	r0, #0
	beq	.L2507	@cond_branch
	ldr	r0, .L2509+0x18
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
	b	.L2508
.L2510:
	.align	2, 0
.L2509:
	.word	gPartyMenu
	.word	gPlayerParty
	.word	gPartyMenuUseExitCallback
	.word	gSaveBlock1Ptr
	.word	gPlayerPcMenuManager
	.word	0x2ce4
	.word	gText_PkmnHoldingItemCantHoldMail
.L2507:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GiveMailToMon2
	add	r0, r4, #0
	bl	ClearMailStruct
	ldr	r0, .L2511
	mov	r1, #0x1
	bl	DisplayPartyMenuMessage
.L2508:
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L2511+0x4
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2511+0x8
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2512:
	.align	2, 0
.L2511:
	.word	gText_MailTransferredFromMailbox
	.word	gTasks
	.word	Task_UpdateHeldItemSpriteAndClosePartyMenu
.Lfe316:
	.size	 TryGiveMailToSelectedMon,.Lfe316-TryGiveMailToSelectedMon
	.align	2, 0
	.globl	InitChooseMonsForBattle
	.type	 InitChooseMonsForBattle,function
	.thumb_func
InitChooseMonsForBattle:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	ClearSelectedPartyOrder
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L2514
	str	r0, [sp, #0x4]
	ldr	r0, .L2514+0x4
	ldr	r0, [r0, #0x8]
	str	r0, [sp, #0x8]
	mov	r0, #0x4
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	InitPartyMenu
	ldr	r1, .L2514+0x8
	lsl	r4, r4, #0x6
	ldrb	r2, [r1, #0x8]
	mov	r0, #0x3f
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x8]
	ldr	r0, .L2514+0xc
	str	r0, [r1, #0x4]
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L2515:
	.align	2, 0
.L2514:
	.word	Task_HandleChooseMonInput
	.word	gMain
	.word	gPartyMenu
	.word	Task_ValidateChosenMonsForBattle
.Lfe317:
	.size	 InitChooseMonsForBattle,.Lfe317-InitChooseMonsForBattle
	.align	2, 0
	.globl	ClearSelectedPartyOrder
	.type	 ClearSelectedPartyOrder,function
	.thumb_func
ClearSelectedPartyOrder:
	push	{lr}
	ldr	r0, .L2517
	mov	r1, #0x0
	mov	r2, #0x3
	bl	memset
	pop	{r0}
	bx	r0
.L2518:
	.align	2, 0
.L2517:
	.word	gSelectedOrderFromParty
.Lfe318:
	.size	 ClearSelectedPartyOrder,.Lfe318-ClearSelectedPartyOrder
	.align	2, 0
	.type	 GetPartySlotEntryStatus,function
	.thumb_func
GetPartySlotEntryStatus:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L2525
	add	r0, r0, r1
	bl	GetBattleEntryEligibility
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2520	@cond_branch
	mov	r0, #0x2
	b	.L2524
.L2526:
	.align	2, 0
.L2525:
	.word	gPlayerParty
.L2520:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	HasPartySlotAlreadyBeenSelected
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2522	@cond_branch
	mov	r0, #0x0
	b	.L2524
.L2522:
	mov	r0, #0x1
.L2524:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe319:
	.size	 GetPartySlotEntryStatus,.Lfe319-GetPartySlotEntryStatus
	.align	2, 0
	.type	 GetBattleEntryEligibility,function
	.thumb_func
GetBattleEntryEligibility:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L2547	@cond_branch
	ldr	r0, .L2548
	ldrb	r0, [r0, #0x8]
	lsr	r1, r0, #0x6
	cmp	r1, #0
	beq	.L2532	@cond_branch
	cmp	r1, #0x1
	beq	.L2534	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x1e
	bls	.L2529	@cond_branch
.L2547:
	mov	r0, #0x0
	b	.L2543
.L2549:
	.align	2, 0
.L2548:
	.word	gPartyMenu
.L2532:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.L2529	@cond_branch
	b	.L2547
.L2534:
	ldr	r0, .L2550
	ldr	r0, [r0]
	ldr	r2, .L2550+0x4
	add	r0, r0, r2
	ldrb	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2535	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x32
	bhi	.L2547	@cond_branch
.L2535:
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r3, .L2550+0x8
	lsl	r1, r5, #0x1
	add	r0, r1, r3
	ldrh	r0, [r0]
	ldr	r2, .L2550+0xc
	cmp	r0, r2
	beq	.L2529	@cond_branch
.L2539:
	add	r0, r1, r3
	ldrh	r0, [r0]
	cmp	r0, r4
	beq	.L2547	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r5, #0x1
	add	r0, r1, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L2539	@cond_branch
.L2529:
	mov	r0, #0x1
.L2543:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L2551:
	.align	2, 0
.L2550:
	.word	gSaveBlock2Ptr
	.word	0x55c
	.word	gBattleTowerBannedSpecies
	.word	0xffff
.Lfe320:
	.size	 GetBattleEntryEligibility,.Lfe320-GetBattleEntryEligibility
	.align	2, 0
	.type	 CheckBattleEntriesAndGetMessage,function
	.thumb_func
CheckBattleEntriesAndGetMessage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L2575
	mov	sl, r0
	ldr	r0, .L2575+0x4
	ldrb	r0, [r0, #0x8]
	lsr	r0, r0, #0x6
	cmp	r0, #0x1
	beq	.L2554	@cond_branch
	cmp	r0, #0x2
	beq	.L2568	@cond_branch
	b	.L2553
.L2576:
	.align	2, 0
.L2575:
	.word	gPlayerParty
	.word	gPartyMenu
.L2554:
	ldr	r1, .L2577
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L2555	@cond_branch
	mov	r0, #0x11
	b	.L2572
.L2578:
	.align	2, 0
.L2577:
	.word	gSelectedOrderFromParty
.L2555:
	mov	r5, #0x0
.L2559:
	ldr	r2, .L2579
	add	r4, r2, r5
	ldrb	r0, [r4]
	mov	r1, #0x64
	mul	r0, r0, r1
	sub	r0, r0, #0x64
	add	r0, r0, sl
	mov	r1, #0xb
	bl	GetMonData
	ldr	r2, .L2579+0x4
	ldr	r1, [r2]
	ldr	r2, .L2579+0x8
	add	r1, r1, r2
	strh	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, #0x64
	mul	r0, r0, r1
	sub	r0, r0, #0x64
	add	r0, r0, sl
	mov	r1, #0xc
	bl	GetMonData
	ldr	r2, .L2579+0x4
	ldr	r1, [r2]
	mov	r2, #0x8d
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	strh	r0, [r1]
	add	r1, r5, #0x1
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	mov	r9, r1
	cmp	r5, #0x2
	bhi	.L2558	@cond_branch
	ldr	r0, .L2579+0x4
	mov	r8, r0
	mov	r7, #0x64
.L2563:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L2579+0x8
	add	r0, r0, r2
	mov	r1, #0x0
	ldrsh	r4, [r0, r1]
	ldr	r2, .L2579
	add	r6, r2, r5
	ldrb	r0, [r6]
	mul	r0, r0, r7
	sub	r0, r0, #0x64
	add	r0, r0, sl
	mov	r1, #0xb
	bl	GetMonData
	cmp	r4, r0
	beq	.L2573	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	mov	r2, #0x8d
	lsl	r2, r2, #0x2
	add	r1, r0, r2
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L2562	@cond_branch
	add	r4, r0, #0
	ldrb	r0, [r6]
	mul	r0, r0, r7
	sub	r0, r0, #0x64
	add	r0, r0, sl
	mov	r1, #0xc
	bl	GetMonData
	cmp	r4, r0
	beq	.L2574	@cond_branch
.L2562:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L2563	@cond_branch
.L2558:
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1
	bls	.L2559	@cond_branch
	b	.L2553
.L2580:
	.align	2, 0
.L2579:
	.word	gSelectedOrderFromParty
	.word	sPartyMenuInternal
	.word	0x236
.L2568:
	ldr	r2, .L2581
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0
	bne	.L2553	@cond_branch
	mov	r0, #0x12
	b	.L2572
.L2582:
	.align	2, 0
.L2581:
	.word	gSelectedOrderFromParty
.L2573:
	mov	r0, #0x13
	b	.L2572
.L2574:
	mov	r0, #0x14
	b	.L2572
.L2553:
	mov	r0, #0xff
.L2572:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe321:
	.size	 CheckBattleEntriesAndGetMessage,.Lfe321-CheckBattleEntriesAndGetMessage
	.align	2, 0
	.type	 HasPartySlotAlreadyBeenSelected,function
	.thumb_func
HasPartySlotAlreadyBeenSelected:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	ldr	r3, .L2591
.L2587:
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L2586	@cond_branch
	mov	r0, #0x1
	b	.L2590
.L2592:
	.align	2, 0
.L2591:
	.word	gSelectedOrderFromParty
.L2586:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bls	.L2587	@cond_branch
	mov	r0, #0x0
.L2590:
	pop	{r1}
	bx	r1
.Lfe322:
	.size	 HasPartySlotAlreadyBeenSelected,.Lfe322-HasPartySlotAlreadyBeenSelected
	.align	2, 0
	.type	 Task_ValidateChosenMonsForBattle,function
	.thumb_func
Task_ValidateChosenMonsForBattle:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	bl	CheckBattleEntriesAndGetMessage
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xff
	beq	.L2594	@cond_branch
	mov	r0, #0x1a
	bl	PlaySE
	add	r0, r4, #0
	bl	DisplayPartyMenuStdMessage
	ldr	r0, .L2599
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	b	.L2598
.L2600:
	.align	2, 0
.L2599:
	.word	gTasks
.L2594:
	ldr	r0, .L2601
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2596	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	Task_ClosePartyMenu
	b	.L2595
.L2602:
	.align	2, 0
.L2601:
	.word	gSelectedOrderFromParty
.L2596:
	mov	r0, #0x1a
	bl	PlaySE
	mov	r0, #0xe
	bl	DisplayPartyMenuStdMessage
	ldr	r0, .L2603
	lsl	r1, r6, #0x2
	add	r1, r1, r6
.L2598:
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2603+0x4
	str	r0, [r1]
.L2595:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2604:
	.align	2, 0
.L2603:
	.word	gTasks
	.word	Task_ContinueChoosingMonsForBattle
.Lfe323:
	.size	 Task_ValidateChosenMonsForBattle,.Lfe323-Task_ValidateChosenMonsForBattle
	.align	2, 0
	.type	 Task_ContinueChoosingMonsForBattle,function
	.thumb_func
Task_ContinueChoosingMonsForBattle:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L2608
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2607	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2606	@cond_branch
.L2607:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	DisplayPartyMenuStdMessage
	ldr	r0, .L2608+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2608+0x8
	str	r0, [r1]
.L2606:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2609:
	.align	2, 0
.L2608:
	.word	gMain
	.word	gTasks
	.word	Task_HandleChooseMonInput
.Lfe324:
	.size	 Task_ContinueChoosingMonsForBattle,.Lfe324-Task_ContinueChoosingMonsForBattle
	.align	2, 0
	.globl	ChooseMonForTradingBoard
	.type	 ChooseMonForTradingBoard,function
	.thumb_func
ChooseMonForTradingBoard:
	push	{lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	ldr	r2, .L2611
	str	r2, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2612:
	.align	2, 0
.L2611:
	.word	Task_HandleChooseMonInput
.Lfe325:
	.size	 ChooseMonForTradingBoard,.Lfe325-ChooseMonForTradingBoard
	.align	2, 0
	.globl	ChooseMonForMoveTutor
	.type	 ChooseMonForMoveTutor,function
	.thumb_func
ChooseMonForMoveTutor:
	push	{lr}
	add	sp, sp, #-0xc
	ldr	r0, .L2616
	ldrh	r0, [r0]
	cmp	r0, #0xe
	bhi	.L2614	@cond_branch
	mov	r0, #0x4
	str	r0, [sp]
	ldr	r0, .L2616+0x4
	str	r0, [sp, #0x4]
	ldr	r0, .L2616+0x8
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x0
	bl	InitPartyMenu
	b	.L2615
.L2617:
	.align	2, 0
.L2616:
	.word	gSpecialVar_0x8005
	.word	Task_HandleChooseMonInput
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L2614:
	mov	r0, #0x7f
	str	r0, [sp]
	ldr	r0, .L2618
	str	r0, [sp, #0x4]
	ldr	r0, .L2618+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x0
	bl	InitPartyMenu
	ldr	r1, .L2618+0x8
	ldr	r0, .L2618+0xc
	ldrh	r0, [r0]
	strb	r0, [r1, #0x9]
.L2615:
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2619:
	.align	2, 0
.L2618:
	.word	TryTutorSelectedMon
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
	.word	gPartyMenu
	.word	gSpecialVar_0x8007
.Lfe326:
	.size	 ChooseMonForMoveTutor,.Lfe326-ChooseMonForMoveTutor
	.align	2, 0
	.globl	ChooseMonForWirelessMinigame
	.type	 ChooseMonForWirelessMinigame,function
	.thumb_func
ChooseMonForWirelessMinigame:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x1
	str	r0, [sp]
	ldr	r0, .L2621
	str	r0, [sp, #0x4]
	ldr	r0, .L2621+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0xb
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2622:
	.align	2, 0
.L2621:
	.word	Task_HandleChooseMonInput
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe327:
	.size	 ChooseMonForWirelessMinigame,.Lfe327-ChooseMonForWirelessMinigame
	.align	2, 0
	.type	 GetPartyLayoutFromBattleType,function
	.thumb_func
GetPartyLayoutFromBattleType:
	push	{lr}
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2624	@cond_branch
	mov	r0, #0x0
	b	.L2626
.L2624:
	bl	IsMultiBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L2625	@cond_branch
	mov	r0, #0x1
	b	.L2626
.L2625:
	mov	r0, #0x2
.L2626:
	pop	{r1}
	bx	r1
.Lfe328:
	.size	 GetPartyLayoutFromBattleType,.Lfe328-GetPartyLayoutFromBattleType
	.align	2, 0
	.globl	OpenPartyMenuInTutorialBattle
	.type	 OpenPartyMenuInTutorialBattle,function
	.thumb_func
OpenPartyMenuInTutorialBattle:
	push	{r4, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x8
	bl	BtlCtrl_OakOldMan_TestState2Flag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2628	@cond_branch
	ldr	r0, .L2630
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2628	@cond_branch
	bl	GetPartyLayoutFromBattleType
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x7f
	str	r0, [sp]
	ldr	r0, .L2630+0x4
	str	r0, [sp, #0x4]
	ldr	r0, .L2630+0x8
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	add	r2, r4, #0
	mov	r3, #0x0
	bl	InitPartyMenu
	mov	r0, #0x8
	bl	BtlCtrl_OakOldMan_SetState2Flag
	b	.L2629
.L2631:
	.align	2, 0
.L2630:
	.word	gBattleTypeFlags
	.word	Task_FirstBattleEnterParty_WaitFadeIn
	.word	SetCB2ToReshowScreenAfterMenu
.L2628:
	bl	GetPartyLayoutFromBattleType
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L2632
	str	r0, [sp, #0x4]
	ldr	r0, .L2632+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	add	r2, r4, #0
	mov	r3, #0x0
	bl	InitPartyMenu
.L2629:
	bl	ReshowBattleScreenDummy
	bl	UpdatePartyToBattleOrder
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L2633:
	.align	2, 0
.L2632:
	.word	Task_HandleChooseMonInput
	.word	SetCB2ToReshowScreenAfterMenu
.Lfe329:
	.size	 OpenPartyMenuInTutorialBattle,.Lfe329-OpenPartyMenuInTutorialBattle
	.align	2, 0
	.globl	Pokedude_OpenPartyMenuInBattle
	.type	 Pokedude_OpenPartyMenuInBattle,function
	.thumb_func
Pokedude_OpenPartyMenuInBattle:
	push	{lr}
	add	sp, sp, #-0xc
	bl	GetPartyLayoutFromBattleType
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L2635
	str	r0, [sp, #0x4]
	ldr	r0, .L2635+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	InitPartyMenu
	bl	ReshowBattleScreenDummy
	bl	UpdatePartyToBattleOrder
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2636:
	.align	2, 0
.L2635:
	.word	Task_PartyMenu_Pokedude
	.word	SetCB2ToReshowScreenAfterMenu
.Lfe330:
	.size	 Pokedude_OpenPartyMenuInBattle,.Lfe330-Pokedude_OpenPartyMenuInBattle
	.align	2, 0
	.globl	Pokedude_ChooseMonForInBattleItem
	.type	 Pokedude_ChooseMonForInBattleItem,function
	.thumb_func
Pokedude_ChooseMonForInBattleItem:
	push	{lr}
	add	sp, sp, #-0xc
	bl	GetPartyLayoutFromBattleType
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x5
	str	r0, [sp]
	ldr	r0, .L2638
	str	r0, [sp, #0x4]
	ldr	r0, .L2638+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0xe
	mov	r3, #0x0
	bl	InitPartyMenu
	bl	ReshowBattleScreenDummy
	bl	UpdatePartyToBattleOrder
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2639:
	.align	2, 0
.L2638:
	.word	Task_PartyMenuFromBag_Pokedude
	.word	CB2_BagMenuFromBattle
.Lfe331:
	.size	 Pokedude_ChooseMonForInBattleItem,.Lfe331-Pokedude_ChooseMonForInBattleItem
	.align	2, 0
	.globl	EnterPartyFromItemMenuInBattle
	.type	 EnterPartyFromItemMenuInBattle,function
	.thumb_func
EnterPartyFromItemMenuInBattle:
	push	{r4, lr}
	add	sp, sp, #-0xc
	mov	r0, #0x8
	bl	BtlCtrl_OakOldMan_TestState2Flag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2641	@cond_branch
	ldr	r0, .L2645
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2641	@cond_branch
	bl	GetPartyLayoutFromBattleType
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x7f
	str	r0, [sp]
	ldr	r0, .L2645+0x4
	str	r0, [sp, #0x4]
	ldr	r0, .L2645+0x8
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x3
	mov	r3, #0x0
	bl	InitPartyMenu
	mov	r0, #0x8
	bl	BtlCtrl_OakOldMan_SetState2Flag
	b	.L2642
.L2646:
	.align	2, 0
.L2645:
	.word	gBattleTypeFlags
	.word	Task_FirstBattleEnterParty_WaitFadeIn
	.word	CB2_BagMenuFromBattle
.L2641:
	ldr	r0, .L2647
	ldrh	r0, [r0]
	bl	GetPocketByItemId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L2647+0x4
	cmp	r0, #0x5
	bne	.L2643	@cond_branch
	ldr	r4, .L2647+0x8
.L2643:
	bl	GetPartyLayoutFromBattleType
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x5
	str	r0, [sp]
	ldr	r0, .L2647+0xc
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x3
	mov	r3, #0x0
	bl	InitPartyMenu
.L2642:
	bl	ReshowBattleScreenDummy
	bl	UpdatePartyToBattleOrder
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L2648:
	.align	2, 0
.L2647:
	.word	gSpecialVar_ItemId
	.word	CB2_BagMenuFromBattle
	.word	CB2_ReturnToBerryPouchMenu
	.word	Task_HandleChooseMonInput
.Lfe332:
	.size	 EnterPartyFromItemMenuInBattle,.Lfe332-EnterPartyFromItemMenuInBattle
	.align	2, 0
	.type	 GetPartyMenuActionsTypeInBattle,function
	.thumb_func
GetPartyMenuActionsTypeInBattle:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L2656
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2651	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	beq	.L2650	@cond_branch
.L2651:
	mov	r0, #0x7
	b	.L2655
.L2657:
	.align	2, 0
.L2656:
	.word	gPlayerParty+0x64
.L2650:
	ldr	r0, .L2658
	ldrb	r0, [r0, #0xb]
	cmp	r0, #0x1
	beq	.L2653	@cond_branch
	mov	r0, #0x2
	b	.L2655
.L2659:
	.align	2, 0
.L2658:
	.word	gPartyMenu
.L2653:
	mov	r0, #0x3
.L2655:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe333:
	.size	 GetPartyMenuActionsTypeInBattle,.Lfe333-GetPartyMenuActionsTypeInBattle
	.align	2, 0
	.type	 TrySwitchInPokemon,function
	.thumb_func
TrySwitchInPokemon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	GetCursorSelectionMonId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	IsMultiBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2661	@cond_branch
	cmp	r5, #0x1
	beq	.L2662	@cond_branch
	cmp	r5, #0x4
	beq	.L2662	@cond_branch
	cmp	r5, #0x5
	bne	.L2661	@cond_branch
.L2662:
	ldr	r4, .L2679
	bl	GetTrainerPartnerName
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldr	r0, .L2679+0x4
	ldr	r1, .L2679+0x8
	b	.L2676
.L2680:
	.align	2, 0
.L2679:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_CantSwitchWithAlly
.L2661:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L2681
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.L2663	@cond_branch
	ldr	r1, .L2681+0x4
	add	r0, r4, #0
	bl	GetMonNickname
	ldr	r0, .L2681+0x8
	ldr	r1, .L2681+0xc
	b	.L2676
.L2682:
	.align	2, 0
.L2681:
	.word	gPlayerParty
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_PkmnHasNoEnergy
.L2663:
	mov	r4, #0x0
	b	.L2677
.L2667:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2666	@cond_branch
	add	r0, r5, #0
	bl	GetPartyIdFromBattleSlot
	lsl	r0, r0, #0x18
	ldr	r2, .L2683
	lsl	r1, r4, #0x1
	add	r1, r1, r2
	lsr	r0, r0, #0x18
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L2675	@cond_branch
.L2666:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2677:
	ldr	r0, .L2683+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L2667	@cond_branch
	mov	r7, #0x64
	mov	r0, r5
	mul	r0, r0, r7
	ldr	r1, .L2683+0x8
	mov	r8, r1
	add	r6, r0, r1
	add	r0, r6, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	beq	.L2670	@cond_branch
	ldr	r0, .L2683+0xc
	ldr	r1, .L2683+0x10
	b	.L2676
.L2684:
	.align	2, 0
.L2683:
	.word	gBattlerPartyIndexes
	.word	gBattlersCount
	.word	gPlayerParty
	.word	gStringVar4
	.word	gText_EggCantBattle
.L2670:
	add	r0, r5, #0
	bl	GetPartyIdFromBattleSlot
	ldr	r1, .L2685
	ldr	r1, [r1]
	add	r1, r1, #0x8b
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L2671	@cond_branch
	ldr	r1, .L2685+0x4
	add	r0, r6, #0
	bl	GetMonNickname
	ldr	r0, .L2685+0x8
	ldr	r1, .L2685+0xc
	b	.L2676
.L2686:
	.align	2, 0
.L2685:
	.word	gBattleStruct
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_PkmnAlreadySelected
.L2671:
	ldr	r0, .L2687
	ldrb	r0, [r0, #0xb]
	cmp	r0, #0x4
	bne	.L2672	@cond_branch
	bl	SetMonPreventsSwitchingString
	b	.L2678
.L2688:
	.align	2, 0
.L2687:
	.word	gPartyMenu
.L2672:
	cmp	r0, #0x2
	beq	.L2673	@cond_branch
	add	r0, r5, #0
	bl	GetPartyIdFromBattleSlot
	ldr	r1, .L2689
	strb	r0, [r1]
	ldr	r1, .L2689+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L2689+0x8
	ldr	r0, .L2689+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	GetPartyIdFromBattlePartyId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SwitchPartyMonSlots
	mov	r0, r4
	mul	r0, r0, r7
	add	r0, r0, r8
	add	r1, r6, #0
	bl	SwapPartyPokemon
	mov	r0, #0x1
	b	.L2674
.L2690:
	.align	2, 0
.L2689:
	.word	gSelectedMonPartyId
	.word	gPartyMenuUseExitCallback
	.word	gBattlerPartyIndexes
	.word	gBattlerInMenuId
.L2675:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L2691
	add	r0, r0, r1
	ldr	r1, .L2691+0x4
	bl	GetMonNickname
	ldr	r0, .L2691+0x8
	ldr	r1, .L2691+0xc
	b	.L2676
.L2692:
	.align	2, 0
.L2691:
	.word	gPlayerParty
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_PkmnAlreadyInBattle
.L2673:
	ldr	r0, .L2693
	ldrb	r0, [r0]
	ldr	r1, .L2693+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	GetPartyIdFromBattlePartyId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mul	r0, r0, r7
	add	r0, r0, r8
	ldr	r1, .L2693+0x8
	bl	GetMonNickname
	ldr	r0, .L2693+0xc
	ldr	r1, .L2693+0x10
.L2676:
	bl	StringExpandPlaceholders
.L2678:
	mov	r0, #0x0
.L2674:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2694:
	.align	2, 0
.L2693:
	.word	gBattlerInMenuId
	.word	gBattlerPartyIndexes
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_PkmnCantSwitchOut
.Lfe334:
	.size	 TrySwitchInPokemon,.Lfe334-TrySwitchInPokemon
	.align	2, 0
	.globl	BufferBattlePartyCurrentOrder
	.type	 BufferBattlePartyCurrentOrder,function
	.thumb_func
BufferBattlePartyCurrentOrder:
	push	{r4, lr}
	ldr	r4, .L2696
	bl	GetPlayerFlankId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	BufferBattlePartyOrder
	pop	{r4}
	pop	{r0}
	bx	r0
.L2697:
	.align	2, 0
.L2696:
	.word	gBattlePartyCurrentOrder
.Lfe335:
	.size	 BufferBattlePartyCurrentOrder,.Lfe335-BufferBattlePartyCurrentOrder
	.align	2, 0
	.type	 BufferBattlePartyOrder,function
	.thumb_func
BufferBattlePartyOrder:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	IsMultiBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2699	@cond_branch
	cmp	r4, #0
	beq	.L2700	@cond_branch
	mov	r0, #0x30
	strb	r0, [r6]
	mov	r0, #0x45
	strb	r0, [r6, #0x1]
	mov	r0, #0x12
	strb	r0, [r6, #0x2]
	b	.L2698
.L2700:
	mov	r0, #0x3
	strb	r0, [r6]
	mov	r0, #0x12
	strb	r0, [r6, #0x1]
	mov	r0, #0x45
	strb	r0, [r6, #0x2]
	b	.L2698
.L2699:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2703	@cond_branch
	mov	r5, #0x1
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	mov	r2, sp
	ldr	r1, .L2722
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r0, [r0]
	strb	r0, [r2]
	mov	r4, #0x0
	mov	r1, sp
.L2707:
	ldrb	r0, [r1]
	cmp	r4, r0
	beq	.L2706	@cond_branch
	mov	r2, sp
	add	r0, r2, r5
	strb	r4, [r0]
	add	r5, r5, #0x1
.L2706:
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L2707	@cond_branch
	b	.L2702
.L2723:
	.align	2, 0
.L2722:
	.word	gBattlerPartyIndexes
.L2703:
	mov	r5, #0x2
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	mov	r1, sp
	ldr	r4, .L2724
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r0, [r0]
	strb	r0, [r1]
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	mov	r1, sp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r0, [r0]
	strb	r0, [r1, #0x1]
	mov	r4, #0x0
.L2714:
	ldrb	r0, [r1]
	cmp	r4, r0
	beq	.L2713	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r4, r0
	beq	.L2713	@cond_branch
	mov	r2, sp
	add	r0, r2, r5
	strb	r4, [r0]
	add	r5, r5, #0x1
.L2713:
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L2714	@cond_branch
.L2702:
	mov	r4, #0x0
	mov	r3, sp
.L2720:
	add	r0, r6, r4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	ldrb	r2, [r3, #0x1]
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L2720	@cond_branch
.L2698:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2725:
	.align	2, 0
.L2724:
	.word	gBattlerPartyIndexes
.Lfe336:
	.size	 BufferBattlePartyOrder,.Lfe336-BufferBattlePartyOrder
	.align	2, 0
	.globl	BufferBattlePartyCurrentOrderBySide
	.type	 BufferBattlePartyCurrentOrderBySide,function
	.thumb_func
BufferBattlePartyCurrentOrderBySide:
	push	{lr}
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L2727
	lsl	r3, r2, #0x1
	add	r3, r3, r2
	add	r3, r3, #0x60
	ldr	r0, [r0]
	add	r0, r0, r3
	bl	BufferBattlePartyOrderBySide
	pop	{r0}
	bx	r0
.L2728:
	.align	2, 0
.L2727:
	.word	gBattleStruct
.Lfe337:
	.size	 BufferBattlePartyCurrentOrderBySide,.Lfe337-BufferBattlePartyCurrentOrderBySide
	.align	2, 0
	.type	 BufferBattlePartyOrderBySide,function
	.thumb_func
BufferBattlePartyOrderBySide:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	add	r0, r2, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2730	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x2
	b	.L2755
.L2730:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x3
.L2755:
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	IsMultiBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2732	@cond_branch
	cmp	r7, #0
	beq	.L2733	@cond_branch
	mov	r0, #0x30
	strb	r0, [r5]
	mov	r0, #0x45
	strb	r0, [r5, #0x1]
	mov	r0, #0x12
	strb	r0, [r5, #0x2]
	b	.L2729
.L2733:
	mov	r0, #0x3
	strb	r0, [r5]
	mov	r0, #0x12
	strb	r0, [r5, #0x1]
	mov	r0, #0x45
	strb	r0, [r5, #0x2]
	b	.L2729
.L2732:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2736	@cond_branch
	mov	r3, #0x1
	mov	r2, sp
	ldr	r1, .L2756
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strb	r0, [r2]
	mov	r4, #0x0
	mov	r1, sp
.L2740:
	ldrb	r0, [r1]
	cmp	r4, r0
	beq	.L2739	@cond_branch
	mov	r2, sp
	add	r0, r2, r3
	strb	r4, [r0]
	add	r3, r3, #0x1
.L2739:
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L2740	@cond_branch
	b	.L2735
.L2757:
	.align	2, 0
.L2756:
	.word	gBattlerPartyIndexes
.L2736:
	mov	r3, #0x2
	mov	r1, sp
	ldr	r2, .L2758
	lsl	r0, r4, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	lsl	r0, r6, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x1]
	mov	r4, #0x0
.L2747:
	ldrb	r0, [r1]
	cmp	r4, r0
	beq	.L2746	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r4, r0
	beq	.L2746	@cond_branch
	mov	r2, sp
	add	r0, r2, r3
	strb	r4, [r0]
	add	r3, r3, #0x1
.L2746:
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L2747	@cond_branch
.L2735:
	mov	r4, #0x0
	mov	r3, sp
.L2753:
	add	r0, r5, r4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	ldrb	r2, [r3, #0x1]
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L2753	@cond_branch
.L2729:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2759:
	.align	2, 0
.L2758:
	.word	gBattlerPartyIndexes
.Lfe338:
	.size	 BufferBattlePartyOrderBySide,.Lfe338-BufferBattlePartyOrderBySide
	.align	2, 0
	.globl	SwitchPartyOrderLinkMulti
	.type	 SwitchPartyOrderLinkMulti,function
	.thumb_func
SwitchPartyOrderLinkMulti:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	mov	r7, #0x0
	bl	IsMultiBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2761	@cond_branch
	ldr	r0, .L2774
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	add	r1, r1, #0x60
	ldr	r0, [r0]
	add	r4, r0, r1
	mov	r2, #0x0
	add	r6, r6, sp
	mov	ip, r6
	mov	r6, #0xf
	mov	r3, sp
.L2765:
	add	r1, r4, r2
	ldrb	r0, [r1]
	lsr	r0, r0, #0x4
	strb	r0, [r3]
	add	r3, r3, #0x1
	ldrb	r1, [r1]
	add	r0, r6, #0
	and	r0, r0, r1
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L2765	@cond_branch
	mov	r0, ip
	ldrb	r3, [r0]
	mov	r2, #0x0
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, r5
	bne	.L2769	@cond_branch
	mov	r0, sp
	ldrb	r7, [r0]
	strb	r3, [r0]
	b	.L2768
.L2775:
	.align	2, 0
.L2774:
	.word	gBattleStruct
.L2769:
	add	r2, r2, #0x1
	cmp	r2, #0x5
	bgt	.L2768	@cond_branch
	mov	r0, sp
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, r5
	bne	.L2769	@cond_branch
	add	r7, r0, #0
	strb	r3, [r1]
.L2768:
	cmp	r2, #0x6
	beq	.L2761	@cond_branch
	mov	r0, ip
	strb	r7, [r0]
	mov	r0, sp
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	mov	r1, sp
	ldrb	r1, [r1, #0x1]
	orr	r0, r0, r1
	strb	r0, [r4]
	mov	r0, sp
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x4
	mov	r1, sp
	ldrb	r1, [r1, #0x3]
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r0, sp
	ldrb	r0, [r0, #0x4]
	lsl	r0, r0, #0x4
	mov	r1, sp
	ldrb	r1, [r1, #0x5]
	orr	r0, r0, r1
	strb	r0, [r4, #0x2]
.L2761:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe339:
	.size	 SwitchPartyOrderLinkMulti,.Lfe339-SwitchPartyOrderLinkMulti
	.align	2, 0
	.type	 GetPartyIdFromBattleSlot,function
	.thumb_func
GetPartyIdFromBattleSlot:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x1
	and	r1, r1, r2
	lsr	r2, r0, #0x19
	cmp	r1, #0
	beq	.L2777	@cond_branch
	ldr	r0, .L2779
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r1, #0xf
	and	r1, r1, r0
	b	.L2778
.L2780:
	.align	2, 0
.L2779:
	.word	gBattlePartyCurrentOrder
.L2777:
	ldr	r0, .L2781
	add	r0, r2, r0
	ldrb	r0, [r0]
	lsr	r1, r0, #0x4
.L2778:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L2782:
	.align	2, 0
.L2781:
	.word	gBattlePartyCurrentOrder
.Lfe340:
	.size	 GetPartyIdFromBattleSlot,.Lfe340-GetPartyIdFromBattleSlot
	.align	2, 0
	.type	 SetPartyIdAtBattleSlot,function
	.thumb_func
SetPartyIdAtBattleSlot:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	mov	r1, #0x1
	and	r1, r1, r3
	lsr	r3, r0, #0x19
	cmp	r1, #0
	beq	.L2784	@cond_branch
	ldr	r0, .L2786
	add	r0, r3, r0
	ldrb	r2, [r0]
	mov	r1, #0xf0
	and	r1, r1, r2
	orr	r1, r1, r4
	strb	r1, [r0]
	b	.L2785
.L2787:
	.align	2, 0
.L2786:
	.word	gBattlePartyCurrentOrder
.L2784:
	ldr	r2, .L2788
	add	r2, r3, r2
	ldrb	r1, [r2]
	mov	r0, #0xf
	and	r0, r0, r1
	lsl	r1, r4, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L2785:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2789:
	.align	2, 0
.L2788:
	.word	gBattlePartyCurrentOrder
.Lfe341:
	.size	 SetPartyIdAtBattleSlot,.Lfe341-SetPartyIdAtBattleSlot
	.align	2, 0
	.globl	SwitchPartyMonSlots
	.type	 SwitchPartyMonSlots,function
	.thumb_func
SwitchPartyMonSlots:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	add	r0, r5, #0
	bl	GetPartyIdFromBattleSlot
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetPartyIdFromBattleSlot
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	SetPartyIdAtBattleSlot
	add	r0, r6, #0
	add	r1, r4, #0
	bl	SetPartyIdAtBattleSlot
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe342:
	.size	 SwitchPartyMonSlots,.Lfe342-SwitchPartyMonSlots
	.align	2, 0
	.globl	GetPartyIdFromBattlePartyId
	.type	 GetPartyIdFromBattlePartyId,function
	.thumb_func
GetPartyIdFromBattlePartyId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r5, .L2802
.L2795:
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsr	r0, r1, #0x4
	cmp	r0, r4
	beq	.L2801	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, r4
	bne	.L2794	@cond_branch
.L2801:
	add	r0, r2, #0
	b	.L2800
.L2803:
	.align	2, 0
.L2802:
	.word	gBattlePartyCurrentOrder
.L2794:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x2
	bls	.L2795	@cond_branch
	mov	r0, #0x0
.L2800:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe343:
	.size	 GetPartyIdFromBattlePartyId,.Lfe343-GetPartyIdFromBattlePartyId
	.align	2, 0
	.type	 UpdatePartyToBattleOrder,function
	.thumb_func
UpdatePartyToBattleOrder:
	push	{r4, r5, r6, lr}
	mov	r4, #0x96
	lsl	r4, r4, #0x2
	add	r0, r4, #0
	bl	Alloc
	add	r5, r0, #0
	ldr	r1, .L2810
	add	r2, r4, #0
	bl	memcpy
	mov	r4, #0x0
	mov	r6, #0x64
.L2808:
	add	r0, r4, #0
	bl	GetPartyIdFromBattlePartyId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mul	r0, r0, r6
	ldr	r1, .L2810
	add	r0, r0, r1
	mov	r1, r4
	mul	r1, r1, r6
	add	r1, r1, r5
	mov	r2, #0x64
	bl	memcpy
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L2808	@cond_branch
	add	r0, r5, #0
	bl	Free
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2811:
	.align	2, 0
.L2810:
	.word	gPlayerParty
.Lfe344:
	.size	 UpdatePartyToBattleOrder,.Lfe344-UpdatePartyToBattleOrder
	.align	2, 0
	.type	 UpdatePartyToFieldOrder,function
	.thumb_func
UpdatePartyToFieldOrder:
	push	{r4, r5, r6, lr}
	mov	r4, #0x96
	lsl	r4, r4, #0x2
	add	r0, r4, #0
	bl	Alloc
	add	r5, r0, #0
	ldr	r1, .L2818
	add	r2, r4, #0
	bl	memcpy
	mov	r4, #0x0
	mov	r6, #0x64
.L2816:
	add	r0, r4, #0
	bl	GetPartyIdFromBattleSlot
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mul	r0, r0, r6
	ldr	r1, .L2818
	add	r0, r0, r1
	mov	r1, r4
	mul	r1, r1, r6
	add	r1, r1, r5
	mov	r2, #0x64
	bl	memcpy
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L2816	@cond_branch
	add	r0, r5, #0
	bl	Free
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2819:
	.align	2, 0
.L2818:
	.word	gPlayerParty
.Lfe345:
	.size	 UpdatePartyToFieldOrder,.Lfe345-UpdatePartyToFieldOrder
	.align	2, 0
	.type	 SwitchAliveMonIntoLeadSlot,function
	.thumb_func
SwitchAliveMonIntoLeadSlot:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x1
	mov	r7, #0x64
	ldr	r0, .L2827
	mov	r8, r0
.L2824:
	add	r0, r6, #0
	bl	GetPartyIdFromBattleSlot
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mul	r0, r0, r7
	mov	r1, r8
	add	r5, r0, r1
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2823	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2823	@cond_branch
	mov	r0, #0x0
	bl	GetPartyIdFromBattleSlot
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	add	r1, r6, #0
	bl	SwitchPartyMonSlots
	mov	r0, r4
	mul	r0, r0, r7
	add	r0, r0, r8
	add	r1, r5, #0
	bl	SwapPartyPokemon
	b	.L2822
.L2828:
	.align	2, 0
.L2827:
	.word	gPlayerParty
.L2823:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x5
	bls	.L2824	@cond_branch
.L2822:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe346:
	.size	 SwitchAliveMonIntoLeadSlot,.Lfe346-SwitchAliveMonIntoLeadSlot
	.align	2, 0
	.type	 CB2_SetUpExitToBattleScreen,function
	.thumb_func
CB2_SetUpExitToBattleScreen:
	push	{lr}
	bl	CB2_SetUpReshowBattleScreenAfterMenu
	ldr	r0, .L2830
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L2831:
	.align	2, 0
.L2830:
	.word	SetCB2ToReshowScreenAfterMenu
.Lfe347:
	.size	 CB2_SetUpExitToBattleScreen,.Lfe347-CB2_SetUpExitToBattleScreen
	.align	2, 0
	.globl	ShowPartyMenuToShowcaseMultiBattleParty
	.type	 ShowPartyMenuToShowcaseMultiBattleParty,function
	.thumb_func
ShowPartyMenuToShowcaseMultiBattleParty:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x7f
	str	r0, [sp]
	ldr	r0, .L2833
	str	r0, [sp, #0x4]
	ldr	r0, .L2833+0x4
	ldr	r0, [r0, #0x8]
	str	r0, [sp, #0x8]
	mov	r0, #0x5
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2834:
	.align	2, 0
.L2833:
	.word	Task_InitMultiPartnerPartySlideIn
	.word	gMain
.Lfe348:
	.size	 ShowPartyMenuToShowcaseMultiBattleParty,.Lfe348-ShowPartyMenuToShowcaseMultiBattleParty
	.align	2, 0
	.type	 Task_InitMultiPartnerPartySlideIn,function
	.thumb_func
Task_InitMultiPartnerPartySlideIn:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L2836
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	strh	r1, [r4, #0x8]
	bl	SlideMultiPartyMenuBoxSpritesOneStep
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	mov	r0, #0x2
	mov	r2, #0x0
	bl	ChangeBgX
	ldr	r0, .L2836+0x4
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2837:
	.align	2, 0
.L2836:
	.word	gTasks
	.word	Task_MultiPartnerPartySlideIn
.Lfe349:
	.size	 Task_InitMultiPartnerPartySlideIn,.Lfe349-Task_InitMultiPartnerPartySlideIn
	.align	2, 0
	.type	 Task_MultiPartnerPartySlideIn,function
	.thumb_func
Task_MultiPartnerPartySlideIn:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r6, r5, #0x2
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L2847
	add	r4, r0, r1
	ldr	r0, .L2847+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2839	@cond_branch
	ldrh	r0, [r4]
	sub	r0, r0, #0x8
	strh	r0, [r4]
	add	r0, r5, #0
	bl	SlideMultiPartyMenuBoxSpritesOneStep
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L2839	@cond_branch
	mov	r4, #0x3
	ldr	r7, .L2847+0x8
.L2844:
	sub	r0, r4, #0x3
	lsl	r0, r0, #0x5
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L2843	@cond_branch
	ldr	r0, .L2847+0xc
	ldr	r1, [r0]
	lsl	r0, r4, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x9]
	mov	r1, #0x0
	bl	AnimateSelectedPartyIcon
.L2843:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L2844	@cond_branch
	mov	r0, #0x71
	bl	PlaySE
	ldr	r0, .L2847+0x10
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2847+0x14
	str	r0, [r1]
.L2839:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2848:
	.align	2, 0
.L2847:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	gMultiPartnerParty
	.word	sPartyMenuBoxes
	.word	gTasks
	.word	Task_WaitAfterMultiPartnerPartySlideIn
.Lfe350:
	.size	 Task_MultiPartnerPartySlideIn,.Lfe350-Task_MultiPartnerPartySlideIn
	.align	2, 0
	.type	 Task_WaitAfterMultiPartnerPartySlideIn,function
	.thumb_func
Task_WaitAfterMultiPartnerPartySlideIn:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L2851
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	cmp	r1, r0
	bne	.L2850	@cond_branch
	add	r0, r2, #0
	bl	Task_ClosePartyMenu
.L2850:
	pop	{r0}
	bx	r0
.L2852:
	.align	2, 0
.L2851:
	.word	gTasks+0x8
.Lfe351:
	.size	 Task_WaitAfterMultiPartnerPartySlideIn,.Lfe351-Task_WaitAfterMultiPartnerPartySlideIn
	.align	2, 0
	.type	 MoveMultiPartyMenuBoxSprite,function
	.thumb_func
MoveMultiPartyMenuBoxSprite:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x10
	cmp	r1, #0
	blt	.L2854	@cond_branch
	ldr	r1, .L2855
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r3, [r0, #0x24]
.L2854:
	pop	{r0}
	bx	r0
.L2856:
	.align	2, 0
.L2855:
	.word	gSprites
.Lfe352:
	.size	 MoveMultiPartyMenuBoxSprite,.Lfe352-MoveMultiPartyMenuBoxSprite
	.align	2, 0
	.type	 SlideMultiPartyMenuBoxSpritesOneStep,function
	.thumb_func
SlideMultiPartyMenuBoxSpritesOneStep:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L2864
	add	r5, r1, r0
	mov	r6, #0x3
	ldr	r7, .L2864+0x4
.L2861:
	ldr	r0, .L2864+0x8
	sub	r1, r6, #0x3
	lsl	r1, r1, #0x5
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L2860	@cond_branch
	ldr	r0, [r7]
	lsl	r4, r6, #0x4
	add	r0, r4, r0
	ldrb	r0, [r0, #0x9]
	ldrh	r1, [r5]
	sub	r1, r1, #0x8
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	MoveMultiPartyMenuBoxSprite
	ldr	r0, [r7]
	add	r0, r4, r0
	ldrb	r0, [r0, #0xa]
	ldrh	r1, [r5]
	sub	r1, r1, #0x8
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	MoveMultiPartyMenuBoxSprite
	ldr	r0, [r7]
	add	r0, r4, r0
	ldrb	r0, [r0, #0xb]
	ldrh	r1, [r5]
	sub	r1, r1, #0x8
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	MoveMultiPartyMenuBoxSprite
	ldr	r0, [r7]
	add	r4, r4, r0
	ldrb	r0, [r4, #0xc]
	ldrh	r1, [r5]
	sub	r1, r1, #0x8
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	MoveMultiPartyMenuBoxSprite
.L2860:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x5
	bls	.L2861	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	mov	r0, #0x2
	mov	r2, #0x1
	bl	ChangeBgX
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2865:
	.align	2, 0
.L2864:
	.word	gTasks+0x8
	.word	sPartyMenuBoxes
	.word	gMultiPartnerParty
.Lfe353:
	.size	 SlideMultiPartyMenuBoxSpritesOneStep,.Lfe353-SlideMultiPartyMenuBoxSpritesOneStep
	.align	2, 0
	.globl	ChooseMonForDaycare
	.type	 ChooseMonForDaycare,function
	.thumb_func
ChooseMonForDaycare:
	push	{lr}
	add	sp, sp, #-0xc
	ldr	r1, .L2867
	ldr	r0, .L2867+0x4
	str	r0, [r1]
	mov	r0, #0xf
	str	r0, [sp]
	ldr	r0, .L2867+0x8
	str	r0, [sp, #0x4]
	ldr	r0, .L2867+0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x6
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2868:
	.align	2, 0
.L2867:
	.word	gFieldCallback2
	.word	CB2_FadeFromPartyMenu
	.word	Task_HandleChooseMonInput
	.word	CB2_ReturnToField
.Lfe354:
	.size	 ChooseMonForDaycare,.Lfe354-ChooseMonForDaycare
	.align	2, 0
	.globl	ChoosePartyMonByMenuType
	.type	 ChoosePartyMonByMenuType,function
	.thumb_func
ChoosePartyMonByMenuType:
	push	{lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2870
	ldr	r1, .L2870+0x4
	str	r1, [r2]
	mov	r1, #0x0
	str	r1, [sp]
	ldr	r1, .L2870+0x8
	str	r1, [sp, #0x4]
	ldr	r1, .L2870+0xc
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	mov	r2, #0xb
	mov	r3, #0x0
	bl	InitPartyMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L2871:
	.align	2, 0
.L2870:
	.word	gFieldCallback2
	.word	CB2_FadeFromPartyMenu
	.word	Task_HandleChooseMonInput
	.word	CB2_ReturnToField
.Lfe355:
	.size	 ChoosePartyMonByMenuType,.Lfe355-ChoosePartyMonByMenuType
	.align	2, 0
	.type	 CB2_FadeFromPartyMenu,function
	.thumb_func
CB2_FadeFromPartyMenu:
	push	{lr}
	bl	FadeInFromBlack
	ldr	r0, .L2873
	mov	r1, #0xa
	bl	CreateTask
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L2874:
	.align	2, 0
.L2873:
	.word	Task_PartyMenuWaitForFade
.Lfe356:
	.size	 CB2_FadeFromPartyMenu,.Lfe356-CB2_FadeFromPartyMenu
	.align	2, 0
	.type	 Task_PartyMenuWaitForFade,function
	.thumb_func
Task_PartyMenuWaitForFade:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsWeatherNotFadingIn
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2876	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
	bl	UnlockPlayerFieldControls
	bl	ScriptContext_Enable
.L2876:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe357:
	.size	 Task_PartyMenuWaitForFade,.Lfe357-Task_PartyMenuWaitForFade
	.comm	gItemUseCB, 4	@ 4
.text
	.align	2, 0 @ Don't pad with nop

