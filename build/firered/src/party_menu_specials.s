@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	ChoosePartyMon
	.type	 ChoosePartyMon,function
	.thumb_func
ChoosePartyMon:
	push	{lr}
	add	sp, sp, #-0x4
	bl	LockPlayerFieldControls
	ldr	r0, .L5
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L5+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	mov	r0, #0x3
	strh	r0, [r1, #0x8]
	sub	r0, r0, #0x4
	str	r2, [sp]
	mov	r1, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	Task_ChoosePartyMon
	.word	gTasks
.Lfe1:
	.size	 ChoosePartyMon,.Lfe1-ChoosePartyMon
	.align	2, 0
	.globl	SelectMoveTutorMon
	.type	 SelectMoveTutorMon,function
	.thumb_func
SelectMoveTutorMon:
	push	{lr}
	add	sp, sp, #-0x4
	bl	LockPlayerFieldControls
	ldr	r0, .L8
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L8+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	mov	r0, #0x7
	strh	r0, [r1, #0x8]
	sub	r0, r0, #0x8
	str	r2, [sp]
	mov	r1, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	Task_ChoosePartyMon
	.word	gTasks
.Lfe2:
	.size	 SelectMoveTutorMon,.Lfe2-SelectMoveTutorMon
	.align	2, 0
	.type	 Task_ChoosePartyMon,function
	.thumb_func
Task_ChoosePartyMon:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L12
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L11	@cond_branch
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r1, .L12+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	bl	ChoosePartyMonByMenuType
	add	r0, r4, #0
	bl	DestroyTask
.L11:
	pop	{r4}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	gPaletteFade
	.word	gTasks
.Lfe3:
	.size	 Task_ChoosePartyMon,.Lfe3-Task_ChoosePartyMon
	.align	2, 0
	.globl	SelectMoveDeleterMove
	.type	 SelectMoveDeleterMove,function
	.thumb_func
SelectMoveDeleterMove:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L15
	ldr	r1, .L15+0x4
	ldrb	r1, [r1]
	ldr	r2, .L15+0x8
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L15+0xc
	mov	r4, #0x0
	str	r4, [sp]
	bl	ShowSelectMovePokemonSummaryScreen
	mov	r0, #0x3
	bl	SetPokemonSummaryScreenMode
	ldr	r1, .L15+0x10
	ldr	r0, .L15+0x14
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gPlayerParty
	.word	gSpecialVar_0x8004
	.word	gPlayerPartyCount
	.word	CB2_ReturnToField
	.word	gFieldCallback
	.word	FieldCB_ContinueScriptHandleMusic
.Lfe4:
	.size	 SelectMoveDeleterMove,.Lfe4-SelectMoveDeleterMove
	.align	2, 0
	.globl	GetNumMovesSelectedMonHas
	.type	 GetNumMovesSelectedMonHas,function
	.thumb_func
GetNumMovesSelectedMonHas:
	push	{r4, r5, lr}
	ldr	r1, .L24
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r4, #0x0
	add	r5, r1, #0
.L21:
	ldr	r0, .L24+0x4
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L24+0x8
	add	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0xd
	bl	GetMonData
	cmp	r0, #0
	beq	.L20	@cond_branch
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
.L20:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L21	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	gSpecialVar_Result
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
.Lfe5:
	.size	 GetNumMovesSelectedMonHas,.Lfe5-GetNumMovesSelectedMonHas
	.align	2, 0
	.globl	BufferMoveDeleterNicknameAndMove
	.type	 BufferMoveDeleterNicknameAndMove,function
	.thumb_func
BufferMoveDeleterNicknameAndMove:
	push	{r4, r5, lr}
	ldr	r0, .L27
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r5, r1
	mul	r5, r5, r0
	ldr	r0, .L27+0x4
	add	r5, r5, r0
	ldr	r0, .L27+0x8
	ldrh	r1, [r0]
	add	r1, r1, #0xd
	add	r0, r5, #0
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r1, .L27+0xc
	add	r0, r5, #0
	bl	GetMonNickname
	ldr	r0, .L27+0x10
	mov	r1, #0xd
	mul	r1, r1, r4
	ldr	r2, .L27+0x14
	add	r1, r1, r2
	bl	StringCopy
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
	.word	gSpecialVar_0x8005
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
.Lfe6:
	.size	 BufferMoveDeleterNicknameAndMove,.Lfe6-BufferMoveDeleterNicknameAndMove
	.align	2, 0
	.type	 ShiftMoveSlot,function
	.thumb_func
ShiftMoveSlot:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	mov	r8, r0
	add	r5, r1, #0
	add	r4, r2, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r0, r0, #0xd
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r1, [sp, #0x8]
	bl	GetMonData
	mov	r1, sp
	add	r1, r1, #0x2
	str	r1, [sp, #0x14]
	strh	r0, [r1]
	add	r3, r4, #0
	add	r3, r3, #0xd
	str	r3, [sp, #0xc]
	mov	r0, r8
	add	r1, r3, #0
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r7, r5, #0
	add	r7, r7, #0x11
	str	r7, [sp, #0x10]
	mov	r0, r8
	add	r1, r7, #0
	bl	GetMonData
	mov	r1, sp
	add	r1, r1, #0x5
	str	r1, [sp, #0x18]
	strb	r0, [r1]
	add	r3, r4, #0
	add	r3, r3, #0x11
	str	r3, [sp, #0x1c]
	mov	r0, r8
	add	r1, r3, #0
	bl	GetMonData
	add	r7, sp, #0x4
	mov	sl, r7
	strb	r0, [r7]
	mov	r0, r8
	mov	r1, #0x15
	bl	GetMonData
	mov	r6, sp
	add	r6, r6, #0x6
	strb	r0, [r6]
	ldr	r1, .L30
	add	r0, r5, r1
	ldrb	r0, [r0]
	mov	r9, r0
	ldrb	r0, [r6]
	add	r2, r0, #0
	mov	r3, r9
	and	r2, r2, r3
	lsl	r5, r5, #0x1
	asr	r2, r2, r5
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r1, r4, r1
	ldrb	r3, [r1]
	add	r1, r0, #0
	and	r1, r1, r3
	lsl	r4, r4, #0x1
	asr	r1, r1, r4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r7, r9
	bic	r0, r0, r7
	strb	r0, [r6]
	ldrb	r0, [r6]
	bic	r0, r0, r3
	strb	r0, [r6]
	lsl	r2, r2, r4
	lsl	r1, r1, r5
	add	r2, r2, r1
	ldrb	r0, [r6]
	orr	r0, r0, r2
	strb	r0, [r6]
	mov	r0, r8
	ldr	r1, [sp, #0x8]
	mov	r2, sp
	bl	SetMonData
	mov	r0, r8
	ldr	r1, [sp, #0xc]
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	mov	r0, r8
	ldr	r1, [sp, #0x10]
	mov	r2, sl
	bl	SetMonData
	mov	r0, r8
	ldr	r1, [sp, #0x1c]
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	mov	r0, r8
	mov	r1, #0x15
	add	r2, r6, #0
	bl	SetMonData
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gPPUpGetMask
.Lfe7:
	.size	 ShiftMoveSlot,.Lfe7-ShiftMoveSlot
	.align	2, 0
	.globl	MoveDeleterForgetMove
	.type	 MoveDeleterForgetMove,function
	.thumb_func
MoveDeleterForgetMove:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r0, .L38
	mov	r8, r0
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L38+0x4
	add	r0, r0, r5
	ldr	r4, .L38+0x8
	ldrb	r2, [r4]
	mov	r1, #0x0
	bl	SetMonMoveSlot
	mov	r1, r8
	ldrh	r0, [r1]
	mul	r0, r0, r6
	add	r0, r0, r5
	ldrb	r1, [r4]
	bl	RemoveMonPPBonus
	ldrh	r4, [r4]
	cmp	r4, #0x2
	bhi	.L34	@cond_branch
.L36:
	ldr	r0, .L38
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L38+0x4
	add	r0, r0, r1
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	add	r4, r4, #0x1
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	bl	ShiftMoveSlot
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	cmp	r4, #0x2
	bls	.L36	@cond_branch
.L34:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
	.word	gSpecialVar_0x8005
.Lfe8:
	.size	 MoveDeleterForgetMove,.Lfe8-MoveDeleterForgetMove
	.align	2, 0
	.globl	IsSelectedMonEgg
	.type	 IsSelectedMonEgg,function
	.thumb_func
IsSelectedMonEgg:
	push	{lr}
	ldr	r0, .L43
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L43+0x4
	add	r0, r0, r1
	mov	r1, #0x2d
	bl	GetMonData
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L41	@cond_branch
	ldr	r1, .L43+0x8
	mov	r0, #0x1
	strh	r0, [r1]
	b	.L42
.L44:
	.align	2, 0
.L43:
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
	.word	gSpecialVar_Result
.L41:
	ldr	r0, .L45
	strh	r1, [r0]
.L42:
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	gSpecialVar_Result
.Lfe9:
	.size	 IsSelectedMonEgg,.Lfe9-IsSelectedMonEgg
.text
	.align	2, 0 @ Don't pad with nop

