@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sBigMonSizeTable,object
sBigMonSizeTable:
	.short	0x122
	.byte	0x1
	.space	1
	.short	0x0
	.space	2
	.short	0x12c
	.byte	0x1
	.space	1
	.short	0xa
	.space	2
	.short	0x190
	.byte	0x2
	.space	1
	.short	0x6e
	.space	2
	.short	0x1f4
	.byte	0x4
	.space	1
	.short	0x136
	.space	2
	.short	0x258
	.byte	0x14
	.space	1
	.short	0x2c6
	.space	2
	.short	0x2bc
	.byte	0x32
	.space	1
	.short	0xa96
	.space	2
	.short	0x320
	.byte	0x64
	.space	1
	.short	0x1e1e
	.space	2
	.short	0x384
	.byte	0x96
	.space	1
	.short	0x452e
	.space	2
	.short	0x3e8
	.byte	0x96
	.space	1
	.short	0x7fc6
	.space	2
	.short	0x44c
	.byte	0x64
	.space	1
	.short	0xba5e
	.space	2
	.short	0x4b0
	.byte	0x32
	.space	1
	.short	0xe16e
	.space	2
	.short	0x514
	.byte	0x14
	.space	1
	.short	0xf4f6
	.space	2
	.short	0x578
	.byte	0x5
	.space	1
	.short	0xfcc6
	.space	2
	.short	0x5dc
	.byte	0x2
	.space	1
	.short	0xfeba
	.space	2
	.short	0x640
	.byte	0x1
	.space	1
	.short	0xff82
	.space	2
	.short	0x6a4
	.byte	0x1
	.space	1
	.short	0xffe6
	.space	2
	.size	 sBigMonSizeTable,128
	.type	 sGiftRibbonsMonDataIds,object
sGiftRibbonsMonDataIds:
	.byte	0x48
	.byte	0x49
	.byte	0x4a
	.byte	0x4b
	.byte	0x4c
	.byte	0x4d
	.byte	0x4e
	.size	 sGiftRibbonsMonDataIds,7
.text
	.align	2, 0
	.type	 GetMonSizeHash,function
	.thumb_func
GetMonSizeHash:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	mov	r1, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	str	r0, [sp, #0x4]
	lsr	r0, r0, #0x10
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x27
	bl	GetMonData
	add	r7, r0, #0
	mov	r6, #0xf
	and	r7, r7, r6
	add	r0, r5, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r8, r0
	mov	r1, r8
	and	r1, r1, r6
	mov	r8, r1
	add	r0, r5, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r9, r0
	mov	r3, r9
	and	r3, r3, r6
	mov	r9, r3
	add	r0, r5, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	sl, r0
	and	r0, r0, r6
	mov	sl, r0
	add	r0, r5, #0
	mov	r1, #0x2b
	bl	GetMonData
	add	r4, r0, #0
	and	r4, r4, r6
	add	r0, r5, #0
	mov	r1, #0x2c
	bl	GetMonData
	add	r2, r0, #0
	and	r2, r2, r6
	mov	r1, r8
	mov	r3, r9
	eor	r1, r1, r3
	mov	r8, r1
	mov	r0, r8
	mul	r0, r0, r7
	mov	r1, #0xff
	ldr	r3, [sp]
	and	r3, r3, r1
	eor	r0, r0, r3
	eor	r4, r4, r2
	mov	r1, sl
	mul	r1, r1, r4
	ldr	r3, [sp, #0x4]
	lsr	r2, r3, #0x18
	eor	r1, r1, r2
	lsl	r0, r0, #0x8
	add	r0, r0, r1
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 GetMonSizeHash,.Lfe1-GetMonSizeHash
	.align	2, 0
	.type	 TranslateBigMonSizeTableIndex,function
	.thumb_func
TranslateBigMonSizeTableIndex:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, #0x1
	ldr	r3, .L13
.L9:
	lsl	r0, r1, #0x3
	add	r0, r0, r3
	ldrh	r0, [r0, #0x4]
	cmp	r2, r0
	bcs	.L8	@cond_branch
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L12
.L14:
	.align	2, 0
.L13:
	.word	sBigMonSizeTable
.L8:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xe
	bls	.L9	@cond_branch
	add	r0, r1, #0
.L12:
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 TranslateBigMonSizeTableIndex,.Lfe2-TranslateBigMonSizeTableIndex
	.align	2, 0
	.type	 GetMonSize,function
	.thumb_func
GetMonSize:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	add	r6, r1, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	bl	GetPokedexHeightWeight
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r0, r6, #0
	bl	TranslateBigMonSizeTableIndex
	lsl	r0, r0, #0x18
	ldr	r1, .L16
	lsr	r0, r0, #0x15
	add	r0, r0, r1
	ldrh	r1, [r0]
	str	r1, [sp]
	mov	r2, #0x0
	str	r2, [sp, #0x4]
	ldrb	r2, [r0, #0x2]
	mov	r3, #0x0
	ldrh	r4, [r0, #0x4]
	mov	r5, #0x0
	add	r0, r6, #0
	mov	r1, #0x0
	sub	r0, r0, r4
	sbc	r1, r1, r5
	bl	__udivdi3
	ldr	r2, [sp]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x4]		@ created by thumb_load_double_from_address
	add	r2, r2, r0
	adc	r3, r3, r1
	str	r2, [sp]
	str	r3, [sp, #0x4]
	add	r0, r7, #0
	mov	r1, #0x0
	bl	__muldi3
	mov	r2, #0xa
	mov	r3, #0
	bl	__udivdi3
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L17:
	.align	2, 0
.L16:
	.word	sBigMonSizeTable
.Lfe3:
	.size	 GetMonSize,.Lfe3-GetMonSize
	.align	2, 0
	.type	 FormatMonSizeRecord,function
	.thumb_func
FormatMonSizeRecord:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x64
	mul	r0, r0, r1
	mov	r1, #0xfe
	bl	__udivsi3
	add	r5, r0, #0
	mov	r1, #0xa
	bl	__udivsi3
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	mov	r3, #0x8
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L19
	bl	StringAppend
	add	r4, r0, #0
	add	r0, r5, #0
	mov	r1, #0xa
	bl	__umodsi3
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gText_DecimalPoint
.Lfe4:
	.size	 FormatMonSizeRecord,.Lfe4-FormatMonSizeRecord
	.align	2, 0
	.type	 CompareMonSize,function
	.thumb_func
CompareMonSize:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r7, r1, #0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r1, .L32
	ldrh	r0, [r1]
	cmp	r0, #0x5
	bls	.L22	@cond_branch
	mov	r0, #0x0
	b	.L31
.L33:
	.align	2, 0
.L32:
	.word	gSpecialVar_Result
.L22:
	ldrh	r1, [r1]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L34
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L25	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, r6
	beq	.L24	@cond_branch
.L25:
	mov	r0, #0x1
	b	.L31
.L35:
	.align	2, 0
.L34:
	.word	gPlayerParty
.L24:
	mov	r4, sp
	add	r0, r5, #0
	bl	GetMonSizeHash
	strh	r0, [r4]
	mov	r0, sp
	ldrh	r1, [r0]
	add	r0, r6, #0
	bl	GetMonSize
	add	r5, r0, #0
	ldrh	r1, [r7]
	add	r0, r6, #0
	bl	GetMonSize
	add	r4, r0, #0
	ldr	r0, .L36
	add	r1, r4, #0
	bl	FormatMonSizeRecord
	ldr	r0, .L36+0x4
	add	r1, r5, #0
	bl	FormatMonSizeRecord
	cmp	r5, r4
	bne	.L27	@cond_branch
	mov	r0, #0x4
	b	.L31
.L37:
	.align	2, 0
.L36:
	.word	gStringVar3
	.word	gStringVar2
.L27:
	cmp	r5, r4
	bcc	.L29	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r7]
	mov	r0, #0x3
	b	.L31
.L29:
	mov	r0, #0x2
.L31:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 CompareMonSize,.Lfe5-CompareMonSize
	.align	2, 0
	.type	 GetMonSizeRecordInfo,function
	.thumb_func
GetMonSizeRecordInfo:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrh	r1, [r1]
	add	r0, r4, #0
	bl	GetMonSize
	add	r1, r0, #0
	ldr	r0, .L39
	bl	FormatMonSizeRecord
	ldr	r0, .L39+0x4
	mov	r1, #0xb
	mul	r1, r1, r4
	ldr	r2, .L39+0x8
	add	r1, r1, r2
	bl	StringCopy
	pop	{r4}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	gStringVar3
	.word	gStringVar1
	.word	gSpeciesNames
.Lfe6:
	.size	 GetMonSizeRecordInfo,.Lfe6-GetMonSizeRecordInfo
	.align	2, 0
	.globl	InitHeracrossSizeRecord
	.type	 InitHeracrossSizeRecord,function
	.thumb_func
InitHeracrossSizeRecord:
	push	{lr}
	ldr	r0, .L42
	mov	r1, #0x0
	bl	VarSet
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	0x403d
.Lfe7:
	.size	 InitHeracrossSizeRecord,.Lfe7-InitHeracrossSizeRecord
	.align	2, 0
	.globl	GetHeracrossSizeRecordInfo
	.type	 GetHeracrossSizeRecordInfo,function
	.thumb_func
GetHeracrossSizeRecordInfo:
	push	{lr}
	ldr	r0, .L45
	bl	GetVarPointer
	add	r1, r0, #0
	mov	r0, #0xd6
	bl	GetMonSizeRecordInfo
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	0x403d
.Lfe8:
	.size	 GetHeracrossSizeRecordInfo,.Lfe8-GetHeracrossSizeRecordInfo
	.align	2, 0
	.globl	CompareHeracrossSize
	.type	 CompareHeracrossSize,function
	.thumb_func
CompareHeracrossSize:
	push	{r4, lr}
	ldr	r0, .L48
	bl	GetVarPointer
	add	r1, r0, #0
	ldr	r4, .L48+0x4
	mov	r0, #0xd6
	bl	CompareMonSize
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	0x403d
	.word	gSpecialVar_Result
.Lfe9:
	.size	 CompareHeracrossSize,.Lfe9-CompareHeracrossSize
	.align	2, 0
	.globl	InitMagikarpSizeRecord
	.type	 InitMagikarpSizeRecord,function
	.thumb_func
InitMagikarpSizeRecord:
	push	{lr}
	ldr	r0, .L51
	mov	r1, #0x0
	bl	VarSet
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	0x4040
.Lfe10:
	.size	 InitMagikarpSizeRecord,.Lfe10-InitMagikarpSizeRecord
	.align	2, 0
	.globl	GetMagikarpSizeRecordInfo
	.type	 GetMagikarpSizeRecordInfo,function
	.thumb_func
GetMagikarpSizeRecordInfo:
	push	{lr}
	ldr	r0, .L54
	bl	GetVarPointer
	add	r1, r0, #0
	mov	r0, #0x81
	bl	GetMonSizeRecordInfo
	pop	{r0}
	bx	r0
.L55:
	.align	2, 0
.L54:
	.word	0x4040
.Lfe11:
	.size	 GetMagikarpSizeRecordInfo,.Lfe11-GetMagikarpSizeRecordInfo
	.align	2, 0
	.globl	CompareMagikarpSize
	.type	 CompareMagikarpSize,function
	.thumb_func
CompareMagikarpSize:
	push	{r4, lr}
	ldr	r0, .L57
	bl	GetVarPointer
	add	r1, r0, #0
	ldr	r4, .L57+0x4
	mov	r0, #0x81
	bl	CompareMonSize
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	0x4040
	.word	gSpecialVar_Result
.Lfe12:
	.size	 CompareMagikarpSize,.Lfe12-CompareMagikarpSize
	.align	2, 0
	.globl	GiveGiftRibbonToParty
	.type	 GiveGiftRibbonToParty,function
	.thumb_func
GiveGiftRibbonToParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	mov	r7, #0x0
	add	r4, sp, #0x8
	mov	r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L68
	mov	r0, sp
	mov	r2, #0x7
	bl	memcpy
	mov	r8, r4
	cmp	r6, #0xa
	bhi	.L60	@cond_branch
	cmp	r5, #0x40
	bhi	.L60	@cond_branch
	ldr	r0, .L68+0x4
	ldr	r0, [r0]
	ldr	r1, .L68+0x8
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r5, [r0]
	mov	r5, #0x0
.L64:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L68+0xc
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L63	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x6
	bl	GetMonData
	cmp	r0, #0
	bne	.L63	@cond_branch
	mov	r1, sp
	add	r0, r1, r6
	ldrb	r1, [r0]
	add	r0, r4, #0
	mov	r2, r8
	bl	SetMonData
	mov	r7, #0x1
.L63:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L64	@cond_branch
	cmp	r7, #0
	beq	.L60	@cond_branch
	ldr	r0, .L68+0x10
	bl	FlagSet
.L60:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	sGiftRibbonsMonDataIds
	.word	gSaveBlock1Ptr
	.word	0x30b0
	.word	gPlayerParty
	.word	0x83c
.Lfe13:
	.size	 GiveGiftRibbonToParty,.Lfe13-GiveGiftRibbonToParty
.text
	.align	2, 0 @ Don't pad with nop

