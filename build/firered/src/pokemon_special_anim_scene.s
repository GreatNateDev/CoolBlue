@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	1, 0
	.type	 sBg_Pal,object
sBg_Pal:
	.short	0x0
	.short	0x677f
	.short	0x5f7f
	.short	0x5b7f
	.short	0x5b5f
	.short	0x5b3f
	.short	0x533f
	.short	0x4f3f
	.short	0x473f
	.short	0x0
	.short	0x471f
	.short	0x42bf
	.short	0x4f5f
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sBg_Pal,32
	.align	1, 0
	.type	 sBg_TmHm_Pal,object
sBg_TmHm_Pal:
	.short	0x0
	.short	0x7fbb
	.short	0x7fba
	.short	0x7f9a
	.short	0x7f9a
	.short	0x7f99
	.short	0x7f79
	.short	0x7f79
	.short	0x7f78
	.short	0x0
	.short	0x7f77
	.short	0x7f55
	.short	0x7f99
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sBg_TmHm_Pal,32
	.align	2, 0
	.type	 sBg_Gfx,object
sBg_Gfx:
	.word	0x14010
	.word	-0xfffffcd
	.word	0x11019001
	.word	-0x1ffe0fef
	.word	0x12210001
	.word	0x22221111
	.word	0x221e2111
	.word	0x3101222
	.word	0x13200b10
	.word	0x310150
	.word	0x33111113
	.word	0x33311133
	.word	0x1013333c
	.word	0x200b1003
	.word	0x41015013
	.word	0x11110014
	.word	0x41114444
	.word	0x14784444
	.word	0xb100310
	.word	0x1501320
	.word	0x111551
	.word	0x11555511
	.word	0x15555551
	.word	0x100310f0
	.word	0x5013200b
	.word	0x11166101
	.word	0x66660111
	.word	0x66666111
	.word	-0x1ffcefea
	.word	0x13200b10
	.word	0x18810150
	.word	0x3881111
	.word	-0x777eee78
	.word	0x3101888
	.word	0x20c00b10
	.word	-0x5efeefed
	.word	-0x55eeeee6
	.word	-0x5eeefe56
	.word	-0x55e55556
	.word	-0x1ffecf56
	.word	0x13100b10
	.word	-0x4333e4f0
	.word	0xcccccb
	.word	-0x43334445
	.word	-0x44344445
	.word	0x130bb78
	.word	0x13100b10
	.word	0x1b10
	.size	 sBg_Gfx,192
	.align	2, 0
	.type	 sBg_Tilemap,object
sBg_Tilemap:
	.word	0x50010
	.word	0x3000092a
	.word	0x1c00801
	.word	0x4013007
	.word	0x80110a8
	.word	0x400901c0
	.word	0x1
	.word	0x503bf0ff
	.word	-0xfc07fc7
	.word	0x30433045
	.word	0x103bf03f
	.word	0x30065f01
	.word	0x1100401
	.word	0x413043f0
	.word	0x3bb03fb0
	.word	0x130055f
	.word	-0xffeeffc
	.word	-0xfc08fbd
	.word	0x5f3b303d
	.word	0x4013004
	.word	0x43300110
	.word	0x3f7041f0
	.word	0x10af3db0
	.word	0x1300339
	.word	0x30011004
	.word	0x5041f043
	.word	0x3191e93f
	.word	0x3b103f30
	.word	0x4011002
	.word	-0xbbebffe
	.word	0x41303fb0
	.word	0x3d903ff0
	.word	0x4011001
	.word	0x41f0ff01
	.word	0x7df03fc0
	.word	0x3f203d60
	.word	-0x7e0fbed0
	.word	-0xf1bc010
	.word	-0x1fc00fc1
	.word	-0x7ff8f7c1
	.word	0x41080601
	.word	0x3980005
	.word	0x1080208
	.word	0xc400130
	.word	0xc020110
	.word	0xc040c03
	.word	0x60c0504
	.word	0x180070c
	.word	-0xf00f3f8
	.word	-0xfc00fc1
	.word	-0x6fc02fc1
	.word	0x603f5041
	.word	-0x40c2bfbf
	.word	-0xff7c010
	.word	0x41e03f
	.word	-0xfc20fff
	.word	-0x7e0fc1
	.word	0x1004140
	.word	0x7df03d40
	.word	0x41d03fb0
	.word	0x1004330
	.word	-0xfc4bf11
	.word	0x93f503d
	.word	0x41a04050
	.word	0x1004330
	.word	-0xfc4bf39
	.word	0x90c083d
	.word	0x43f03fc0
	.word	-0xf00ff00
	.word	-0x4fc01fc5
	.word	-0x2eb24ebf
	.word	0x703d9031
	.word	-0xfbc0fc1
	.word	0x39f04560
	.word	0x3f503b40
	.size	 sBg_Tilemap,300
	.align	1, 0
	.type	 sLevelUp_Pal,object
sLevelUp_Pal:
	.short	0x0
	.short	0x7fff
	.short	0x7f9c
	.short	0x7f5a
	.short	0x7f18
	.short	0x7ed6
	.short	0x7e94
	.short	0x7e52
	.short	0x7e10
	.short	0x7dce
	.short	0x7d8c
	.short	0x7d4a
	.short	0x7d08
	.short	0x7cc6
	.short	0x7c84
	.short	0x7c42
	.size	 sLevelUp_Pal,32
	.align	2, 0
	.type	 sLevelUp_Gfx,object
sLevelUp_Gfx:
	.word	0x4010
	.word	0x800001
	.word	0x9890000
	.word	-0xf37fc10
	.word	0x903b003
	.word	0x380008
	.word	0x0
	.size	 sLevelUp_Gfx,28
	.align	1, 0
	.type	 sStar_Pal,object
sStar_Pal:
	.short	0x0
	.short	0x56c
	.short	0xef8
	.short	0x3de
	.short	0xa32
	.short	0x13be
	.short	0x35b
	.short	0x31a
	.short	0x296
	.short	0xa6
	.short	0x1255
	.short	0x1a97
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sStar_Pal,32
	.align	2, 0
	.type	 sStar_Gfx,object
sStar_Gfx:
	.word	0x8010
	.word	0x2000002a
	.word	0x3001001
	.word	0x21030020
	.word	0x22030080
	.word	0x32010000
	.word	0x22022221
	.word	0x33350033
	.word	0x11c1033
	.word	0x20300aa
	.word	0x430300
	.word	0x3005303
	.word	0x1420023
	.word	0x52333300
	.word	0x53003306
	.word	0x61000987
	.word	0x60003335
	.word	0x271010
	.word	0x7632002f
	.word	0x73000000
	.word	-0x58ffff46
	.word	0x40100009
	.word	0x33582096
	.word	0x33009a25
	.word	0x910b6
	.word	0x57190033
	.word	0x976
	.word	0x9272b
	.word	0x9a290
	.word	0xa00030
	.word	0x20003
	.size	 sStar_Gfx,124
	.align	1, 0
	.type	 sOutwardSpiralDots_Pal,object
sOutwardSpiralDots_Pal:
	.short	0x7da8
	.short	0x7fff
	.short	0x739c
	.short	0x6b5a
	.short	0x6318
	.short	0x5ad6
	.short	0x5294
	.short	0x4a52
	.short	0x4210
	.short	0x39ce
	.short	0x318c
	.short	0x294a
	.short	0x2108
	.short	0x18c6
	.short	0x1084
	.short	0x842
	.size	 sOutwardSpiralDots_Pal,32
	.align	2, 0
	.type	 sOutwardSpiralDots_Gfx,object
sOutwardSpiralDots_Gfx:
	.word	0x6010
	.word	0x40000020
	.word	0x11001
	.word	0x117f1100
	.word	0xb100330
	.word	0x173001f0
	.word	0x1c01bf0
	.word	0x1fb0
	.size	 sOutwardSpiralDots_Gfx,32
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,8
sBgTemplates:
	.byte	0xf0
	.byte	0x41
	.byte	0x0
	.space	1
	.byte	0xcf
	.byte	0x31
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sWindowTemplates,object
sWindowTemplates:
	.byte	0x0
	.byte	0x1
	.byte	0xf
	.byte	0x1c
	.byte	0x4
	.byte	0xf
	.short	0xa
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates,16
	.align	2, 0
	.type	 s1_2_and_Poof_textPtrs,object
s1_2_and_Poof_textPtrs:
	.word	gText_Counting_1
	.word	gText_Counting_2And
	.word	gText_Poof
	.size	 s1_2_and_Poof_textPtrs,12
	.align	1, 0
	.type	 sUnusedArray,object
sUnusedArray:
	.short	0x0
	.short	0x10
	.short	0x44
	.size	 sUnusedArray,6
	.align	1, 0
	.type	 sAffineScales,object
sAffineScales:
	.short	0x100
	.short	0x155
	.short	0x1aa
	.short	0x200
	.size	 sAffineScales,8
	.type	 sStarCoordOffsets,object
sStarCoordOffsets:
	.byte	-0x8
	.byte	-0x8
	.byte	0x6
	.byte	-0xd
	.byte	0x8
	.byte	-0x8
	.size	 sStarCoordOffsets,6
	.align	2, 0
	.type	 sSpriteSheet_Star,object
	.size	 sSpriteSheet_Star,8
sSpriteSheet_Star:
	.word	sStar_Gfx
	.short	0x80
	.short	0x2
	.align	2, 0
	.type	 sSpritePalette_Star,object
	.size	 sSpritePalette_Star,8
sSpritePalette_Star:
	.word	sStar_Pal
	.short	0x2
	.space	2
	.align	2, 0
	.type	 sSpriteSheet_UseItem_OutwardSpiralDots,object
	.size	 sSpriteSheet_UseItem_OutwardSpiralDots,8
sSpriteSheet_UseItem_OutwardSpiralDots:
	.word	sOutwardSpiralDots_Gfx
	.short	0x60
	.short	0x5
	.align	2, 0
	.type	 sSpritePalette_UseItem_OutwardSpiralDots,object
	.size	 sSpritePalette_UseItem_OutwardSpiralDots,8
sSpritePalette_UseItem_OutwardSpiralDots:
	.word	sOutwardSpiralDots_Pal
	.short	0x5
	.space	2
	.align	2, 0
	.type	 sOamData_MonSprite,object
	.size	 sOamData_MonSprite,8
sOamData_MonSprite:
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sAffineAnim_Zoom_0,object
sAffineAnim_Zoom_0:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Zoom_0,16
	.align	2, 0
	.type	 sAffineAnim_Zoom_1,object
sAffineAnim_Zoom_1:
	.short	0x155
	.short	0x155
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Zoom_1,16
	.align	2, 0
	.type	 sAffineAnim_Zoom_2,object
sAffineAnim_Zoom_2:
	.short	0x1aa
	.short	0x1aa
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Zoom_2,16
	.align	2, 0
	.type	 sAffineAnim_Zoom_3,object
sAffineAnim_Zoom_3:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Zoom_3,16
	.align	2, 0
	.type	 sAffineAnimTable_Zoom,object
sAffineAnimTable_Zoom:
	.word	sAffineAnim_Zoom_0
	.word	sAffineAnim_Zoom_1
	.word	sAffineAnim_Zoom_2
	.word	sAffineAnim_Zoom_3
	.size	 sAffineAnimTable_Zoom,16
	.align	2, 0
	.type	 sSpriteTemplate_MonSprite,object
	.size	 sSpriteTemplate_MonSprite,24
sSpriteTemplate_MonSprite:
	.short	0x0
	.short	0x0
	.word	sOamData_MonSprite
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnimTable_Zoom
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sAffineAnim_ItemZoom_0,object
sAffineAnim_ItemZoom_0:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x1c
	.short	-0x1c
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemZoom_0,24
	.align	2, 0
	.type	 sAffineAnim_ItemZoom_1,object
sAffineAnim_ItemZoom_1:
	.short	0x155
	.short	0x155
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x25
	.short	-0x25
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemZoom_1,24
	.align	2, 0
	.type	 sAffineAnim_ItemZoom_2,object
sAffineAnim_ItemZoom_2:
	.short	0x1aa
	.short	0x1aa
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x2f
	.short	-0x2f
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemZoom_2,24
	.align	2, 0
	.type	 sAffineAnim_ItemZoom_3,object
sAffineAnim_ItemZoom_3:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x38
	.short	-0x38
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemZoom_3,24
	.align	2, 0
	.type	 sAffineAnimTable_ItemZoom,object
sAffineAnimTable_ItemZoom:
	.word	sAffineAnim_ItemZoom_0
	.word	sAffineAnim_ItemZoom_1
	.word	sAffineAnim_ItemZoom_2
	.word	sAffineAnim_ItemZoom_3
	.size	 sAffineAnimTable_ItemZoom,16
	.align	2, 0
	.type	 sOamData_LevelUpVertical,object
	.size	 sOamData_LevelUpVertical,8
sOamData_LevelUpVertical:
	.byte	0x0
	.byte	0x84
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sAnim_LevelUpVertical,object
sAnim_LevelUpVertical:
	.short	0x0
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_LevelUpVertical,8
	.align	2, 0
	.type	 sAnimTable_LevelUpVertical,object
sAnimTable_LevelUpVertical:
	.word	sAnim_LevelUpVertical
	.size	 sAnimTable_LevelUpVertical,4
	.align	2, 0
	.type	 sSpriteTemplate_LevelUpVertical,object
	.size	 sSpriteTemplate_LevelUpVertical,24
sSpriteTemplate_LevelUpVertical:
	.short	0x0
	.short	0x0
	.word	sOamData_LevelUpVertical
	.word	sAnimTable_LevelUpVertical
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_LevelUpVertical
	.align	2, 0
	.type	 sOamData_Star,object
	.size	 sOamData_Star,8
sOamData_Star:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sSpriteTemplate_Star,object
	.size	 sSpriteTemplate_Star,24
sSpriteTemplate_Star:
	.short	0x2
	.short	0x2
	.word	sOamData_Star
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_Star
	.align	2, 0
	.type	 sOamData_UseItem_OutwardSpiralDots,object
	.size	 sOamData_UseItem_OutwardSpiralDots,8
sOamData_UseItem_OutwardSpiralDots:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	2
	.align	2, 0
	.type	 sAnim_UseItem_OutwardSpiralDots_0,object
sAnim_UseItem_OutwardSpiralDots_0:
	.short	0x0
	.byte	0x10
	.space	1
	.short	0x1
	.byte	0x8
	.space	1
	.short	0x2
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_UseItem_OutwardSpiralDots_0,16
	.align	2, 0
	.type	 sAnim_UseItem_OutwardSpiralDots_1,object
sAnim_UseItem_OutwardSpiralDots_1:
	.short	0x1
	.byte	0x4
	.space	1
	.short	0x0
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_UseItem_OutwardSpiralDots_1,12
	.align	2, 0
	.type	 sAnimTable_UseItem_OutwardSpiralDots,object
sAnimTable_UseItem_OutwardSpiralDots:
	.word	sAnim_UseItem_OutwardSpiralDots_0
	.word	sAnim_UseItem_OutwardSpiralDots_1
	.size	 sAnimTable_UseItem_OutwardSpiralDots,8
	.align	2, 0
	.type	 sSpriteTemplate_UseItem_OutwardSpiralDots,object
	.size	 sSpriteTemplate_UseItem_OutwardSpiralDots,24
sSpriteTemplate_UseItem_OutwardSpiralDots:
	.short	0x5
	.short	0x5
	.word	sOamData_UseItem_OutwardSpiralDots
	.word	sAnimTable_UseItem_OutwardSpiralDots
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallback_UseItem_OutwardSpiralDots
.text
	.align	2, 0
	.globl	InitPokemonSpecialAnimScene
	.type	 InitPokemonSpecialAnimScene,function
	.thumb_func
InitPokemonSpecialAnimScene:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r5, r1, #0x10
	lsr	r5, r5, #0x10
	bl	FreeAllWindowBuffers
	bl	ResetTempTileDataBuffers
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L5
	mov	r0, #0x0
	mov	r2, #0x2
	bl	InitBgsFromTemplates
	ldr	r0, .L5+0x4
	bl	InitWindows
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r0, .L5+0x8
	add	r1, r4, r0
	mov	r0, #0x0
	bl	SetBgTilemapBuffer
	ldr	r0, .L5+0xc
	add	r4, r4, r0
	mov	r0, #0x3
	add	r1, r4, #0
	bl	SetBgTilemapBuffer
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	mov	r0, #0x0
	mov	r2, #0x20
	mov	r3, #0x1
	bl	RequestDma3Fill
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	add	r0, r5, #0
	bl	LoadBgGfxByAnimType
	mov	r0, #0x0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xe0
	bl	LoadUserWindowGfx
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r0, #0x1
	bl	HideBg
	mov	r0, #0x2
	bl	HideBg
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuRegBits
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	sBgTemplates
	.word	sWindowTemplates
	.word	0x914
	.word	0x1914
.Lfe1:
	.size	 InitPokemonSpecialAnimScene,.Lfe1-InitPokemonSpecialAnimScene
	.align	2, 0
	.globl	PokemonSpecialAnimSceneInitIsNotFinished
	.type	 PokemonSpecialAnimSceneInitIsNotFinished,function
	.thumb_func
PokemonSpecialAnimSceneInitIsNotFinished:
	push	{lr}
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L8	@cond_branch
	mov	r0, #0x1
	b	.L10
.L8:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L10:
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 PokemonSpecialAnimSceneInitIsNotFinished,.Lfe2-PokemonSpecialAnimSceneInitIsNotFinished
	.align	2, 0
	.globl	PSA_FreeWindowBuffers
	.type	 PSA_FreeWindowBuffers,function
	.thumb_func
PSA_FreeWindowBuffers:
	push	{lr}
	bl	FreeAllWindowBuffers
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 PSA_FreeWindowBuffers,.Lfe3-PSA_FreeWindowBuffers
	.align	2, 0
	.globl	PSA_ShowMessageWindow
	.type	 PSA_ShowMessageWindow,function
	.thumb_func
PSA_ShowMessageWindow:
	push	{lr}
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0xe
	bl	DrawTextBorderOuter
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 PSA_ShowMessageWindow,.Lfe4-PSA_ShowMessageWindow
	.align	2, 0
	.globl	PSA_HideMessageWindow
	.type	 PSA_HideMessageWindow,function
	.thumb_func
PSA_HideMessageWindow:
	push	{lr}
	mov	r0, #0x0
	bl	ClearWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x0
	mov	r1, #0x1
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 PSA_HideMessageWindow,.Lfe5-PSA_HideMessageWindow
	.align	2, 0
	.globl	PSA_PrintMessage
	.type	 PSA_PrintMessage,function
	.thumb_func
PSA_PrintMessage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	PSA_GetSceneWork
	add	r4, r0, #0
	bl	PSA_GetItemId
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r0, #0x0
	mov	r8, r0
	bl	GetTextSpeedSetting
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	bl	PSA_GetPokemon
	add	r6, r0, #0
	cmp	r5, #0x9
	bls	.LCB217
	b	.L14	@long jump
.LCB217:
	lsl	r0, r5, #0x2
	ldr	r1, .L33
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L34:
	.align	2, 0
.L33:
	.word	.L30
	.align	2, 0
	.align	2, 0
.L30:
	.word	.L16
	.word	.L17
	.word	.L24
	.word	.L23
	.word	.L22
	.word	.L25
	.word	.L26
	.word	.L27
	.word	.L28
	.word	.L21
.L16:
	add	r4, r4, #0x14
	add	r0, r7, #0
	bl	ItemId_GetName
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	add	r2, r0, #0
	ldr	r1, .L35
	bl	StringCopy
	add	r2, r0, #0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetMonData
	ldr	r1, .L35+0x4
	add	r0, r4, #0
	bl	StringAppend
	b	.L15
.L36:
	.align	2, 0
.L35:
	.word	gText_WasUsedOn
	.word	gText_Period
.L17:
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r4, #0x14
	add	r0, r6, #0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	GetMonData
	ldr	r1, .L37
	add	r0, r4, #0
	bl	StringAppend
	add	r2, r0, #0
	cmp	r5, #0x63
	bhi	.L18	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L18:
	mov	r3, #0x3
	cmp	r5, #0x63
	bhi	.L19	@cond_branch
	mov	r3, #0x2
.L19:
	add	r0, r2, #0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	ConvertIntToDecimalStringN
	add	r2, r0, #0
	ldr	r1, .L37+0x4
	bl	StringAppend
	b	.L15
.L38:
	.align	2, 0
.L37:
	.word	gText_LevelRoseTo
	.word	gText_Period2
.L21:
	bl	DynamicPlaceholderTextUtil_Reset
	bl	PSA_GetMonNickname
	add	r1, r0, #0
	mov	r0, #0x0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	bl	PSA_GetNameOfMoveToTeach
	add	r1, r0, #0
	mov	r0, #0x1
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	add	r4, r4, #0x14
	ldr	r1, .L39
	b	.L31
.L40:
	.align	2, 0
.L39:
	.word	gText_MonLearnedTMHM
.L22:
	ldr	r1, .L41
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x2
	bl	GetStringWidth
	add	r0, r0, r8
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
.L23:
	ldr	r1, .L41+0x4
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x2
	bl	GetStringWidth
	add	r0, r0, r8
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
.L24:
	add	r4, r4, #0x14
	ldr	r1, .L41+0x8
	sub	r0, r5, #0x2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringCopy
	mov	r1, #0x1
	mov	r9, r1
	b	.L15
.L42:
	.align	2, 0
.L41:
	.word	gText_Counting_2And
	.word	gText_Counting_1
	.word	s1_2_and_Poof_textPtrs
.L25:
	bl	DynamicPlaceholderTextUtil_Reset
	bl	PSA_GetMonNickname
	add	r1, r0, #0
	mov	r0, #0x0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	bl	PSA_GetNameOfMoveForgotten
	add	r1, r0, #0
	mov	r0, #0x1
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	add	r4, r4, #0x14
	ldr	r1, .L43
.L31:
	add	r0, r4, #0
	bl	DynamicPlaceholderTextUtil_ExpandPlaceholders
	b	.L15
.L44:
	.align	2, 0
.L43:
	.word	gText_MonForgotMove
.L26:
	add	r4, r4, #0x14
	ldr	r1, .L45
	b	.L32
.L46:
	.align	2, 0
.L45:
	.word	gText_And
.L27:
	add	r4, r4, #0x14
	ldr	r1, .L47
.L32:
	add	r0, r4, #0
	bl	StringCopy
	b	.L15
.L48:
	.align	2, 0
.L47:
	.word	gText_MachineSet
.L28:
	add	r4, r4, #0x14
	ldr	r1, .L49
	add	r0, r4, #0
	bl	StringCopy
.L15:
	mov	r0, r8
	lsl	r3, r0, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	mov	r0, #0x4
	str	r0, [sp, #0x10]
	mov	r0, #0x0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	AddTextPrinterParameterized5
.L14:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gText_Huh
.Lfe6:
	.size	 PSA_PrintMessage,.Lfe6-PSA_PrintMessage
	.align	2, 0
	.globl	PSA_AfterPoof_ClearMessageWindow
	.type	 PSA_AfterPoof_ClearMessageWindow,function
	.thumb_func
PSA_AfterPoof_ClearMessageWindow:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 PSA_AfterPoof_ClearMessageWindow,.Lfe7-PSA_AfterPoof_ClearMessageWindow
	.align	2, 0
	.globl	PSA_IsMessagePrintTaskActive
	.type	 PSA_IsMessagePrintTaskActive,function
	.thumb_func
PSA_IsMessagePrintTaskActive:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 PSA_IsMessagePrintTaskActive,.Lfe8-PSA_IsMessagePrintTaskActive
	.align	2, 0
	.globl	PSA_DarkenMonSprite
	.type	 PSA_DarkenMonSprite,function
	.thumb_func
PSA_DarkenMonSprite:
	push	{r4, lr}
	bl	PSA_GetSceneWork
	add	r4, r0, #0
	mov	r0, #0x0
	strh	r0, [r4]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	add	r0, r1, #0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	add	r0, r4, #0
	bl	CreateStarSprites
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 PSA_DarkenMonSprite,.Lfe9-PSA_DarkenMonSprite
	.align	2, 0
	.globl	PSA_RunPoofAnim
	.type	 PSA_RunPoofAnim,function
	.thumb_func
PSA_RunPoofAnim:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	bl	PSA_GetSceneWork
	add	r4, r0, #0
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L56	@cond_branch
	cmp	r0, #0x1
	beq	.L58	@cond_branch
	b	.L55
.L56:
	bl	AnyStarSpritesActive
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L55	@cond_branch
	mov	r0, #0x0
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	lsl	r2, r2, r0
	mov	r0, #0x4
	orr	r2, r2, r0
	mov	r1, #0x1
	neg	r1, r1
	str	r5, [sp]
	add	r0, r2, #0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L55
.L58:
	ldr	r0, .L63
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L55	@cond_branch
	mov	r0, #0x0
	b	.L62
.L64:
	.align	2, 0
.L63:
	.word	gPaletteFade
.L55:
	mov	r0, #0x1
.L62:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 PSA_RunPoofAnim,.Lfe10-PSA_RunPoofAnim
	.align	2, 0
	.globl	PSA_UseTM_SetUpZoomOutAnim
	.type	 PSA_UseTM_SetUpZoomOutAnim,function
	.thumb_func
PSA_UseTM_SetUpZoomOutAnim:
	push	{lr}
	bl	PSA_GetSceneWork
	mov	r1, #0x0
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 PSA_UseTM_SetUpZoomOutAnim,.Lfe11-PSA_UseTM_SetUpZoomOutAnim
	.align	2, 0
	.globl	PSA_UseTM_CleanUpForCancel
	.type	 PSA_UseTM_CleanUpForCancel,function
	.thumb_func
PSA_UseTM_CleanUpForCancel:
	push	{lr}
	bl	StopMakingOutwardSpiralDots
	bl	ResetPaletteFadeControl
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 PSA_UseTM_CleanUpForCancel,.Lfe12-PSA_UseTM_CleanUpForCancel
	.align	2, 0
	.globl	PSA_UseTM_RunZoomOutAnim
	.type	 PSA_UseTM_RunZoomOutAnim,function
	.thumb_func
PSA_UseTM_RunZoomOutAnim:
	push	{r4, lr}
	add	sp, sp, #-0x4
	bl	PSA_GetSceneWork
	add	r4, r0, #0
	ldrh	r0, [r4]
	cmp	r0, #0x8
	bls	.LCB663
	b	.L84	@long jump
.LCB663:
	lsl	r0, r0, #0x2
	ldr	r1, .L88
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L89:
	.align	2, 0
.L88:
	.word	.L85
	.align	2, 0
	.align	2, 0
.L85:
	.word	.L69
	.word	.L70
	.word	.L72
	.word	.L74
	.word	.L75
	.word	.L77
	.word	.L79
	.word	.L81
	.word	.L83
.L69:
	mov	r0, #0x0
	bl	StartZoomOutAnimForUseTM
	b	.L87
.L70:
	bl	PSA_IsZoomTaskActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L68	@cond_branch
	strh	r0, [r4, #0x4]
	b	.L87
.L72:
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x14
	bls	.L68	@cond_branch
	b	.L87
.L74:
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x1
	bl	StartMonWiggleAnim
	mov	r0, #0x0
	strh	r0, [r4, #0x4]
	b	.L87
.L75:
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x4]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L68	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x4]
	mov	r0, #0x85
	bl	PlaySE
	ldr	r0, .L90
	str	r0, [sp]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0xc
	bl	BeginNormalPaletteFade
	add	r0, r4, #0
	bl	PSAScene_SeedRandomInTask
	b	.L87
.L91:
	.align	2, 0
.L90:
	.word	0x7da8
.L77:
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x46
	bls	.L68	@cond_branch
	add	r0, r4, #0
	bl	StopMonWiggleAnim
	ldr	r0, .L92
	str	r0, [sp]
	mov	r0, #0x1
	mov	r1, #0x6
	mov	r2, #0xc
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	strh	r0, [r4, #0x4]
	b	.L87
.L93:
	.align	2, 0
.L92:
	.word	0x7da8
.L79:
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x4]
	bl	IsOutwardSpiralDotsTaskRunning
	add	r1, r0, #0
	cmp	r1, #0
	bne	.L68	@cond_branch
	ldrh	r0, [r4, #0x4]
	cmp	r0, #0x28
	bls	.L68	@cond_branch
	strh	r1, [r4, #0x4]
	b	.L87
.L81:
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x14
	bls	.L68	@cond_branch
	b	.L87
.L83:
	mov	r0, #0x54
	bl	PlaySE
	ldr	r0, [r4, #0x10]
	bl	DestroySprite
.L87:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L68
.L84:
	mov	r0, #0x0
	b	.L86
.L68:
	mov	r0, #0x1
.L86:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 PSA_UseTM_RunZoomOutAnim,.Lfe13-PSA_UseTM_RunZoomOutAnim
	.align	2, 0
	.globl	PSA_UseTM_SetUpMachineSetWobble
	.type	 PSA_UseTM_SetUpMachineSetWobble,function
	.thumb_func
PSA_UseTM_SetUpMachineSetWobble:
	push	{lr}
	bl	PSA_GetSceneWork
	mov	r1, #0x0
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 PSA_UseTM_SetUpMachineSetWobble,.Lfe14-PSA_UseTM_SetUpMachineSetWobble
	.align	2, 0
	.globl	PSA_UseTM_RunMachineSetWobble
	.type	 PSA_UseTM_RunMachineSetWobble,function
	.thumb_func
PSA_UseTM_RunMachineSetWobble:
	push	{r4, lr}
	bl	PSA_GetSceneWork
	add	r4, r0, #0
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L97	@cond_branch
	cmp	r0, #0x1
	beq	.L98	@cond_branch
	b	.L96
.L97:
	bl	MachineSetWobbleInit
	mov	r0, #0x1d
	bl	PlaySE
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L96
.L98:
	bl	MachineSetWobbleCBIsRunning
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L101
.L96:
	mov	r0, #0x1
.L101:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 PSA_UseTM_RunMachineSetWobble,.Lfe15-PSA_UseTM_RunMachineSetWobble
	.align	2, 0
	.globl	PSA_CreateLevelUpVerticalSpritesTask
	.type	 PSA_CreateLevelUpVerticalSpritesTask,function
	.thumb_func
PSA_CreateLevelUpVerticalSpritesTask:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r0, #0x78
	mov	r1, #0x38
	mov	r2, #0x4
	mov	r3, #0x4
	bl	CreateLevelUpVerticalSpritesTask
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 PSA_CreateLevelUpVerticalSpritesTask,.Lfe16-PSA_CreateLevelUpVerticalSpritesTask
	.align	2, 0
	.globl	PSA_LevelUpVerticalSpritesTaskIsRunning
	.type	 PSA_LevelUpVerticalSpritesTaskIsRunning,function
	.thumb_func
PSA_LevelUpVerticalSpritesTaskIsRunning:
	push	{lr}
	bl	LevelUpVerticalSpritesTaskIsRunning
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 PSA_LevelUpVerticalSpritesTaskIsRunning,.Lfe17-PSA_LevelUpVerticalSpritesTaskIsRunning
	.align	2, 0
	.globl	PSA_DrawLevelUpWindowPg1
	.type	 PSA_DrawLevelUpWindowPg1,function
	.thumb_func
PSA_DrawLevelUpWindowPg1:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0xe
	bl	DrawTextBorderOuter
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x3
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x1
	bl	DrawLevelUpWindowPg1
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 PSA_DrawLevelUpWindowPg1,.Lfe18-PSA_DrawLevelUpWindowPg1
	.align	2, 0
	.globl	PSA_DrawLevelUpWindowPg2
	.type	 PSA_DrawLevelUpWindowPg2,function
	.thumb_func
PSA_DrawLevelUpWindowPg2:
	push	{lr}
	add	sp, sp, #-0x4
	add	r1, r0, #0
	mov	r0, #0x3
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x1
	mov	r3, #0x2
	bl	DrawLevelUpWindowPg2
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 PSA_DrawLevelUpWindowPg2,.Lfe19-PSA_DrawLevelUpWindowPg2
	.align	2, 0
	.globl	PSA_IsCopyingLevelUpWindowToVram
	.type	 PSA_IsCopyingLevelUpWindowToVram,function
	.thumb_func
PSA_IsCopyingLevelUpWindowToVram:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 PSA_IsCopyingLevelUpWindowToVram,.Lfe20-PSA_IsCopyingLevelUpWindowToVram
	.align	2, 0
	.type	 LoadBgGfxByAnimType,function
	.thumb_func
LoadBgGfxByAnimType:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r1, .L110
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r1, .L110+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	cmp	r4, #0x4
	beq	.L108	@cond_branch
	ldr	r0, .L110+0x8
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	b	.L109
.L111:
	.align	2, 0
.L110:
	.word	sBg_Tilemap
	.word	sBg_Gfx
	.word	sBg_Pal
.L108:
	ldr	r0, .L112
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
.L109:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	sBg_TmHm_Pal
.Lfe21:
	.size	 LoadBgGfxByAnimType,.Lfe21-LoadBgGfxByAnimType
	.align	2, 0
	.globl	PSA_CreateMonSpriteAtCloseness
	.type	 PSA_CreateMonSpriteAtCloseness,function
	.thumb_func
PSA_CreateMonSpriteAtCloseness:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	bl	PSA_GetSceneWork
	add	r5, r0, #0
	bl	PSA_GetPokemon
	mov	r8, r0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r0, r8
	mov	r1, #0x0
	bl	GetMonData
	mov	sl, r0
	add	r0, r7, #0
	mov	r1, sl
	mov	r2, #0x2
	bl	Menu2_GetMonSpriteAnchorCoord
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L115	@cond_branch
	mov	r0, #0x48
	strh	r0, [r5, #0x6]
	add	r0, r1, #0
	add	r0, r0, #0x30
	b	.L123
.L115:
	mov	r0, #0x48
	strh	r0, [r5, #0x6]
	mov	r0, #0x60
.L123:
	strh	r0, [r5, #0x8]
	mov	r4, #0x80
	lsl	r4, r4, #0x6
	add	r0, r4, #0
	bl	Alloc
	add	r6, r0, #0
	add	r0, r4, #0
	bl	Alloc
	mov	r9, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	bl	Alloc
	add	r4, r0, #0
	cmp	r6, #0
	beq	.L120	@cond_branch
	mov	r0, r9
	cmp	r0, #0
	beq	.L117	@cond_branch
	cmp	r4, #0
	beq	.L117	@cond_branch
	lsl	r0, r7, #0x3
	ldr	r1, .L124
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r7, #0
	mov	r3, sl
	bl	HandleLoadSpecialPokePic
	mov	r0, r8
	bl	GetMonFrontSpritePal
	add	r1, r4, #0
	bl	LZ77UnCompWram
	add	r0, r6, #0
	add	r1, r4, #0
	bl	LoadMonSpriteGraphics
	ldr	r0, .L124+0x4
	mov	r1, #0x6
	ldrsh	r2, [r5, r1]
	mov	r1, #0x78
	mov	r3, #0x4
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x40
	beq	.L118	@cond_branch
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L124+0x8
	add	r0, r0, r1
	str	r0, [r5, #0xc]
	ldr	r1, [sp]
	bl	MonSpriteZoom_UpdateYPos
	b	.L119
.L125:
	.align	2, 0
.L124:
	.word	gMonFrontPicTable
	.word	sSpriteTemplate_MonSprite
	.word	gSprites
.L118:
	mov	r0, #0x0
	str	r0, [r5, #0xc]
.L119:
	mov	r0, sp
	ldrb	r0, [r0]
	strb	r0, [r5, #0xa]
.L117:
	cmp	r6, #0
	beq	.L120	@cond_branch
	add	r0, r6, #0
	bl	Free
.L120:
	mov	r1, r9
	cmp	r1, #0
	beq	.L121	@cond_branch
	mov	r0, r9
	bl	Free
.L121:
	cmp	r4, #0
	beq	.L122	@cond_branch
	add	r0, r4, #0
	bl	Free
.L122:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 PSA_CreateMonSpriteAtCloseness,.Lfe22-PSA_CreateMonSpriteAtCloseness
	.align	2, 0
	.globl	PSA_SetUpZoomAnim
	.type	 PSA_SetUpZoomAnim,function
	.thumb_func
PSA_SetUpZoomAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	PSA_GetSceneWork
	add	r5, r0, #0
	ldrb	r0, [r5, #0xa]
	cmp	r6, r0
	beq	.L127	@cond_branch
	ldr	r0, .L131
	mov	r1, #0x4
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r2, [r5, #0xc]
	add	r0, r4, #0
	mov	r1, #0x6
	bl	SetWordTaskArg
	ldr	r1, .L131+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrb	r0, [r5, #0xa]
	strh	r0, [r1, #0xa]
	strh	r6, [r1, #0xc]
	mov	r0, #0x6
	strh	r0, [r1, #0x12]
	ldrb	r5, [r5, #0xa]
	cmp	r6, r5
	bls	.L128	@cond_branch
	mov	r0, #0x1
	b	.L130
.L132:
	.align	2, 0
.L131:
	.word	Task_ZoomAnim
	.word	gTasks
.L128:
	ldr	r0, .L133
.L130:
	strh	r0, [r1, #0xe]
.L127:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L134:
	.align	2, 0
.L133:
	.word	0xffff
.Lfe23:
	.size	 PSA_SetUpZoomAnim,.Lfe23-PSA_SetUpZoomAnim
	.align	2, 0
	.globl	PSA_IsZoomTaskActive
	.type	 PSA_IsZoomTaskActive,function
	.thumb_func
PSA_IsZoomTaskActive:
	push	{lr}
	ldr	r0, .L136
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L137:
	.align	2, 0
.L136:
	.word	Task_ZoomAnim
.Lfe24:
	.size	 PSA_IsZoomTaskActive,.Lfe24-PSA_IsZoomTaskActive
	.align	2, 0
	.type	 Task_ZoomAnim,function
	.thumb_func
Task_ZoomAnim:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r8, r6
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L153
	add	r4, r0, r1
	add	r0, r6, #0
	mov	r1, #0x6
	bl	GetWordTaskArg
	add	r5, r0, #0
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L142	@cond_branch
	cmp	r0, #0x1
	bgt	.L151	@cond_branch
	cmp	r0, #0
	beq	.L140	@cond_branch
	b	.L139
.L154:
	.align	2, 0
.L153:
	.word	gTasks+0x8
.L151:
	cmp	r0, #0x2
	beq	.L147	@cond_branch
	b	.L139
.L140:
	ldrb	r1, [r4, #0x2]
	add	r0, r5, #0
	bl	SetSpriteWithCloseness
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L141	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x9
	bl	GetWordTaskArg
	ldrb	r1, [r4, #0x2]
	bl	SetSpriteWithCloseness
.L141:
	ldrh	r0, [r4, #0x6]
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0x2]
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	b	.L152
.L142:
	add	r0, r5, #0
	bl	IsZoomSpriteCBActive
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L139	@cond_branch
	mov	r0, #0x6d
	bl	PlaySE
	ldrb	r1, [r4, #0x2]
	add	r0, r5, #0
	bl	MonSpriteZoom_UpdateYPos
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x9
	bl	GetWordTaskArg
	ldrb	r1, [r4, #0x2]
	bl	ItemSpriteZoom_UpdateYPos
.L144:
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L145	@cond_branch
	bl	PSA_GetSceneWork
	ldrh	r1, [r4, #0x4]
	strb	r1, [r0, #0xa]
	mov	r0, r8
	bl	DestroyTask
	b	.L139
.L145:
	strh	r7, [r4, #0x8]
	mov	r0, #0x2
	b	.L152
.L147:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	ble	.L139	@cond_branch
	mov	r0, #0x0
.L152:
	strh	r0, [r4]
.L139:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 Task_ZoomAnim,.Lfe25-Task_ZoomAnim
	.align	2, 0
	.type	 SetSpriteWithCloseness,function
	.thumb_func
SetSpriteWithCloseness:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	strh	r2, [r0, #0x2e]
	strh	r2, [r0, #0x30]
	strh	r1, [r0, #0x32]
	bx	lr
.Lfe26:
	.size	 SetSpriteWithCloseness,.Lfe26-SetSpriteWithCloseness
	.align	2, 0
	.type	 IsZoomSpriteCBActive,function
	.thumb_func
IsZoomSpriteCBActive:
	ldr	r1, [r0, #0x1c]
	ldr	r0, .L158
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	bx	lr
.L159:
	.align	2, 0
.L158:
	.word	SpriteCallbackDummy
.Lfe27:
	.size	 IsZoomSpriteCBActive,.Lfe27-IsZoomSpriteCBActive
	.align	2, 0
	.type	 GetSpriteOffsetByScale,function
	.thumb_func
GetSpriteOffsetByScale:
	lsl	r1, r1, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r2, .L161
	lsr	r1, r1, #0x17
	add	r1, r1, r2
	ldrh	r1, [r1]
	mul	r0, r0, r1
	lsl	r0, r0, #0x8
	asr	r0, r0, #0x10
	bx	lr
.L162:
	.align	2, 0
.L161:
	.word	sAffineScales
.Lfe28:
	.size	 GetSpriteOffsetByScale,.Lfe28-GetSpriteOffsetByScale
	.align	2, 0
	.type	 GetYPosByScale,function
	.thumb_func
GetYPosByScale:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	PSA_GetSceneWork
	ldrh	r1, [r0, #0x8]
	ldrh	r2, [r0, #0x6]
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x8
	cmp	r1, #0
	bge	.L164	@cond_branch
	add	r1, r1, #0xff
.L164:
	asr	r1, r1, #0x8
	ldr	r3, .L165
	add	r0, r4, r3
	mul	r0, r0, r1
	lsl	r0, r0, #0x8
	asr	r0, r0, #0x10
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.L166:
	.align	2, 0
.L165:
	.word	-0x100
.Lfe29:
	.size	 GetYPosByScale,.Lfe29-GetYPosByScale
	.align	2, 0
	.type	 MonSpriteZoom_UpdateYPos,function
	.thumb_func
MonSpriteZoom_UpdateYPos:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	cmp	r4, #0x3
	bls	.L168	@cond_branch
	mov	r4, #0x3
.L168:
	bl	PSA_GetSceneWork
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StartSpriteAffineAnim
	ldr	r1, .L169
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	GetYPosByScale
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L170:
	.align	2, 0
.L169:
	.word	sAffineScales
.Lfe30:
	.size	 MonSpriteZoom_UpdateYPos,.Lfe30-MonSpriteZoom_UpdateYPos
	.align	2, 0
	.type	 ItemSpriteZoom_UpdateYPos,function
	.thumb_func
ItemSpriteZoom_UpdateYPos:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	add	r1, r4, #0
	bl	MonSpriteZoom_UpdateYPos
	ldrh	r0, [r5, #0x3a]
	sub	r0, r0, #0x20
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r1, r4, #0
	bl	GetSpriteOffsetByScale
	strh	r0, [r5, #0x24]
	ldrh	r0, [r5, #0x3c]
	sub	r0, r0, #0x20
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r1, r4, #0
	bl	GetSpriteOffsetByScale
	strh	r0, [r5, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 ItemSpriteZoom_UpdateYPos,.Lfe31-ItemSpriteZoom_UpdateYPos
	.align	2, 0
	.type	 StartMonWiggleAnim,function
	.thumb_func
StartMonWiggleAnim:
	push	{r4, lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r4, [r0, #0xc]
	strh	r1, [r4, #0x2e]
	ldr	r1, [r0, #0xc]
	strh	r2, [r1, #0x30]
	ldr	r1, [r0, #0xc]
	strh	r3, [r1, #0x32]
	ldr	r1, [r0, #0xc]
	ldr	r0, .L173
	str	r0, [r1, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L174:
	.align	2, 0
.L173:
	.word	SpriteCallback_MonSpriteWiggle
.Lfe32:
	.size	 StartMonWiggleAnim,.Lfe32-StartMonWiggleAnim
	.align	2, 0
	.type	 StopMonWiggleAnim,function
	.thumb_func
StopMonWiggleAnim:
	ldr	r2, [r0, #0xc]
	mov	r1, #0x0
	strh	r1, [r2, #0x24]
	ldr	r1, [r0, #0xc]
	ldr	r0, .L176
	str	r0, [r1, #0x1c]
	bx	lr
.L177:
	.align	2, 0
.L176:
	.word	SpriteCallbackDummy
.Lfe33:
	.size	 StopMonWiggleAnim,.Lfe33-StopMonWiggleAnim
	.align	2, 0
	.type	 SpriteCallback_MonSpriteWiggle,function
	.thumb_func
SpriteCallback_MonSpriteWiggle:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x3c]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r2, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r4, #0x2e
	ldrsh	r1, [r2, r4]
	cmp	r0, r1
	ble	.L179	@cond_branch
	strh	r3, [r2, #0x3c]
	ldrh	r0, [r2, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x3a]
	mov	r4, #0x30
	ldrsh	r1, [r2, r4]
	cmp	r1, #0
	beq	.L180	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r1
	blt	.L180	@cond_branch
	strh	r3, [r2, #0x24]
	ldr	r0, .L185
	str	r0, [r2, #0x1c]
	b	.L179
.L186:
	.align	2, 0
.L185:
	.word	SpriteCallbackDummy
.L180:
	ldrh	r1, [r2, #0x3a]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L182	@cond_branch
	ldrh	r0, [r2, #0x32]
	b	.L184
.L182:
	ldrh	r0, [r2, #0x32]
	neg	r0, r0
.L184:
	strh	r0, [r2, #0x24]
.L179:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 SpriteCallback_MonSpriteWiggle,.Lfe34-SpriteCallback_MonSpriteWiggle
	.align	2, 0
	.type	 LoadMonSpriteGraphics,function
	.thumb_func
LoadMonSpriteGraphics:
	push	{r4, lr}
	add	sp, sp, #-0x10
	str	r0, [sp]
	ldr	r3, .L188
	ldr	r0, [sp, #0x4]
	and	r0, r0, r3
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	orr	r0, r0, r2
	ldr	r2, .L188+0x4
	and	r0, r0, r2
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	add	r4, sp, #0x8
	ldr	r0, [r4, #0x4]
	and	r0, r0, r3
	str	r0, [r4, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	add	r0, r4, #0
	bl	LoadSpritePalette
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L189:
	.align	2, 0
.L188:
	.word	-0x10000
	.word	0xffff
.Lfe35:
	.size	 LoadMonSpriteGraphics,.Lfe35-LoadMonSpriteGraphics
	.align	2, 0
	.globl	PSA_SetUpItemUseOnMonAnim
	.type	 PSA_SetUpItemUseOnMonAnim,function
	.thumb_func
PSA_SetUpItemUseOnMonAnim:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r2
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	bl	PSA_GetSceneWork
	add	r5, r0, #0
	add	r0, r7, #0
	bl	PSA_CreateItemIconObject
	add	r1, r0, #0
	str	r1, [r5, #0x10]
	cmp	r1, #0
	beq	.L191	@cond_branch
	add	r0, r5, #0
	add	r2, r6, #0
	bl	InitItemIconSpriteState
	ldr	r0, [r5, #0x10]
	add	r1, r6, #0
	bl	StartSpriteAffineAnim
	ldr	r1, [r5, #0x10]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L192
	mov	r1, #0x2
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r2, [r5, #0x10]
	add	r0, r4, #0
	mov	r1, #0x4
	bl	SetWordTaskArg
	ldr	r0, .L192+0x4
	lsl	r5, r4, #0x2
	add	r5, r5, r4
	lsl	r5, r5, #0x3
	add	r5, r5, r0
	strh	r6, [r5, #0xc]
	ldr	r1, .L192+0x8
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	GetYPosByScale
	strh	r0, [r5, #0xe]
	mov	r0, r8
	strh	r0, [r5, #0x14]
	add	r0, r7, #0
	bl	GetBlendColorByItemId
	strh	r0, [r5, #0x1a]
.L191:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L193:
	.align	2, 0
.L192:
	.word	Task_ItemUseOnMonAnim
	.word	gTasks
	.word	sAffineScales
.Lfe36:
	.size	 PSA_SetUpItemUseOnMonAnim,.Lfe36-PSA_SetUpItemUseOnMonAnim
	.align	2, 0
	.type	 GetBlendColorByItemId,function
	.thumb_func
GetBlendColorByItemId:
	ldr	r0, .L195
	bx	lr
.L196:
	.align	2, 0
.L195:
	.word	0x7fff
.Lfe37:
	.size	 GetBlendColorByItemId,.Lfe37-GetBlendColorByItemId
	.align	2, 0
	.globl	CreateItemIconSpriteAtMaxCloseness
	.type	 CreateItemIconSpriteAtMaxCloseness,function
	.thumb_func
CreateItemIconSpriteAtMaxCloseness:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	PSA_GetSceneWork
	add	r5, r0, #0
	add	r0, r4, #0
	bl	PSA_CreateItemIconObject
	str	r0, [r5, #0x10]
	cmp	r0, #0
	beq	.L198	@cond_branch
	mov	r1, #0x3
	bl	StartSpriteAffineAnim
	ldr	r1, [r5, #0x10]
	add	r0, r5, #0
	mov	r2, #0x3
	bl	InitItemIconSpriteState
.L198:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 CreateItemIconSpriteAtMaxCloseness,.Lfe38-CreateItemIconSpriteAtMaxCloseness
	.align	2, 0
	.type	 PSA_CreateItemIconObject,function
	.thumb_func
PSA_CreateItemIconObject:
	push	{r4, lr}
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0x1
	bl	AddItemIconObject
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L200	@cond_branch
	ldr	r3, .L202
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r4, r2, r3
	ldrb	r0, [r4, #0x1]
	mov	r1, #0x3
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1
	strb	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0x10
	add	r0, r2, r0
	ldr	r1, .L202+0x4
	str	r1, [r0]
	add	r3, r3, #0x1c
	add	r2, r2, r3
	ldr	r0, .L202+0x8
	str	r0, [r2]
	add	r0, r4, #0
	bl	InitSpriteAffineAnim
	add	r0, r4, #0
	b	.L201
.L203:
	.align	2, 0
.L202:
	.word	gSprites
	.word	sAffineAnimTable_Zoom
	.word	SpriteCallbackDummy
.L200:
	mov	r0, #0x0
.L201:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 PSA_CreateItemIconObject,.Lfe39-PSA_CreateItemIconObject
	.align	2, 0
	.globl	PSA_IsItemUseOnMonAnimActive
	.type	 PSA_IsItemUseOnMonAnimActive,function
	.thumb_func
PSA_IsItemUseOnMonAnimActive:
	push	{lr}
	ldr	r0, .L205
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L206:
	.align	2, 0
.L205:
	.word	Task_ItemUseOnMonAnim
.Lfe40:
	.size	 PSA_IsItemUseOnMonAnimActive,.Lfe40-PSA_IsItemUseOnMonAnimActive
	.align	2, 0
	.type	 Task_ItemUseOnMonAnim,function
	.thumb_func
Task_ItemUseOnMonAnim:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L227
	add	r4, r0, r1
	add	r0, r6, #0
	mov	r1, #0x4
	bl	GetWordTaskArg
	add	r5, r0, #0
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB2070
	b	.L208	@long jump
.LCB2070:
	lsl	r0, r0, #0x2
	ldr	r1, .L227+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L228:
	.align	2, 0
.L227:
	.word	gTasks+0x8
	.word	.L225
	.align	2, 0
	.align	2, 0
.L225:
	.word	.L209
	.word	.L212
	.word	.L214
	.word	.L216
	.word	.L222
.L209:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bgt	.LCB2097
	b	.L208	@long jump
.LCB2097:
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
	mov	r0, #0xbb
	bl	PlaySE
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L211	@cond_branch
	bl	LoadOutwardSpiralDotsGfx
.L211:
	mov	r0, #0x1
	strh	r0, [r4]
	b	.L208
.L212:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L208	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
	ldr	r0, .L229
	str	r0, [r5, #0x10]
	ldrb	r1, [r4, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAffineAnim
	mov	r0, #0x1
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	lsl	r2, r2, r0
	mov	r1, #0x2
	neg	r1, r1
	ldrh	r0, [r4, #0x12]
	str	r0, [sp]
	add	r0, r2, #0
	mov	r2, #0x0
	mov	r3, #0xc
	bl	BeginNormalPaletteFade
	mov	r0, #0x2
	strh	r0, [r4]
	mov	r0, #0xda
	bl	PlaySE
	b	.L208
.L230:
	.align	2, 0
.L229:
	.word	sAffineAnimTable_ItemZoom
.L214:
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L208	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x14
	strh	r0, [r4, #0x14]
	mov	r0, #0x3
	strh	r0, [r4]
	b	.L208
.L216:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	ble	.L208	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L218	@cond_branch
	add	r0, r6, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	CreateSprites_UseItem_OutwardSpiralDots
.L218:
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L219	@cond_branch
	mov	r0, #0xd2
	bl	PlaySE
.L219:
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L220	@cond_branch
	mov	r0, #0x4
	strh	r0, [r4]
	b	.L208
.L220:
	mov	r0, #0x8
	strh	r0, [r4, #0x14]
	b	.L208
.L222:
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L208	@cond_branch
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L224	@cond_branch
	add	r0, r5, #0
	bl	DestroySprite
.L224:
	add	r0, r6, #0
	bl	DestroyTask
.L208:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 Task_ItemUseOnMonAnim,.Lfe41-Task_ItemUseOnMonAnim
	.align	2, 0
	.type	 CreateSprites_UseItem_OutwardSpiralDots,function
	.thumb_func
CreateSprites_UseItem_OutwardSpiralDots:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r0, #0x20
	ldrsh	r5, [r2, r0]
	mov	r1, #0x24
	ldrsh	r0, [r2, r1]
	add	r5, r5, r0
	sub	r5, r5, #0x4
	mov	r0, #0x22
	ldrsh	r4, [r2, r0]
	mov	r1, #0x26
	ldrsh	r0, [r2, r1]
	add	r4, r4, r0
	sub	r4, r4, #0x4
	mov	r0, #0x5
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r0
	ldrh	r2, [r7, #0x12]
	add	r0, r1, #0
	mov	r1, #0x10
	bl	BlendPalettes
	mov	r6, #0x0
	ldr	r2, .L238
	mov	r8, r2
	mov	r0, #0x1c
	add	r0, r0, r8
	mov	sl, r0
	lsl	r5, r5, #0x10
	lsl	r4, r4, #0x10
.L235:
	ldr	r0, .L238+0x4
	asr	r1, r5, #0x10
	asr	r2, r4, #0x10
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L234	@cond_branch
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r2, r8
	add	r0, r1, r2
	lsl	r2, r6, #0x4
	strh	r2, [r0, #0x30]
	mov	r2, r9
	strh	r2, [r0, #0x3c]
	add	r1, r1, sl
	ldr	r2, .L238+0x8
	str	r2, [r1]
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r7, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x10]
.L234:
	add	r6, r6, #0x1
	cmp	r6, #0xe
	ble	.L235	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L239:
	.align	2, 0
.L238:
	.word	gSprites
	.word	sSpriteTemplate_UseItem_OutwardSpiralDots
	.word	SpriteCB_OutwardSpiralDots
.Lfe42:
	.size	 CreateSprites_UseItem_OutwardSpiralDots,.Lfe42-CreateSprites_UseItem_OutwardSpiralDots
	.align	2, 0
	.type	 SpriteCB_OutwardSpiralDots,function
	.thumb_func
SpriteCB_OutwardSpiralDots:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r3, r4, #0
	add	r3, r3, #0x2e
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L241	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r3, #0x2]
	add	r0, r0, #0x7
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r3, #0x2]
	ldrh	r0, [r3, #0x4]
	add	r0, r0, #0x4
	strh	r0, [r3, #0x4]
	mov	r5, #0x4
	ldrsh	r1, [r3, r5]
	ldr	r2, .L243
	mov	r5, #0x2
	ldrsh	r0, [r3, r5]
	add	r0, r0, #0x40
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	mov	r5, #0x0
	ldrsh	r0, [r0, r5]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r4, #0x24]
	mov	r0, #0x4
	ldrsh	r1, [r3, r0]
	mov	r5, #0x2
	ldrsh	r0, [r3, r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r4, #0x26]
	b	.L242
.L244:
	.align	2, 0
.L243:
	.word	gSineTable
.L241:
	ldr	r2, .L245
	mov	r5, #0xe
	ldrsh	r1, [r3, r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x18]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x18]
	add	r0, r4, #0
	bl	DestroySprite
.L242:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L246:
	.align	2, 0
.L245:
	.word	gTasks
.Lfe43:
	.size	 SpriteCB_OutwardSpiralDots,.Lfe43-SpriteCB_OutwardSpiralDots
	.align	2, 0
	.globl	PSA_UseItem_CleanUpForCancel
	.type	 PSA_UseItem_CleanUpForCancel,function
	.thumb_func
PSA_UseItem_CleanUpForCancel:
	push	{lr}
	ldr	r0, .L249
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L248	@cond_branch
	ldr	r0, .L249+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x1e]
.L248:
	pop	{r0}
	bx	r0
.L250:
	.align	2, 0
.L249:
	.word	Task_ItemUseOnMonAnim
	.word	gTasks
.Lfe44:
	.size	 PSA_UseItem_CleanUpForCancel,.Lfe44-PSA_UseItem_CleanUpForCancel
	.align	2, 0
	.type	 InitItemIconSpriteState,function
	.thumb_func
InitItemIconSpriteState:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r3, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	cmp	r2, #0x3
	bne	.L252	@cond_branch
	mov	r0, #0x78
	strh	r0, [r5, #0x20]
	ldrh	r0, [r3, #0x8]
	b	.L262
.L252:
	mov	r0, #0x78
	strh	r0, [r5, #0x20]
	ldrh	r0, [r3, #0x6]
.L262:
	strh	r0, [r5, #0x22]
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x4
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0x4
	strh	r0, [r5, #0x22]
	bl	PSA_GetMonSpecies
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	bl	PSA_GetMonPersonality
	add	r7, r0, #0
	bl	PSA_GetAnimType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L258	@cond_branch
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x0
	bl	Menu2_GetMonSpriteAnchorCoord
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x1
	b	.L263
.L258:
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x3
	bl	Menu2_GetMonSpriteAnchorCoord
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x4
.L263:
	bl	Menu2_GetMonSpriteAnchorCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0xff
	bne	.L259	@cond_branch
	mov	r4, #0x0
.L259:
	cmp	r0, #0xff
	bne	.L260	@cond_branch
	mov	r0, #0x0
.L260:
	strh	r4, [r5, #0x3a]
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, r8
	bl	ItemSpriteZoom_UpdateYPos
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 InitItemIconSpriteState,.Lfe45-InitItemIconSpriteState
	.align	2, 0
	.type	 MachineSetWobbleInit,function
	.thumb_func
MachineSetWobbleInit:
	push	{r4, lr}
	bl	PSA_GetSceneWork
	add	r4, r0, #0
	ldr	r0, [r4, #0xc]
	bl	MachineSetWobble_SetCB
	ldr	r0, [r4, #0x10]
	bl	MachineSetWobble_SetCB
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 MachineSetWobbleInit,.Lfe46-MachineSetWobbleInit
	.align	2, 0
	.type	 MachineSetWobble_SetCB,function
	.thumb_func
MachineSetWobble_SetCB:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	strh	r1, [r0, #0x30]
	ldr	r1, .L266
	str	r1, [r0, #0x1c]
	bx	lr
.L267:
	.align	2, 0
.L266:
	.word	SpriteCB_MachineSetWobble
.Lfe47:
	.size	 MachineSetWobble_SetCB,.Lfe47-MachineSetWobble_SetCB
	.align	2, 0
	.type	 MachineSetWobbleCBIsRunning,function
	.thumb_func
MachineSetWobbleCBIsRunning:
	push	{lr}
	bl	PSA_GetSceneWork
	ldr	r0, [r0, #0xc]
	ldr	r1, [r0, #0x1c]
	ldr	r0, .L270
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	pop	{r1}
	bx	r1
.L271:
	.align	2, 0
.L270:
	.word	SpriteCallbackDummy
.Lfe48:
	.size	 MachineSetWobbleCBIsRunning,.Lfe48-MachineSetWobbleCBIsRunning
	.align	2, 0
	.type	 SpriteCB_MachineSetWobble,function
	.thumb_func
SpriteCB_MachineSetWobble:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L274	@cond_branch
	cmp	r0, #0x1
	beq	.L275	@cond_branch
	b	.L273
.L274:
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x3
	strh	r0, [r1, #0x20]
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	b	.L273
.L275:
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L273	@cond_branch
	ldrh	r0, [r1, #0x20]
	sub	r0, r0, #0x3
	strh	r0, [r1, #0x20]
	ldr	r0, .L279
	str	r0, [r1, #0x1c]
.L273:
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	SpriteCallbackDummy
.Lfe49:
	.size	 SpriteCB_MachineSetWobble,.Lfe49-SpriteCB_MachineSetWobble
	.align	2, 0
	.type	 StartZoomOutAnimForUseTM,function
	.thumb_func
StartZoomOutAnimForUseTM:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	PSA_GetSceneWork
	add	r5, r0, #0
	ldrb	r0, [r5, #0xa]
	cmp	r6, r0
	beq	.L282	@cond_branch
	ldr	r0, .L285
	mov	r1, #0x1
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r2, [r5, #0xc]
	add	r0, r4, #0
	mov	r1, #0x6
	bl	SetWordTaskArg
	ldr	r2, [r5, #0x10]
	add	r0, r4, #0
	mov	r1, #0x9
	bl	SetWordTaskArg
	ldr	r1, .L285+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrb	r0, [r5, #0xa]
	strh	r0, [r1, #0xa]
	strh	r6, [r1, #0xc]
	mov	r2, #0x1
	strh	r2, [r1, #0x18]
	mov	r0, #0x6
	strh	r0, [r1, #0x12]
	ldrb	r5, [r5, #0xa]
	cmp	r6, r5
	bls	.L283	@cond_branch
	strh	r2, [r1, #0xe]
	b	.L282
.L286:
	.align	2, 0
.L285:
	.word	Task_ZoomAnim
	.word	gTasks
.L283:
	ldr	r0, .L287
	strh	r0, [r1, #0xe]
.L282:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L288:
	.align	2, 0
.L287:
	.word	0xffff
.Lfe50:
	.size	 StartZoomOutAnimForUseTM,.Lfe50-StartZoomOutAnimForUseTM
	.align	2, 0
	.type	 CreateStarSprites,function
	.thumb_func
CreateStarSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	sl, r0
	ldr	r0, .L296
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L296+0x4
	bl	LoadSpritePalette
	mov	r0, #0x0
	mov	r1, sl
	strh	r0, [r1, #0x2]
	ldr	r0, .L296+0x8
	str	r0, [sp, #0x4]
	mov	r1, #0x2
	str	r1, [sp]
.L293:
	ldr	r0, [sp, #0x4]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r9, r0
	mov	r1, r9
	add	r1, r1, #0x78
	ldr	r0, [sp, #0x4]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r8, r0
	mov	r0, sl
	ldrh	r2, [r0, #0x8]
	add	r2, r2, r8
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r0, .L296+0xc
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x40
	beq	.L292	@cond_branch
	bl	PSA_GetMonSpecies
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	bl	PSA_GetMonPersonality
	add	r6, r0, #0
	ldr	r0, .L296+0x10
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	mov	r1, r9
	lsl	r0, r1, #0x3
	strh	r0, [r4, #0x34]
	mov	r1, r8
	lsl	r0, r1, #0x3
	strh	r0, [r4, #0x36]
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	Menu2_GetMonSpriteAnchorCoordMinusx20
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x3
	bl	GetSpriteOffsetByScale
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x1
	bl	Menu2_GetMonSpriteAnchorCoordMinusx20
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x3
	bl	GetSpriteOffsetByScale
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r1, sl
	ldrh	r0, [r1, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2]
.L292:
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x2
	str	r0, [sp, #0x4]
	ldr	r1, [sp]
	sub	r1, r1, #0x1
	str	r1, [sp]
	cmp	r1, #0
	bge	.L293	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L297:
	.align	2, 0
.L296:
	.word	sSpriteSheet_Star
	.word	sSpritePalette_Star
	.word	sStarCoordOffsets
	.word	sSpriteTemplate_Star
	.word	gSprites
.Lfe51:
	.size	 CreateStarSprites,.Lfe51-CreateStarSprites
	.align	2, 0
	.type	 AnyStarSpritesActive,function
	.thumb_func
AnyStarSpritesActive:
	push	{lr}
	bl	PSA_GetSceneWork
	ldrb	r0, [r0, #0x2]
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 AnyStarSpritesActive,.Lfe52-AnyStarSpritesActive
	.align	2, 0
	.type	 SpriteCB_Star,function
	.thumb_func
SpriteCB_Star:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bgt	.L300	@cond_branch
	ldrh	r0, [r4, #0x34]
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x36]
	ldrh	r2, [r4, #0x32]
	add	r1, r1, r2
	strh	r1, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r4, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x26]
	b	.L301
.L300:
	bl	PSA_GetSceneWork
	ldrh	r1, [r0, #0x2]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x2]
	add	r0, r4, #0
	bl	DestroySprite
.L301:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 SpriteCB_Star,.Lfe53-SpriteCB_Star
	.align	2, 0
	.type	 PSAScene_SeedRandomInTask,function
	.thumb_func
PSAScene_SeedRandomInTask:
	push	{r4, lr}
	bl	LoadOutwardSpiralDotsGfx
	ldr	r0, .L303
	mov	r1, #0x1
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r2, .L303+0x4
	add	r0, r4, #0
	mov	r1, #0x3
	bl	SetWordTaskArg
	ldr	r1, .L303+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xe0
	strh	r1, [r0, #0x12]
	pop	{r4}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	Task_UseItem_OutwardSpiralDots
	.word	0x78865321
	.word	gTasks
.Lfe54:
	.size	 PSAScene_SeedRandomInTask,.Lfe54-PSAScene_SeedRandomInTask
	.align	2, 0
	.type	 StopMakingOutwardSpiralDots,function
	.thumb_func
StopMakingOutwardSpiralDots:
	push	{lr}
	ldr	r0, .L307
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L306	@cond_branch
	ldr	r0, .L307+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
.L306:
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	Task_UseItem_OutwardSpiralDots
	.word	gTasks
.Lfe55:
	.size	 StopMakingOutwardSpiralDots,.Lfe55-StopMakingOutwardSpiralDots
	.align	2, 0
	.type	 Task_UseItem_OutwardSpiralDots,function
	.thumb_func
Task_UseItem_OutwardSpiralDots:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L320
	add	r5, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L311	@cond_branch
	cmp	r0, #0x1
	beq	.L316	@cond_branch
	b	.L310
.L321:
	.align	2, 0
.L320:
	.word	gTasks+0x8
.L311:
	ldrh	r0, [r5, #0x2]
	mov	r3, #0x2
	ldrsh	r2, [r5, r3]
	mov	r9, r2
	cmp	r2, #0
	bne	.L312	@cond_branch
	bl	PSA_GetSceneWork
	ldr	r0, [r0, #0x10]
	mov	r4, #0x20
	ldrsh	r2, [r0, r4]
	mov	r3, #0x24
	ldrsh	r1, [r0, r3]
	add	r2, r2, r1
	str	r2, [sp]
	mov	r4, #0x22
	ldrsh	r1, [r0, r4]
	mov	r2, #0x26
	ldrsh	r0, [r0, r2]
	add	r1, r1, r0
	mov	sl, r1
	add	r0, r6, #0
	bl	PSAScene_RandomFromTask
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x15
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x46
	ldr	r3, .L322
	mov	r4, #0xa
	ldrsh	r2, [r5, r4]
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	mov	r4, #0x0
	ldrsh	r1, [r1, r4]
	mul	r1, r1, r0
	lsr	r1, r1, #0x8
	ldr	r4, [sp]
	add	r4, r4, r1
	mov	r8, r4
	lsl	r2, r2, #0x1
	add	r2, r2, r3
	mov	r3, #0x0
	ldrsh	r1, [r2, r3]
	mul	r0, r0, r1
	lsr	r0, r0, #0x8
	mov	r4, sl
	add	r7, r4, r0
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x4c
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldr	r0, .L322+0x4
	mov	r2, r8
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r7, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x40
	beq	.L313	@cond_branch
	ldr	r0, .L322+0x8
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	mov	r3, r9
	strh	r3, [r4, #0x2e]
	add	r0, r6, #0
	bl	PSAScene_RandomFromTask
	mov	r1, #0x1
	and	r1, r1, r0
	add	r1, r1, #0x6
	strh	r1, [r4, #0x30]
	mov	r0, r8
	strh	r0, [r4, #0x32]
	strh	r7, [r4, #0x34]
	mov	r1, sp
	ldrh	r1, [r1]
	strh	r1, [r4, #0x36]
	mov	r2, sl
	strh	r2, [r4, #0x38]
	strh	r6, [r4, #0x3a]
	ldrh	r0, [r5, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x4]
.L313:
	ldrh	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2f
	ble	.L310	@cond_branch
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	b	.L310
.L323:
	.align	2, 0
.L322:
	.word	gSineTable
	.word	sSpriteTemplate_UseItem_OutwardSpiralDots
	.word	gSprites
.L312:
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x2]
	b	.L310
.L316:
	mov	r3, #0x4
	ldrsh	r0, [r5, r3]
	cmp	r0, #0
	bne	.L310	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
.L310:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 Task_UseItem_OutwardSpiralDots,.Lfe56-Task_UseItem_OutwardSpiralDots
	.align	2, 0
	.type	 PSAScene_RandomFromTask,function
	.thumb_func
PSAScene_RandomFromTask:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetWordTaskArg
	add	r5, r0, #0
	ldr	r0, .L325
	mul	r0, r0, r5
	ldr	r1, .L325+0x4
	add	r5, r0, r1
	add	r0, r4, #0
	mov	r1, #0x3
	add	r2, r5, #0
	bl	SetWordTaskArg
	lsr	r0, r5, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L326:
	.align	2, 0
.L325:
	.word	0x41c64e6d
	.word	0x6073
.Lfe57:
	.size	 PSAScene_RandomFromTask,.Lfe57-PSAScene_RandomFromTask
	.align	2, 0
	.type	 SpriteCallback_UseItem_OutwardSpiralDots,function
	.thumb_func
SpriteCallback_UseItem_OutwardSpiralDots:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x2e]
	add	r0, r0, r1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L328	@cond_branch
	ldr	r2, .L330
	mov	r5, #0x3a
	ldrsh	r1, [r4, r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0xc]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xc]
	add	r0, r4, #0
	bl	DestroySprite
	b	.L329
.L331:
	.align	2, 0
.L330:
	.word	gTasks
.L328:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	mov	r5, #0x2e
	ldrsh	r3, [r4, r5]
	mov	r2, r0
	mul	r2, r2, r3
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r5, #0x34
	ldrsh	r1, [r4, r5]
	sub	r0, r0, r1
	mul	r0, r0, r3
	asr	r2, r2, #0x8
	ldrh	r1, [r4, #0x32]
	add	r2, r2, r1
	strh	r2, [r4, #0x20]
	asr	r0, r0, #0x8
	ldrh	r2, [r4, #0x34]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
.L329:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 SpriteCallback_UseItem_OutwardSpiralDots,.Lfe58-SpriteCallback_UseItem_OutwardSpiralDots
	.align	2, 0
	.type	 LoadOutwardSpiralDotsGfx,function
	.thumb_func
LoadOutwardSpiralDotsGfx:
	push	{lr}
	ldr	r0, .L333
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L333+0x4
	bl	LoadSpritePalette
	pop	{r0}
	bx	r0
.L334:
	.align	2, 0
.L333:
	.word	sSpriteSheet_UseItem_OutwardSpiralDots
	.word	sSpritePalette_UseItem_OutwardSpiralDots
.Lfe59:
	.size	 LoadOutwardSpiralDotsGfx,.Lfe59-LoadOutwardSpiralDotsGfx
	.align	2, 0
	.type	 IsOutwardSpiralDotsTaskRunning,function
	.thumb_func
IsOutwardSpiralDotsTaskRunning:
	push	{lr}
	ldr	r0, .L336
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L337:
	.align	2, 0
.L336:
	.word	Task_UseItem_OutwardSpiralDots
.Lfe60:
	.size	 IsOutwardSpiralDotsTaskRunning,.Lfe60-IsOutwardSpiralDotsTaskRunning

	.lcomm	spriteSheet.189,8

	.lcomm	spritePalette.190,8
	.align	2, 0
	.globl	CreateLevelUpVerticalSpritesTask
	.type	 CreateLevelUpVerticalSpritesTask,function
	.thumb_func
CreateLevelUpVerticalSpritesTask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	mov	r9, r3
	ldr	r0, [sp, #0x20]
	mov	sl, r0
	ldr	r0, [sp, #0x24]
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r1, r8
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	mov	r1, r9
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	mov	r1, sl
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L339
	mov	r1, r8
	strh	r1, [r0, #0x6]
	ldr	r1, .L339+0x4
	str	r1, [r0]
	ldr	r1, [r1]
	lsr	r1, r1, #0x8
	strh	r1, [r0, #0x4]
	ldr	r4, .L339+0x8
	ldr	r1, .L339+0xc
	str	r1, [r4]
	mov	r1, r9
	strh	r1, [r4, #0x4]
	bl	LoadCompressedSpriteSheet
	add	r0, r4, #0
	bl	LoadSpritePalette
	ldr	r0, .L339+0x10
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L339+0x14
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	sub	r5, r5, #0x20
	strh	r5, [r1, #0x10]
	add	r6, r6, #0x20
	strh	r6, [r1, #0x12]
	mov	r0, r8
	strh	r0, [r1, #0x14]
	mov	r0, r9
	strh	r0, [r1, #0x16]
	mov	r0, sl
	strh	r0, [r1, #0x18]
	strh	r7, [r1, #0x1a]
	mov	r1, #0xfc
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L339+0x18
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L340:
	.align	2, 0
.L339:
	.word	spriteSheet.189
	.word	sLevelUp_Gfx
	.word	spritePalette.190
	.word	sLevelUp_Pal
	.word	Task_LevelUpVerticalSprites
	.word	gTasks
	.word	0x60c
.Lfe61:
	.size	 CreateLevelUpVerticalSpritesTask,.Lfe61-CreateLevelUpVerticalSpritesTask
	.align	2, 0
	.globl	LevelUpVerticalSpritesTaskIsRunning
	.type	 LevelUpVerticalSpritesTaskIsRunning,function
	.thumb_func
LevelUpVerticalSpritesTaskIsRunning:
	push	{lr}
	ldr	r0, .L342
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L343:
	.align	2, 0
.L342:
	.word	Task_LevelUpVerticalSprites
.Lfe62:
	.size	 LevelUpVerticalSpritesTaskIsRunning,.Lfe62-LevelUpVerticalSpritesTaskIsRunning
	.align	2, 0
	.type	 Task_LevelUpVerticalSprites,function
	.thumb_func
Task_LevelUpVerticalSprites:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L355
	add	r4, r0, r1
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L346	@cond_branch
	cmp	r1, #0x1
	beq	.L351	@cond_branch
	b	.L345
.L356:
	.align	2, 0
.L355:
	.word	gTasks+0x8
.L346:
	ldrh	r2, [r4, #0x6]
	mov	r3, #0x6
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L347	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0x6]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	CreateLevelUpVerticalSprite
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x11
	ble	.L345	@cond_branch
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L345
.L347:
	add	r0, r2, #0x1
	strh	r0, [r4, #0x6]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L345	@cond_branch
	strh	r1, [r4, #0x6]
	b	.L345
.L351:
	mov	r3, #0x2
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L345	@cond_branch
	ldrh	r0, [r4, #0xc]
	bl	FreeSpriteTilesByTag
	ldrh	r0, [r4, #0xe]
	bl	FreeSpritePaletteByTag
	add	r0, r5, #0
	bl	DestroyTask
.L345:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 Task_LevelUpVerticalSprites,.Lfe63-Task_LevelUpVerticalSprites
	.align	2, 0
	.type	 CreateLevelUpVerticalSprite,function
	.thumb_func
CreateLevelUpVerticalSprite:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x18
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, sp
	ldr	r0, .L359
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	mov	r1, sp
	ldrh	r0, [r4, #0xc]
	strh	r0, [r1]
	ldrh	r0, [r4, #0xe]
	strh	r0, [r1, #0x2]
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x4]
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	mov	r0, #0xdb
	mul	r1, r1, r0
	mov	r5, #0x3f
	and	r1, r1, r5
	ldrh	r2, [r4, #0x8]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r3, #0xa
	ldrsh	r2, [r4, r3]
	ldrb	r3, [r4, #0x12]
	mov	r0, sp
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x40
	beq	.L358	@cond_branch
	ldr	r0, .L359+0x4
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	mov	r0, #0x3
	ldrb	r1, [r4, #0x10]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r3, [r2, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	ldr	r0, .L359+0x8
	mul	r0, r0, r1
	ldr	r1, .L359+0xc
	add	r0, r0, r1
	and	r0, r0, r5
	add	r0, r0, #0x20
	strh	r0, [r2, #0x32]
	strh	r6, [r2, #0x3c]
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
.L358:
	add	sp, sp, #0x18
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	sSpriteTemplate_LevelUpVertical
	.word	gSprites
	.word	0x41c64e6d
	.word	0x6073
.Lfe64:
	.size	 CreateLevelUpVerticalSprite,.Lfe64-CreateLevelUpVerticalSprite
	.align	2, 0
	.type	 SpriteCB_LevelUpVertical,function
	.thumb_func
SpriteCB_LevelUpVertical:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x30]
	ldrh	r1, [r3, #0x32]
	sub	r0, r0, r1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r3, #0x26]
	mov	r1, #0x40
	neg	r1, r1
	cmp	r0, r1
	bge	.L362	@cond_branch
	ldr	r2, .L363
	mov	r0, #0x3c
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0xa]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xa]
	add	r0, r3, #0
	bl	DestroySprite
.L362:
	pop	{r0}
	bx	r0
.L364:
	.align	2, 0
.L363:
	.word	gTasks
.Lfe65:
	.size	 SpriteCB_LevelUpVertical,.Lfe65-SpriteCB_LevelUpVertical
	.section .rodata
	.align	2, 0
	.type	 sLevelUpWindowStatNames,object
sLevelUpWindowStatNames:
	.word	gText_LevelUp_MaxHP
	.word	gText_LevelUp_Attack
	.word	gText_LevelUp_Defense
	.word	gText_LevelUp_SpAtk
	.word	gText_LevelUp_SpDef
	.word	gText_LevelUp_Speed
	.size	 sLevelUpWindowStatNames,24
.text
	.align	2, 0
	.globl	DrawLevelUpWindowPg1
	.type	 DrawLevelUpWindowPg1,function
	.thumb_func
DrawLevelUpWindowPg1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x30
	mov	r8, r0
	add	r6, r1, #0
	add	r5, r2, #0
	add	r4, r3, #0
	ldr	r3, [sp, #0x50]
	ldr	r0, [sp, #0x54]
	mov	r9, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r4, #0x4
	orr	r1, r1, r4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r3, [sp, #0x2c]
	bl	FillWindowPixelBuffer
	add	r2, sp, #0xc
	ldrh	r0, [r5]
	ldrh	r1, [r6]
	sub	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r6, #0x2]
	sub	r0, r0, r1
	strh	r0, [r2, #0x2]
	ldrh	r0, [r5, #0x4]
	ldrh	r1, [r6, #0x4]
	sub	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrh	r0, [r5, #0x8]
	ldrh	r1, [r6, #0x8]
	sub	r0, r0, r1
	strh	r0, [r2, #0x6]
	ldrh	r0, [r5, #0xa]
	ldrh	r1, [r6, #0xa]
	sub	r0, r0, r1
	strh	r0, [r2, #0x8]
	ldrh	r0, [r5, #0x6]
	ldrh	r1, [r6, #0x6]
	sub	r0, r0, r1
	strh	r0, [r2, #0xa]
	add	r0, sp, #0x24
	strb	r4, [r0]
	ldr	r3, [sp, #0x2c]
	strb	r3, [r0, #0x1]
	mov	r1, r9
	strb	r1, [r0, #0x2]
	mov	r7, #0x0
	mov	r1, sp
	add	r1, r1, #0x19
	str	r1, [sp, #0x28]
	mov	sl, r0
	mov	r0, #0x1
	neg	r0, r0
	mov	r9, r0
	add	r6, sp, #0x18
.L369:
	lsl	r0, r7, #0x4
	sub	r0, r0, r7
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, sl
	str	r1, [sp]
	mov	r0, r9
	str	r0, [sp, #0x4]
	ldr	r1, .L377
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [sp, #0x8]
	mov	r0, r8
	mov	r1, #0x2
	mov	r2, #0x0
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	lsl	r0, r7, #0x1
	mov	r4, sp
	add	r4, r4, r0
	add	r4, r4, #0xc
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	ldr	r1, .L377+0x4
	cmp	r0, #0
	blt	.L370	@cond_branch
	ldr	r1, .L377+0x8
.L370:
	add	r0, r6, #0
	bl	StringCopy
	mov	r0, sl
	str	r0, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, r8
	mov	r1, #0x2
	mov	r2, #0x38
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	mov	r0, #0x0
	strb	r0, [r6]
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L374	@cond_branch
	neg	r0, r1
.L374:
	mov	r4, #0x6
	cmp	r0, #0x9
	bgt	.L372	@cond_branch
	mov	r4, #0xc
.L372:
	cmp	r1, #0
	bge	.L375	@cond_branch
	neg	r1, r1
.L375:
	ldr	r0, [sp, #0x28]
	mov	r2, #0x0
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	add	r2, r4, #0
	add	r2, r2, #0x38
	mov	r1, sl
	str	r1, [sp]
	mov	r0, r9
	str	r0, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, r8
	mov	r1, #0x2
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x5
	bls	.L369	@cond_branch
	add	sp, sp, #0x30
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L378:
	.align	2, 0
.L377:
	.word	sLevelUpWindowStatNames
	.word	gText_LevelUp_Minus
	.word	gText_LevelUp_Plus
.Lfe66:
	.size	 DrawLevelUpWindowPg1,.Lfe66-DrawLevelUpWindowPg1
	.align	2, 0
	.globl	DrawLevelUpWindowPg2
	.type	 DrawLevelUpWindowPg2,function
	.thumb_func
DrawLevelUpWindowPg2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	mov	r8, r0
	add	r5, r1, #0
	add	r4, r2, #0
	add	r6, r3, #0
	ldr	r2, [sp, #0x4c]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r4, #0x4
	orr	r1, r1, r4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r2, [sp, #0x28]
	bl	FillWindowPixelBuffer
	add	r1, sp, #0xc
	ldrh	r0, [r5]
	strh	r0, [r1]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r1, #0x2]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r1, #0x4]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r1, #0x6]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r1, #0x8]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r1, #0xa]
	add	r0, sp, #0x24
	strb	r4, [r0]
	strb	r6, [r0, #0x1]
	ldr	r2, [sp, #0x28]
	strb	r2, [r0, #0x2]
	mov	r6, #0x0
	add	r1, sp, #0x18
	mov	r9, r1
	mov	r7, r8
	mov	sl, r0
	mov	r2, #0x1
	neg	r2, r2
	mov	r8, r2
.L383:
	lsl	r1, r6, #0x1
	mov	r0, sp
	add	r0, r0, r1
	add	r0, r0, #0xc
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r4, #0x3
	cmp	r0, #0x63
	bgt	.L385	@cond_branch
	mov	r4, #0x1
	cmp	r0, #0x9
	ble	.L385	@cond_branch
	mov	r4, #0x2
.L385:
	mov	r0, sp
	add	r0, r0, r1
	add	r0, r0, #0xc
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r0, r9
	mov	r2, #0x0
	add	r3, r4, #0
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x4
	sub	r0, r0, r4
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x11
	lsr	r4, r4, #0x10
	lsl	r5, r6, #0x4
	sub	r5, r5, r6
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, sl
	str	r0, [sp]
	mov	r1, r8
	str	r1, [sp, #0x4]
	ldr	r1, .L389
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [sp, #0x8]
	add	r0, r7, #0
	mov	r1, #0x2
	mov	r2, #0x0
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	add	r4, r4, #0x38
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r2, sl
	str	r2, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r1, r9
	str	r1, [sp, #0x8]
	add	r0, r7, #0
	mov	r1, #0x2
	add	r2, r4, #0
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x5
	bls	.L383	@cond_branch
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L390:
	.align	2, 0
.L389:
	.word	sLevelUpWindowStatNames
.Lfe67:
	.size	 DrawLevelUpWindowPg2,.Lfe67-DrawLevelUpWindowPg2
.text
	.align	2, 0 @ Don't pad with nop

