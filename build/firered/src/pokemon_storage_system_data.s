@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sMonBeingCarried,object
	.size	 sMonBeingCarried,100
sMonBeingCarried:
	.space	100
	.type	 sCursorArea,object
	.size	 sCursorArea,1
sCursorArea:
	.byte	0x0
	.type	 sCursorPosition,object
	.size	 sCursorPosition,1
sCursorPosition:
	.byte	0x0
	.type	 sIsMonBeingMoved,object
	.size	 sIsMonBeingMoved,1
sIsMonBeingMoved:
	.byte	0x0
	.type	 sMovingMonOrigBoxId,object
	.size	 sMovingMonOrigBoxId,1
sMovingMonOrigBoxId:
	.byte	0x0
	.type	 sMovingMonOrigBoxPos,object
	.size	 sMovingMonOrigBoxPos,1
sMovingMonOrigBoxPos:
	.byte	0x0
	.type	 sInMultiMoveMode,object
	.size	 sInMultiMoveMode,1
sInMultiMoveMode:
	.byte	0x0
	.type	 sSavedCursorPosition,object
	.size	 sSavedCursorPosition,1
sSavedCursorPosition:
	.byte	0x0
	.section .rodata
	.align	1, 0
	.type	 sPokeStorageMisc1Pal,object
sPokeStorageMisc1Pal:
	.short	0x7f1f
	.short	0x5652
	.short	0x2d4a
	.short	0x2f9f
	.short	0x3b7e
	.short	0x5b9e
	.short	0x1f9
	.short	0x12f
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x36df
	.short	0x29f
	.short	0x7fff
	.short	0x6f7b
	.short	0x0
	.size	 sPokeStorageMisc1Pal,32
	.align	1, 0
	.type	 sHandCursorTiles,object
sHandCursorTiles:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x2110
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1
	.short	0x1100
	.short	0x12
	.short	0x2211
	.short	0x123
	.short	0x3322
	.short	0x123b
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x3221
	.short	0x1000
	.short	0x3332
	.short	0x2100
	.short	0x3333
	.short	0x3210
	.short	0x3333
	.short	0x3210
	.short	0x3333
	.short	0x3321
	.short	0xbb33
	.short	0x3321
	.short	0xbbb3
	.short	0x3321
	.short	0x2cb3
	.short	0x3333
	.short	0x23b3
	.short	0x3333
	.short	0x12b3
	.short	0x3333
	.short	0x12bb
	.short	0x3333
	.short	0x12b
	.short	0x3333
	.short	0x12b
	.short	0x3333
	.short	0x12b
	.short	0xb33b
	.short	0x12b
	.short	0xbbbb
	.short	0x12c
	.short	0x1
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x3321
	.short	0xcccb
	.short	0x33b2
	.short	0xcc2b
	.short	0x3332
	.short	0x222c
	.short	0xb332
	.short	0x1112
	.short	0xb332
	.short	0x12
	.short	0xcbb2
	.short	0x12
	.short	0x2221
	.short	0x1
	.short	0x1110
	.short	0x0
	.short	0xbbb2
	.short	0x12
	.short	0xccc2
	.short	0x12
	.short	0x2221
	.short	0x1
	.short	0x1110
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1
	.short	0x1100
	.short	0x12
	.short	0x2211
	.short	0x123
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x2110
	.short	0x0
	.short	0x3221
	.short	0x1000
	.short	0x3332
	.short	0x2100
	.short	0x3333
	.short	0x3210
	.short	0x3333
	.short	0x3210
	.short	0x3333
	.short	0x3210
	.short	0x3b33
	.short	0x3b21
	.short	0xbbb3
	.short	0x3322
	.short	0x123b
	.short	0x3333
	.short	0x23b3
	.short	0x3333
	.short	0x12b3
	.short	0x3333
	.short	0x12bb
	.short	0x3333
	.short	0x12b
	.short	0x3333
	.short	0x12b
	.short	0x3333
	.short	0x12b
	.short	0xb333
	.short	0x12b
	.short	0x0
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x3321
	.short	0x2cb3
	.short	0x3321
	.short	0x2cb3
	.short	0x3321
	.short	0xc2cb
	.short	0x3321
	.short	0x22cb
	.short	0x3321
	.short	0x112b
	.short	0x3321
	.short	0x12b
	.short	0xbb21
	.short	0x12c
	.short	0x2210
	.short	0x12
	.short	0xbbbb
	.short	0x12c
	.short	0xbbbc
	.short	0x12
	.short	0xccc2
	.short	0x12
	.short	0x2222
	.short	0x1
	.short	0x1111
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1100
	.short	0x1
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x100
	.short	0x0
	.short	0x1211
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x2100
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x2211
	.short	0x1100
	.short	0x3321
	.short	0x2110
	.short	0x3332
	.short	0x3221
	.short	0x3333
	.short	0xb332
	.short	0x3332
	.short	0x2b33
	.short	0x3333
	.short	0x1110
	.short	0x2322
	.short	0x2221
	.short	0x3c33
	.short	0x3332
	.short	0x1333
	.short	0x3333
	.short	0xbb33
	.short	0x3333
	.short	0xbb33
	.short	0x3333
	.short	0x2b33
	.short	0x3333
	.short	0x2b33
	.short	0x33bb
	.short	0x2b33
	.short	0x1
	.short	0x0
	.short	0x12
	.short	0x0
	.short	0x123
	.short	0x0
	.short	0x12
	.short	0x0
	.short	0x12
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x0
	.short	0x3210
	.short	0x0
	.short	0x3210
	.short	0x0
	.short	0x3321
	.short	0x0
	.short	0xb321
	.short	0x0
	.short	0x2210
	.short	0x0
	.short	0x1100
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x32b3
	.short	0xbb33
	.short	0x332b
	.short	0xbbb3
	.short	0x332b
	.short	0x22bb
	.short	0xb332
	.short	0xcc2b
	.short	0xb332
	.short	0xcc22
	.short	0xbbb2
	.short	0x2212
	.short	0x2221
	.short	0x1101
	.short	0x1110
	.short	0x0
	.short	0x3bbb
	.short	0x2b33
	.short	0xb222
	.short	0x2333
	.short	0x222c
	.short	0xb33b
	.short	0x1112
	.short	0x33b2
	.short	0x1012
	.short	0xbbc2
	.short	0x1
	.short	0x2221
	.short	0x0
	.short	0x1110
	.short	0x0
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x12
	.short	0x0
	.short	0x12
	.short	0x0
	.short	0x12
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x2110
	.short	0x1000
	.short	0x3221
	.short	0x2100
	.short	0x3332
	.short	0x3210
	.short	0x3333
	.short	0x3321
	.short	0x3333
	.short	0x3c32
	.short	0x3333
	.short	0x1100
	.short	0x12
	.short	0x2211
	.short	0x123
	.short	0x3322
	.short	0x123c
	.short	0x3333
	.short	0x23c3
	.short	0x3333
	.short	0x12bb
	.short	0x3333
	.short	0x12bb
	.short	0x3333
	.short	0x12b
	.short	0x3333
	.short	0x12b
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x1000
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x33c2
	.short	0x3333
	.short	0x33c2
	.short	0xbbb3
	.short	0xbbc2
	.short	0x22bb
	.short	0xbb21
	.short	0xcc2b
	.short	0xb210
	.short	0xcbbb
	.short	0x2100
	.short	0x2ccc
	.short	0x1000
	.short	0x1222
	.short	0x0
	.short	0x111
	.short	0xb333
	.short	0x12b
	.short	0xbbbb
	.short	0x12b
	.short	0xbbbb
	.short	0x12b
	.short	0xbbb2
	.short	0x12
	.short	0xbbb2
	.short	0x12
	.short	0xccc2
	.short	0x12
	.short	0x2221
	.short	0x1
	.short	0x1110
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sHandCursorTiles,2048
	.align	1, 0
	.type	 sHandCursorShadowTiles,object
sHandCursorShadowTiles:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xf800
	.short	0x8000
	.short	0x8888
	.short	0xf800
	.short	0xffff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x8
	.short	0x0
	.short	0x8888
	.short	0x0
	.short	0xffff
	.short	0x8
	.short	0xff80
	.short	0xffff
	.short	0xf800
	.short	0xffff
	.short	0x8000
	.short	0x8888
	.short	0x0
	.short	0xf800
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xffff
	.short	0x8f
	.short	0xffff
	.short	0x8
	.short	0x8888
	.short	0x0
	.short	0x8
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sHandCursorShadowTiles,128
.text
	.align	2, 0
	.globl	InitCursor
	.type	 InitCursor,function
	.thumb_func
InitCursor:
	push	{lr}
	ldr	r0, .L7
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x1]
	cmp	r1, #0x1
	beq	.L5	@cond_branch
	ldr	r1, .L7+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L6
.L8:
	.align	2, 0
.L7:
	.word	gStorage
	.word	sCursorArea
.L5:
	ldr	r0, .L9
	strb	r1, [r0]
.L6:
	ldr	r0, .L9+0x4
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L9+0x8
	strb	r1, [r0]
	ldr	r0, .L9+0xc
	strb	r1, [r0]
	ldr	r0, .L9+0x10
	strb	r1, [r0]
	ldr	r0, .L9+0x14
	strb	r1, [r0]
	bl	ClearSavedCursorPos
	bl	CreateCursorSprites
	ldr	r2, .L9+0x18
	ldr	r0, [r2]
	ldr	r1, .L9+0x1c
	add	r0, r0, r1
	mov	r3, #0x0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r1, .L9+0x20
	add	r0, r0, r1
	strb	r3, [r0]
	bl	TrySetDisplayMonData
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	sCursorArea
	.word	sCursorPosition
	.word	sIsMonBeingMoved
	.word	sMovingMonOrigBoxId
	.word	sMovingMonOrigBoxPos
	.word	sInMultiMoveMode
	.word	gStorage
	.word	0xcd2
	.word	0x21ef
.Lfe1:
	.size	 InitCursor,.Lfe1-InitCursor
	.align	2, 0
	.globl	InitCursorOnReopen
	.type	 InitCursorOnReopen,function
	.thumb_func
InitCursorOnReopen:
	push	{lr}
	bl	CreateCursorSprites
	bl	ReshowDisplayMon
	ldr	r3, .L13
	ldr	r0, [r3]
	ldr	r1, .L13+0x4
	add	r0, r0, r1
	mov	r2, #0x0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r3]
	ldr	r1, .L13+0x8
	add	r0, r0, r1
	strb	r2, [r0]
	ldr	r0, .L13+0xc
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L12	@cond_branch
	ldr	r0, [r3]
	ldr	r1, .L13+0x10
	add	r0, r0, r1
	ldr	r1, .L13+0x14
	mov	r2, #0x64
	bl	memcpy
	bl	CreateMovingMonIcon
.L12:
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gStorage
	.word	0xcd2
	.word	0x21ef
	.word	sIsMonBeingMoved
	.word	0x20a0
	.word	sMonBeingCarried
.Lfe2:
	.size	 InitCursorOnReopen,.Lfe2-InitCursorOnReopen
	.align	2, 0
	.type	 GetCursorCoordsByPos,function
	.thumb_func
GetCursorCoordsByPos:
	push	{r4, r5, r6, lr}
	add	r4, r2, #0
	add	r6, r3, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	cmp	r0, #0x4
	bhi	.L16	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L31
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L32:
	.align	2, 0
.L31:
	.word	.L28
	.align	2, 0
	.align	2, 0
.L28:
	.word	.L17
	.word	.L18
	.word	.L23
	.word	.L24
	.word	.L27
.L17:
	add	r0, r5, #0
	mov	r1, #0x6
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, #0x64
	strh	r1, [r4]
	add	r0, r5, #0
	mov	r1, #0x6
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, #0x20
	strh	r1, [r6]
	b	.L16
.L18:
	cmp	r5, #0
	bne	.L19	@cond_branch
	mov	r0, #0x68
	strh	r0, [r4]
	mov	r0, #0x34
	b	.L30
.L19:
	cmp	r5, #0x6
	bne	.L21	@cond_branch
	mov	r0, #0x98
	strh	r0, [r4]
	mov	r0, #0x84
	b	.L30
.L21:
	mov	r0, #0x98
	strh	r0, [r4]
	sub	r1, r5, #0x1
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, #0x4
	b	.L30
.L23:
	mov	r0, #0xa2
	strh	r0, [r4]
	mov	r0, #0xc
	b	.L30
.L24:
	ldr	r0, .L33
	ldrb	r0, [r0]
	mov	r1, #0xe
	cmp	r0, #0
	beq	.L25	@cond_branch
	mov	r1, #0x8
.L25:
	strh	r1, [r6]
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, #0x78
	strh	r0, [r4]
	b	.L16
.L34:
	.align	2, 0
.L33:
	.word	sIsMonBeingMoved
.L27:
	mov	r0, #0xa0
	strh	r0, [r4]
	mov	r0, #0x60
.L30:
	strh	r0, [r6]
.L16:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 GetCursorCoordsByPos,.Lfe3-GetCursorCoordsByPos
	.align	2, 0
	.type	 GetSpeciesAtCursorPosition,function
	.thumb_func
GetSpeciesAtCursorPosition:
	push	{lr}
	ldr	r0, .L43
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L38	@cond_branch
	cmp	r0, #0x1
	bne	.L39	@cond_branch
	ldr	r0, .L43+0x4
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L43+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	b	.L42
.L44:
	.align	2, 0
.L43:
	.word	sCursorArea
	.word	sCursorPosition
	.word	gPlayerParty
.L38:
	ldr	r0, .L45
	ldrb	r0, [r0]
	mov	r1, #0xb
	bl	GetCurrentBoxMonData
.L42:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L41
.L46:
	.align	2, 0
.L45:
	.word	sCursorPosition
.L39:
	mov	r0, #0x0
.L41:
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 GetSpeciesAtCursorPosition,.Lfe4-GetSpeciesAtCursorPosition
	.align	2, 0
	.globl	UpdateCursorPos
	.type	 UpdateCursorPos,function
	.thumb_func
UpdateCursorPos:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L60
	ldr	r5, [r7]
	ldr	r0, .L60+0x4
	add	r1, r5, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L48	@cond_branch
	ldrb	r0, [r5, #0x1]
	cmp	r0, #0x3
	beq	.L49	@cond_branch
	mov	r0, #0x0
	b	.L59
.L61:
	.align	2, 0
.L60:
	.word	gStorage
	.word	0xccc
.L49:
	bl	IsItemIconAnimActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L59
.L48:
	sub	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L52	@cond_branch
	ldr	r1, .L62
	add	r4, r5, r1
	mov	r2, #0xcc
	lsl	r2, r2, #0x4
	add	r1, r5, r2
	ldr	r0, [r4]
	ldr	r1, [r1]
	add	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L62+0x4
	add	r3, r5, r0
	add	r2, r2, #0x4
	add	r1, r5, r2
	ldr	r0, [r3]
	ldr	r1, [r1]
	add	r0, r0, r1
	str	r0, [r3]
	mov	r6, #0xcb
	lsl	r6, r6, #0x4
	add	r1, r5, r6
	ldr	r2, [r1]
	ldr	r0, [r4]
	asr	r0, r0, #0x8
	strh	r0, [r2, #0x20]
	ldr	r2, [r1]
	ldr	r0, [r3]
	asr	r0, r0, #0x8
	strh	r0, [r2, #0x22]
	ldr	r1, [r1]
	ldrh	r2, [r1, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	cmp	r0, r3
	ble	.L53	@cond_branch
	ldr	r4, .L62+0x8
	add	r0, r2, r4
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, #0x40
	strh	r0, [r1, #0x20]
.L53:
	ldr	r0, [r7]
	add	r0, r0, r6
	ldr	r1, [r0]
	ldrh	r2, [r1, #0x20]
	mov	r4, #0x20
	ldrsh	r0, [r1, r4]
	cmp	r0, #0x3f
	bgt	.L54	@cond_branch
	mov	r0, #0x40
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	sub	r0, r3, r0
	strh	r0, [r1, #0x20]
.L54:
	ldr	r0, [r7]
	add	r0, r0, r6
	ldr	r1, [r0]
	ldrh	r2, [r1, #0x22]
	mov	r3, #0x22
	ldrsh	r0, [r1, r3]
	cmp	r0, #0xb0
	ble	.L55	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #0xb0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, #0x10
	strh	r0, [r1, #0x22]
.L55:
	ldr	r0, [r7]
	add	r0, r0, r6
	ldr	r2, [r0]
	ldrh	r3, [r2, #0x22]
	mov	r4, #0x22
	ldrsh	r0, [r2, r4]
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bge	.L56	@cond_branch
	sub	r0, r1, r3
	mov	r1, #0xb0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	sub	r1, r1, r0
	strh	r1, [r2, #0x22]
.L56:
	ldr	r0, [r7]
	ldr	r2, .L62+0xc
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L51	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, r6
	ldr	r2, [r0]
	add	r2, r2, #0x3f
	ldrb	r3, [r2]
	lsr	r1, r3, #0x1
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L51
.L63:
	.align	2, 0
.L62:
	.word	0xcb8
	.word	0xcbc
	.word	-0x100
	.word	0xcd3
.L52:
	mov	r3, #0xcb
	lsl	r3, r3, #0x4
	add	r2, r5, r3
	ldr	r1, [r2]
	ldr	r4, .L64
	add	r0, r5, r4
	ldrh	r0, [r0]
	strh	r0, [r1, #0x20]
	ldr	r1, [r2]
	ldr	r2, .L64+0x4
	add	r0, r5, r2
	ldrh	r0, [r0]
	strh	r0, [r1, #0x22]
	bl	DoCursorNewPosUpdate
.L51:
	mov	r0, #0x1
.L59:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L65:
	.align	2, 0
.L64:
	.word	0xcc8
	.word	0xcca
.Lfe5:
	.size	 UpdateCursorPos,.Lfe5-UpdateCursorPos
	.align	2, 0
	.type	 InitNewCursorPos,function
	.thumb_func
InitNewCursorPos:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r6, sp
	add	r6, r6, #0x2
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, sp
	add	r3, r6, #0
	bl	GetCursorCoordsByPos
	ldr	r1, .L67
	ldr	r0, [r1]
	mov	r2, #0xcd
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	strb	r4, [r0]
	ldr	r0, [r1]
	ldr	r3, .L67+0x4
	add	r0, r0, r3
	strb	r5, [r0]
	ldr	r1, [r1]
	mov	r0, sp
	ldrh	r2, [r0]
	sub	r3, r3, #0x9
	add	r0, r1, r3
	strh	r2, [r0]
	ldrh	r0, [r6]
	ldr	r2, .L67+0x8
	add	r1, r1, r2
	strh	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gStorage
	.word	0xcd1
	.word	0xcca
.Lfe6:
	.size	 InitNewCursorPos,.Lfe6-InitNewCursorPos
	.align	2, 0
	.type	 InitCursorMove,function
	.thumb_func
InitCursorMove:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L86
	ldr	r2, [r0]
	ldr	r3, .L86+0x4
	add	r1, r2, r3
	ldrh	r1, [r1]
	add	r4, r0, #0
	cmp	r1, #0
	beq	.L70	@cond_branch
	ldr	r0, .L86+0x8
	add	r1, r2, r0
	mov	r0, #0xc
	b	.L83
.L87:
	.align	2, 0
.L86:
	.word	gStorage
	.word	0xcce
	.word	0xccc
.L70:
	ldr	r3, .L88
	add	r1, r2, r3
	mov	r0, #0x6
.L83:
	strh	r0, [r1]
	ldr	r1, [r4]
	ldr	r0, .L88+0x4
	add	r2, r1, r0
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L72	@cond_branch
	ldr	r3, .L88
	add	r0, r1, r3
	ldrh	r0, [r0]
	lsr	r0, r0, #0x1
	strb	r0, [r2]
.L72:
	ldr	r2, [r4]
	ldr	r1, .L88+0x8
	add	r0, r2, r1
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L75	@cond_branch
	cmp	r1, #0x1
	beq	.L76	@cond_branch
	ldr	r3, .L88+0xc
	add	r0, r2, r3
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	mov	r3, #0xcb
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldr	r0, [r0]
	mov	r2, #0x22
	ldrsh	r0, [r0, r2]
	b	.L84
.L89:
	.align	2, 0
.L88:
	.word	0xccc
	.word	0xcd3
	.word	0xcce
	.word	0xcca
.L75:
	ldr	r3, .L90
	add	r0, r2, r3
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	mov	r3, #0xcb
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldr	r0, [r0]
	mov	r2, #0x22
	ldrsh	r0, [r0, r2]
	add	r0, r0, #0xc0
	b	.L84
.L91:
	.align	2, 0
.L90:
	.word	0xcca
.L76:
	ldr	r3, .L92
	add	r0, r2, r3
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	mov	r3, #0xcb
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldr	r0, [r0]
	mov	r2, #0x22
	ldrsh	r0, [r0, r2]
	sub	r0, r0, #0xc0
.L84:
	sub	r7, r1, r0
	ldr	r2, [r4]
	ldr	r3, .L92+0x4
	add	r0, r2, r3
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L80	@cond_branch
	cmp	r1, #0x1
	beq	.L81	@cond_branch
	ldr	r1, .L92+0x8
	add	r0, r2, r1
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	mov	r3, #0xcb
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldr	r0, [r0]
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	b	.L85
.L93:
	.align	2, 0
.L92:
	.word	0xcca
	.word	0xccf
	.word	0xcc8
.L80:
	ldr	r3, .L94
	add	r0, r2, r3
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	mov	r3, #0xcb
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldr	r0, [r0]
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	add	r0, r0, #0xc0
	b	.L85
.L95:
	.align	2, 0
.L94:
	.word	0xcc8
.L81:
	ldr	r3, .L96
	add	r0, r2, r3
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	mov	r3, #0xcb
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldr	r0, [r0]
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	sub	r0, r0, #0xc0
.L85:
	sub	r0, r1, r0
	lsl	r7, r7, #0x8
	lsl	r0, r0, #0x8
	ldr	r4, [r4]
	mov	r3, #0xcc
	lsl	r3, r3, #0x4
	add	r6, r4, r3
	ldr	r1, .L96+0x4
	add	r5, r4, r1
	ldrh	r1, [r5]
	bl	__divsi3
	str	r0, [r6]
	ldr	r2, .L96+0x8
	add	r6, r4, r2
	ldrh	r1, [r5]
	add	r0, r7, #0
	bl	__divsi3
	str	r0, [r6]
	ldr	r3, .L96+0xc
	add	r2, r4, r3
	mov	r0, #0xcb
	lsl	r0, r0, #0x4
	add	r1, r4, r0
	ldr	r0, [r1]
	mov	r3, #0x20
	ldrsh	r0, [r0, r3]
	lsl	r0, r0, #0x8
	str	r0, [r2]
	ldr	r0, .L96+0x10
	add	r4, r4, r0
	ldr	r0, [r1]
	mov	r1, #0x22
	ldrsh	r0, [r0, r1]
	lsl	r0, r0, #0x8
	str	r0, [r4]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	0xcc8
	.word	0xccc
	.word	0xcc4
	.word	0xcb8
	.word	0xcbc
.Lfe7:
	.size	 InitCursorMove,.Lfe7-InitCursorMove
	.align	2, 0
	.type	 SetCursorPosition,function
	.thumb_func
SetCursorPosition:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	add	r0, r4, #0
	add	r1, r6, #0
	bl	InitNewCursorPos
	bl	InitCursorMove
	ldr	r5, .L121
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x3
	beq	.L99	@cond_branch
	ldr	r2, .L121+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L101	@cond_branch
	ldr	r0, .L121+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L101	@cond_branch
	mov	r2, #0xcb
	lsl	r2, r2, #0x4
	add	r0, r1, r2
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L101
.L122:
	.align	2, 0
.L121:
	.word	gStorage
	.word	0x21ef
	.word	sIsMonBeingMoved
.L99:
	bl	IsActiveItemMoving
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L101	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	StartSpriteAnim
.L101:
	ldr	r0, .L123
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L103	@cond_branch
	ldr	r0, .L123+0x4
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	bne	.L104	@cond_branch
	ldr	r0, .L123+0x8
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	TryHideItemIconAtPos
	b	.L105
.L124:
	.align	2, 0
.L123:
	.word	gStorage
	.word	sCursorArea
	.word	sCursorPosition
.L104:
	cmp	r0, #0x1
	bne	.L105	@cond_branch
	ldr	r0, .L125
	ldrb	r1, [r0]
	mov	r0, #0x1
	bl	TryHideItemIconAtPos
.L105:
	cmp	r4, #0
	bne	.L107	@cond_branch
	mov	r0, #0x0
	add	r1, r6, #0
	bl	TryLoadItemIconAtPos
	b	.L103
.L126:
	.align	2, 0
.L125:
	.word	sCursorPosition
.L107:
	cmp	r4, #0x1
	bne	.L110	@cond_branch
	mov	r0, #0x1
	add	r1, r6, #0
	bl	TryLoadItemIconAtPos
.L103:
	cmp	r4, #0x1
	bne	.L110	@cond_branch
	ldr	r0, .L127
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	beq	.L110	@cond_branch
	ldr	r1, .L127+0x4
	ldr	r0, [r1]
	ldr	r2, .L127+0x8
	add	r0, r0, r2
	strb	r4, [r0]
	ldr	r0, [r1]
	ldr	r1, .L127+0xc
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
.L110:
	cmp	r4, #0
	beq	.L115	@cond_branch
	cmp	r4, #0
	blt	.L111	@cond_branch
	cmp	r4, #0x3
	bgt	.L111	@cond_branch
	ldr	r5, .L127+0x4
	ldr	r0, [r5]
	mov	r2, #0xcb
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r4, [r0]
	ldrb	r1, [r4, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r1
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r4, #0x5]
	ldr	r0, [r5]
	ldr	r4, .L127+0xc
	add	r0, r0, r4
	ldr	r1, [r0]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x5]
	and	r2, r2, r0
	orr	r2, r2, r3
	strb	r2, [r1, #0x5]
	b	.L111
.L128:
	.align	2, 0
.L127:
	.word	sCursorArea
	.word	gStorage
	.word	0xcd2
	.word	0xcb4
.L115:
	ldr	r3, .L129
	ldr	r1, [r3]
	ldr	r2, .L129+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L116	@cond_branch
	mov	r2, #0xcb
	lsl	r2, r2, #0x4
	add	r0, r1, r2
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldr	r0, [r3]
	ldr	r1, .L129+0x8
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	b	.L111
.L130:
	.align	2, 0
.L129:
	.word	gStorage
	.word	0x21ef
	.word	0xcb4
.L116:
	mov	r2, #0xcb
	lsl	r2, r2, #0x4
	add	r0, r1, r2
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldr	r0, .L131
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	bne	.L111	@cond_branch
	ldr	r0, .L131+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L111	@cond_branch
	mov	r0, #0x2
	bl	SetMovingMonPriority
.L111:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L132:
	.align	2, 0
.L131:
	.word	sCursorArea
	.word	sIsMonBeingMoved
.Lfe8:
	.size	 SetCursorPosition,.Lfe8-SetCursorPosition
	.align	2, 0
	.type	 DoCursorNewPosUpdate,function
	.thumb_func
DoCursorNewPosUpdate:
	push	{r4, lr}
	ldr	r1, .L148
	ldr	r4, .L148+0x4
	ldr	r2, [r4]
	mov	r3, #0xcd
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L148+0x8
	add	r3, r3, #0x1
	add	r0, r2, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x3
	beq	.L134	@cond_branch
	ldr	r1, .L148+0xc
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L136	@cond_branch
	ldr	r0, .L148+0x10
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L136	@cond_branch
	sub	r3, r3, #0x21
	add	r0, r2, r3
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L136
.L149:
	.align	2, 0
.L148:
	.word	sCursorArea
	.word	gStorage
	.word	sCursorPosition
	.word	0x21ef
	.word	sIsMonBeingMoved
.L134:
	bl	IsActiveItemMoving
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L136	@cond_branch
	ldr	r0, [r4]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	StartSpriteAnim
.L136:
	bl	TrySetDisplayMonData
	ldr	r0, .L150
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	beq	.L141	@cond_branch
	cmp	r0, #0x1
	bgt	.L146	@cond_branch
	cmp	r0, #0
	beq	.L142	@cond_branch
	b	.L138
.L151:
	.align	2, 0
.L150:
	.word	sCursorArea
.L146:
	cmp	r0, #0x2
	beq	.L140	@cond_branch
	cmp	r0, #0x3
	bne	.L138	@cond_branch
	b	.L147
.L140:
	mov	r0, #0x1
	bl	AnimateBoxScrollArrows
	b	.L138
.L141:
	ldr	r0, .L152
	ldr	r0, [r0]
	ldr	r2, .L152+0x4
	add	r0, r0, r2
	ldr	r0, [r0]
	add	r0, r0, #0x43
	mov	r1, #0xd
	strb	r1, [r0]
.L147:
	mov	r0, #0x1
	bl	SetMovingMonPriority
	b	.L138
.L153:
	.align	2, 0
.L152:
	.word	gStorage
	.word	0xcb4
.L142:
	ldr	r4, .L154
	ldr	r1, [r4]
	ldr	r3, .L154+0x4
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L138	@cond_branch
	mov	r2, #0xcb
	lsl	r2, r2, #0x4
	add	r0, r1, r2
	ldr	r3, [r0]
	ldrb	r1, [r3, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	ldr	r0, [r4]
	ldr	r3, .L154+0x8
	add	r0, r0, r3
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x5]
	and	r2, r2, r0
	mov	r0, #0x8
	orr	r2, r2, r0
	strb	r2, [r1, #0x5]
	ldr	r0, [r4]
	add	r0, r0, r3
	ldr	r0, [r0]
	add	r0, r0, #0x43
	mov	r1, #0x15
	strb	r1, [r0]
	ldr	r0, [r4]
	add	r0, r0, r3
	ldr	r1, [r0]
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x2
	bl	SetMovingMonPriority
.L138:
	pop	{r4}
	pop	{r0}
	bx	r0
.L155:
	.align	2, 0
.L154:
	.word	gStorage
	.word	0x21ef
	.word	0xcb4
.Lfe9:
	.size	 DoCursorNewPosUpdate,.Lfe9-DoCursorNewPosUpdate
	.align	2, 0
	.globl	SetCursorInParty
	.type	 SetCursorInParty,function
	.thumb_func
SetCursorInParty:
	push	{lr}
	ldr	r0, .L161
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L157	@cond_branch
	mov	r3, #0x0
	b	.L158
.L162:
	.align	2, 0
.L161:
	.word	sIsMonBeingMoved
.L157:
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x5
	bls	.L158	@cond_branch
	mov	r3, #0x5
.L158:
	ldr	r0, .L163
	ldr	r2, [r0]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r2, r1
	ldr	r0, [r0]
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L160	@cond_branch
	ldr	r0, .L163+0x4
	add	r1, r2, r0
	mov	r0, #0x1
	strb	r0, [r1]
.L160:
	mov	r0, #0x1
	add	r1, r3, #0
	bl	SetCursorPosition
	pop	{r0}
	bx	r0
.L164:
	.align	2, 0
.L163:
	.word	gStorage
	.word	0xcd3
.Lfe10:
	.size	 SetCursorInParty,.Lfe10-SetCursorInParty
	.align	2, 0
	.globl	SetCursorBoxPosition
	.type	 SetCursorBoxPosition,function
	.thumb_func
SetCursorBoxPosition:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	SetCursorPosition
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 SetCursorBoxPosition,.Lfe11-SetCursorBoxPosition
	.align	2, 0
	.globl	ClearSavedCursorPos
	.type	 ClearSavedCursorPos,function
	.thumb_func
ClearSavedCursorPos:
	ldr	r1, .L167
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L168:
	.align	2, 0
.L167:
	.word	sSavedCursorPosition
.Lfe12:
	.size	 ClearSavedCursorPos,.Lfe12-ClearSavedCursorPos
	.align	2, 0
	.globl	SaveCursorPos
	.type	 SaveCursorPos,function
	.thumb_func
SaveCursorPos:
	ldr	r0, .L170
	ldr	r1, .L170+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
	bx	lr
.L171:
	.align	2, 0
.L170:
	.word	sSavedCursorPosition
	.word	sCursorPosition
.Lfe13:
	.size	 SaveCursorPos,.Lfe13-SaveCursorPos
	.align	2, 0
	.globl	GetSavedCursorPos
	.type	 GetSavedCursorPos,function
	.thumb_func
GetSavedCursorPos:
	ldr	r0, .L173
	ldrb	r0, [r0]
	bx	lr
.L174:
	.align	2, 0
.L173:
	.word	sSavedCursorPosition
.Lfe14:
	.size	 GetSavedCursorPos,.Lfe14-GetSavedCursorPos
	.section .rodata
	.align	2, 0
	.type	 placeChangeFuncs.51,object
placeChangeFuncs.51:
	.word	MonPlaceChange_Grab
	.word	MonPlaceChange_Place
	.word	MonPlaceChange_Shift
	.size	 placeChangeFuncs.51,12
.text
	.align	2, 0
	.globl	InitMonPlaceChange
	.type	 InitMonPlaceChange,function
	.thumb_func
InitMonPlaceChange:
	lsl	r0, r0, #0x18
	ldr	r1, .L176
	ldr	r1, [r1]
	ldr	r2, .L176+0x4
	add	r3, r1, r2
	ldr	r2, .L176+0x8
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r3]
	ldr	r0, .L176+0xc
	add	r1, r1, r0
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L177:
	.align	2, 0
.L176:
	.word	gStorage
	.word	0xd88
	.word	placeChangeFuncs.51
	.word	0xd8c
.Lfe15:
	.size	 InitMonPlaceChange,.Lfe15-InitMonPlaceChange
	.align	2, 0
	.globl	InitMultiMonPlaceChange
	.type	 InitMultiMonPlaceChange,function
	.thumb_func
InitMultiMonPlaceChange:
	push	{lr}
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L179	@cond_branch
	ldr	r0, .L182
	ldr	r1, [r0]
	ldr	r2, .L182+0x4
	add	r1, r1, r2
	ldr	r2, .L182+0x8
	b	.L181
.L183:
	.align	2, 0
.L182:
	.word	gStorage
	.word	0xd88
	.word	MonPlaceChange_DoMoveCursorDown
.L179:
	ldr	r0, .L184
	ldr	r1, [r0]
	ldr	r2, .L184+0x4
	add	r1, r1, r2
	ldr	r2, .L184+0x8
.L181:
	str	r2, [r1]
	ldr	r0, [r0]
	ldr	r1, .L184+0xc
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	pop	{r0}
	bx	r0
.L185:
	.align	2, 0
.L184:
	.word	gStorage
	.word	0xd88
	.word	MonPlaceChange_DoMoveCursorUp
	.word	0xd8c
.Lfe16:
	.size	 InitMultiMonPlaceChange,.Lfe16-InitMultiMonPlaceChange
	.align	2, 0
	.globl	DoMonPlaceChange
	.type	 DoMonPlaceChange,function
	.thumb_func
DoMonPlaceChange:
	push	{lr}
	ldr	r0, .L187
	ldr	r0, [r0]
	ldr	r1, .L187+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L188:
	.align	2, 0
.L187:
	.word	gStorage
	.word	0xd88
.Lfe17:
	.size	 DoMonPlaceChange,.Lfe17-DoMonPlaceChange
	.align	2, 0
	.type	 MonPlaceChange_Grab,function
	.thumb_func
MonPlaceChange_Grab:
	push	{r4, r5, lr}
	ldr	r4, .L204
	ldr	r1, [r4]
	ldr	r5, .L204+0x4
	add	r0, r1, r5
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L193	@cond_branch
	cmp	r0, #0x1
	bgt	.L200	@cond_branch
	cmp	r0, #0
	beq	.L191	@cond_branch
	b	.L190
.L205:
	.align	2, 0
.L204:
	.word	gStorage
	.word	0xd8c
.L200:
	cmp	r0, #0x2
	beq	.L195	@cond_branch
	cmp	r0, #0x3
	beq	.L203	@cond_branch
	b	.L190
.L191:
	ldr	r0, .L206
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L192	@cond_branch
.L203:
	mov	r0, #0x0
	b	.L201
.L207:
	.align	2, 0
.L206:
	.word	sIsMonBeingMoved
.L192:
	mov	r2, #0xcb
	lsl	r2, r2, #0x4
	add	r0, r1, r2
	ldr	r0, [r0]
	mov	r1, #0x2
	bl	StartSpriteAnim
	b	.L202
.L193:
	bl	MonPlaceChange_MoveCursorDown
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r0, [r4]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	StartSpriteAnim
	bl	MoveMon
	b	.L202
.L195:
	bl	MonPlaceChange_MoveCursorUp
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L190	@cond_branch
.L202:
	ldr	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L190:
	mov	r0, #0x1
.L201:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 MonPlaceChange_Grab,.Lfe18-MonPlaceChange_Grab
	.align	2, 0
	.type	 MonPlaceChange_Place,function
	.thumb_func
MonPlaceChange_Place:
	push	{r4, r5, lr}
	ldr	r4, .L220
	ldr	r0, [r4]
	ldr	r5, .L220+0x4
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L212	@cond_branch
	cmp	r0, #0x1
	bgt	.L217	@cond_branch
	cmp	r0, #0
	beq	.L210	@cond_branch
	b	.L209
.L221:
	.align	2, 0
.L220:
	.word	gStorage
	.word	0xd8c
.L217:
	cmp	r0, #0x2
	beq	.L214	@cond_branch
	b	.L209
.L210:
	bl	MonPlaceChange_MoveCursorDown
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L209	@cond_branch
	ldr	r0, [r4]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x2
	bl	StartSpriteAnim
	bl	PlaceMon
	b	.L219
.L212:
	bl	MonPlaceChange_MoveCursorUp
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L209	@cond_branch
	ldr	r0, [r4]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	StartSpriteAnim
.L219:
	ldr	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L209
.L214:
	mov	r0, #0x0
	b	.L218
.L209:
	mov	r0, #0x1
.L218:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 MonPlaceChange_Place,.Lfe19-MonPlaceChange_Place
	.align	2, 0
	.type	 MonPlaceChange_Shift,function
	.thumb_func
MonPlaceChange_Shift:
	push	{r4, r5, lr}
	ldr	r4, .L239
	ldr	r1, [r4]
	ldr	r5, .L239+0x4
	add	r0, r1, r5
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L230	@cond_branch
	cmp	r0, #0x1
	bgt	.L235	@cond_branch
	cmp	r0, #0
	beq	.L224	@cond_branch
	b	.L223
.L240:
	.align	2, 0
.L239:
	.word	gStorage
	.word	0xd8c
.L235:
	cmp	r0, #0x2
	beq	.L232	@cond_branch
	b	.L223
.L224:
	ldr	r0, .L241
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L227	@cond_branch
	cmp	r0, #0x1
	bne	.L232	@cond_branch
	ldr	r0, .L241+0x4
	add	r1, r1, r0
	mov	r0, #0xe
	b	.L238
.L242:
	.align	2, 0
.L241:
	.word	sCursorArea
	.word	0xd8d
.L227:
	bl	StorageGetCurrentBox
	ldr	r1, [r4]
	ldr	r2, .L243
	add	r1, r1, r2
.L238:
	strb	r0, [r1]
	ldr	r4, .L243+0x4
	ldr	r0, [r4]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x2
	bl	StartSpriteAnim
	ldr	r0, [r4]
	ldr	r2, .L243
	add	r0, r0, r2
	ldrb	r0, [r0]
	ldr	r1, .L243+0x8
	ldrb	r1, [r1]
	bl	SetShiftMonSpritePtr
	ldr	r1, [r4]
	ldr	r0, .L243+0xc
	add	r1, r1, r0
	b	.L237
.L244:
	.align	2, 0
.L243:
	.word	0xd8d
	.word	gStorage
	.word	sCursorPosition
	.word	0xd8c
.L230:
	bl	ShiftMons
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L223	@cond_branch
	ldr	r0, [r4]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	StartSpriteAnim
	ldr	r0, [r4]
	ldr	r2, .L245
	add	r0, r0, r2
	ldrb	r0, [r0]
	ldr	r1, .L245+0x4
	ldrb	r1, [r1]
	bl	SetShiftedMonData
	ldr	r1, [r4]
	add	r1, r1, r5
.L237:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L223
.L246:
	.align	2, 0
.L245:
	.word	0xd8d
	.word	sCursorPosition
.L232:
	mov	r0, #0x0
	b	.L236
.L223:
	mov	r0, #0x1
.L236:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 MonPlaceChange_Shift,.Lfe20-MonPlaceChange_Shift
	.align	2, 0
	.type	 MonPlaceChange_DoMoveCursorDown,function
	.thumb_func
MonPlaceChange_DoMoveCursorDown:
	push	{lr}
	bl	MonPlaceChange_MoveCursorDown
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 MonPlaceChange_DoMoveCursorDown,.Lfe21-MonPlaceChange_DoMoveCursorDown
	.align	2, 0
	.type	 MonPlaceChange_DoMoveCursorUp,function
	.thumb_func
MonPlaceChange_DoMoveCursorUp:
	push	{lr}
	bl	MonPlaceChange_MoveCursorUp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 MonPlaceChange_DoMoveCursorUp,.Lfe22-MonPlaceChange_DoMoveCursorUp
	.align	2, 0
	.type	 MonPlaceChange_MoveCursorDown,function
	.thumb_func
MonPlaceChange_MoveCursorDown:
	push	{lr}
	ldr	r0, .L256
	ldr	r0, [r0]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r2, #0x26
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L252	@cond_branch
	cmp	r0, #0x8
	beq	.L253	@cond_branch
.L252:
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x26]
	b	.L250
.L257:
	.align	2, 0
.L256:
	.word	gStorage
.L253:
	mov	r0, #0x0
	b	.L255
.L250:
	mov	r0, #0x1
.L255:
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 MonPlaceChange_MoveCursorDown,.Lfe23-MonPlaceChange_MoveCursorDown
	.align	2, 0
	.type	 MonPlaceChange_MoveCursorUp,function
	.thumb_func
MonPlaceChange_MoveCursorUp:
	push	{lr}
	ldr	r0, .L264
	ldr	r0, [r0]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r2, #0x26
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L261	@cond_branch
	ldrh	r0, [r1, #0x26]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x26]
	mov	r0, #0x1
	b	.L263
.L265:
	.align	2, 0
.L264:
	.word	gStorage
.L261:
	mov	r0, #0x0
.L263:
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 MonPlaceChange_MoveCursorUp,.Lfe24-MonPlaceChange_MoveCursorUp
	.align	2, 0
	.type	 MoveMon,function
	.thumb_func
MoveMon:
	push	{r4, lr}
	ldr	r0, .L273
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L269	@cond_branch
	cmp	r0, #0x1
	bne	.L266	@cond_branch
	ldr	r4, .L273+0x4
	ldrb	r1, [r4]
	mov	r0, #0xe
	bl	SetMovedMonData
	ldrb	r1, [r4]
	mov	r0, #0x0
	bl	SetMovingMonSprite
	b	.L267
.L274:
	.align	2, 0
.L273:
	.word	sCursorArea
	.word	sCursorPosition
.L269:
	ldr	r0, .L275
	ldr	r0, [r0]
	ldr	r1, .L275+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L267	@cond_branch
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L275+0x8
	ldrb	r1, [r4]
	bl	SetMovedMonData
	ldrb	r1, [r4]
	mov	r0, #0x1
	bl	SetMovingMonSprite
.L267:
	ldr	r1, .L275+0xc
	mov	r0, #0x1
	strb	r0, [r1]
.L266:
	pop	{r4}
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	gStorage
	.word	0x21ef
	.word	sCursorPosition
	.word	sIsMonBeingMoved
.Lfe25:
	.size	 MoveMon,.Lfe25-MoveMon
	.align	2, 0
	.type	 PlaceMon,function
	.thumb_func
PlaceMon:
	push	{r4, r5, lr}
	ldr	r0, .L283
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L280	@cond_branch
	cmp	r0, #0x1
	bne	.L277	@cond_branch
	ldr	r4, .L283+0x4
	ldrb	r1, [r4]
	mov	r0, #0xe
	bl	SetPlacedMonData
	ldrb	r1, [r4]
	mov	r0, #0xe
	bl	SetPlacedMonSprite
	b	.L278
.L284:
	.align	2, 0
.L283:
	.word	sCursorArea
	.word	sCursorPosition
.L280:
	bl	StorageGetCurrentBox
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L285
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	SetPlacedMonData
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	SetPlacedMonSprite
.L278:
	ldr	r1, .L285+0x4
	mov	r0, #0x0
	strb	r0, [r1]
.L277:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L286:
	.align	2, 0
.L285:
	.word	sCursorPosition
	.word	sIsMonBeingMoved
.Lfe26:
	.size	 PlaceMon,.Lfe26-PlaceMon
	.align	2, 0
	.globl	DoTrySetDisplayMonData
	.type	 DoTrySetDisplayMonData,function
	.thumb_func
DoTrySetDisplayMonData:
	push	{lr}
	bl	TrySetDisplayMonData
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 DoTrySetDisplayMonData,.Lfe27-DoTrySetDisplayMonData
	.align	2, 0
	.type	 SetMovedMonData,function
	.thumb_func
SetMovedMonData:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	cmp	r4, #0xe
	bne	.L289	@cond_branch
	ldr	r0, .L291
	ldr	r0, [r0]
	ldr	r1, .L291+0x4
	add	r0, r0, r1
	ldr	r3, .L291+0x8
	ldr	r1, .L291+0xc
	mov	r2, #0x0
	ldrsb	r2, [r1, r2]
	mov	r1, #0x64
	mul	r1, r1, r2
	add	r1, r1, r3
	mov	r2, #0x64
	bl	memcpy
	b	.L290
.L292:
	.align	2, 0
.L291:
	.word	gStorage
	.word	0x20a0
	.word	gPlayerParty
	.word	sCursorPosition
.L289:
	ldr	r0, .L293
	ldr	r2, [r0]
	ldr	r0, .L293+0x4
	add	r2, r2, r0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	BoxMonAtToMon
.L290:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	PurgeMonOrBoxMon
	ldr	r0, .L293+0x8
	strb	r4, [r0]
	ldr	r0, .L293+0xc
	strb	r5, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gStorage
	.word	0x20a0
	.word	sMovingMonOrigBoxId
	.word	sMovingMonOrigBoxPos
.Lfe28:
	.size	 SetMovedMonData,.Lfe28-SetMovedMonData
	.align	2, 0
	.type	 SetPlacedMonData,function
	.thumb_func
SetPlacedMonData:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	cmp	r6, #0xe
	bne	.L296	@cond_branch
	ldr	r1, .L298
	mov	r0, #0x64
	mul	r0, r0, r7
	add	r0, r0, r1
	ldr	r1, .L298+0x4
	ldr	r1, [r1]
	ldr	r2, .L298+0x8
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
	b	.L297
.L299:
	.align	2, 0
.L298:
	.word	gPlayerParty
	.word	gStorage
	.word	0x20a0
.L296:
	ldr	r5, .L300
	ldr	r0, [r5]
	ldr	r4, .L300+0x4
	add	r0, r0, r4
	bl	BoxMonRestorePP
	ldr	r2, [r5]
	add	r2, r2, r4
	add	r0, r6, #0
	add	r1, r7, #0
	bl	SetBoxMonAt
.L297:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L301:
	.align	2, 0
.L300:
	.word	gStorage
	.word	0x20a0
.Lfe29:
	.size	 SetPlacedMonData,.Lfe29-SetPlacedMonData
	.align	2, 0
	.type	 PurgeMonOrBoxMon,function
	.thumb_func
PurgeMonOrBoxMon:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r0, #0xe
	bne	.L303	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L305
	add	r0, r0, r1
	bl	ZeroMonData
	b	.L304
.L306:
	.align	2, 0
.L305:
	.word	gPlayerParty
.L303:
	bl	ZeroBoxMonAt
.L304:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 PurgeMonOrBoxMon,.Lfe30-PurgeMonOrBoxMon
	.align	2, 0
	.type	 SetShiftedMonData,function
	.thumb_func
SetShiftedMonData:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	cmp	r6, #0xe
	bne	.L308	@cond_branch
	ldr	r0, .L310
	ldr	r0, [r0]
	ldr	r1, .L310+0x4
	add	r0, r0, r1
	ldr	r2, .L310+0x8
	mov	r1, #0x64
	mul	r1, r1, r7
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
	b	.L309
.L311:
	.align	2, 0
.L310:
	.word	gStorage
	.word	0x2104
	.word	gPlayerParty
.L308:
	ldr	r0, .L312
	ldr	r2, [r0]
	ldr	r0, .L312+0x4
	add	r2, r2, r0
	add	r0, r6, #0
	add	r1, r7, #0
	bl	BoxMonAtToMon
.L309:
	add	r0, r6, #0
	add	r1, r7, #0
	bl	SetPlacedMonData
	ldr	r5, .L312
	ldr	r1, [r5]
	ldr	r4, .L312+0x8
	add	r0, r1, r4
	ldr	r2, .L312+0x4
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0x0
	bl	SetDisplayMonData
	ldr	r0, .L312+0xc
	strb	r6, [r0]
	ldr	r0, .L312+0x10
	strb	r7, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L313:
	.align	2, 0
.L312:
	.word	gStorage
	.word	0x2104
	.word	0x20a0
	.word	sMovingMonOrigBoxId
	.word	sMovingMonOrigBoxPos
.Lfe31:
	.size	 SetShiftedMonData,.Lfe31-SetShiftedMonData
	.align	2, 0
	.globl	TryStorePartyMonInBox
	.type	 TryStorePartyMonInBox,function
	.thumb_func
TryStorePartyMonInBox:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	bl	GetFirstFreeBoxSpot
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L315	@cond_branch
	mov	r0, #0x0
	b	.L319
.L315:
	ldr	r5, .L320
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L316	@cond_branch
	lsl	r4, r4, #0x18
	lsr	r1, r4, #0x18
	add	r0, r6, #0
	bl	SetPlacedMonData
	bl	DestroyMovingMonIcon
	mov	r0, #0x0
	strb	r0, [r5]
	b	.L317
.L321:
	.align	2, 0
.L320:
	.word	sIsMonBeingMoved
.L316:
	ldr	r5, .L322
	ldrb	r1, [r5]
	mov	r0, #0xe
	bl	SetMovedMonData
	lsl	r4, r4, #0x18
	lsr	r1, r4, #0x18
	add	r0, r6, #0
	bl	SetPlacedMonData
	ldrb	r0, [r5]
	bl	DestroyPartyMonIcon
.L317:
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bne	.L318	@cond_branch
	lsr	r0, r4, #0x18
	bl	CreateBoxMonIconAtPos
.L318:
	ldr	r0, .L322+0x4
	ldr	r0, [r0]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0x1
.L319:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L323:
	.align	2, 0
.L322:
	.word	sCursorPosition
	.word	gStorage
.Lfe32:
	.size	 TryStorePartyMonInBox,.Lfe32-TryStorePartyMonInBox
	.align	2, 0
	.globl	ResetSelectionAfterDeposit
	.type	 ResetSelectionAfterDeposit,function
	.thumb_func
ResetSelectionAfterDeposit:
	push	{lr}
	ldr	r0, .L325
	ldr	r0, [r0]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	StartSpriteAnim
	bl	TrySetDisplayMonData
	pop	{r0}
	bx	r0
.L326:
	.align	2, 0
.L325:
	.word	gStorage
.Lfe33:
	.size	 ResetSelectionAfterDeposit,.Lfe33-ResetSelectionAfterDeposit
	.align	2, 0
	.globl	InitReleaseMon
	.type	 InitReleaseMon,function
	.thumb_func
InitReleaseMon:
	push	{lr}
	ldr	r0, .L332
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L328	@cond_branch
	mov	r2, #0x2
	b	.L329
.L333:
	.align	2, 0
.L332:
	.word	sIsMonBeingMoved
.L328:
	ldr	r0, .L334
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r2, #0x1
	eor	r1, r1, r2
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r2, r0, #0x1f
.L329:
	ldr	r0, .L334+0x4
	ldrb	r1, [r0]
	add	r0, r2, #0
	bl	DoReleaseMonAnim
	ldr	r0, .L334+0x8
	ldr	r1, [r0]
	ldr	r2, .L334+0xc
	add	r0, r1, r2
	ldr	r2, .L334+0x10
	add	r1, r1, r2
	bl	StringCopy
	pop	{r0}
	bx	r0
.L335:
	.align	2, 0
.L334:
	.word	sCursorArea
	.word	sCursorPosition
	.word	gStorage
	.word	0x21d0
	.word	0xcea
.Lfe34:
	.size	 InitReleaseMon,.Lfe34-InitReleaseMon
	.align	2, 0
	.globl	TryHideReleaseMon
	.type	 TryHideReleaseMon,function
	.thumb_func
TryHideReleaseMon:
	push	{lr}
	bl	TryHideReleaseMonSprite
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L337	@cond_branch
	mov	r0, #0x1
	b	.L339
.L337:
	ldr	r0, .L340
	ldr	r0, [r0]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	StartSpriteAnim
	mov	r0, #0x0
.L339:
	pop	{r1}
	bx	r1
.L341:
	.align	2, 0
.L340:
	.word	gStorage
.Lfe35:
	.size	 TryHideReleaseMon,.Lfe35-TryHideReleaseMon
	.align	2, 0
	.globl	ReleaseMon
	.type	 ReleaseMon,function
	.thumb_func
ReleaseMon:
	push	{lr}
	bl	DestroyReleaseMonIcon
	ldr	r1, .L347
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L343	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L344
.L348:
	.align	2, 0
.L347:
	.word	sIsMonBeingMoved
.L343:
	ldr	r0, .L349
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	bne	.L345	@cond_branch
	mov	r2, #0xe
	b	.L346
.L350:
	.align	2, 0
.L349:
	.word	sCursorArea
.L345:
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L346:
	ldr	r0, .L351
	ldrb	r1, [r0]
	add	r0, r2, #0
	bl	PurgeMonOrBoxMon
.L344:
	bl	TrySetDisplayMonData
	pop	{r0}
	bx	r0
.L352:
	.align	2, 0
.L351:
	.word	sCursorPosition
.Lfe36:
	.size	 ReleaseMon,.Lfe36-ReleaseMon
	.align	2, 0
	.globl	TrySetCursorFistAnim
	.type	 TrySetCursorFistAnim,function
	.thumb_func
TrySetCursorFistAnim:
	push	{lr}
	ldr	r0, .L355
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L354	@cond_branch
	ldr	r0, .L355+0x4
	ldr	r0, [r0]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	StartSpriteAnim
.L354:
	pop	{r0}
	bx	r0
.L356:
	.align	2, 0
.L355:
	.word	sIsMonBeingMoved
	.word	gStorage
.Lfe37:
	.size	 TrySetCursorFistAnim,.Lfe37-TrySetCursorFistAnim
	.align	2, 0
	.globl	InitCanReleaseMonVars
	.type	 InitCanReleaseMonVars,function
	.thumb_func
InitCanReleaseMonVars:
	push	{r4, r5, r6, lr}
	ldr	r0, .L365
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L358	@cond_branch
	ldr	r4, .L365+0x4
	ldr	r1, [r4]
	ldr	r2, .L365+0x8
	add	r0, r1, r2
	ldr	r3, .L365+0xc
	add	r1, r1, r3
	mov	r2, #0x64
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, .L365+0x10
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r0, [r4]
	ldr	r2, .L365+0x14
	add	r0, r0, r2
	mov	r1, #0x1
	neg	r1, r1
	b	.L364
.L366:
	.align	2, 0
.L365:
	.word	sIsMonBeingMoved
	.word	gStorage
	.word	0x2104
	.word	0x20a0
	.word	0x216e
	.word	0x216f
.L358:
	ldr	r0, .L367
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	bne	.L360	@cond_branch
	ldr	r4, .L367+0x4
	ldr	r0, [r4]
	ldr	r3, .L367+0x8
	add	r0, r0, r3
	ldr	r3, .L367+0xc
	ldr	r1, .L367+0x10
	mov	r2, #0x0
	ldrsb	r2, [r1, r2]
	mov	r1, #0x64
	mul	r1, r1, r2
	add	r1, r1, r3
	mov	r2, #0x64
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, .L367+0x14
	add	r0, r0, r1
	mov	r1, #0xe
	strb	r1, [r0]
	b	.L361
.L368:
	.align	2, 0
.L367:
	.word	sCursorArea
	.word	gStorage
	.word	0x2104
	.word	gPlayerParty
	.word	sCursorPosition
	.word	0x216e
.L360:
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L369
	ldrb	r1, [r1]
	ldr	r4, .L369+0x4
	ldr	r2, [r4]
	ldr	r3, .L369+0x8
	add	r2, r2, r3
	bl	BoxMonAtToMon
	bl	StorageGetCurrentBox
	ldr	r1, [r4]
	ldr	r2, .L369+0xc
	add	r1, r1, r2
	strb	r0, [r1]
.L361:
	ldr	r0, .L369+0x4
	ldr	r0, [r0]
	ldr	r1, .L369
	ldrb	r1, [r1]
	ldr	r3, .L369+0x10
	add	r0, r0, r3
.L364:
	strb	r1, [r0]
	ldr	r6, .L369+0x4
	ldr	r0, [r6]
	ldr	r4, .L369+0x14
	add	r0, r0, r4
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r5, .L369+0x18
	add	r0, r0, r5
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r1, .L369+0x1c
	add	r2, r0, r1
	mov	r1, #0x39
	strh	r1, [r2]
	ldr	r1, .L369+0x20
	add	r3, r0, r1
	ldr	r1, .L369+0x24
	strh	r1, [r3]
	ldr	r1, .L369+0x28
	add	r3, r0, r1
	ldr	r1, .L369+0x2c
	strh	r1, [r3]
	ldr	r3, .L369+0x8
	add	r0, r0, r3
	mov	r1, #0x51
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r1, [r6]
	mov	r2, #0x1
	and	r3, r3, r2
	add	r1, r1, r4
	strb	r3, [r1]
	ldr	r1, [r6]
	lsr	r0, r0, #0x11
	mov	r2, #0x1
	and	r0, r0, r2
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r1, [r6]
	add	r4, r1, r4
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L362	@cond_branch
	ldr	r0, .L369+0x30
	add	r1, r1, r0
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L363
.L370:
	.align	2, 0
.L369:
	.word	sCursorPosition
	.word	gStorage
	.word	0x2104
	.word	0x216e
	.word	0x216f
	.word	0x216a
	.word	0x216b
	.word	0x2172
	.word	0x2174
	.word	0x123
	.word	0x2176
	.word	0x163
	.word	0x2169
.L362:
	ldr	r3, .L371
	add	r0, r1, r3
	strb	r2, [r0]
	ldr	r0, [r6]
	ldr	r1, .L371+0x4
	add	r0, r0, r1
	strb	r2, [r0]
.L363:
	ldr	r0, .L371+0x8
	ldr	r0, [r0]
	ldr	r2, .L371+0xc
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	0x2169
	.word	0x2168
	.word	gStorage
	.word	0x2170
.Lfe38:
	.size	 InitCanReleaseMonVars,.Lfe38-InitCanReleaseMonVars
	.align	2, 0
	.globl	RunCanReleaseMon
	.type	 RunCanReleaseMon,function
	.thumb_func
RunCanReleaseMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L405
	ldr	r3, [r0]
	ldr	r2, .L405+0x4
	add	r1, r3, r2
	ldrb	r1, [r1]
	mov	ip, r0
	cmp	r1, #0
	beq	.L374	@cond_branch
	ldr	r1, .L405+0x8
	add	r0, r3, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	b	.L402
.L406:
	.align	2, 0
.L405:
	.word	gStorage
	.word	0x2169
	.word	0x2168
.L374:
	ldr	r2, .L407
	add	r0, r3, r2
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L376	@cond_branch
	cmp	r0, #0x1
	beq	.L388	@cond_branch
	b	.L375
.L408:
	.align	2, 0
.L407:
	.word	0x2170
.L376:
	mov	r6, #0x0
	mov	r5, ip
	mov	r7, #0x0
.L380:
	ldr	r2, [r5]
	ldr	r1, .L409
	add	r0, r2, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xe
	bne	.L382	@cond_branch
	add	r1, r1, #0x1
	add	r0, r2, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, r6
	beq	.L379	@cond_branch
.L382:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L409+0x4
	add	r0, r0, r1
	ldr	r1, .L409+0x8
	add	r2, r2, r1
	mov	r1, #0x51
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L383	@cond_branch
	ldr	r0, [r5]
	ldr	r2, .L409+0xc
	add	r0, r0, r2
	strb	r7, [r0]
.L383:
	mov	r0, #0x2
	and	r4, r4, r0
	ldr	r0, .L409+0x10
	mov	ip, r0
	cmp	r4, #0
	beq	.L379	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L409+0x14
	add	r0, r0, r1
	strb	r7, [r0]
.L379:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x5
	bls	.L380	@cond_branch
	mov	r2, ip
	ldr	r1, [r2]
	ldr	r2, .L409+0xc
	add	r0, r1, r2
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.LCB3217
	b	.L404	@long jump
.LCB3217:
	ldr	r2, .L409+0x18
	add	r0, r1, r2
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r2, ip
	ldr	r0, [r2]
	ldr	r2, .L409+0x1c
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r0, ip
	ldr	r1, [r0]
	add	r2, r2, #0x3
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L375
.L410:
	.align	2, 0
.L409:
	.word	0x216e
	.word	gPlayerParty
	.word	0x2172
	.word	0x216a
	.word	gStorage
	.word	0x216b
	.word	0x216c
	.word	0x216d
.L403:
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r2, .L411
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r1, ip
	ldr	r0, [r1]
	sub	r2, r2, #0x1
	add	r0, r0, r2
	strb	r3, [r0]
	b	.L390
.L412:
	.align	2, 0
.L411:
	.word	0x2169
.L388:
	mov	r6, #0x0
	mov	r7, ip
	ldr	r0, .L413
	mov	r8, r0
.L392:
	ldr	r3, [r7]
	ldr	r1, .L413+0x4
	add	r0, r3, r1
	ldrb	r0, [r0]
	ldr	r2, .L413+0x8
	add	r1, r3, r2
	ldrb	r1, [r1]
	add	r2, r2, #0x5
	add	r3, r3, r2
	mov	r2, #0x51
	bl	GetAndCopyBoxMonDataAt
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.L393	@cond_branch
	ldr	r5, [r7]
	ldr	r1, .L413+0xc
	add	r0, r5, r1
	ldrh	r2, [r0]
	sub	r1, r1, #0x2
	add	r0, r5, r1
	ldrh	r3, [r0]
	mov	r1, r8
	and	r1, r1, r2
	mov	r0, r8
	and	r0, r0, r3
	cmp	r1, r0
	beq	.L393	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L394	@cond_branch
	ldr	r2, .L413+0x10
	add	r1, r5, r2
	mov	r0, #0x0
	strb	r0, [r1]
.L394:
	mov	r0, #0x2
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L393	@cond_branch
	ldr	r0, [r7]
	ldr	r1, .L413+0x14
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
.L393:
	ldr	r2, .L413+0x18
	ldr	r1, [r2]
	ldr	r0, .L413+0x8
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	ip, r2
	cmp	r0, #0x1d
	ble	.L391	@cond_branch
	ldr	r0, [r2]
	ldr	r1, .L413+0x8
	add	r0, r0, r1
	strb	r3, [r0]
	ldr	r1, [r2]
	ldr	r2, .L413+0x4
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0xd
	bgt	.L403	@cond_branch
.L391:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x4
	bls	.L392	@cond_branch
.L390:
	mov	r0, ip
	ldr	r1, [r0]
	ldr	r2, .L413+0x10
	add	r0, r1, r2
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L375	@cond_branch
.L404:
	sub	r2, r2, #0x1
	add	r0, r1, r2
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r2, ip
	ldr	r0, [r2]
	ldr	r2, .L413+0x1c
	add	r0, r0, r2
	strb	r1, [r0]
.L375:
	mov	r0, #0x1
	neg	r0, r0
.L402:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L414:
	.align	2, 0
.L413:
	.word	0xffff
	.word	0x216c
	.word	0x216d
	.word	0x216e
	.word	0x216a
	.word	0x216b
	.word	gStorage
	.word	0x2168
.Lfe39:
	.size	 RunCanReleaseMon,.Lfe39-RunCanReleaseMon
	.align	2, 0
	.globl	SaveMovingMon
	.type	 SaveMovingMon,function
	.thumb_func
SaveMovingMon:
	push	{lr}
	ldr	r0, .L417
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L416	@cond_branch
	ldr	r0, .L417+0x4
	ldr	r1, .L417+0x8
	ldr	r1, [r1]
	ldr	r2, .L417+0xc
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
.L416:
	pop	{r0}
	bx	r0
.L418:
	.align	2, 0
.L417:
	.word	sIsMonBeingMoved
	.word	sMonBeingCarried
	.word	gStorage
	.word	0x20a0
.Lfe40:
	.size	 SaveMovingMon,.Lfe40-SaveMovingMon
	.align	2, 0
	.globl	LoadSavedMovingMon
	.type	 LoadSavedMovingMon,function
	.thumb_func
LoadSavedMovingMon:
	push	{lr}
	ldr	r0, .L423
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L420	@cond_branch
	ldr	r0, .L423+0x4
	ldrb	r0, [r0]
	cmp	r0, #0xe
	bne	.L421	@cond_branch
	ldr	r0, .L423+0x8
	ldr	r0, [r0]
	ldr	r1, .L423+0xc
	add	r0, r0, r1
	ldr	r1, .L423+0x10
	mov	r2, #0x64
	bl	memcpy
	b	.L420
.L424:
	.align	2, 0
.L423:
	.word	sIsMonBeingMoved
	.word	sMovingMonOrigBoxId
	.word	gStorage
	.word	0x20a0
	.word	sMonBeingCarried
.L421:
	ldr	r0, .L425
	ldr	r0, [r0]
	ldr	r1, .L425+0x4
	add	r0, r0, r1
	ldr	r1, .L425+0x8
	mov	r2, #0x50
	bl	memcpy
.L420:
	pop	{r0}
	bx	r0
.L426:
	.align	2, 0
.L425:
	.word	gStorage
	.word	0x20a0
	.word	sMonBeingCarried
.Lfe41:
	.size	 LoadSavedMovingMon,.Lfe41-LoadSavedMovingMon
	.align	2, 0
	.globl	InitSummaryScreenData
	.type	 InitSummaryScreenData,function
	.thumb_func
InitSummaryScreenData:
	push	{r4, r5, lr}
	ldr	r0, .L432
	ldrb	r5, [r0]
	cmp	r5, #0
	beq	.L428	@cond_branch
	bl	SaveMovingMon
	ldr	r3, .L432+0x4
	ldr	r1, [r3]
	ldr	r0, .L432+0x8
	add	r2, r1, r0
	ldr	r0, .L432+0xc
	str	r0, [r2]
	ldr	r2, .L432+0x10
	add	r1, r1, r2
	mov	r2, #0x0
	strb	r2, [r1]
	ldr	r0, [r3]
	ldr	r4, .L432+0x14
	add	r0, r0, r4
	strb	r2, [r0]
	ldr	r0, [r3]
	ldr	r1, .L432+0x18
	add	r0, r0, r1
	strb	r2, [r0]
	b	.L429
.L433:
	.align	2, 0
.L432:
	.word	sIsMonBeingMoved
	.word	gStorage
	.word	0x217c
	.word	sMonBeingCarried
	.word	0x2179
	.word	0x2178
	.word	0x217a
.L428:
	ldr	r0, .L434
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	bne	.L430	@cond_branch
	ldr	r4, .L434+0x4
	ldr	r1, [r4]
	ldr	r0, .L434+0x8
	add	r2, r1, r0
	ldr	r0, .L434+0xc
	str	r0, [r2]
	ldr	r0, .L434+0x10
	ldrb	r0, [r0]
	ldr	r2, .L434+0x14
	add	r1, r1, r2
	strb	r0, [r1]
	bl	CountPartyMons
	ldr	r1, [r4]
	sub	r0, r0, #0x1
	ldr	r2, .L434+0x18
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r0, [r4]
	ldr	r4, .L434+0x1c
	add	r0, r0, r4
	strb	r5, [r0]
	b	.L429
.L435:
	.align	2, 0
.L434:
	.word	sCursorArea
	.word	gStorage
	.word	0x217c
	.word	gPlayerParty
	.word	sCursorPosition
	.word	0x2179
	.word	0x2178
	.word	0x217a
.L430:
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetBoxedMonPtr
	ldr	r3, .L436
	ldr	r2, [r3]
	ldr	r4, .L436+0x4
	add	r1, r2, r4
	str	r0, [r1]
	ldr	r0, .L436+0x8
	ldrb	r0, [r0]
	ldr	r1, .L436+0xc
	add	r2, r2, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	ldr	r2, .L436+0x10
	add	r0, r0, r2
	mov	r1, #0x1d
	strb	r1, [r0]
	ldr	r0, [r3]
	sub	r4, r4, #0x2
	add	r0, r0, r4
	mov	r1, #0x5
	strb	r1, [r0]
.L429:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L437:
	.align	2, 0
.L436:
	.word	gStorage
	.word	0x217c
	.word	sCursorPosition
	.word	0x2179
	.word	0x2178
.Lfe42:
	.size	 InitSummaryScreenData,.Lfe42-InitSummaryScreenData
	.align	2, 0
	.globl	SetSelectionAfterSummaryScreen
	.type	 SetSelectionAfterSummaryScreen,function
	.thumb_func
SetSelectionAfterSummaryScreen:
	push	{r4, lr}
	ldr	r0, .L441
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L439	@cond_branch
	bl	LoadSavedMovingMon
	b	.L440
.L442:
	.align	2, 0
.L441:
	.word	sIsMonBeingMoved
.L439:
	ldr	r4, .L443
	bl	GetLastViewedMonIndex
	strb	r0, [r4]
.L440:
	pop	{r4}
	pop	{r0}
	bx	r0
.L444:
	.align	2, 0
.L443:
	.word	sCursorPosition
.Lfe43:
	.size	 SetSelectionAfterSummaryScreen,.Lfe43-SetSelectionAfterSummaryScreen
	.align	2, 0
	.globl	CompactPartySlots
	.type	 CompactPartySlots,function
	.thumb_func
CompactPartySlots:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r7, .L461
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r0, #0x64
	mov	r9, r0
	ldr	r1, .L461+0x4
	mov	r8, r1
	sub	r0, r0, #0x65
	mov	sl, r0
.L449:
	mov	r0, r9
	mul	r0, r0, r6
	mov	r1, r8
	add	r4, r0, r1
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L450	@cond_branch
	cmp	r6, r5
	beq	.L451	@cond_branch
	mov	r0, r9
	mul	r0, r0, r5
	add	r0, r0, r8
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
.L451:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	b	.L448
.L462:
	.align	2, 0
.L461:
	.word	0xffff
	.word	gPlayerParty
.L450:
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	cmp	r0, sl
	bne	.L448	@cond_branch
	add	r7, r6, #0
.L448:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x5
	bls	.L449	@cond_branch
	lsl	r7, r7, #0x10
	cmp	r5, #0x5
	bhi	.L460	@cond_branch
	mov	r6, #0x64
	ldr	r4, .L463
.L458:
	mov	r0, r5
	mul	r0, r0, r6
	add	r0, r0, r4
	bl	ZeroMonData
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x5
	bls	.L458	@cond_branch
.L460:
	asr	r0, r7, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L464:
	.align	2, 0
.L463:
	.word	gPlayerParty
.Lfe44:
	.size	 CompactPartySlots,.Lfe44-CompactPartySlots
	.align	2, 0
	.globl	SetMonMarkings
	.type	 SetMonMarkings,function
	.thumb_func
SetMonMarkings:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	strb	r0, [r1]
	ldr	r2, .L470
	ldr	r1, [r2]
	ldr	r3, .L470+0x4
	add	r1, r1, r3
	strb	r0, [r1]
	ldr	r0, .L470+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L466	@cond_branch
	ldr	r0, [r2]
	ldr	r1, .L470+0xc
	add	r0, r0, r1
	mov	r1, #0x8
	mov	r2, sp
	bl	SetMonData
	b	.L467
.L471:
	.align	2, 0
.L470:
	.word	gStorage
	.word	0xce7
	.word	sIsMonBeingMoved
	.word	0x20a0
.L466:
	ldr	r4, .L472
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0x1
	bne	.L468	@cond_branch
	ldr	r0, .L472+0x4
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L472+0x8
	add	r0, r0, r1
	mov	r1, #0x8
	mov	r2, sp
	bl	SetMonData
.L468:
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0
	bne	.L467	@cond_branch
	ldr	r0, .L472+0x4
	ldrb	r0, [r0]
	mov	r1, #0x8
	mov	r2, sp
	bl	SetCurrentBoxMonData
.L467:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L473:
	.align	2, 0
.L472:
	.word	sCursorArea
	.word	sCursorPosition
	.word	gPlayerParty
.Lfe45:
	.size	 SetMonMarkings,.Lfe45-SetMonMarkings
	.align	2, 0
	.globl	CanMovePartyMon
	.type	 CanMovePartyMon,function
	.thumb_func
CanMovePartyMon:
	push	{lr}
	ldr	r0, .L478
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	bne	.L475	@cond_branch
	ldr	r0, .L478+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L475	@cond_branch
	ldr	r0, .L478+0x8
	ldrb	r0, [r0]
	bl	CountPartyAliveNonEggMonsExcept
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L475	@cond_branch
	mov	r0, #0x1
	b	.L477
.L479:
	.align	2, 0
.L478:
	.word	sCursorArea
	.word	sIsMonBeingMoved
	.word	sCursorPosition
.L475:
	mov	r0, #0x0
.L477:
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 CanMovePartyMon,.Lfe46-CanMovePartyMon
	.align	2, 0
	.globl	CanShiftMon
	.type	 CanShiftMon,function
	.thumb_func
CanShiftMon:
	push	{lr}
	ldr	r0, .L486
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L481	@cond_branch
	ldr	r0, .L486+0x4
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	bne	.L482	@cond_branch
	ldr	r0, .L486+0x8
	ldrb	r0, [r0]
	bl	CountPartyAliveNonEggMonsExcept
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L482	@cond_branch
	ldr	r0, .L486+0xc
	ldr	r1, [r0]
	ldr	r2, .L486+0x10
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L481	@cond_branch
	ldr	r2, .L486+0x14
	add	r0, r1, r2
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L481	@cond_branch
.L482:
	mov	r0, #0x1
	b	.L485
.L487:
	.align	2, 0
.L486:
	.word	sIsMonBeingMoved
	.word	sCursorArea
	.word	sCursorPosition
	.word	gStorage
	.word	0xce9
	.word	0x20a0
.L481:
	mov	r0, #0x0
.L485:
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 CanShiftMon,.Lfe47-CanShiftMon
	.align	2, 0
	.globl	IsMonBeingMoved
	.type	 IsMonBeingMoved,function
	.thumb_func
IsMonBeingMoved:
	ldr	r0, .L489
	ldrb	r0, [r0]
	bx	lr
.L490:
	.align	2, 0
.L489:
	.word	sIsMonBeingMoved
.Lfe48:
	.size	 IsMonBeingMoved,.Lfe48-IsMonBeingMoved
	.align	2, 0
	.globl	IsCursorOnBoxTitle
	.type	 IsCursorOnBoxTitle,function
	.thumb_func
IsCursorOnBoxTitle:
	push	{lr}
	mov	r1, #0x0
	ldr	r0, .L493
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x2
	bne	.L492	@cond_branch
	mov	r1, #0x1
.L492:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L494:
	.align	2, 0
.L493:
	.word	sCursorArea
.Lfe49:
	.size	 IsCursorOnBoxTitle,.Lfe49-IsCursorOnBoxTitle
	.align	2, 0
	.globl	IsCursorOnCloseBox
	.type	 IsCursorOnCloseBox,function
	.thumb_func
IsCursorOnCloseBox:
	push	{lr}
	mov	r1, #0x0
	ldr	r0, .L497
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x3
	bne	.L496	@cond_branch
	ldr	r0, .L497+0x4
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	bne	.L496	@cond_branch
	mov	r1, #0x1
.L496:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L498:
	.align	2, 0
.L497:
	.word	sCursorArea
	.word	sCursorPosition
.Lfe50:
	.size	 IsCursorOnCloseBox,.Lfe50-IsCursorOnCloseBox
	.align	2, 0
	.globl	IsCursorInBox
	.type	 IsCursorInBox,function
	.thumb_func
IsCursorInBox:
	push	{lr}
	mov	r1, #0x0
	ldr	r0, .L501
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	bne	.L500	@cond_branch
	mov	r1, #0x1
.L500:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L502:
	.align	2, 0
.L501:
	.word	sCursorArea
.Lfe51:
	.size	 IsCursorInBox,.Lfe51-IsCursorInBox
	.align	2, 0
	.type	 TrySetDisplayMonData,function
	.thumb_func
TrySetDisplayMonData:
	push	{r4, lr}
	ldr	r0, .L515
	ldr	r1, [r0]
	mov	r2, #0x0
	ldr	r3, .L515+0x4
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L504	@cond_branch
	mov	r2, #0x1
.L504:
	ldr	r4, .L515+0x8
	add	r0, r1, r4
	strb	r2, [r0]
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L505	@cond_branch
	ldr	r0, .L515+0xc
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	beq	.L507	@cond_branch
	cmp	r0, #0x1
	bgt	.L514	@cond_branch
	cmp	r0, #0
	beq	.L511	@cond_branch
	b	.L505
.L516:
	.align	2, 0
.L515:
	.word	gStorage
	.word	sIsMonBeingMoved
	.word	0xce6
	.word	sCursorArea
.L514:
	cmp	r0, #0x3
	bgt	.L505	@cond_branch
	b	.L510
.L507:
	ldr	r1, .L517
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L510	@cond_branch
	add	r1, r0, #0
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L517+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	bl	SetDisplayMonData
	b	.L505
.L518:
	.align	2, 0
.L517:
	.word	sCursorPosition
	.word	gPlayerParty
.L510:
	mov	r0, #0x0
	mov	r1, #0x2
	bl	SetDisplayMonData
	b	.L505
.L511:
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L519
	ldrb	r1, [r1]
	bl	GetBoxedMonPtr
	mov	r1, #0x1
	bl	SetDisplayMonData
.L505:
	pop	{r4}
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	sCursorPosition
.Lfe52:
	.size	 TrySetDisplayMonData,.Lfe52-TrySetDisplayMonData
	.align	2, 0
	.type	 ReshowDisplayMon,function
	.thumb_func
ReshowDisplayMon:
	push	{lr}
	ldr	r0, .L524
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L522	@cond_branch
	ldr	r0, .L524+0x4
	mov	r1, #0x0
	bl	SetDisplayMonData
	b	.L523
.L525:
	.align	2, 0
.L524:
	.word	sIsMonBeingMoved
	.word	sMonBeingCarried
.L522:
	bl	TrySetDisplayMonData
.L523:
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 ReshowDisplayMon,.Lfe53-ReshowDisplayMon
	.align	2, 0
	.type	 SetDisplayMonData,function
	.thumb_func
SetDisplayMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r5, r1, #0
	ldr	r0, .L554
	mov	r8, r0
	ldr	r1, [r0]
	ldr	r3, .L554+0x4
	add	r2, r1, r3
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r9, r0
	mov	sl, r0
	cmp	r5, #0
	bne	.L527	@cond_branch
	add	r6, r4, #0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r2, r8
	ldr	r1, [r2]
	mov	r3, #0xce
	lsl	r3, r3, #0x4
	add	r1, r1, r3
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.LCB4334
	b	.L552	@long jump
.LCB4334:
	add	r0, r4, #0
	mov	r1, #0x4
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0
	beq	.L529	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L554+0x8
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L530
.L555:
	.align	2, 0
.L554:
	.word	gStorage
	.word	0xce2
	.word	0xce9
.L529:
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, r8
	ldr	r1, [r3]
	ldr	r2, .L556
	add	r1, r1, r2
	strb	r0, [r1]
.L530:
	ldr	r4, .L556+0x4
	ldr	r2, [r4]
	ldr	r5, .L556+0x8
	add	r2, r2, r5
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetMonData
	ldr	r0, [r4]
	add	r0, r0, r5
	bl	StringGet_Nickname
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r3, .L556+0xc
	add	r1, r1, r3
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x8
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r2, .L556+0x10
	add	r1, r1, r2
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r3, .L556+0x14
	add	r1, r1, r3
	str	r0, [r1]
	add	r0, r6, #0
	bl	GetMonFrontSpritePal
	ldr	r1, [r4]
	ldr	r2, .L556+0x18
	add	r1, r1, r2
	str	r0, [r1]
	add	r0, r6, #0
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	add	r0, r6, #0
	mov	r1, #0xc
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r3, .L556+0x1c
	add	r1, r1, r3
	strh	r0, [r1]
	b	.L531
.L557:
	.align	2, 0
.L556:
	.word	0xce9
	.word	gStorage
	.word	0xcea
	.word	0xce8
	.word	0xce7
	.word	0xcdc
	.word	0xcd8
	.word	0xce2
.L527:
	cmp	r5, #0x1
	beq	.LCB4454
	b	.L532	@long jump
.LCB4454:
	add	r7, r4, #0
	add	r0, r7, #0
	mov	r1, #0x41
	bl	GetBoxMonData
	mov	r2, r8
	ldr	r1, [r2]
	mov	r3, #0xce
	lsl	r3, r3, #0x4
	add	r1, r1, r3
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.LCB4472
	b	.L552	@long jump
.LCB4472:
	add	r0, r7, #0
	mov	r1, #0x1
	bl	GetBoxMonData
	mov	r9, r0
	add	r0, r7, #0
	mov	r1, #0x4
	bl	GetBoxMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0
	beq	.L534	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L558
	add	r0, r0, r2
	strb	r5, [r0]
	b	.L535
.L559:
	.align	2, 0
.L558:
	.word	0xce9
.L534:
	add	r0, r7, #0
	mov	r1, #0x2d
	bl	GetBoxMonData
	mov	r3, r8
	ldr	r1, [r3]
	ldr	r2, .L560
	add	r1, r1, r2
	strb	r0, [r1]
.L535:
	ldr	r5, .L560+0x4
	ldr	r2, [r5]
	ldr	r4, .L560+0x8
	add	r2, r2, r4
	add	r0, r7, #0
	mov	r1, #0x2
	bl	GetBoxMonData
	ldr	r0, [r5]
	add	r0, r0, r4
	bl	StringGet_Nickname
	add	r0, r7, #0
	bl	GetLevelFromBoxMonExp
	ldr	r1, [r5]
	ldr	r3, .L560+0xc
	add	r1, r1, r3
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x8
	bl	GetBoxMonData
	ldr	r1, [r5]
	ldr	r2, .L560+0x10
	add	r1, r1, r2
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x0
	bl	GetBoxMonData
	add	r2, r0, #0
	ldr	r1, [r5]
	ldr	r6, .L560+0x14
	add	r0, r1, r6
	str	r2, [r0]
	sub	r4, r4, #0xa
	add	r1, r1, r4
	ldrh	r0, [r1]
	mov	r1, r9
	bl	GetMonSpritePalFromSpeciesAndPersonality
	ldr	r1, [r5]
	ldr	r3, .L560+0x18
	add	r2, r1, r3
	str	r0, [r2]
	add	r4, r1, r4
	ldrh	r0, [r4]
	add	r1, r1, r6
	ldr	r1, [r1]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	add	r0, r7, #0
	mov	r1, #0xc
	bl	GetBoxMonData
	ldr	r1, [r5]
	ldr	r2, .L560+0x1c
	add	r1, r1, r2
	strh	r0, [r1]
	b	.L531
.L561:
	.align	2, 0
.L560:
	.word	0xce9
	.word	gStorage
	.word	0xcea
	.word	0xce8
	.word	0xce7
	.word	0xcdc
	.word	0xcd8
	.word	0xce2
.L532:
	mov	r3, #0xce
	lsl	r3, r3, #0x4
	add	r0, r1, r3
	mov	r1, r9
	strh	r1, [r0]
	strh	r1, [r2]
.L531:
	ldr	r0, .L562
	ldr	r1, [r0]
	mov	r2, #0xce
	lsl	r2, r2, #0x4
	add	r0, r1, r2
	ldrh	r2, [r0]
	cmp	r2, #0
	bne	.L537	@cond_branch
.L552:
	ldr	r4, .L562
	ldr	r0, [r4]
	ldr	r3, .L562+0x4
	add	r0, r0, r3
	mov	r1, #0x0
	mov	r2, #0x5
	bl	StringFill
	ldr	r0, [r4]
	ldr	r1, .L562+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	mov	r2, #0x8
	bl	StringFill
	ldr	r0, [r4]
	ldr	r2, .L562+0xc
	add	r0, r0, r2
	mov	r1, #0x0
	mov	r2, #0x8
	bl	StringFill
	ldr	r0, [r4]
	ldr	r3, .L562+0x10
	add	r0, r0, r3
	mov	r1, #0x0
	mov	r2, #0x8
	bl	StringFill
	ldr	r0, [r4]
	ldr	r1, .L562+0x14
	add	r0, r0, r1
	b	.L553
.L563:
	.align	2, 0
.L562:
	.word	gStorage
	.word	0xcea
	.word	0xcf5
	.word	0xd19
	.word	0xd3d
	.word	0xd61
.L537:
	ldr	r3, .L564
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L539	@cond_branch
	mov	r0, sl
	cmp	r0, #0
	beq	.L540	@cond_branch
	ldr	r2, .L564+0x4
	add	r0, r1, r2
	add	r3, r3, #0x1
	add	r1, r1, r3
	mov	r2, #0x0
	mov	r3, #0x5
	bl	StringCopyPadded
	b	.L541
.L565:
	.align	2, 0
.L564:
	.word	0xce9
	.word	0xcf5
.L540:
	ldr	r2, .L566
	add	r0, r1, r2
	ldr	r1, .L566+0x4
	mov	r2, #0x0
	mov	r3, #0x8
	bl	StringCopyPadded
.L541:
	ldr	r4, .L566+0x8
	ldr	r0, [r4]
	ldr	r3, .L566+0xc
	add	r0, r0, r3
	mov	r1, #0x0
	mov	r2, #0x8
	bl	StringFill
	ldr	r0, [r4]
	ldr	r1, .L566+0x10
	add	r0, r0, r1
	mov	r1, #0x0
	mov	r2, #0x8
	bl	StringFill
	ldr	r0, [r4]
	ldr	r2, .L566+0x14
	add	r0, r0, r2
.L553:
	mov	r1, #0x0
	mov	r2, #0x8
	bl	StringFill
	b	.L538
.L567:
	.align	2, 0
.L566:
	.word	0xcf5
	.word	gText_EggNickname
	.word	gStorage
	.word	0xd19
	.word	0xd3d
	.word	0xd61
.L539:
	cmp	r2, #0x1d
	beq	.L544	@cond_branch
	cmp	r2, #0x20
	bne	.L543	@cond_branch
.L544:
	mov	r3, #0xff
	mov	r9, r3
.L543:
	ldr	r4, .L568
	ldr	r1, [r4]
	ldr	r2, .L568+0x4
	add	r0, r1, r2
	ldr	r3, .L568+0x8
	add	r1, r1, r3
	mov	r2, #0x0
	mov	r3, #0x5
	bl	StringCopyPadded
	ldr	r1, [r4]
	ldr	r0, .L568+0xc
	add	r2, r1, r0
	mov	r0, #0xba
	strb	r0, [r2]
	ldr	r3, .L568+0x10
	add	r2, r1, r3
	ldr	r0, [r4]
	mov	r1, #0xce
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L568+0x14
	add	r1, r1, r0
	add	r0, r2, #0
	mov	r2, #0x0
	mov	r3, #0x5
	bl	StringCopyPadded
	ldr	r4, [r4]
	ldr	r3, .L568+0x18
	add	r2, r4, r3
	mov	r0, #0xfc
	strb	r0, [r2]
	ldr	r0, .L568+0x1c
	add	r2, r4, r0
	mov	r0, #0x4
	strb	r0, [r2]
	ldr	r1, .L568+0x20
	add	r2, r4, r1
	mov	r3, r9
	cmp	r3, #0
	beq	.L546	@cond_branch
	cmp	r3, #0xfe
	beq	.L547	@cond_branch
	mov	r0, #0x2
	strb	r0, [r2]
	mov	r0, #0xd4
	lsl	r0, r0, #0x4
	add	r2, r4, r0
	mov	r0, #0x1
	strb	r0, [r2]
	add	r1, r1, #0x2
	add	r2, r4, r1
	mov	r0, #0x3
	strb	r0, [r2]
	ldr	r3, .L568+0x24
	add	r2, r4, r3
	mov	r0, #0x0
	strb	r0, [r2]
	ldr	r0, .L568+0x28
	add	r2, r4, r0
	b	.L545
.L569:
	.align	2, 0
.L568:
	.word	gStorage
	.word	0xcf5
	.word	0xcea
	.word	0xd19
	.word	0xd1a
	.word	gSpeciesNames
	.word	0xd3d
	.word	0xd3e
	.word	0xd3f
	.word	0xd42
	.word	0xd43
.L546:
	strb	r0, [r2]
	mov	r1, #0xd4
	lsl	r1, r1, #0x4
	add	r2, r4, r1
	mov	r0, #0x1
	strb	r0, [r2]
	ldr	r3, .L570
	add	r2, r4, r3
	mov	r0, #0x5
	strb	r0, [r2]
	ldr	r0, .L570+0x4
	add	r2, r4, r0
	mov	r0, #0xb5
	strb	r0, [r2]
	add	r1, r1, #0x3
	add	r2, r4, r1
	b	.L545
.L571:
	.align	2, 0
.L570:
	.word	0xd41
	.word	0xd42
.L547:
	mov	r0, #0x6
	strb	r0, [r2]
	mov	r3, #0xd4
	lsl	r3, r3, #0x4
	add	r2, r4, r3
	mov	r0, #0x1
	strb	r0, [r2]
	ldr	r0, .L572
	add	r2, r4, r0
	mov	r0, #0x7
	strb	r0, [r2]
	ldr	r1, .L572+0x4
	add	r2, r4, r1
	mov	r0, #0xb6
	strb	r0, [r2]
	add	r3, r3, #0x3
	add	r2, r4, r3
.L545:
	mov	r0, #0xfc
	strb	r0, [r2]
	add	r2, r2, #0x1
	mov	r0, #0x4
	strb	r0, [r2]
	add	r2, r2, #0x1
	mov	r0, #0x2
	strb	r0, [r2]
	add	r2, r2, #0x1
	mov	r0, #0x1
	strb	r0, [r2]
	add	r2, r2, #0x1
	mov	r0, #0x3
	strb	r0, [r2]
	add	r2, r2, #0x1
	mov	r5, #0x0
	strb	r5, [r2]
	add	r2, r2, #0x1
	mov	r0, #0xf9
	strb	r0, [r2]
	add	r2, r2, #0x1
	mov	r0, #0x5
	strb	r0, [r2]
	add	r2, r2, #0x1
	ldr	r4, .L572+0x8
	ldr	r0, [r4]
	ldr	r1, .L572+0xc
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r2, #0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r2, r0, #0
	strb	r5, [r2]
	mov	r0, #0xff
	strb	r0, [r2, #0x1]
	ldr	r4, [r4]
	ldr	r2, .L572+0x10
	add	r1, r4, r2
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L550	@cond_branch
	ldr	r3, .L572+0x14
	add	r4, r4, r3
	bl	ItemId_GetName
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	mov	r3, #0x8
	bl	StringCopyPadded
	b	.L538
.L573:
	.align	2, 0
.L572:
	.word	0xd41
	.word	0xd42
	.word	gStorage
	.word	0xce8
	.word	0xce2
	.word	0xd61
.L550:
	ldr	r1, .L574
	add	r0, r4, r1
	mov	r1, #0x0
	mov	r2, #0x8
	bl	StringFill
.L538:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L575:
	.align	2, 0
.L574:
	.word	0xd61
.Lfe54:
	.size	 SetDisplayMonData,.Lfe54-SetDisplayMonData
	.align	2, 0
	.type	 HandleInput_InBox,function
	.thumb_func
HandleInput_InBox:
	push	{lr}
	ldr	r0, .L588
	ldr	r0, [r0]
	ldr	r1, .L588+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L580	@cond_branch
	cmp	r0, #0x1
	ble	.L579	@cond_branch
	cmp	r0, #0x2
	beq	.L581	@cond_branch
.L579:
	bl	HandleInput_InBox_Normal
	b	.L586
.L589:
	.align	2, 0
.L588:
	.word	gStorage
	.word	0x21ef
.L580:
	bl	HandleInput_InBox_GrabbingMultiple
	b	.L586
.L581:
	bl	HandleInput_InBox_MovingMultiple
.L586:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe55:
	.size	 HandleInput_InBox,.Lfe55-HandleInput_InBox
	.align	2, 0
	.type	 HandleInput_InBox_Normal,function
	.thumb_func
HandleInput_InBox_Normal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L637
	ldrb	r0, [r0]
	mov	r8, r0
	ldr	r2, .L637+0x4
	ldrb	r4, [r2]
	ldr	r5, .L637+0x8
	ldr	r0, [r5]
	ldr	r1, .L637+0xc
	mov	sl, r1
	add	r0, r0, sl
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r5]
	ldr	r7, .L637+0x10
	add	r0, r0, r7
	strb	r1, [r0]
	ldr	r0, [r5]
	ldr	r3, .L637+0x14
	mov	r9, r3
	add	r0, r0, r9
	strb	r1, [r0]
	ldr	r6, .L637+0x18
	ldrh	r1, [r6, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	add	r3, r2, #0
	cmp	r0, #0
	beq	.LCB5084
	b	.L635	@long jump
.LCB5084:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L598	@cond_branch
	mov	r6, #0x1
	lsl	r0, r4, #0x18
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsr	r4, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x1d
	bgt	.LCB5108
	b	.L592	@long jump
.LCB5108:
	mov	r2, #0x3
	mov	r8, r2
	sub	r0, r0, #0x1e
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, [r5]
	add	r0, r0, sl
	strb	r6, [r0]
	ldr	r0, [r5]
	add	r0, r0, r9
	strb	r6, [r0]
	b	.L592
.L638:
	.align	2, 0
.L637:
	.word	sCursorArea
	.word	sCursorPosition
	.word	gStorage
	.word	0xcce
	.word	0xccf
	.word	0xcd3
	.word	gMain
.L598:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L601	@cond_branch
	mov	r6, #0x1
	mov	r0, #0x0
	ldrsb	r0, [r3, r0]
	mov	r1, #0x6
	bl	__modsi3
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L602	@cond_branch
	lsl	r0, r4, #0x18
	mov	r3, #0xff
	lsl	r3, r3, #0x18
	b	.L636
.L602:
	ldr	r0, [r5]
	add	r0, r0, r7
	mov	r1, #0xff
	strb	r1, [r0]
	lsl	r0, r4, #0x18
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsr	r4, r0, #0x18
	b	.L592
.L601:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L605	@cond_branch
	mov	r6, #0x1
	mov	r0, #0x0
	ldrsb	r0, [r3, r0]
	add	r0, r0, #0x1
	mov	r1, #0x6
	bl	__modsi3
	cmp	r0, #0
	beq	.L606	@cond_branch
	lsl	r0, r4, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r4, r0, #0x18
	b	.L592
.L606:
	ldr	r0, [r5]
	add	r0, r0, r7
	strb	r6, [r0]
	lsl	r0, r4, #0x18
	mov	r3, #0xfb
	lsl	r3, r3, #0x18
	b	.L636
.L605:
	ldrh	r1, [r6, #0x2e]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L597	@cond_branch
	mov	r6, #0x1
	b	.L595
.L597:
	mov	r4, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L610	@cond_branch
	bl	SetSelectionMenuTexts
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L610	@cond_branch
	ldr	r0, .L639
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L611	@cond_branch
	mov	r0, #0x8
	b	.L634
.L640:
	.align	2, 0
.L639:
	.word	sInMultiMoveMode
.L611:
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x2
	bne	.L613	@cond_branch
	ldr	r0, .L641
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L612	@cond_branch
.L613:
	mov	r0, #0x0
	bl	GetMenuItemTextId
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0xe
	bhi	.L610	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L641+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L642:
	.align	2, 0
.L641:
	.word	sIsMonBeingMoved
	.word	.L623
	.align	2, 0
	.align	2, 0
.L623:
	.word	.L615
	.word	.L616
	.word	.L617
	.word	.L618
	.word	.L619
	.word	.L610
	.word	.L610
	.word	.L610
	.word	.L610
	.word	.L610
	.word	.L610
	.word	.L620
	.word	.L621
	.word	.L610
	.word	.L622
.L615:
	mov	r0, #0xb
	b	.L634
.L616:
	mov	r0, #0xc
	b	.L634
.L617:
	mov	r0, #0xd
	b	.L634
.L618:
	mov	r0, #0xe
	b	.L634
.L619:
	mov	r0, #0xf
	b	.L634
.L620:
	mov	r0, #0x10
	b	.L634
.L621:
	mov	r0, #0x11
	b	.L634
.L622:
	mov	r0, #0x12
	b	.L634
.L612:
	ldr	r2, .L643
	add	r0, r1, r2
	strb	r4, [r0]
	mov	r0, #0x14
	b	.L634
.L644:
	.align	2, 0
.L643:
	.word	0x21ef
.L610:
	ldr	r2, .L645
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L626	@cond_branch
	mov	r0, #0x13
	b	.L634
.L646:
	.align	2, 0
.L645:
	.word	gMain
.L626:
	ldr	r0, .L647
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L627	@cond_branch
	ldrh	r1, [r2, #0x2c]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L628	@cond_branch
	mov	r0, #0xa
	b	.L634
.L648:
	.align	2, 0
.L647:
	.word	gSaveBlock2Ptr
.L628:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L627	@cond_branch
	mov	r0, #0x9
	b	.L634
.L627:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L630	@cond_branch
	bl	ToggleCursorMultiMoveMode
	mov	r0, #0x0
	b	.L634
.L630:
	mov	r6, #0x0
	b	.L633
.L635:
	mov	r6, #0x1
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x5
	ble	.L595	@cond_branch
	lsl	r0, r4, #0x18
	mov	r3, #0xfa
	lsl	r3, r3, #0x18
.L636:
	add	r0, r0, r3
	lsr	r4, r0, #0x18
	b	.L592
.L595:
	mov	r0, #0x2
	mov	r8, r0
	mov	r4, #0x0
.L592:
	cmp	r6, #0
	beq	.L633	@cond_branch
	mov	r0, r8
	add	r1, r4, #0
	bl	SetCursorPosition
.L633:
	add	r0, r6, #0
.L634:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 HandleInput_InBox_Normal,.Lfe56-HandleInput_InBox_Normal
	.align	2, 0
	.type	 HandleInput_InBox_GrabbingMultiple,function
	.thumb_func
HandleInput_InBox_GrabbingMultiple:
	push	{r4, lr}
	ldr	r1, .L673
	ldrh	r0, [r1, #0x2c]
	mov	r4, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L650	@cond_branch
	ldrh	r1, [r1, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L651	@cond_branch
	ldr	r4, .L673+0x4
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	mov	r1, #0x6
	bl	__divsi3
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L664	@cond_branch
	ldrb	r1, [r4]
	sub	r1, r1, #0x6
	b	.L672
.L674:
	.align	2, 0
.L673:
	.word	gMain
	.word	sCursorPosition
.L651:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L655	@cond_branch
	ldr	r1, .L675
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	add	r0, r0, #0x6
	cmp	r0, #0x1d
	bgt	.L664	@cond_branch
	ldrb	r1, [r1]
	add	r1, r1, #0x6
	b	.L672
.L676:
	.align	2, 0
.L675:
	.word	sCursorPosition
.L655:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L659	@cond_branch
	ldr	r4, .L677
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	mov	r1, #0x6
	bl	__modsi3
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L664	@cond_branch
	ldrb	r1, [r4]
	sub	r1, r1, #0x1
	b	.L672
.L678:
	.align	2, 0
.L677:
	.word	sCursorPosition
.L659:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L663	@cond_branch
	ldr	r4, .L679
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	add	r0, r0, #0x1
	mov	r1, #0x6
	bl	__modsi3
	cmp	r0, #0
	beq	.L664	@cond_branch
	ldrb	r1, [r4]
	add	r1, r1, #0x1
.L672:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	SetCursorPosition
	mov	r0, #0x15
	b	.L671
.L680:
	.align	2, 0
.L679:
	.word	sCursorPosition
.L664:
	mov	r0, #0x18
	b	.L671
.L663:
	mov	r0, #0x0
	b	.L671
.L650:
	bl	MultiMove_GetOriginPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L681
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	cmp	r0, r1
	beq	.L668	@cond_branch
	ldr	r2, .L681+0x4
	ldr	r0, .L681+0x8
	ldr	r1, [r0]
	mov	r3, #0xce
	lsl	r3, r3, #0x4
	add	r0, r1, r3
	ldrh	r0, [r0]
	neg	r0, r0
	lsr	r0, r0, #0x1f
	strb	r0, [r2]
	ldr	r0, .L681+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	strb	r0, [r1]
	bl	StorageGetCurrentBox
	ldr	r1, .L681+0x10
	strb	r0, [r1]
	mov	r0, #0x17
	b	.L671
.L682:
	.align	2, 0
.L681:
	.word	sCursorPosition
	.word	sIsMonBeingMoved
	.word	gStorage
	.word	0x21ef
	.word	sMovingMonOrigBoxId
.L668:
	ldr	r1, .L683
	ldr	r0, [r1]
	ldr	r2, .L683+0x4
	add	r0, r0, r2
	strb	r4, [r0]
	ldr	r0, [r1]
	ldr	r3, .L683+0x8
	add	r0, r0, r3
	ldr	r1, [r0]
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x16
.L671:
	pop	{r4}
	pop	{r1}
	bx	r1
.L684:
	.align	2, 0
.L683:
	.word	gStorage
	.word	0x21ef
	.word	0xcb4
.Lfe57:
	.size	 HandleInput_InBox_GrabbingMultiple,.Lfe57-HandleInput_InBox_GrabbingMultiple
	.align	2, 0
	.type	 HandleInput_InBox_MovingMultiple,function
	.thumb_func
HandleInput_InBox_MovingMultiple:
	push	{r4, lr}
	ldr	r2, .L716
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L686	@cond_branch
	mov	r0, #0x0
	bl	MultiMove_TryMoveGroup
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L713	@cond_branch
	ldr	r0, .L716+0x4
	ldrb	r1, [r0]
	sub	r1, r1, #0x6
	b	.L712
.L717:
	.align	2, 0
.L716:
	.word	gMain
	.word	sCursorPosition
.L686:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L690	@cond_branch
	mov	r0, #0x1
	bl	MultiMove_TryMoveGroup
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L713	@cond_branch
	ldr	r0, .L718
	ldrb	r1, [r0]
	add	r1, r1, #0x6
	b	.L712
.L719:
	.align	2, 0
.L718:
	.word	sCursorPosition
.L690:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L694	@cond_branch
	mov	r0, #0x2
	bl	MultiMove_TryMoveGroup
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L714	@cond_branch
	ldr	r0, .L720
	ldrb	r1, [r0]
	sub	r1, r1, #0x1
	b	.L712
.L721:
	.align	2, 0
.L720:
	.word	sCursorPosition
.L694:
	mov	r0, #0x10
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.L698	@cond_branch
	mov	r0, #0x3
	bl	MultiMove_TryMoveGroup
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L715	@cond_branch
	ldr	r0, .L722
	ldrb	r1, [r0]
	add	r1, r1, #0x1
.L712:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	SetCursorPosition
	mov	r0, #0x19
	b	.L711
.L723:
	.align	2, 0
.L722:
	.word	sCursorPosition
.L698:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L702	@cond_branch
	bl	MultiMove_CanPlaceSelection
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L713	@cond_branch
	ldr	r0, .L724
	strb	r4, [r0]
	ldr	r0, .L724+0x4
	ldr	r0, [r0]
	ldr	r1, .L724+0x8
	add	r0, r0, r1
	strb	r4, [r0]
	mov	r0, #0x1a
	b	.L711
.L725:
	.align	2, 0
.L724:
	.word	sIsMonBeingMoved
	.word	gStorage
	.word	0x21ef
.L702:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L706	@cond_branch
.L713:
	mov	r0, #0x18
	b	.L711
.L706:
	ldr	r0, .L726
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L708	@cond_branch
	ldrh	r1, [r2, #0x2c]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L709	@cond_branch
.L714:
	mov	r0, #0xa
	b	.L711
.L727:
	.align	2, 0
.L726:
	.word	gSaveBlock2Ptr
.L709:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L708	@cond_branch
.L715:
	mov	r0, #0x9
	b	.L711
.L708:
	mov	r0, #0x0
.L711:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe58:
	.size	 HandleInput_InBox_MovingMultiple,.Lfe58-HandleInput_InBox_MovingMultiple
	.align	2, 0
	.type	 HandleInput_InParty,function
	.thumb_func
HandleInput_InParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L773
	ldrb	r0, [r0]
	mov	r9, r0
	ldr	r6, .L773+0x4
	ldrb	r4, [r6]
	ldr	r2, .L773+0x8
	ldr	r0, [r2]
	ldr	r1, .L773+0xc
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r3, .L773+0x10
	add	r0, r0, r3
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r3, r3, #0x5
	add	r0, r0, r3
	strb	r1, [r0]
	mov	r8, r1
	mov	r7, #0x0
	ldr	r1, .L773+0x14
	ldrh	r3, [r1, #0x30]
	mov	r0, #0x40
	and	r0, r0, r3
	add	r5, r6, #0
	mov	ip, r1
	cmp	r0, #0
	beq	.LCB6032
	b	.L772	@long jump
.LCB6032:
	mov	r0, #0x80
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L736	@cond_branch
	lsl	r0, r4, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r4, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x6
	ble	.L737	@cond_branch
	mov	r4, #0x0
.L737:
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x0
	ldrsb	r1, [r5, r1]
	cmp	r0, r1
	bne	.LCB6063
	b	.L730	@long jump
.LCB6063:
	mov	r7, #0x1
	b	.L770
.L774:
	.align	2, 0
.L773:
	.word	sCursorArea
	.word	sCursorPosition
	.word	gStorage
	.word	0xccf
	.word	0xcce
	.word	gMain
.L736:
	mov	r0, #0x20
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L740	@cond_branch
	ldrb	r1, [r5]
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	cmp	r0, #0
	beq	.L740	@cond_branch
	mov	r7, #0x1
	ldr	r0, [r2]
	ldr	r2, .L775
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r4, #0x0
	b	.L730
.L776:
	.align	2, 0
.L775:
	.word	0xcd2
.L740:
	mov	r3, ip
	ldrh	r1, [r3, #0x30]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L735	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	cmp	r0, #0
	bne	.L743	@cond_branch
	mov	r7, #0x1
	ldr	r0, [r2]
	ldr	r1, .L777
	add	r0, r0, r1
	ldrb	r4, [r0]
	b	.L730
.L778:
	.align	2, 0
.L777:
	.word	0xcd2
.L743:
	mov	r7, #0x6
	mov	r2, #0x0
	mov	r9, r2
	mov	r4, #0x0
	b	.L730
.L735:
	mov	r3, ip
	ldrh	r1, [r3, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L745	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	cmp	r0, #0x6
	bne	.L746	@cond_branch
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L747	@cond_branch
	mov	r0, #0x4
	b	.L771
.L747:
	mov	r0, #0x1
	mov	r8, r0
	b	.L745
.L746:
	bl	SetSelectionMenuTexts
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L745	@cond_branch
	ldr	r0, .L779
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L750	@cond_branch
	mov	r0, #0x8
	b	.L771
.L780:
	.align	2, 0
.L779:
	.word	sInMultiMoveMode
.L750:
	mov	r0, #0x0
	bl	GetMenuItemTextId
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0xe
	bhi	.L745	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L781
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L782:
	.align	2, 0
.L781:
	.word	.L760
	.align	2, 0
	.align	2, 0
.L760:
	.word	.L752
	.word	.L753
	.word	.L754
	.word	.L755
	.word	.L756
	.word	.L745
	.word	.L745
	.word	.L745
	.word	.L745
	.word	.L745
	.word	.L745
	.word	.L757
	.word	.L758
	.word	.L745
	.word	.L759
.L752:
	mov	r0, #0xb
	b	.L771
.L753:
	mov	r0, #0xc
	b	.L771
.L754:
	mov	r0, #0xd
	b	.L771
.L755:
	mov	r0, #0xe
	b	.L771
.L756:
	mov	r0, #0xf
	b	.L771
.L757:
	mov	r0, #0x10
	b	.L771
.L758:
	mov	r0, #0x11
	b	.L771
.L759:
	mov	r0, #0x12
	b	.L771
.L745:
	ldr	r2, .L783
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	mov	ip, r2
	cmp	r0, #0
	beq	.L762	@cond_branch
	ldr	r0, .L783+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L763	@cond_branch
	mov	r0, #0x13
	b	.L771
.L784:
	.align	2, 0
.L783:
	.word	gMain
	.word	gStorage
.L763:
	mov	r1, #0x1
	mov	r8, r1
.L762:
	mov	r2, r8
	cmp	r2, #0
	beq	.L764	@cond_branch
	mov	r7, #0x6
	mov	r3, #0x0
	mov	r9, r3
	mov	r4, #0x0
	b	.L730
.L764:
	mov	r0, ip
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L730	@cond_branch
	bl	ToggleCursorMultiMoveMode
	mov	r0, #0x0
	b	.L771
.L772:
	lsl	r0, r4, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r4, r0, #0x18
	cmp	r0, #0
	bge	.L733	@cond_branch
	mov	r4, #0x6
.L733:
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x0
	ldrsb	r1, [r6, r1]
	cmp	r0, r1
	beq	.L730	@cond_branch
	mov	r7, #0x1
.L730:
	cmp	r7, #0
	beq	.L769	@cond_branch
.L770:
	cmp	r7, #0x6
	beq	.L769	@cond_branch
	mov	r0, r9
	add	r1, r4, #0
	bl	SetCursorPosition
.L769:
	add	r0, r7, #0
.L771:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 HandleInput_InParty,.Lfe59-HandleInput_InParty
	.align	2, 0
	.type	 HandleInput_BoxTitle,function
	.thumb_func
HandleInput_BoxTitle:
	push	{r4, r5, r6, lr}
	ldr	r3, .L808
	ldr	r0, [r3]
	ldr	r1, .L808+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r3]
	ldr	r2, .L808+0x8
	add	r0, r0, r2
	strb	r1, [r0]
	ldr	r0, [r3]
	ldr	r5, .L808+0xc
	add	r0, r0, r5
	strb	r1, [r0]
	ldr	r1, .L808+0x10
	ldrh	r2, [r1, #0x30]
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L805	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L790	@cond_branch
	mov	r4, #0x1
	mov	r1, #0x0
	mov	r6, #0x2
	b	.L787
.L809:
	.align	2, 0
.L808:
	.word	gStorage
	.word	0xccf
	.word	0xcce
	.word	0xcd3
	.word	gMain
.L790:
	ldrh	r2, [r1, #0x2c]
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L806	@cond_branch
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L807	@cond_branch
	ldr	r0, .L810
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L794	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L795	@cond_branch
.L806:
	mov	r0, #0xa
	b	.L804
.L811:
	.align	2, 0
.L810:
	.word	gSaveBlock2Ptr
.L795:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L794	@cond_branch
.L807:
	mov	r0, #0x9
	b	.L804
.L794:
	ldrh	r1, [r1, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L797	@cond_branch
	mov	r0, #0x0
	bl	AnimateBoxScrollArrows
	bl	AddBoxMenu
	mov	r0, #0x7
	b	.L804
.L797:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L798	@cond_branch
	mov	r0, #0x13
	b	.L804
.L798:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L799	@cond_branch
	bl	ToggleCursorMultiMoveMode
	mov	r0, #0x0
	b	.L804
.L799:
	mov	r4, #0x0
	b	.L802
.L805:
	mov	r4, #0x1
	mov	r1, #0x3
	mov	r6, #0x0
	ldr	r0, [r3]
	add	r0, r0, r5
	strb	r4, [r0]
.L787:
	cmp	r4, #0
	beq	.L802	@cond_branch
	lsl	r5, r1, #0x18
	cmp	r1, #0x2
	beq	.L803	@cond_branch
	mov	r0, #0x0
	bl	AnimateBoxScrollArrows
.L803:
	lsr	r0, r5, #0x18
	lsl	r1, r6, #0x18
	lsr	r1, r1, #0x18
	bl	SetCursorPosition
.L802:
	add	r0, r4, #0
.L804:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 HandleInput_BoxTitle,.Lfe60-HandleInput_BoxTitle
	.align	2, 0
	.type	 HandleInput_OnButtons,function
	.thumb_func
HandleInput_OnButtons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L837
	ldrb	r0, [r0]
	mov	r8, r0
	ldr	r0, .L837+0x4
	mov	ip, r0
	ldrb	r2, [r0]
	ldr	r3, .L837+0x8
	ldr	r0, [r3]
	ldr	r1, .L837+0xc
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r3]
	ldr	r6, .L837+0x10
	add	r0, r0, r6
	strb	r1, [r0]
	ldr	r0, [r3]
	ldr	r5, .L837+0x14
	add	r0, r0, r5
	strb	r1, [r0]
	ldr	r7, .L837+0x18
	ldrh	r1, [r7, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	add	r4, r3, #0
	cmp	r0, #0
	bne	.L835	@cond_branch
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L819	@cond_branch
	mov	r7, #0x1
	mov	r0, #0x2
	mov	r8, r0
	mov	r2, #0x0
	ldr	r0, [r4]
	b	.L836
.L838:
	.align	2, 0
.L837:
	.word	sCursorArea
	.word	sCursorPosition
	.word	gStorage
	.word	0xccf
	.word	0xcce
	.word	0xcd3
	.word	gMain
.L819:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L821	@cond_branch
	mov	r7, #0x1
	lsl	r0, r2, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r2, r0, #0x18
	cmp	r0, #0
	bge	.L814	@cond_branch
	mov	r2, #0x1
	b	.L814
.L821:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L823	@cond_branch
	mov	r7, #0x1
	lsl	r0, r2, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r2, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x1
	ble	.L814	@cond_branch
	mov	r2, #0x0
	b	.L814
.L823:
	ldrh	r1, [r7, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L826	@cond_branch
	mov	r0, #0x4
	cmp	r2, #0
	bne	.L834	@cond_branch
	mov	r0, #0x5
	b	.L834
.L826:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L829	@cond_branch
	mov	r0, #0x13
	b	.L834
.L829:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L830	@cond_branch
	bl	ToggleCursorMultiMoveMode
	mov	r0, #0x0
	b	.L834
.L830:
	mov	r7, #0x0
	b	.L833
.L835:
	mov	r7, #0x1
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, [r3]
	add	r0, r0, r6
	mov	r1, #0xff
	strb	r1, [r0]
	mov	r1, ip
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	mov	r2, #0x1d
	cmp	r0, #0
	bne	.L817	@cond_branch
	mov	r2, #0x18
.L817:
	ldr	r0, [r3]
.L836:
	add	r0, r0, r5
	strb	r7, [r0]
.L814:
	cmp	r7, #0
	beq	.L833	@cond_branch
	mov	r0, r8
	add	r1, r2, #0
	bl	SetCursorPosition
.L833:
	add	r0, r7, #0
.L834:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe61:
	.size	 HandleInput_OnButtons,.Lfe61-HandleInput_OnButtons
	.section .rodata
	.align	2, 0
	.type	 inputFuncs.193,object
inputFuncs.193:
	.word	HandleInput_InBox
	.byte	0x0
	.space	3
	.word	HandleInput_InParty
	.byte	0x1
	.space	3
	.word	HandleInput_BoxTitle
	.byte	0x2
	.space	3
	.word	HandleInput_OnButtons
	.byte	0x3
	.space	3
	.word	0x0
	.byte	0x0
	.space	3
.text
	.align	2, 0
	.globl	HandleInput
	.type	 HandleInput,function
	.thumb_func
HandleInput:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r0, .L846
	ldr	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0
	beq	.L841	@cond_branch
	ldr	r5, .L846+0x4
.L842:
	lsl	r0, r3, #0x3
	add	r2, r0, r4
	mov	r1, #0x4
	ldrsb	r1, [r2, r1]
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	cmp	r1, r0
	bne	.L843	@cond_branch
	ldr	r0, [r2]
	bl	_call_via_r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L845
.L847:
	.align	2, 0
.L846:
	.word	inputFuncs.193
	.word	sCursorArea
.L843:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	lsl	r0, r3, #0x3
	add	r0, r0, r4
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L842	@cond_branch
.L841:
	mov	r0, #0x0
.L845:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe62:
	.size	 HandleInput,.Lfe62-HandleInput
	.align	2, 0
	.type	 AddBoxMenu,function
	.thumb_func
AddBoxMenu:
	push	{lr}
	bl	InitMenu
	mov	r0, #0x9
	bl	SetMenuText
	mov	r0, #0xa
	bl	SetMenuText
	mov	r0, #0xb
	bl	SetMenuText
	mov	r0, #0x0
	bl	SetMenuText
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 AddBoxMenu,.Lfe63-AddBoxMenu
	.align	2, 0
	.type	 SetSelectionMenuTexts,function
	.thumb_func
SetSelectionMenuTexts:
	push	{lr}
	bl	InitMenu
	ldr	r0, .L855
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L850	@cond_branch
	bl	SetMenuTextsForItem
	b	.L854
.L856:
	.align	2, 0
.L855:
	.word	gStorage
.L850:
	bl	SetMenuTextsForMon
.L854:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 SetSelectionMenuTexts,.Lfe64-SetSelectionMenuTexts
	.align	2, 0
	.type	 SetMenuTextsForMon,function
	.thumb_func
SetMenuTextsForMon:
	push	{lr}
	bl	GetSpeciesAtCursorPosition
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L880
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	beq	.L859	@cond_branch
	cmp	r0, #0x1
	bgt	.L875	@cond_branch
	cmp	r0, #0
	beq	.L862	@cond_branch
	b	.L873
.L881:
	.align	2, 0
.L880:
	.word	gStorage
.L875:
	cmp	r0, #0x2
	beq	.L865	@cond_branch
	b	.L873
.L859:
	cmp	r1, #0
	beq	.L873	@cond_branch
	mov	r0, #0x1
	bl	SetMenuText
	b	.L858
.L862:
	cmp	r1, #0
	beq	.L873	@cond_branch
	mov	r0, #0x2
	bl	SetMenuText
	b	.L858
.L865:
	ldr	r0, .L882
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L866	@cond_branch
	cmp	r1, #0
	beq	.L867	@cond_branch
	mov	r0, #0x4
	bl	SetMenuText
	b	.L858
.L883:
	.align	2, 0
.L882:
	.word	sIsMonBeingMoved
.L867:
	mov	r0, #0x5
	bl	SetMenuText
	b	.L858
.L866:
	cmp	r1, #0
	beq	.L870	@cond_branch
	mov	r0, #0x3
	bl	SetMenuText
	b	.L858
.L870:
.L873:
	mov	r0, #0x0
	b	.L879
.L858:
	mov	r0, #0x6
	bl	SetMenuText
	ldr	r0, .L884
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x2
	bne	.L876	@cond_branch
	ldr	r0, .L884+0x4
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	bne	.L877	@cond_branch
	mov	r0, #0x2
	bl	SetMenuText
	b	.L876
.L885:
	.align	2, 0
.L884:
	.word	gStorage
	.word	sCursorArea
.L877:
	mov	r0, #0x1
	bl	SetMenuText
.L876:
	mov	r0, #0x8
	bl	SetMenuText
	mov	r0, #0x7
	bl	SetMenuText
	mov	r0, #0x0
	bl	SetMenuText
	mov	r0, #0x1
.L879:
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 SetMenuTextsForMon,.Lfe65-SetMenuTextsForMon
	.align	2, 0
	.type	 SetMenuTextsForItem,function
	.thumb_func
SetMenuTextsForItem:
	push	{r4, r5, lr}
	ldr	r4, .L900
	ldr	r0, [r4]
	mov	r5, #0xce
	lsl	r5, r5, #0x4
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L900+0x4
	cmp	r1, r0
	beq	.L899	@cond_branch
	bl	IsActiveItemMoving
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L888	@cond_branch
	ldr	r2, [r4]
	ldr	r0, .L900+0x8
	add	r1, r2, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L889	@cond_branch
	add	r0, r2, r5
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L899	@cond_branch
	mov	r0, #0xe
	bl	SetMenuText
	b	.L893
.L901:
	.align	2, 0
.L900:
	.word	gStorage
	.word	0x19d
	.word	0xce2
.L889:
	ldrh	r0, [r1]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L892	@cond_branch
	mov	r0, #0xc
	bl	SetMenuText
	mov	r0, #0x10
	bl	SetMenuText
.L892:
	mov	r0, #0x11
	bl	SetMenuText
	b	.L893
.L888:
	ldr	r2, [r4]
	ldr	r0, .L902
	add	r1, r2, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L894	@cond_branch
	add	r0, r2, r5
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L899	@cond_branch
	mov	r0, #0xd
	bl	SetMenuText
	b	.L893
.L903:
	.align	2, 0
.L902:
	.word	0xce2
.L894:
	ldrh	r0, [r1]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L897	@cond_branch
.L899:
	mov	r0, #0x0
	b	.L898
.L897:
	mov	r0, #0xf
	bl	SetMenuText
.L893:
	mov	r0, #0x0
	bl	SetMenuText
	mov	r0, #0x1
.L898:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 SetMenuTextsForItem,.Lfe66-SetMenuTextsForItem
	.align	2, 0
	.type	 SpriteCB_CursorShadow,function
	.thumb_func
SpriteCB_CursorShadow:
	ldr	r1, .L905
	ldr	r1, [r1]
	mov	r2, #0xcb
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	ldr	r2, [r1]
	ldrh	r2, [r2, #0x20]
	strh	r2, [r0, #0x20]
	ldr	r1, [r1]
	ldrh	r1, [r1, #0x22]
	add	r1, r1, #0x14
	strh	r1, [r0, #0x22]
	bx	lr
.L906:
	.align	2, 0
.L905:
	.word	gStorage
.Lfe67:
	.size	 SpriteCB_CursorShadow,.Lfe67-SpriteCB_CursorShadow
	.section .rodata
	.align	2, 0
.LC184:
	.word	sHandCursorTiles
	.short	0x800
	.short	0x0
	.word	sHandCursorShadowTiles
	.short	0x80
	.short	0x1
	.space	8
	.align	2, 0
.LC186:
	.word	sPokeStorageMisc1Pal
	.short	0xdac7
	.space	2
	.space	8
	.align	2, 0
	.type	 sOamData_Cursor.212,object
	.size	 sOamData_Cursor.212,8
sOamData_Cursor.212:
	.space	1
	.byte	0x0
	.space	1
	.byte	0x80
	.space	1
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sOamData_CursorShadow.213,object
	.size	 sOamData_CursorShadow.213,8
sOamData_CursorShadow.213:
	.space	1
	.byte	0x0
	.space	1
	.byte	0x40
	.space	1
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sAnim_Cursor_Bouncing.214,object
sAnim_Cursor_Bouncing.214:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	0x10
	.byte	0x1e
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sAnim_Cursor_Still.215,object
sAnim_Cursor_Still.215:
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.align	2, 0
	.type	 sAnim_Cursor_Open.216,object
sAnim_Cursor_Open.216:
	.short	0x20
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.align	2, 0
	.type	 sAnim_Cursor_Fist.217,object
sAnim_Cursor_Fist.217:
	.short	0x30
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.align	2, 0
	.type	 sAnims_Cursor.218,object
sAnims_Cursor.218:
	.word	sAnim_Cursor_Bouncing.214
	.word	sAnim_Cursor_Still.215
	.word	sAnim_Cursor_Open.216
	.word	sAnim_Cursor_Fist.217
	.align	2, 0
	.type	 sSpriteTemplate_Cursor.219,object
	.size	 sSpriteTemplate_Cursor.219,24
sSpriteTemplate_Cursor.219:
	.short	0x0
	.short	0xdaca
	.word	sOamData_Cursor.212
	.word	sAnims_Cursor.218
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_CursorShadow.220,object
	.size	 sSpriteTemplate_CursorShadow.220,24
sSpriteTemplate_CursorShadow.220:
	.short	0x1
	.short	0xdaca
	.word	sOamData_CursorShadow.213
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_CursorShadow
.text
	.align	2, 0
	.type	 CreateCursorSprites,function
	.thumb_func
CreateCursorSprites:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x2c
	mov	r1, sp
	ldr	r0, .L916
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	add	r4, sp, #0x18
	add	r1, r4, #0
	ldr	r0, .L916+0x4
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r0, sp
	bl	LoadSpriteSheets
	add	r0, r4, #0
	bl	LoadSpritePalettes
	ldr	r0, .L916+0x8
	bl	IndexOfSpritePaletteTag
	ldr	r6, .L916+0xc
	ldr	r1, [r6]
	ldr	r4, .L916+0x10
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r0, .L916+0x14
	bl	IndexOfSpritePaletteTag
	ldr	r1, [r6]
	ldr	r5, .L916+0x18
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r0, .L916+0x1c
	ldrb	r0, [r0]
	ldr	r1, .L916+0x20
	ldrb	r1, [r1]
	add	r4, sp, #0x28
	mov	r5, sp
	add	r5, r5, #0x2a
	add	r2, r4, #0
	add	r3, r5, #0
	bl	GetCursorCoordsByPos
	ldr	r0, .L916+0x24
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	mov	r3, #0x0
	ldrsh	r2, [r5, r3]
	mov	r3, #0x6
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L908	@cond_branch
	ldr	r2, [r6]
	mov	r4, #0xcb
	lsl	r4, r4, #0x4
	add	r3, r2, r4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L916+0x28
	add	r1, r1, r0
	str	r1, [r3]
	ldr	r0, .L916+0x2c
	ldr	r5, .L916+0x10
	add	r2, r2, r5
	ldrb	r0, [r0]
	add	r2, r2, r0
	ldrb	r2, [r2]
	lsl	r2, r2, #0x4
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldr	r0, .L916+0x30
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L910	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	StartSpriteAnim
	b	.L910
.L917:
	.align	2, 0
.L916:
	.word	.LC184
	.word	.LC186
	.word	0xdaca
	.word	gStorage
	.word	0xcd4
	.word	0xdac7
	.word	0xcd5
	.word	sCursorArea
	.word	sCursorPosition
	.word	sSpriteTemplate_Cursor.219
	.word	gSprites
	.word	sInMultiMoveMode
	.word	sIsMonBeingMoved
.L908:
	ldr	r0, [r6]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
.L910:
	ldr	r0, .L918
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	bne	.L911	@cond_branch
	mov	r3, #0xd
	mov	r4, #0x1
	b	.L912
.L919:
	.align	2, 0
.L918:
	.word	sCursorArea
.L911:
	mov	r3, #0x15
	mov	r4, #0x2
.L912:
	ldr	r0, .L920
	mov	r1, #0x0
	mov	r2, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L913	@cond_branch
	ldr	r5, .L920+0x4
	ldr	r2, [r5]
	ldr	r3, .L920+0x8
	add	r2, r2, r3
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L920+0xc
	add	r1, r1, r0
	str	r1, [r2]
	lsl	r3, r4, #0x2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldr	r0, .L920+0x10
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L915	@cond_branch
	ldr	r0, [r5]
	ldr	r4, .L920+0x8
	add	r0, r0, r4
	ldr	r1, [r0]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	b	.L915
.L921:
	.align	2, 0
.L920:
	.word	sSpriteTemplate_CursorShadow.220
	.word	gStorage
	.word	0xcb4
	.word	gSprites
	.word	sCursorArea
.L913:
	ldr	r0, .L922
	ldr	r0, [r0]
	ldr	r5, .L922+0x4
	add	r0, r0, r5
	mov	r1, #0x0
	str	r1, [r0]
.L915:
	add	sp, sp, #0x2c
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L923:
	.align	2, 0
.L922:
	.word	gStorage
	.word	0xcb4
.Lfe68:
	.size	 CreateCursorSprites,.Lfe68-CreateCursorSprites
	.align	2, 0
	.type	 ToggleCursorMultiMoveMode,function
	.thumb_func
ToggleCursorMultiMoveMode:
	push	{lr}
	ldr	r2, .L926
	mov	r1, #0x0
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L925	@cond_branch
	mov	r1, #0x1
.L925:
	strb	r1, [r2]
	ldr	r0, .L926+0x4
	ldr	r0, [r0]
	mov	r3, #0xcb
	lsl	r3, r3, #0x4
	add	r1, r0, r3
	ldr	r3, [r1]
	ldr	r1, .L926+0x8
	add	r0, r0, r1
	ldrb	r2, [r2]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	ldrb	r2, [r3, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	pop	{r0}
	bx	r0
.L927:
	.align	2, 0
.L926:
	.word	sInMultiMoveMode
	.word	gStorage
	.word	0xcd4
.Lfe69:
	.size	 ToggleCursorMultiMoveMode,.Lfe69-ToggleCursorMultiMoveMode
	.align	2, 0
	.globl	GetBoxCursorPosition
	.type	 GetBoxCursorPosition,function
	.thumb_func
GetBoxCursorPosition:
	ldr	r0, .L929
	ldrb	r0, [r0]
	bx	lr
.L930:
	.align	2, 0
.L929:
	.word	sCursorPosition
.Lfe70:
	.size	 GetBoxCursorPosition,.Lfe70-GetBoxCursorPosition
	.align	2, 0
	.globl	GetCursorBoxColumnAndRow
	.type	 GetCursorBoxColumnAndRow,function
	.thumb_func
GetCursorBoxColumnAndRow:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	ldr	r0, .L935
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	bne	.L932	@cond_branch
	ldr	r4, .L935+0x4
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	mov	r1, #0x6
	bl	__modsi3
	strb	r0, [r5]
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	mov	r1, #0x6
	bl	__divsi3
	b	.L934
.L936:
	.align	2, 0
.L935:
	.word	sCursorArea
	.word	sCursorPosition
.L932:
	mov	r0, #0x0
	strb	r0, [r5]
.L934:
	strb	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 GetCursorBoxColumnAndRow,.Lfe71-GetCursorBoxColumnAndRow
	.align	2, 0
	.globl	StartCursorAnim
	.type	 StartCursorAnim,function
	.thumb_func
StartCursorAnim:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L938
	ldr	r0, [r0]
	mov	r2, #0xcb
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r0, [r0]
	bl	StartSpriteAnim
	pop	{r0}
	bx	r0
.L939:
	.align	2, 0
.L938:
	.word	gStorage
.Lfe72:
	.size	 StartCursorAnim,.Lfe72-StartCursorAnim
	.align	2, 0
	.globl	GetMovingMonOriginalBoxId
	.type	 GetMovingMonOriginalBoxId,function
	.thumb_func
GetMovingMonOriginalBoxId:
	ldr	r0, .L941
	ldrb	r0, [r0]
	bx	lr
.L942:
	.align	2, 0
.L941:
	.word	sMovingMonOrigBoxId
.Lfe73:
	.size	 GetMovingMonOriginalBoxId,.Lfe73-GetMovingMonOriginalBoxId
	.align	2, 0
	.globl	SetCursorPriorityTo1
	.type	 SetCursorPriorityTo1,function
	.thumb_func
SetCursorPriorityTo1:
	ldr	r0, .L944
	ldr	r0, [r0]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	bx	lr
.L945:
	.align	2, 0
.L944:
	.word	gStorage
.Lfe74:
	.size	 SetCursorPriorityTo1,.Lfe74-SetCursorPriorityTo1
	.align	2, 0
	.globl	TryHideItemAtCursor
	.type	 TryHideItemAtCursor,function
	.thumb_func
TryHideItemAtCursor:
	push	{lr}
	ldr	r0, .L948
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	bne	.L947	@cond_branch
	ldr	r0, .L948+0x4
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	TryHideItemIconAtPos
.L947:
	pop	{r0}
	bx	r0
.L949:
	.align	2, 0
.L948:
	.word	sCursorArea
	.word	sCursorPosition
.Lfe75:
	.size	 TryHideItemAtCursor,.Lfe75-TryHideItemAtCursor
	.align	2, 0
	.globl	TryShowItemAtCursor
	.type	 TryShowItemAtCursor,function
	.thumb_func
TryShowItemAtCursor:
	push	{lr}
	ldr	r0, .L952
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	bne	.L951	@cond_branch
	ldr	r0, .L952+0x4
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	TryLoadItemIconAtPos
.L951:
	pop	{r0}
	bx	r0
.L953:
	.align	2, 0
.L952:
	.word	sCursorArea
	.word	sCursorPosition
.Lfe76:
	.size	 TryShowItemAtCursor,.Lfe76-TryShowItemAtCursor
	.section .rodata
	.align	2, 0
	.type	 sMenuTexts,object
sMenuTexts:
	.word	gPCText_Cancel
	.word	gPCText_Store
	.word	gPCText_Withdraw
	.word	gPCText_Move
	.word	gPCText_Shift
	.word	gPCText_Place
	.word	gPCText_Summary
	.word	gPCText_Release
	.word	gPCText_Mark
	.word	gPCText_Jump
	.word	gPCText_Wallpaper
	.word	gPCText_Name
	.word	gPCText_Take
	.word	gPCText_Give
	.word	gPCText_Give
	.word	gPCText_Switch
	.word	gPCText_Bag
	.word	gPCText_Info
	.word	gPCText_Scenery1
	.word	gPCText_Scenery2
	.word	gPCText_Scenery3
	.word	gPCText_Etcetera
	.word	gPCText_Forest
	.word	gPCText_City
	.word	gPCText_Desert
	.word	gPCText_Savanna
	.word	gPCText_Crag
	.word	gPCText_Volcano
	.word	gPCText_Snow
	.word	gPCText_Cave
	.word	gPCText_Beach
	.word	gPCText_Seafloor
	.word	gPCText_River
	.word	gPCText_Sky
	.word	gPCText_PolkaDot
	.word	gPCText_Pokecenter
	.word	gPCText_Machine
	.word	gPCText_Simple
	.size	 sMenuTexts,152
.text
	.align	2, 0
	.globl	InitMenu
	.type	 InitMenu,function
	.thumb_func
InitMenu:
	ldr	r2, .L955
	ldr	r0, [r2]
	ldr	r1, .L955+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r3, .L955+0x8
	add	r0, r0, r3
	strb	r1, [r0]
	ldr	r0, [r2]
	sub	r3, r3, #0x41
	add	r0, r0, r3
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r1, .L955+0xc
	add	r0, r0, r1
	mov	r1, #0xf
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r3, r3, #0x6
	add	r0, r0, r3
	mov	r1, #0x5c
	strh	r1, [r0]
	bx	lr
.L956:
	.align	2, 0
.L955:
	.word	gStorage
	.word	0xca8
	.word	0xca9
	.word	0xc6d
.Lfe77:
	.size	 InitMenu,.Lfe77-InitMenu
	.align	2, 0
	.globl	SetMenuText
	.type	 SetMenuText,function
	.thumb_func
SetMenuText:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r4, .L960
	ldr	r2, [r4]
	ldr	r5, .L960+0x4
	add	r1, r2, r5
	ldrb	r0, [r1]
	cmp	r0, #0x6
	bhi	.L958	@cond_branch
	add	r1, r0, #0
	lsl	r1, r1, #0x3
	mov	r0, #0xc7
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r1, r2, r1
	ldr	r2, .L960+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r1]
	str	r3, [r1, #0x4]
	bl	StringLength
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, [r4]
	ldr	r2, .L960+0xc
	add	r0, r0, r2
	ldrb	r2, [r0]
	cmp	r1, r2
	bls	.L959	@cond_branch
	strb	r1, [r0]
.L959:
	ldr	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L958:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L961:
	.align	2, 0
.L960:
	.word	gStorage
	.word	0xca8
	.word	sMenuTexts
	.word	0xca9
.Lfe78:
	.size	 SetMenuText,.Lfe78-SetMenuText
	.align	2, 0
	.globl	GetMenuItemTextId
	.type	 GetMenuItemTextId,function
	.thumb_func
GetMenuItemTextId:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L966
	ldr	r1, [r0]
	ldr	r3, .L966+0x4
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L963	@cond_branch
	lsl	r0, r2, #0x3
	ldr	r2, .L966+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	b	.L965
.L967:
	.align	2, 0
.L966:
	.word	gStorage
	.word	0xca8
	.word	0xc74
.L963:
	mov	r0, #0x1
	neg	r0, r0
.L965:
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 GetMenuItemTextId,.Lfe79-GetMenuItemTextId
	.align	2, 0
	.globl	AddMenu
	.type	 AddMenu,function
	.thumb_func
AddMenu:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0xc
	ldr	r5, .L969
	ldr	r1, [r5]
	ldr	r2, .L969+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r0, r0, #0x2
	sub	r2, r2, #0x3e
	add	r1, r1, r2
	mov	r3, #0x0
	mov	sl, r3
	strb	r0, [r1]
	ldr	r1, [r5]
	ldr	r0, .L969+0x8
	mov	r8, r0
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	ldr	r3, .L969+0xc
	add	r1, r1, r3
	strb	r0, [r1]
	ldr	r1, [r5]
	add	r2, r1, r2
	ldrb	r2, [r2]
	mov	r0, #0x1d
	sub	r0, r0, r2
	ldr	r2, .L969+0x10
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r1, [r5]
	add	r3, r1, r3
	ldrb	r2, [r3]
	mov	r0, #0xf
	sub	r0, r0, r2
	ldr	r3, .L969+0x14
	add	r1, r1, r3
	strb	r0, [r1]
	ldr	r0, [r5]
	ldr	r1, .L969+0x18
	add	r0, r0, r1
	bl	AddWindow
	ldr	r1, [r5]
	ldr	r4, .L969+0x1c
	add	r1, r1, r4
	mov	r2, #0x0
	mov	r9, r2
	strh	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ClearWindowTilemap
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0xb
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
	ldr	r2, [r5]
	add	r0, r2, r4
	ldrb	r0, [r0]
	mov	r6, #0x10
	str	r6, [sp]
	mov	r3, r8
	add	r1, r2, r3
	ldrb	r1, [r1]
	str	r1, [sp, #0x4]
	mov	r1, #0xc7
	lsl	r1, r1, #0x4
	add	r2, r2, r1
	str	r2, [sp, #0x8]
	mov	r1, #0x1
	mov	r2, #0x8
	mov	r3, #0x2
	bl	PrintTextArray
	ldr	r1, [r5]
	add	r4, r1, r4
	ldrb	r0, [r4]
	str	r6, [sp]
	add	r1, r1, r8
	ldrb	r1, [r1]
	str	r1, [sp, #0x4]
	mov	r2, sl
	str	r2, [sp, #0x8]
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x2
	bl	Menu_InitCursor
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, [r5]
	ldr	r3, .L969+0x20
	add	r0, r0, r3
	mov	r1, r9
	strb	r1, [r0]
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L970:
	.align	2, 0
.L969:
	.word	gStorage
	.word	0xca9
	.word	0xca8
	.word	0xc6c
	.word	0xc69
	.word	0xc6a
	.word	0xc68
	.word	0xcac
	.word	0xcaa
.Lfe80:
	.size	 AddMenu,.Lfe80-AddMenu
	.align	2, 0
	.globl	IsMenuLoading
	.type	 IsMenuLoading,function
	.thumb_func
IsMenuLoading:
	mov	r0, #0x0
	bx	lr
.Lfe81:
	.size	 IsMenuLoading,.Lfe81-IsMenuLoading
	.align	2, 0
	.globl	HandleMenuInput
	.type	 HandleMenuInput,function
	.thumb_func
HandleMenuInput:
	push	{r4, r5, lr}
	mov	r5, #0x2
	neg	r5, r5
	ldr	r4, .L987
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L986	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L977	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r5, r5, #0x1
.L977:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L979	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	bl	Menu_MoveCursor
	b	.L974
.L988:
	.align	2, 0
.L987:
	.word	gMain
.L979:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L974	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	Menu_MoveCursor
	b	.L974
.L986:
	bl	Menu_GetCursorPos
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L974:
	mov	r0, #0x2
	neg	r0, r0
	cmp	r5, r0
	beq	.L984	@cond_branch
	bl	RemoveMenu
.L984:
	cmp	r5, #0
	blt	.L985	@cond_branch
	ldr	r0, .L989
	ldr	r0, [r0]
	lsl	r1, r5, #0x3
	ldr	r2, .L989+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldr	r5, [r0]
.L985:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L990:
	.align	2, 0
.L989:
	.word	gStorage
	.word	0xc74
.Lfe82:
	.size	 HandleMenuInput,.Lfe82-HandleMenuInput
	.align	2, 0
	.globl	RemoveMenu
	.type	 RemoveMenu,function
	.thumb_func
RemoveMenu:
	push	{r4, r5, lr}
	ldr	r5, .L992
	ldr	r0, [r5]
	ldr	r4, .L992+0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	RemoveWindow
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L993:
	.align	2, 0
.L992:
	.word	gStorage
	.word	0xcac
.Lfe83:
	.size	 RemoveMenu,.Lfe83-RemoveMenu
.text
	.align	2, 0 @ Don't pad with nop

