@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sCurrentSceneNum,object
	.size	 sCurrentSceneNum,1
sCurrentSceneNum:
	.byte	0x0
	.type	 sNumScenes,object
	.size	 sNumScenes,1
sNumScenes:
	.byte	0x0
	.globl	gQuestLogState
	.type	 gQuestLogState,object
	.size	 gQuestLogState,1
gQuestLogState:
	.byte	0x0
	.align	1, 0
	.type	 sRecordSequenceStartIdx,object
	.size	 sRecordSequenceStartIdx,2
sRecordSequenceStartIdx:
	.short	0x0
	.type	 sWindowIds,object
	.size	 sWindowIds,3
sWindowIds:
	.byte	0x0
	.space	2
	.globl	gQuestLogDefeatedWildMonRecord
	.align	2, 0
	.type	 gQuestLogDefeatedWildMonRecord,object
	.size	 gQuestLogDefeatedWildMonRecord,4
gQuestLogDefeatedWildMonRecord:
	.word	0x0
	.globl	gQuestLogRecordingPointer
	.align	2, 0
	.type	 gQuestLogRecordingPointer,object
	.size	 gQuestLogRecordingPointer,4
gQuestLogRecordingPointer:
	.word	0x0
	.align	2, 0
	.type	 sEventData,object
	.size	 sEventData,128
sEventData:
	.word	0x0
	.space	124
	.align	2, 0
	.type	 sQuestLogCB,object
	.size	 sQuestLogCB,4
sQuestLogCB:
	.word	0x0
	.align	2, 0
	.type	 sPalettesBackup,object
	.size	 sPalettesBackup,4
sPalettesBackup:
	.word	0x0
	.align	2, 0
	.type	 sPlaybackControl,object
	.size	 sPlaybackControl,4
sPlaybackControl:
	.byte	0x0
	.space	3
	.align	2, 0
	.type	 sQuestLogActionRecordBuffer,object
	.size	 sQuestLogActionRecordBuffer,256
sQuestLogActionRecordBuffer:
	.byte	0x0
	.space	3
	.space	4
	.space	248
	.globl	gQuestLogCurActionIdx
	.align	1, 0
	.type	 gQuestLogCurActionIdx,object
	.size	 gQuestLogCurActionIdx,2
gQuestLogCurActionIdx:
	.short	0x0
	.type	 sMovementScripts,object
	.size	 sMovementScripts,128
sMovementScripts:
	.byte	0x0
	.space	1
	.space	126
	.align	1, 0
	.type	 sNextActionDelay,object
	.size	 sNextActionDelay,2
sNextActionDelay:
	.short	0x0
	.align	1, 0
	.type	 sLastQuestLogCursor,object
	.size	 sLastQuestLogCursor,2
sLastQuestLogCursor:
	.short	0x0
	.align	1, 0
	.type	 sFlagOrVarPlayhead,object
	.size	 sFlagOrVarPlayhead,2
sFlagOrVarPlayhead:
	.short	0x0
	.section .rodata
	.align	2, 0
	.type	 sWindowTemplates,object
	.size	 sWindowTemplates,24
sWindowTemplates:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1e
	.byte	0x2
	.byte	0xf
	.short	0xe9
	.byte	0x0
	.byte	0x0
	.byte	0x12
	.byte	0x1e
	.byte	0x2
	.byte	0xf
	.short	0xad
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x1e
	.byte	0x6
	.byte	0xf
	.short	0x14c
	.type	 sTextColors,object
	.size	 sTextColors,3
sTextColors:
	.byte	0xf
	.byte	0x1
	.byte	0xc
	.align	1, 0
	.type	 sDescriptionWindow_Gfx,object
sDescriptionWindow_Gfx:
	.short	0xbbbb
	.short	0xbbbb
	.short	0xcccc
	.short	0xcccc
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xcccc
	.short	0xcccc
	.short	0xbbbb
	.short	0xbbbb
	.size	 sDescriptionWindow_Gfx,96
	.type	 sQuestLogTextLineYCoords,object
sQuestLogTextLineYCoords:
	.byte	0x11
	.byte	0xa
	.byte	0x3
	.size	 sQuestLogTextLineYCoords,3
.text
	.align	2, 0
	.globl	QL_AddASLROffset
	.type	 QL_AddASLROffset,function
	.thumb_func
QL_AddASLROffset:
	push	{lr}
	ldr	r1, .L15
	ldr	r1, [r1]
	sub	r1, r1, r0
	ldr	r2, .L15+0x4
	ldr	r0, [r2]
	cmp	r0, #0
	beq	.L5	@cond_branch
	add	r0, r0, r1
	str	r0, [r2]
.L5:
	ldr	r0, .L15+0x8
	ldrb	r2, [r0]
	cmp	r2, #0
	beq	.L4	@cond_branch
	ldr	r3, .L15+0xc
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L7	@cond_branch
	add	r0, r0, r1
	str	r0, [r3]
.L7:
	cmp	r2, #0x2
	bne	.L4	@cond_branch
	ldr	r2, .L15+0x10
	mov	r3, #0x1f
.L12:
	ldr	r0, [r2]
	cmp	r0, #0
	beq	.L11	@cond_branch
	add	r0, r0, r1
	str	r0, [r2]
.L11:
	add	r2, r2, #0x4
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L12	@cond_branch
.L4:
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gSaveBlock1Ptr
	.word	gQuestLogDefeatedWildMonRecord
	.word	gQuestLogState
	.word	gQuestLogRecordingPointer
	.word	sEventData
.Lfe1:
	.size	 QL_AddASLROffset,.Lfe1-QL_AddASLROffset
	.align	2, 0
	.globl	ResetQuestLog
	.type	 ResetQuestLog,function
	.thumb_func
ResetQuestLog:
	push	{lr}
	ldr	r0, .L18
	ldr	r0, [r0]
	ldr	r1, .L18+0x4
	add	r0, r0, r1
	ldr	r2, .L18+0x8
	mov	r1, #0x0
	bl	memset
	ldr	r0, .L18+0xc
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L18+0x10
	strb	r1, [r0]
	ldr	r0, .L18+0x14
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L18+0x18
	str	r1, [r0]
	ldr	r0, .L18+0x1c
	str	r1, [r0]
	bl	QL_ResetEventStates
	bl	ResetDeferredLinkEvent
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gSaveBlock1Ptr
	.word	0x1304
	.word	0x19b0
	.word	sCurrentSceneNum
	.word	gQuestLogState
	.word	sQuestLogCB
	.word	gQuestLogRecordingPointer
	.word	gQuestLogDefeatedWildMonRecord
.Lfe2:
	.size	 ResetQuestLog,.Lfe2-ResetQuestLog
	.align	2, 0
	.type	 ClearSavedScene,function
	.thumb_func
ClearSavedScene:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L21
	ldr	r1, [r1]
	ldr	r2, .L21+0x4
	mul	r0, r0, r2
	add	r0, r0, r1
	ldr	r1, .L21+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	memset
	ldr	r1, .L21+0xc
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1304
	.word	gQuestLogDefeatedWildMonRecord
.Lfe3:
	.size	 ClearSavedScene,.Lfe3-ClearSavedScene
	.align	2, 0
	.globl	QL_ResetDefeatedWildMonRecord
	.type	 QL_ResetDefeatedWildMonRecord,function
	.thumb_func
QL_ResetDefeatedWildMonRecord:
	ldr	r1, .L24
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L25:
	.align	2, 0
.L24:
	.word	gQuestLogDefeatedWildMonRecord
.Lfe4:
	.size	 QL_ResetDefeatedWildMonRecord,.Lfe4-QL_ResetDefeatedWildMonRecord
	.align	2, 0
	.globl	RunQuestLogCB
	.type	 RunQuestLogCB,function
	.thumb_func
RunQuestLogCB:
	push	{lr}
	ldr	r0, .L28
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L27	@cond_branch
	bl	_call_via_r0
.L27:
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	sQuestLogCB
.Lfe5:
	.size	 RunQuestLogCB,.Lfe5-RunQuestLogCB
	.align	2, 0
	.globl	QL_IsRoomToSaveEvent
	.type	 QL_IsRoomToSaveEvent,function
	.thumb_func
QL_IsRoomToSaveEvent:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L34
	ldr	r0, .L34+0x4
	ldrb	r0, [r0]
	ldr	r3, .L34+0x8
	mov	r2, r0
	mul	r2, r2, r3
	ldr	r0, .L34+0xc
	add	r2, r2, r0
	ldr	r0, [r4]
	add	r0, r0, r2
	ldr	r4, .L34+0x10
	add	r2, r0, r4
	add	r0, r0, r3
	sub	r0, r0, r1
	cmp	r5, r2
	bcc	.L32	@cond_branch
	cmp	r5, r0
	bls	.L31	@cond_branch
.L32:
	mov	r0, #0x0
	b	.L33
.L35:
	.align	2, 0
.L34:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
	.word	0x66c
	.word	0x1304
	.word	0x56c
.L31:
	mov	r0, #0x1
.L33:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 QL_IsRoomToSaveEvent,.Lfe6-QL_IsRoomToSaveEvent
	.align	2, 0
	.globl	QL_IsRoomToSaveAction
	.type	 QL_IsRoomToSaveAction,function
	.thumb_func
QL_IsRoomToSaveAction:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L40
	ldr	r0, .L40+0x4
	ldrb	r0, [r0]
	ldr	r3, .L40+0x8
	mov	r2, r0
	mul	r2, r2, r3
	ldr	r0, .L40+0xc
	add	r2, r2, r0
	ldr	r0, [r4]
	add	r0, r0, r2
	ldr	r4, .L40+0x10
	add	r2, r0, r4
	add	r0, r0, r3
	sub	r0, r0, r1
	cmp	r5, r2
	bcc	.L38	@cond_branch
	cmp	r5, r0
	bls	.L37	@cond_branch
.L38:
	mov	r0, #0x0
	b	.L39
.L41:
	.align	2, 0
.L40:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
	.word	0x66c
	.word	0x1304
	.word	0x56c
.L37:
	mov	r0, #0x1
.L39:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 QL_IsRoomToSaveAction,.Lfe7-QL_IsRoomToSaveAction
	.align	2, 0
	.type	 SetQuestLogState,function
	.thumb_func
SetQuestLogState:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L46
	strb	r0, [r1]
	cmp	r0, #0x1
	bne	.L43	@cond_branch
	ldr	r1, .L46+0x4
	ldr	r0, .L46+0x8
	b	.L45
.L47:
	.align	2, 0
.L46:
	.word	gQuestLogState
	.word	sQuestLogCB
	.word	QLogCB_Recording
.L43:
	ldr	r1, .L48
	ldr	r0, .L48+0x4
.L45:
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	sQuestLogCB
	.word	QLogCB_Playback
.Lfe8:
	.size	 SetQuestLogState,.Lfe8-SetQuestLogState
	.align	2, 0
	.type	 QLogCB_Recording,function
	.thumb_func
QLogCB_Recording:
	push	{r4, lr}
	ldr	r0, .L52
	bl	TryRecordActionSequence
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L51	@cond_branch
	ldr	r0, .L52+0x4
	mov	r4, #0x0
	strb	r4, [r0]
	bl	RecordSceneEnd
	ldr	r0, .L52+0x8
	strb	r4, [r0]
	ldr	r1, .L52+0xc
	mov	r0, #0x0
	str	r0, [r1]
.L51:
	pop	{r4}
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	sQuestLogActionRecordBuffer
	.word	gQuestLogPlaybackState
	.word	gQuestLogState
	.word	sQuestLogCB
.Lfe9:
	.size	 QLogCB_Recording,.Lfe9-QLogCB_Recording
	.align	2, 0
	.type	 QLogCB_Playback,function
	.thumb_func
QLogCB_Playback:
	push	{r4, lr}
	ldr	r1, .L60
	ldrb	r2, [r1]
	mov	r4, #0xf
	add	r0, r4, #0
	and	r0, r0, r2
	add	r3, r1, #0
	cmp	r0, #0x2
	bne	.L55	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r3]
.L55:
	ldrb	r1, [r3]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L56	@cond_branch
	ldr	r0, .L60+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L58	@cond_branch
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L58	@cond_branch
	ldrb	r0, [r3, #0x1]
	cmp	r0, #0x1f
	bhi	.L57	@cond_branch
	ldr	r0, .L60+0x8
	ldrb	r1, [r3, #0x1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L57	@cond_branch
.L58:
	bl	QuestLog_PlayCurrentEvent
	b	.L56
.L61:
	.align	2, 0
.L60:
	.word	sPlaybackControl
	.word	gQuestLogPlaybackState
	.word	sEventData
.L57:
	ldrb	r0, [r3]
	mov	r1, #0x3f
	and	r1, r1, r0
	mov	r0, #0x80
	orr	r1, r1, r0
	strb	r1, [r3]
	bl	LockPlayerFieldControls
	mov	r0, #0x0
	bl	DoSceneEndTransition
.L56:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 QLogCB_Playback,.Lfe10-QLogCB_Playback
	.align	2, 0
	.globl	GetQuestLogState
	.type	 GetQuestLogState,function
	.thumb_func
GetQuestLogState:
	ldr	r0, .L63
	ldr	r1, .L63+0x4
	ldrb	r1, [r1]
	strh	r1, [r0]
	bx	lr
.L64:
	.align	2, 0
.L63:
	.word	gSpecialVar_Result
	.word	gQuestLogState
.Lfe11:
	.size	 GetQuestLogState,.Lfe11-GetQuestLogState
	.align	2, 0
	.globl	GetQuestLogStartType
	.type	 GetQuestLogStartType,function
	.thumb_func
GetQuestLogStartType:
	ldr	r0, .L66
	ldr	r1, [r0]
	ldr	r0, .L66+0x4
	ldrb	r2, [r0]
	ldr	r0, .L66+0x8
	mul	r0, r0, r2
	add	r1, r1, r0
	ldr	r0, .L66+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	bx	lr
.L67:
	.align	2, 0
.L66:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
	.word	0x66c
	.word	0x1304
.Lfe12:
	.size	 GetQuestLogStartType,.Lfe12-GetQuestLogStartType
	.align	2, 0
	.globl	QL_StartRecordingAction
	.type	 QL_StartRecordingAction,function
	.thumb_func
QL_StartRecordingAction:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r4, .L74
	ldrb	r0, [r4]
	cmp	r0, #0x3
	bls	.L69	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4]
.L69:
	ldrb	r0, [r4]
	bl	ClearSavedScene
	bl	QL_ResetRepeatEventTracker
	ldr	r2, .L74+0x4
	ldr	r1, .L74+0x8
	ldrb	r0, [r4]
	ldr	r3, .L74+0xc
	mul	r0, r0, r3
	ldr	r5, .L74+0x10
	add	r0, r0, r5
	ldr	r1, [r1]
	add	r0, r1, r0
	ldr	r7, .L74+0x14
	add	r0, r0, r7
	str	r0, [r2]
	add	r0, r6, #0
	sub	r0, r0, #0xc
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7
	bls	.L71	@cond_branch
	cmp	r6, #0x23
	bne	.L70	@cond_branch
.L71:
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r1, r0
	add	r0, r0, r5
	mov	r1, #0x2
	b	.L73
.L75:
	.align	2, 0
.L74:
	.word	sCurrentSceneNum
	.word	gQuestLogRecordingPointer
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1304
	.word	0x56c
.L70:
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r1, r0
	add	r0, r0, r5
	mov	r1, #0x1
.L73:
	strb	r1, [r0]
	bl	SetPokemonCounts
	ldr	r4, .L76
	ldrb	r0, [r4]
	bl	SetPlayerInitialCoordsAtScene
	ldrb	r0, [r4]
	bl	SetNPCInitialCoordsAtScene
	bl	BackUpTrainerRematches
	bl	BackUpMapLayout
	ldrb	r0, [r4]
	bl	SetGameStateAtScene
	ldr	r1, .L76+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r4, .L76+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x2
	add	r1, r4, #0
	bl	ResetActions
	add	r0, r4, #0
	bl	TryRecordActionSequence
	mov	r0, #0x1
	bl	SetQuestLogState
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	sCurrentSceneNum
	.word	sRecordSequenceStartIdx
	.word	sQuestLogActionRecordBuffer
.Lfe13:
	.size	 QL_StartRecordingAction,.Lfe13-QL_StartRecordingAction
	.align	2, 0
	.type	 SetPlayerInitialCoordsAtScene,function
	.thumb_func
SetPlayerInitialCoordsAtScene:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L79
	ldr	r1, .L79+0x4
	mul	r1, r1, r0
	ldr	r0, .L79+0x8
	add	r1, r1, r0
	ldr	r0, [r2]
	add	r1, r0, r1
	ldrb	r0, [r0, #0x4]
	strb	r0, [r1, #0x1]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x5]
	strb	r0, [r1, #0x2]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x6]
	strb	r0, [r1, #0x3]
	ldr	r2, [r2]
	ldrh	r0, [r2]
	strh	r0, [r1, #0x4]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0x6]
	bx	lr
.L80:
	.align	2, 0
.L79:
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1304
.Lfe14:
	.size	 SetPlayerInitialCoordsAtScene,.Lfe14-SetPlayerInitialCoordsAtScene
	.align	2, 0
	.type	 SetNPCInitialCoordsAtScene,function
	.thumb_func
SetNPCInitialCoordsAtScene:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L93
	ldr	r1, .L93+0x4
	mul	r0, r0, r1
	ldr	r1, .L93+0x8
	add	r0, r0, r1
	ldr	r1, [r4]
	add	r7, r1, r0
	add	r0, r7, #0
	bl	QL_RecordObjects
	mov	r6, #0x0
	mov	r9, r4
	ldr	r2, .L93+0xc
	mov	r8, r2
	ldr	r3, .L93+0x10
	mov	sl, r3
.L85:
	mov	r4, r9
	ldr	r1, [r4]
	lsl	r2, r6, #0x1
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldr	r0, .L93+0x14
	add	r1, r1, r0
	ldrh	r4, [r1]
	mov	r3, #0x0
	ldrsh	r0, [r1, r3]
	mov	ip, r2
	cmp	r0, #0
	bge	.L86	@cond_branch
	lsl	r3, r6, #0x2
	add	r2, r7, r3
	neg	r0, r0
	mov	r4, r8
	add	r1, r2, r4
	strb	r0, [r1]
	ldr	r0, .L93+0x18
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L91
.L94:
	.align	2, 0
.L93:
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1304
	.word	0x46c
	.word	0x46e
	.word	0x8e4
	.word	0x46d
.L86:
	lsl	r3, r6, #0x2
	add	r1, r7, r3
	mov	r2, r8
	add	r0, r1, r2
	strb	r4, [r0]
	ldr	r4, .L95
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L91:
	add	r5, r3, #0
	mov	r1, r9
	ldr	r0, [r1]
	mov	r2, ip
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r3, .L95+0x4
	add	r1, r0, r3
	ldrh	r2, [r1]
	mov	r4, #0x0
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bge	.L88	@cond_branch
	add	r3, r7, r5
	add	r1, r0, #0
	neg	r1, r1
	lsl	r1, r1, #0x18
	mov	r2, r8
	add	r4, r3, r2
	lsr	r1, r1, #0xf
	ldr	r0, [r4]
	ldr	r2, .L95+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [r4]
	add	r3, r3, sl
	ldrb	r0, [r3]
	mov	r1, #0x2
	orr	r0, r0, r1
	b	.L92
.L96:
	.align	2, 0
.L95:
	.word	0x46d
	.word	0x8e6
	.word	-0x1fe01
.L88:
	add	r3, r7, r5
	lsl	r2, r2, #0x18
	mov	r0, r8
	add	r4, r3, r0
	lsr	r2, r2, #0xf
	ldr	r0, [r4]
	ldr	r1, .L97
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [r4]
	add	r3, r3, sl
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
.L92:
	strb	r0, [r3]
	add	r5, r7, r5
	mov	r1, r9
	ldr	r0, [r1]
	mov	r2, ip
	add	r3, r2, r6
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	ldr	r4, .L97+0x4
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, sl
	add	r4, r5, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4]
	mov	r0, #0x3
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4]
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, r3
	ldr	r2, .L97+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	ldr	r3, .L97+0xc
	add	r5, r5, r3
	strb	r0, [r5]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x3f
	bhi	.LCB856
	b	.L85	@long jump
.LCB856:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L98:
	.align	2, 0
.L97:
	.word	-0x1fe01
	.word	0x8e8
	.word	0x8e9
	.word	0x46f
.Lfe15:
	.size	 SetNPCInitialCoordsAtScene,.Lfe15-SetNPCInitialCoordsAtScene
	.align	2, 0
	.type	 SetGameStateAtScene,function
	.thumb_func
SetGameStateAtScene:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L100
	ldr	r1, .L100+0x4
	mov	r4, r0
	mul	r4, r4, r1
	ldr	r0, .L100+0x8
	add	r4, r4, r0
	ldr	r0, [r5]
	add	r4, r0, r4
	mov	r1, #0xee
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	mov	r2, #0xa4
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x90
	bl	CpuSet
	ldr	r0, [r5]
	ldr	r1, .L100+0xc
	add	r0, r0, r1
	ldr	r2, .L100+0x10
	add	r4, r4, r2
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, #0
	bl	CpuSet
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1304
	.word	0x1002
	.word	0x26a
.Lfe16:
	.size	 SetGameStateAtScene,.Lfe16-SetGameStateAtScene
	.align	2, 0
	.type	 BackUpTrainerRematches,function
	.thumb_func
BackUpTrainerRematches:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r4, #0x0
	ldr	r0, .L114
	mov	sl, r0
	ldr	r1, .L114+0x4
	mov	r9, r1
	mov	r2, #0x1
	mov	r8, r2
.L106:
	lsl	r1, r4, #0x1
	mov	r7, sp
	add	r2, r7, r1
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r3, #0x0
	add	r6, r1, #0
	add	r0, r4, #0x1
	str	r0, [sp, #0x8]
	mov	r1, sl
	ldr	r0, [r1]
	mov	r7, r9
	add	r5, r0, r7
	lsl	r1, r4, #0x4
.L110:
	add	r0, r1, r3
	add	r0, r5, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L109	@cond_branch
	mov	r0, r8
	lsl	r0, r0, r3
	ldrh	r7, [r2]
	add	r0, r0, r7
	strh	r0, [r2]
.L109:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0xf
	bls	.L110	@cond_branch
	ldr	r1, .L114+0x8
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r2, sp
	add	r1, r2, r6
	ldrh	r1, [r1]
	bl	VarSet
	ldr	r7, [sp, #0x8]
	lsl	r0, r7, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L106	@cond_branch
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L115:
	.align	2, 0
.L114:
	.word	gSaveBlock1Ptr
	.word	0x63a
	.word	0x40aa
.Lfe17:
	.size	 BackUpTrainerRematches,.Lfe17-BackUpTrainerRematches
	.align	2, 0
	.type	 BackUpMapLayout,function
	.thumb_func
BackUpMapLayout:
	push	{lr}
	ldr	r0, .L117
	ldr	r1, .L117+0x4
	ldr	r1, [r1]
	ldrh	r1, [r1, #0x32]
	bl	VarSet
	pop	{r0}
	bx	r0
.L118:
	.align	2, 0
.L117:
	.word	0x40ae
	.word	gSaveBlock1Ptr
.Lfe18:
	.size	 BackUpMapLayout,.Lfe18-BackUpMapLayout
	.align	2, 0
	.type	 RecordSceneEnd,function
	.thumb_func
RecordSceneEnd:
	push	{lr}
	ldr	r0, .L121
	ldr	r0, [r0]
	bl	QL_RecordAction_SceneEnd
	ldr	r1, .L121+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L120	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L120:
	pop	{r0}
	bx	r0
.L122:
	.align	2, 0
.L121:
	.word	gQuestLogRecordingPointer
	.word	sCurrentSceneNum
.Lfe19:
	.size	 RecordSceneEnd,.Lfe19-RecordSceneEnd
	.align	2, 0
	.type	 TryRecordActionSequence,function
	.thumb_func
TryRecordActionSequence:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	ldr	r0, .L142
	ldrh	r5, [r0]
	ldr	r0, .L142+0x4
	mov	r8, r0
	ldrh	r0, [r0]
	cmp	r5, r0
	bcs	.L125	@cond_branch
	ldr	r6, .L142+0x8
.L127:
	ldr	r4, [r6]
	cmp	r4, #0
	beq	.L141	@cond_branch
	lsl	r0, r5, #0x3
	add	r1, r0, r7
	ldrb	r2, [r1, #0x6]
	add	r3, r0, #0
	cmp	r2, #0x1
	bgt	.L132	@cond_branch
	cmp	r2, #0
	blt	.L132	@cond_branch
	add	r0, r4, #0
	bl	QL_RecordAction_MovementOrGfxChange
	b	.L140
.L143:
	.align	2, 0
.L142:
	.word	sRecordSequenceStartIdx
	.word	gQuestLogCurActionIdx
	.word	gQuestLogRecordingPointer
.L132:
	ldr	r0, [r6]
	add	r1, r7, r3
	bl	QL_RecordAction_Input
.L140:
	str	r0, [r6]
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L139	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L144
	ldrh	r0, [r0]
	cmp	r5, r0
	bcc	.L127	@cond_branch
.L125:
	ldr	r0, .L144+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L136	@cond_branch
	ldr	r1, .L144+0x8
	mov	r2, r8
	ldrh	r0, [r2]
	strh	r0, [r1]
	mov	r0, #0x1
	b	.L137
.L145:
	.align	2, 0
.L144:
	.word	gQuestLogCurActionIdx
	.word	gQuestLogPlaybackState
	.word	sRecordSequenceStartIdx
.L139:
	ldr	r0, .L146
	strb	r1, [r0]
	b	.L141
.L147:
	.align	2, 0
.L146:
	.word	gQuestLogPlaybackState
.L136:
	ldr	r4, .L148
	ldr	r0, [r4]
	bl	QL_RecordAction_SceneEnd
	str	r0, [r4]
.L141:
	mov	r0, #0x0
.L137:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L149:
	.align	2, 0
.L148:
	.word	gQuestLogRecordingPointer
.Lfe20:
	.size	 TryRecordActionSequence,.Lfe20-TryRecordActionSequence
	.align	2, 0
	.globl	TryStartQuestLogPlayback
	.type	 TryStartQuestLogPlayback,function
	.thumb_func
TryStartQuestLogPlayback:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	QL_EnableRecordingSteps
	ldr	r1, .L159
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r2, #0x0
	ldr	r0, .L159+0x4
	ldr	r5, [r0]
	ldr	r7, .L159+0x8
	ldr	r6, .L159+0xc
.L154:
	mov	r0, r2
	mul	r0, r0, r7
	add	r0, r5, r0
	add	r0, r0, r6
	ldrb	r0, [r0]
	ldr	r3, .L159
	cmp	r0, #0
	beq	.L153	@cond_branch
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L153:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L154	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L157	@cond_branch
	ldr	r1, .L159+0x10
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r4, #0
	bl	Task_BeginQuestLogPlayback
	add	r0, r4, #0
	bl	DestroyTask
	b	.L158
.L160:
	.align	2, 0
.L159:
	.word	sNumScenes
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1304
	.word	gHelpSystemEnabled
.L157:
	ldr	r0, .L161
	bl	SetMainCallback2
	add	r0, r4, #0
	bl	DestroyTask
.L158:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	CB2_ContinueSavedGame
.Lfe21:
	.size	 TryStartQuestLogPlayback,.Lfe21-TryStartQuestLogPlayback
	.align	2, 0
	.type	 Task_BeginQuestLogPlayback,function
	.thumb_func
Task_BeginQuestLogPlayback:
	push	{lr}
	ldr	r1, .L164
	ldr	r2, [r1]
	mov	r3, #0x0
	mov	r0, #0x3
	strb	r0, [r2, #0x4]
	ldr	r2, [r1]
	mov	r0, #0x13
	strb	r0, [r2, #0x5]
	ldr	r1, [r1]
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	ldr	r0, .L164+0x4
	strb	r3, [r0]
	ldr	r1, .L164+0x8
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x1
	bl	DisableWildEncounters
	bl	QLPlayback_InitOverworldState
	pop	{r0}
	bx	r0
.L165:
	.align	2, 0
.L164:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
	.word	gDisableMapMusicChangeOnMapLoad
.Lfe22:
	.size	 Task_BeginQuestLogPlayback,.Lfe22-Task_BeginQuestLogPlayback
	.align	2, 0
	.globl	QL_InitSceneObjectsAndActions
	.type	 QL_InitSceneObjectsAndActions,function
	.thumb_func
QL_InitSceneObjectsAndActions:
	push	{r4, r5, lr}
	ldr	r5, .L167
	ldrb	r0, [r5]
	ldr	r4, .L167+0x4
	add	r1, r4, #0
	bl	ReadQuestLogScriptFromSav1
	bl	QL_ResetRepeatEventTracker
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x1
	add	r1, r4, #0
	bl	ResetActions
	ldrb	r0, [r5]
	bl	QL_LoadObjectsAndTemplates
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L168:
	.align	2, 0
.L167:
	.word	sCurrentSceneNum
	.word	sQuestLogActionRecordBuffer
.Lfe23:
	.size	 QL_InitSceneObjectsAndActions,.Lfe23-QL_InitSceneObjectsAndActions
	.align	2, 0
	.type	 FieldCB2_QuestLogStartPlaybackWithWarpExit,function
	.thumb_func
FieldCB2_QuestLogStartPlaybackWithWarpExit:
	push	{lr}
	mov	r0, #0x4
	bl	GetTextWindowPalette
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x2
	bl	SetQuestLogState
	bl	FieldCB_DefaultWarpExit
	ldr	r2, .L170
	mov	r0, #0x0
	str	r0, [r2]
	ldrb	r1, [r2]
	sub	r0, r0, #0x10
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L171:
	.align	2, 0
.L170:
	.word	sPlaybackControl
.Lfe24:
	.size	 FieldCB2_QuestLogStartPlaybackWithWarpExit,.Lfe24-FieldCB2_QuestLogStartPlaybackWithWarpExit
	.align	2, 0
	.type	 FieldCB2_QuestLogStartPlaybackStandingInPlace,function
	.thumb_func
FieldCB2_QuestLogStartPlaybackStandingInPlace:
	push	{lr}
	mov	r0, #0x4
	bl	GetTextWindowPalette
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x2
	bl	SetQuestLogState
	bl	FieldCB_WarpExitFadeFromBlack
	ldr	r2, .L173
	mov	r0, #0x0
	str	r0, [r2]
	ldrb	r1, [r2]
	sub	r0, r0, #0x10
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L174:
	.align	2, 0
.L173:
	.word	sPlaybackControl
.Lfe25:
	.size	 FieldCB2_QuestLogStartPlaybackStandingInPlace,.Lfe25-FieldCB2_QuestLogStartPlaybackStandingInPlace
	.align	2, 0
	.globl	DrawPreviouslyOnQuestHeader
	.type	 DrawPreviouslyOnQuestHeader,function
	.thumb_func
DrawPreviouslyOnQuestHeader:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r5, #0x0
.L179:
	lsl	r4, r5, #0x3
	ldr	r0, .L182
	add	r4, r4, r0
	add	r0, r4, #0
	bl	AddWindow
	ldr	r6, .L182+0x4
	add	r1, r5, r6
	strb	r0, [r1]
	ldrb	r0, [r1]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x3
	str	r1, [sp]
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x3
	str	r1, [sp, #0x4]
	mov	r1, #0xf
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L179	@cond_branch
	ldr	r5, .L182+0x8
	ldr	r1, .L182+0xc
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	cmp	r7, #0
	beq	.L181	@cond_branch
	ldr	r4, .L182+0x10
	add	r0, r4, #0
	add	r1, r7, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringAppend
.L181:
	ldrb	r0, [r6]
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0x2
	str	r1, [sp, #0x4]
	ldr	r1, .L182+0x14
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	str	r1, [sp, #0xc]
	str	r5, [sp, #0x10]
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x2
	bl	AddTextPrinterParameterized4
	ldrb	r0, [r6]
	bl	PutWindowTilemap
	ldrb	r0, [r6, #0x1]
	bl	PutWindowTilemap
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r6, #0x2]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r6, #0x1]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L183:
	.align	2, 0
.L182:
	.word	sWindowTemplates
	.word	sWindowIds
	.word	gStringVar4
	.word	gText_QuestLog_PreviouslyOnYourQuest
	.word	gStringVar1
	.word	sTextColors
.Lfe26:
	.size	 DrawPreviouslyOnQuestHeader,.Lfe26-DrawPreviouslyOnQuestHeader
	.align	2, 0
	.globl	CommitQuestLogWindow1
	.type	 CommitQuestLogWindow1,function
	.thumb_func
CommitQuestLogWindow1:
	push	{r4, lr}
	ldr	r4, .L185
	ldrb	r0, [r4, #0x1]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x1]
	mov	r1, #0x1
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	sWindowIds
.Lfe27:
	.size	 CommitQuestLogWindow1,.Lfe27-CommitQuestLogWindow1
	.align	2, 0
	.type	 QL_LoadObjectsAndTemplates,function
	.thumb_func
QL_LoadObjectsAndTemplates:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L199
	ldr	r1, .L199+0x4
	mul	r0, r0, r1
	ldr	r1, .L199+0x8
	add	r0, r0, r1
	ldr	r1, [r2]
	add	r5, r1, r0
	mov	r4, #0x0
	mov	r9, r2
	mov	r6, r9
	ldr	r2, .L199+0xc
	mov	ip, r2
	ldr	r7, .L199+0x10
	mov	r8, r7
.L191:
	lsl	r0, r4, #0x2
	add	r3, r5, r0
	ldr	r2, .L199+0x14
	add	r1, r3, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1f
	mov	sl, r0
	cmp	r1, #0
	beq	.L192	@cond_branch
	ldr	r1, [r6]
	lsl	r2, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	mov	r7, ip
	add	r0, r3, r7
	ldrb	r0, [r0]
	neg	r0, r0
	b	.L197
.L200:
	.align	2, 0
.L199:
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1304
	.word	0x46c
	.word	0x8e4
	.word	0x46d
.L192:
	ldr	r1, [r6]
	lsl	r2, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	mov	r7, ip
	add	r0, r3, r7
	ldrb	r0, [r0]
.L197:
	add	r1, r1, r8
	strh	r0, [r1]
	add	r3, r2, #0
	mov	r0, sl
	add	r2, r5, r0
	ldr	r1, .L201
	add	r0, r2, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L194	@cond_branch
	ldr	r1, [r6]
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	mov	r7, ip
	add	r0, r2, r7
	ldr	r0, [r0]
	lsl	r0, r0, #0xf
	lsr	r0, r0, #0x18
	neg	r0, r0
	b	.L198
.L202:
	.align	2, 0
.L201:
	.word	0x46e
.L194:
	ldr	r1, [r6]
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	mov	r7, ip
	add	r0, r2, r7
	ldr	r0, [r0]
	lsl	r0, r0, #0xf
	lsr	r0, r0, #0x18
.L198:
	ldr	r2, .L203
	add	r1, r1, r2
	strh	r0, [r1]
	ldr	r1, [r6]
	add	r3, r3, r4
	lsl	r3, r3, #0x3
	add	r1, r1, r3
	mov	r7, sl
	add	r2, r5, r7
	ldr	r7, .L203+0x4
	add	r0, r2, r7
	ldrb	r0, [r0]
	lsr	r0, r0, #0x2
	ldr	r7, .L203+0x8
	add	r1, r1, r7
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, r3
	ldr	r1, .L203+0xc
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldr	r2, .L203+0x10
	add	r0, r0, r2
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3f
	bls	.L191	@cond_branch
	mov	r7, r9
	ldr	r1, [r7]
	mov	r0, #0x8e
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r0, r5, #0
	bl	QL_LoadObjects
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L204:
	.align	2, 0
.L203:
	.word	0x8e6
	.word	0x46e
	.word	0x8e8
	.word	0x46f
	.word	0x8e9
.Lfe28:
	.size	 QL_LoadObjectsAndTemplates,.Lfe28-QL_LoadObjectsAndTemplates
	.align	2, 0
	.type	 QLPlayback_SetInitialPlayerPosition,function
	.thumb_func
QLPlayback_SetInitialPlayerPosition:
	push	{r4, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L206	@cond_branch
	ldr	r3, .L208
	ldr	r2, [r3]
	ldr	r0, .L208+0x4
	mov	r1, r4
	mul	r1, r1, r0
	add	r0, r2, r1
	ldr	r4, .L208+0x8
	add	r0, r0, r4
	ldrb	r0, [r0]
	strb	r0, [r2, #0x4]
	ldr	r2, [r3]
	add	r0, r2, r1
	add	r4, r4, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	strb	r0, [r2, #0x5]
	ldr	r2, [r3]
	add	r0, r2, r1
	add	r4, r4, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	strb	r0, [r2, #0x6]
	ldr	r2, [r3]
	add	r1, r2, r1
	ldr	r3, .L208+0xc
	add	r0, r1, r3
	ldrh	r0, [r0]
	strh	r0, [r2]
	add	r4, r4, #0x3
	add	r1, r1, r4
	ldrh	r0, [r1]
	strh	r0, [r2, #0x2]
	b	.L207
.L209:
	.align	2, 0
.L208:
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1305
	.word	0x1308
.L206:
	ldr	r0, .L210
	ldr	r3, [r0]
	ldr	r0, .L210+0x4
	mul	r0, r0, r4
	add	r3, r3, r0
	ldr	r1, .L210+0x8
	add	r0, r3, r1
	ldrb	r2, [r0]
	ldr	r0, .L210+0xc
	ldr	r1, [sp]
	and	r1, r1, r0
	orr	r1, r1, r2
	str	r1, [sp]
	ldr	r2, .L210+0x10
	add	r0, r3, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	ldr	r2, .L210+0x14
	and	r2, r2, r1
	orr	r2, r2, r0
	str	r2, [sp]
	ldr	r4, .L210+0x18
	add	r0, r3, r4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, .L210+0x1c
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp]
	ldr	r1, .L210+0x20
	add	r0, r3, r1
	ldrh	r1, [r0]
	ldr	r0, .L210+0x24
	ldr	r2, [sp, #0x4]
	and	r2, r2, r0
	orr	r2, r2, r1
	str	r2, [sp, #0x4]
	add	r4, r4, #0x3
	add	r3, r3, r4
	ldrh	r1, [r3]
	lsl	r1, r1, #0x10
	ldr	r0, .L210+0x28
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	Overworld_SetWarpDestinationFromWarp
.L207:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L211:
	.align	2, 0
.L210:
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1305
	.word	-0x100
	.word	0x1306
	.word	-0xff01
	.word	0x1307
	.word	-0xff0001
	.word	0x1308
	.word	-0x10000
	.word	0xffff
.Lfe29:
	.size	 QLPlayback_SetInitialPlayerPosition,.Lfe29-QLPlayback_SetInitialPlayerPosition
	.align	2, 0
	.type	 QLPlayback_InitOverworldState,function
	.thumb_func
QLPlayback_InitOverworldState:
	push	{lr}
	ldr	r1, .L215
	mov	r0, #0x2
	strb	r0, [r1]
	bl	ResetSpecialVars
	bl	ClearBag
	bl	ClearPCItemSlots
	bl	GetQuestLogStartType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L213	@cond_branch
	ldr	r0, .L215+0x4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	QLPlayback_SetInitialPlayerPosition
	ldr	r1, .L215+0x8
	ldr	r0, .L215+0xc
	str	r0, [r1]
	ldr	r0, .L215+0x10
	bl	SetMainCallback2
	b	.L214
.L216:
	.align	2, 0
.L215:
	.word	gQuestLogState
	.word	sCurrentSceneNum
	.word	gFieldCallback2
	.word	FieldCB2_QuestLogStartPlaybackStandingInPlace
	.word	CB2_SetUpOverworldForQLPlayback
.L213:
	ldr	r0, .L217
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	QLPlayback_SetInitialPlayerPosition
	bl	WarpIntoMap
	ldr	r1, .L217+0x4
	ldr	r0, .L217+0x8
	str	r0, [r1]
	ldr	r0, .L217+0xc
	bl	SetMainCallback2
.L214:
	pop	{r0}
	bx	r0
.L218:
	.align	2, 0
.L217:
	.word	sCurrentSceneNum
	.word	gFieldCallback2
	.word	FieldCB2_QuestLogStartPlaybackWithWarpExit
	.word	CB2_SetUpOverworldForQLPlaybackWithWarpExit
.Lfe30:
	.size	 QLPlayback_InitOverworldState,.Lfe30-QLPlayback_InitOverworldState
	.align	2, 0
	.globl	QL_CopySaveState
	.type	 QL_CopySaveState,function
	.thumb_func
QL_CopySaveState:
	push	{r4, r5, lr}
	ldr	r5, .L220
	ldr	r0, .L220+0x4
	ldrb	r1, [r0]
	ldr	r0, .L220+0x8
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L220+0xc
	add	r4, r4, r0
	ldr	r1, [r5]
	add	r4, r1, r4
	mov	r2, #0xa4
	lsl	r2, r2, #0x1
	add	r0, r4, r2
	mov	r2, #0xee
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	mov	r2, #0x90
	bl	CpuSet
	ldr	r0, .L220+0x10
	add	r4, r4, r0
	ldr	r1, [r5]
	ldr	r2, .L220+0x14
	add	r1, r1, r2
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	bl	CpuSet
	bl	RestoreTrainerRematches
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
	.word	0x66c
	.word	0x1304
	.word	0x26a
	.word	0x1002
.Lfe31:
	.size	 QL_CopySaveState,.Lfe31-QL_CopySaveState
	.align	2, 0
	.globl	QL_ResetPartyAndPC
	.type	 QL_ResetPartyAndPC,function
	.thumb_func
QL_ResetPartyAndPC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	mov	r0, #0x68
	bl	AllocZeroed
	mov	r9, r0
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	mov	r0, r9
	mov	r1, #0x13
	mov	r2, #0x1
	mov	r3, #0x20
	bl	CreateMon
	ldr	r0, .L270
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x1c
	mov	r6, r9
	add	r6, r6, #0x64
	strh	r1, [r6]
	lsl	r0, r0, #0x4
	lsr	r0, r0, #0x14
	mov	r4, r9
	add	r4, r4, #0x66
	strh	r0, [r4]
	bl	QuestLog_GetPartyCount
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r6]
	cmp	r5, r0
	bls	.L223	@cond_branch
	mov	r3, #0x0
	sub	r0, r5, r0
	mov	r8, r4
	cmp	r3, r0
	bge	.L229	@cond_branch
.L227:
	mov	r0, #0x5
	sub	r0, r0, r3
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L270+0x4
	add	r0, r0, r1
	str	r3, [sp, #0x10]
	bl	ZeroMonData
	ldr	r3, [sp, #0x10]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r0, r9
	add	r0, r0, #0x64
	ldrh	r0, [r0]
	sub	r0, r5, r0
	cmp	r3, r0
	blt	.L227	@cond_branch
	b	.L229
.L271:
	.align	2, 0
.L270:
	.word	0x4027
	.word	gPlayerParty
.L223:
	mov	r8, r4
	cmp	r5, r0
	bcs	.L229	@cond_branch
	mov	r3, #0x0
	add	r4, r6, #0
.L234:
	lsl	r1, r3, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	str	r3, [sp, #0x10]
	bl	ZeroBoxMonAt
	ldr	r3, [sp, #0x10]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x4
	bls	.L234	@cond_branch
	add	r3, r5, #0
	ldrh	r0, [r4]
	cmp	r3, r0
	bcs	.L229	@cond_branch
.L239:
	mov	r0, #0x64
	mul	r0, r0, r3
	ldr	r1, .L272
	add	r0, r0, r1
	mov	r1, r9
	mov	r2, #0x64
	str	r3, [sp, #0x10]
	bl	CopyMon
	ldr	r3, [sp, #0x10]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldrh	r1, [r4]
	cmp	r3, r1
	bcc	.L239	@cond_branch
.L229:
	bl	QuestLog_GetBoxMonCount
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r1, r8
	ldrh	r0, [r1]
	cmp	r5, r0
	bls	.L241	@cond_branch
	mov	r3, #0x0
.L245:
	mov	r6, #0x0
	lsl	r7, r3, #0x18
	lsr	r7, r7, #0x18
.L249:
	lsl	r0, r6, #0x18
	lsr	r4, r0, #0x18
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, #0x5
	str	r3, [sp, #0x10]
	bl	GetBoxMonDataAt
	ldr	r3, [sp, #0x10]
	cmp	r0, #0
	beq	.L248	@cond_branch
	add	r0, r7, #0
	add	r1, r4, #0
	bl	ZeroBoxMonAt
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r3, [sp, #0x10]
	mov	r0, r8
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L255	@cond_branch
.L248:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x1d
	bls	.L249	@cond_branch
	mov	r1, r8
	ldrh	r1, [r1]
	cmp	r5, r1
	beq	.L255	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0xd
	bls	.L245	@cond_branch
	b	.L255
.L273:
	.align	2, 0
.L272:
	.word	gPlayerParty
.L241:
	cmp	r5, r0
	bcs	.L255	@cond_branch
	mov	r3, #0x0
.L260:
	mov	r6, #0x0
	lsl	r7, r3, #0x18
.L264:
	lsl	r1, r6, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r7, #0x18
	str	r3, [sp, #0x10]
	bl	GetBoxedMonPtr
	add	r4, r0, #0
	mov	r1, #0x5
	bl	GetBoxMonData
	ldr	r3, [sp, #0x10]
	cmp	r0, #0
	bne	.L263	@cond_branch
	add	r0, r4, #0
	mov	r1, r9
	mov	r2, #0x50
	bl	CopyMon
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r3, [sp, #0x10]
	mov	r0, r8
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L255	@cond_branch
.L263:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x1d
	bls	.L264	@cond_branch
	mov	r1, r8
	ldrh	r1, [r1]
	cmp	r5, r1
	beq	.L255	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0xd
	bls	.L260	@cond_branch
.L255:
	mov	r0, r9
	bl	Free
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 QL_ResetPartyAndPC,.Lfe32-QL_ResetPartyAndPC
	.align	2, 0
	.type	 SetPokemonCounts,function
	.thumb_func
SetPokemonCounts:
	push	{r4, lr}
	bl	QuestLog_GetPartyCount
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	QuestLog_GetBoxMonCount
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L275
	lsl	r4, r4, #0xc
	add	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	VarSet
	pop	{r4}
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	0x4027
.Lfe33:
	.size	 SetPokemonCounts,.Lfe33-SetPokemonCounts
	.align	2, 0
	.type	 QuestLog_GetPartyCount,function
	.thumb_func
QuestLog_GetPartyCount:
	push	{r4, r5, lr}
	mov	r5, #0x0
	mov	r4, #0x0
.L281:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L284
	add	r0, r0, r1
	mov	r1, #0x5
	bl	GetMonData
	cmp	r0, #0
	beq	.L280	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L280:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x5
	bls	.L281	@cond_branch
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L285:
	.align	2, 0
.L284:
	.word	gPlayerParty
.Lfe34:
	.size	 QuestLog_GetPartyCount,.Lfe34-QuestLog_GetPartyCount
	.align	2, 0
	.type	 QuestLog_GetBoxMonCount,function
	.thumb_func
QuestLog_GetBoxMonCount:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	mov	r0, #0x0
.L290:
	mov	r4, #0x0
	lsl	r5, r0, #0x18
	add	r7, r0, #0x1
.L294:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r5, #0x18
	mov	r2, #0x5
	bl	GetBoxMonDataAt
	cmp	r0, #0
	beq	.L293	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L293:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x1d
	bls	.L294	@cond_branch
	lsl	r0, r7, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xd
	bls	.L290	@cond_branch
	add	r0, r6, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 QuestLog_GetBoxMonCount,.Lfe35-QuestLog_GetBoxMonCount
	.align	2, 0
	.type	 RestoreTrainerRematches,function
	.thumb_func
RestoreTrainerRematches:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r5, #0x0
	ldr	r0, .L311
	mov	r8, r0
	ldr	r7, .L311+0x4
.L302:
	ldr	r1, .L311+0x8
	add	r0, r5, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r1, r5, #0x1
	add	r1, r1, sp
	strh	r0, [r1]
	mov	r4, #0x0
	add	r6, r5, #0x1
	add	r3, r1, #0
	lsl	r5, r5, #0x4
.L306:
	ldrh	r0, [r3]
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L307	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	add	r1, r5, r4
	add	r0, r0, r7
	add	r0, r0, r1
	mov	r1, #0x1e
	strb	r1, [r0]
	b	.L308
.L312:
	.align	2, 0
.L311:
	.word	gSaveBlock1Ptr
	.word	0x63a
	.word	0x40aa
.L307:
	mov	r1, r8
	ldr	r0, [r1]
	add	r1, r5, r4
	add	r0, r0, r7
	add	r0, r0, r1
	strb	r2, [r0]
.L308:
	ldrh	r0, [r3]
	lsr	r0, r0, #0x1
	strh	r0, [r3]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xf
	bls	.L306	@cond_branch
	lsl	r0, r6, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bls	.L302	@cond_branch
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 RestoreTrainerRematches,.Lfe36-RestoreTrainerRematches
	.align	2, 0
	.globl	QL_RestoreMapLayoutId
	.type	 QL_RestoreMapLayoutId,function
	.thumb_func
QL_RestoreMapLayoutId:
	push	{r4, r5, lr}
	add	sp, sp, #-0x1c
	ldr	r0, .L315
	bl	VarGet
	ldr	r4, .L315+0x4
	ldr	r1, [r4]
	strh	r0, [r1, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L314	@cond_branch
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	mov	r1, sp
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r1, [r4]
	mov	r0, sp
	ldrh	r0, [r0, #0x12]
	strh	r0, [r1, #0x32]
.L314:
	add	sp, sp, #0x1c
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L316:
	.align	2, 0
.L315:
	.word	0x40ae
	.word	gSaveBlock1Ptr
.Lfe37:
	.size	 QL_RestoreMapLayoutId,.Lfe37-QL_RestoreMapLayoutId
	.align	2, 0
	.type	 ReadQuestLogScriptFromSav1,function
	.thumb_func
ReadQuestLogScriptFromSav1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r8, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r6, #0x0
	mov	r9, r6
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, r8
	mov	r1, #0x0
	bl	memset
	mov	r7, #0x0
	ldr	r2, .L339
	mov	r1, #0x0
.L321:
	lsl	r0, r7, #0x2
	add	r0, r0, r2
	str	r1, [r0]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x1f
	bls	.L321	@cond_branch
	ldr	r1, .L339+0x4
	ldr	r0, .L339+0x8
	mul	r0, r0, r4
	ldr	r1, [r1]
	add	r0, r0, r1
	ldr	r1, .L339+0xc
	add	r4, r0, r1
	mov	r7, #0x0
.L326:
	ldrh	r0, [r4]
	ldr	r1, .L339+0x10
	and	r1, r1, r0
	cmp	r1, #0x29
	bls	.LCB2733
	b	.L333	@long jump
.LCB2733:
	lsl	r0, r1, #0x2
	ldr	r1, .L339+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L340:
	.align	2, 0
.L339:
	.word	sEventData
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1870
	.word	0xfff
	.word	.L335
	.align	2, 0
	.align	2, 0
.L335:
	.word	.L328
	.word	.L330
	.word	.L330
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L333
	.word	.L331
	.word	.L333
	.word	.L332
.L328:
	lsl	r1, r6, #0x3
	add	r1, r1, r8
	add	r0, r4, #0
	bl	QL_LoadAction_Input
	b	.L338
.L330:
	lsl	r1, r6, #0x3
	add	r1, r1, r8
	add	r0, r4, #0
	bl	QL_LoadAction_MovementOrGfxChange
	b	.L338
.L331:
	lsl	r1, r6, #0x3
	add	r1, r1, r8
	add	r0, r4, #0
	bl	QL_LoadAction_SceneEnd
	b	.L338
.L332:
	lsl	r1, r6, #0x3
	add	r1, r1, r8
	add	r0, r4, #0
	bl	QL_LoadAction_Wait
.L338:
	add	r4, r0, #0
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	b	.L327
.L333:
	mov	r0, r9
	lsl	r1, r0, #0x2
	ldr	r5, .L341
	add	r1, r1, r5
	add	r0, r4, #0
	bl	QL_SkipCommand
	add	r4, r0, #0
	mov	r1, r9
	cmp	r1, #0
	bne	.L334	@cond_branch
	ldr	r0, [r5]
	bl	QL_UpdateLastDepartedLocation
.L334:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
.L327:
	cmp	r4, #0
	beq	.L324	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x1f
	bhi	.LCB2826
	b	.L326	@long jump
.LCB2826:
.L324:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L342:
	.align	2, 0
.L341:
	.word	sEventData
.Lfe38:
	.size	 ReadQuestLogScriptFromSav1,.Lfe38-ReadQuestLogScriptFromSav1
	.align	2, 0
	.type	 DoSceneEndTransition,function
	.thumb_func
DoSceneEndTransition:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x1
	bl	FadeScreen
	ldr	r1, .L344
	ldr	r0, .L344+0x4
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L345:
	.align	2, 0
.L344:
	.word	sQuestLogCB
	.word	QuestLog_AdvancePlayhead
.Lfe39:
	.size	 DoSceneEndTransition,.Lfe39-DoSceneEndTransition
	.align	2, 0
	.type	 QuestLog_AdvancePlayhead,function
	.thumb_func
QuestLog_AdvancePlayhead:
	push	{lr}
	ldr	r0, .L350
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L346	@cond_branch
	bl	LockPlayerFieldControls
	ldr	r1, .L350+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L348	@cond_branch
	ldr	r0, .L350+0x8
	ldr	r0, [r0]
	ldrb	r2, [r1]
	ldr	r1, .L350+0xc
	mul	r1, r1, r2
	add	r0, r0, r1
	ldr	r1, .L350+0x10
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L348	@cond_branch
	ldr	r1, .L350+0x14
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	bl	QLPlayback_InitOverworldState
	b	.L346
.L351:
	.align	2, 0
.L350:
	.word	gPaletteFade
	.word	sCurrentSceneNum
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1304
	.word	sNumScenes
.L348:
	ldr	r1, .L352
	mov	r0, #0x0
	strb	r0, [r1]
	bl	QuestLog_StartFinalScene
.L346:
	pop	{r0}
	bx	r0
.L353:
	.align	2, 0
.L352:
	.word	gQuestLogPlaybackState
.Lfe40:
	.size	 QuestLog_AdvancePlayhead,.Lfe40-QuestLog_AdvancePlayhead
	.align	2, 0
	.type	 QuestLog_StartFinalScene,function
	.thumb_func
QuestLog_StartFinalScene:
	push	{lr}
	bl	ResetSpecialVars
	bl	Save_ResetSaveCounters
	mov	r0, #0x0
	bl	LoadGameSave
	ldr	r0, .L355
	bl	SetMainCallback2
	ldr	r1, .L355+0x4
	ldr	r0, .L355+0x8
	str	r0, [r1]
	bl	FreeAllWindowBuffers
	ldr	r1, .L355+0xc
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r1, .L355+0x10
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L356:
	.align	2, 0
.L355:
	.word	CB2_EnterFieldFromQuestLog
	.word	gFieldCallback2
	.word	FieldCB2_FinalScene
	.word	gQuestLogState
	.word	sQuestLogCB
.Lfe41:
	.size	 QuestLog_StartFinalScene,.Lfe41-QuestLog_StartFinalScene
	.align	2, 0
	.globl	QuestLog_AdvancePlayhead_
	.type	 QuestLog_AdvancePlayhead_,function
	.thumb_func
QuestLog_AdvancePlayhead_:
	push	{lr}
	bl	QuestLog_AdvancePlayhead
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 QuestLog_AdvancePlayhead_,.Lfe42-QuestLog_AdvancePlayhead_
	.align	2, 0
	.globl	QL_AvoidDisplay
	.type	 QL_AvoidDisplay,function
	.thumb_func
QL_AvoidDisplay:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L365
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L360	@cond_branch
	cmp	r0, #0x2
	beq	.L361	@cond_branch
	b	.L359
.L366:
	.align	2, 0
.L365:
	.word	gQuestLogState
.L360:
	bl	QuestLog_CutRecording
	b	.L359
.L361:
	ldr	r1, .L367
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r0, .L367+0x4
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L367+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	strh	r2, [r1, #0xa]
	mov	r1, #0xe
	add	r2, r4, #0
	bl	SetWordTaskArg
	mov	r0, #0x1
	b	.L364
.L368:
	.align	2, 0
.L367:
	.word	gQuestLogPlaybackState
	.word	Task_AvoidDisplay
	.word	gTasks
.L359:
	mov	r0, #0x0
.L364:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 QL_AvoidDisplay,.Lfe43-QL_AvoidDisplay
	.align	2, 0
	.type	 Task_AvoidDisplay,function
	.thumb_func
Task_AvoidDisplay:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L378
	add	r4, r0, r1
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L371	@cond_branch
	cmp	r1, #0x1
	beq	.L373	@cond_branch
	b	.L370
.L379:
	.align	2, 0
.L378:
	.word	gTasks+0x8
.L371:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7f
	bne	.L370	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r2, .L380
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	b	.L370
.L381:
	.align	2, 0
.L380:
	.word	sPlaybackControl
.L373:
	ldr	r0, .L382
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L370	@cond_branch
	ldr	r0, .L382+0x4
	strb	r1, [r0]
	add	r0, r5, #0
	mov	r1, #0xe
	bl	GetWordTaskArg
	cmp	r0, #0
	beq	.L375	@cond_branch
	bl	_call_via_r0
.L375:
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r1, .L382+0x8
	ldr	r0, .L382+0xc
	str	r0, [r1]
.L370:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L383:
	.align	2, 0
.L382:
	.word	gPaletteFade
	.word	gQuestLogPlaybackState
	.word	sQuestLogCB
	.word	QuestLog_AdvancePlayhead
.Lfe44:
	.size	 Task_AvoidDisplay,.Lfe44-Task_AvoidDisplay
	.align	2, 0
	.type	 QuestLog_PlayCurrentEvent,function
	.thumb_func
QuestLog_PlayCurrentEvent:
	push	{r4, r5, lr}
	ldr	r4, .L393
	ldrb	r1, [r4]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L385	@cond_branch
	ldrb	r0, [r4, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x2]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L384	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x31
	neg	r1, r1
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x2
	bl	TogglePlaybackStateForOverworldLock
.L385:
	ldrb	r1, [r4]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L387	@cond_branch
	ldrb	r0, [r4, #0x3]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xf
	bls	.L387	@cond_branch
	bl	QuestLog_CloseTextWindow
	ldrb	r0, [r4]
	mov	r1, #0x31
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r4, #0x3]
.L387:
	ldr	r4, .L393
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1f
	bhi	.L384	@cond_branch
	ldr	r5, .L393+0x4
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	QL_TryRepeatEvent
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L390	@cond_branch
	bl	HandleShowQuestLogMessage
	b	.L384
.L394:
	.align	2, 0
.L393:
	.word	sPlaybackControl
	.word	sEventData
.L390:
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	QL_LoadEvent
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L384	@cond_branch
	bl	HandleShowQuestLogMessage
.L384:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 QuestLog_PlayCurrentEvent,.Lfe45-QuestLog_PlayCurrentEvent
	.align	2, 0
	.type	 HandleShowQuestLogMessage,function
	.thumb_func
HandleShowQuestLogMessage:
	push	{r4, lr}
	ldr	r4, .L399
	ldrb	r1, [r4]
	mov	r2, #0xf
	and	r2, r2, r1
	cmp	r2, #0
	bne	.L396	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	mov	r1, #0x31
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r4]
	strb	r2, [r4, #0x3]
	bl	GetQuestLogTextDisplayDuration
	strb	r0, [r4, #0x2]
	ldr	r0, .L399+0x4
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L397	@cond_branch
	ldrb	r0, [r4, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x1]
.L397:
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x20
	bhi	.L395	@cond_branch
	bl	DrawSceneDescription
.L396:
	mov	r0, #0x1
	bl	TogglePlaybackStateForOverworldLock
.L395:
	pop	{r4}
	pop	{r0}
	bx	r0
.L400:
	.align	2, 0
.L399:
	.word	sPlaybackControl
	.word	gQuestLogRepeatEventTracker
.Lfe46:
	.size	 HandleShowQuestLogMessage,.Lfe46-HandleShowQuestLogMessage
	.align	2, 0
	.type	 GetQuestLogTextDisplayDuration,function
	.thumb_func
GetQuestLogTextDisplayDuration:
	push	{r4, lr}
	mov	r2, #0x0
	mov	r1, #0x0
	ldr	r3, .L413
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L403	@cond_branch
	ldr	r4, .L413+0x4
.L405:
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0xfe
	beq	.L404	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L404:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, r4
	bhi	.L403	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L405	@cond_branch
.L403:
	cmp	r2, #0x13
	bhi	.L409	@cond_branch
	mov	r0, #0x5f
	b	.L412
.L414:
	.align	2, 0
.L413:
	.word	gStringVar4
	.word	0x3ff
.L409:
	cmp	r2, #0x23
	bhi	.L410	@cond_branch
	mov	r0, #0x7f
	b	.L412
.L410:
	cmp	r2, #0x2d
	bls	.L411	@cond_branch
	mov	r0, #0xff
	b	.L412
.L411:
	mov	r0, #0xbf
.L412:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 GetQuestLogTextDisplayDuration,.Lfe47-GetQuestLogTextDisplayDuration
	.align	2, 0
	.globl	QL_IsTrainerSightDisabled
	.type	 QL_IsTrainerSightDisabled,function
	.thumb_func
QL_IsTrainerSightDisabled:
	push	{lr}
	ldr	r0, .L420
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L417	@cond_branch
	ldr	r0, .L420+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L418	@cond_branch
	ldr	r0, .L420+0x8
	ldrb	r0, [r0]
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.L418	@cond_branch
	cmp	r1, #0x2
	bne	.L417	@cond_branch
.L418:
	mov	r0, #0x1
	b	.L419
.L421:
	.align	2, 0
.L420:
	.word	gQuestLogState
	.word	gQuestLogPlaybackState
	.word	sPlaybackControl
.L417:
	mov	r0, #0x0
.L419:
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 QL_IsTrainerSightDisabled,.Lfe48-QL_IsTrainerSightDisabled
	.align	2, 0
	.globl	QL_HandleInput
	.type	 QL_HandleInput,function
	.thumb_func
QL_HandleInput:
	push	{r4, r5, lr}
	ldr	r5, .L427
	ldrb	r2, [r5]
	mov	r4, #0xc0
	and	r4, r4, r2
	cmp	r4, #0
	bne	.L422	@cond_branch
	ldr	r0, .L427+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r3, #0x1
	and	r3, r3, r1
	cmp	r3, #0
	beq	.L424	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r2
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r5]
	ldr	r0, .L427+0x8
	strb	r4, [r0]
	mov	r0, #0x3
	neg	r0, r0
	bl	DoSceneEndTransition
	b	.L422
.L428:
	.align	2, 0
.L427:
	.word	sPlaybackControl
	.word	gMain
	.word	gQuestLogPlaybackState
.L424:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L422	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r2
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r5]
	ldr	r0, .L429
	strb	r3, [r0]
	mov	r0, #0x3
	neg	r0, r0
	bl	DoSkipToEndTransition
.L422:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L430:
	.align	2, 0
.L429:
	.word	gQuestLogPlaybackState
.Lfe49:
	.size	 QL_HandleInput,.Lfe49-QL_HandleInput
	.align	2, 0
	.globl	QuestLogScenePlaybackIsEnding
	.type	 QuestLogScenePlaybackIsEnding,function
	.thumb_func
QuestLogScenePlaybackIsEnding:
	push	{lr}
	ldr	r0, .L434
	ldrb	r1, [r0]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L432	@cond_branch
	mov	r0, #0x0
	b	.L433
.L435:
	.align	2, 0
.L434:
	.word	sPlaybackControl
.L432:
	mov	r0, #0x1
.L433:
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 QuestLogScenePlaybackIsEnding,.Lfe50-QuestLogScenePlaybackIsEnding
	.align	2, 0
	.globl	QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode
	.type	 QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode,function
	.thumb_func
QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode:
	push	{lr}
	ldr	r0, .L438
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L437	@cond_branch
	ldr	r0, .L438+0x4
	ldrb	r0, [r0]
	bl	DrawPreviouslyOnQuestHeader
.L437:
	pop	{r0}
	bx	r0
.L439:
	.align	2, 0
.L438:
	.word	gQuestLogState
	.word	sNumScenes
.Lfe51:
	.size	 QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode,.Lfe51-QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode
	.align	2, 0
	.type	 DrawSceneDescription,function
	.thumb_func
DrawSceneDescription:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	mov	r4, #0x0
	mov	r1, #0x0
	ldr	r2, .L448
	ldrb	r0, [r2]
	ldr	r5, .L448+0x4
	cmp	r0, #0xff
	beq	.L442	@cond_branch
.L444:
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0xfe
	bne	.L443	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L443:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xff
	bhi	.L442	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L444	@cond_branch
.L442:
	ldrb	r0, [r5, #0x2]
	bl	PutWindowTilemap
	ldrb	r0, [r5, #0x2]
	bl	CopyDescriptionWindowTiles
	ldrb	r0, [r5, #0x2]
	ldr	r1, .L448+0x8
	add	r1, r4, r1
	ldrb	r3, [r1]
	mov	r1, #0x1
	str	r1, [sp]
	mov	r2, #0x0
	str	r2, [sp, #0x4]
	ldr	r1, .L448+0xc
	str	r1, [sp, #0x8]
	str	r2, [sp, #0xc]
	ldr	r1, .L448
	str	r1, [sp, #0x10]
	mov	r1, #0x2
	mov	r2, #0x2
	bl	AddTextPrinterParameterized4
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L449:
	.align	2, 0
.L448:
	.word	gStringVar4
	.word	sWindowIds
	.word	sQuestLogTextLineYCoords
	.word	sTextColors
.Lfe52:
	.size	 DrawSceneDescription,.Lfe52-DrawSceneDescription
	.align	2, 0
	.type	 CopyDescriptionWindowTiles,function
	.thumb_func
CopyDescriptionWindowTiles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L467
	mov	r9, r0
	mov	r0, #0xb4
	lsl	r0, r0, #0x5
	bl	Alloc
	mov	r8, r0
	cmp	r0, #0
	beq	.L451	@cond_branch
	mov	r1, #0x0
.L455:
	cmp	r1, #0
	beq	.L458	@cond_branch
	cmp	r1, #0x5
	beq	.L459	@cond_branch
	mov	r0, #0x1
	b	.L456
.L468:
	.align	2, 0
.L467:
	.word	sDescriptionWindow_Gfx
.L458:
	mov	r0, #0x0
	b	.L456
.L459:
	mov	r0, #0x2
.L456:
	mov	r4, #0x0
	lsl	r6, r0, #0x5
	lsl	r0, r1, #0x4
	add	r7, r1, #0x1
	sub	r0, r0, r1
	lsl	r5, r0, #0x1
.L464:
	add	r1, r5, r4
	lsl	r1, r1, #0x5
	add	r1, r1, r8
	mov	r2, r9
	add	r0, r2, r6
	ldr	r2, .L469
	bl	CpuSet
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1d
	bls	.L464	@cond_branch
	lsl	r0, r7, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x5
	bls	.L455	@cond_branch
	mov	r2, #0xb4
	lsl	r2, r2, #0x5
	mov	r0, sl
	mov	r1, r8
	mov	r3, #0x0
	bl	CopyToWindowPixelBuffer
	mov	r0, r8
	bl	Free
.L451:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L470:
	.align	2, 0
.L469:
	.word	0x4000008
.Lfe53:
	.size	 CopyDescriptionWindowTiles,.Lfe53-CopyDescriptionWindowTiles
	.align	2, 0
	.type	 QuestLog_CloseTextWindow,function
	.thumb_func
QuestLog_CloseTextWindow:
	push	{r4, lr}
	add	sp, sp, #-0x8
	ldr	r4, .L472
	ldrb	r0, [r4, #0x2]
	bl	ClearWindowTilemap
	ldrb	r0, [r4, #0x2]
	mov	r1, #0xf0
	str	r1, [sp]
	mov	r1, #0x30
	str	r1, [sp, #0x4]
	mov	r1, #0xf
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
	ldrb	r0, [r4, #0x2]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r4, #0x1]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x1]
	mov	r1, #0x1
	bl	CopyWindowToVram
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L473:
	.align	2, 0
.L472:
	.word	sWindowIds
.Lfe54:
	.size	 QuestLog_CloseTextWindow,.Lfe54-QuestLog_CloseTextWindow
	.align	2, 0
	.type	 DoSkipToEndTransition,function
	.thumb_func
DoSkipToEndTransition:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x1
	bl	FadeScreen
	ldr	r1, .L475
	ldr	r0, .L475+0x4
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L476:
	.align	2, 0
.L475:
	.word	sQuestLogCB
	.word	QuestLog_WaitFadeAndCancelPlayback
.Lfe55:
	.size	 DoSkipToEndTransition,.Lfe55-DoSkipToEndTransition
	.align	2, 0
	.type	 QuestLog_WaitFadeAndCancelPlayback,function
	.thumb_func
QuestLog_WaitFadeAndCancelPlayback:
	push	{r4, lr}
	ldr	r0, .L485
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L478	@cond_branch
	bl	LockPlayerFieldControls
	ldr	r3, .L485+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L480	@cond_branch
	ldr	r0, .L485+0x8
	ldr	r0, [r0]
	ldrb	r2, [r3]
	ldr	r1, .L485+0xc
	mul	r1, r1, r2
	add	r0, r0, r1
	ldr	r1, .L485+0x10
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L480	@cond_branch
	add	r4, r3, #0
.L483:
	ldrb	r0, [r4]
	ldr	r1, .L485+0x14
	bl	ReadQuestLogScriptFromSav1
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L480	@cond_branch
	ldr	r0, .L485+0x8
	ldr	r1, [r0]
	ldrb	r2, [r4]
	ldr	r0, .L485+0xc
	mul	r0, r0, r2
	add	r1, r1, r0
	ldr	r0, .L485+0x10
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L483	@cond_branch
.L480:
	ldr	r1, .L485+0x18
	mov	r0, #0x0
	strb	r0, [r1]
	bl	QuestLog_StartFinalScene
.L478:
	pop	{r4}
	pop	{r0}
	bx	r0
.L486:
	.align	2, 0
.L485:
	.word	gPaletteFade
	.word	sCurrentSceneNum
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1304
	.word	sQuestLogActionRecordBuffer
	.word	gQuestLogPlaybackState
.Lfe56:
	.size	 QuestLog_WaitFadeAndCancelPlayback,.Lfe56-QuestLog_WaitFadeAndCancelPlayback
	.align	2, 0
	.globl	QuestLog_InitPalettesBackup
	.type	 QuestLog_InitPalettesBackup,function
	.thumb_func
QuestLog_InitPalettesBackup:
	push	{r4, lr}
	ldr	r0, .L489
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.L488	@cond_branch
	ldr	r4, .L489+0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	bl	AllocZeroed
	str	r0, [r4]
.L488:
	pop	{r4}
	pop	{r0}
	bx	r0
.L490:
	.align	2, 0
.L489:
	.word	gQuestLogState
	.word	sPalettesBackup
.Lfe57:
	.size	 QuestLog_InitPalettesBackup,.Lfe57-QuestLog_InitPalettesBackup
	.align	2, 0
	.globl	QuestLog_BackUpPalette
	.type	 QuestLog_BackUpPalette,function
	.thumb_func
QuestLog_BackUpPalette:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsr	r3, r3, #0xf
	ldr	r0, .L492
	add	r0, r3, r0
	ldr	r1, .L492+0x4
	ldr	r1, [r1]
	add	r1, r1, r3
	bl	CpuSet
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	gPlttBufferUnfaded
	.word	sPalettesBackup
.Lfe58:
	.size	 QuestLog_BackUpPalette,.Lfe58-QuestLog_BackUpPalette
	.align	2, 0
	.type	 FieldCB2_FinalScene,function
	.thumb_func
FieldCB2_FinalScene:
	push	{lr}
	mov	r0, #0x4
	bl	GetTextWindowPalette
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x0
	bl	DrawPreviouslyOnQuestHeader
	bl	FieldCB_WarpExitFadeFromBlack
	ldr	r0, .L495
	mov	r1, #0xff
	bl	CreateTask
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L496:
	.align	2, 0
.L495:
	.word	Task_FinalScene_WaitFade
.Lfe59:
	.size	 FieldCB2_FinalScene,.Lfe59-FieldCB2_FinalScene
	.align	2, 0
	.type	 Task_FinalScene_WaitFade,function
	.thumb_func
Task_FinalScene_WaitFade:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L499
	add	r4, r1, r0
	bl	ArePlayerFieldControlsLocked
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L498	@cond_branch
	bl	FreezeObjectEvents
	bl	HandleEnforcedLookDirectionOnPlayerStopMoving
	bl	StopPlayerAvatar
	bl	LockPlayerFieldControls
	ldr	r0, .L499+0x4
	str	r0, [r4]
.L498:
	pop	{r4}
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	gTasks
	.word	Task_QuestLogScene_SavedGame
.Lfe60:
	.size	 Task_FinalScene_WaitFade,.Lfe60-Task_FinalScene_WaitFade
	.align	2, 0
	.type	 Task_QuestLogScene_SavedGame,function
	.thumb_func
Task_QuestLogScene_SavedGame:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L504
	add	r5, r1, r0
	ldr	r0, .L504+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L502	@cond_branch
	ldr	r0, .L504+0x8
	ldrb	r1, [r0]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	beq	.L503	@cond_branch
	ldr	r0, .L504+0xc
	ldr	r1, .L504+0x10
	ldrb	r1, [r1, #0x14]
	bl	GetMapNameGeneric
	ldr	r0, .L504+0x14
	ldr	r1, .L504+0x18
	bl	StringExpandPlaceholders
	bl	DrawSceneDescription
.L503:
	strh	r4, [r5, #0x8]
	strh	r4, [r5, #0xa]
	ldr	r0, .L504+0x1c
	str	r0, [r5]
	bl	FreezeObjectEvents
	bl	LockPlayerFieldControls
.L502:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L505:
	.align	2, 0
.L504:
	.word	gTasks
	.word	gPaletteFade
	.word	sPlaybackControl
	.word	gStringVar1
	.word	gMapHeader
	.word	gStringVar4
	.word	gText_QuestLog_SavedGameAtLocation
	.word	Task_WaitAtEndOfQuestLog
.Lfe61:
	.size	 Task_QuestLogScene_SavedGame,.Lfe61-Task_QuestLogScene_SavedGame
	.align	2, 0
	.type	 Task_WaitAtEndOfQuestLog,function
	.thumb_func
Task_WaitAtEndOfQuestLog:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L510
	add	r4, r1, r0
	ldr	r0, .L510+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L508	@cond_branch
	ldrh	r2, [r4, #0x8]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7e
	bgt	.L508	@cond_branch
	ldr	r0, .L510+0x8
	ldrb	r1, [r0]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L507	@cond_branch
.L508:
	bl	QuestLog_CloseTextWindow
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L510+0xc
	str	r0, [r4]
	ldr	r0, .L510+0x10
	strb	r1, [r0]
	b	.L509
.L511:
	.align	2, 0
.L510:
	.word	gTasks
	.word	gMain
	.word	sPlaybackControl
	.word	Task_EndQuestLog
	.word	gQuestLogState
.L507:
	add	r0, r2, #0x1
	strh	r0, [r4, #0x8]
.L509:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 Task_WaitAtEndOfQuestLog,.Lfe62-Task_WaitAtEndOfQuestLog
	.align	2, 0
	.type	 Task_EndQuestLog,function
	.thumb_func
Task_EndQuestLog:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L529
	add	r6, r0, r1
	mov	r0, #0x0
	ldrsh	r1, [r6, r0]
	cmp	r1, #0x1
	beq	.L515	@cond_branch
	cmp	r1, #0x1
	bgt	.L528	@cond_branch
	cmp	r1, #0
	beq	.L514	@cond_branch
	b	.L525
.L530:
	.align	2, 0
.L529:
	.word	gTasks+0x8
.L528:
	cmp	r1, #0x2
	beq	.L522	@cond_branch
	b	.L525
.L514:
	ldr	r0, .L531
	strb	r1, [r0]
	bl	Overworld_PlaySpecialMapMusic
	bl	QL_SlightlyDarkenSomePals
	ldr	r0, .L531+0x4
	ldrb	r0, [r0]
	ldr	r2, .L531+0x8
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x3
	str	r1, [sp]
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x3
	str	r1, [sp, #0x4]
	mov	r1, #0xf
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
	b	.L523
.L532:
	.align	2, 0
.L531:
	.word	gDisableMapMusicChangeOnMapLoad
	.word	sWindowIds
	.word	sWindowTemplates
.L515:
	add	r0, r5, #0
	bl	RestoreScreenAfterPlayback
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L513	@cond_branch
	mov	r5, #0x0
.L520:
	ldr	r4, .L533
	add	r4, r5, r4
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	bl	RemoveWindow
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L520	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6, #0x2]
	b	.L523
.L534:
	.align	2, 0
.L533:
	.word	sWindowIds
.L522:
	ldrh	r1, [r6, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r6, r2]
	cmp	r0, #0x1f
	bgt	.L523	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r6, #0x2]
	b	.L513
.L523:
	ldrh	r0, [r6]
	add	r0, r0, #0x1
	strh	r0, [r6]
	b	.L513
.L525:
	ldr	r6, .L535
	ldrb	r1, [r6]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L526	@cond_branch
	mov	r0, #0x1
	bl	ShowMapNamePopup
.L526:
	ldr	r4, .L535+0x4
	ldr	r0, [r4]
	ldr	r1, .L535+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	bl	CpuSet
	ldr	r0, [r4]
	bl	Free
	mov	r4, #0x0
	str	r4, [r6]
	bl	ClearPlayerHeldMovementAndUnfreezeObjectEvents
	bl	UnlockPlayerFieldControls
	ldr	r2, .L535+0xc
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L535+0x10
	strb	r4, [r0]
	mov	r0, #0x0
	bl	DisableWildEncounters
	ldr	r1, .L535+0x14
	mov	r0, #0x1
	strb	r0, [r1]
	add	r0, r5, #0
	bl	DestroyTask
.L513:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L536:
	.align	2, 0
.L535:
	.word	sPlaybackControl
	.word	sPalettesBackup
	.word	gPlttBufferUnfaded
	.word	gTextFlags
	.word	gGlobalFieldTintMode
	.word	gHelpSystemEnabled
.Lfe63:
	.size	 Task_EndQuestLog,.Lfe63-Task_EndQuestLog
	.align	2, 0
	.type	 RestoreScreenAfterPlayback,function
	.thumb_func
RestoreScreenAfterPlayback:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L540
	add	r7, r1, r0
	ldrh	r1, [r7, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r7, r2]
	cmp	r0, #0xf
	bgt	.L538	@cond_branch
	ldr	r5, .L540+0x4
	ldr	r6, .L540+0x8
	mov	r4, #0xf
	sub	r3, r4, r1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0xdf
	bl	CopyPaletteInvertedTint
	mov	r0, #0xff
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	add	r6, r6, r0
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrb	r0, [r7, #0x2]
	sub	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r1, r6, #0
	add	r3, r4, #0
	bl	CopyPaletteInvertedTint
	ldr	r5, .L540+0xc
	ldrb	r0, [r5]
	ldr	r4, .L540+0x10
	ldrb	r3, [r4, #0x4]
	lsl	r3, r3, #0x3
	sub	r3, r3, #0x1
	ldrh	r1, [r7, #0x2]
	sub	r3, r3, r1
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x3
	str	r1, [sp]
	mov	r6, #0x1
	str	r6, [sp, #0x4]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	FillWindowPixelRect
	ldrb	r0, [r5, #0x1]
	ldrh	r3, [r7, #0x2]
	ldrb	r1, [r4, #0xb]
	lsl	r1, r1, #0x3
	str	r1, [sp]
	str	r6, [sp, #0x4]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	FillWindowPixelRect
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r5, #0x1]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrh	r0, [r7, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x2]
	mov	r0, #0x0
	b	.L539
.L541:
	.align	2, 0
.L540:
	.word	gTasks+0x8
	.word	gPlttBufferUnfaded+0x2
	.word	gPlttBufferFaded+0x2
	.word	sWindowIds
	.word	sWindowTemplates
.L538:
	mov	r0, #0x1
.L539:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 RestoreScreenAfterPlayback,.Lfe64-RestoreScreenAfterPlayback
	.align	2, 0
	.type	 QL_SlightlyDarkenSomePals,function
	.thumb_func
QL_SlightlyDarkenSomePals:
	push	{r4, r5, r6, lr}
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	bl	Alloc
	add	r6, r0, #0
	ldr	r4, .L543
	ldr	r0, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x2
	add	r1, r6, #0
	add	r2, r5, #0
	bl	CpuSet
	ldr	r1, [r4]
	add	r0, r1, #0
	mov	r2, #0xd0
	bl	SlightlyDarkenPalsInWeather
	ldr	r1, [r4]
	mov	r0, #0x88
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r0, r1, #0
	mov	r2, #0x10
	bl	SlightlyDarkenPalsInWeather
	ldr	r1, [r4]
	mov	r0, #0xb0
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r0, r1, #0
	mov	r2, #0x40
	bl	SlightlyDarkenPalsInWeather
	ldr	r1, [r4]
	mov	r0, #0xd8
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r0, r1, #0
	mov	r2, #0x50
	bl	SlightlyDarkenPalsInWeather
	ldr	r0, [r4]
	ldr	r1, .L543+0x4
	add	r2, r5, #0
	bl	CpuSet
	ldr	r1, [r4]
	add	r0, r6, #0
	add	r2, r5, #0
	bl	CpuSet
	add	r0, r6, #0
	bl	Free
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L544:
	.align	2, 0
.L543:
	.word	sPalettesBackup
	.word	gPlttBufferUnfaded
.Lfe65:
	.size	 QL_SlightlyDarkenSomePals,.Lfe65-QL_SlightlyDarkenSomePals
	.align	2, 0
	.globl	QL_FinishRecordingScene
	.type	 QL_FinishRecordingScene,function
	.thumb_func
QL_FinishRecordingScene:
	push	{r4, lr}
	ldr	r4, .L547
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L546	@cond_branch
	ldr	r0, .L547+0x4
	bl	TryRecordActionSequence
	bl	RecordSceneEnd
	mov	r0, #0x0
	strb	r0, [r4]
	ldr	r0, .L547+0x8
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L547+0xc
	str	r1, [r0]
	ldr	r0, .L547+0x10
	str	r1, [r0]
	ldr	r0, .L547+0x14
	strb	r1, [r0]
.L546:
	pop	{r4}
	pop	{r0}
	bx	r0
.L548:
	.align	2, 0
.L547:
	.word	gQuestLogState
	.word	sQuestLogActionRecordBuffer
	.word	sQuestLogCB
	.word	gQuestLogDefeatedWildMonRecord
	.word	gQuestLogRecordingPointer
	.word	gQuestLogPlaybackState
.Lfe66:
	.size	 QL_FinishRecordingScene,.Lfe66-QL_FinishRecordingScene
	.align	2, 0
	.globl	QuestLog_CutRecording
	.type	 QuestLog_CutRecording,function
	.thumb_func
QuestLog_CutRecording:
	push	{r4, r5, lr}
	ldr	r5, .L551
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L550	@cond_branch
	ldr	r4, .L551+0x4
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L550	@cond_branch
	ldr	r0, .L551+0x8
	bl	TryRecordActionSequence
	mov	r0, #0x1
	bl	QL_RecordWait
	bl	RecordSceneEnd
	mov	r0, #0x0
	strb	r0, [r5]
	strb	r0, [r4]
	ldr	r1, .L551+0xc
	mov	r0, #0x0
	str	r0, [r1]
.L550:
	ldr	r0, .L551+0x10
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L551+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L552:
	.align	2, 0
.L551:
	.word	gQuestLogPlaybackState
	.word	gQuestLogState
	.word	sQuestLogActionRecordBuffer
	.word	sQuestLogCB
	.word	gQuestLogDefeatedWildMonRecord
	.word	gQuestLogRecordingPointer
.Lfe67:
	.size	 QuestLog_CutRecording,.Lfe67-QuestLog_CutRecording
	.align	2, 0
	.type	 SortQuestLogInSav1,function
	.thumb_func
SortQuestLogInSav1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r0, .L561
	bl	AllocZeroed
	mov	r8, r0
	ldr	r0, .L561+0x4
	ldrb	r4, [r0]
	mov	r5, #0x0
	mov	r6, #0x0
.L557:
	cmp	r4, #0x3
	bls	.L558	@cond_branch
	mov	r4, #0x0
.L558:
	ldr	r3, .L561+0x8
	ldr	r0, [r3]
	ldr	r2, .L561+0xc
	mov	r1, r4
	mul	r1, r1, r2
	add	r0, r0, r1
	ldr	r7, .L561+0x10
	add	r1, r0, r7
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L559	@cond_branch
	mov	r0, r5
	mul	r0, r0, r2
	add	r0, r0, r8
	str	r3, [sp]
	bl	memcpy
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, [sp]
.L559:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L557	@cond_branch
	ldr	r1, .L561+0x4
	mov	r0, #0x3
	and	r5, r5, r0
	strb	r5, [r1]
	ldr	r1, [r3]
	ldr	r0, .L561+0x10
	add	r1, r1, r0
	ldr	r2, .L561+0x14
	mov	r0, r8
	bl	CpuSet
	mov	r0, r8
	bl	Free
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L562:
	.align	2, 0
.L561:
	.word	0x19b0
	.word	sCurrentSceneNum
	.word	gSaveBlock1Ptr
	.word	0x66c
	.word	0x1304
	.word	0xcd8
.Lfe68:
	.size	 SortQuestLogInSav1,.Lfe68-SortQuestLogInSav1
	.align	2, 0
	.globl	SaveQuestLogData
	.type	 SaveQuestLogData,function
	.thumb_func
SaveQuestLogData:
	push	{lr}
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L564	@cond_branch
	bl	QuestLog_CutRecording
	bl	SortQuestLogInSav1
.L564:
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 SaveQuestLogData,.Lfe69-SaveQuestLogData
	.align	2, 0
	.globl	QL_UpdateObject
	.type	 QL_UpdateObject,function
	.thumb_func
QL_UpdateObject:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L571
	add	r4, r0, r1
	ldrb	r0, [r4, #0x8]
	cmp	r0, #0xff
	bne	.L566	@cond_branch
	ldr	r5, .L571+0x4
	ldrb	r0, [r5]
	cmp	r0, #0xff
	beq	.L567	@cond_branch
	add	r1, r0, #0
	add	r0, r4, #0
	bl	ObjectEventSetHeldMovement
	mov	r0, #0xff
	strb	r0, [r5]
.L567:
	ldrb	r0, [r5, #0x1]
	cmp	r0, #0xff
	beq	.L568	@cond_branch
	bl	QuestLogUpdatePlayerSprite
	mov	r0, #0xff
	strb	r0, [r5, #0x1]
.L568:
	add	r0, r4, #0
	add	r1, r6, #0
	bl	QL_UpdateObjectEventCurrentMovement
	b	.L569
.L572:
	.align	2, 0
.L571:
	.word	gObjectEvents
	.word	sMovementScripts
.L566:
	ldr	r5, .L573
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x1
	add	r1, r0, r5
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L570	@cond_branch
	add	r1, r0, #0
	add	r0, r4, #0
	bl	ObjectEventSetHeldMovement
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	mov	r1, #0xff
	strb	r1, [r0]
.L570:
	add	r0, r4, #0
	add	r1, r6, #0
	bl	QL_UpdateObjectEventCurrentMovement
.L569:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L574:
	.align	2, 0
.L573:
	.word	sMovementScripts
.Lfe70:
	.size	 QL_UpdateObject,.Lfe70-QL_UpdateObject
	.align	2, 0
	.globl	QuestLogRecordNPCStep
	.type	 QuestLogRecordNPCStep,function
	.thumb_func
QuestLogRecordNPCStep:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	sl, r3
	bl	RecordHeadAtEndOfEntryOrScriptContext2Enabled
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L576	@cond_branch
	ldr	r2, .L577
	ldrh	r0, [r2]
	ldr	r3, .L577+0x4
	ldr	r5, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldr	r1, .L577+0x8
	mov	ip, r1
	ldrh	r1, [r1]
	mov	r4, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strb	r4, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r6, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, r8
	strb	r4, [r0, #0x1]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r9
	strb	r1, [r0, #0x2]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, sl
	strb	r4, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	mov	r0, ip
	strh	r7, [r0]
.L576:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L578:
	.align	2, 0
.L577:
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
	.word	sNextActionDelay
.Lfe71:
	.size	 QuestLogRecordNPCStep,.Lfe71-QuestLogRecordNPCStep
	.align	2, 0
	.globl	QuestLogRecordNPCStepWithDuration
	.type	 QuestLogRecordNPCStepWithDuration,function
	.thumb_func
QuestLogRecordNPCStepWithDuration:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	bl	RecordHeadAtEndOfEntry
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L580	@cond_branch
	ldr	r2, .L581
	ldrh	r0, [r2]
	ldr	r3, .L581+0x4
	ldr	r5, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldr	r1, .L581+0x8
	mov	ip, r1
	ldrh	r1, [r1]
	mov	r4, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strb	r4, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r7, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r6, [r0, #0x1]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, r8
	strb	r4, [r0, #0x2]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r9
	strb	r1, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	mov	r0, sl
	mov	r4, ip
	strh	r0, [r4]
.L580:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L582:
	.align	2, 0
.L581:
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
	.word	sNextActionDelay
.Lfe72:
	.size	 QuestLogRecordNPCStepWithDuration,.Lfe72-QuestLogRecordNPCStepWithDuration
	.align	2, 0
	.globl	QuestLogRecordPlayerStep
	.type	 QuestLogRecordPlayerStep,function
	.thumb_func
QuestLogRecordPlayerStep:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r8, r4
	bl	RecordHeadAtEndOfEntryOrScriptContext2Enabled
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L584	@cond_branch
	ldr	r0, .L587
	mov	ip, r0
	ldrh	r0, [r0]
	ldr	r6, .L587+0x4
	ldr	r5, [r6]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrb	r0, [r0, #0x3]
	cmp	r4, r0
	bne	.L586	@cond_branch
	cmp	r4, #0x3
	bls	.L584	@cond_branch
.L586:
	ldr	r2, .L587+0x8
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldr	r4, .L587+0xc
	ldrh	r1, [r4]
	mov	r3, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strb	r3, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r6]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r3, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r6]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r8
	strb	r1, [r0, #0x3]
	ldrh	r0, [r2]
	mov	r1, ip
	strh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r2]
	strh	r7, [r4]
.L584:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	sLastQuestLogCursor
	.word	sCurSceneActions
	.word	gQuestLogCurActionIdx
	.word	sNextActionDelay
.Lfe73:
	.size	 QuestLogRecordPlayerStep,.Lfe73-QuestLogRecordPlayerStep
	.align	2, 0
	.globl	QuestLogRecordPlayerStepWithDuration
	.type	 QuestLogRecordPlayerStepWithDuration,function
	.thumb_func
QuestLogRecordPlayerStepWithDuration:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	bl	RecordHeadAtEndOfEntry
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L590	@cond_branch
	ldr	r2, .L591
	ldrh	r0, [r2]
	ldr	r3, .L591+0x4
	ldr	r4, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r6, .L591+0x8
	ldrh	r1, [r6]
	mov	r5, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strb	r5, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r7, [r0, #0x3]
	ldr	r1, .L591+0xc
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r2]
	mov	r0, r8
	strh	r0, [r6]
.L590:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L592:
	.align	2, 0
.L591:
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
	.word	sNextActionDelay
	.word	sLastQuestLogCursor
.Lfe74:
	.size	 QuestLogRecordPlayerStepWithDuration,.Lfe74-QuestLogRecordPlayerStepWithDuration
	.align	2, 0
	.globl	QuestLogRecordPlayerAvatarGfxTransition
	.type	 QuestLogRecordPlayerAvatarGfxTransition,function
	.thumb_func
QuestLogRecordPlayerAvatarGfxTransition:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	RecordHeadAtEndOfEntry
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L594	@cond_branch
	ldr	r2, .L595
	ldrh	r0, [r2]
	ldr	r3, .L595+0x4
	ldr	r4, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r6, .L595+0x8
	ldrh	r1, [r6]
	mov	r5, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x1
	strb	r1, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r8
	strb	r1, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	strh	r7, [r6]
.L594:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L596:
	.align	2, 0
.L595:
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
	.word	sNextActionDelay
.Lfe75:
	.size	 QuestLogRecordPlayerAvatarGfxTransition,.Lfe75-QuestLogRecordPlayerAvatarGfxTransition
	.align	2, 0
	.globl	QuestLogRecordPlayerAvatarGfxTransitionWithDuration
	.type	 QuestLogRecordPlayerAvatarGfxTransitionWithDuration,function
	.thumb_func
QuestLogRecordPlayerAvatarGfxTransitionWithDuration:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	bl	RecordHeadAtEndOfEntry
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L598	@cond_branch
	ldr	r2, .L599
	ldrh	r0, [r2]
	ldr	r3, .L599+0x4
	ldr	r4, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r6, .L599+0x8
	ldrh	r1, [r6]
	mov	r5, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x1
	strb	r1, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r7, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	mov	r0, r8
	strh	r0, [r6]
.L598:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L600:
	.align	2, 0
.L599:
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
	.word	sNextActionDelay
.Lfe76:
	.size	 QuestLogRecordPlayerAvatarGfxTransitionWithDuration,.Lfe76-QuestLogRecordPlayerAvatarGfxTransitionWithDuration
	.align	2, 0
	.globl	QL_RecordFieldInput
	.type	 QL_RecordFieldInput,function
	.thumb_func
QL_RecordFieldInput:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	ldr	r5, .L605
	ldr	r1, .L605+0x4
	ldrh	r0, [r5]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L602	@cond_branch
	ldr	r2, [r2]
	ldr	r0, .L605+0x8
	and	r2, r2, r0
	ldrh	r1, [r5]
	ldr	r3, .L605+0xc
	ldr	r4, [r3]
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldr	r6, .L605+0x10
	ldrh	r0, [r6]
	strh	r0, [r1, #0x4]
	ldrh	r0, [r5]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x2
	strb	r1, [r0, #0x6]
	ldrh	r0, [r5]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r2, [r0]
	ldrh	r0, [r5]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	lsr	r1, r2, #0x8
	strb	r1, [r0, #0x1]
	ldrh	r0, [r5]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	lsr	r1, r2, #0x10
	strb	r1, [r0, #0x2]
	ldrh	r0, [r5]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	lsr	r2, r2, #0x18
	strb	r2, [r0, #0x3]
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	bl	ArePlayerFieldControlsLocked
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L603	@cond_branch
	mov	r0, #0x1
.L603:
	strh	r0, [r6]
.L602:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L606:
	.align	2, 0
.L605:
	.word	gQuestLogCurActionIdx
	.word	sMaxActionsInScene
	.word	0xff00f3
	.word	sCurSceneActions
	.word	sNextActionDelay
.Lfe77:
	.size	 QL_RecordFieldInput,.Lfe77-QL_RecordFieldInput
	.align	2, 0
	.type	 TogglePlaybackStateForOverworldLock,function
	.thumb_func
TogglePlaybackStateForOverworldLock:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L609	@cond_branch
	cmp	r0, #0x2
	beq	.L611	@cond_branch
	b	.L608
.L609:
	ldr	r1, .L616
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bne	.L608	@cond_branch
	mov	r0, #0x3
	b	.L615
.L617:
	.align	2, 0
.L616:
	.word	gQuestLogPlaybackState
.L611:
	ldr	r1, .L618
	ldrb	r0, [r1]
	cmp	r0, #0x3
	bne	.L608	@cond_branch
	mov	r0, #0x1
.L615:
	strb	r0, [r1]
.L608:
	pop	{r0}
	bx	r0
.L619:
	.align	2, 0
.L618:
	.word	gQuestLogPlaybackState
.Lfe78:
	.size	 TogglePlaybackStateForOverworldLock,.Lfe78-TogglePlaybackStateForOverworldLock
	.align	2, 0
	.globl	QuestLog_OnEscalatorWarp
	.type	 QuestLog_OnEscalatorWarp,function
	.thumb_func
QuestLog_OnEscalatorWarp:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	QL_GetPlaybackState
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r4, #0x1
	beq	.L622	@cond_branch
	cmp	r4, #0x2
	beq	.L626	@cond_branch
	b	.L621
.L622:
	cmp	r1, #0x1
	bne	.L623	@cond_branch
	ldr	r1, .L633
	mov	r0, #0x3
	strb	r0, [r1]
	b	.L621
.L634:
	.align	2, 0
.L633:
	.word	gQuestLogPlaybackState
.L623:
	cmp	r1, #0x2
	bne	.L621	@cond_branch
	ldr	r2, .L635
	ldrh	r1, [r2]
	ldr	r0, .L635+0x4
	ldr	r3, [r0]
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldr	r4, .L635+0x8
	ldrh	r0, [r4]
	mov	r5, #0x0
	strh	r0, [r1, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	mov	r1, #0x3
	strb	r1, [r0, #0x6]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	strh	r5, [r4]
	ldr	r1, .L635+0xc
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L621
.L636:
	.align	2, 0
.L635:
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
	.word	sNextActionDelay
	.word	gQuestLogPlaybackState
.L626:
	cmp	r1, #0x1
	beq	.L632	@cond_branch
	cmp	r1, #0x2
	bne	.L621	@cond_branch
.L632:
	ldr	r0, .L637
	strb	r1, [r0]
.L621:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L638:
	.align	2, 0
.L637:
	.word	gQuestLogPlaybackState
.Lfe79:
	.size	 QuestLog_OnEscalatorWarp,.Lfe79-QuestLog_OnEscalatorWarp
	.section .rodata
	.align	2, 0
.LC255:
	.space	4
	.short	0xffff
	.byte	0xff
	.space	1
.text
	.align	2, 0
	.type	 ResetActions,function
	.thumb_func
ResetActions:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r2, #0x10
	cmp	r0, #0x1
	beq	.L642	@cond_branch
	cmp	r0, #0x2
	beq	.L648	@cond_branch
	ldr	r1, .L664
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L640
.L665:
	.align	2, 0
.L664:
	.word	gQuestLogPlaybackState
.L642:
	ldr	r2, .L666
	str	r3, [r2]
	ldr	r1, .L666+0x4
	lsr	r0, r4, #0x13
	strh	r0, [r1]
	ldr	r0, .L666+0x8
	mov	r9, r0
	add	r1, r2, #0
	ldr	r6, .L666+0xc
	ldr	r2, .L666+0x10
	ldr	r7, .L666+0x14
	ldr	r0, .L666+0x18
	mov	ip, r0
	ldr	r0, .L666+0x1c
	mov	r8, r0
	mov	r5, #0xff
	add	r3, r6, #0
	mov	r4, #0x3f
.L646:
	ldrb	r0, [r3]
	orr	r0, r0, r5
	strb	r0, [r3]
	ldrb	r0, [r3, #0x1]
	orr	r0, r0, r5
	strb	r0, [r3, #0x1]
	add	r3, r3, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L646	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2]
	strh	r0, [r7]
	mov	r0, #0x0
	mov	r2, ip
	str	r0, [r2]
	ldr	r1, [r1]
	ldrh	r0, [r1, #0x4]
	mov	r2, r8
	strh	r0, [r2]
	ldrb	r0, [r1, #0x3]
	strb	r0, [r6]
	mov	r0, #0xff
	strb	r0, [r6, #0x1]
	mov	r0, #0x1
	mov	r1, r9
	strb	r0, [r1]
	b	.L640
.L667:
	.align	2, 0
.L666:
	.word	sCurSceneActions
	.word	sMaxActionsInScene
	.word	gQuestLogPlaybackState
	.word	sMovementScripts
	.word	gQuestLogCurActionIdx
	.word	sLastQuestLogCursor
	.word	gQuestLogFieldInput
	.word	sNextActionDelay
.L648:
	ldr	r1, .L668
	str	r3, [r1]
	ldr	r5, .L668+0x4
	lsr	r0, r4, #0x13
	strh	r0, [r5]
	mov	r4, #0x0
	ldr	r2, .L668+0x8
	mov	r8, r2
	cmp	r4, r0
	bge	.L650	@cond_branch
	add	r6, r1, #0
	ldr	r0, .L668+0xc
	ldr	r2, [r0]		@ created by thumb_load_double_from_address
	ldr	r3, [r0, #0x4]		@ created by thumb_load_double_from_address
.L652:
	ldr	r1, [r6]
	lsl	r0, r4, #0x3
	add	r0, r0, r1
	str	r2, [r0]
	str	r3, [r0, #0x4]
	add	r4, r4, #0x1
	ldrh	r0, [r5]
	cmp	r4, r0
	blt	.L652	@cond_branch
.L650:
	ldr	r4, .L668+0x10
	mov	r2, #0x0
	strh	r2, [r4]
	mov	r1, r8
	strh	r2, [r1]
	mov	r1, #0x0
	ldr	r3, .L668
	ldr	r0, [r3]
	strh	r1, [r0, #0x4]
	strb	r2, [r0, #0x6]
	ldrh	r0, [r4]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r2, [r0]
	bl	GetPlayerFacingDirection
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L654	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L668+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L669:
	.align	2, 0
.L668:
	.word	sCurSceneActions
	.word	sMaxActionsInScene
	.word	sNextActionDelay
	.word	.LC255
	.word	gQuestLogCurActionIdx
	.word	.L660
	.align	2, 0
	.align	2, 0
.L660:
	.word	.L656
	.word	.L656
	.word	.L658
	.word	.L659
	.word	.L657
.L656:
	ldr	r0, .L670
	ldrh	r0, [r0]
	ldr	r1, .L670+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L663
.L671:
	.align	2, 0
.L670:
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
.L657:
	ldr	r0, .L672
	ldrh	r0, [r0]
	ldr	r1, .L672+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x3
	b	.L663
.L673:
	.align	2, 0
.L672:
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
.L658:
	ldr	r0, .L674
	ldrh	r0, [r0]
	ldr	r1, .L674+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L663
.L675:
	.align	2, 0
.L674:
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
.L659:
	ldr	r0, .L676
	ldrh	r0, [r0]
	ldr	r1, .L676+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x2
.L663:
	strb	r1, [r0, #0x3]
.L654:
	ldr	r0, .L676+0x8
	mov	r5, #0x0
	strh	r5, [r0]
	ldr	r2, .L676
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	ldrh	r0, [r2]
	ldr	r3, .L676+0x4
	ldr	r4, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r4, #0x2
	strb	r4, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0, #0x1]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0, #0x2]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	ldr	r0, .L676+0xc
	strb	r4, [r0]
.L640:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L677:
	.align	2, 0
.L676:
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
	.word	sLastQuestLogCursor
	.word	gQuestLogPlaybackState
.Lfe80:
	.size	 ResetActions,.Lfe80-ResetActions
	.align	2, 0
	.globl	QL_TryRunActions
	.type	 QL_TryRunActions,function
	.thumb_func
QL_TryRunActions:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L717
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bls	.LCB5923
	b	.L679	@long jump
.LCB5923:
	lsl	r0, r0, #0x2
	ldr	r1, .L717+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L718:
	.align	2, 0
.L717:
	.word	gQuestLogPlaybackState
	.word	.L711
	.align	2, 0
	.align	2, 0
.L711:
	.word	.L679
	.word	.L683
	.word	.L708
	.word	.L679
	.word	.L679
.L683:
	bl	RecordHeadAtEndOfEntryOrScriptContext2Enabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5948
	b	.L716	@long jump
.LCB5948:
	ldr	r0, .L719
	ldrh	r1, [r0]
	add	r7, r0, #0
	cmp	r1, #0
	beq	.L685	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r7]
	b	.L679
.L720:
	.align	2, 0
.L719:
	.word	sNextActionDelay
.L685:
	ldr	r5, .L721
	ldr	r4, .L721+0x4
	ldr	r6, .L721+0x8
	b	.L687
.L722:
	.align	2, 0
.L721:
	.word	gQuestLogPlaybackState
	.word	gQuestLogCurActionIdx
	.word	sCurSceneActions
.L701:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	ldr	r1, .L723
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L713	@cond_branch
	ldrh	r0, [r4]
	ldr	r1, [r6]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	strh	r0, [r7]
	cmp	r2, #0x3
	beq	.L679	@cond_branch
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L687	@cond_branch
	ldr	r0, .L723+0x4
	cmp	r1, r0
	bne	.L679	@cond_branch
.L687:
	ldrh	r0, [r4]
	ldr	r1, [r6]
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrb	r0, [r3, #0x6]
	cmp	r0, #0x2
	beq	.L693	@cond_branch
	cmp	r0, #0x2
	bgt	.L699	@cond_branch
	cmp	r0, #0
	beq	.L691	@cond_branch
	cmp	r0, #0x1
	beq	.L692	@cond_branch
	b	.L690
.L724:
	.align	2, 0
.L723:
	.word	sMaxActionsInScene
	.word	0xffff
.L699:
	cmp	r0, #0xfe
	beq	.L690	@cond_branch
	cmp	r0, #0xfe
	bgt	.L700	@cond_branch
	cmp	r0, #0x3
	beq	.L715	@cond_branch
	b	.L690
.L700:
	cmp	r0, #0xff
	beq	.L696	@cond_branch
	b	.L690
.L691:
	ldr	r0, .L725
	ldrb	r1, [r3]
	lsl	r1, r1, #0x1
	b	.L714
.L726:
	.align	2, 0
.L725:
	.word	sMovementScripts
.L692:
	ldr	r0, .L727
	ldrb	r1, [r3]
	lsl	r1, r1, #0x1
	add	r0, r0, #0x1
.L714:
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	strb	r0, [r1]
	b	.L690
.L728:
	.align	2, 0
.L727:
	.word	sMovementScripts
.L693:
	ldr	r2, .L729
	ldrb	r1, [r3, #0x3]
	lsl	r1, r1, #0x18
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3]
	orr	r1, r1, r0
	str	r1, [r2]
	b	.L690
.L730:
	.align	2, 0
.L729:
	.word	gQuestLogFieldInput
.L696:
	mov	r0, #0x0
.L715:
	strb	r0, [r5]
.L690:
	ldrb	r2, [r5]
	cmp	r2, #0
	bne	.L701	@cond_branch
	b	.L679
.L713:
	mov	r0, #0x0
	strb	r0, [r5]
	b	.L679
.L708:
	bl	ArePlayerFieldControlsLocked
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L679	@cond_branch
	ldr	r1, .L731
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L716:
	ldr	r0, .L731+0x4
	ldr	r1, .L731+0x8
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcc	.L679	@cond_branch
	ldr	r1, .L731+0xc
	mov	r0, #0x0
	strb	r0, [r1]
.L679:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L732:
	.align	2, 0
.L731:
	.word	sNextActionDelay
	.word	gQuestLogCurActionIdx
	.word	sMaxActionsInScene
	.word	gQuestLogPlaybackState
.Lfe81:
	.size	 QL_TryRunActions,.Lfe81-QL_TryRunActions
	.align	2, 0
	.globl	QL_AfterRecordFishActionSuccessful
	.type	 QL_AfterRecordFishActionSuccessful,function
	.thumb_func
QL_AfterRecordFishActionSuccessful:
	ldr	r1, .L734
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	bx	lr
.L735:
	.align	2, 0
.L734:
	.word	sNextActionDelay
.Lfe82:
	.size	 QL_AfterRecordFishActionSuccessful,.Lfe82-QL_AfterRecordFishActionSuccessful
	.align	2, 0
	.globl	QL_GetPlaybackState
	.type	 QL_GetPlaybackState,function
	.thumb_func
QL_GetPlaybackState:
	push	{lr}
	ldr	r0, .L746
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bhi	.L739	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L746+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L747:
	.align	2, 0
.L746:
	.word	gQuestLogPlaybackState
	.word	.L744
	.align	2, 0
	.align	2, 0
.L744:
	.word	.L739
	.word	.L741
	.word	.L743
	.word	.L741
	.word	.L743
.L739:
	mov	r0, #0x0
	b	.L745
.L741:
	mov	r0, #0x1
	b	.L745
.L743:
	mov	r0, #0x2
.L745:
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 QL_GetPlaybackState,.Lfe83-QL_GetPlaybackState
	.align	2, 0
	.type	 RecordHeadAtEndOfEntryOrScriptContext2Enabled,function
	.thumb_func
RecordHeadAtEndOfEntryOrScriptContext2Enabled:
	push	{lr}
	ldr	r0, .L752
	ldr	r1, .L752+0x4
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L750	@cond_branch
	bl	ArePlayerFieldControlsLocked
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L749	@cond_branch
.L750:
	mov	r0, #0x1
	b	.L751
.L753:
	.align	2, 0
.L752:
	.word	gQuestLogCurActionIdx
	.word	sMaxActionsInScene
.L749:
	mov	r0, #0x0
.L751:
	pop	{r1}
	bx	r1
.Lfe84:
	.size	 RecordHeadAtEndOfEntryOrScriptContext2Enabled,.Lfe84-RecordHeadAtEndOfEntryOrScriptContext2Enabled
	.align	2, 0
	.type	 RecordHeadAtEndOfEntry,function
	.thumb_func
RecordHeadAtEndOfEntry:
	push	{lr}
	ldr	r0, .L757
	ldr	r1, .L757+0x4
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L755	@cond_branch
	mov	r0, #0x0
	b	.L756
.L758:
	.align	2, 0
.L757:
	.word	gQuestLogCurActionIdx
	.word	sMaxActionsInScene
.L755:
	mov	r0, #0x1
.L756:
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 RecordHeadAtEndOfEntry,.Lfe85-RecordHeadAtEndOfEntry
	.section .rodata
	.align	2, 0
	.type	 sDummyFlagOrVarRecord,object
	.size	 sDummyFlagOrVarRecord,4
sDummyFlagOrVarRecord:
	.byte	0x0
	.byte	0x0
	.short	0x7fff
.text
	.align	2, 0
	.globl	QuestLogGetFlagOrVarPtr
	.type	 QuestLogGetFlagOrVarPtr,function
	.thumb_func
QuestLogGetFlagOrVarPtr:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r0, .L767
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L766	@cond_branch
	ldr	r0, .L767+0x4
	ldrh	r0, [r0]
	cmp	r1, r0
	bcs	.L766	@cond_branch
	ldr	r4, .L767+0x8
	ldr	r1, .L767+0xc
	ldrh	r0, [r4]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcc	.L762	@cond_branch
.L766:
	mov	r0, #0x0
	b	.L765
.L768:
	.align	2, 0
.L767:
	.word	gQuestLogCurActionIdx
	.word	sMaxActionsInScene
	.word	sFlagOrVarPlayhead
	.word	sNumFlagsOrVars
.L762:
	ldrh	r3, [r4]
	ldr	r0, .L769
	ldr	r1, [r0]
	lsl	r0, r3, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	lsl	r0, r1, #0x11
	lsr	r0, r0, #0x11
	cmp	r0, r5
	bne	.L763	@cond_branch
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x1f
	cmp	r0, r6
	bne	.L763	@cond_branch
	add	r1, r2, #0x2
	add	r0, r3, #0x1
	strh	r0, [r4]
	b	.L764
.L770:
	.align	2, 0
.L769:
	.word	sFlagOrVarRecords
.L763:
	mov	r1, #0x0
.L764:
	add	r0, r1, #0
.L765:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 QuestLogGetFlagOrVarPtr,.Lfe86-QuestLogGetFlagOrVarPtr
	.align	2, 0
	.globl	QuestLogSetFlagOrVar
	.type	 QuestLogSetFlagOrVar,function
	.thumb_func
QuestLogSetFlagOrVar:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	ip, r2
	ldr	r0, .L775
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L771	@cond_branch
	ldr	r0, .L775+0x4
	ldrh	r0, [r0]
	cmp	r1, r0
	bcs	.L771	@cond_branch
	ldr	r6, .L775+0x8
	ldr	r1, .L775+0xc
	ldrh	r0, [r6]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L771	@cond_branch
	add	r2, r0, #0
	ldr	r5, .L775+0x10
	ldr	r4, [r5]
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r1, .L775+0x14
	and	r1, r1, r3
	ldrh	r3, [r2]
	ldr	r0, .L775+0x18
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r7, #0x7
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x1]
	ldrh	r0, [r6]
	ldr	r1, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, ip
	strh	r1, [r0, #0x2]
	ldrh	r0, [r6]
	add	r0, r0, #0x1
	strh	r0, [r6]
.L771:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L776:
	.align	2, 0
.L775:
	.word	gQuestLogCurActionIdx
	.word	sMaxActionsInScene
	.word	sFlagOrVarPlayhead
	.word	sNumFlagsOrVars
	.word	sFlagOrVarRecords
	.word	0x7fff
	.word	-0x8000
.Lfe87:
	.size	 QuestLogSetFlagOrVar,.Lfe87-QuestLogSetFlagOrVar
	.align	2, 0
	.type	 QuestLogResetFlagsOrVars,function
	.thumb_func
QuestLogResetFlagsOrVars:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r3, r0, #0x18
	mov	r4, #0xff
	lsl	r4, r4, #0x18
	add	r0, r0, r4
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L778	@cond_branch
	ldr	r1, .L786
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L779
.L787:
	.align	2, 0
.L786:
	.word	gQuestLogPlaybackState
.L778:
	ldr	r5, .L788
	str	r1, [r5]
	ldr	r1, .L788+0x4
	lsr	r0, r2, #0x12
	strh	r0, [r1]
	ldr	r1, .L788+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	cmp	r3, #0x2
	bne	.L779	@cond_branch
	mov	r2, #0x0
	ldr	r4, .L788+0xc
	ldrh	r0, [r4]
	cmp	r2, r0
	bge	.L779	@cond_branch
	ldr	r0, .L788+0x10
	ldr	r3, [r0]
.L784:
	ldr	r1, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	str	r3, [r0]
	add	r2, r2, #0x1
	ldrh	r0, [r4]
	cmp	r2, r0
	blt	.L784	@cond_branch
.L779:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L789:
	.align	2, 0
.L788:
	.word	sFlagOrVarRecords
	.word	sNumFlagsOrVars
	.word	sFlagOrVarPlayhead
	.word	sMaxActionsInScene
	.word	sDummyFlagOrVarRecord
.Lfe88:
	.size	 QuestLogResetFlagsOrVars,.Lfe88-QuestLogResetFlagsOrVars
	.comm	gQuestLogPlaybackState, 4	@ 1
	.comm	gQuestLogFieldInput, 4	@ 4
	.comm	sMaxActionsInScene, 4	@ 2
	.comm	sCurSceneActions, 4	@ 4

	.lcomm	sFlagOrVarRecords,4

	.lcomm	sNumFlagsOrVars,2
.text
	.align	2, 0 @ Don't pad with nop

