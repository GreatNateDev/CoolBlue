@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	QL_RecordObjects
	.type	 QL_RecordObjects,function
	.thumb_func
QL_RecordObjects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r1, #0x0
	mov	r8, r1
	mov	r6, #0x1
	mov	r2, #0x2
	neg	r2, r2
	mov	ip, r2
	add	r5, r0, #0
	add	r5, r5, #0x8
	mov	r7, #0x0
	mov	r0, #0x41
	neg	r0, r0
	mov	sl, r0
	mov	r1, #0x7f
	mov	r9, r1
.L6:
	ldr	r2, .L8
	add	r3, r7, r2
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	ldrb	r2, [r5]
	mov	r1, ip
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x1
	mov	r2, #0x3
	neg	r2, r2
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x2
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x3
	mov	r2, #0x9
	neg	r2, r2
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r5]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	mov	r1, #0x11
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	mov	r2, #0x21
	neg	r2, r2
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r5]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x6
	mov	r1, sl
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x7
	mov	r2, r9
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	ldrb	r2, [r5, #0x1]
	mov	r1, ip
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x1
	mov	r2, #0x3
	neg	r2, r2
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r5, #0x1]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x2
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrb	r0, [r3, #0x1]
	lsr	r0, r0, #0x7
	and	r0, r0, r6
	lsl	r0, r0, #0x3
	mov	r2, #0x9
	neg	r2, r2
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r5, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	mov	r1, #0x11
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrb	r0, [r3, #0x2]
	lsr	r0, r0, #0x7
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	mov	r2, #0x21
	neg	r2, r2
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r5, #0x1]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x6
	mov	r1, sl
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x7
	mov	r2, r9
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1f
	and	r0, r0, r6
	ldrb	r2, [r5, #0x2]
	mov	r1, ip
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x2]
	ldrb	r2, [r3, #0x18]
	lsl	r2, r2, #0x1c
	lsr	r2, r2, #0x1b
	mov	r0, #0x1f
	neg	r0, r0
	and	r1, r1, r0
	orr	r1, r1, r2
	strb	r1, [r5, #0x2]
	ldrb	r1, [r3, #0xb]
	lsl	r1, r1, #0x1c
	mov	r4, #0xf
	lsr	r1, r1, #0x1c
	ldrb	r2, [r5, #0x3]
	add	r0, r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldrb	r1, [r3, #0xb]
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldrb	r0, [r3, #0x5]
	strb	r0, [r5, #0x4]
	ldrb	r0, [r3, #0x6]
	strb	r0, [r5, #0x5]
	ldrb	r0, [r3, #0x7]
	strb	r0, [r5, #0x6]
	ldrb	r0, [r3, #0x8]
	strb	r0, [r5, #0x7]
	ldrb	r0, [r3, #0x9]
	strb	r0, [r5, #0x8]
	ldrb	r0, [r3, #0xa]
	strb	r0, [r5, #0x9]
	ldrh	r0, [r3, #0x10]
	strh	r0, [r5, #0xa]
	ldrh	r0, [r3, #0x12]
	strh	r0, [r5, #0xc]
	ldrb	r0, [r3, #0x1d]
	strb	r0, [r5, #0xe]
	ldrb	r0, [r3, #0x1f]
	strb	r0, [r5, #0xf]
	add	r0, r3, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	strb	r0, [r5, #0x10]
	add	r3, r3, #0x22
	ldrb	r0, [r3]
	strb	r0, [r5, #0x11]
	add	r5, r5, #0x14
	add	r7, r7, #0x24
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0xf
	bhi	.LCB268
	b	.L6	@long jump
.LCB268:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gObjectEvents
.Lfe1:
	.size	 QL_RecordObjects,.Lfe1-QL_RecordObjects
	.align	2, 0
	.globl	QL_LoadObjects
	.type	 QL_LoadObjects,function
	.thumb_func
QL_LoadObjects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	str	r1, [sp, #0x4]
	add	r0, r0, #0x8
	str	r0, [sp, #0x8]
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r4, .L32
	ldr	r2, .L32+0x4
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0x0
	mov	ip, r0
	mov	r1, #0x1
	mov	sl, r1
.L14:
	mov	r2, ip
	lsl	r7, r2, #0x3
	add	r5, r7, r2
	lsl	r5, r5, #0x2
	ldr	r0, .L32
	add	r5, r5, r0
	lsl	r6, r2, #0x2
	add	r6, r6, ip
	lsl	r6, r6, #0x2
	ldr	r1, [sp, #0x8]
	add	r6, r6, r1
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	mov	r2, sl
	and	r0, r0, r2
	ldrb	r2, [r5]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1f
	mov	r2, sl
	and	r0, r0, r2
	lsl	r0, r0, #0x3
	mov	r2, #0x9
	neg	r2, r2
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r5]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, sl
	and	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r1, #0x11
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1f
	mov	r2, sl
	and	r0, r0, r2
	lsl	r0, r0, #0x5
	mov	r4, #0x21
	neg	r4, r4
	and	r1, r1, r4
	orr	r1, r1, r0
	strb	r1, [r5]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	and	r0, r0, r2
	ldrb	r1, [r5, #0x1]
	mov	r2, #0x2
	neg	r2, r2
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r5, #0x1]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1f
	mov	r1, sl
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x3
	neg	r1, r1
	mov	r8, r1
	mov	r3, r8
	and	r3, r3, r2
	orr	r3, r3, r0
	strb	r3, [r5, #0x1]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1f
	mov	r2, sl
	and	r0, r0, r2
	lsl	r0, r0, #0x2
	sub	r1, r1, #0x2
	mov	r9, r1
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrb	r0, [r6]
	lsr	r0, r0, #0x7
	and	r0, r0, r2
	lsl	r0, r0, #0x3
	mov	r2, #0x9
	neg	r2, r2
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r5, #0x1]
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	mov	r1, sl
	and	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r1, #0x11
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1f
	mov	r2, sl
	and	r0, r0, r2
	lsl	r0, r0, #0x5
	and	r4, r4, r1
	orr	r4, r4, r0
	strb	r4, [r5, #0x1]
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1f
	and	r0, r0, r2
	lsl	r0, r0, #0x6
	mov	r2, #0x41
	neg	r2, r2
	add	r1, r2, #0
	and	r4, r4, r1
	orr	r4, r4, r0
	strb	r4, [r5, #0x1]
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x7
	mov	r3, #0x7f
	and	r4, r4, r3
	orr	r4, r4, r0
	strb	r4, [r5, #0x1]
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	mov	r1, sl
	and	r0, r0, r1
	ldrb	r2, [r5, #0x2]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x2]
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x7
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r5, #0x2]
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1f
	mov	r2, sl
	and	r0, r0, r2
	ldrb	r2, [r5, #0x3]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
	ldrb	r0, [r6, #0x1]
	lsr	r0, r0, #0x7
	mov	r2, sl
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	mov	r2, r8
	and	r2, r2, r1
	orr	r2, r2, r0
	mov	r8, r2
	strb	r2, [r5, #0x3]
	ldrb	r0, [r6, #0x2]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	mov	r1, sl
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, r9
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r5, #0x3]
	ldrb	r1, [r6, #0x2]
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x1c
	ldrb	r2, [r5, #0x18]
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x18]
	ldrb	r1, [r6, #0x3]
	lsl	r1, r1, #0x1c
	mov	r3, #0xf
	lsr	r1, r1, #0x1c
	ldrb	r2, [r5, #0xb]
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0xb]
	ldrb	r1, [r6, #0x3]
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r5, #0xb]
	ldrb	r0, [r6, #0x4]
	strb	r0, [r5, #0x5]
	ldrb	r0, [r6, #0x5]
	strb	r0, [r5, #0x6]
	ldrb	r0, [r6, #0x6]
	strb	r0, [r5, #0x7]
	ldrb	r0, [r6, #0x7]
	strb	r0, [r5, #0x8]
	ldrb	r0, [r6, #0x8]
	strb	r0, [r5, #0x9]
	ldrb	r0, [r6, #0x9]
	strb	r0, [r5, #0xa]
	ldrh	r0, [r6, #0xa]
	strh	r0, [r5, #0x10]
	ldrh	r0, [r6, #0xc]
	strh	r0, [r5, #0x12]
	ldrb	r0, [r6, #0xe]
	strb	r0, [r5, #0x1d]
	ldrb	r0, [r6, #0xf]
	strb	r0, [r5, #0x1f]
	ldrb	r0, [r6, #0x10]
	add	r1, r5, #0
	add	r1, r1, #0x21
	strb	r0, [r1]
	ldrb	r0, [r6, #0x11]
	add	r1, r1, #0x1
	strb	r0, [r1]
	mov	r6, #0x0
	mov	r8, r7
	mov	r2, ip
	add	r2, r2, #0x1
	str	r2, [sp, #0xc]
	ldrb	r7, [r5, #0x8]
	ldr	r3, [sp, #0x4]
	mov	r0, #0xf
	mov	r9, r0
.L18:
	ldrb	r1, [r3]
	cmp	r7, r1
	bne	.L17	@cond_branch
	ldrh	r0, [r3, #0x4]
	add	r0, r0, #0x7
	strh	r0, [r5, #0xc]
	ldrh	r0, [r3, #0x6]
	add	r0, r0, #0x7
	strh	r0, [r5, #0xe]
	ldrb	r1, [r3, #0xa]
	lsl	r1, r1, #0x1c
	lsr	r1, r1, #0x1c
	mov	r2, r9
	and	r1, r1, r2
	ldrb	r0, [r5, #0x19]
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r5, #0x19]
	ldrb	r1, [r3, #0xa]
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	mov	r2, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x19]
.L17:
	add	r3, r3, #0x18
	add	r6, r6, #0x1
	cmp	r6, #0x3f
	bls	.L18	@cond_branch
	mov	r0, r8
	add	r0, r0, ip
	lsl	r0, r0, #0x2
	ldr	r1, .L32
	add	r6, r0, r1
	mov	r2, #0x10
	ldrsh	r0, [r6, r2]
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	bl	MapGridGetMetatileBehaviorAt
	strb	r0, [r6, #0x1e]
	ldrb	r4, [r6, #0x1f]
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	bl	MapGridGetMetatileBehaviorAt
	cmp	r4, r0
	bne	.L21	@cond_branch
	ldrh	r0, [r6, #0x10]
	strh	r0, [r6, #0x14]
	ldrh	r0, [r6, #0x12]
	b	.L31
.L33:
	.align	2, 0
.L32:
	.word	gObjectEvents
	.word	0x1000120
.L21:
	ldrb	r4, [r6, #0x1f]
	ldrh	r0, [r6, #0x10]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	bl	MapGridGetMetatileBehaviorAt
	cmp	r4, r0
	bne	.L23	@cond_branch
	ldrh	r0, [r6, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r6, #0x14]
	ldrh	r0, [r6, #0x12]
	b	.L31
.L23:
	ldrb	r4, [r6, #0x1f]
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	bl	MapGridGetMetatileBehaviorAt
	cmp	r4, r0
	bne	.L25	@cond_branch
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x14]
	ldrh	r0, [r6, #0x12]
	b	.L31
.L25:
	ldrb	r4, [r6, #0x1f]
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	ldrh	r1, [r6, #0x12]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	MapGridGetMetatileBehaviorAt
	cmp	r4, r0
	bne	.L27	@cond_branch
	ldrh	r0, [r6, #0x10]
	strh	r0, [r6, #0x14]
	ldrh	r0, [r6, #0x12]
	sub	r0, r0, #0x1
	b	.L31
.L27:
	ldrb	r4, [r6, #0x1f]
	mov	r2, #0x10
	ldrsh	r0, [r6, r2]
	ldrh	r1, [r6, #0x12]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	MapGridGetMetatileBehaviorAt
	cmp	r4, r0
	bne	.L13	@cond_branch
	ldrh	r0, [r6, #0x10]
	strh	r0, [r6, #0x14]
	ldrh	r0, [r6, #0x12]
	add	r0, r0, #0x1
.L31:
	strh	r0, [r6, #0x16]
.L13:
	ldr	r0, [sp, #0xc]
	mov	ip, r0
	cmp	r0, #0xf
	bhi	.LCB794
	b	.L14	@long jump
.LCB794:
	ldr	r0, .L34
	ldr	r1, .L34+0x4
	ldr	r1, [r1]
	mov	r2, #0xd4
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	bl	CpuSet
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	gObjectEvents
	.word	gSaveBlock1Ptr
.Lfe2:
	.size	 QL_LoadObjects,.Lfe2-QL_LoadObjects
	.align	2, 0
	.globl	QL_TryStopSurfing
	.type	 QL_TryStopSurfing,function
	.thumb_func
QL_TryStopSurfing:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L39
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L37	@cond_branch
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	PlayerGetDestCoords
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MetatileBehavior_IsSurfable
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L37	@cond_branch
	mov	r0, #0x8
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L37	@cond_branch
	ldr	r0, .L39+0x4
	ldrb	r0, [r0, #0x5]
	lsl	r4, r0, #0x3
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L39+0x8
	add	r4, r4, r0
	mov	r0, #0x1
	bl	SetPlayerAvatarTransitionFlags
	ldrb	r1, [r4, #0x1a]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L39+0xc
	add	r0, r0, r1
	bl	DestroySprite
.L37:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	gQuestLogState
	.word	gPlayerAvatar
	.word	gObjectEvents
	.word	gSprites
.Lfe3:
	.size	 QL_TryStopSurfing,.Lfe3-QL_TryStopSurfing
.text
	.align	2, 0 @ Don't pad with nop

