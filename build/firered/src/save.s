@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sSaveSlotLayout,object
	.size	 sSaveSlotLayout,56
sSaveSlotLayout:
	.short	0x0
	.short	0xf24
	.short	0x0
	.short	0xf80
	.short	0xf80
	.short	0xf80
	.short	0x1f00
	.short	0xf80
	.short	0x2e80
	.short	0xefc
	.short	0x0
	.short	0xf80
	.short	0xf80
	.short	0xf80
	.short	0x1f00
	.short	0xf80
	.short	0x2e80
	.short	0xf80
	.short	0x3e00
	.short	0xf80
	.short	0x4d80
	.short	0xf80
	.short	0x5d00
	.short	0xf80
	.short	0x6c80
	.short	0xf80
	.short	0x7c00
	.short	0x7d0
	.globl	gSaveDataBuffer
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gSaveDataBuffer,object
	.size	 gSaveDataBuffer,4096
gSaveDataBuffer:
	.byte	0x0
	.space	3967
	.space	128
	.globl	gSaveUnusedVar2
	.align	2, 0
	.type	 gSaveUnusedVar2,object
	.size	 gSaveUnusedVar2,4
gSaveUnusedVar2:
	.word	0x0
.text
	.align	2, 0
	.globl	ClearSaveData
	.type	 ClearSaveData,function
	.thumb_func
ClearSaveData:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L8
.L6:
	ldr	r1, [r5]
	add	r0, r4, #0
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x1f
	bls	.L6	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	EraseFlashSector
.Lfe1:
	.size	 ClearSaveData,.Lfe1-ClearSaveData
	.align	2, 0
	.globl	Save_ResetSaveCounters
	.type	 Save_ResetSaveCounters,function
	.thumb_func
Save_ResetSaveCounters:
	ldr	r0, .L11
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L11+0x4
	strh	r1, [r0]
	ldr	r0, .L11+0x8
	str	r1, [r0]
	bx	lr
.L12:
	.align	2, 0
.L11:
	.word	gSaveCounter
	.word	gLastWrittenSector
	.word	gDamagedSaveSectors
.Lfe2:
	.size	 Save_ResetSaveCounters,.Lfe2-Save_ResetSaveCounters
	.align	2, 0
	.type	 SetDamagedSectorBits,function
	.thumb_func
SetDamagedSectorBits:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	mov	r4, #0x0
	cmp	r0, #0x1
	beq	.L16	@cond_branch
	cmp	r0, #0x1
	bgt	.L21	@cond_branch
	cmp	r0, #0
	beq	.L15	@cond_branch
	b	.L14
.L21:
	cmp	r0, #0x2
	beq	.L17	@cond_branch
	b	.L14
.L15:
	ldr	r2, .L22
	mov	r1, #0x1
	lsl	r1, r1, r3
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L14
.L23:
	.align	2, 0
.L22:
	.word	gDamagedSaveSectors
.L16:
	ldr	r2, .L24
	add	r1, r0, #0
	lsl	r1, r1, r3
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	b	.L14
.L25:
	.align	2, 0
.L24:
	.word	gDamagedSaveSectors
.L17:
	ldr	r0, .L26
	mov	r1, #0x1
	lsl	r1, r1, r3
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L14	@cond_branch
	mov	r4, #0x1
.L14:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L27:
	.align	2, 0
.L26:
	.word	gDamagedSaveSectors
.Lfe3:
	.size	 SetDamagedSectorBits,.Lfe3-SetDamagedSectorBits
	.align	2, 0
	.type	 WriteSaveSectorOrSlot,function
	.thumb_func
WriteSaveSectorOrSlot:
	push	{r4, r5, r6, r7, lr}
	add	r7, r1, #0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, .L37
	ldr	r0, .L37+0x4
	str	r0, [r1]
	ldr	r0, .L37+0x8
	cmp	r2, r0
	beq	.L29	@cond_branch
	add	r0, r2, #0
	add	r1, r7, #0
	bl	HandleWriteSector
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L30
.L38:
	.align	2, 0
.L37:
	.word	gSaveDataBufferPtr
	.word	gSaveDataBuffer
	.word	0xffff
.L29:
	ldr	r1, .L39
	ldr	r5, .L39+0x4
	ldrh	r0, [r5]
	strh	r0, [r1]
	ldr	r1, .L39+0x8
	ldr	r6, .L39+0xc
	ldr	r4, [r6]
	str	r4, [r1]
	add	r0, r0, #0x1
	strh	r0, [r5]
	ldrh	r0, [r5]
	mov	r1, #0xe
	bl	__umodsi3
	strh	r0, [r5]
	add	r4, r4, #0x1
	str	r4, [r6]
	mov	r5, #0x1
	mov	r4, #0x0
.L34:
	add	r0, r4, #0
	add	r1, r7, #0
	bl	HandleWriteSector
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xd
	bls	.L34	@cond_branch
	ldr	r0, .L39+0x10
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L30	@cond_branch
	mov	r5, #0xff
	ldr	r1, .L39+0x4
	ldr	r0, .L39
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L39+0xc
	ldr	r0, .L39+0x8
	ldr	r0, [r0]
	str	r0, [r1]
.L30:
	add	r0, r5, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L40:
	.align	2, 0
.L39:
	.word	gLastKnownGoodSector
	.word	gLastWrittenSector
	.word	gLastSaveCounter
	.word	gSaveCounter
	.word	gDamagedSaveSectors
.Lfe4:
	.size	 WriteSaveSectorOrSlot,.Lfe4-WriteSaveSectorOrSlot
	.align	2, 0
	.type	 HandleWriteSector,function
	.thumb_func
HandleWriteSector:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L52
	ldrh	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, .L52+0x4
	ldr	r1, [r2]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r6, #0x3
	add	r0, r0, r4
	ldr	r1, [r0]
	mov	sl, r1
	ldrh	r4, [r0, #0x4]
	mov	r3, #0x0
	mov	r9, r2
	ldr	r2, .L52+0x8
	mov	ip, r2
	mov	r8, ip
	mov	r2, #0x0
	ldr	r1, .L52+0xc
.L45:
	mov	r7, r8
	ldr	r0, [r7]
	add	r0, r0, r3
	strb	r2, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bls	.L45	@cond_branch
	mov	r0, ip
	ldr	r1, [r0]
	ldr	r2, .L52+0x10
	add	r0, r1, r2
	strh	r6, [r0]
	ldr	r3, .L52+0x14
	add	r2, r1, r3
	ldr	r0, .L52+0x18
	str	r0, [r2]
	ldr	r6, .L52+0x1c
	add	r1, r1, r6
	mov	r7, r9
	ldr	r0, [r7]
	str	r0, [r1]
	mov	r3, #0x0
	lsl	r5, r5, #0x18
	cmp	r3, r4
	bcs	.L48	@cond_branch
	mov	r2, ip
.L50:
	ldr	r1, [r2]
	add	r1, r1, r3
	mov	r6, sl
	add	r0, r6, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r4
	bcc	.L50	@cond_branch
.L48:
	mov	r0, sl
	add	r1, r4, #0
	bl	CalculateChecksum
	ldr	r1, .L52+0x8
	ldr	r1, [r1]
	ldr	r7, .L52+0x20
	add	r2, r1, r7
	strh	r0, [r2]
	lsr	r0, r5, #0x18
	bl	TryWriteSector
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L53:
	.align	2, 0
.L52:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	gSaveDataBufferPtr
	.word	0xfff
	.word	0xff4
	.word	0xff8
	.word	0x8012025
	.word	0xffc
	.word	0xff6
.Lfe5:
	.size	 HandleWriteSector,.Lfe5-HandleWriteSector
	.align	2, 0
	.type	 HandleWriteSectorNBytes,function
	.thumb_func
HandleWriteSectorNBytes:
	push	{r4, r5, r6, r7, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r4, .L65
	mov	r3, #0x0
	mov	r6, #0x0
	ldr	r1, .L65+0x4
.L58:
	add	r0, r4, r3
	strb	r6, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bls	.L58	@cond_branch
	ldr	r0, .L65+0x8
	add	r1, r4, r0
	ldr	r0, .L65+0xc
	str	r0, [r1]
	mov	r3, #0x0
	cmp	r3, r2
	bcs	.L61	@cond_branch
.L63:
	add	r1, r4, r3
	add	r0, r5, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r2
	bcc	.L63	@cond_branch
.L61:
	add	r0, r5, #0
	add	r1, r2, #0
	bl	CalculateChecksum
	ldr	r2, .L65+0x10
	add	r1, r4, r2
	strh	r0, [r1]
	add	r0, r7, #0
	add	r1, r4, #0
	bl	TryWriteSector
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L66:
	.align	2, 0
.L65:
	.word	gSaveDataBuffer
	.word	0xfff
	.word	0xff8
	.word	0x8012025
	.word	0xff4
.Lfe6:
	.size	 HandleWriteSectorNBytes,.Lfe6-HandleWriteSectorNBytes
	.align	2, 0
	.type	 TryWriteSector,function
	.thumb_func
TryWriteSector:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	ProgramFlashSectorAndVerify
	cmp	r0, #0
	bne	.L68	@cond_branch
	mov	r0, #0x1
	add	r1, r4, #0
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L70
.L68:
	mov	r0, #0x0
	add	r1, r4, #0
	bl	SetDamagedSectorBits
	mov	r0, #0xff
.L70:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 TryWriteSector,.Lfe7-TryWriteSector
	.align	2, 0
	.type	 RestoreSaveBackupVarsAndIncrement,function
	.thumb_func
RestoreSaveBackupVarsAndIncrement:
	push	{r4, r5, r6, lr}
	ldr	r1, .L72
	ldr	r0, .L72+0x4
	str	r0, [r1]
	ldr	r1, .L72+0x8
	ldr	r5, .L72+0xc
	ldrh	r0, [r5]
	strh	r0, [r1]
	ldr	r1, .L72+0x10
	ldr	r6, .L72+0x14
	ldr	r4, [r6]
	str	r4, [r1]
	add	r0, r0, #0x1
	strh	r0, [r5]
	ldrh	r0, [r5]
	mov	r1, #0xe
	bl	__umodsi3
	strh	r0, [r5]
	add	r4, r4, #0x1
	str	r4, [r6]
	ldr	r1, .L72+0x18
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L72+0x1c
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L73:
	.align	2, 0
.L72:
	.word	gSaveDataBufferPtr
	.word	gSaveDataBuffer
	.word	gLastKnownGoodSector
	.word	gLastWrittenSector
	.word	gLastSaveCounter
	.word	gSaveCounter
	.word	gIncrementalSectorId
	.word	gDamagedSaveSectors
.Lfe8:
	.size	 RestoreSaveBackupVarsAndIncrement,.Lfe8-RestoreSaveBackupVarsAndIncrement
	.align	2, 0
	.type	 RestoreSaveBackupVars,function
	.thumb_func
RestoreSaveBackupVars:
	ldr	r1, .L75
	ldr	r0, .L75+0x4
	str	r0, [r1]
	ldr	r1, .L75+0x8
	ldr	r0, .L75+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L75+0x10
	ldr	r0, .L75+0x14
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r1, .L75+0x18
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L75+0x1c
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L76:
	.align	2, 0
.L75:
	.word	gSaveDataBufferPtr
	.word	gSaveDataBuffer
	.word	gLastKnownGoodSector
	.word	gLastWrittenSector
	.word	gLastSaveCounter
	.word	gSaveCounter
	.word	gIncrementalSectorId
	.word	gDamagedSaveSectors
.Lfe9:
	.size	 RestoreSaveBackupVars,.Lfe9-RestoreSaveBackupVars
	.align	2, 0
	.type	 HandleWriteIncrementalSector,function
	.thumb_func
HandleWriteIncrementalSector:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L81
	ldrh	r2, [r4]
	sub	r0, r0, #0x1
	cmp	r2, r0
	bge	.L78	@cond_branch
	mov	r5, #0x1
	add	r0, r2, #0
	bl	HandleWriteSector
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	ldr	r0, .L81+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L80	@cond_branch
	mov	r5, #0xff
	ldr	r1, .L81+0x8
	ldr	r0, .L81+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L81+0x10
	ldr	r0, .L81+0x14
	ldr	r0, [r0]
	str	r0, [r1]
	b	.L80
.L82:
	.align	2, 0
.L81:
	.word	gIncrementalSectorId
	.word	gDamagedSaveSectors
	.word	gLastWrittenSector
	.word	gLastKnownGoodSector
	.word	gSaveCounter
	.word	gLastSaveCounter
.L78:
	mov	r5, #0xff
.L80:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 HandleWriteIncrementalSector,.Lfe10-HandleWriteIncrementalSector
	.align	2, 0
	.type	 HandleReplaceSectorAndVerify,function
	.thumb_func
HandleReplaceSectorAndVerify:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	mov	r4, #0x1
	ldr	r2, .L85
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	bl	HandleReplaceSector
	ldr	r0, .L85+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L84	@cond_branch
	mov	r4, #0xff
	ldr	r1, .L85+0x8
	ldr	r0, .L85+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L85+0x10
	ldr	r0, .L85+0x14
	ldr	r0, [r0]
	str	r0, [r1]
.L84:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L86:
	.align	2, 0
.L85:
	.word	-0x10000
	.word	gDamagedSaveSectors
	.word	gLastWrittenSector
	.word	gLastKnownGoodSector
	.word	gSaveCounter
	.word	gLastSaveCounter
.Lfe11:
	.size	 HandleReplaceSectorAndVerify,.Lfe11-HandleReplaceSectorAndVerify
	.align	2, 0
	.type	 HandleReplaceSector,function
	.thumb_func
HandleReplaceSector:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L116
	ldrh	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, .L116+0x4
	ldr	r1, [r2]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r6, #0x3
	add	r0, r0, r4
	ldr	r1, [r0]
	mov	sl, r1
	ldrh	r3, [r0, #0x4]
	mov	r4, #0x0
	mov	r9, r2
	ldr	r2, .L116+0x8
	mov	ip, r2
	mov	r8, ip
	mov	r2, #0x0
	ldr	r1, .L116+0xc
.L91:
	mov	r7, r8
	ldr	r0, [r7]
	add	r0, r0, r4
	strb	r2, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r1
	bls	.L91	@cond_branch
	mov	r0, ip
	ldr	r1, [r0]
	ldr	r2, .L116+0x10
	add	r0, r1, r2
	strh	r6, [r0]
	ldr	r6, .L116+0x14
	add	r2, r1, r6
	ldr	r0, .L116+0x18
	str	r0, [r2]
	ldr	r7, .L116+0x1c
	add	r1, r1, r7
	mov	r2, r9
	ldr	r0, [r2]
	str	r0, [r1]
	mov	r4, #0x0
	lsl	r6, r5, #0x18
	mov	r8, r6
	cmp	r4, r3
	bcs	.L94	@cond_branch
	mov	r2, ip
.L96:
	ldr	r1, [r2]
	add	r1, r1, r4
	mov	r7, sl
	add	r0, r7, r4
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r3
	bcc	.L96	@cond_branch
.L94:
	mov	r0, sl
	add	r1, r3, #0
	bl	CalculateChecksum
	ldr	r1, .L116+0x8
	ldr	r1, [r1]
	ldr	r2, .L116+0x20
	add	r1, r1, r2
	strh	r0, [r1]
	ldr	r0, .L116+0x24
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
	mov	r6, #0x1
	mov	r4, #0x0
	ldr	r7, .L116+0x28
	mov	r9, r7
	ldr	r7, .L116+0x2c
	b	.L98
.L117:
	.align	2, 0
.L116:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	gSaveDataBufferPtr
	.word	0xfff
	.word	0xff4
	.word	0xff8
	.word	0x8012025
	.word	0xffc
	.word	0xff6
	.word	EraseFlashSector
	.word	0xff7
	.word	ProgramFlashByte
.L100:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L98:
	cmp	r4, r9
	bhi	.L99	@cond_branch
	ldr	r0, .L118
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrb	r2, [r0]
	ldr	r3, [r7]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L100	@cond_branch
	mov	r6, #0xff
.L99:
	cmp	r6, #0xff
	bne	.L104	@cond_branch
	mov	r0, r8
	lsr	r1, r0, #0x18
	b	.L115
.L119:
	.align	2, 0
.L118:
	.word	gSaveDataBufferPtr
.L104:
	mov	r6, #0x1
	mov	r4, #0x0
	ldr	r1, .L120
	mov	r9, r1
	ldr	r7, .L120+0x4
	b	.L106
.L121:
	.align	2, 0
.L120:
	.word	ProgramFlashByte
	.word	0xff9
.L108:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L106:
	cmp	r4, #0x6
	bhi	.L107	@cond_branch
	add	r1, r4, r7
	ldr	r0, .L122
	ldr	r0, [r0]
	add	r0, r4, r0
	add	r0, r0, r7
	ldrb	r2, [r0]
	mov	r0, r9
	ldr	r3, [r0]
	add	r0, r5, #0
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L108	@cond_branch
	mov	r6, #0xff
.L107:
	cmp	r6, #0xff
	beq	.L112	@cond_branch
	mov	r2, r8
	lsr	r1, r2, #0x18
	mov	r0, #0x1
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L114
.L123:
	.align	2, 0
.L122:
	.word	gSaveDataBufferPtr
.L112:
	mov	r6, r8
	lsr	r1, r6, #0x18
.L115:
	mov	r0, #0x0
	bl	SetDamagedSectorBits
	mov	r0, #0xff
.L114:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 HandleReplaceSector,.Lfe12-HandleReplaceSector
	.align	2, 0
	.type	 CopySectorSignatureByte,function
	.thumb_func
CopySectorSignatureByte:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	ldr	r6, .L128
	lsr	r0, r0, #0x10
	ldrh	r1, [r6]
	add	r0, r0, r1
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r5, .L128+0x4
	ldr	r1, [r5]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r3, .L128+0x8
	ldr	r1, .L128+0xc
	ldr	r0, .L128+0x10
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r3, [r3]
	add	r0, r4, #0
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L125	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L127
.L129:
	.align	2, 0
.L128:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	ProgramFlashByte
	.word	0xff8
	.word	gSaveDataBufferPtr
.L125:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	SetDamagedSectorBits
	ldr	r0, .L130
	ldrh	r0, [r0]
	strh	r0, [r6]
	ldr	r0, .L130+0x4
	ldr	r0, [r0]
	str	r0, [r5]
	mov	r0, #0xff
.L127:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L131:
	.align	2, 0
.L130:
	.word	gLastKnownGoodSector
	.word	gLastSaveCounter
.Lfe13:
	.size	 CopySectorSignatureByte,.Lfe13-CopySectorSignatureByte
	.align	2, 0
	.type	 WriteSectorSignatureByte,function
	.thumb_func
WriteSectorSignatureByte:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	ldr	r6, .L136
	lsr	r0, r0, #0x10
	ldrh	r1, [r6]
	add	r0, r0, r1
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r5, .L136+0x4
	ldr	r1, [r5]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L136+0x8
	ldr	r1, .L136+0xc
	ldr	r3, [r0]
	add	r0, r4, #0
	mov	r2, #0x25
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L133	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L135
.L137:
	.align	2, 0
.L136:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	ProgramFlashByte
	.word	0xff8
.L133:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	SetDamagedSectorBits
	ldr	r0, .L138
	ldrh	r0, [r0]
	strh	r0, [r6]
	ldr	r0, .L138+0x4
	ldr	r0, [r0]
	str	r0, [r5]
	mov	r0, #0xff
.L135:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L139:
	.align	2, 0
.L138:
	.word	gLastKnownGoodSector
	.word	gLastSaveCounter
.Lfe14:
	.size	 WriteSectorSignatureByte,.Lfe14-WriteSectorSignatureByte
	.align	2, 0
	.type	 TryLoadSaveSlot,function
	.thumb_func
TryLoadSaveSlot:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r1, .L143
	ldr	r0, .L143+0x4
	str	r0, [r1]
	ldr	r0, .L143+0x8
	cmp	r4, r0
	beq	.L141	@cond_branch
	mov	r5, #0xff
	b	.L142
.L144:
	.align	2, 0
.L143:
	.word	gSaveDataBufferPtr
	.word	gSaveDataBuffer
	.word	0xffff
.L141:
	add	r0, r6, #0
	bl	GetSaveValidStatus
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	add	r1, r6, #0
	bl	CopySaveSlotData
.L142:
	add	r0, r5, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 TryLoadSaveSlot,.Lfe15-TryLoadSaveSlot
	.align	2, 0
	.type	 CopySaveSlotData,function
	.thumb_func
CopySaveSlotData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r1
	ldr	r0, .L158
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x11
	lsr	r7, r0, #0x10
	mov	r5, #0x0
	ldr	r6, .L158+0x4
.L149:
	add	r0, r5, r7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r6]
	bl	ReadFlashSector
	ldr	r0, [r6]
	ldr	r1, .L158+0x8
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	bne	.L150	@cond_branch
	ldr	r0, .L158+0xc
	strh	r5, [r0]
.L150:
	ldr	r0, [r6]
	lsl	r1, r1, #0x3
	mov	r2, r8
	add	r4, r1, r2
	ldrh	r1, [r4, #0x4]
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r2, [r6]
	ldr	r1, .L158+0x10
	add	r0, r2, r1
	ldr	r1, [r0]
	ldr	r0, .L158+0x14
	add	r5, r5, #0x1
	cmp	r1, r0
	bne	.L148	@cond_branch
	ldr	r1, .L158+0x18
	add	r0, r2, r1
	ldrh	r0, [r0]
	cmp	r0, r3
	bne	.L148	@cond_branch
	mov	r2, #0x0
	ldrh	r0, [r4, #0x4]
	cmp	r2, r0
	bcs	.L148	@cond_branch
	add	r3, r4, #0
	ldr	r4, .L158+0x4
.L155:
	ldr	r1, [r3]
	add	r1, r1, r2
	ldr	r0, [r4]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrh	r1, [r3, #0x4]
	cmp	r2, r1
	bcc	.L155	@cond_branch
.L148:
	lsl	r0, r5, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xd
	bls	.L149	@cond_branch
	mov	r0, #0x1
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L159:
	.align	2, 0
.L158:
	.word	gSaveCounter
	.word	gSaveDataBufferPtr
	.word	0xff4
	.word	gLastWrittenSector
	.word	0xff8
	.word	0x8012025
	.word	0xff6
.Lfe16:
	.size	 CopySaveSlotData,.Lfe16-CopySaveSlotData
	.align	2, 0
	.type	 GetSaveValidStatus,function
	.thumb_func
GetSaveValidStatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	sl, r0
	mov	r0, #0x0
	mov	r8, r0
	mov	r9, r0
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r4, #0x0
	ldr	r7, .L202
.L164:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r7]
	bl	ReadFlashSector
	ldr	r2, [r7]
	ldr	r1, .L202+0x4
	add	r0, r2, r1
	ldr	r1, [r0]
	ldr	r0, .L202+0x8
	cmp	r1, r0
	bne	.L163	@cond_branch
	mov	r5, #0x1
	ldr	r3, .L202+0xc
	add	r0, r2, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	add	r0, r2, #0
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, [r7]
	ldr	r3, .L202+0x10
	add	r0, r1, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L163	@cond_branch
	ldr	r2, .L202+0x14
	add	r0, r1, r2
	ldr	r0, [r0]
	mov	r8, r0
	sub	r3, r3, #0x2
	add	r1, r1, r3
	add	r0, r5, #0
	ldrh	r1, [r1]
	lsl	r0, r0, r1
	orr	r6, r6, r0
.L163:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xd
	bls	.L164	@cond_branch
	cmp	r5, #0
	beq	.L168	@cond_branch
	ldr	r0, .L202+0x18
	mov	r1, #0xff
	str	r1, [sp]
	cmp	r6, r0
	bne	.L171	@cond_branch
	mov	r2, #0x1
	str	r2, [sp]
	b	.L171
.L203:
	.align	2, 0
.L202:
	.word	gSaveDataBufferPtr
	.word	0xff8
	.word	0x8012025
	.word	0xff4
	.word	0xff6
	.word	0xffc
	.word	0x3fff
.L168:
	mov	r3, #0x0
	str	r3, [sp]
.L171:
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r4, #0x0
	ldr	r7, .L204
.L175:
	add	r0, r4, #0
	add	r0, r0, #0xe
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r7]
	bl	ReadFlashSector
	ldr	r2, [r7]
	ldr	r1, .L204+0x4
	add	r0, r2, r1
	ldr	r1, [r0]
	ldr	r0, .L204+0x8
	cmp	r1, r0
	bne	.L174	@cond_branch
	mov	r5, #0x1
	ldr	r3, .L204+0xc
	add	r0, r2, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	add	r0, r2, #0
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, [r7]
	ldr	r3, .L204+0x10
	add	r0, r1, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L174	@cond_branch
	ldr	r2, .L204+0x14
	add	r0, r1, r2
	ldr	r0, [r0]
	mov	r9, r0
	sub	r3, r3, #0x2
	add	r1, r1, r3
	add	r0, r5, #0
	ldrh	r1, [r1]
	lsl	r0, r0, r1
	orr	r6, r6, r0
.L174:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xd
	bls	.L175	@cond_branch
	cmp	r5, #0
	beq	.L179	@cond_branch
	ldr	r0, .L204+0x18
	mov	r1, #0xff
	cmp	r6, r0
	bne	.L182	@cond_branch
	mov	r1, #0x1
	b	.L182
.L205:
	.align	2, 0
.L204:
	.word	gSaveDataBufferPtr
	.word	0xff8
	.word	0x8012025
	.word	0xff4
	.word	0xff6
	.word	0xffc
	.word	0x3fff
.L179:
	mov	r1, #0x0
.L182:
	ldr	r0, [sp]
	cmp	r0, #0x1
	bne	.L192	@cond_branch
	cmp	r1, #0x1
	bne	.L183	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r8, r0
	bne	.L186	@cond_branch
	mov	r1, r9
	cmp	r1, #0
	beq	.L185	@cond_branch
.L186:
	mov	r2, r8
	cmp	r2, #0
	bne	.L184	@cond_branch
	cmp	r9, r0
	bne	.L184	@cond_branch
.L185:
	mov	r1, r8
	add	r1, r1, #0x1
	mov	r0, r9
	add	r0, r0, #0x1
	cmp	r1, r0
	bcs	.L187	@cond_branch
	ldr	r0, .L206
	mov	r3, r9
	b	.L200
.L207:
	.align	2, 0
.L206:
	.word	gSaveCounter
.L187:
	ldr	r0, .L208
	mov	r1, r8
	str	r1, [r0]
	b	.L196
.L209:
	.align	2, 0
.L208:
	.word	gSaveCounter
.L184:
	cmp	r8, r9
	bcs	.L190	@cond_branch
	ldr	r0, .L210
	mov	r2, r9
	str	r2, [r0]
	b	.L196
.L211:
	.align	2, 0
.L210:
	.word	gSaveCounter
.L190:
	ldr	r0, .L212
	mov	r3, r8
.L200:
	str	r3, [r0]
	b	.L196
.L213:
	.align	2, 0
.L212:
	.word	gSaveCounter
.L183:
	ldr	r0, .L214
	mov	r2, r8
	str	r2, [r0]
	cmp	r1, #0xff
	beq	.L201	@cond_branch
	b	.L196
.L215:
	.align	2, 0
.L214:
	.word	gSaveCounter
.L192:
	cmp	r1, #0x1
	bne	.L195	@cond_branch
	ldr	r0, .L216
	mov	r3, r9
	str	r3, [r0]
	ldr	r0, [sp]
	cmp	r0, #0xff
	bne	.L196	@cond_branch
.L201:
	mov	r0, #0xff
	b	.L199
.L217:
	.align	2, 0
.L216:
	.word	gSaveCounter
.L196:
	mov	r0, #0x1
	b	.L199
.L195:
	ldr	r2, [sp]
	cmp	r2, #0
	bne	.L198	@cond_branch
	cmp	r1, #0
	bne	.L198	@cond_branch
	ldr	r0, .L218
	str	r1, [r0]
	ldr	r0, .L218+0x4
	strh	r1, [r0]
	mov	r0, #0x0
	b	.L199
.L219:
	.align	2, 0
.L218:
	.word	gSaveCounter
	.word	gLastWrittenSector
.L198:
	ldr	r0, .L220
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L220+0x4
	strh	r1, [r0]
	mov	r0, #0x2
.L199:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L221:
	.align	2, 0
.L220:
	.word	gSaveCounter
	.word	gLastWrittenSector
.Lfe17:
	.size	 GetSaveValidStatus,.Lfe17-GetSaveValidStatus
	.align	2, 0
	.type	 TryLoadSaveSector,function
	.thumb_func
TryLoadSaveSector:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	ldr	r5, .L233
	add	r1, r5, #0
	bl	ReadFlashSector
	ldr	r1, .L233+0x4
	add	r0, r5, r1
	ldr	r1, [r0]
	ldr	r0, .L233+0x8
	cmp	r1, r0
	bne	.L223	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L233+0xc
	add	r1, r5, r2
	ldrh	r1, [r1]
	cmp	r1, r0
	bne	.L224	@cond_branch
	mov	r2, #0x0
	cmp	r2, r4
	bcs	.L226	@cond_branch
.L228:
	add	r1, r6, r2
	add	r0, r5, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r4
	bcc	.L228	@cond_branch
.L226:
	mov	r0, #0x1
	b	.L232
.L234:
	.align	2, 0
.L233:
	.word	gSaveDataBuffer
	.word	0xff8
	.word	0x8012025
	.word	0xff4
.L224:
	mov	r0, #0x2
	b	.L232
.L223:
	mov	r0, #0x0
.L232:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 TryLoadSaveSector,.Lfe18-TryLoadSaveSector
	.align	2, 0
	.type	 ReadFlashSector,function
	.thumb_func
ReadFlashSector:
	push	{lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	mov	r1, #0x0
	bl	ReadFlash
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 ReadFlashSector,.Lfe19-ReadFlashSector
	.align	2, 0
	.type	 CalculateChecksum,function
	.thumb_func
CalculateChecksum:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	mov	r2, #0x0
	mov	r3, #0x0
	lsr	r1, r1, #0x12
	cmp	r2, r1
	bcs	.L238	@cond_branch
.L240:
	ldmia	r4!, {r0}
	add	r2, r2, r0
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bcc	.L240	@cond_branch
.L238:
	lsr	r0, r2, #0x10
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 CalculateChecksum,.Lfe20-CalculateChecksum
	.align	2, 0
	.type	 UpdateSaveAddresses,function
	.thumb_func
UpdateSaveAddresses:
	push	{r4, r5, lr}
	ldr	r3, .L254
	ldr	r0, .L254+0x4
	ldr	r2, .L254+0x8
	ldrh	r1, [r2]
	ldr	r0, [r0]
	add	r0, r0, r1
	str	r0, [r3]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r3, #0x4]
	ldr	r5, .L254+0xc
	add	r3, r3, #0x8
	add	r2, r2, #0x4
	mov	r4, #0x3
.L246:
	ldrh	r0, [r2]
	ldr	r1, [r5]
	add	r1, r1, r0
	str	r1, [r3]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r3, #0x4]
	add	r3, r3, #0x8
	add	r2, r2, #0x4
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L246	@cond_branch
	mov	r4, #0x5
	ldr	r1, .L254
	ldr	r5, .L254+0x10
	ldr	r0, .L254+0x8
	add	r3, r1, #0
	add	r3, r3, #0x28
	add	r2, r0, #0
	add	r2, r2, #0x14
.L251:
	ldrh	r0, [r2]
	ldr	r1, [r5]
	add	r1, r1, r0
	str	r1, [r3]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r3, #0x4]
	add	r3, r3, #0x8
	add	r2, r2, #0x4
	add	r4, r4, #0x1
	cmp	r4, #0xd
	ble	.L251	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L255:
	.align	2, 0
.L254:
	.word	gRamSaveSectorLocations
	.word	gSaveBlock2Ptr
	.word	sSaveSlotLayout
	.word	gSaveBlock1Ptr
	.word	gPokemonStoragePtr
.Lfe21:
	.size	 UpdateSaveAddresses,.Lfe21-UpdateSaveAddresses
	.align	2, 0
	.globl	HandleSavingData
	.type	 HandleSavingData,function
	.thumb_func
HandleSavingData:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L282
	ldr	r6, [r1, #0x20]
	mov	r0, #0x0
	str	r0, [r1, #0x20]
	bl	UpdateSaveAddresses
	cmp	r4, #0x5
	bhi	.L267	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L282+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L283:
	.align	2, 0
.L282:
	.word	gMain
	.word	.L281
	.align	2, 0
	.align	2, 0
.L281:
	.word	.L267
	.word	.L268
	.word	.L274
	.word	.L264
	.word	.L275
	.word	.L258
.L258:
	mov	r4, #0x1c
	ldr	r5, .L284
.L262:
	ldr	r1, [r5]
	add	r0, r4, #0
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1f
	bls	.L262	@cond_branch
.L264:
	mov	r0, #0xa
	bl	GetGameStat
	ldr	r1, .L284+0x4
	cmp	r0, r1
	bhi	.L265	@cond_branch
	mov	r0, #0xa
	bl	IncrementGameStat
.L265:
	ldr	r4, .L284+0x8
	mov	r5, #0xf8
	lsl	r5, r5, #0x4
	mov	r0, #0x1c
	add	r1, r4, #0
	add	r2, r5, #0
	bl	HandleWriteSectorNBytes
	add	r4, r4, r5
	mov	r0, #0x1d
	add	r1, r4, #0
	add	r2, r5, #0
	bl	HandleWriteSectorNBytes
.L267:
	bl	SaveSerializedGame
	ldr	r0, .L284+0xc
	ldr	r1, .L284+0x10
	bl	WriteSaveSectorOrSlot
	b	.L257
.L285:
	.align	2, 0
.L284:
	.word	EraseFlashSector
	.word	0x3e6
	.word	gDecompressionBuffer
	.word	0xffff
	.word	gRamSaveSectorLocations
.L268:
	bl	SaveSerializedGame
	mov	r4, #0x0
.L272:
	add	r0, r4, #0
	ldr	r1, .L286
	bl	WriteSaveSectorOrSlot
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bls	.L272	@cond_branch
	b	.L257
.L287:
	.align	2, 0
.L286:
	.word	gRamSaveSectorLocations
.L274:
	bl	SaveSerializedGame
	ldr	r1, .L288
	mov	r0, #0x0
	bl	WriteSaveSectorOrSlot
	b	.L257
.L289:
	.align	2, 0
.L288:
	.word	gRamSaveSectorLocations
.L275:
	mov	r4, #0x1c
	ldr	r5, .L290
.L279:
	ldr	r1, [r5]
	add	r0, r4, #0
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1f
	bls	.L279	@cond_branch
	bl	SaveSerializedGame
	ldr	r0, .L290+0x4
	ldr	r1, .L290+0x8
	bl	WriteSaveSectorOrSlot
.L257:
	ldr	r0, .L290+0xc
	str	r6, [r0, #0x20]
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L291:
	.align	2, 0
.L290:
	.word	EraseFlashSector
	.word	0xffff
	.word	gRamSaveSectorLocations
	.word	gMain
.Lfe22:
	.size	 HandleSavingData,.Lfe22-HandleSavingData
	.align	2, 0
	.globl	TrySavingData
	.type	 TrySavingData,function
	.thumb_func
TrySavingData:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L298
	ldr	r4, [r0]
	cmp	r4, #0x1
	bne	.L297	@cond_branch
	add	r0, r5, #0
	bl	HandleSavingData
	ldr	r0, .L298+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L294	@cond_branch
	add	r0, r5, #0
	bl	DoSaveFailedScreen
.L297:
	ldr	r1, .L298+0x8
	mov	r0, #0xff
	strh	r0, [r1]
	mov	r0, #0xff
	b	.L296
.L299:
	.align	2, 0
.L298:
	.word	gFlashMemoryPresent
	.word	gDamagedSaveSectors
	.word	gSaveAttemptStatus
.L294:
	ldr	r0, .L300
	strh	r4, [r0]
	mov	r0, #0x1
.L296:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L301:
	.align	2, 0
.L300:
	.word	gSaveAttemptStatus
.Lfe23:
	.size	 TrySavingData,.Lfe23-TrySavingData
	.align	2, 0
	.globl	LinkFullSave_Init
	.type	 LinkFullSave_Init,function
	.thumb_func
LinkFullSave_Init:
	push	{lr}
	ldr	r0, .L305
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L303	@cond_branch
	bl	UpdateSaveAddresses
	bl	SaveSerializedGame
	ldr	r0, .L305+0x4
	bl	RestoreSaveBackupVarsAndIncrement
	mov	r0, #0x0
	b	.L304
.L306:
	.align	2, 0
.L305:
	.word	gFlashMemoryPresent
	.word	gRamSaveSectorLocations
.L303:
	mov	r0, #0x1
.L304:
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 LinkFullSave_Init,.Lfe24-LinkFullSave_Init
	.align	2, 0
	.globl	LinkFullSave_WriteSector
	.type	 LinkFullSave_WriteSector,function
	.thumb_func
LinkFullSave_WriteSector:
	push	{r4, lr}
	ldr	r1, .L312
	mov	r0, #0xe
	bl	HandleWriteIncrementalSector
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L312+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L308	@cond_branch
	mov	r0, #0x0
	bl	DoSaveFailedScreen
.L308:
	cmp	r4, #0xff
	beq	.L309	@cond_branch
	mov	r0, #0x0
	b	.L311
.L313:
	.align	2, 0
.L312:
	.word	gRamSaveSectorLocations
	.word	gDamagedSaveSectors
.L309:
	mov	r0, #0x1
.L311:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 LinkFullSave_WriteSector,.Lfe25-LinkFullSave_WriteSector
	.align	2, 0
	.globl	LinkFullSave_ReplaceLastSector
	.type	 LinkFullSave_ReplaceLastSector,function
	.thumb_func
LinkFullSave_ReplaceLastSector:
	push	{lr}
	ldr	r1, .L316
	mov	r0, #0xe
	bl	HandleReplaceSectorAndVerify
	ldr	r0, .L316+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L315	@cond_branch
	mov	r0, #0x0
	bl	DoSaveFailedScreen
.L315:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L317:
	.align	2, 0
.L316:
	.word	gRamSaveSectorLocations
	.word	gDamagedSaveSectors
.Lfe26:
	.size	 LinkFullSave_ReplaceLastSector,.Lfe26-LinkFullSave_ReplaceLastSector
	.align	2, 0
	.globl	LinkFullSave_SetLastSectorSignature
	.type	 LinkFullSave_SetLastSectorSignature,function
	.thumb_func
LinkFullSave_SetLastSectorSignature:
	push	{lr}
	ldr	r1, .L320
	mov	r0, #0xe
	bl	CopySectorSignatureByte
	ldr	r0, .L320+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L319	@cond_branch
	mov	r0, #0x0
	bl	DoSaveFailedScreen
.L319:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L321:
	.align	2, 0
.L320:
	.word	gRamSaveSectorLocations
	.word	gDamagedSaveSectors
.Lfe27:
	.size	 LinkFullSave_SetLastSectorSignature,.Lfe27-LinkFullSave_SetLastSectorSignature
	.align	2, 0
	.globl	WriteSaveBlock2
	.type	 WriteSaveBlock2,function
	.thumb_func
WriteSaveBlock2:
	push	{r4, lr}
	ldr	r0, .L325
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L323	@cond_branch
	bl	UpdateSaveAddresses
	bl	SaveSerializedGame
	ldr	r4, .L325+0x4
	add	r0, r4, #0
	bl	RestoreSaveBackupVars
	ldr	r0, .L325+0x8
	ldrh	r0, [r0]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	HandleReplaceSectorAndVerify
	mov	r0, #0x0
	b	.L324
.L326:
	.align	2, 0
.L325:
	.word	gFlashMemoryPresent
	.word	gRamSaveSectorLocations
	.word	gIncrementalSectorId
.L323:
	mov	r0, #0x1
.L324:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 WriteSaveBlock2,.Lfe28-WriteSaveBlock2
	.align	2, 0
	.globl	WriteSaveBlock1Sector
	.type	 WriteSaveBlock1Sector,function
	.thumb_func
WriteSaveBlock1Sector:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	ldr	r0, .L331
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x4
	bhi	.L328	@cond_branch
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L331+0x4
	add	r1, r4, #0
	bl	HandleReplaceSectorAndVerify
	add	r0, r5, #0
	add	r1, r4, #0
	bl	WriteSectorSignatureByte
	b	.L329
.L332:
	.align	2, 0
.L331:
	.word	gIncrementalSectorId
	.word	gRamSaveSectorLocations
.L328:
	ldr	r1, .L333
	add	r0, r5, #0
	bl	WriteSectorSignatureByte
	mov	r6, #0x1
.L329:
	ldr	r0, .L333+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L330	@cond_branch
	mov	r0, #0x1
	bl	DoSaveFailedScreen
.L330:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L334:
	.align	2, 0
.L333:
	.word	gRamSaveSectorLocations
	.word	gDamagedSaveSectors
.Lfe29:
	.size	 WriteSaveBlock1Sector,.Lfe29-WriteSaveBlock1Sector
	.align	2, 0
	.globl	LoadGameSave
	.type	 LoadGameSave,function
	.thumb_func
LoadGameSave:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L344
	ldr	r0, [r0]
	cmp	r0, #0x1
	beq	.L336	@cond_branch
	ldr	r1, .L344+0x4
	mov	r0, #0x4
	strh	r0, [r1]
	mov	r0, #0xff
	b	.L343
.L345:
	.align	2, 0
.L344:
	.word	gFlashMemoryPresent
	.word	gSaveFileStatus
.L336:
	bl	UpdateSaveAddresses
	cmp	r4, #0
	beq	.L339	@cond_branch
	cmp	r4, #0x3
	beq	.L340	@cond_branch
.L339:
	ldr	r0, .L346
	ldr	r1, .L346+0x4
	bl	TryLoadSaveSlot
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	LoadSerializedGame
	ldr	r0, .L346+0x8
	strh	r4, [r0]
	ldr	r1, .L346+0xc
	mov	r0, #0x0
	str	r0, [r1]
	b	.L337
.L347:
	.align	2, 0
.L346:
	.word	0xffff
	.word	gRamSaveSectorLocations
	.word	gSaveFileStatus
	.word	gGameContinueCallback
.L340:
	ldr	r5, .L348
	mov	r6, #0xf8
	lsl	r6, r6, #0x4
	mov	r0, #0x1c
	add	r1, r5, #0
	add	r2, r6, #0
	bl	TryLoadSaveSector
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bne	.L337	@cond_branch
	add	r1, r5, r6
	mov	r0, #0x1d
	add	r2, r6, #0
	bl	TryLoadSaveSector
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L337:
	add	r0, r4, #0
.L343:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L349:
	.align	2, 0
.L348:
	.word	gDecompressionBuffer
.Lfe30:
	.size	 LoadGameSave,.Lfe30-LoadGameSave
	.align	2, 0
	.globl	TryReadSpecialSaveSector
	.type	 TryReadSpecialSaveSector,function
	.thumb_func
TryReadSpecialSaveSector:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xe2
	lsl	r2, r2, #0x18
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L359	@cond_branch
	ldr	r4, .L360
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	add	r0, r1, #0
	mov	r1, #0x0
	add	r2, r4, #0
	bl	ReadFlash
	ldr	r1, [r4]
	ldr	r0, .L360+0x4
	cmp	r1, r0
	beq	.L352	@cond_branch
.L359:
	mov	r0, #0xff
	b	.L358
.L361:
	.align	2, 0
.L360:
	.word	gSaveDataBuffer
	.word	0xb39d
.L352:
	mov	r3, #0x0
	ldr	r5, .L362
	add	r2, r4, #0x4
.L356:
	add	r0, r6, r3
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, r5
	ble	.L356	@cond_branch
	mov	r0, #0x1
.L358:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L363:
	.align	2, 0
.L362:
	.word	0xffb
.Lfe31:
	.size	 TryReadSpecialSaveSector,.Lfe31-TryReadSpecialSaveSector
	.align	2, 0
	.globl	TryWriteSpecialSaveSector
	.type	 TryWriteSpecialSaveSector,function
	.thumb_func
TryWriteSpecialSaveSector:
	push	{r4, r5, r6, r7, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0xe2
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L371	@cond_branch
	ldr	r7, .L373
	ldr	r0, .L373+0x4
	add	r3, r7, #0
	stmia	r3!, {r0}
	mov	r2, #0x0
	ldr	r4, .L373+0x8
.L369:
	add	r0, r3, r2
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	ble	.L369	@cond_branch
	add	r0, r6, #0
	add	r1, r7, #0
	bl	ProgramFlashSectorAndVerify
	cmp	r0, #0
	bne	.L371	@cond_branch
	mov	r0, #0x1
	b	.L372
.L374:
	.align	2, 0
.L373:
	.word	gSaveDataBuffer
	.word	0xb39d
	.word	0xffb
.L371:
	mov	r0, #0xff
.L372:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 TryWriteSpecialSaveSector,.Lfe32-TryWriteSpecialSaveSector
	.align	2, 0
	.globl	Task_LinkFullSave
	.type	 Task_LinkFullSave,function
	.thumb_func
Task_LinkFullSave:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L398
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0xb
	bls	.LCB2681
	b	.L376	@long jump
.LCB2681:
	lsl	r0, r0, #0x2
	ldr	r1, .L398+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L399:
	.align	2, 0
.L398:
	.word	gTasks
	.word	.L396
	.align	2, 0
	.align	2, 0
.L396:
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L381
	.word	.L382
	.word	.L384
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L391
	.word	.L392
	.word	.L394
.L377:
	ldr	r1, .L400
	mov	r0, #0x1
	strb	r0, [r1]
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L376
.L401:
	.align	2, 0
.L400:
	.word	gSoftResetDisabled
.L378:
	bl	SetLinkStandbyCallback
	ldr	r0, .L402
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x2
	strh	r0, [r1, #0x8]
	b	.L376
.L403:
	.align	2, 0
.L402:
	.word	gTasks
.L379:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2742
	b	.L376	@long jump
.LCB2742:
	bl	SaveMapView
	ldr	r0, .L404
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x3
	strh	r0, [r1, #0x8]
	b	.L376
.L405:
	.align	2, 0
.L404:
	.word	gTasks
.L381:
	bl	SetContinueGameWarpStatusToDynamicWarp
	bl	LinkFullSave_Init
	b	.L385
.L382:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0x5
	beq	.LCB2778
	b	.L376	@long jump
.LCB2778:
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
	strh	r2, [r1, #0x8]
	b	.L376
.L384:
	bl	LinkFullSave_WriteSector
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L385	@cond_branch
	ldr	r0, .L406
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x6
	strh	r0, [r1, #0x8]
	b	.L376
.L407:
	.align	2, 0
.L406:
	.word	gTasks
.L385:
	ldr	r0, .L408
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x4
	strh	r0, [r1, #0x8]
	b	.L376
.L409:
	.align	2, 0
.L408:
	.word	gTasks
.L387:
	bl	LinkFullSave_ReplaceLastSector
	ldr	r0, .L410
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x7
	strh	r0, [r1, #0x8]
	b	.L376
.L411:
	.align	2, 0
.L410:
	.word	gTasks
.L388:
	bl	ClearContinueGameWarpStatus2
	bl	SetLinkStandbyCallback
	ldr	r0, .L412
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x8
	strh	r0, [r1, #0x8]
	b	.L376
.L413:
	.align	2, 0
.L412:
	.word	gTasks
.L389:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L376	@cond_branch
	bl	LinkFullSave_SetLastSectorSignature
	ldr	r0, .L414
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x9
	strh	r0, [r1, #0x8]
	b	.L376
.L415:
	.align	2, 0
.L414:
	.word	gTasks
.L391:
	bl	SetLinkStandbyCallback
	ldr	r0, .L416
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0xa
	strh	r0, [r1, #0x8]
	b	.L376
.L417:
	.align	2, 0
.L416:
	.word	gTasks
.L392:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L376	@cond_branch
	ldr	r0, .L418
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L376
.L419:
	.align	2, 0
.L418:
	.word	gTasks
.L394:
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L376	@cond_branch
	ldr	r1, .L420
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L376:
	pop	{r4}
	pop	{r0}
	bx	r0
.L421:
	.align	2, 0
.L420:
	.word	gSoftResetDisabled
.Lfe33:
	.size	 Task_LinkFullSave,.Lfe33-Task_LinkFullSave
	.comm	gDamagedSaveSectors, 4	@ 4
	.comm	gSaveDataBufferPtr, 4	@ 4
	.comm	gSaveFileStatus, 4	@ 2
	.comm	gGameContinueCallback, 4	@ 4
	.comm	gSaveAttemptStatus, 4	@ 2
	.comm	gLastWrittenSector, 4	@ 2
	.comm	gLastSaveCounter, 4	@ 4
	.comm	gLastKnownGoodSector, 4	@ 2
	.comm	gSaveCounter, 4	@ 4
	.comm	gIncrementalSectorId, 4	@ 2
	.comm	gSaveUnusedVar, 4	@ 2
	.comm	gRamSaveSectorLocations, 112	@ 112
.text
	.align	2, 0 @ Don't pad with nop

