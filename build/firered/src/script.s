@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gWalkAwayFromSignInhibitTimer
	.section ewram_data,"aw"
	.type	 gWalkAwayFromSignInhibitTimer,object
	.size	 gWalkAwayFromSignInhibitTimer,1
gWalkAwayFromSignInhibitTimer:
	.byte	0x0
	.globl	gRamScriptRetAddr
	.align	2, 0
	.type	 gRamScriptRetAddr,object
	.size	 gRamScriptRetAddr,4
gRamScriptRetAddr:
	.word	0x0
.text
	.align	2, 0
	.globl	InitScriptContext
	.type	 InitScriptContext,function
	.thumb_func
InitScriptContext:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x0
	strb	r0, [r3, #0x1]
	str	r0, [r3, #0x8]
	strb	r0, [r3]
	str	r0, [r3, #0x4]
	str	r1, [r3, #0x5c]
	str	r2, [r3, #0x60]
	mov	r2, #0x0
	mov	r1, #0x3
	add	r0, r3, #0
	add	r0, r0, #0x70
.L6:
	str	r2, [r0]
	sub	r0, r0, #0x4
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L6	@cond_branch
	add	r1, r3, #0
	add	r1, r1, #0xc
	mov	r2, #0x0
	add	r0, r3, #0
	add	r0, r0, #0x58
.L11:
	str	r2, [r0]
	sub	r0, r0, #0x4
	cmp	r0, r1
	bge	.L11	@cond_branch
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 InitScriptContext,.Lfe1-InitScriptContext
	.align	2, 0
	.globl	SetupBytecodeScript
	.type	 SetupBytecodeScript,function
	.thumb_func
SetupBytecodeScript:
	str	r1, [r0, #0x8]
	mov	r1, #0x1
	strb	r1, [r0, #0x1]
	mov	r0, #0x1
	bx	lr
.Lfe2:
	.size	 SetupBytecodeScript,.Lfe2-SetupBytecodeScript
	.align	2, 0
	.globl	SetupNativeScript
	.type	 SetupNativeScript,function
	.thumb_func
SetupNativeScript:
	mov	r2, #0x2
	strb	r2, [r0, #0x1]
	str	r1, [r0, #0x4]
	bx	lr
.Lfe3:
	.size	 SetupNativeScript,.Lfe3-SetupNativeScript
	.align	2, 0
	.globl	StopScript
	.type	 StopScript,function
	.thumb_func
StopScript:
	mov	r1, #0x0
	strb	r1, [r0, #0x1]
	str	r1, [r0, #0x8]
	bx	lr
.Lfe4:
	.size	 StopScript,.Lfe4-StopScript
	.align	2, 0
	.globl	RunScriptCommand
	.type	 RunScriptCommand,function
	.thumb_func
RunScriptCommand:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	beq	.L25	@cond_branch
	cmp	r0, #0x1
	bgt	.L37	@cond_branch
	cmp	r0, #0
	beq	.L41	@cond_branch
	b	.L17
.L37:
	cmp	r0, #0x2
	bne	.L17	@cond_branch
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L20	@cond_branch
	bl	_call_via_r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L17	@cond_branch
	strb	r0, [r4, #0x1]
	b	.L17
.L39:
	strb	r2, [r4, #0x1]
.L41:
	mov	r0, #0x0
	b	.L38
.L40:
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	b	.L38
.L20:
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
.L25:
	ldr	r2, [r4, #0x8]
	cmp	r2, #0
	beq	.L39	@cond_branch
	ldr	r0, .L42
	ldr	r0, [r0]
	cmp	r2, r0
	bne	.L27	@cond_branch
.L30:
	svc 2
	.code	16
	b	.L30
.L43:
	.align	2, 0
.L42:
	.word	gNullScriptPtr
.L27:
	ldrb	r1, [r2]
	add	r0, r2, #0x1
	str	r0, [r4, #0x8]
	lsl	r1, r1, #0x2
	ldr	r0, [r4, #0x5c]
	add	r1, r0, r1
	ldr	r0, [r4, #0x60]
	cmp	r1, r0
	bcs	.L40	@cond_branch
	ldr	r1, [r1]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L25	@cond_branch
.L17:
	mov	r0, #0x1
.L38:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 RunScriptCommand,.Lfe5-RunScriptCommand
	.align	2, 0
	.type	 ScriptPush,function
	.thumb_func
ScriptPush:
	push	{lr}
	add	r2, r0, #0
	add	r3, r1, #0
	ldrb	r1, [r2]
	add	r0, r1, #0x1
	cmp	r0, #0x13
	bgt	.L45	@cond_branch
	lsl	r0, r1, #0x2
	add	r1, r2, #0
	add	r1, r1, #0xc
	add	r1, r1, r0
	str	r3, [r1]
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	mov	r0, #0x0
	b	.L47
.L45:
	mov	r0, #0x1
.L47:
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 ScriptPush,.Lfe6-ScriptPush
	.align	2, 0
	.type	 ScriptPop,function
	.thumb_func
ScriptPop:
	push	{lr}
	add	r2, r0, #0
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L49	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r2]
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L50
.L49:
	mov	r0, #0x0
.L50:
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 ScriptPop,.Lfe7-ScriptPop
	.align	2, 0
	.globl	ScriptJump
	.type	 ScriptJump,function
	.thumb_func
ScriptJump:
	str	r1, [r0, #0x8]
	bx	lr
.Lfe8:
	.size	 ScriptJump,.Lfe8-ScriptJump
	.align	2, 0
	.globl	ScriptCall
	.type	 ScriptCall,function
	.thumb_func
ScriptCall:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r1, [r4, #0x8]
	bl	ScriptPush
	str	r5, [r4, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 ScriptCall,.Lfe9-ScriptCall
	.align	2, 0
	.globl	ScriptReturn
	.type	 ScriptReturn,function
	.thumb_func
ScriptReturn:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptPop
	str	r0, [r4, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 ScriptReturn,.Lfe10-ScriptReturn
	.align	2, 0
	.globl	ScriptReadHalfword
	.type	 ScriptReadHalfword,function
	.thumb_func
ScriptReadHalfword:
	add	r3, r0, #0
	ldr	r2, [r3, #0x8]
	ldrb	r0, [r2]
	add	r2, r2, #0x1
	str	r2, [r3, #0x8]
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	add	r2, r2, #0x1
	str	r2, [r3, #0x8]
	bx	lr
.Lfe11:
	.size	 ScriptReadHalfword,.Lfe11-ScriptReadHalfword
	.align	2, 0
	.globl	ScriptReadWord
	.type	 ScriptReadWord,function
	.thumb_func
ScriptReadWord:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	ldr	r0, [r3, #0x8]
	ldrb	r6, [r0]
	add	r0, r0, #0x1
	str	r0, [r3, #0x8]
	ldrb	r5, [r0]
	add	r2, r0, #0x1
	str	r2, [r3, #0x8]
	ldrb	r4, [r0, #0x1]
	add	r1, r2, #0x1
	str	r1, [r3, #0x8]
	ldrb	r0, [r2, #0x1]
	add	r1, r1, #0x1
	str	r1, [r3, #0x8]
	lsl	r0, r0, #0x8
	add	r0, r0, r4
	lsl	r0, r0, #0x8
	add	r0, r0, r5
	lsl	r0, r0, #0x8
	add	r0, r0, r6
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 ScriptReadWord,.Lfe12-ScriptReadWord
	.align	2, 0
	.globl	LockPlayerFieldControls
	.type	 LockPlayerFieldControls,function
	.thumb_func
LockPlayerFieldControls:
	ldr	r1, .L57
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L58:
	.align	2, 0
.L57:
	.word	sLockFieldControls
.Lfe13:
	.size	 LockPlayerFieldControls,.Lfe13-LockPlayerFieldControls
	.align	2, 0
	.globl	UnlockPlayerFieldControls
	.type	 UnlockPlayerFieldControls,function
	.thumb_func
UnlockPlayerFieldControls:
	ldr	r1, .L60
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L61:
	.align	2, 0
.L60:
	.word	sLockFieldControls
.Lfe14:
	.size	 UnlockPlayerFieldControls,.Lfe14-UnlockPlayerFieldControls
	.align	2, 0
	.globl	ArePlayerFieldControlsLocked
	.type	 ArePlayerFieldControlsLocked,function
	.thumb_func
ArePlayerFieldControlsLocked:
	ldr	r0, .L63
	ldrb	r0, [r0]
	bx	lr
.L64:
	.align	2, 0
.L63:
	.word	sLockFieldControls
.Lfe15:
	.size	 ArePlayerFieldControlsLocked,.Lfe15-ArePlayerFieldControlsLocked
	.align	2, 0
	.globl	SetQuestLogInputIsDpadFlag
	.type	 SetQuestLogInputIsDpadFlag,function
	.thumb_func
SetQuestLogInputIsDpadFlag:
	ldr	r1, .L66
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L67:
	.align	2, 0
.L66:
	.word	sQuestLogInputIsDpad
.Lfe16:
	.size	 SetQuestLogInputIsDpadFlag,.Lfe16-SetQuestLogInputIsDpadFlag
	.align	2, 0
	.globl	ClearQuestLogInputIsDpadFlag
	.type	 ClearQuestLogInputIsDpadFlag,function
	.thumb_func
ClearQuestLogInputIsDpadFlag:
	ldr	r1, .L69
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L70:
	.align	2, 0
.L69:
	.word	sQuestLogInputIsDpad
.Lfe17:
	.size	 ClearQuestLogInputIsDpadFlag,.Lfe17-ClearQuestLogInputIsDpadFlag
	.align	2, 0
	.globl	IsQuestLogInputDpad
	.type	 IsQuestLogInputDpad,function
	.thumb_func
IsQuestLogInputDpad:
	push	{lr}
	ldr	r0, .L75
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L72	@cond_branch
	mov	r0, #0x0
	b	.L74
.L76:
	.align	2, 0
.L75:
	.word	sQuestLogInputIsDpad
.L72:
	mov	r0, #0x1
.L74:
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 IsQuestLogInputDpad,.Lfe18-IsQuestLogInputDpad
	.align	2, 0
	.globl	RegisterQuestLogInput
	.type	 RegisterQuestLogInput,function
	.thumb_func
RegisterQuestLogInput:
	ldr	r1, .L78
	strb	r0, [r1]
	bx	lr
.L79:
	.align	2, 0
.L78:
	.word	sQuestLogInput
.Lfe19:
	.size	 RegisterQuestLogInput,.Lfe19-RegisterQuestLogInput
	.align	2, 0
	.globl	ClearQuestLogInput
	.type	 ClearQuestLogInput,function
	.thumb_func
ClearQuestLogInput:
	ldr	r1, .L81
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L82:
	.align	2, 0
.L81:
	.word	sQuestLogInput
.Lfe20:
	.size	 ClearQuestLogInput,.Lfe20-ClearQuestLogInput
	.align	2, 0
	.globl	GetRegisteredQuestLogInput
	.type	 GetRegisteredQuestLogInput,function
	.thumb_func
GetRegisteredQuestLogInput:
	ldr	r0, .L84
	ldrb	r0, [r0]
	bx	lr
.L85:
	.align	2, 0
.L84:
	.word	sQuestLogInput
.Lfe21:
	.size	 GetRegisteredQuestLogInput,.Lfe21-GetRegisteredQuestLogInput
	.align	2, 0
	.globl	DisableMsgBoxWalkaway
	.type	 DisableMsgBoxWalkaway,function
	.thumb_func
DisableMsgBoxWalkaway:
	ldr	r1, .L87
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L88:
	.align	2, 0
.L87:
	.word	sMsgBoxWalkawayDisabled
.Lfe22:
	.size	 DisableMsgBoxWalkaway,.Lfe22-DisableMsgBoxWalkaway
	.align	2, 0
	.globl	EnableMsgBoxWalkaway
	.type	 EnableMsgBoxWalkaway,function
	.thumb_func
EnableMsgBoxWalkaway:
	ldr	r1, .L90
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L91:
	.align	2, 0
.L90:
	.word	sMsgBoxWalkawayDisabled
.Lfe23:
	.size	 EnableMsgBoxWalkaway,.Lfe23-EnableMsgBoxWalkaway
	.align	2, 0
	.globl	IsMsgBoxWalkawayDisabled
	.type	 IsMsgBoxWalkawayDisabled,function
	.thumb_func
IsMsgBoxWalkawayDisabled:
	ldr	r0, .L93
	ldrb	r0, [r0]
	bx	lr
.L94:
	.align	2, 0
.L93:
	.word	sMsgBoxWalkawayDisabled
.Lfe24:
	.size	 IsMsgBoxWalkawayDisabled,.Lfe24-IsMsgBoxWalkawayDisabled
	.align	2, 0
	.globl	SetWalkingIntoSignVars
	.type	 SetWalkingIntoSignVars,function
	.thumb_func
SetWalkingIntoSignVars:
	ldr	r1, .L96
	mov	r0, #0x6
	strb	r0, [r1]
	ldr	r1, .L96+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L97:
	.align	2, 0
.L96:
	.word	gWalkAwayFromSignInhibitTimer
	.word	sMsgBoxIsCancelable
.Lfe25:
	.size	 SetWalkingIntoSignVars,.Lfe25-SetWalkingIntoSignVars
	.align	2, 0
	.globl	ClearMsgBoxCancelableState
	.type	 ClearMsgBoxCancelableState,function
	.thumb_func
ClearMsgBoxCancelableState:
	ldr	r1, .L99
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L100:
	.align	2, 0
.L99:
	.word	sMsgBoxIsCancelable
.Lfe26:
	.size	 ClearMsgBoxCancelableState,.Lfe26-ClearMsgBoxCancelableState
	.align	2, 0
	.globl	CanWalkAwayToCancelMsgBox
	.type	 CanWalkAwayToCancelMsgBox,function
	.thumb_func
CanWalkAwayToCancelMsgBox:
	push	{lr}
	ldr	r0, .L105
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L102	@cond_branch
	mov	r0, #0x0
	b	.L104
.L106:
	.align	2, 0
.L105:
	.word	sMsgBoxIsCancelable
.L102:
	mov	r0, #0x1
.L104:
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 CanWalkAwayToCancelMsgBox,.Lfe27-CanWalkAwayToCancelMsgBox
	.align	2, 0
	.globl	MsgSetSignpost
	.type	 MsgSetSignpost,function
	.thumb_func
MsgSetSignpost:
	ldr	r1, .L108
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L109:
	.align	2, 0
.L108:
	.word	sMsgIsSignpost
.Lfe28:
	.size	 MsgSetSignpost,.Lfe28-MsgSetSignpost
	.align	2, 0
	.globl	MsgSetNotSignpost
	.type	 MsgSetNotSignpost,function
	.thumb_func
MsgSetNotSignpost:
	ldr	r1, .L111
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L112:
	.align	2, 0
.L111:
	.word	sMsgIsSignpost
.Lfe29:
	.size	 MsgSetNotSignpost,.Lfe29-MsgSetNotSignpost
	.align	2, 0
	.globl	IsMsgSignpost
	.type	 IsMsgSignpost,function
	.thumb_func
IsMsgSignpost:
	push	{lr}
	ldr	r0, .L117
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L114	@cond_branch
	mov	r0, #0x0
	b	.L116
.L118:
	.align	2, 0
.L117:
	.word	sMsgIsSignpost
.L114:
	mov	r0, #0x1
.L116:
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 IsMsgSignpost,.Lfe30-IsMsgSignpost
	.align	2, 0
	.globl	ResetFacingNpcOrSignpostVars
	.type	 ResetFacingNpcOrSignpostVars,function
	.thumb_func
ResetFacingNpcOrSignpostVars:
	push	{lr}
	bl	ResetContextNpcTextColor
	bl	MsgSetNotSignpost
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 ResetFacingNpcOrSignpostVars,.Lfe31-ResetFacingNpcOrSignpostVars
	.align	2, 0
	.globl	ScriptContext_IsEnabled
	.type	 ScriptContext_IsEnabled,function
	.thumb_func
ScriptContext_IsEnabled:
	push	{lr}
	ldr	r0, .L124
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L121	@cond_branch
	mov	r0, #0x0
	b	.L123
.L125:
	.align	2, 0
.L124:
	.word	sGlobalScriptContextStatus
.L121:
	mov	r0, #0x1
.L123:
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 ScriptContext_IsEnabled,.Lfe32-ScriptContext_IsEnabled
	.align	2, 0
	.globl	ScriptContext_Init
	.type	 ScriptContext_Init,function
	.thumb_func
ScriptContext_Init:
	push	{lr}
	ldr	r0, .L127
	ldr	r1, .L127+0x4
	ldr	r2, .L127+0x8
	bl	InitScriptContext
	ldr	r1, .L127+0xc
	mov	r0, #0x2
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	sGlobalScriptContext
	.word	gScriptCmdTable
	.word	gScriptCmdTableEnd
	.word	sGlobalScriptContextStatus
.Lfe33:
	.size	 ScriptContext_Init,.Lfe33-ScriptContext_Init
	.align	2, 0
	.globl	ScriptContext_RunScript
	.type	 ScriptContext_RunScript,function
	.thumb_func
ScriptContext_RunScript:
	push	{r4, lr}
	ldr	r4, .L135
	ldrb	r0, [r4]
	cmp	r0, #0x2
	beq	.L134	@cond_branch
	cmp	r0, #0x1
	beq	.L134	@cond_branch
	bl	LockPlayerFieldControls
	ldr	r0, .L135+0x4
	bl	RunScriptCommand
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L132	@cond_branch
	mov	r0, #0x1
	b	.L133
.L136:
	.align	2, 0
.L135:
	.word	sGlobalScriptContextStatus
	.word	sGlobalScriptContext
.L132:
	mov	r0, #0x2
	strb	r0, [r4]
	bl	UnlockPlayerFieldControls
.L134:
	mov	r0, #0x0
.L133:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 ScriptContext_RunScript,.Lfe34-ScriptContext_RunScript
	.align	2, 0
	.globl	ScriptContext_SetupScript
	.type	 ScriptContext_SetupScript,function
	.thumb_func
ScriptContext_SetupScript:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ClearMsgBoxCancelableState
	bl	EnableMsgBoxWalkaway
	bl	ClearQuestLogInputIsDpadFlag
	ldr	r4, .L138
	ldr	r1, .L138+0x4
	ldr	r2, .L138+0x8
	add	r0, r4, #0
	bl	InitScriptContext
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SetupBytecodeScript
	bl	LockPlayerFieldControls
	ldr	r1, .L138+0xc
	mov	r0, #0x0
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L139:
	.align	2, 0
.L138:
	.word	sGlobalScriptContext
	.word	gScriptCmdTable
	.word	gScriptCmdTableEnd
	.word	sGlobalScriptContextStatus
.Lfe35:
	.size	 ScriptContext_SetupScript,.Lfe35-ScriptContext_SetupScript
	.align	2, 0
	.globl	ScriptContext_Stop
	.type	 ScriptContext_Stop,function
	.thumb_func
ScriptContext_Stop:
	ldr	r1, .L141
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L142:
	.align	2, 0
.L141:
	.word	sGlobalScriptContextStatus
.Lfe36:
	.size	 ScriptContext_Stop,.Lfe36-ScriptContext_Stop
	.align	2, 0
	.globl	ScriptContext_Enable
	.type	 ScriptContext_Enable,function
	.thumb_func
ScriptContext_Enable:
	push	{lr}
	ldr	r1, .L144
	mov	r0, #0x0
	strb	r0, [r1]
	bl	LockPlayerFieldControls
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	sGlobalScriptContextStatus
.Lfe37:
	.size	 ScriptContext_Enable,.Lfe37-ScriptContext_Enable
	.align	2, 0
	.globl	RunScriptImmediately
	.type	 RunScriptImmediately,function
	.thumb_func
RunScriptImmediately:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L151
	ldr	r1, .L151+0x4
	ldr	r2, .L151+0x8
	add	r0, r4, #0
	bl	InitScriptContext
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SetupBytecodeScript
.L147:
	ldr	r0, .L151
	bl	RunScriptCommand
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L147	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	sImmediateScriptContext
	.word	gScriptCmdTable
	.word	gScriptCmdTableEnd
.Lfe38:
	.size	 RunScriptImmediately,.Lfe38-RunScriptImmediately
	.align	2, 0
	.type	 MapHeaderGetScriptTable,function
	.thumb_func
MapHeaderGetScriptTable:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L163
	ldr	r2, [r0, #0x8]
	cmp	r2, #0
	beq	.L162	@cond_branch
.L157:
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L158	@cond_branch
.L162:
	mov	r0, #0x0
	b	.L161
.L164:
	.align	2, 0
.L163:
	.word	gMapHeader
.L158:
	cmp	r0, r1
	beq	.L159	@cond_branch
	add	r2, r2, #0x5
	b	.L157
.L159:
	add	r2, r2, #0x1
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	ldrb	r1, [r2, #0x2]
	lsl	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x18
	add	r0, r0, r1
.L161:
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 MapHeaderGetScriptTable,.Lfe39-MapHeaderGetScriptTable
	.align	2, 0
	.type	 MapHeaderRunScriptType,function
	.thumb_func
MapHeaderRunScriptType:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MapHeaderGetScriptTable
	cmp	r0, #0
	beq	.L166	@cond_branch
	bl	RunScriptImmediately
.L166:
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 MapHeaderRunScriptType,.Lfe40-MapHeaderRunScriptType
	.align	2, 0
	.type	 MapHeaderCheckScriptTable,function
	.thumb_func
MapHeaderCheckScriptTable:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MapHeaderGetScriptTable
	add	r6, r0, #0
	cmp	r6, #0
	beq	.L176	@cond_branch
.L171:
	ldrb	r1, [r6]
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r1, #0
	bne	.L172	@cond_branch
.L176:
	mov	r0, #0x0
	b	.L175
.L172:
	add	r6, r6, #0x2
	ldrb	r5, [r6]
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x8
	orr	r5, r5, r0
	add	r6, r6, #0x2
	add	r0, r1, #0
	bl	VarGet
	add	r4, r0, #0
	add	r0, r5, #0
	bl	VarGet
	lsl	r4, r4, #0x10
	lsl	r0, r0, #0x10
	cmp	r4, r0
	beq	.L173	@cond_branch
	add	r6, r6, #0x4
	b	.L171
.L173:
	ldrb	r0, [r6]
	ldrb	r1, [r6, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	ldrb	r1, [r6, #0x2]
	lsl	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r6, #0x3]
	lsl	r1, r1, #0x18
	add	r0, r0, r1
.L175:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 MapHeaderCheckScriptTable,.Lfe41-MapHeaderCheckScriptTable
	.align	2, 0
	.globl	RunOnLoadMapScript
	.type	 RunOnLoadMapScript,function
	.thumb_func
RunOnLoadMapScript:
	push	{lr}
	mov	r0, #0x1
	bl	MapHeaderRunScriptType
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 RunOnLoadMapScript,.Lfe42-RunOnLoadMapScript
	.align	2, 0
	.globl	RunOnTransitionMapScript
	.type	 RunOnTransitionMapScript,function
	.thumb_func
RunOnTransitionMapScript:
	push	{lr}
	mov	r0, #0x3
	bl	MapHeaderRunScriptType
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 RunOnTransitionMapScript,.Lfe43-RunOnTransitionMapScript
	.align	2, 0
	.globl	RunOnResumeMapScript
	.type	 RunOnResumeMapScript,function
	.thumb_func
RunOnResumeMapScript:
	push	{lr}
	mov	r0, #0x5
	bl	MapHeaderRunScriptType
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 RunOnResumeMapScript,.Lfe44-RunOnResumeMapScript
	.align	2, 0
	.globl	RunOnReturnToFieldMapScript
	.type	 RunOnReturnToFieldMapScript,function
	.thumb_func
RunOnReturnToFieldMapScript:
	push	{lr}
	mov	r0, #0x7
	bl	MapHeaderRunScriptType
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 RunOnReturnToFieldMapScript,.Lfe45-RunOnReturnToFieldMapScript
	.align	2, 0
	.globl	RunOnDiveWarpMapScript
	.type	 RunOnDiveWarpMapScript,function
	.thumb_func
RunOnDiveWarpMapScript:
	push	{lr}
	mov	r0, #0x6
	bl	MapHeaderRunScriptType
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 RunOnDiveWarpMapScript,.Lfe46-RunOnDiveWarpMapScript
	.align	2, 0
	.globl	TryRunOnFrameMapScript
	.type	 TryRunOnFrameMapScript,function
	.thumb_func
TryRunOnFrameMapScript:
	push	{lr}
	ldr	r0, .L186
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L184	@cond_branch
	mov	r0, #0x2
	bl	MapHeaderCheckScriptTable
	cmp	r0, #0
	beq	.L184	@cond_branch
	bl	ScriptContext_SetupScript
	mov	r0, #0x1
	b	.L185
.L187:
	.align	2, 0
.L186:
	.word	gQuestLogState
.L184:
	mov	r0, #0x0
.L185:
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 TryRunOnFrameMapScript,.Lfe47-TryRunOnFrameMapScript
	.align	2, 0
	.globl	TryRunOnWarpIntoMapScript
	.type	 TryRunOnWarpIntoMapScript,function
	.thumb_func
TryRunOnWarpIntoMapScript:
	push	{lr}
	mov	r0, #0x4
	bl	MapHeaderCheckScriptTable
	cmp	r0, #0
	beq	.L189	@cond_branch
	bl	RunScriptImmediately
.L189:
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 TryRunOnWarpIntoMapScript,.Lfe48-TryRunOnWarpIntoMapScript
	.align	2, 0
	.globl	CalculateRamScriptChecksum
	.type	 CalculateRamScriptChecksum,function
	.thumb_func
CalculateRamScriptChecksum:
	push	{lr}
	ldr	r0, .L191
	ldr	r0, [r0]
	ldr	r1, .L191+0x4
	add	r0, r0, r1
	mov	r1, #0xfa
	lsl	r1, r1, #0x2
	bl	CalcCRC16WithTable
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L192:
	.align	2, 0
.L191:
	.word	gSaveBlock1Ptr
	.word	0x3634
.Lfe49:
	.size	 CalculateRamScriptChecksum,.Lfe49-CalculateRamScriptChecksum
	.align	2, 0
	.globl	ClearRamScript
	.type	 ClearRamScript,function
	.thumb_func
ClearRamScript:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L194
	ldr	r1, [r0]
	ldr	r0, .L194+0x4
	add	r1, r1, r0
	ldr	r2, .L194+0x8
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	gSaveBlock1Ptr
	.word	0x3630
	.word	0x50000fb
.Lfe50:
	.size	 ClearRamScript,.Lfe50-ClearRamScript
	.align	2, 0
	.globl	InitRamScript
	.type	 InitRamScript,function
	.thumb_func
InitRamScript:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	str	r0, [sp]
	ldr	r0, [sp, #0x24]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L199
	mov	sl, r0
	ldr	r5, [r0]
	ldr	r1, .L199+0x4
	add	r4, r5, r1
	bl	ClearRamScript
	ldr	r0, .L199+0x8
	cmp	r8, r0
	bhi	.L197	@cond_branch
	mov	r0, #0x33
	strb	r0, [r4]
	mov	r2, r9
	strb	r2, [r4, #0x1]
	strb	r7, [r4, #0x2]
	strb	r6, [r4, #0x3]
	ldr	r1, .L199+0xc
	add	r0, r5, r1
	ldr	r1, [sp]
	mov	r2, r8
	bl	memcpy
	bl	CalculateRamScriptChecksum
	mov	r2, sl
	ldr	r1, [r2]
	ldr	r2, .L199+0x10
	add	r1, r1, r2
	str	r0, [r1]
	mov	r0, #0x1
	b	.L198
.L200:
	.align	2, 0
.L199:
	.word	gSaveBlock1Ptr
	.word	0x3634
	.word	0x3e3
	.word	0x3638
	.word	0x3630
.L197:
	mov	r0, #0x0
.L198:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe51:
	.size	 InitRamScript,.Lfe51-InitRamScript
	.align	2, 0
	.globl	GetRamScript
	.type	 GetRamScript,function
	.thumb_func
GetRamScript:
	push	{r4, r5, r6, r7, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r6, .L210
	ldr	r5, [r6]
	ldr	r0, .L210+0x4
	add	r2, r5, r0
	ldr	r7, .L210+0x8
	mov	r0, #0x0
	str	r0, [r7]
	ldrb	r0, [r2]
	cmp	r0, #0x33
	bne	.L209	@cond_branch
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x4
	ldrsb	r0, [r5, r0]
	cmp	r1, r0
	bne	.L209	@cond_branch
	ldrb	r1, [r2, #0x2]
	mov	r0, #0x5
	ldrsb	r0, [r5, r0]
	cmp	r1, r0
	bne	.L209	@cond_branch
	ldrb	r0, [r2, #0x3]
	cmp	r0, r3
	bne	.L209	@cond_branch
	bl	CalculateRamScriptChecksum
	ldr	r1, [r6]
	ldr	r2, .L210+0xc
	add	r1, r1, r2
	ldr	r1, [r1]
	cmp	r0, r1
	bne	.L206	@cond_branch
	str	r4, [r7]
	ldr	r1, .L210+0x10
	add	r0, r5, r1
	b	.L208
.L211:
	.align	2, 0
.L210:
	.word	gSaveBlock1Ptr
	.word	0x3634
	.word	gRamScriptRetAddr
	.word	0x3630
	.word	0x3638
.L206:
	bl	ClearRamScript
.L209:
	add	r0, r4, #0
.L208:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 GetRamScript,.Lfe52-GetRamScript
	.align	2, 0
	.globl	ValidateRamScript
	.type	 ValidateRamScript,function
	.thumb_func
ValidateRamScript:
	push	{r4, lr}
	ldr	r4, .L219
	ldr	r0, [r4]
	ldr	r2, .L219+0x4
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0x33
	bne	.L217	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0xff
	bne	.L217	@cond_branch
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xff
	bne	.L217	@cond_branch
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0xff
	bne	.L217	@cond_branch
	bl	CalculateRamScriptChecksum
	ldr	r1, [r4]
	ldr	r2, .L219+0x8
	add	r1, r1, r2
	ldr	r1, [r1]
	cmp	r0, r1
	bne	.L217	@cond_branch
	mov	r0, #0x1
	b	.L218
.L220:
	.align	2, 0
.L219:
	.word	gSaveBlock1Ptr
	.word	0x3634
	.word	0x3630
.L217:
	mov	r0, #0x0
.L218:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 ValidateRamScript,.Lfe53-ValidateRamScript
	.align	2, 0
	.globl	GetSavedRamScriptIfValid
	.type	 GetSavedRamScriptIfValid,function
	.thumb_func
GetSavedRamScriptIfValid:
	push	{r4, r5, r6, lr}
	ldr	r6, .L231
	ldr	r5, [r6]
	ldr	r0, .L231+0x4
	add	r4, r5, r0
	bl	ValidateSavedWonderCard
	cmp	r0, #0
	beq	.L230	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0x33
	bne	.L230	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0xff
	bne	.L230	@cond_branch
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0xff
	bne	.L230	@cond_branch
	ldrb	r0, [r4, #0x3]
	cmp	r0, #0xff
	bne	.L230	@cond_branch
	bl	CalculateRamScriptChecksum
	ldr	r1, [r6]
	ldr	r2, .L231+0x8
	add	r1, r1, r2
	ldr	r1, [r1]
	cmp	r0, r1
	bne	.L227	@cond_branch
	ldr	r1, .L231+0xc
	add	r0, r5, r1
	b	.L229
.L232:
	.align	2, 0
.L231:
	.word	gSaveBlock1Ptr
	.word	0x3634
	.word	0x3630
	.word	0x3638
.L227:
	bl	ClearRamScript
.L230:
	mov	r0, #0x0
.L229:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe54:
	.size	 GetSavedRamScriptIfValid,.Lfe54-GetSavedRamScriptIfValid
	.align	2, 0
	.globl	InitRamScript_NoObjectEvent
	.type	 InitRamScript_NoObjectEvent,function
	.thumb_func
InitRamScript_NoObjectEvent:
	push	{lr}
	add	sp, sp, #-0x4
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L235
	cmp	r1, r0
	bls	.L234	@cond_branch
	add	r1, r0, #0
.L234:
	mov	r0, #0xff
	str	r0, [sp]
	add	r0, r2, #0
	mov	r2, #0xff
	mov	r3, #0xff
	bl	InitRamScript
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L236:
	.align	2, 0
.L235:
	.word	0x3e3
.Lfe55:
	.size	 InitRamScript_NoObjectEvent,.Lfe55-InitRamScript_NoObjectEvent

	.lcomm	sGlobalScriptContextStatus,1

	.lcomm	sUnusedVariable1,4

	.lcomm	sGlobalScriptContext,116

	.lcomm	sUnusedVariable2,4

	.lcomm	sImmediateScriptContext,116

	.lcomm	sLockFieldControls,1

	.lcomm	sMsgBoxWalkawayDisabled,1

	.lcomm	sMsgBoxIsCancelable,1

	.lcomm	sQuestLogInput,1

	.lcomm	sQuestLogInputIsDpad,1

	.lcomm	sMsgIsSignpost,1
.text
	.align	2, 0 @ Don't pad with nop

