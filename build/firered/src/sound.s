@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gMPlay_PokemonCry
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gMPlay_PokemonCry,object
	.size	 gMPlay_PokemonCry,4
gMPlay_PokemonCry:
	.word	0x0
	.globl	gPokemonCryBGMDuckingCounter
	.type	 gPokemonCryBGMDuckingCounter,object
	.size	 gPokemonCryBGMDuckingCounter,1
gPokemonCryBGMDuckingCounter:
	.byte	0x0
	.section .rodata
	.align	2, 0
	.type	 sFanfares,object
sFanfares:
	.short	0x101
	.short	0x50
	.short	0x102
	.short	0xa0
	.short	0x103
	.short	0xdc
	.short	0x105
	.short	0xdc
	.short	0x100
	.short	0xa0
	.short	0x104
	.short	0x154
	.short	0x10e
	.short	0xb4
	.short	0x106
	.short	0x78
	.short	0x10c
	.short	0xfa
	.short	0x10d
	.short	0x96
	.short	0x10f
	.short	0xa0
	.short	0x152
	.short	0x1c2
	.short	0x13e
	.short	0xaa
	.short	0x13d
	.short	0xc4
	.size	 sFanfares,56
.text
	.align	2, 0
	.globl	InitMapMusic
	.type	 InitMapMusic,function
	.thumb_func
InitMapMusic:
	push	{lr}
	ldr	r1, .L5
	mov	r0, #0x0
	strb	r0, [r1]
	bl	ResetMapMusic
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	gDisableMusic
.Lfe1:
	.size	 InitMapMusic,.Lfe1-InitMapMusic
	.align	2, 0
	.globl	MapMusicMain
	.type	 MapMusicMain,function
	.thumb_func
MapMusicMain:
	push	{r4, r5, lr}
	ldr	r0, .L22
	ldrb	r1, [r0]
	add	r2, r0, #0
	cmp	r1, #0x7
	bhi	.L8	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L22+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L23:
	.align	2, 0
.L22:
	.word	sMapMusicState
	.word	.L20
	.align	2, 0
	.align	2, 0
.L20:
	.word	.L8
	.word	.L10
	.word	.L8
	.word	.L8
	.word	.L8
	.word	.L14
	.word	.L16
	.word	.L18
.L10:
	mov	r0, #0x2
	strb	r0, [r2]
	ldr	r0, .L24
	ldrh	r0, [r0]
	bl	PlayBGM
	b	.L8
.L25:
	.align	2, 0
.L24:
	.word	sCurrentMapMusic
.L14:
	bl	IsBGMStopped
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L8	@cond_branch
	ldr	r0, .L26
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L26+0x4
	strb	r1, [r0]
	b	.L8
.L27:
	.align	2, 0
.L26:
	.word	sNextMapMusic
	.word	sMapMusicState
.L16:
	bl	IsBGMStopped
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L8	@cond_branch
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L8	@cond_branch
	ldr	r2, .L28
	ldr	r1, .L28+0x4
	ldrh	r0, [r1]
	strh	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L28+0x8
	mov	r0, #0x2
	strb	r0, [r1]
	ldrh	r0, [r2]
	bl	PlayBGM
	b	.L8
.L29:
	.align	2, 0
.L28:
	.word	sCurrentMapMusic
	.word	sNextMapMusic
	.word	sMapMusicState
.L18:
	bl	IsBGMStopped
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L8	@cond_branch
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L8	@cond_branch
	ldr	r4, .L30
	ldrh	r0, [r4]
	ldr	r5, .L30+0x4
	ldrb	r1, [r5]
	bl	FadeInNewBGM
	ldr	r1, .L30+0x8
	ldrh	r0, [r4]
	strh	r0, [r1]
	mov	r2, #0x0
	strh	r2, [r4]
	ldr	r1, .L30+0xc
	mov	r0, #0x2
	strb	r0, [r1]
	strb	r2, [r5]
.L8:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	sNextMapMusic
	.word	sMapMusicFadeInSpeed
	.word	sCurrentMapMusic
	.word	sMapMusicState
.Lfe2:
	.size	 MapMusicMain,.Lfe2-MapMusicMain
	.align	2, 0
	.globl	ResetMapMusic
	.type	 ResetMapMusic,function
	.thumb_func
ResetMapMusic:
	ldr	r0, .L33
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L33+0x4
	strh	r1, [r0]
	ldr	r0, .L33+0x8
	strb	r1, [r0]
	ldr	r0, .L33+0xc
	strb	r1, [r0]
	bx	lr
.L34:
	.align	2, 0
.L33:
	.word	sCurrentMapMusic
	.word	sNextMapMusic
	.word	sMapMusicState
	.word	sMapMusicFadeInSpeed
.Lfe3:
	.size	 ResetMapMusic,.Lfe3-ResetMapMusic
	.align	2, 0
	.globl	GetCurrentMapMusic
	.type	 GetCurrentMapMusic,function
	.thumb_func
GetCurrentMapMusic:
	ldr	r0, .L36
	ldrh	r0, [r0]
	bx	lr
.L37:
	.align	2, 0
.L36:
	.word	sCurrentMapMusic
.Lfe4:
	.size	 GetCurrentMapMusic,.Lfe4-GetCurrentMapMusic
	.align	2, 0
	.globl	PlayNewMapMusic
	.type	 PlayNewMapMusic,function
	.thumb_func
PlayNewMapMusic:
	ldr	r1, .L39
	strh	r0, [r1]
	ldr	r1, .L39+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L39+0x8
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L40:
	.align	2, 0
.L39:
	.word	sCurrentMapMusic
	.word	sNextMapMusic
	.word	sMapMusicState
.Lfe5:
	.size	 PlayNewMapMusic,.Lfe5-PlayNewMapMusic
	.align	2, 0
	.globl	StopMapMusic
	.type	 StopMapMusic,function
	.thumb_func
StopMapMusic:
	ldr	r0, .L42
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L42+0x4
	strh	r1, [r0]
	ldr	r1, .L42+0x8
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L43:
	.align	2, 0
.L42:
	.word	sCurrentMapMusic
	.word	sNextMapMusic
	.word	sMapMusicState
.Lfe6:
	.size	 StopMapMusic,.Lfe6-StopMapMusic
	.align	2, 0
	.globl	FadeOutMapMusic
	.type	 FadeOutMapMusic,function
	.thumb_func
FadeOutMapMusic:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsNotWaitingForBGMStop
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L45	@cond_branch
	add	r0, r4, #0
	bl	FadeOutBGM
.L45:
	ldr	r0, .L46
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L46+0x4
	strh	r1, [r0]
	ldr	r1, .L46+0x8
	mov	r0, #0x5
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	sCurrentMapMusic
	.word	sNextMapMusic
	.word	sMapMusicState
.Lfe7:
	.size	 FadeOutMapMusic,.Lfe7-FadeOutMapMusic
	.align	2, 0
	.globl	FadeOutAndPlayNewMapMusic
	.type	 FadeOutAndPlayNewMapMusic,function
	.thumb_func
FadeOutAndPlayNewMapMusic:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	FadeOutMapMusic
	ldr	r1, .L49
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L49+0x4
	strh	r4, [r0]
	ldr	r1, .L49+0x8
	mov	r0, #0x6
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	sCurrentMapMusic
	.word	sNextMapMusic
	.word	sMapMusicState
.Lfe8:
	.size	 FadeOutAndPlayNewMapMusic,.Lfe8-FadeOutAndPlayNewMapMusic
	.align	2, 0
	.globl	FadeOutAndFadeInNewMapMusic
	.type	 FadeOutAndFadeInNewMapMusic,function
	.thumb_func
FadeOutAndFadeInNewMapMusic:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	bl	FadeOutMapMusic
	ldr	r1, .L52
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L52+0x4
	strh	r4, [r0]
	ldr	r1, .L52+0x8
	mov	r0, #0x7
	strb	r0, [r1]
	ldr	r0, .L52+0xc
	strb	r5, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	sCurrentMapMusic
	.word	sNextMapMusic
	.word	sMapMusicState
	.word	sMapMusicFadeInSpeed
.Lfe9:
	.size	 FadeOutAndFadeInNewMapMusic,.Lfe9-FadeOutAndFadeInNewMapMusic
	.align	2, 0
	.type	 FadeInNewMapMusic,function
	.thumb_func
FadeInNewMapMusic:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	FadeInNewBGM
	ldr	r0, .L55
	strh	r4, [r0]
	ldr	r0, .L55+0x4
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L55+0x8
	mov	r0, #0x2
	strb	r0, [r1]
	ldr	r0, .L55+0xc
	strb	r2, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	sCurrentMapMusic
	.word	sNextMapMusic
	.word	sMapMusicState
	.word	sMapMusicFadeInSpeed
.Lfe10:
	.size	 FadeInNewMapMusic,.Lfe10-FadeInNewMapMusic
	.align	2, 0
	.globl	IsNotWaitingForBGMStop
	.type	 IsNotWaitingForBGMStop,function
	.thumb_func
IsNotWaitingForBGMStop:
	push	{lr}
	ldr	r0, .L62
	ldrb	r0, [r0]
	cmp	r0, #0x6
	beq	.L60	@cond_branch
	cmp	r0, #0x5
	beq	.L60	@cond_branch
	cmp	r0, #0x7
	beq	.L60	@cond_branch
	mov	r0, #0x1
	b	.L61
.L63:
	.align	2, 0
.L62:
	.word	sMapMusicState
.L60:
	mov	r0, #0x0
.L61:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 IsNotWaitingForBGMStop,.Lfe11-IsNotWaitingForBGMStop
	.align	2, 0
	.globl	PlayFanfareByFanfareNum
	.type	 PlayFanfareByFanfareNum,function
	.thumb_func
PlayFanfareByFanfareNum:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L67
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L65	@cond_branch
	ldr	r1, .L67+0x4
	mov	r0, #0xff
	strh	r0, [r1]
	b	.L66
.L68:
	.align	2, 0
.L67:
	.word	gQuestLogState
	.word	sFanfareCounter
.L65:
	ldr	r0, .L69
	bl	m4aMPlayStop
	ldr	r0, .L69+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r2, .L69+0x8
	ldrh	r1, [r1, #0x2]
	strh	r1, [r2]
	bl	m4aSongNumStart
.L66:
	pop	{r4}
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gMPlayInfo_BGM
	.word	sFanfares
	.word	sFanfareCounter
.Lfe12:
	.size	 PlayFanfareByFanfareNum,.Lfe12-PlayFanfareByFanfareNum
	.align	2, 0
	.globl	WaitFanfare
	.type	 WaitFanfare,function
	.thumb_func
WaitFanfare:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r2, .L77
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L72	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r2]
	mov	r0, #0x0
	b	.L76
.L78:
	.align	2, 0
.L77:
	.word	sFanfareCounter
.L72:
	cmp	r1, #0
	bne	.L74	@cond_branch
	ldr	r0, .L79
	bl	m4aMPlayContinue
	b	.L75
.L80:
	.align	2, 0
.L79:
	.word	gMPlayInfo_BGM
.L74:
	mov	r0, #0x0
	bl	m4aSongNumStart
.L75:
	mov	r0, #0x1
.L76:
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 WaitFanfare,.Lfe13-WaitFanfare
	.align	2, 0
	.globl	StopFanfareByFanfareNum
	.type	 StopFanfareByFanfareNum,function
	.thumb_func
StopFanfareByFanfareNum:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L82
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	m4aSongNumStop
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	sFanfares
.Lfe14:
	.size	 StopFanfareByFanfareNum,.Lfe14-StopFanfareByFanfareNum
	.align	2, 0
	.globl	PlayFanfare
	.type	 PlayFanfare,function
	.thumb_func
PlayFanfare:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r1, #0x0
	ldr	r2, .L91
.L88:
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.L87	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	PlayFanfareByFanfareNum
	bl	CreateFanfareTask
	b	.L84
.L92:
	.align	2, 0
.L91:
	.word	sFanfares
.L87:
	add	r2, r2, #0x4
	add	r1, r1, #0x1
	cmp	r1, #0xd
	bls	.L88	@cond_branch
	mov	r0, #0x0
	bl	PlayFanfareByFanfareNum
	bl	CreateFanfareTask
.L84:
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 PlayFanfare,.Lfe15-PlayFanfare
	.align	2, 0
	.globl	IsFanfareTaskInactive
	.type	 IsFanfareTaskInactive,function
	.thumb_func
IsFanfareTaskInactive:
	push	{lr}
	ldr	r0, .L96
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L94	@cond_branch
	mov	r0, #0x1
	b	.L95
.L97:
	.align	2, 0
.L96:
	.word	Task_Fanfare
.L94:
	mov	r0, #0x0
.L95:
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 IsFanfareTaskInactive,.Lfe16-IsFanfareTaskInactive
	.align	2, 0
	.type	 Task_Fanfare,function
	.thumb_func
Task_Fanfare:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L101
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L99	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r1]
	b	.L100
.L102:
	.align	2, 0
.L101:
	.word	sFanfareCounter
.L99:
	ldr	r0, .L103
	bl	m4aMPlayContinue
	add	r0, r4, #0
	bl	DestroyTask
.L100:
	pop	{r4}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	gMPlayInfo_BGM
.Lfe17:
	.size	 Task_Fanfare,.Lfe17-Task_Fanfare
	.align	2, 0
	.type	 CreateFanfareTask,function
	.thumb_func
CreateFanfareTask:
	push	{r4, lr}
	ldr	r4, .L107
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L106	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x50
	bl	CreateTask
.L106:
	pop	{r4}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	Task_Fanfare
.Lfe18:
	.size	 CreateFanfareTask,.Lfe18-CreateFanfareTask
	.align	2, 0
	.globl	FadeInNewBGM
	.type	 FadeInNewBGM,function
	.thumb_func
FadeInNewBGM:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r0, .L112
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L110	@cond_branch
	mov	r5, #0x0
.L110:
	ldr	r6, .L112+0x4
	cmp	r5, r6
	bne	.L111	@cond_branch
	mov	r5, #0x0
.L111:
	add	r0, r5, #0
	bl	m4aSongNumStart
	ldr	r4, .L112+0x8
	add	r0, r4, #0
	bl	m4aMPlayImmInit
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	m4aMPlayVolumeControl
	add	r0, r5, #0
	bl	m4aSongNumStop
	add	r0, r4, #0
	add	r1, r7, #0
	bl	m4aMPlayFadeIn
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gDisableMusic
	.word	0xffff
	.word	gMPlayInfo_BGM
.Lfe19:
	.size	 FadeInNewBGM,.Lfe19-FadeInNewBGM
	.align	2, 0
	.globl	FadeOutBGMTemporarily
	.type	 FadeOutBGMTemporarily,function
	.thumb_func
FadeOutBGMTemporarily:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L115
	bl	m4aMPlayFadeOutTemporarily
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	gMPlayInfo_BGM
.Lfe20:
	.size	 FadeOutBGMTemporarily,.Lfe20-FadeOutBGMTemporarily
	.align	2, 0
	.globl	IsBGMPausedOrStopped
	.type	 IsBGMPausedOrStopped,function
	.thumb_func
IsBGMPausedOrStopped:
	push	{lr}
	ldr	r0, .L121
	ldr	r1, [r0, #0x4]
	cmp	r1, #0
	blt	.L119	@cond_branch
	ldr	r0, .L121+0x4
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L119	@cond_branch
	mov	r0, #0x0
	b	.L120
.L122:
	.align	2, 0
.L121:
	.word	gMPlayInfo_BGM
	.word	0xffff
.L119:
	mov	r0, #0x1
.L120:
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 IsBGMPausedOrStopped,.Lfe21-IsBGMPausedOrStopped
	.align	2, 0
	.globl	FadeInBGM
	.type	 FadeInBGM,function
	.thumb_func
FadeInBGM:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L124
	bl	m4aMPlayFadeIn
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	gMPlayInfo_BGM
.Lfe22:
	.size	 FadeInBGM,.Lfe22-FadeInBGM
	.align	2, 0
	.globl	FadeOutBGM
	.type	 FadeOutBGM,function
	.thumb_func
FadeOutBGM:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L127
	bl	m4aMPlayFadeOut
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	gMPlayInfo_BGM
.Lfe23:
	.size	 FadeOutBGM,.Lfe23-FadeOutBGM
	.align	2, 0
	.globl	IsBGMStopped
	.type	 IsBGMStopped,function
	.thumb_func
IsBGMStopped:
	push	{lr}
	ldr	r0, .L132
	ldrh	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L130	@cond_branch
	mov	r0, #0x0
	b	.L131
.L133:
	.align	2, 0
.L132:
	.word	gMPlayInfo_BGM
.L130:
	mov	r0, #0x1
.L131:
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 IsBGMStopped,.Lfe24-IsBGMStopped
	.align	2, 0
	.globl	PlayCry_Normal
	.type	 PlayCry_Normal,function
	.thumb_func
PlayCry_Normal:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r4, r1, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L135
	ldr	r1, .L135+0x4
	mov	r2, #0x55
	bl	m4aMPlayVolumeControl
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x78
	mov	r3, #0xa
	bl	PlayCryInternal
	ldr	r1, .L135+0x8
	mov	r0, #0x2
	strb	r0, [r1]
	bl	RestoreBGMVolumeAfterPokemonCry
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gPokemonCryBGMDuckingCounter
.Lfe25:
	.size	 PlayCry_Normal,.Lfe25-PlayCry_Normal
	.align	2, 0
	.globl	PlayCry_NormalNoDucking
	.type	 PlayCry_NormalNoDucking,function
	.thumb_func
PlayCry_NormalNoDucking:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	asr	r2, r2, #0x18
	mov	r4, #0x0
	str	r4, [sp]
	bl	PlayCryInternal
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 PlayCry_NormalNoDucking,.Lfe26-PlayCry_NormalNoDucking
	.align	2, 0
	.globl	PlayCry_ByMode
	.type	 PlayCry_ByMode,function
	.thumb_func
PlayCry_ByMode:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	cmp	r4, #0x1
	bne	.L139	@cond_branch
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	str	r4, [sp]
	add	r0, r6, #0
	mov	r2, #0x78
	mov	r3, #0xa
	bl	PlayCryInternal
	b	.L140
.L139:
	ldr	r0, .L141
	ldr	r1, .L141+0x4
	mov	r2, #0x55
	bl	m4aMPlayVolumeControl
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	str	r4, [sp]
	add	r0, r6, #0
	mov	r2, #0x78
	mov	r3, #0xa
	bl	PlayCryInternal
	ldr	r1, .L141+0x8
	mov	r0, #0x2
	strb	r0, [r1]
	bl	RestoreBGMVolumeAfterPokemonCry
.L140:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gPokemonCryBGMDuckingCounter
.Lfe27:
	.size	 PlayCry_ByMode,.Lfe27-PlayCry_ByMode
	.align	2, 0
	.globl	PlayCry_ReleaseDouble
	.type	 PlayCry_ReleaseDouble,function
	.thumb_func
PlayCry_ReleaseDouble:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r4, r2, #0
	cmp	r2, #0x1
	bne	.L144	@cond_branch
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	str	r2, [sp]
	mov	r2, #0x78
	mov	r3, #0xa
	bl	PlayCryInternal
	b	.L145
.L144:
	ldr	r0, .L147
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L146	@cond_branch
	ldr	r0, .L147+0x4
	ldr	r1, .L147+0x8
	mov	r2, #0x55
	bl	m4aMPlayVolumeControl
.L146:
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	str	r4, [sp]
	add	r0, r6, #0
	mov	r2, #0x78
	mov	r3, #0xa
	bl	PlayCryInternal
.L145:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	gBattleTypeFlags
	.word	gMPlayInfo_BGM
	.word	0xffff
.Lfe28:
	.size	 PlayCry_ReleaseDouble,.Lfe28-PlayCry_ReleaseDouble
	.align	2, 0
	.globl	PlayCry_Script
	.type	 PlayCry_Script,function
	.thumb_func
PlayCry_Script:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r0, .L151
	ldrb	r0, [r0]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L150	@cond_branch
	ldr	r0, .L151+0x4
	ldr	r1, .L151+0x8
	mov	r2, #0x55
	bl	m4aMPlayVolumeControl
	str	r4, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x78
	mov	r3, #0xa
	bl	PlayCryInternal
.L150:
	ldr	r1, .L151+0xc
	mov	r0, #0x2
	strb	r0, [r1]
	bl	RestoreBGMVolumeAfterPokemonCry
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	gQuestLogState
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gPokemonCryBGMDuckingCounter
.Lfe29:
	.size	 PlayCry_Script,.Lfe29-PlayCry_Script
	.align	2, 0
	.globl	PlayCryInternal
	.type	 PlayCryInternal,function
	.thumb_func
PlayCryInternal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x24]
	lsl	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp]
	lsl	r4, r4, #0x18
	lsr	r1, r4, #0x18
	ldr	r3, .L192
	add	r0, r0, r3
	lsr	r7, r0, #0x10
	mov	r6, #0x8c
	mov	r0, #0x0
	mov	r9, r0
	mov	r5, #0x0
	mov	r4, #0xf0
	lsl	r4, r4, #0x6
	mov	r8, r5
	cmp	r1, #0xc
	bhi	.L154	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L192+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L193:
	.align	2, 0
.L192:
	.word	-0x10000
	.word	.L168
	.align	2, 0
	.align	2, 0
.L168:
	.word	.L154
	.word	.L156
	.word	.L157
	.word	.L158
	.word	.L159
	.word	.L160
	.word	.L161
	.word	.L162
	.word	.L163
	.word	.L164
	.word	.L165
	.word	.L167
	.word	.L166
.L156:
	mov	r6, #0x14
	mov	r5, #0xe1
	b	.L154
.L157:
	mov	r5, #0xe1
	ldr	r4, .L194
	mov	r1, #0x14
	b	.L186
.L195:
	.align	2, 0
.L194:
	.word	0x3cf0
.L158:
	mov	r6, #0x32
	mov	r5, #0xc8
	ldr	r4, .L196
	mov	r3, #0x14
	b	.L187
.L197:
	.align	2, 0
.L196:
	.word	0x3db8
.L159:
	mov	r6, #0x19
	mov	r0, #0x1
	mov	r9, r0
	mov	r5, #0x64
	ldr	r4, .L198
	mov	r1, #0xc0
.L186:
	mov	r8, r1
	mov	r2, #0x5a
	b	.L154
.L199:
	.align	2, 0
.L198:
	.word	0x3cf0
.L160:
	mov	r5, #0xc8
	ldr	r4, .L200
	b	.L154
.L201:
	.align	2, 0
.L200:
	.word	0x3868
.L161:
	mov	r5, #0xdc
	ldr	r4, .L202
	mov	r3, #0xc0
.L187:
	mov	r8, r3
	mov	r2, #0x5a
	b	.L154
.L203:
	.align	2, 0
.L202:
	.word	0x3cc3
.L162:
	mov	r6, #0xa
	mov	r5, #0x64
	mov	r4, #0xe8
	lsl	r4, r4, #0x6
	b	.L154
.L163:
	mov	r6, #0x3c
	mov	r5, #0xe1
	mov	r4, #0xf4
	lsl	r4, r4, #0x6
	b	.L154
.L164:
	mov	r6, #0xf
	mov	r0, #0x1
	mov	r9, r0
	mov	r5, #0x7d
	ldr	r4, .L204
	b	.L154
.L205:
	.align	2, 0
.L204:
	.word	0x3b60
.L165:
	mov	r6, #0x64
	mov	r5, #0xe1
	ldr	r4, .L206
	b	.L154
.L207:
	.align	2, 0
.L206:
	.word	0x3b60
.L166:
	mov	r6, #0x14
	mov	r5, #0xe1
.L167:
	ldr	r4, .L208
.L154:
	add	r0, r2, #0
	bl	SetPokemonCryVolume
	mov	r1, sl
	lsl	r0, r1, #0x18
	asr	r0, r0, #0x18
	bl	SetPokemonCryPanpot
	add	r0, r4, #0
	bl	SetPokemonCryPitch
	add	r0, r6, #0
	bl	SetPokemonCryLength
	mov	r0, #0x0
	bl	SetPokemonCryProgress
	add	r0, r5, #0
	bl	SetPokemonCryRelease
	mov	r3, r8
	lsl	r0, r3, #0x18
	asr	r0, r0, #0x18
	bl	SetPokemonCryChorus
	ldr	r0, [sp]
	bl	SetPokemonCryPriority
	add	r0, r7, #0
	bl	SpeciesToCryId
	add	r7, r0, #0
	mov	r1, #0x7f
	and	r1, r1, r7
	lsr	r0, r7, #0x7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	cmp	r0, #0x1
	beq	.L174	@cond_branch
	cmp	r0, #0x1
	bgt	.L185	@cond_branch
	cmp	r0, #0
	beq	.L171	@cond_branch
	b	.L170
.L209:
	.align	2, 0
.L208:
	.word	0x3a98
.L185:
	cmp	r2, #0x2
	beq	.L177	@cond_branch
	cmp	r2, #0x3
	beq	.L180	@cond_branch
	b	.L170
.L171:
	mov	r0, r9
	cmp	r0, #0
	beq	.L172	@cond_branch
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L210
	b	.L189
.L211:
	.align	2, 0
.L210:
	.word	gCryTable_Reverse
.L172:
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L212
	b	.L189
.L213:
	.align	2, 0
.L212:
	.word	gCryTable
.L174:
	mov	r3, r9
	cmp	r3, #0
	beq	.L175	@cond_branch
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L214
	b	.L189
.L215:
	.align	2, 0
.L214:
	.word	gCryTable_Reverse+0x600
.L175:
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L216
	b	.L189
.L217:
	.align	2, 0
.L216:
	.word	gCryTable+0x600
.L177:
	mov	r0, r9
	cmp	r0, #0
	beq	.L178	@cond_branch
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L218
	b	.L189
.L219:
	.align	2, 0
.L218:
	.word	gCryTable_Reverse+0xc00
.L178:
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L220
	b	.L189
.L221:
	.align	2, 0
.L220:
	.word	gCryTable+0xc00
.L180:
	mov	r3, r9
	cmp	r3, #0
	beq	.L181	@cond_branch
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L222
	b	.L189
.L223:
	.align	2, 0
.L222:
	.word	gCryTable_Reverse+0x1200
.L181:
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L224
.L189:
	add	r0, r0, r1
	bl	SetPokemonCryTone
	ldr	r1, .L224+0x4
	str	r0, [r1]
.L170:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L225:
	.align	2, 0
.L224:
	.word	gCryTable+0x1200
	.word	gMPlay_PokemonCry
.Lfe30:
	.size	 PlayCryInternal,.Lfe30-PlayCryInternal
	.align	2, 0
	.globl	IsCryFinished
	.type	 IsCryFinished,function
	.thumb_func
IsCryFinished:
	push	{lr}
	ldr	r0, .L230
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L227	@cond_branch
	bl	ClearPokemonCrySongs
	mov	r0, #0x1
	b	.L229
.L231:
	.align	2, 0
.L230:
	.word	Task_DuckBGMForPokemonCry
.L227:
	mov	r0, #0x0
.L229:
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 IsCryFinished,.Lfe31-IsCryFinished
	.align	2, 0
	.globl	StopCryAndClearCrySongs
	.type	 StopCryAndClearCrySongs,function
	.thumb_func
StopCryAndClearCrySongs:
	push	{lr}
	ldr	r0, .L233
	ldr	r0, [r0]
	bl	m4aMPlayStop
	bl	ClearPokemonCrySongs
	pop	{r0}
	bx	r0
.L234:
	.align	2, 0
.L233:
	.word	gMPlay_PokemonCry
.Lfe32:
	.size	 StopCryAndClearCrySongs,.Lfe32-StopCryAndClearCrySongs
	.align	2, 0
	.globl	StopCry
	.type	 StopCry,function
	.thumb_func
StopCry:
	push	{lr}
	ldr	r0, .L236
	ldr	r0, [r0]
	bl	m4aMPlayStop
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	gMPlay_PokemonCry
.Lfe33:
	.size	 StopCry,.Lfe33-StopCry
	.align	2, 0
	.globl	IsCryPlayingOrClearCrySongs
	.type	 IsCryPlayingOrClearCrySongs,function
	.thumb_func
IsCryPlayingOrClearCrySongs:
	push	{lr}
	ldr	r0, .L242
	ldr	r0, [r0]
	bl	IsPokemonCryPlaying
	cmp	r0, #0
	bne	.L239	@cond_branch
	bl	ClearPokemonCrySongs
	mov	r0, #0x0
	b	.L241
.L243:
	.align	2, 0
.L242:
	.word	gMPlay_PokemonCry
.L239:
	mov	r0, #0x1
.L241:
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 IsCryPlayingOrClearCrySongs,.Lfe34-IsCryPlayingOrClearCrySongs
	.align	2, 0
	.globl	IsCryPlaying
	.type	 IsCryPlaying,function
	.thumb_func
IsCryPlaying:
	push	{lr}
	ldr	r0, .L248
	ldr	r0, [r0]
	bl	IsPokemonCryPlaying
	cmp	r0, #0
	bne	.L245	@cond_branch
	mov	r0, #0x0
	b	.L247
.L249:
	.align	2, 0
.L248:
	.word	gMPlay_PokemonCry
.L245:
	mov	r0, #0x1
.L247:
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 IsCryPlaying,.Lfe35-IsCryPlaying
	.align	2, 0
	.type	 Task_DuckBGMForPokemonCry,function
	.thumb_func
Task_DuckBGMForPokemonCry:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L253
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L251	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	b	.L250
.L254:
	.align	2, 0
.L253:
	.word	gPokemonCryBGMDuckingCounter
.L251:
	ldr	r0, .L255
	ldr	r0, [r0]
	bl	IsPokemonCryPlaying
	cmp	r0, #0
	bne	.L250	@cond_branch
	ldr	r0, .L255+0x4
	ldr	r1, .L255+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	add	r0, r4, #0
	bl	DestroyTask
.L250:
	pop	{r4}
	pop	{r0}
	bx	r0
.L256:
	.align	2, 0
.L255:
	.word	gMPlay_PokemonCry
	.word	gMPlayInfo_BGM
	.word	0xffff
.Lfe36:
	.size	 Task_DuckBGMForPokemonCry,.Lfe36-Task_DuckBGMForPokemonCry
	.align	2, 0
	.type	 RestoreBGMVolumeAfterPokemonCry,function
	.thumb_func
RestoreBGMVolumeAfterPokemonCry:
	push	{r4, lr}
	ldr	r4, .L259
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L258	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x50
	bl	CreateTask
.L258:
	pop	{r4}
	pop	{r0}
	bx	r0
.L260:
	.align	2, 0
.L259:
	.word	Task_DuckBGMForPokemonCry
.Lfe37:
	.size	 RestoreBGMVolumeAfterPokemonCry,.Lfe37-RestoreBGMVolumeAfterPokemonCry
	.align	2, 0
	.globl	PlayBGM
	.type	 PlayBGM,function
	.thumb_func
PlayBGM:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L264
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L262	@cond_branch
	mov	r1, #0x0
.L262:
	ldr	r0, .L264+0x4
	cmp	r1, r0
	bne	.L263	@cond_branch
	mov	r1, #0x0
.L263:
	add	r0, r1, #0
	bl	m4aSongNumStart
	pop	{r0}
	bx	r0
.L265:
	.align	2, 0
.L264:
	.word	gDisableMusic
	.word	0xffff
.Lfe38:
	.size	 PlayBGM,.Lfe38-PlayBGM
	.align	2, 0
	.globl	PlaySE
	.type	 PlaySE,function
	.thumb_func
PlaySE:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L268
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L267	@cond_branch
	ldr	r0, .L268+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L267	@cond_branch
	add	r0, r1, #0
	bl	m4aSongNumStart
.L267:
	pop	{r0}
	bx	r0
.L269:
	.align	2, 0
.L268:
	.word	gDisableMapMusicChangeOnMapLoad
	.word	gQuestLogState
.Lfe39:
	.size	 PlaySE,.Lfe39-PlaySE
	.align	2, 0
	.globl	PlaySE12WithPanning
	.type	 PlaySE12WithPanning,function
	.thumb_func
PlaySE12WithPanning:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	m4aSongNumStart
	ldr	r6, .L271
	add	r0, r6, #0
	bl	m4aMPlayImmInit
	ldr	r0, .L271+0x4
	mov	r8, r0
	bl	m4aMPlayImmInit
	ldr	r5, .L271+0x8
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	m4aMPlayPanpotControl
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	m4aMPlayPanpotControl
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	gMPlayInfo_SE1
	.word	gMPlayInfo_SE2
	.word	0xffff
.Lfe40:
	.size	 PlaySE12WithPanning,.Lfe40-PlaySE12WithPanning
	.align	2, 0
	.globl	PlaySE1WithPanning
	.type	 PlaySE1WithPanning,function
	.thumb_func
PlaySE1WithPanning:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	m4aSongNumStart
	ldr	r5, .L274
	add	r0, r5, #0
	bl	m4aMPlayImmInit
	ldr	r1, .L274+0x4
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	add	r0, r5, #0
	add	r2, r4, #0
	bl	m4aMPlayPanpotControl
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	gMPlayInfo_SE1
	.word	0xffff
.Lfe41:
	.size	 PlaySE1WithPanning,.Lfe41-PlaySE1WithPanning
	.align	2, 0
	.globl	PlaySE2WithPanning
	.type	 PlaySE2WithPanning,function
	.thumb_func
PlaySE2WithPanning:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	m4aSongNumStart
	ldr	r5, .L277
	add	r0, r5, #0
	bl	m4aMPlayImmInit
	ldr	r1, .L277+0x4
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	add	r0, r5, #0
	add	r2, r4, #0
	bl	m4aMPlayPanpotControl
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L278:
	.align	2, 0
.L277:
	.word	gMPlayInfo_SE2
	.word	0xffff
.Lfe42:
	.size	 PlaySE2WithPanning,.Lfe42-PlaySE2WithPanning
	.align	2, 0
	.globl	SE12PanpotControl
	.type	 SE12PanpotControl,function
	.thumb_func
SE12PanpotControl:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, .L280
	ldr	r5, .L280+0x4
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	add	r1, r5, #0
	add	r2, r4, #0
	bl	m4aMPlayPanpotControl
	ldr	r0, .L280+0x8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	m4aMPlayPanpotControl
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L281:
	.align	2, 0
.L280:
	.word	gMPlayInfo_SE1
	.word	0xffff
	.word	gMPlayInfo_SE2
.Lfe43:
	.size	 SE12PanpotControl,.Lfe43-SE12PanpotControl
	.align	2, 0
	.globl	IsSEPlaying
	.type	 IsSEPlaying,function
	.thumb_func
IsSEPlaying:
	push	{lr}
	ldr	r0, .L287
	ldr	r1, [r0, #0x4]
	mov	r2, #0x80
	lsl	r2, r2, #0x18
	add	r3, r0, #0
	cmp	r1, #0
	bge	.L283	@cond_branch
	ldr	r0, .L287+0x4
	ldr	r0, [r0, #0x4]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L286	@cond_branch
.L283:
	ldr	r1, .L287+0x8
	ldrh	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L284	@cond_branch
	ldr	r0, .L287+0x4
	ldr	r0, [r0, #0x4]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L284	@cond_branch
.L286:
	mov	r0, #0x0
	b	.L285
.L288:
	.align	2, 0
.L287:
	.word	gMPlayInfo_SE1
	.word	gMPlayInfo_SE2
	.word	0xffff
.L284:
	mov	r0, #0x1
.L285:
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 IsSEPlaying,.Lfe44-IsSEPlaying
	.align	2, 0
	.globl	IsBGMPlaying
	.type	 IsBGMPlaying,function
	.thumb_func
IsBGMPlaying:
	push	{lr}
	ldr	r0, .L293
	ldr	r1, [r0, #0x4]
	cmp	r1, #0
	blt	.L291	@cond_branch
	ldr	r0, .L293+0x4
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L291	@cond_branch
	mov	r0, #0x1
	b	.L292
.L294:
	.align	2, 0
.L293:
	.word	gMPlayInfo_BGM
	.word	0xffff
.L291:
	mov	r0, #0x0
.L292:
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 IsBGMPlaying,.Lfe45-IsBGMPlaying
	.align	2, 0
	.globl	IsSpecialSEPlaying
	.type	 IsSpecialSEPlaying,function
	.thumb_func
IsSpecialSEPlaying:
	push	{lr}
	ldr	r0, .L299
	ldr	r1, [r0, #0x4]
	cmp	r1, #0
	blt	.L297	@cond_branch
	ldr	r0, .L299+0x4
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L297	@cond_branch
	mov	r0, #0x1
	b	.L298
.L300:
	.align	2, 0
.L299:
	.word	gMPlayInfo_SE3
	.word	0xffff
.L297:
	mov	r0, #0x0
.L298:
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 IsSpecialSEPlaying,.Lfe46-IsSpecialSEPlaying
	.align	2, 0
	.globl	SetBGMVolume_SuppressHelpSystemReduction
	.type	 SetBGMVolume_SuppressHelpSystemReduction,function
	.thumb_func
SetBGMVolume_SuppressHelpSystemReduction:
	push	{lr}
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L302
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L302+0x4
	ldr	r1, .L302+0x8
	bl	m4aMPlayVolumeControl
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gDisableHelpSystemVolumeReduce
	.word	gMPlayInfo_BGM
	.word	0xffff
.Lfe47:
	.size	 SetBGMVolume_SuppressHelpSystemReduction,.Lfe47-SetBGMVolume_SuppressHelpSystemReduction
	.align	2, 0
	.globl	BGMVolumeMax_EnableHelpSystemReduction
	.type	 BGMVolumeMax_EnableHelpSystemReduction,function
	.thumb_func
BGMVolumeMax_EnableHelpSystemReduction:
	push	{lr}
	ldr	r1, .L305
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L305+0x4
	ldr	r1, .L305+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gDisableHelpSystemVolumeReduce
	.word	gMPlayInfo_BGM
	.word	0xffff
.Lfe48:
	.size	 BGMVolumeMax_EnableHelpSystemReduction,.Lfe48-BGMVolumeMax_EnableHelpSystemReduction

	.lcomm	sCurrentMapMusic,2

	.lcomm	sNextMapMusic,2

	.lcomm	sMapMusicState,1

	.lcomm	sMapMusicFadeInSpeed,1

	.lcomm	sFanfareCounter,2
	.comm	gDisableMusic, 4	@ 1
.text
	.align	2, 0 @ Don't pad with nop

