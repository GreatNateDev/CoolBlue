@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 sDmaOverErrorMsg,object
sDmaOverErrorMsg:
	.byte	0xbe
	.byte	0xc7
	.byte	0xbb
	.byte	0x0
	.byte	0xc9
	.byte	0xd0
	.byte	0xbf
	.byte	0xcc
	.byte	0xfe
	.byte	0xbe
	.byte	0xc7
	.byte	0xbb
	.byte	0x13
	.byte	0x2e
	.byte	0xf
	.byte	0x3
	.byte	0xfe
	.byte	0x78
	.byte	0x58
	.byte	0x54
	.byte	0x5d
	.byte	0x64
	.byte	0x63
	.byte	0xae
	.byte	0x98
	.byte	0x79
	.byte	0x37
	.byte	0xfe
	.byte	0x55
	.byte	0xae
	.byte	0x96
	.byte	0xae
	.byte	0xc
	.byte	0x1f
	.byte	0xc
	.byte	0x10
	.byte	0xff
	.size	 sDmaOverErrorMsg,37
	.type	 sUnknownData,object
	.size	 sUnknownData,24
sUnknownData:
	.byte	0x1
	.byte	0x4
	.byte	0x10
	.byte	0x40
	.byte	0x2
	.byte	0x4
	.byte	0x8
	.byte	0x20
	.byte	0x2
	.byte	0x4
	.byte	0x8
	.byte	0x20
	.byte	0x1
	.byte	0x4
	.byte	0x10
	.byte	0x40
	.byte	0x2
	.byte	0x4
	.byte	0x8
	.byte	0x20
	.byte	0x2
	.byte	0x4
	.byte	0x8
	.byte	0x20
	.type	 sCenterToCornerVecTable,object
	.size	 sCenterToCornerVecTable,24
sCenterToCornerVecTable:
	.byte	0xfc
	.byte	0xfc
	.byte	0xf8
	.byte	0xf8
	.byte	0xf0
	.byte	0xf0
	.byte	0xe0
	.byte	0xe0
	.byte	0xf8
	.byte	0xfc
	.byte	0xf0
	.byte	0xfc
	.byte	0xf0
	.byte	0xf8
	.byte	0xe0
	.byte	0xf0
	.byte	0xfc
	.byte	0xf8
	.byte	0xfc
	.byte	0xf0
	.byte	0xf8
	.byte	0xf0
	.byte	0xf0
	.byte	0xe0
	.align	2, 0
	.type	 sDummySprite,object
	.size	 sDummySprite,68
sDummySprite:
	.byte	0xa0
	.byte	0x0
	.byte	0x30
	.byte	0x1
	.byte	0x0
	.byte	0xc
	.short	0x0
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	gDummySpriteTemplate
	.space	4
	.word	SpriteCallbackDummy
	.short	0x130
	.short	0xa0
	.space	31
	.byte	0xff
	.globl	gDummyOamData
	.align	2, 0
	.type	 gDummyOamData,object
	.size	 gDummyOamData,8
gDummyOamData:
	.byte	0xa0
	.byte	0x0
	.byte	0x30
	.byte	0x1
	.byte	0x0
	.byte	0xc
	.short	0x0
	.align	2, 0
	.type	 sDummyAnim,object
	.size	 sDummyAnim,4
sDummyAnim:
	.short	-0x1
	.space	2
	.globl	gDummySpriteAnimTable
	.align	2, 0
	.type	 gDummySpriteAnimTable,object
gDummySpriteAnimTable:
	.word	sDummyAnim
	.size	 gDummySpriteAnimTable,4
	.align	2, 0
	.type	 sDummyAffineAnim,object
	.size	 sDummyAffineAnim,8
sDummyAffineAnim:
	.short	0x7fff
	.space	6
	.globl	gDummySpriteAffineAnimTable
	.align	2, 0
	.type	 gDummySpriteAffineAnimTable,object
gDummySpriteAffineAnimTable:
	.word	sDummyAffineAnim
	.size	 gDummySpriteAffineAnimTable,4
	.globl	gDummySpriteTemplate
	.align	2, 0
	.type	 gDummySpriteTemplate,object
	.size	 gDummySpriteTemplate,24
gDummySpriteTemplate:
	.short	0x0
	.short	0xffff
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sAnimFuncs,object
sAnimFuncs:
	.word	ContinueAnim
	.word	BeginAnim
	.size	 sAnimFuncs,8
	.align	2, 0
	.type	 sAffineAnimFuncs,object
sAffineAnimFuncs:
	.word	ContinueAffineAnim
	.word	BeginAffineAnim
	.size	 sAffineAnimFuncs,8
	.align	2, 0
	.type	 sAnimCmdFuncs,object
sAnimCmdFuncs:
	.word	AnimCmd_loop
	.word	AnimCmd_jump
	.word	AnimCmd_end
	.word	AnimCmd_frame
	.size	 sAnimCmdFuncs,16
	.align	2, 0
	.type	 sAffineAnimCmdFuncs,object
sAffineAnimCmdFuncs:
	.word	AffineAnimCmd_loop
	.word	AffineAnimCmd_jump
	.word	AffineAnimCmd_end
	.word	AffineAnimCmd_frame
	.size	 sAffineAnimCmdFuncs,16
	.align	2, 0
	.type	 sOamDimensionsCopy,object
	.size	 sOamDimensionsCopy,96
sOamDimensionsCopy:
	.word	0x8
	.word	0x8
	.word	0x10
	.word	0x10
	.word	0x20
	.word	0x20
	.word	0x40
	.word	0x40
	.word	0x10
	.word	0x8
	.word	0x20
	.word	0x8
	.word	0x20
	.word	0x10
	.word	0x40
	.word	0x20
	.word	0x8
	.word	0x10
	.word	0x8
	.word	0x20
	.word	0x10
	.word	0x20
	.word	0x20
	.word	0x40
	.align	2, 0
	.type	 sOamDimensions,object
	.size	 sOamDimensions,48
sOamDimensions:
	.byte	0x8
	.byte	0x8
	.space	2
	.byte	0x10
	.byte	0x10
	.space	2
	.byte	0x20
	.byte	0x20
	.space	2
	.byte	0x40
	.byte	0x40
	.space	2
	.byte	0x10
	.byte	0x8
	.space	2
	.byte	0x20
	.byte	0x8
	.space	2
	.byte	0x20
	.byte	0x10
	.space	2
	.byte	0x40
	.byte	0x20
	.space	2
	.byte	0x8
	.byte	0x10
	.space	2
	.byte	0x8
	.byte	0x20
	.space	2
	.byte	0x10
	.byte	0x20
	.space	2
	.byte	0x20
	.byte	0x40
	.space	2
	.globl	gSprites
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gSprites,object
	.size	 gSprites,4420
gSprites:
	.byte	0x0
	.space	7
	.space	60
	.space	4352
	.globl	gSpritePriorities
	.align	1, 0
	.type	 gSpritePriorities,object
	.size	 gSpritePriorities,128
gSpritePriorities:
	.short	0x0
	.space	126
	.globl	gSpriteOrder
	.type	 gSpriteOrder,object
	.size	 gSpriteOrder,64
gSpriteOrder:
	.byte	0x0
	.space	63
	.globl	gShouldProcessSpriteCopyRequests
	.type	 gShouldProcessSpriteCopyRequests,object
	.size	 gShouldProcessSpriteCopyRequests,1
gShouldProcessSpriteCopyRequests:
	.byte	0x0
	.globl	gSpriteCopyRequestCount
	.type	 gSpriteCopyRequestCount,object
	.size	 gSpriteCopyRequestCount,1
gSpriteCopyRequestCount:
	.byte	0x0
	.globl	gSpriteCopyRequests
	.align	2, 0
	.type	 gSpriteCopyRequests,object
	.size	 gSpriteCopyRequests,768
gSpriteCopyRequests:
	.word	0x0
	.space	8
	.space	756
	.globl	gOamLimit
	.type	 gOamLimit,object
	.size	 gOamLimit,1
gOamLimit:
	.byte	0x0
	.globl	gReservedSpriteTileCount
	.align	1, 0
	.type	 gReservedSpriteTileCount,object
	.size	 gReservedSpriteTileCount,2
gReservedSpriteTileCount:
	.short	0x0
	.globl	gSpriteTileAllocBitmap
	.type	 gSpriteTileAllocBitmap,object
	.size	 gSpriteTileAllocBitmap,128
gSpriteTileAllocBitmap:
	.byte	0x0
	.space	127
	.globl	gSpriteCoordOffsetX
	.align	1, 0
	.type	 gSpriteCoordOffsetX,object
	.size	 gSpriteCoordOffsetX,2
gSpriteCoordOffsetX:
	.short	0x0
	.globl	gSpriteCoordOffsetY
	.align	1, 0
	.type	 gSpriteCoordOffsetY,object
	.size	 gSpriteCoordOffsetY,2
gSpriteCoordOffsetY:
	.short	0x0
	.globl	gOamMatrices
	.align	2, 0
	.type	 gOamMatrices,object
	.size	 gOamMatrices,256
gOamMatrices:
	.short	0x0
	.space	6
	.space	248
	.globl	gAffineAnimsDisabled
	.type	 gAffineAnimsDisabled,object
	.size	 gAffineAnimsDisabled,1
gAffineAnimsDisabled:
	.byte	0x0
.text
	.align	2, 0
	.globl	ResetSpriteData
	.type	 ResetSpriteData,function
	.thumb_func
ResetSpriteData:
	push	{r4, lr}
	mov	r0, #0x0
	mov	r1, #0x80
	bl	ResetOamRange
	bl	ResetAllSprites
	bl	ClearSpriteCopyRequests
	bl	ResetAffineAnimData
	bl	FreeSpriteTileRanges
	ldr	r1, .L5
	mov	r0, #0x40
	strb	r0, [r1]
	ldr	r0, .L5+0x4
	mov	r4, #0x0
	strh	r4, [r0]
	mov	r0, #0x0
	bl	AllocSpriteTiles
	ldr	r0, .L5+0x8
	strh	r4, [r0]
	ldr	r0, .L5+0xc
	strh	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	gOamLimit
	.word	gReservedSpriteTileCount
	.word	gSpriteCoordOffsetX
	.word	gSpriteCoordOffsetY
.Lfe1:
	.size	 ResetSpriteData,.Lfe1-ResetSpriteData
	.align	2, 0
	.globl	AnimateSprites
	.type	 AnimateSprites,function
	.thumb_func
AnimateSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	mov	r7, #0x1
.L11:
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L15
	add	r4, r0, r1
	add	r5, r4, #0
	add	r5, r5, #0x3e
	ldrb	r1, [r5]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L10	@cond_branch
	ldr	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	ldrb	r1, [r5]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L10	@cond_branch
	add	r0, r4, #0
	bl	AnimateSprite
.L10:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3f
	bls	.L11	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gSprites
.Lfe2:
	.size	 AnimateSprites,.Lfe2-AnimateSprites
	.align	2, 0
	.globl	BuildOamBuffer
	.type	 BuildOamBuffer,function
	.thumb_func
BuildOamBuffer:
	push	{r4, r5, lr}
	bl	UpdateOamCoords
	bl	BuildSpritePriorities
	bl	SortSprites
	ldr	r5, .L18
	ldr	r0, .L18+0x4
	add	r5, r5, r0
	ldrb	r0, [r5]
	lsl	r4, r0, #0x1f
	lsr	r4, r4, #0x1f
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r5]
	bl	AddSpritesToOamBuffer
	bl	CopyMatricesToOamBuffer
	mov	r2, #0x1
	ldrb	r1, [r5]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	orr	r4, r4, r0
	strb	r4, [r5]
	ldr	r0, .L18+0x8
	strb	r2, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gMain
	.word	0x439
	.word	gShouldProcessSpriteCopyRequests
.Lfe3:
	.size	 BuildOamBuffer,.Lfe3-BuildOamBuffer
	.align	2, 0
	.type	 UpdateOamCoords,function
	.thumb_func
UpdateOamCoords:
	push	{r4, r5, r6, r7, lr}
	mov	r4, #0x0
	ldr	r7, .L30
	ldr	r0, .L30+0x4
	add	r5, r0, #0
	ldr	r6, .L30+0x8
.L24:
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r3, r0, r7
	add	r0, r3, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x5
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L23	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L26	@cond_branch
	mov	r2, #0x20
	ldrsh	r1, [r3, r2]
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	add	r1, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0x28
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	add	r1, r1, r0
	ldr	r0, .L30+0xc
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	add	r1, r1, r0
	and	r1, r1, r5
	ldrh	r2, [r3, #0x2]
	add	r0, r6, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x2]
	ldrh	r1, [r3, #0x26]
	ldrh	r0, [r3, #0x22]
	add	r1, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0x29
	ldrb	r0, [r0]
	ldr	r2, .L30+0x10
	add	r0, r0, r1
	ldrb	r2, [r2]
	add	r0, r0, r2
	b	.L29
.L31:
	.align	2, 0
.L30:
	.word	gSprites
	.word	0x1ff
	.word	-0x200
	.word	gSpriteCoordOffsetX
	.word	gSpriteCoordOffsetY
.L26:
	mov	r2, #0x20
	ldrsh	r1, [r3, r2]
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	add	r1, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0x28
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	add	r1, r1, r0
	and	r1, r1, r5
	ldrh	r2, [r3, #0x2]
	add	r0, r6, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x2]
	ldrh	r1, [r3, #0x26]
	ldrh	r0, [r3, #0x22]
	add	r1, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0x29
	ldrb	r0, [r0]
	add	r0, r0, r1
.L29:
	strb	r0, [r3]
.L23:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3f
	bls	.L24	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 UpdateOamCoords,.Lfe4-UpdateOamCoords
	.align	2, 0
	.type	 BuildSpritePriorities,function
	.thumb_func
BuildSpritePriorities:
	push	{r4, lr}
	mov	r2, #0x0
	ldr	r4, .L38
	ldr	r3, .L38+0x4
.L36:
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r1, r0, #0
	add	r1, r1, #0x43
	ldrb	r1, [r1]
	ldrb	r0, [r0, #0x5]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	strh	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x3f
	bls	.L36	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gSprites
	.word	gSpritePriorities
.Lfe5:
	.size	 BuildSpritePriorities,.Lfe5-BuildSpritePriorities
	.align	2, 0
	.type	 SortSprites,function
	.thumb_func
SortSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	mov	ip, r0
	ldr	r1, .L72
	mov	sl, r1
	ldr	r3, .L72+0x4
	mov	r9, r3
	ldr	r6, .L72+0x8
	mov	r8, r6
.L44:
	mov	r5, ip
	mov	r0, ip
	sub	r0, r0, #0x1
	add	r0, r0, sl
	ldrb	r2, [r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r7, .L72+0xc
	add	r3, r0, r7
	mov	r0, ip
	add	r0, r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r7
	lsl	r2, r2, #0x1
	ldr	r0, .L72+0x10
	add	r2, r2, r0
	ldrh	r2, [r2]
	str	r2, [sp]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r6, [r1]
	ldrb	r1, [r3]
	ldrb	r2, [r4]
	add	r0, r1, #0
	cmp	r0, #0x9f
	ble	.L45	@cond_branch
	add	r0, r0, r9
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L45:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L46	@cond_branch
	add	r0, r0, r9
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L46:
	ldr	r0, [r3]
	mov	r7, r8
	and	r0, r0, r7
	cmp	r0, r8
	bne	.L47	@cond_branch
	ldrb	r0, [r3, #0x1]
	lsr	r0, r0, #0x6
	cmp	r0, #0
	beq	.L49	@cond_branch
	cmp	r0, #0x2
	bne	.L47	@cond_branch
.L49:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x80
	ble	.L47	@cond_branch
	add	r0, r0, r9
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L47:
	ldr	r0, [r4]
	mov	r3, r8
	and	r0, r0, r3
	cmp	r0, r8
	bne	.L51	@cond_branch
	ldrb	r0, [r4, #0x1]
	lsr	r0, r0, #0x6
	cmp	r0, #0
	beq	.L53	@cond_branch
	cmp	r0, #0x2
	bne	.L51	@cond_branch
.L53:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x80
	ble	.L51	@cond_branch
	add	r0, r0, r9
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L51:
	mov	r7, #0x1
	add	ip, ip, r7
	cmp	r5, #0
	beq	.L43	@cond_branch
	ldr	r0, [sp]
	cmp	r0, r6
	bhi	.L57	@cond_branch
	cmp	r0, r6
	bne	.L43	@cond_branch
	b	.L71
.L73:
	.align	2, 0
.L72:
	.word	gSpriteOrder
	.word	-0x100
	.word	-0x3ffffd00
	.word	gSprites
	.word	gSpritePriorities
.L57:
	mov	r1, sl
	add	r3, r5, r1
	ldrb	r4, [r3]
	sub	r2, r5, #0x1
	add	r1, r2, r1
	ldrb	r0, [r1]
	strb	r0, [r3]
	strb	r4, [r1]
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	sub	r0, r5, #0x1
	add	r0, r0, sl
	ldrb	r2, [r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r6, .L74
	add	r3, r0, r6
	mov	r7, sl
	add	r0, r5, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r6
	lsl	r2, r2, #0x1
	ldr	r0, .L74+0x4
	add	r2, r2, r0
	ldrh	r2, [r2]
	str	r2, [sp]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r6, [r1]
	ldrb	r1, [r3]
	ldrb	r2, [r4]
	add	r0, r1, #0
	cmp	r0, #0x9f
	ble	.L59	@cond_branch
	add	r0, r0, r9
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L59:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L60	@cond_branch
	add	r0, r0, r9
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L60:
	ldr	r0, [r3]
	mov	r7, r8
	and	r0, r0, r7
	cmp	r0, r8
	bne	.L61	@cond_branch
	ldrb	r0, [r3, #0x1]
	lsr	r0, r0, #0x6
	cmp	r0, #0
	beq	.L63	@cond_branch
	cmp	r0, #0x2
	bne	.L61	@cond_branch
.L63:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x80
	ble	.L61	@cond_branch
	add	r0, r0, r9
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L61:
	ldr	r0, [r4]
	mov	r3, r8
	and	r0, r0, r3
	cmp	r0, r8
	bne	.L55	@cond_branch
	ldrb	r0, [r4, #0x1]
	lsr	r0, r0, #0x6
	cmp	r0, #0
	beq	.L67	@cond_branch
	cmp	r0, #0x2
	bne	.L55	@cond_branch
.L67:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x80
	ble	.L55	@cond_branch
	add	r0, r0, r9
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L55:
	cmp	r5, #0
	beq	.L43	@cond_branch
	ldr	r7, [sp]
	cmp	r7, r6
	bhi	.L57	@cond_branch
	cmp	r7, r6
	bne	.L43	@cond_branch
.L71:
	lsl	r1, r1, #0x10
	lsl	r0, r2, #0x10
	cmp	r1, r0
	blt	.L57	@cond_branch
.L43:
	mov	r1, ip
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	cmp	r0, #0x3f
	bhi	.LCB597
	b	.L44	@long jump
.LCB597:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	gSprites
	.word	gSpritePriorities
.Lfe6:
	.size	 SortSprites,.Lfe6-SortSprites
	.align	2, 0
	.type	 CopyMatricesToOamBuffer,function
	.thumb_func
CopyMatricesToOamBuffer:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	ldr	r5, .L82
	ldr	r6, .L82+0x4
.L80:
	lsl	r2, r4, #0x2
	lsl	r1, r4, #0x5
	add	r1, r1, r5
	lsl	r3, r4, #0x3
	add	r3, r3, r6
	ldrh	r0, [r3]
	strh	r0, [r1, #0x3e]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrh	r1, [r3, #0x2]
	strh	r1, [r0, #0x3e]
	add	r0, r2, #0x2
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0, #0x3e]
	add	r2, r2, #0x3
	lsl	r2, r2, #0x3
	add	r2, r2, r5
	ldrh	r0, [r3, #0x6]
	strh	r0, [r2, #0x3e]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1f
	bls	.L80	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gMain
	.word	gOamMatrices
.Lfe7:
	.size	 CopyMatricesToOamBuffer,.Lfe7-CopyMatricesToOamBuffer
	.align	2, 0
	.type	 AddSpritesToOamBuffer,function
	.thumb_func
AddSpritesToOamBuffer:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	mov	r4, #0x0
	mov	r0, sp
	strb	r4, [r0]
.L87:
	ldr	r0, .L94
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L94+0x4
	add	r2, r0, r1
	add	r0, r2, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x5
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L88	@cond_branch
	add	r0, r2, #0
	mov	r1, sp
	bl	AddSpriteToOamBuffer
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L84	@cond_branch
.L88:
	add	r4, r4, #0x1
	cmp	r4, #0x3f
	ble	.L87	@cond_branch
	mov	r0, sp
	ldr	r4, .L94+0x8
	ldrb	r0, [r0]
	ldrb	r1, [r4]
	cmp	r0, r1
	bcs	.L84	@cond_branch
	mov	r1, sp
	ldr	r5, .L94+0xc
	ldr	r0, .L94+0x10
	ldr	r2, [r0]		@ created by thumb_load_double_from_address
	ldr	r3, [r0, #0x4]		@ created by thumb_load_double_from_address
.L92:
	ldrb	r0, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	str	r2, [r0]
	str	r3, [r0, #0x4]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r6, [r4]
	cmp	r0, r6
	bcc	.L92	@cond_branch
.L84:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gSpriteOrder
	.word	gSprites
	.word	gOamLimit
	.word	gMain+0x38
	.word	gDummyOamData
.Lfe8:
	.size	 AddSpritesToOamBuffer,.Lfe8-AddSpritesToOamBuffer
	.align	2, 0
	.globl	CreateSprite
	.type	 CreateSprite,function
	.thumb_func
CreateSprite:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r7, r0, #0
	lsl	r3, r3, #0x18
	lsr	r4, r3, #0x18
	mov	r3, #0x0
	ldr	r0, .L104
	mov	ip, r0
	lsl	r5, r1, #0x10
	lsl	r6, r2, #0x10
.L100:
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L99	@cond_branch
	str	r4, [sp]
	add	r0, r3, #0
	add	r1, r7, #0
	asr	r2, r5, #0x10
	asr	r3, r6, #0x10
	bl	CreateSpriteAt
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L103
.L105:
	.align	2, 0
.L104:
	.word	gSprites
.L99:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3f
	bls	.L100	@cond_branch
	mov	r0, #0x40
.L103:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 CreateSprite,.Lfe9-CreateSprite
	.align	2, 0
	.globl	CreateSpriteAtEnd
	.type	 CreateSpriteAtEnd,function
	.thumb_func
CreateSpriteAtEnd:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r7, r0, #0
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	mov	r3, #0x3f
	ldr	r0, .L114
	mov	r8, r0
	mov	r0, #0x1
	neg	r0, r0
	mov	ip, r0
	lsl	r4, r1, #0x10
	lsl	r5, r2, #0x10
.L110:
	lsl	r0, r3, #0x10
	asr	r1, r0, #0x10
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L109	@cond_branch
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	str	r6, [sp]
	add	r1, r7, #0
	asr	r2, r4, #0x10
	asr	r3, r5, #0x10
	bl	CreateSpriteAt
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L113
.L115:
	.align	2, 0
.L114:
	.word	gSprites
.L109:
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, ip
	bgt	.L110	@cond_branch
	mov	r0, #0x40
.L113:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 CreateSpriteAtEnd,.Lfe10-CreateSpriteAtEnd
	.align	2, 0
	.globl	CreateInvisibleSprite
	.type	 CreateInvisibleSprite,function
	.thumb_func
CreateInvisibleSprite:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r0, .L120
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x1f
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x40
	beq	.L117	@cond_branch
	ldr	r4, .L120+0x4
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r2, r1, r4
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r2]
	add	r4, r4, #0x1c
	add	r1, r1, r4
	str	r6, [r1]
	add	r0, r5, #0
	b	.L119
.L121:
	.align	2, 0
.L120:
	.word	gDummySpriteTemplate
	.word	gSprites
.L117:
	mov	r0, #0x40
.L119:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 CreateInvisibleSprite,.Lfe11-CreateInvisibleSprite
	.align	2, 0
	.type	 CreateSpriteAt,function
	.thumb_func
CreateSpriteAt:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r1
	add	r5, r2, #0
	add	r6, r3, #0
	ldr	r4, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x4
	add	r0, r0, sl
	lsl	r0, r0, #0x2
	ldr	r1, .L129
	add	r7, r0, r1
	add	r0, r7, #0
	bl	ResetSprite
	add	r2, r7, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x3f
	add	r0, r0, r7
	mov	r9, r0
	ldrb	r0, [r0]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r7, #0
	add	r0, r0, #0x43
	strb	r4, [r0]
	mov	r1, r8
	ldr	r0, [r1, #0x4]
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [r7]
	str	r1, [r7, #0x4]
	mov	r1, r8
	ldr	r0, [r1, #0x8]
	str	r0, [r7, #0x8]
	ldr	r0, [r1, #0x10]
	str	r0, [r7, #0x10]
	str	r1, [r7, #0x14]
	ldr	r0, [r1, #0x14]
	str	r0, [r7, #0x1c]
	strh	r5, [r7, #0x20]
	strh	r6, [r7, #0x22]
	ldrb	r3, [r7, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r7, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r7, #0
	bl	CalcCenterToCornerVec
	mov	r0, r8
	ldrh	r1, [r0]
	ldr	r4, .L129+0x4
	lsr	r0, r4, #0x10
	cmp	r1, r0
	bne	.L123	@cond_branch
	mov	r1, r8
	ldr	r0, [r1, #0xc]
	str	r0, [r7, #0xc]
	ldrh	r0, [r0, #0x4]
	lsr	r0, r0, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	AllocSpriteTiles
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	asr	r1, r4, #0x10
	cmp	r0, r1
	bne	.L124	@cond_branch
	add	r0, r7, #0
	bl	ResetSprite
	mov	r0, #0x40
	b	.L128
.L130:
	.align	2, 0
.L129:
	.word	gSprites
	.word	-0x10000
.L124:
	ldr	r1, .L131
	add	r0, r1, #0
	and	r2, r2, r0
	ldrh	r1, [r7, #0x4]
	ldr	r0, .L131+0x4
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r7, #0x4]
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, r9
	strb	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #0x40
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L125
.L132:
	.align	2, 0
.L131:
	.word	0x3ff
	.word	-0x400
.L123:
	mov	r1, r8
	ldrh	r0, [r1]
	bl	GetSpriteTileStartByTag
	add	r1, r7, #0
	add	r1, r1, #0x40
	strh	r0, [r1]
	add	r0, r7, #0
	bl	SetSpriteSheetFrameTileNum
.L125:
	ldrb	r0, [r7, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L126	@cond_branch
	add	r0, r7, #0
	bl	InitSpriteAffineAnim
.L126:
	mov	r0, r8
	ldrh	r1, [r0, #0x2]
	ldr	r0, .L133
	cmp	r1, r0
	beq	.L127	@cond_branch
	mov	r1, r8
	ldrh	r0, [r1, #0x2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x4
	ldrb	r2, [r7, #0x5]
	mov	r1, #0xf
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r7, #0x5]
.L127:
	mov	r0, sl
.L128:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L134:
	.align	2, 0
.L133:
	.word	0xffff
.Lfe12:
	.size	 CreateSpriteAt,.Lfe12-CreateSpriteAt
	.align	2, 0
	.globl	CreateSpriteAndAnimate
	.type	 CreateSpriteAndAnimate,function
	.thumb_func
CreateSpriteAndAnimate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	sl, r0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	mov	r3, #0x0
	ldr	r5, .L146
	lsl	r1, r1, #0x10
	mov	ip, r1
	lsl	r2, r2, #0x10
	mov	r8, r2
.L139:
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r6, r0, #0x2
	add	r4, r6, r5
	add	r7, r4, #0
	add	r7, r7, #0x3e
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L138	@cond_branch
	mov	r0, r9
	str	r0, [sp]
	add	r0, r3, #0
	mov	r1, sl
	mov	r3, ip
	asr	r2, r3, #0x10
	mov	r5, r8
	asr	r3, r5, #0x10
	bl	CreateSpriteAt
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	cmp	r5, #0x40
	beq	.L145	@cond_branch
	ldr	r1, .L146+0x4
	add	r0, r6, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L142	@cond_branch
	add	r0, r4, #0
	bl	AnimateSprite
.L142:
	add	r0, r5, #0
	b	.L144
.L147:
	.align	2, 0
.L146:
	.word	gSprites
	.word	gSprites+0x1c
.L138:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3f
	bls	.L139	@cond_branch
.L145:
	mov	r0, #0x40
.L144:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 CreateSpriteAndAnimate,.Lfe13-CreateSpriteAndAnimate
	.align	2, 0
	.globl	DestroySprite
	.type	 DestroySprite,function
	.thumb_func
DestroySprite:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L149	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L150	@cond_branch
	ldr	r0, [r5, #0xc]
	ldrh	r2, [r0, #0x4]
	lsr	r2, r2, #0x5
	ldrh	r0, [r5, #0x4]
	lsl	r0, r0, #0x16
	lsr	r1, r0, #0x16
	add	r4, r1, r2
	add	r3, r1, #0
	cmp	r3, r4
	bcs	.L150	@cond_branch
	ldr	r0, .L156
	mov	ip, r0
	mov	r6, #0x7
	mov	r7, #0x1
.L154:
	lsr	r2, r3, #0x3
	add	r2, r2, ip
	add	r0, r3, #0
	and	r0, r0, r6
	add	r1, r7, #0
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r4
	bcc	.L154	@cond_branch
.L150:
	add	r0, r5, #0
	bl	ResetSprite
.L149:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L157:
	.align	2, 0
.L156:
	.word	gSpriteTileAllocBitmap
.Lfe14:
	.size	 DestroySprite,.Lfe14-DestroySprite
	.align	2, 0
	.globl	ResetOamRange
	.type	 ResetOamRange,function
	.thumb_func
ResetOamRange:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	bcs	.L160	@cond_branch
	ldr	r6, .L164
	ldr	r5, .L164+0x4
.L162:
	lsl	r0, r3, #0x3
	add	r0, r0, r6
	ldr	r1, [r5]		@ created by thumb_load_double_from_address
	ldr	r2, [r5, #0x4]		@ created by thumb_load_double_from_address
	str	r1, [r0]
	str	r2, [r0, #0x4]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	bcc	.L162	@cond_branch
.L160:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L165:
	.align	2, 0
.L164:
	.word	gMain+0x38
	.word	gDummyOamData
.Lfe15:
	.size	 ResetOamRange,.Lfe15-ResetOamRange
	.align	2, 0
	.globl	LoadOam
	.type	 LoadOam,function
	.thumb_func
LoadOam:
	push	{lr}
	ldr	r2, .L168
	ldr	r1, .L168+0x4
	add	r0, r2, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L167	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x38
	mov	r1, #0xe0
	lsl	r1, r1, #0x13
	ldr	r2, .L168+0x8
	bl	CpuSet
.L167:
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	gMain
	.word	0x439
	.word	0x4000100
.Lfe16:
	.size	 LoadOam,.Lfe16-LoadOam
	.align	2, 0
	.globl	ClearSpriteCopyRequests
	.type	 ClearSpriteCopyRequests,function
	.thumb_func
ClearSpriteCopyRequests:
	push	{r4, r5, lr}
	ldr	r0, .L176
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L176+0x4
	strb	r1, [r0]
	mov	r2, #0x0
	ldr	r4, .L176+0x8
	mov	r3, #0x0
	add	r5, r4, #0x4
.L174:
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r4
	str	r3, [r1]
	add	r0, r0, r5
	str	r3, [r0]
	strh	r3, [r1, #0x8]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3f
	bls	.L174	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	gShouldProcessSpriteCopyRequests
	.word	gSpriteCopyRequestCount
	.word	gSpriteCopyRequests
.Lfe17:
	.size	 ClearSpriteCopyRequests,.Lfe17-ClearSpriteCopyRequests
	.align	2, 0
	.type	 ResetOamMatrices,function
	.thumb_func
ResetOamMatrices:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r4, .L184
	mov	r3, #0x0
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L182:
	lsl	r0, r1, #0x3
	add	r0, r0, r4
	strh	r2, [r0]
	strh	r3, [r0, #0x2]
	strh	r3, [r0, #0x4]
	strh	r2, [r0, #0x6]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1f
	bls	.L182	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L185:
	.align	2, 0
.L184:
	.word	gOamMatrices
.Lfe18:
	.size	 ResetOamMatrices,.Lfe18-ResetOamMatrices
	.align	2, 0
	.globl	SetOamMatrix
	.type	 SetOamMatrix,function
	.thumb_func
SetOamMatrix:
	push	{r4, r5, lr}
	ldr	r5, [sp, #0xc]
	lsl	r0, r0, #0x18
	ldr	r4, .L187
	lsr	r0, r0, #0x15
	add	r0, r0, r4
	strh	r1, [r0]
	strh	r2, [r0, #0x2]
	strh	r3, [r0, #0x4]
	strh	r5, [r0, #0x6]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gOamMatrices
.Lfe19:
	.size	 SetOamMatrix,.Lfe19-SetOamMatrix
	.align	2, 0
	.type	 ResetSprite,function
	.thumb_func
ResetSprite:
	push	{lr}
	ldr	r1, .L190
	mov	r2, #0x44
	bl	memcpy
	pop	{r0}
	bx	r0
.L191:
	.align	2, 0
.L190:
	.word	sDummySprite
.Lfe20:
	.size	 ResetSprite,.Lfe20-ResetSprite
	.align	2, 0
	.globl	CalcCenterToCornerVec
	.type	 CalcCenterToCornerVec,function
	.thumb_func
CalcCenterToCornerVec:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r4, .L194
	lsr	r2, r2, #0x17
	lsr	r1, r1, #0x15
	add	r2, r2, r1
	add	r0, r2, r4
	ldrb	r5, [r0]
	add	r4, r4, #0x1
	add	r2, r2, r4
	ldrb	r1, [r2]
	mov	r0, #0x2
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L193	@cond_branch
	lsl	r0, r5, #0x19
	lsr	r5, r0, #0x18
	lsl	r0, r1, #0x19
	lsr	r1, r0, #0x18
.L193:
	add	r0, r6, #0
	add	r0, r0, #0x28
	strb	r5, [r0]
	add	r0, r0, #0x1
	strb	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	sCenterToCornerVecTable
.Lfe21:
	.size	 CalcCenterToCornerVec,.Lfe21-CalcCenterToCornerVec
	.align	2, 0
	.globl	AllocSpriteTiles
	.type	 AllocSpriteTiles,function
	.thumb_func
AllocSpriteTiles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	bne	.L197	@cond_branch
	ldr	r0, .L230
	ldrh	r3, [r0]
	ldr	r0, .L230+0x4
	cmp	r3, r0
	bhi	.L199	@cond_branch
	ldr	r7, .L230+0x8
	mov	r6, #0x7
	add	r4, r0, #0
	mov	r5, #0x1
.L201:
	lsr	r2, r3, #0x3
	add	r2, r2, r7
	add	r0, r3, #0
	and	r0, r0, r6
	add	r1, r5, #0
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r4
	bls	.L201	@cond_branch
.L199:
	mov	r0, #0x0
	b	.L225
.L231:
	.align	2, 0
.L230:
	.word	gReservedSpriteTileCount
	.word	0x3ff
	.word	gSpriteTileAllocBitmap
.L228:
.L229:
	mov	r0, #0x1
	neg	r0, r0
	b	.L225
.L197:
	ldr	r0, .L232
	ldrh	r3, [r0]
	ldr	r0, .L232+0x4
	mov	r9, r0
	mov	r7, #0x7
	mov	r6, #0x1
.L203:
	lsr	r0, r3, #0x3
	add	r0, r0, r9
	ldrb	r1, [r0]
	add	r0, r3, #0
	and	r0, r0, r7
	asr	r1, r1, r0
	and	r1, r1, r6
	cmp	r1, #0
	beq	.L226	@cond_branch
	mov	r5, #0x80
	lsl	r5, r5, #0x3
	ldr	r2, .L232+0x4
.L208:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r5
	beq	.L228	@cond_branch
	lsr	r0, r0, #0x13
	add	r0, r0, r2
	ldrb	r1, [r0]
	add	r0, r3, #0
	and	r0, r0, r7
	asr	r1, r1, r0
	and	r1, r1, r6
	cmp	r1, #0
	bne	.L208	@cond_branch
.L226:
	mov	r8, r3
	mov	r2, #0x1
	cmp	r2, r4
	beq	.L227	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	ip, r1
	ldr	r5, .L232+0x4
.L213:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, ip
	beq	.L229	@cond_branch
	lsr	r0, r0, #0x13
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r3, #0
	and	r0, r0, r7
	asr	r1, r1, r0
	and	r1, r1, r6
	cmp	r1, #0
	bne	.L212	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r4
	bne	.L213	@cond_branch
.L212:
	cmp	r2, r4
	bne	.L203	@cond_branch
.L227:
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r3, r0, #0x10
	asr	r1, r0, #0x10
	add	r1, r4, r1
	add	r6, r0, #0
	cmp	r3, r1
	bge	.L221	@cond_branch
	ldr	r0, .L232+0x4
	mov	r8, r0
	mov	r7, #0x7
	add	r4, r1, #0
	mov	r5, #0x1
.L223:
	lsr	r2, r3, #0x3
	add	r2, r2, r8
	add	r1, r3, #0
	and	r1, r1, r7
	add	r0, r5, #0
	lsl	r0, r0, r1
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r4
	blt	.L223	@cond_branch
.L221:
	asr	r0, r6, #0x10
.L225:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L233:
	.align	2, 0
.L232:
	.word	gReservedSpriteTileCount
	.word	gSpriteTileAllocBitmap
.Lfe22:
	.size	 AllocSpriteTiles,.Lfe22-AllocSpriteTiles
	.align	2, 0
	.globl	SpriteTileAllocBitmapOp
	.type	 SpriteTileAllocBitmapOp,function
	.thumb_func
SpriteTileAllocBitmapOp:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r0, #0x13
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r6, r3, #0
	mov	r0, #0x7
	and	r2, r2, r0
	add	r4, r2, #0
	mov	r5, #0x0
	cmp	r1, #0
	bne	.L235	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r2
	mvn	r0, r0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L239
	add	r0, r3, r0
	ldrb	r1, [r0]
	and	r2, r2, r1
	strb	r2, [r0]
	b	.L236
.L240:
	.align	2, 0
.L239:
	.word	gSpriteTileAllocBitmap
.L235:
	cmp	r1, #0x1
	bne	.L237	@cond_branch
	lsl	r1, r1, r2
	lsl	r0, r1, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L241
	add	r0, r3, r0
	ldrb	r1, [r0]
	orr	r2, r2, r1
	strb	r2, [r0]
	b	.L236
.L242:
	.align	2, 0
.L241:
	.word	gSpriteTileAllocBitmap
.L237:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r4
	lsr	r5, r0, #0x18
	ldr	r0, .L243
	add	r0, r6, r0
	ldrb	r0, [r0]
	and	r5, r5, r0
.L236:
	add	r0, r5, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L244:
	.align	2, 0
.L243:
	.word	gSpriteTileAllocBitmap
.Lfe23:
	.size	 SpriteTileAllocBitmapOp,.Lfe23-SpriteTileAllocBitmapOp
	.align	2, 0
	.globl	FreeSpriteTilesIfNotUsingSheet
	.type	 FreeSpriteTilesIfNotUsingSheet,function
	.thumb_func
FreeSpriteTilesIfNotUsingSheet:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L246	@cond_branch
	ldr	r0, [r3, #0xc]
	ldrh	r2, [r0, #0x4]
	lsr	r2, r2, #0x5
	ldrh	r0, [r3, #0x4]
	lsl	r0, r0, #0x16
	lsr	r1, r0, #0x16
	add	r4, r2, r1
	add	r3, r1, #0
	cmp	r3, r4
	bge	.L246	@cond_branch
	ldr	r7, .L252
	mov	r5, #0x7
	mov	r6, #0x1
.L250:
	asr	r2, r3, #0x3
	add	r2, r2, r7
	add	r0, r3, #0
	and	r0, r0, r5
	add	r1, r6, #0
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, r4
	blt	.L250	@cond_branch
.L246:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L253:
	.align	2, 0
.L252:
	.word	gSpriteTileAllocBitmap
.Lfe24:
	.size	 FreeSpriteTilesIfNotUsingSheet,.Lfe24-FreeSpriteTilesIfNotUsingSheet
	.align	2, 0
	.globl	SpriteCallbackDummy
	.type	 SpriteCallbackDummy,function
	.thumb_func
SpriteCallbackDummy:
	bx	lr
.Lfe25:
	.size	 SpriteCallbackDummy,.Lfe25-SpriteCallbackDummy
	.align	2, 0
	.globl	ProcessSpriteCopyRequests
	.type	 ProcessSpriteCopyRequests,function
	.thumb_func
ProcessSpriteCopyRequests:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L261
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L256	@cond_branch
	mov	r4, #0x0
	ldr	r1, .L261+0x4
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L258	@cond_branch
	ldr	r6, .L261+0x8
	add	r7, r6, #0x4
	add	r5, r1, #0
.L259:
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r2, r1, r6
	ldr	r0, [r2]
	add	r1, r1, r7
	ldr	r1, [r1]
	ldrh	r2, [r2, #0x8]
	lsr	r2, r2, #0x1
	bl	CpuSet
	ldrb	r1, [r5]
	sub	r1, r1, #0x1
	strb	r1, [r5]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L259	@cond_branch
.L258:
	ldr	r1, .L261
	mov	r0, #0x0
	strb	r0, [r1]
.L256:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L262:
	.align	2, 0
.L261:
	.word	gShouldProcessSpriteCopyRequests
	.word	gSpriteCopyRequestCount
	.word	gSpriteCopyRequests
.Lfe26:
	.size	 ProcessSpriteCopyRequests,.Lfe26-ProcessSpriteCopyRequests
	.align	2, 0
	.type	 RequestSpriteFrameImageCopy,function
	.thumb_func
RequestSpriteFrameImageCopy:
	push	{r4, r5, r6, lr}
	add	r5, r2, #0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	ldr	r4, .L265
	ldrb	r0, [r4]
	cmp	r0, #0x3f
	bhi	.L264	@cond_branch
	ldr	r3, .L265+0x4
	add	r1, r0, #0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	lsl	r2, r2, #0x3
	add	r2, r2, r5
	ldr	r1, [r2]
	str	r1, [r0]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r0, r3, #0x4
	add	r1, r1, r0
	lsl	r0, r6, #0x5
	ldr	r5, .L265+0x8
	add	r0, r0, r5
	str	r0, [r1]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0x8]
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L264:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	gSpriteCopyRequestCount
	.word	gSpriteCopyRequests
	.word	0x6010000
.Lfe27:
	.size	 RequestSpriteFrameImageCopy,.Lfe27-RequestSpriteFrameImageCopy
	.align	2, 0
	.globl	RequestSpriteCopy
	.type	 RequestSpriteCopy,function
	.thumb_func
RequestSpriteCopy:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	ldr	r3, .L269
	ldrb	r0, [r3]
	cmp	r0, #0x3f
	bhi	.L268	@cond_branch
	ldr	r2, .L269+0x4
	add	r1, r0, #0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	str	r4, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r2, #0x4
	add	r0, r0, r1
	str	r5, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r6, [r0, #0x8]
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
.L268:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L270:
	.align	2, 0
.L269:
	.word	gSpriteCopyRequestCount
	.word	gSpriteCopyRequests
.Lfe28:
	.size	 RequestSpriteCopy,.Lfe28-RequestSpriteCopy
	.align	2, 0
	.globl	CopyFromSprites
	.type	 CopyFromSprites,function
	.thumb_func
CopyFromSprites:
	push	{r4, lr}
	add	r1, r0, #0
	ldr	r3, .L277
	mov	r2, #0x0
	ldr	r4, .L277+0x4
.L275:
	ldrb	r0, [r3]
	strb	r0, [r1]
	add	r1, r1, #0x1
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, r4
	bls	.L275	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L278:
	.align	2, 0
.L277:
	.word	gSprites
	.word	0x10ff
.Lfe29:
	.size	 CopyFromSprites,.Lfe29-CopyFromSprites
	.align	2, 0
	.globl	CopyToSprites
	.type	 CopyToSprites,function
	.thumb_func
CopyToSprites:
	push	{r4, lr}
	add	r1, r0, #0
	ldr	r3, .L285
	mov	r2, #0x0
	ldr	r4, .L285+0x4
.L283:
	ldrb	r0, [r1]
	strb	r0, [r3]
	add	r1, r1, #0x1
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, r4
	bls	.L283	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L286:
	.align	2, 0
.L285:
	.word	gSprites
	.word	0x10ff
.Lfe30:
	.size	 CopyToSprites,.Lfe30-CopyToSprites
	.align	2, 0
	.type	 ResetAllSprites,function
	.thumb_func
ResetAllSprites:
	push	{r4, r5, lr}
	mov	r4, #0x0
.L291:
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r5, .L293
	add	r0, r0, r5
	bl	ResetSprite
	ldr	r0, .L293+0x4
	add	r0, r4, r0
	strb	r4, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3f
	bls	.L291	@cond_branch
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	ResetSprite
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gSprites
	.word	gSpriteOrder
.Lfe31:
	.size	 ResetAllSprites,.Lfe31-ResetAllSprites
	.align	2, 0
	.globl	FreeSpriteTiles
	.type	 FreeSpriteTiles,function
	.thumb_func
FreeSpriteTiles:
	push	{lr}
	ldr	r2, [r0, #0x14]
	ldrh	r1, [r2]
	ldr	r0, .L297
	cmp	r1, r0
	beq	.L296	@cond_branch
	add	r0, r1, #0
	bl	FreeSpriteTilesByTag
.L296:
	pop	{r0}
	bx	r0
.L298:
	.align	2, 0
.L297:
	.word	0xffff
.Lfe32:
	.size	 FreeSpriteTiles,.Lfe32-FreeSpriteTiles
	.align	2, 0
	.globl	FreeSpritePalette
	.type	 FreeSpritePalette,function
	.thumb_func
FreeSpritePalette:
	push	{lr}
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	bl	FreeSpritePaletteByTag
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 FreeSpritePalette,.Lfe33-FreeSpritePalette
	.align	2, 0
	.globl	FreeSpriteOamMatrix
	.type	 FreeSpriteOamMatrix,function
	.thumb_func
FreeSpriteOamMatrix:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L301	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
.L301:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 FreeSpriteOamMatrix,.Lfe34-FreeSpriteOamMatrix
	.align	2, 0
	.globl	DestroySpriteAndFreeResources
	.type	 DestroySpriteAndFreeResources,function
	.thumb_func
DestroySpriteAndFreeResources:
	push	{r4, lr}
	add	r4, r0, #0
	bl	FreeSpriteTiles
	add	r0, r4, #0
	bl	FreeSpritePalette
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 DestroySpriteAndFreeResources,.Lfe35-DestroySpriteAndFreeResources
	.align	2, 0
	.globl	AnimateSprite
	.type	 AnimateSprite,function
	.thumb_func
AnimateSprite:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r2, .L305
	add	r5, r4, #0
	add	r5, r5, #0x3f
	ldrb	r1, [r5]
	mov	r0, #0x4
	and	r0, r0, r1
	add	r0, r0, r2
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	ldr	r0, .L305+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L304	@cond_branch
	ldr	r0, .L305+0x8
	ldrb	r1, [r5]
	lsl	r1, r1, #0x1c
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r4, #0
	bl	_call_via_r1
.L304:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	sAnimFuncs
	.word	gAffineAnimsDisabled
	.word	sAffineAnimFuncs
.Lfe36:
	.size	 AnimateSprite,.Lfe36-AnimateSprite
	.align	2, 0
	.type	 BeginAnim,function
	.thumb_func
BeginAnim:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r4, r0, #0
	add	r3, r4, #0
	add	r3, r3, #0x2b
	mov	r2, #0x0
	strb	r2, [r3]
	add	r5, r4, #0
	add	r5, r5, #0x3f
	ldrb	r1, [r5]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r5]
	add	r0, r4, #0
	add	r0, r0, #0x2d
	strb	r2, [r0]
	add	r2, r4, #0
	add	r2, r2, #0x2a
	ldrb	r1, [r2]
	ldr	r0, [r4, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r3]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r9, r0
	lsl	r0, r0, #0x10
	mov	r8, r0
	asr	r1, r0, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L308	@cond_branch
	ldrb	r1, [r5]
	sub	r0, r0, #0x4
	and	r0, r0, r1
	strb	r0, [r5]
	ldrb	r1, [r2]
	ldr	r0, [r4, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r3]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r1, r0, #0xa
	lsr	r3, r1, #0x1a
	lsl	r1, r0, #0x9
	lsr	r7, r1, #0x1f
	lsl	r0, r0, #0x8
	lsr	r6, r0, #0x1f
	cmp	r3, #0
	beq	.L309	@cond_branch
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L309:
	add	r2, r4, #0
	add	r2, r2, #0x2c
	mov	r0, #0x3f
	and	r3, r3, r0
	ldrb	r1, [r2]
	sub	r0, r0, #0x7f
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L310	@cond_branch
	add	r0, r4, #0
	add	r1, r7, #0
	add	r2, r6, #0
	bl	SetSpriteOamFlipBits
.L310:
	ldrb	r1, [r5]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L311	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x40
	ldrh	r1, [r0]
	add	r1, r1, r9
	ldr	r2, .L313
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r2, [r4, #0x4]
	ldr	r0, .L313+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	b	.L308
.L314:
	.align	2, 0
.L313:
	.word	0x3ff
	.word	-0x400
.L311:
	mov	r1, r8
	lsr	r0, r1, #0x10
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldr	r2, [r4, #0xc]
	bl	RequestSpriteFrameImageCopy
.L308:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 BeginAnim,.Lfe37-BeginAnim
	.align	2, 0
	.type	 ContinueAnim,function
	.thumb_func
ContinueAnim:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r0, #0x3f
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L316	@cond_branch
	add	r0, r4, #0
	bl	DecrementAnimDelayCounter
	add	r0, r4, #0
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	ldr	r0, [r4, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r1, r0, #0x9
	lsr	r3, r1, #0x1f
	lsl	r0, r0, #0x8
	lsr	r2, r0, #0x1f
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L318	@cond_branch
	add	r0, r4, #0
	add	r1, r3, #0
	bl	SetSpriteOamFlipBits
	b	.L318
.L316:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L318	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x2b
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	add	r0, r4, #0
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	ldr	r1, [r4, #0x8]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r2]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r2, #0x3
	mov	r3, #0x0
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bge	.L320	@cond_branch
	add	r0, r0, #0x3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L320:
	ldr	r0, .L321
	lsl	r1, r2, #0x10
	asr	r1, r1, #0xe
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r4, #0
	bl	_call_via_r1
.L318:
	pop	{r4}
	pop	{r0}
	bx	r0
.L322:
	.align	2, 0
.L321:
	.word	sAnimCmdFuncs
.Lfe38:
	.size	 ContinueAnim,.Lfe38-ContinueAnim
	.align	2, 0
	.type	 AnimCmd_frame,function
	.thumb_func
AnimCmd_frame:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	ldr	r0, [r4, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r7, [r0]
	mov	r8, r7
	ldr	r0, [r0]
	lsl	r1, r0, #0xa
	lsr	r3, r1, #0x1a
	lsl	r1, r0, #0x9
	lsr	r6, r1, #0x1f
	lsl	r0, r0, #0x8
	lsr	r5, r0, #0x1f
	cmp	r3, #0
	beq	.L324	@cond_branch
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L324:
	add	r2, r4, #0
	add	r2, r2, #0x2c
	mov	r0, #0x3f
	and	r3, r3, r0
	ldrb	r1, [r2]
	sub	r0, r0, #0x7f
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L325	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	SetSpriteOamFlipBits
.L325:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L326	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x40
	ldrh	r1, [r0]
	add	r1, r1, r7
	ldr	r2, .L328
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r2, [r4, #0x4]
	ldr	r0, .L328+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	b	.L327
.L329:
	.align	2, 0
.L328:
	.word	0x3ff
	.word	-0x400
.L326:
	mov	r0, r8
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldr	r2, [r4, #0xc]
	bl	RequestSpriteFrameImageCopy
.L327:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 AnimCmd_frame,.Lfe39-AnimCmd_frame
	.align	2, 0
	.type	 AnimCmd_end,function
	.thumb_func
AnimCmd_end:
	add	r2, r0, #0
	add	r2, r2, #0x2b
	ldrb	r1, [r2]
	sub	r1, r1, #0x1
	strb	r1, [r2]
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r2, #0x10
	orr	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.Lfe40:
	.size	 AnimCmd_end,.Lfe40-AnimCmd_end
	.align	2, 0
	.type	 AnimCmd_jump,function
	.thumb_func
AnimCmd_jump:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	add	r3, r4, #0
	add	r3, r3, #0x2a
	ldrb	r1, [r3]
	ldr	r0, [r4, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r2, r4, #0
	add	r2, r2, #0x2b
	ldrb	r0, [r2]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0xa
	lsr	r0, r0, #0x1a
	strb	r0, [r2]
	ldrb	r0, [r3]
	ldr	r1, [r4, #0x8]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r2]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r7, [r1]
	mov	r8, r7
	ldr	r0, [r1]
	lsl	r1, r0, #0xa
	lsr	r3, r1, #0x1a
	lsl	r1, r0, #0x9
	lsr	r6, r1, #0x1f
	lsl	r0, r0, #0x8
	lsr	r5, r0, #0x1f
	cmp	r3, #0
	beq	.L332	@cond_branch
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L332:
	add	r2, r4, #0
	add	r2, r2, #0x2c
	mov	r0, #0x3f
	and	r3, r3, r0
	ldrb	r1, [r2]
	sub	r0, r0, #0x7f
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L333	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	SetSpriteOamFlipBits
.L333:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L334	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x40
	ldrh	r1, [r0]
	add	r1, r1, r7
	ldr	r2, .L336
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r2, [r4, #0x4]
	ldr	r0, .L336+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	b	.L335
.L337:
	.align	2, 0
.L336:
	.word	0x3ff
	.word	-0x400
.L334:
	mov	r0, r8
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldr	r2, [r4, #0xc]
	bl	RequestSpriteFrameImageCopy
.L335:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 AnimCmd_jump,.Lfe41-AnimCmd_jump
	.align	2, 0
	.type	 AnimCmd_loop,function
	.thumb_func
AnimCmd_loop:
	push	{lr}
	add	r1, r0, #0
	add	r0, r0, #0x2d
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L339	@cond_branch
	add	r0, r1, #0
	bl	ContinueAnimLoop
	b	.L340
.L339:
	add	r0, r1, #0
	bl	BeginAnimLoop
.L340:
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 AnimCmd_loop,.Lfe42-AnimCmd_loop
	.align	2, 0
	.type	 BeginAnimLoop,function
	.thumb_func
BeginAnimLoop:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	ldr	r0, [r4, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0xa
	lsr	r0, r0, #0x1a
	add	r1, r4, #0
	add	r1, r1, #0x2d
	strb	r0, [r1]
	add	r0, r4, #0
	bl	JumpToTopOfAnimLoop
	add	r0, r4, #0
	bl	ContinueAnim
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 BeginAnimLoop,.Lfe43-BeginAnimLoop
	.align	2, 0
	.type	 ContinueAnimLoop,function
	.thumb_func
ContinueAnimLoop:
	push	{r4, lr}
	add	r4, r0, #0
	add	r1, r4, #0
	add	r1, r1, #0x2d
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	add	r0, r4, #0
	bl	JumpToTopOfAnimLoop
	add	r0, r4, #0
	bl	ContinueAnim
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 ContinueAnimLoop,.Lfe44-ContinueAnimLoop
	.align	2, 0
	.type	 JumpToTopOfAnimLoop,function
	.thumb_func
JumpToTopOfAnimLoop:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r0
	add	r0, r0, #0x2d
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L344	@cond_branch
	mov	r3, ip
	add	r3, r3, #0x2b
	ldrb	r0, [r3]
	sub	r0, r0, #0x1
	strb	r0, [r3]
	mov	r5, ip
	add	r5, r5, #0x2a
	ldrb	r1, [r5]
	mov	r2, ip
	ldr	r0, [r2, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r3]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	sub	r0, r0, #0x4
	mov	r7, #0x0
	ldrsh	r0, [r0, r7]
	mov	r1, #0x3
	neg	r1, r1
	add	r4, r3, #0
	cmp	r0, r1
	beq	.L346	@cond_branch
	add	r6, r1, #0
	add	r2, r4, #0
.L347:
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L346	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r3]
	ldrb	r1, [r5]
	mov	r7, ip
	ldr	r0, [r7, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r2]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	sub	r0, r0, #0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, r6
	bne	.L347	@cond_branch
.L346:
	ldrb	r0, [r4]
	sub	r0, r0, #0x1
	strb	r0, [r4]
.L344:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 JumpToTopOfAnimLoop,.Lfe45-JumpToTopOfAnimLoop
	.align	2, 0
	.type	 BeginAffineAnim,function
	.thumb_func
BeginAffineAnim:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L351	@cond_branch
	ldr	r0, [r6, #0x10]
	ldr	r0, [r0]
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldr	r0, .L353
	cmp	r1, r0
	beq	.L351	@cond_branch
	add	r0, r6, #0
	bl	GetSpriteMatrixNum
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	AffineAnimStateRestartAnim
	mov	r5, sp
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, sp
	bl	GetAffineAnimFrame
	add	r7, r6, #0
	add	r7, r7, #0x3f
	ldrb	r1, [r7]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, sp
	bl	ApplyAffineAnimFrame
	ldr	r1, .L353+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r5, #0x5]
	strb	r1, [r0, #0x2]
	ldrb	r1, [r7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L351	@cond_branch
	mov	r0, #0x3a
	ldrsh	r1, [r6, r0]
	mov	r0, #0x3c
	ldrsh	r2, [r6, r0]
	add	r0, r6, #0
	bl	UpdateSpriteMatrixAnchorPos
.L351:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L354:
	.align	2, 0
.L353:
	.word	0x7fff
	.word	sAffineAnimStates
.Lfe46:
	.size	 BeginAffineAnim,.Lfe46-BeginAffineAnim
	.align	2, 0
	.type	 ContinueAffineAnim,function
	.thumb_func
ContinueAffineAnim:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L355	@cond_branch
	add	r0, r4, #0
	bl	GetSpriteMatrixNum
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r5, r2, #0
	ldr	r1, .L363
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x2]
	cmp	r0, #0
	beq	.L357	@cond_branch
	add	r0, r2, #0
	add	r1, r4, #0
	bl	AffineAnimDelay
	b	.L358
.L364:
	.align	2, 0
.L363:
	.word	sAffineAnimStates
.L357:
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L355	@cond_branch
	ldrb	r0, [r3, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r3, #0x1]
	ldrb	r0, [r3]
	ldr	r1, [r4, #0x10]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r3, #0x1]
	ldr	r0, [r0]
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x3
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	ldr	r0, .L365
	cmp	r1, r0
	ble	.L361	@cond_branch
	ldr	r2, .L365+0x4
	add	r0, r1, r2
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L361:
	ldr	r0, .L365+0x8
	lsl	r1, r2, #0x10
	asr	r1, r1, #0xe
	add	r1, r1, r0
	ldr	r2, [r1]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	_call_via_r2
.L358:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L355	@cond_branch
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	mov	r0, #0x3c
	ldrsh	r2, [r4, r0]
	add	r0, r4, #0
	bl	UpdateSpriteMatrixAnchorPos
.L355:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L366:
	.align	2, 0
.L365:
	.word	0x7ffc
	.word	-0x7ffd
	.word	sAffineAnimCmdFuncs
.Lfe47:
	.size	 ContinueAffineAnim,.Lfe47-ContinueAffineAnim
	.align	2, 0
	.type	 AffineAnimDelay,function
	.thumb_func
AffineAnimDelay:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	DecrementAffineAnimDelayCounter
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L368	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, sp
	bl	GetAffineAnimFrame
	add	r0, r4, #0
	mov	r1, sp
	bl	ApplyAffineAnimFrameRelativeAndUpdateMatrix
.L368:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 AffineAnimDelay,.Lfe48-AffineAnimDelay
	.align	2, 0
	.type	 AffineAnimCmd_loop,function
	.thumb_func
AffineAnimCmd_loop:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L372
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0
	beq	.L370	@cond_branch
	add	r0, r2, #0
	add	r1, r3, #0
	bl	ContinueAffineAnimLoop
	b	.L371
.L373:
	.align	2, 0
.L372:
	.word	sAffineAnimStates
.L370:
	add	r0, r2, #0
	add	r1, r3, #0
	bl	BeginAffineAnimLoop
.L371:
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 AffineAnimCmd_loop,.Lfe49-AffineAnimCmd_loop
	.align	2, 0
	.type	 BeginAffineAnimLoop,function
	.thumb_func
BeginAffineAnimLoop:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L375
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r3, r3, r1
	ldrb	r2, [r3]
	ldr	r1, [r4, #0x10]
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldrb	r1, [r3, #0x1]
	ldr	r2, [r2]
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r1, [r1, #0x2]
	strb	r1, [r3, #0x3]
	add	r1, r4, #0
	bl	JumpToTopOfAffineAnimLoop
	add	r0, r4, #0
	bl	ContinueAffineAnim
	pop	{r4}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	sAffineAnimStates
.Lfe50:
	.size	 BeginAffineAnimLoop,.Lfe50-BeginAffineAnimLoop
	.align	2, 0
	.type	 ContinueAffineAnimLoop,function
	.thumb_func
ContinueAffineAnimLoop:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L378
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x3]
	sub	r2, r2, #0x1
	strb	r2, [r1, #0x3]
	add	r1, r4, #0
	bl	JumpToTopOfAffineAnimLoop
	add	r0, r4, #0
	bl	ContinueAffineAnim
	pop	{r4}
	pop	{r0}
	bx	r0
.L379:
	.align	2, 0
.L378:
	.word	sAffineAnimStates
.Lfe51:
	.size	 ContinueAffineAnimLoop,.Lfe51-ContinueAffineAnimLoop
	.align	2, 0
	.type	 JumpToTopOfAffineAnimLoop,function
	.thumb_func
JumpToTopOfAffineAnimLoop:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L387
	lsl	r3, r5, #0x1
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r0, [r2, #0x3]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L381	@cond_branch
	ldrb	r0, [r2, #0x1]
	sub	r0, r0, #0x1
	strb	r0, [r2, #0x1]
	add	r4, r3, #0
	b	.L382
.L388:
	.align	2, 0
.L387:
	.word	sAffineAnimStates
.L384:
	cmp	r2, #0
	beq	.L383	@cond_branch
	sub	r0, r2, #0x1
	strb	r0, [r3, #0x1]
.L382:
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r3, r0, r6
	ldrb	r0, [r3]
	mov	r2, ip
	ldr	r1, [r2, #0x10]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r3, #0x1]
	ldr	r1, [r0]
	lsl	r0, r2, #0x3
	add	r0, r0, r1
	sub	r0, r0, #0x8
	mov	r7, #0x0
	ldrsh	r1, [r0, r7]
	ldr	r0, .L389
	cmp	r1, r0
	bne	.L384	@cond_branch
.L383:
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1, #0x1]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x1]
.L381:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L390:
	.align	2, 0
.L389:
	.word	0x7ffd
.Lfe52:
	.size	 JumpToTopOfAffineAnimLoop,.Lfe52-JumpToTopOfAffineAnimLoop
	.align	2, 0
	.type	 AffineAnimCmd_jump,function
	.thumb_func
AffineAnimCmd_jump:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L392
	lsl	r4, r5, #0x1
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrb	r2, [r4]
	ldr	r0, [r1, #0x10]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrb	r0, [r4, #0x1]
	ldr	r2, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2]
	strb	r0, [r4, #0x1]
	mov	r6, sp
	add	r0, r5, #0
	mov	r2, sp
	bl	GetAffineAnimFrame
	add	r0, r5, #0
	mov	r1, sp
	bl	ApplyAffineAnimFrame
	ldrb	r0, [r6, #0x5]
	strb	r0, [r4, #0x2]
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L393:
	.align	2, 0
.L392:
	.word	sAffineAnimStates
.Lfe53:
	.size	 AffineAnimCmd_jump,.Lfe53-AffineAnimCmd_jump
	.align	2, 0
	.type	 AffineAnimCmd_end,function
	.thumb_func
AffineAnimCmd_end:
	push	{lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	mov	r3, #0
	str	r2, [sp]
	str	r3, [sp, #0x4]
	add	r1, r1, #0x3f
	ldrb	r2, [r1]
	mov	r3, #0x20
	orr	r2, r2, r3
	strb	r2, [r1]
	ldr	r2, .L395
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x1]
	sub	r2, r2, #0x1
	strb	r2, [r1, #0x1]
	mov	r1, sp
	bl	ApplyAffineAnimFrameRelativeAndUpdateMatrix
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L396:
	.align	2, 0
.L395:
	.word	sAffineAnimStates
.Lfe54:
	.size	 AffineAnimCmd_end,.Lfe54-AffineAnimCmd_end
	.align	2, 0
	.type	 AffineAnimCmd_frame,function
	.thumb_func
AffineAnimCmd_frame:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r5, sp
	add	r0, r4, #0
	mov	r2, sp
	bl	GetAffineAnimFrame
	add	r0, r4, #0
	mov	r1, sp
	bl	ApplyAffineAnimFrame
	ldr	r1, .L398
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r5, #0x5]
	strb	r1, [r0, #0x2]
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L399:
	.align	2, 0
.L398:
	.word	sAffineAnimStates
.Lfe55:
	.size	 AffineAnimCmd_frame,.Lfe55-AffineAnimCmd_frame
	.align	2, 0
	.type	 CopyOamMatrix,function
	.thumb_func
CopyOamMatrix:
	lsl	r0, r0, #0x18
	ldr	r2, .L401
	lsr	r0, r0, #0x15
	add	r0, r0, r2
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldrh	r2, [r1, #0x2]
	strh	r2, [r0, #0x2]
	ldrh	r2, [r1, #0x4]
	strh	r2, [r0, #0x4]
	ldrh	r1, [r1, #0x6]
	strh	r1, [r0, #0x6]
	bx	lr
.L402:
	.align	2, 0
.L401:
	.word	gOamMatrices
.Lfe56:
	.size	 CopyOamMatrix,.Lfe56-CopyOamMatrix
	.align	2, 0
	.type	 GetSpriteMatrixNum,function
	.thumb_func
GetSpriteMatrixNum:
	push	{lr}
	add	r2, r0, #0
	mov	r3, #0x0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L404	@cond_branch
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r3, r0, #0x1b
.L404:
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.Lfe57:
	.size	 GetSpriteMatrixNum,.Lfe57-GetSpriteMatrixNum
	.align	2, 0
	.globl	SetSpriteMatrixAnchor
	.type	 SetSpriteMatrixAnchor,function
	.thumb_func
SetSpriteMatrixAnchor:
	strh	r1, [r0, #0x3a]
	strh	r2, [r0, #0x3c]
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.Lfe58:
	.size	 SetSpriteMatrixAnchor,.Lfe58-SetSpriteMatrixAnchor
	.align	2, 0
	.type	 GetAnchorCoord,function
	.thumb_func
GetAnchorCoord:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r2, #0
	sub	r0, r1, r3
	cmp	r0, #0
	bge	.L407	@cond_branch
	neg	r0, r0
	asr	r4, r0, #0x9
	b	.L408
.L407:
	asr	r0, r0, #0x9
	neg	r4, r0
.L408:
	mov	r0, r5
	mul	r0, r0, r1
	add	r1, r3, #0
	bl	__udivsi3
	add	r0, r0, r4
	sub	r0, r5, r0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 GetAnchorCoord,.Lfe59-GetAnchorCoord
	.align	2, 0
	.type	 UpdateSpriteMatrixAnchorPos,function
	.thumb_func
UpdateSpriteMatrixAnchorPos:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	ldrb	r1, [r5, #0x3]
	lsl	r0, r1, #0x1a
	lsr	r7, r0, #0x1b
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	mov	r9, r0
	cmp	r6, r9
	beq	.L410	@cond_branch
	ldr	r2, .L412
	lsr	r1, r1, #0x6
	lsl	r1, r1, #0x3
	ldrb	r0, [r5, #0x1]
	lsr	r0, r0, #0x6
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, r2
	ldr	r0, [r1]
	lsl	r4, r0, #0x8
	lsl	r0, r0, #0x10
	ldr	r2, .L412+0x4
	lsl	r1, r7, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	add	r1, r0, #0
	add	r0, r4, #0
	add	r2, r6, #0
	bl	GetAnchorCoord
	strh	r0, [r5, #0x24]
.L410:
	cmp	r8, r9
	beq	.L411	@cond_branch
	ldr	r2, .L412
	ldrb	r1, [r5, #0x3]
	lsr	r1, r1, #0x6
	lsl	r1, r1, #0x3
	ldrb	r0, [r5, #0x1]
	lsr	r0, r0, #0x6
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r2, r2, #0x4
	add	r1, r1, r2
	ldr	r0, [r1]
	lsl	r4, r0, #0x8
	lsl	r0, r0, #0x10
	ldr	r2, .L412+0x4
	lsl	r1, r7, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, r8
	bl	GetAnchorCoord
	strh	r0, [r5, #0x26]
.L411:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L413:
	.align	2, 0
.L412:
	.word	sOamDimensionsCopy
	.word	gOamMatrices
.Lfe60:
	.size	 UpdateSpriteMatrixAnchorPos,.Lfe60-UpdateSpriteMatrixAnchorPos
	.align	2, 0
	.type	 SetSpriteOamFlipBits,function
	.thumb_func
SetSpriteOamFlipBits:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r6, [r0, #0x3]
	lsl	r3, r6, #0x1a
	lsr	r3, r3, #0x1b
	mov	r4, #0x7
	and	r3, r3, r4
	lsl	r3, r3, #0x1
	sub	r4, r4, #0x46
	mov	r8, r4
	mov	r5, r8
	and	r5, r5, r6
	orr	r5, r5, r3
	strb	r5, [r0, #0x3]
	lsl	r4, r5, #0x1a
	lsr	r4, r4, #0x1b
	mov	r6, #0x3f
	add	r6, r6, r0
	mov	ip, r6
	ldrb	r3, [r6]
	lsl	r3, r3, #0x1f
	lsr	r3, r3, #0x1f
	eor	r1, r1, r3
	mov	r6, #0x1
	and	r1, r1, r6
	lsl	r1, r1, #0x3
	orr	r4, r4, r1
	lsl	r4, r4, #0x1
	mov	r3, r8
	and	r3, r3, r5
	orr	r3, r3, r4
	strb	r3, [r0, #0x3]
	lsl	r4, r3, #0x1a
	lsr	r4, r4, #0x1b
	mov	r5, ip
	ldrb	r1, [r5]
	lsl	r1, r1, #0x1e
	lsr	r1, r1, #0x1f
	eor	r2, r2, r1
	and	r2, r2, r6
	lsl	r2, r2, #0x4
	orr	r4, r4, r2
	lsl	r4, r4, #0x1
	mov	r6, r8
	and	r3, r3, r6
	orr	r3, r3, r4
	strb	r3, [r0, #0x3]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 SetSpriteOamFlipBits,.Lfe61-SetSpriteOamFlipBits
	.align	2, 0
	.type	 AffineAnimStateRestartAnim,function
	.thumb_func
AffineAnimStateRestartAnim:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L416
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x0
	strb	r0, [r1, #0x1]
	strb	r0, [r1, #0x2]
	strb	r0, [r1, #0x3]
	bx	lr
.L417:
	.align	2, 0
.L416:
	.word	sAffineAnimStates
.Lfe62:
	.size	 AffineAnimStateRestartAnim,.Lfe62-AffineAnimStateRestartAnim
	.align	2, 0
	.type	 AffineAnimStateStartAnim,function
	.thumb_func
AffineAnimStateStartAnim:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L419
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	mov	r3, #0x0
	strb	r1, [r2]
	strb	r3, [r2, #0x1]
	strb	r3, [r2, #0x2]
	strb	r3, [r2, #0x3]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r2, #0x4]
	strh	r0, [r2, #0x6]
	strh	r3, [r2, #0x8]
	bx	lr
.L420:
	.align	2, 0
.L419:
	.word	sAffineAnimStates
.Lfe63:
	.size	 AffineAnimStateStartAnim,.Lfe63-AffineAnimStateStartAnim
	.align	2, 0
	.type	 AffineAnimStateReset,function
	.thumb_func
AffineAnimStateReset:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L422
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x0
	strb	r0, [r1]
	strb	r0, [r1, #0x1]
	strb	r0, [r1, #0x2]
	strb	r0, [r1, #0x3]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	strh	r2, [r1, #0x4]
	strh	r2, [r1, #0x6]
	strh	r0, [r1, #0x8]
	bx	lr
.L423:
	.align	2, 0
.L422:
	.word	sAffineAnimStates
.Lfe64:
	.size	 AffineAnimStateReset,.Lfe64-AffineAnimStateReset
	.align	2, 0
	.type	 ApplyAffineAnimFrameAbsolute,function
	.thumb_func
ApplyAffineAnimFrameAbsolute:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L425
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r0, [r1]
	strh	r0, [r2, #0x4]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r2, #0x6]
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x8
	strh	r0, [r2, #0x8]
	bx	lr
.L426:
	.align	2, 0
.L425:
	.word	sAffineAnimStates
.Lfe65:
	.size	 ApplyAffineAnimFrameAbsolute,.Lfe65-ApplyAffineAnimFrameAbsolute
	.align	2, 0
	.type	 DecrementAnimDelayCounter,function
	.thumb_func
DecrementAnimDelayCounter:
	push	{lr}
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r2, [r3]
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L428	@cond_branch
	lsl	r0, r2, #0x1a
	lsr	r0, r0, #0x1a
	sub	r0, r0, #0x1
	mov	r1, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3]
.L428:
	pop	{r0}
	bx	r0
.Lfe66:
	.size	 DecrementAnimDelayCounter,.Lfe66-DecrementAnimDelayCounter
	.align	2, 0
	.type	 DecrementAffineAnimDelayCounter,function
	.thumb_func
DecrementAffineAnimDelayCounter:
	push	{lr}
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r1, [r3]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L430	@cond_branch
	ldr	r0, .L431
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x2]
.L430:
	ldrb	r0, [r3]
	lsr	r0, r0, #0x7
	pop	{r1}
	bx	r1
.L432:
	.align	2, 0
.L431:
	.word	sAffineAnimStates
.Lfe67:
	.size	 DecrementAffineAnimDelayCounter,.Lfe67-DecrementAffineAnimDelayCounter
	.align	2, 0
	.type	 ApplyAffineAnimFrameRelativeAndUpdateMatrix,function
	.thumb_func
ApplyAffineAnimFrameRelativeAndUpdateMatrix:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L434
	lsl	r4, r5, #0x1
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x4]
	add	r0, r0, r2
	strh	r0, [r4, #0x4]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x6]
	add	r0, r0, r2
	strh	r0, [r4, #0x6]
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x8
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	ldr	r2, .L434+0x4
	add	r1, r2, #0
	and	r0, r0, r1
	strh	r0, [r4, #0x8]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	bl	ConvertScaleParam
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r6, .L434+0x8
	ldr	r1, [sp]
	and	r1, r1, r6
	orr	r1, r1, r0
	str	r1, [sp]
	mov	r2, #0x6
	ldrsh	r0, [r4, r2]
	bl	ConvertScaleParam
	lsl	r0, r0, #0x10
	ldr	r2, .L434+0xc
	ldr	r1, [sp]
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [sp]
	ldrh	r1, [r4, #0x8]
	ldr	r0, [sp, #0x4]
	and	r0, r0, r6
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	add	r4, sp, #0x8
	mov	r0, sp
	add	r1, r4, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ObjAffineSet
	add	r0, r5, #0
	add	r1, r4, #0
	bl	CopyOamMatrix
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	sAffineAnimStates
	.word	-0x100
	.word	-0x10000
	.word	0xffff
.Lfe68:
	.size	 ApplyAffineAnimFrameRelativeAndUpdateMatrix,.Lfe68-ApplyAffineAnimFrameRelativeAndUpdateMatrix
	.align	2, 0
	.type	 ConvertScaleParam,function
	.thumb_func
ConvertScaleParam:
	push	{lr}
	add	r1, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	__divsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 ConvertScaleParam,.Lfe69-ConvertScaleParam
	.align	2, 0
	.type	 GetAffineAnimFrame,function
	.thumb_func
GetAffineAnimFrame:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L438
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r3
	ldrb	r3, [r4]
	ldr	r0, [r1, #0x10]
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldrb	r0, [r4, #0x1]
	ldr	r3, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r2]
	ldrb	r3, [r4]
	ldr	r0, [r1, #0x10]
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldrb	r0, [r4, #0x1]
	ldr	r3, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrh	r0, [r0, #0x2]
	strh	r0, [r2, #0x2]
	ldrb	r3, [r4]
	ldr	r0, [r1, #0x10]
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldrb	r0, [r4, #0x1]
	ldr	r3, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r0, [r0, #0x4]
	strb	r0, [r2, #0x4]
	ldrb	r3, [r4]
	ldr	r0, [r1, #0x10]
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldrb	r0, [r4, #0x1]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	strb	r0, [r2, #0x5]
	pop	{r4}
	pop	{r0}
	bx	r0
.L439:
	.align	2, 0
.L438:
	.word	sAffineAnimStates
.Lfe70:
	.size	 GetAffineAnimFrame,.Lfe70-GetAffineAnimFrame
	.align	2, 0
	.type	 ApplyAffineAnimFrame,function
	.thumb_func
ApplyAffineAnimFrame:
	push	{r4, lr}
	add	sp, sp, #-0x8
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	mov	r1, #0
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldrb	r0, [r2, #0x5]
	cmp	r0, #0
	beq	.L441	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r2, #0x5]
	add	r0, r4, #0
	add	r1, r2, #0
	bl	ApplyAffineAnimFrameRelativeAndUpdateMatrix
	b	.L442
.L441:
	add	r0, r4, #0
	add	r1, r2, #0
	bl	ApplyAffineAnimFrameAbsolute
	add	r0, r4, #0
	mov	r1, sp
	bl	ApplyAffineAnimFrameRelativeAndUpdateMatrix
.L442:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 ApplyAffineAnimFrame,.Lfe71-ApplyAffineAnimFrame
	.align	2, 0
	.globl	StartSpriteAnim
	.type	 StartSpriteAnim,function
	.thumb_func
StartSpriteAnim:
	add	r2, r0, #0
	add	r2, r2, #0x2a
	strb	r1, [r2]
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	mov	r2, #0x11
	neg	r2, r2
	and	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.Lfe72:
	.size	 StartSpriteAnim,.Lfe72-StartSpriteAnim
	.align	2, 0
	.globl	StartSpriteAnimIfDifferent
	.type	 StartSpriteAnimIfDifferent,function
	.thumb_func
StartSpriteAnimIfDifferent:
	push	{lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L445	@cond_branch
	add	r0, r2, #0
	bl	StartSpriteAnim
.L445:
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 StartSpriteAnimIfDifferent,.Lfe73-StartSpriteAnimIfDifferent
	.align	2, 0
	.globl	SeekSpriteAnim
	.type	 SeekSpriteAnim,function
	.thumb_func
SeekSpriteAnim:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r4, r3, #0
	add	r4, r4, #0x2c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x19
	lsr	r6, r0, #0x1f
	sub	r1, r1, #0x1
	add	r0, r3, #0
	add	r0, r0, #0x2b
	strb	r1, [r0]
	ldrb	r1, [r4]
	mov	r7, #0x40
	neg	r7, r7
	add	r0, r7, #0
	and	r0, r0, r1
	strb	r0, [r4]
	add	r2, r3, #0
	add	r2, r2, #0x3f
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r1, [r4]
	mov	r5, #0x41
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r1
	strb	r0, [r4]
	add	r0, r3, #0
	bl	ContinueAnim
	ldrb	r2, [r4]
	mov	r0, #0x3f
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L447	@cond_branch
	lsl	r0, r2, #0x1a
	lsr	r0, r0, #0x1a
	add	r0, r0, #0x1
	mov	r1, #0x3f
	and	r0, r0, r1
	add	r1, r7, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4]
.L447:
	lsl	r2, r6, #0x6
	ldrb	r1, [r4]
	add	r0, r5, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe74:
	.size	 SeekSpriteAnim,.Lfe74-SeekSpriteAnim
	.align	2, 0
	.globl	StartSpriteAffineAnim
	.type	 StartSpriteAffineAnim,function
	.thumb_func
StartSpriteAffineAnim:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	bl	GetSpriteMatrixNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	AffineAnimStateStartAnim
	add	r5, r5, #0x3f
	ldrb	r0, [r5]
	mov	r1, #0x8
	orr	r0, r0, r1
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 StartSpriteAffineAnim,.Lfe75-StartSpriteAffineAnim
	.align	2, 0
	.globl	StartSpriteAffineAnimIfDifferent
	.type	 StartSpriteAffineAnimIfDifferent,function
	.thumb_func
StartSpriteAffineAnimIfDifferent:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	GetSpriteMatrixNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L451
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1]
	cmp	r0, r4
	beq	.L450	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StartSpriteAffineAnim
.L450:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L452:
	.align	2, 0
.L451:
	.word	sAffineAnimStates
.Lfe76:
	.size	 StartSpriteAffineAnimIfDifferent,.Lfe76-StartSpriteAffineAnimIfDifferent
	.align	2, 0
	.globl	ChangeSpriteAffineAnim
	.type	 ChangeSpriteAffineAnim,function
	.thumb_func
ChangeSpriteAffineAnim:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	bl	GetSpriteMatrixNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L454
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	strb	r4, [r1]
	add	r5, r5, #0x3f
	ldrb	r0, [r5]
	mov	r1, #0x8
	orr	r0, r0, r1
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L455:
	.align	2, 0
.L454:
	.word	sAffineAnimStates
.Lfe77:
	.size	 ChangeSpriteAffineAnim,.Lfe77-ChangeSpriteAffineAnim
	.align	2, 0
	.globl	ChangeSpriteAffineAnimIfDifferent
	.type	 ChangeSpriteAffineAnimIfDifferent,function
	.thumb_func
ChangeSpriteAffineAnimIfDifferent:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	GetSpriteMatrixNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L458
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1]
	cmp	r0, r4
	beq	.L457	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	ChangeSpriteAffineAnim
.L457:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L459:
	.align	2, 0
.L458:
	.word	sAffineAnimStates
.Lfe78:
	.size	 ChangeSpriteAffineAnimIfDifferent,.Lfe78-ChangeSpriteAffineAnimIfDifferent
	.align	2, 0
	.globl	SetSpriteSheetFrameTileNum
	.type	 SetSpriteSheetFrameTileNum,function
	.thumb_func
SetSpriteSheetFrameTileNum:
	push	{lr}
	add	r3, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L461	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r2, [r0]
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L462	@cond_branch
	mov	r2, #0x0
.L462:
	add	r0, r3, #0
	add	r0, r0, #0x40
	ldrh	r1, [r0]
	add	r1, r1, r2
	ldr	r2, .L463
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r2, [r3, #0x4]
	ldr	r0, .L463+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
.L461:
	pop	{r0}
	bx	r0
.L464:
	.align	2, 0
.L463:
	.word	0x3ff
	.word	-0x400
.Lfe79:
	.size	 SetSpriteSheetFrameTileNum,.Lfe79-SetSpriteSheetFrameTileNum
	.align	2, 0
	.globl	ResetAffineAnimData
	.type	 ResetAffineAnimData,function
	.thumb_func
ResetAffineAnimData:
	push	{r4, lr}
	ldr	r1, .L471
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L471+0x4
	mov	r0, #0x0
	str	r0, [r1]
	bl	ResetOamMatrices
	mov	r4, #0x0
.L469:
	add	r0, r4, #0
	bl	AffineAnimStateReset
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1f
	bls	.L469	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L472:
	.align	2, 0
.L471:
	.word	gAffineAnimsDisabled
	.word	gOamMatrixAllocBitmap
.Lfe80:
	.size	 ResetAffineAnimData,.Lfe80-ResetAffineAnimData
	.align	2, 0
	.globl	AllocOamMatrix
	.type	 AllocOamMatrix,function
	.thumb_func
AllocOamMatrix:
	push	{r4, lr}
	mov	r2, #0x0
	mov	r1, #0x1
	ldr	r0, .L480
	ldr	r4, [r0]
	add	r3, r0, #0
.L476:
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L477	@cond_branch
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	add	r0, r2, #0
	b	.L479
.L481:
	.align	2, 0
.L480:
	.word	gOamMatrixAllocBitmap
.L477:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x1
	cmp	r2, #0x1f
	bls	.L476	@cond_branch
	mov	r0, #0xff
.L479:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe81:
	.size	 AllocOamMatrix,.Lfe81-AllocOamMatrix
	.align	2, 0
	.globl	FreeOamMatrix
	.type	 FreeOamMatrix,function
	.thumb_func
FreeOamMatrix:
	push	{lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, #0x0
	mov	r1, #0x1
	ldr	r3, .L487
	cmp	r0, r2
	bcs	.L484	@cond_branch
.L485:
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x1
	cmp	r0, r2
	bcc	.L485	@cond_branch
.L484:
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	str	r1, [sp]
	add	r0, r2, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	SetOamMatrix
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	gOamMatrixAllocBitmap
.Lfe82:
	.size	 FreeOamMatrix,.Lfe82-FreeOamMatrix
	.align	2, 0
	.globl	InitSpriteAffineAnim
	.type	 InitSpriteAffineAnim,function
	.thumb_func
InitSpriteAffineAnim:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	AllocOamMatrix
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xff
	beq	.L490	@cond_branch
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
	mov	r0, #0x1f
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r4, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
	add	r2, r4, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0
	bl	AffineAnimStateReset
.L490:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 InitSpriteAffineAnim,.Lfe83-InitSpriteAffineAnim
	.align	2, 0
	.globl	SetOamMatrixRotationScaling
	.type	 SetOamMatrixRotationScaling,function
	.thumb_func
SetOamMatrixRotationScaling:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x10
	add	r6, r0, #0
	add	r0, r1, #0
	add	r4, r2, #0
	add	r5, r3, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	ConvertScaleParam
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L492
	mov	r8, r1
	ldr	r1, [sp]
	mov	r2, r8
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [sp]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r0, r4, #0
	bl	ConvertScaleParam
	lsl	r0, r0, #0x10
	ldr	r2, .L492+0x4
	ldr	r1, [sp]
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [sp]
	ldr	r0, [sp, #0x4]
	mov	r1, r8
	and	r0, r0, r1
	orr	r0, r0, r5
	str	r0, [sp, #0x4]
	add	r4, sp, #0x8
	mov	r0, sp
	add	r1, r4, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ObjAffineSet
	add	r0, r6, #0
	add	r1, r4, #0
	bl	CopyOamMatrix
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	-0x10000
	.word	0xffff
.Lfe84:
	.size	 SetOamMatrixRotationScaling,.Lfe84-SetOamMatrixRotationScaling
	.align	2, 0
	.globl	LoadSpriteSheet
	.type	 LoadSpriteSheet,function
	.thumb_func
LoadSpriteSheet:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x4]
	lsr	r0, r0, #0x5
	bl	AllocSpriteTiles
	lsl	r4, r0, #0x10
	asr	r6, r4, #0x10
	cmp	r6, #0
	blt	.L495	@cond_branch
	ldrh	r0, [r5, #0x6]
	lsr	r4, r4, #0x10
	ldrh	r2, [r5, #0x4]
	lsr	r2, r2, #0x5
	add	r1, r4, #0
	bl	AllocSpriteTileRange
	ldr	r0, [r5]
	lsl	r1, r6, #0x5
	ldr	r2, .L498
	add	r1, r1, r2
	ldrh	r2, [r5, #0x4]
	lsr	r2, r2, #0x1
	bl	CpuSet
	add	r0, r4, #0
	b	.L497
.L499:
	.align	2, 0
.L498:
	.word	0x6010000
.L495:
	mov	r0, #0x0
.L497:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 LoadSpriteSheet,.Lfe85-LoadSpriteSheet
	.align	2, 0
	.globl	LoadSpriteSheets
	.type	 LoadSpriteSheets,function
	.thumb_func
LoadSpriteSheets:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L502	@cond_branch
.L504:
	lsl	r0, r4, #0x3
	add	r0, r5, r0
	bl	LoadSpriteSheet
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x3
	add	r0, r0, r5
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L504	@cond_branch
.L502:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 LoadSpriteSheets,.Lfe86-LoadSpriteSheets
	.align	2, 0
	.globl	FreeSpriteTilesByTag
	.type	 FreeSpriteTilesByTag,function
	.thumb_func
FreeSpriteTilesByTag:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	IndexOfSpriteTileTag
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xff
	beq	.L507	@cond_branch
	ldr	r0, .L513
	lsl	r1, r4, #0x2
	add	r2, r1, r0
	add	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r3, [r2]
	add	r0, r3, r0
	ldr	r1, .L513+0x4
	mov	r8, r1
	lsl	r5, r4, #0x1
	cmp	r3, r0
	bge	.L509	@cond_branch
	ldr	r1, .L513+0x8
	mov	ip, r1
	mov	r6, #0x7
	mov	r7, #0x1
	add	r4, r0, #0
.L511:
	lsr	r2, r3, #0x3
	add	r2, r2, ip
	add	r0, r3, #0
	and	r0, r0, r6
	add	r1, r7, #0
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r4
	blt	.L511	@cond_branch
.L509:
	mov	r0, r8
	add	r1, r5, r0
	ldr	r0, .L513+0xc
	strh	r0, [r1]
.L507:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L514:
	.align	2, 0
.L513:
	.word	sSpriteTileRanges
	.word	sSpriteTileRangeTags
	.word	gSpriteTileAllocBitmap
	.word	0xffff
.Lfe87:
	.size	 FreeSpriteTilesByTag,.Lfe87-FreeSpriteTilesByTag
	.align	2, 0
	.globl	FreeSpriteTileRanges
	.type	 FreeSpriteTileRanges,function
	.thumb_func
FreeSpriteTileRanges:
	push	{r4, r5, r6, r7, lr}
	mov	r2, #0x0
	ldr	r7, .L521
	ldr	r0, .L521+0x4
	add	r6, r0, #0
	ldr	r4, .L521+0x8
	mov	r3, #0x0
	add	r5, r4, #0x2
.L519:
	lsl	r1, r2, #0x1
	add	r1, r1, r7
	ldrh	r0, [r1]
	orr	r0, r0, r6
	strh	r0, [r1]
	lsl	r1, r2, #0x2
	add	r0, r1, r4
	strh	r3, [r0]
	add	r1, r1, r5
	strh	r3, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3f
	bls	.L519	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L522:
	.align	2, 0
.L521:
	.word	sSpriteTileRangeTags
	.word	0xffff
	.word	sSpriteTileRanges
.Lfe88:
	.size	 FreeSpriteTileRanges,.Lfe88-FreeSpriteTileRanges
	.align	2, 0
	.globl	GetSpriteTileStartByTag
	.type	 GetSpriteTileStartByTag,function
	.thumb_func
GetSpriteTileStartByTag:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	IndexOfSpriteTileTag
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L524	@cond_branch
	ldr	r0, .L526
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	b	.L525
.L527:
	.align	2, 0
.L526:
	.word	sSpriteTileRanges
.L524:
	ldr	r0, .L528
.L525:
	pop	{r1}
	bx	r1
.L529:
	.align	2, 0
.L528:
	.word	0xffff
.Lfe89:
	.size	 GetSpriteTileStartByTag,.Lfe89-GetSpriteTileStartByTag
	.align	2, 0
	.type	 IndexOfSpriteTileTag,function
	.thumb_func
IndexOfSpriteTileTag:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, #0x0
	ldr	r3, .L538
.L534:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L533	@cond_branch
	add	r0, r1, #0
	b	.L537
.L539:
	.align	2, 0
.L538:
	.word	sSpriteTileRangeTags
.L533:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3f
	bls	.L534	@cond_branch
	mov	r0, #0xff
.L537:
	pop	{r1}
	bx	r1
.Lfe90:
	.size	 IndexOfSpriteTileTag,.Lfe90-IndexOfSpriteTileTag
	.align	2, 0
	.globl	GetSpriteTileTagByTileStart
	.type	 GetSpriteTileTagByTileStart,function
	.thumb_func
GetSpriteTileTagByTileStart:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	ldr	r6, .L548
	ldr	r5, .L548+0x4
	ldr	r4, .L548+0x8
.L544:
	lsl	r0, r2, #0x1
	add	r1, r0, r6
	ldrh	r0, [r1]
	cmp	r0, r5
	beq	.L543	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r0, r3
	bne	.L543	@cond_branch
	ldrh	r0, [r1]
	b	.L547
.L549:
	.align	2, 0
.L548:
	.word	sSpriteTileRangeTags
	.word	0xffff
	.word	sSpriteTileRanges
.L543:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3f
	bls	.L544	@cond_branch
	ldr	r0, .L550
.L547:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L551:
	.align	2, 0
.L550:
	.word	0xffff
.Lfe91:
	.size	 GetSpriteTileTagByTileStart,.Lfe91-GetSpriteTileTagByTileStart
	.align	2, 0
	.type	 AllocSpriteTileRange,function
	.thumb_func
AllocSpriteTileRange:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	ldr	r0, .L553
	bl	IndexOfSpriteTileTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L553+0x4
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	strh	r4, [r1]
	ldr	r1, .L553+0x8
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	strh	r5, [r2]
	add	r1, r1, #0x2
	add	r0, r0, r1
	strh	r6, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L554:
	.align	2, 0
.L553:
	.word	0xffff
	.word	sSpriteTileRangeTags
	.word	sSpriteTileRanges
.Lfe92:
	.size	 AllocSpriteTileRange,.Lfe92-AllocSpriteTileRange
	.align	2, 0
	.globl	FreeAllSpritePalettes
	.type	 FreeAllSpritePalettes,function
	.thumb_func
FreeAllSpritePalettes:
	push	{r4, lr}
	ldr	r1, .L561
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r2, #0x0
	ldr	r4, .L561+0x4
	ldr	r0, .L561+0x8
	add	r3, r0, #0
.L559:
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r1, [r0]
	orr	r1, r1, r3
	strh	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xf
	bls	.L559	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L562:
	.align	2, 0
.L561:
	.word	gReservedSpritePaletteCount
	.word	sSpritePaletteTags
	.word	0xffff
.Lfe93:
	.size	 FreeAllSpritePalettes,.Lfe93-FreeAllSpritePalettes
	.align	2, 0
	.globl	LoadSpritePalette
	.type	 LoadSpritePalette,function
	.thumb_func
LoadSpritePalette:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x4]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xff
	beq	.L564	@cond_branch
	add	r0, r4, #0
	b	.L567
.L564:
	ldr	r0, .L568
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xff
	beq	.L565	@cond_branch
	ldr	r1, .L568+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r5, #0x4]
	strh	r1, [r0]
	ldr	r0, [r5]
	lsl	r1, r4, #0x4
	bl	DoLoadSpritePalette
	add	r0, r4, #0
	b	.L567
.L569:
	.align	2, 0
.L568:
	.word	0xffff
	.word	sSpritePaletteTags
.L565:
	mov	r0, #0xff
.L567:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe94:
	.size	 LoadSpritePalette,.Lfe94-LoadSpritePalette
	.align	2, 0
	.globl	LoadSpritePalettes
	.type	 LoadSpritePalettes,function
	.thumb_func
LoadSpritePalettes:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	b	.L571
.L573:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L571:
	lsl	r0, r4, #0x3
	add	r1, r0, r5
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L572	@cond_branch
	add	r0, r1, #0
	bl	LoadSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L573	@cond_branch
.L572:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 LoadSpritePalettes,.Lfe95-LoadSpritePalettes
	.align	2, 0
	.type	 DoLoadSpritePalette,function
	.thumb_func
DoLoadSpritePalette:
	push	{lr}
	lsl	r1, r1, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 DoLoadSpritePalette,.Lfe96-DoLoadSpritePalette
	.align	2, 0
	.globl	AllocSpritePalette
	.type	 AllocSpritePalette,function
	.thumb_func
AllocSpritePalette:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L582
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L579	@cond_branch
	ldr	r1, .L582+0x4
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	strh	r4, [r0]
	add	r0, r2, #0
	b	.L581
.L583:
	.align	2, 0
.L582:
	.word	0xffff
	.word	sSpritePaletteTags
.L579:
	mov	r0, #0xff
.L581:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe97:
	.size	 AllocSpritePalette,.Lfe97-AllocSpritePalette
	.align	2, 0
	.globl	IndexOfSpritePaletteTag
	.type	 IndexOfSpritePaletteTag,function
	.thumb_func
IndexOfSpritePaletteTag:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L592
	ldrb	r1, [r0]
	cmp	r1, #0xf
	bhi	.L586	@cond_branch
	ldr	r3, .L592+0x4
.L588:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L587	@cond_branch
	add	r0, r1, #0
	b	.L591
.L593:
	.align	2, 0
.L592:
	.word	gReservedSpritePaletteCount
	.word	sSpritePaletteTags
.L587:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xf
	bls	.L588	@cond_branch
.L586:
	mov	r0, #0xff
.L591:
	pop	{r1}
	bx	r1
.Lfe98:
	.size	 IndexOfSpritePaletteTag,.Lfe98-IndexOfSpritePaletteTag
	.align	2, 0
	.globl	GetSpritePaletteTagByPaletteNum
	.type	 GetSpritePaletteTagByPaletteNum,function
	.thumb_func
GetSpritePaletteTagByPaletteNum:
	lsl	r0, r0, #0x18
	ldr	r1, .L595
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r0, [r0]
	bx	lr
.L596:
	.align	2, 0
.L595:
	.word	sSpritePaletteTags
.Lfe99:
	.size	 GetSpritePaletteTagByPaletteNum,.Lfe99-GetSpritePaletteTagByPaletteNum
	.align	2, 0
	.globl	FreeSpritePaletteByTag
	.type	 FreeSpritePaletteByTag,function
	.thumb_func
FreeSpritePaletteByTag:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L598	@cond_branch
	ldr	r0, .L599
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, .L599+0x4
	strh	r0, [r1]
.L598:
	pop	{r0}
	bx	r0
.L600:
	.align	2, 0
.L599:
	.word	sSpritePaletteTags
	.word	0xffff
.Lfe100:
	.size	 FreeSpritePaletteByTag,.Lfe100-FreeSpritePaletteByTag
	.align	2, 0
	.globl	SetSubspriteTables
	.type	 SetSubspriteTables,function
	.thumb_func
SetSubspriteTables:
	str	r1, [r0, #0x18]
	add	r0, r0, #0x42
	mov	r1, #0x40
	strb	r1, [r0]
	bx	lr
.Lfe101:
	.size	 SetSubspriteTables,.Lfe101-SetSubspriteTables
	.align	2, 0
	.globl	AddSpriteToOamBuffer
	.type	 AddSpriteToOamBuffer,function
	.thumb_func
AddSpriteToOamBuffer:
	push	{r4, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	ldr	r1, .L608
	ldrb	r0, [r3]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L603	@cond_branch
	mov	r0, #0x1
	b	.L607
.L609:
	.align	2, 0
.L608:
	.word	gOamLimit
.L603:
	ldr	r0, [r4, #0x18]
	cmp	r0, #0
	beq	.L605	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x42
	ldrb	r1, [r0]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L604	@cond_branch
.L605:
	ldr	r0, .L610
	ldrb	r2, [r3]
	lsl	r2, r2, #0x3
	add	r0, r0, #0x38
	add	r2, r2, r0
	ldr	r0, [r4]		@ created by thumb_load_double_from_address
	ldr	r1, [r4, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	mov	r0, #0x0
	b	.L607
.L611:
	.align	2, 0
.L610:
	.word	gMain
.L604:
	ldrb	r1, [r3]
	lsl	r1, r1, #0x3
	ldr	r0, .L612
	add	r1, r1, r0
	add	r0, r4, #0
	add	r2, r3, #0
	bl	AddSubspritesToOamBuffer
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L607:
	pop	{r4}
	pop	{r1}
	bx	r1
.L613:
	.align	2, 0
.L612:
	.word	gMain+0x38
.Lfe102:
	.size	 AddSpriteToOamBuffer,.Lfe102-AddSpriteToOamBuffer
	.align	2, 0
	.globl	AddSubspritesToOamBuffer
	.type	 AddSubspritesToOamBuffer,function
	.thumb_func
AddSubspritesToOamBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	add	r3, r0, #0
	str	r1, [sp]
	mov	r8, r2
	ldr	r0, .L631
	ldrb	r1, [r2]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L615	@cond_branch
.L630:
	mov	r0, #0x1
	b	.L628
.L632:
	.align	2, 0
.L631:
	.word	gOamLimit
.L615:
	add	r0, r3, #0
	add	r0, r0, #0x42
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x17
	ldr	r2, [r3, #0x18]
	add	r7, r2, r1
	mov	ip, r3
	str	r0, [sp, #0x18]
	cmp	r7, #0
	beq	.L617	@cond_branch
	ldr	r0, [r7, #0x4]
	cmp	r0, #0
	bne	.L616	@cond_branch
.L617:
	mov	r2, ip
	ldr	r0, [r2]		@ created by thumb_load_double_from_address
	ldr	r1, [r2, #0x4]		@ created by thumb_load_double_from_address
	ldr	r2, [sp]
	str	r0, [r2]
	str	r1, [r2, #0x4]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L618
.L616:
	mov	r2, ip
	ldrh	r0, [r2, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	str	r0, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0xc]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	asr	r1, r0, #0x3
	str	r1, [sp, #0x10]
	mov	r1, #0x1
	ldr	r2, [sp, #0x10]
	and	r2, r2, r1
	str	r2, [sp, #0x10]
	asr	r0, r0, #0x4
	mov	sl, r0
	and	r0, r0, r1
	mov	sl, r0
	mov	r1, ip
	ldrh	r0, [r1, #0x2]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x17
	add	r1, r1, #0x28
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, ip
	ldrb	r0, [r1]
	add	r1, r1, #0x29
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, [sp, #0xc]
	cmp	r9, r1
	bcc	.LCB6085
	b	.L618	@long jump
.LCB6085:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp, #0x14]
.L622:
	mov	r2, r8
	ldrb	r0, [r2]
	ldr	r1, .L633
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L630	@cond_branch
	ldr	r0, [r7, #0x4]
	mov	r2, r9
	lsl	r6, r2, #0x2
	add	r2, r6, r0
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x1
	ldrsb	r0, [r2, r0]
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, [sp, #0x10]
	cmp	r0, #0
	beq	.L624	@cond_branch
	ldr	r0, [r2]
	lsl	r1, r0, #0xc
	lsr	r1, r1, #0x1e
	lsl	r1, r1, #0x2
	lsl	r0, r0, #0xe
	lsr	r0, r0, #0x1e
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, .L633+0x4
	add	r1, r1, r0
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mvn	r0, r4
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L624:
	mov	r1, sl
	cmp	r1, #0
	beq	.L625	@cond_branch
	ldr	r0, [r2]
	lsl	r1, r0, #0xc
	lsr	r1, r1, #0x1e
	lsl	r1, r1, #0x2
	lsl	r0, r0, #0xe
	lsr	r0, r0, #0x1e
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r2, .L633+0x4
	add	r1, r1, r2
	ldrb	r1, [r1, #0x1]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mvn	r0, r5
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L625:
	mov	r1, r9
	lsl	r0, r1, #0x3
	ldr	r2, [sp]
	add	r3, r0, r2
	mov	r2, ip
	ldr	r0, [r2]		@ created by thumb_load_double_from_address
	ldr	r1, [r2, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r3]
	str	r1, [r3, #0x4]
	ldr	r0, [r7, #0x4]
	add	r0, r6, r0
	ldr	r1, [r0]
	lsl	r1, r1, #0xe
	lsr	r1, r1, #0x1e
	lsl	r1, r1, #0x6
	ldrb	r2, [r3, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x1]
	ldr	r0, [r7, #0x4]
	add	r0, r6, r0
	ldr	r1, [r0]
	lsl	r1, r1, #0xc
	lsr	r1, r1, #0x1e
	lsl	r1, r1, #0x6
	ldrb	r2, [r3, #0x3]
	mov	r0, #0x3f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x3]
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	ldr	r0, [sp, #0x14]
	add	r1, r0, r1
	ldr	r2, .L633+0x8
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r2, [r3, #0x2]
	ldr	r0, .L633+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x2]
	ldr	r1, [sp, #0x8]
	add	r0, r1, r5
	strb	r0, [r3]
	ldr	r0, [r7, #0x4]
	add	r0, r6, r0
	ldr	r1, [r0]
	lsl	r1, r1, #0x2
	lsr	r1, r1, #0x16
	ldr	r2, [sp, #0x4]
	add	r1, r2, r1
	ldr	r2, .L633+0x10
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r2, [r3, #0x4]
	ldr	r0, .L633+0x14
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldr	r0, [sp, #0x18]
	ldrb	r1, [r0]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x80
	beq	.L621	@cond_branch
	ldr	r0, [r7, #0x4]
	add	r0, r6, r0
	ldr	r1, [r0]
	lsr	r1, r1, #0x1e
	lsl	r1, r1, #0x2
	ldrb	r2, [r3, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
.L621:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, [sp, #0xc]
	cmp	r9, r2
	bcs	.LCB6295
	b	.L622	@long jump
.LCB6295:
.L618:
	mov	r0, #0x0
.L628:
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L634:
	.align	2, 0
.L633:
	.word	gOamLimit
	.word	sOamDimensions
	.word	0x1ff
	.word	-0x200
	.word	0x3ff
	.word	-0x400
.Lfe103:
	.size	 AddSubspritesToOamBuffer,.Lfe103-AddSubspritesToOamBuffer
	.comm	gReservedSpritePaletteCount, 4	@ 1

	.lcomm	sSpriteTileRangeTags,128

	.lcomm	sSpriteTileRanges,256

	.lcomm	sAffineAnimStates,384

	.lcomm	sSpritePaletteTags,32
	.comm	gOamMatrixAllocBitmap, 4	@ 4
.text
	.align	2, 0 @ Don't pad with nop

