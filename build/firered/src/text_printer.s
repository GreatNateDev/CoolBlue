@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sTempTextPrinter,object
	.size	 sTempTextPrinter,36
sTempTextPrinter:
	.word	0x0
	.space	12
	.space	20
	.align	2, 0
	.type	 sTextPrinters,object
	.size	 sTextPrinters,1152
sTextPrinters:
	.word	0x0
	.space	12
	.space	20
	.space	1116
	.section .rodata
	.type	 sFontHalfRowOffsets,object
sFontHalfRowOffsets:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x3
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x6
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0x9
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xc
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0xf
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0x9
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x12
	.byte	0x15
	.byte	0x16
	.byte	0x17
	.byte	0x15
	.byte	0x18
	.byte	0x19
	.byte	0x1a
	.byte	0x18
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x12
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x3
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x6
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.byte	0x1b
	.byte	0x1e
	.byte	0x1f
	.byte	0x20
	.byte	0x1e
	.byte	0x21
	.byte	0x22
	.byte	0x23
	.byte	0x21
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.byte	0x1b
	.byte	0x24
	.byte	0x25
	.byte	0x26
	.byte	0x24
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.byte	0x27
	.byte	0x2a
	.byte	0x2b
	.byte	0x2c
	.byte	0x2a
	.byte	0x24
	.byte	0x25
	.byte	0x26
	.byte	0x24
	.byte	0x2d
	.byte	0x2e
	.byte	0x2f
	.byte	0x2d
	.byte	0x30
	.byte	0x31
	.byte	0x32
	.byte	0x30
	.byte	0x33
	.byte	0x34
	.byte	0x35
	.byte	0x33
	.byte	0x2d
	.byte	0x2e
	.byte	0x2f
	.byte	0x2d
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.byte	0x1b
	.byte	0x1e
	.byte	0x1f
	.byte	0x20
	.byte	0x1e
	.byte	0x21
	.byte	0x22
	.byte	0x23
	.byte	0x21
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.byte	0x1b
	.byte	0x36
	.byte	0x37
	.byte	0x38
	.byte	0x36
	.byte	0x39
	.byte	0x3a
	.byte	0x3b
	.byte	0x39
	.byte	0x3c
	.byte	0x3d
	.byte	0x3e
	.byte	0x3c
	.byte	0x36
	.byte	0x37
	.byte	0x38
	.byte	0x36
	.byte	0x3f
	.byte	0x40
	.byte	0x41
	.byte	0x3f
	.byte	0x42
	.byte	0x43
	.byte	0x44
	.byte	0x42
	.byte	0x45
	.byte	0x46
	.byte	0x47
	.byte	0x45
	.byte	0x3f
	.byte	0x40
	.byte	0x41
	.byte	0x3f
	.byte	0x48
	.byte	0x49
	.byte	0x4a
	.byte	0x48
	.byte	0x4b
	.byte	0x4c
	.byte	0x4d
	.byte	0x4b
	.byte	0x4e
	.byte	0x4f
	.byte	0x50
	.byte	0x4e
	.byte	0x48
	.byte	0x49
	.byte	0x4a
	.byte	0x48
	.byte	0x36
	.byte	0x37
	.byte	0x38
	.byte	0x36
	.byte	0x39
	.byte	0x3a
	.byte	0x3b
	.byte	0x39
	.byte	0x3c
	.byte	0x3d
	.byte	0x3e
	.byte	0x3c
	.byte	0x36
	.byte	0x37
	.byte	0x38
	.byte	0x36
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x3
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x6
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0x9
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xc
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0xf
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0x9
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x12
	.byte	0x15
	.byte	0x16
	.byte	0x17
	.byte	0x15
	.byte	0x18
	.byte	0x19
	.byte	0x1a
	.byte	0x18
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x12
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x3
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x6
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.size	 sFontHalfRowOffsets,256
.text
	.align	2, 0
	.globl	SetFontsPointer
	.type	 SetFontsPointer,function
	.thumb_func
SetFontsPointer:
	ldr	r1, .L3
	str	r0, [r1]
	bx	lr
.L4:
	.align	2, 0
.L3:
	.word	gFonts
.Lfe1:
	.size	 SetFontsPointer,.Lfe1-SetFontsPointer
	.align	2, 0
	.globl	DeactivateAllTextPrinters
	.type	 DeactivateAllTextPrinters,function
	.thumb_func
DeactivateAllTextPrinters:
	push	{lr}
	ldr	r1, .L11
	mov	r2, #0x0
	ldr	r3, .L11+0x4
	add	r0, r1, r3
.L9:
	strb	r2, [r0, #0x1b]
	sub	r0, r0, #0x24
	cmp	r0, r1
	bge	.L9	@cond_branch
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	sTextPrinters
	.word	0x45c
.Lfe2:
	.size	 DeactivateAllTextPrinters,.Lfe2-DeactivateAllTextPrinters
	.align	2, 0
	.globl	AddTextPrinterParameterized
	.type	 AddTextPrinterParameterized,function
	.thumb_func
AddTextPrinterParameterized:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	ldr	r7, [sp, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r8, r5
	str	r2, [sp]
	mov	r2, sp
	strb	r0, [r2, #0x4]
	mov	r0, sp
	strb	r1, [r0, #0x5]
	strb	r3, [r0, #0x6]
	strb	r4, [r0, #0x7]
	strb	r3, [r0, #0x8]
	strb	r4, [r0, #0x9]
	ldr	r0, .L14
	ldr	r0, [r0]
	lsl	r3, r1, #0x1
	add	r3, r3, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldrb	r0, [r3, #0x6]
	strb	r0, [r2, #0xa]
	mov	r1, sp
	ldrb	r0, [r3, #0x7]
	strb	r0, [r1, #0xb]
	mov	r5, sp
	ldrb	r1, [r3, #0x8]
	lsl	r1, r1, #0x1c
	mov	r6, #0xf
	lsr	r1, r1, #0x1c
	ldrb	r4, [r5, #0xc]
	mov	r2, #0x10
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r5, #0xc]
	mov	r4, sp
	ldrb	r1, [r3, #0x8]
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	and	r0, r0, r6
	orr	r0, r0, r1
	strb	r0, [r4, #0xc]
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	add	r1, r6, #0
	and	r1, r1, r0
	ldrb	r0, [r4, #0xd]
	and	r2, r2, r0
	orr	r2, r2, r1
	strb	r2, [r4, #0xd]
	mov	r1, sp
	ldrb	r0, [r3, #0x9]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x4
	and	r2, r2, r6
	orr	r2, r2, r0
	strb	r2, [r1, #0xd]
	mov	r0, sp
	mov	r1, r8
	add	r2, r7, #0
	bl	AddTextPrinter
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L15:
	.align	2, 0
.L14:
	.word	gFonts
.Lfe3:
	.size	 AddTextPrinterParameterized,.Lfe3-AddTextPrinterParameterized
	.align	2, 0
	.globl	AddTextPrinter
	.type	 AddTextPrinter,function
	.thumb_func
AddTextPrinter:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	mov	ip, r2
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L33
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L17	@cond_branch
	mov	r0, #0x0
	b	.L32
.L34:
	.align	2, 0
.L33:
	.word	gFonts
.L17:
	ldr	r0, .L35
	mov	r2, #0x0
	mov	r1, #0x1
	strb	r1, [r0, #0x1b]
	strb	r2, [r0, #0x1c]
	strb	r5, [r0, #0x1d]
	strb	r2, [r0, #0x1e]
	strb	r2, [r0, #0x1f]
	add	r4, r0, #0
	mov	r1, #0x6
	add	r0, r0, #0x1a
.L21:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L21	@cond_branch
	add	r1, r4, #0
	add	r0, r6, #0
	ldmia	r0!, {r2, r3, r7}
	stmia	r1!, {r2, r3, r7}
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r0, ip
	str	r0, [r4, #0x10]
	add	r0, r4, #0
	add	r0, r0, #0x20
	mov	r1, #0x0
	strb	r1, [r0]
	add	r0, r0, #0x1
	strb	r1, [r0]
	ldrb	r0, [r6, #0xc]
	lsr	r0, r0, #0x4
	ldrb	r2, [r6, #0xd]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1c
	lsr	r2, r2, #0x4
	bl	GenerateFontHalfRowLookupTable
	cmp	r5, #0xff
	beq	.L23	@cond_branch
	cmp	r5, #0
	beq	.L23	@cond_branch
	ldrb	r0, [r4, #0x1d]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x1d]
	ldr	r2, .L35+0x4
	ldrb	r0, [r6, #0x4]
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r0, r4, #0
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldmia	r0!, {r2, r3, r7}
	stmia	r1!, {r2, r3, r7}
	ldmia	r0!, {r2, r4, r7}
	stmia	r1!, {r2, r4, r7}
	b	.L24
.L36:
	.align	2, 0
.L35:
	.word	sTempTextPrinter
	.word	sTextPrinters
.L23:
	ldr	r1, .L37
	mov	r0, #0x0
	strb	r0, [r1, #0x1d]
	mov	r4, #0x0
	ldr	r7, .L37+0x4
	b	.L25
.L38:
	.align	2, 0
.L37:
	.word	sTempTextPrinter
	.word	0x3ff
.L27:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L25:
	cmp	r4, r7
	bhi	.L26	@cond_branch
	ldr	r0, .L39
	bl	RenderFont
	cmp	r0, #0x1
	bne	.L27	@cond_branch
.L26:
	cmp	r5, #0xff
	beq	.L31	@cond_branch
	ldr	r0, .L39
	ldrb	r0, [r0, #0x4]
	mov	r1, #0x2
	bl	CopyWindowToVram
.L31:
	ldr	r2, .L39+0x4
	ldrb	r1, [r6, #0x4]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x1b]
.L24:
	mov	r0, #0x1
.L32:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L40:
	.align	2, 0
.L39:
	.word	sTempTextPrinter
	.word	sTextPrinters
.Lfe4:
	.size	 AddTextPrinter,.Lfe4-AddTextPrinter
	.align	2, 0
	.globl	RunTextPrinters
	.type	 RunTextPrinters,function
	.thumb_func
RunTextPrinters:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L56
	mov	r6, #0x0
	add	r5, r0, #0x4
	mov	r8, r0
	mov	r7, #0x1f
.L45:
	ldrb	r0, [r5, #0x17]
	cmp	r0, #0
	beq	.L44	@cond_branch
	mov	r0, r8
	bl	RenderFont
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x1
	beq	.L51	@cond_branch
	cmp	r4, #0x1
	bgt	.L54	@cond_branch
	cmp	r4, #0
	beq	.L48	@cond_branch
	b	.L44
.L57:
	.align	2, 0
.L56:
	.word	sTextPrinters
.L54:
	cmp	r4, #0x3
	beq	.L49	@cond_branch
	b	.L44
.L48:
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	CopyWindowToVram
.L49:
	ldr	r1, .L58
	add	r0, r1, #0
	add	r0, r0, #0x10
	add	r0, r6, r0
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L44	@cond_branch
	add	r0, r6, r1
	add	r1, r4, #0
	bl	_call_via_r2
	b	.L44
.L59:
	.align	2, 0
.L58:
	.word	sTextPrinters
.L51:
	mov	r0, #0x0
	strb	r0, [r5, #0x17]
.L44:
	add	r6, r6, #0x24
	add	r5, r5, #0x24
	mov	r0, #0x24
	add	r8, r8, r0
	sub	r7, r7, #0x1
	cmp	r7, #0
	bge	.L45	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 RunTextPrinters,.Lfe5-RunTextPrinters
	.align	2, 0
	.globl	IsTextPrinterActive
	.type	 IsTextPrinterActive,function
	.thumb_func
IsTextPrinterActive:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L61
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x1b]
	bx	lr
.L62:
	.align	2, 0
.L61:
	.word	sTextPrinters
.Lfe6:
	.size	 IsTextPrinterActive,.Lfe6-IsTextPrinterActive
	.align	2, 0
	.globl	RenderFont
	.type	 RenderFont,function
	.thumb_func
RenderFont:
	push	{r4, lr}
	add	r4, r0, #0
.L66:
	ldrb	r1, [r4, #0x5]
	ldr	r0, .L69
	ldr	r2, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	beq	.L66	@cond_branch
	pop	{r4}
	pop	{r1}
	bx	r1
.L70:
	.align	2, 0
.L69:
	.word	gFonts
.Lfe7:
	.size	 RenderFont,.Lfe7-RenderFont
	.align	2, 0
	.globl	GenerateFontHalfRowLookupTable
	.type	 GenerateFontHalfRowLookupTable,function
	.thumb_func
GenerateFontHalfRowLookupTable:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r1, [sp]
	str	r0, [sp, #0x4]
	str	r2, [sp, #0x8]
	ldr	r3, .L92
	strh	r1, [r3]
	ldr	r1, .L92+0x4
	strh	r0, [r1]
	ldr	r0, .L92+0x8
	strh	r2, [r0]
	mov	r0, #0x0
	mov	ip, r0
	mov	r1, #0x0
.L75:
	mov	r2, #0x0
	lsl	r0, r1, #0x2
	add	r1, r1, #0x1
	mov	sl, r1
	add	r0, r0, sp
	mov	r8, r0
.L79:
	mov	r1, #0x0
	lsl	r0, r2, #0x2
	add	r2, r2, #0x1
	mov	r9, r2
	add	r0, r0, sp
	str	r0, [sp, #0xc]
.L83:
	lsl	r0, r1, #0x2
	add	r6, r1, #0x1
	mov	r1, sp
	add	r4, r1, r0
	mov	r5, sp
	mov	r7, ip
	lsl	r0, r7, #0x1
	ldr	r1, .L92+0xc
	add	r2, r0, r1
	mov	r3, #0x2
.L87:
	ldmia	r5!, {r1}
	lsl	r1, r1, #0xc
	ldr	r0, [r4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r7, [sp, #0xc]
	ldr	r0, [r7]
	lsl	r0, r0, #0x4
	orr	r1, r1, r0
	mov	r7, r8
	ldr	r0, [r7]
	orr	r0, r0, r1
	strh	r0, [r2]
	add	r2, r2, #0x2
	mov	r0, #0x1
	add	ip, ip, r0
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L87	@cond_branch
	add	r1, r6, #0
	cmp	r1, #0x2
	ble	.L83	@cond_branch
	mov	r2, r9
	cmp	r2, #0x2
	ble	.L79	@cond_branch
	mov	r1, sl
	cmp	r1, #0x2
	ble	.L75	@cond_branch
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	sLastTextBgColor
	.word	sLastTextFgColor
	.word	sLastTextShadowColor
	.word	sFontHalfRowLookupTable
.Lfe8:
	.size	 GenerateFontHalfRowLookupTable,.Lfe8-GenerateFontHalfRowLookupTable
	.align	2, 0
	.globl	SaveTextColors
	.type	 SaveTextColors,function
	.thumb_func
SaveTextColors:
	ldr	r3, .L95
	ldrh	r3, [r3]
	strb	r3, [r1]
	ldr	r1, .L95+0x4
	ldrh	r1, [r1]
	strb	r1, [r0]
	ldr	r0, .L95+0x8
	ldrh	r0, [r0]
	strb	r0, [r2]
	bx	lr
.L96:
	.align	2, 0
.L95:
	.word	sLastTextBgColor
	.word	sLastTextFgColor
	.word	sLastTextShadowColor
.Lfe9:
	.size	 SaveTextColors,.Lfe9-SaveTextColors
	.align	2, 0
	.globl	RestoreTextColors
	.type	 RestoreTextColors,function
	.thumb_func
RestoreTextColors:
	push	{lr}
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	ldrb	r2, [r2]
	bl	GenerateFontHalfRowLookupTable
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 RestoreTextColors,.Lfe10-RestoreTextColors
	.align	2, 0
	.globl	DecompressGlyphTile
	.type	 DecompressGlyphTile,function
	.thumb_func
DecompressGlyphTile:
	push	{r4, r5, lr}
	add	r2, r0, #0
	mov	r3, #0x0
	ldr	r5, .L106
	ldr	r4, .L106+0x4
.L102:
	lsl	r0, r3, #0x1f
	cmp	r0, #0
	beq	.L103	@cond_branch
	ldrb	r0, [r2]
	add	r2, r2, #0x2
	b	.L104
.L107:
	.align	2, 0
.L106:
	.word	sFontHalfRowLookupTable
	.word	sFontHalfRowOffsets
.L103:
	ldrh	r0, [r2]
	lsr	r0, r0, #0x8
.L104:
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0xf
	ble	.L102	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 DecompressGlyphTile,.Lfe11-DecompressGlyphTile
	.align	2, 0
	.globl	GetLastTextColor
	.type	 GetLastTextColor,function
	.thumb_func
GetLastTextColor:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x1
	beq	.L112	@cond_branch
	cmp	r0, #0x1
	bgt	.L115	@cond_branch
	cmp	r0, #0
	beq	.L110	@cond_branch
	b	.L113
.L115:
	cmp	r1, #0x2
	beq	.L111	@cond_branch
	b	.L113
.L110:
	ldr	r0, .L117
	ldrb	r0, [r0]
	b	.L116
.L118:
	.align	2, 0
.L117:
	.word	sLastTextFgColor
.L111:
	ldr	r0, .L119
	ldrb	r0, [r0]
	b	.L116
.L120:
	.align	2, 0
.L119:
	.word	sLastTextBgColor
.L112:
	ldr	r0, .L121
	ldrb	r0, [r0]
	b	.L116
.L122:
	.align	2, 0
.L121:
	.word	sLastTextShadowColor
.L113:
	mov	r0, #0x0
.L116:
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 GetLastTextColor,.Lfe12-GetLastTextColor
	.align	2, 0
	.globl	CopyGlyphToWindow
	.type	 CopyGlyphToWindow,function
	.thumb_func
CopyGlyphToWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x6c
	add	r6, r0, #0
	ldr	r0, .L238
	mov	r9, r0
	ldrb	r1, [r6, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, r9
	add	r2, r0, r1
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x3
	ldrb	r1, [r6, #0x8]
	sub	r1, r0, r1
	ldr	r3, .L238+0x4
	mov	r8, r3
	mov	r0, r8
	add	r0, r0, #0x80
	ldrb	r7, [r0]
	cmp	r1, r7
	bge	.L124	@cond_branch
	add	r7, r1, #0
.L124:
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x3
	ldrb	r4, [r6, #0x9]
	sub	r0, r0, r4
	add	r1, r3, #0
	add	r1, r1, #0x81
	ldrb	r1, [r1]
	mov	sl, r1
	add	r5, r4, #0
	cmp	r0, sl
	bge	.L126	@cond_branch
	mov	sl, r0
.L126:
	mov	r1, #0x0
	cmp	r7, #0x8
	ble	.L128	@cond_branch
	mov	r1, #0x1
.L128:
	mov	r0, sl
	cmp	r0, #0x8
	ble	.L129	@cond_branch
	mov	r0, #0x2
	orr	r1, r1, r0
.L129:
	cmp	r1, #0x1
	beq	.L143	@cond_branch
	cmp	r1, #0x1
	bgt	.L236	@cond_branch
	cmp	r1, #0
	beq	.L131	@cond_branch
	b	.L123
.L239:
	.align	2, 0
.L238:
	.word	gWindows
	.word	gGlyphInfo
.L236:
	cmp	r1, #0x2
	bne	.LCB925
	b	.L166	@long jump
.LCB925:
	cmp	r1, #0x3
	bne	.LCB927
	b	.L189	@long jump
.LCB927:
	b	.L123
.L131:
	add	r2, r3, #0
	mov	r1, #0x0
	add	r0, r5, #0
	cmp	r1, sl
	blt	.LCB938
	b	.L123	@long jump
.LCB938:
.L135:
	ldmia	r2!, {r3}
	str	r3, [sp]
	mov	r5, #0x0
	ldrb	r4, [r6, #0x8]
	str	r2, [sp, #0x28]
	add	r1, r1, #0x1
	str	r1, [sp, #0x20]
	add	r1, r0, #0x1
	str	r1, [sp, #0x24]
	cmp	r5, r7
	bge	.L137	@cond_branch
	ldr	r2, .L240
	mov	ip, r2
	asr	r3, r0, #0x3
	mov	r9, r3
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1b
	mov	r8, r0
.L139:
	ldrb	r0, [r6, #0x4]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r3, r1
	asr	r2, r4, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r3, r3, ip
	ldrb	r0, [r3, #0x3]
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r0, r8
	add	r3, r1, r0
	lsl	r0, r5, #0x2
	ldr	r2, [sp]
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L138	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r3]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r3]
.L138:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r5, r7
	blt	.L139	@cond_branch
.L137:
	ldr	r2, [sp, #0x28]
	ldr	r1, [sp, #0x20]
	ldr	r0, [sp, #0x24]
	cmp	r1, sl
	blt	.L135	@cond_branch
	b	.L123
.L241:
	.align	2, 0
.L240:
	.word	gWindows
.L143:
	mov	r2, #0x0
	add	r1, r5, #0
	cmp	r2, sl
	bge	.L145	@cond_branch
.L147:
	ldmia	r3!, {r0}
	mov	r9, r0
	mov	r5, #0x0
	ldrb	r4, [r6, #0x8]
	lsl	r0, r1, #0x1d
	str	r3, [sp, #0x38]
	add	r2, r2, #0x1
	str	r2, [sp, #0x30]
	add	r2, r1, #0x1
	str	r2, [sp, #0x34]
	asr	r1, r1, #0x3
	mov	ip, r1
	lsr	r0, r0, #0x1b
	mov	r8, r0
.L151:
	ldrb	r0, [r6, #0x4]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	ldr	r1, .L242
	add	r1, r1, #0x8
	add	r1, r3, r1
	asr	r2, r4, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r0, .L242
	add	r3, r3, r0
	ldrb	r0, [r3, #0x3]
	mov	r2, ip
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r0, r8
	add	r3, r1, r0
	lsl	r0, r5, #0x2
	mov	r2, r9
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L150	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r3]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r3]
.L150:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r5, #0x7
	ble	.L151	@cond_branch
	ldr	r3, [sp, #0x38]
	ldr	r2, [sp, #0x30]
	ldr	r1, [sp, #0x34]
	cmp	r2, sl
	blt	.L147	@cond_branch
.L145:
	ldr	r3, .L242+0x4
	mov	r2, #0x0
	ldrb	r1, [r6, #0x9]
	cmp	r2, sl
	blt	.LCB1138
	b	.L123	@long jump
.LCB1138:
	sub	r7, r7, #0x8
	str	r7, [sp, #0x64]
	str	r7, [sp, #0x4]
.L158:
	ldmia	r3!, {r0}
	mov	ip, r0
	mov	r5, #0x0
	ldrb	r0, [r6, #0x8]
	add	r4, r0, #0
	add	r4, r4, #0x8
	str	r3, [sp, #0x50]
	add	r2, r2, #0x1
	str	r2, [sp, #0x48]
	add	r2, r1, #0x1
	str	r2, [sp, #0x4c]
	ldr	r3, [sp, #0x4]
	cmp	r5, r3
	bge	.L160	@cond_branch
	ldr	r7, .L242
	asr	r0, r1, #0x3
	mov	r9, r0
	lsl	r0, r1, #0x1d
	lsr	r0, r0, #0x1b
	mov	r8, r0
.L162:
	ldrb	r0, [r6, #0x4]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r1, r7, #0
	add	r1, r1, #0x8
	add	r1, r3, r1
	asr	r2, r4, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r3, r3, r7
	ldrb	r0, [r3, #0x3]
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r0, r8
	add	r3, r1, r0
	lsl	r0, r5, #0x2
	mov	r2, ip
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L161	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r3]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r3]
.L161:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	ldr	r1, [sp, #0x64]
	cmp	r5, r1
	blt	.L162	@cond_branch
.L160:
	ldr	r3, [sp, #0x50]
	ldr	r2, [sp, #0x48]
	ldr	r1, [sp, #0x4c]
	cmp	r2, sl
	blt	.L158	@cond_branch
	b	.L123
.L243:
	.align	2, 0
.L242:
	.word	gWindows
	.word	gGlyphInfo+0x20
.L166:
	add	r1, r3, #0
	mov	r2, #0x0
	add	r0, r5, #0
	mov	r3, sl
	sub	r3, r3, #0x8
	str	r3, [sp, #0x68]
.L170:
	ldmia	r1!, {r3}
	mov	sl, r3
	mov	r5, #0x0
	ldrb	r4, [r6, #0x8]
	str	r1, [sp, #0x60]
	add	r2, r2, #0x1
	str	r2, [sp, #0x58]
	add	r1, r0, #0x1
	str	r1, [sp, #0x5c]
	cmp	r5, r7
	bge	.L172	@cond_branch
	ldr	r2, .L244
	mov	ip, r2
	asr	r3, r0, #0x3
	mov	r9, r3
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1b
	mov	r8, r0
.L174:
	ldrb	r0, [r6, #0x4]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r3, r1
	asr	r2, r4, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r3, r3, ip
	ldrb	r0, [r3, #0x3]
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r0, r8
	add	r3, r1, r0
	lsl	r0, r5, #0x2
	mov	r2, sl
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L173	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r3]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r3]
.L173:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r5, r7
	blt	.L174	@cond_branch
.L172:
	ldr	r1, [sp, #0x60]
	ldr	r2, [sp, #0x58]
	ldr	r0, [sp, #0x5c]
	cmp	r2, #0x7
	ble	.L170	@cond_branch
	ldr	r2, .L244+0x4
	mov	r1, #0x0
	ldrb	r0, [r6, #0x9]
	add	r0, r0, #0x8
	ldr	r3, [sp, #0x68]
	cmp	r1, r3
	blt	.LCB1349
	b	.L123	@long jump
.LCB1349:
.L181:
	ldmia	r2!, {r3}
	mov	sl, r3
	mov	r5, #0x0
	ldrb	r4, [r6, #0x8]
	str	r2, [sp, #0x1c]
	add	r1, r1, #0x1
	str	r1, [sp, #0x14]
	add	r1, r0, #0x1
	str	r1, [sp, #0x18]
	cmp	r5, r7
	bge	.L183	@cond_branch
	ldr	r2, .L244
	mov	ip, r2
	asr	r3, r0, #0x3
	mov	r9, r3
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1b
	mov	r8, r0
.L185:
	ldrb	r0, [r6, #0x4]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r3, r1
	asr	r2, r4, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r3, r3, ip
	ldrb	r0, [r3, #0x3]
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r0, r8
	add	r3, r1, r0
	lsl	r0, r5, #0x2
	mov	r2, sl
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L184	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r3]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r3]
.L184:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r5, r7
	blt	.L185	@cond_branch
.L183:
	ldr	r2, [sp, #0x1c]
	ldr	r1, [sp, #0x14]
	ldr	r0, [sp, #0x18]
	ldr	r3, [sp, #0x68]
	cmp	r1, r3
	blt	.L181	@cond_branch
	b	.L123
.L245:
	.align	2, 0
.L244:
	.word	gWindows
	.word	gGlyphInfo+0x40
.L189:
	mov	r2, r8
	mov	r3, #0x0
	add	r1, r4, #0
	sub	r7, r7, #0x8
	str	r7, [sp, #0x64]
	mov	r0, sl
	sub	r0, r0, #0x8
	str	r0, [sp, #0x68]
.L193:
	ldmia	r2!, {r0}
	mov	r9, r0
	mov	r5, #0x0
	ldrb	r4, [r6, #0x8]
	lsl	r0, r1, #0x1d
	str	r2, [sp, #0x2c]
	add	r3, r3, #0x1
	mov	sl, r3
	add	r2, r1, #0x1
	mov	ip, r2
	asr	r1, r1, #0x3
	mov	r8, r1
	lsr	r7, r0, #0x1b
.L197:
	ldrb	r0, [r6, #0x4]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	ldr	r1, .L246
	add	r1, r1, #0x8
	add	r1, r3, r1
	asr	r2, r4, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r0, .L246
	add	r3, r3, r0
	ldrb	r0, [r3, #0x3]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r3, r1, r7
	lsl	r0, r5, #0x2
	mov	r2, r9
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L196	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r3]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r3]
.L196:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r5, #0x7
	ble	.L197	@cond_branch
	ldr	r2, [sp, #0x2c]
	mov	r3, sl
	mov	r1, ip
	cmp	r3, #0x7
	ble	.L193	@cond_branch
	ldr	r3, .L246+0x4
	mov	r2, #0x0
	ldrb	r1, [r6, #0x9]
	ldr	r0, [sp, #0x64]
	mov	ip, r0
.L204:
	ldmia	r3!, {r0}
	mov	sl, r0
	mov	r5, #0x0
	ldrb	r0, [r6, #0x8]
	add	r4, r0, #0
	add	r4, r4, #0x8
	str	r3, [sp, #0x44]
	add	r2, r2, #0x1
	str	r2, [sp, #0x3c]
	add	r2, r1, #0x1
	str	r2, [sp, #0x40]
	cmp	r5, ip
	bge	.L206	@cond_branch
	ldr	r7, .L246
	asr	r3, r1, #0x3
	mov	r9, r3
	lsl	r0, r1, #0x1d
	lsr	r0, r0, #0x1b
	mov	r8, r0
.L208:
	ldrb	r0, [r6, #0x4]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r1, r7, #0
	add	r1, r1, #0x8
	add	r1, r3, r1
	asr	r2, r4, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r3, r3, r7
	ldrb	r0, [r3, #0x3]
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r0, r8
	add	r3, r1, r0
	lsl	r0, r5, #0x2
	mov	r2, sl
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L207	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r3]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r3]
.L207:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r5, ip
	blt	.L208	@cond_branch
.L206:
	ldr	r3, [sp, #0x44]
	ldr	r2, [sp, #0x3c]
	ldr	r1, [sp, #0x40]
	cmp	r2, #0x7
	ble	.L204	@cond_branch
	ldr	r3, .L246+0x8
	mov	r2, #0x0
	ldrb	r0, [r6, #0x9]
	add	r1, r0, #0
	add	r1, r1, #0x8
	b	.L237
.L247:
	.align	2, 0
.L246:
	.word	gWindows
	.word	gGlyphInfo+0x20
	.word	gGlyphInfo+0x40
.L215:
	ldmia	r3!, {r0}
	mov	r9, r0
	mov	r5, #0x0
	ldrb	r4, [r6, #0x8]
	lsl	r0, r1, #0x1d
	str	r3, [sp, #0x54]
	add	r2, r2, #0x1
	mov	sl, r2
	add	r2, r1, #0x1
	mov	ip, r2
	asr	r1, r1, #0x3
	mov	r8, r1
	lsr	r7, r0, #0x1b
.L219:
	ldrb	r0, [r6, #0x4]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	ldr	r1, .L248
	add	r1, r1, #0x8
	add	r1, r3, r1
	asr	r2, r4, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r0, .L248
	add	r3, r3, r0
	ldrb	r0, [r3, #0x3]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r3, r1, r7
	lsl	r0, r5, #0x2
	mov	r2, r9
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L218	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r3]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r3]
.L218:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r5, #0x7
	ble	.L219	@cond_branch
	ldr	r3, [sp, #0x54]
	mov	r2, sl
	mov	r1, ip
.L237:
	ldr	r0, [sp, #0x68]
	cmp	r2, r0
	blt	.L215	@cond_branch
	ldr	r3, .L248+0x4
	mov	r2, #0x0
	ldrb	r0, [r6, #0x9]
	add	r1, r0, #0
	add	r1, r1, #0x8
	ldr	r0, [sp, #0x68]
	cmp	r2, r0
	bge	.L123	@cond_branch
	ldr	r0, [sp, #0x64]
	mov	sl, r0
.L226:
	ldmia	r3!, {r0}
	mov	ip, r0
	mov	r5, #0x0
	ldrb	r0, [r6, #0x8]
	add	r4, r0, #0
	add	r4, r4, #0x8
	str	r3, [sp, #0x10]
	add	r2, r2, #0x1
	str	r2, [sp, #0x8]
	add	r2, r1, #0x1
	str	r2, [sp, #0xc]
	cmp	r5, sl
	bge	.L228	@cond_branch
	ldr	r7, .L248
	asr	r3, r1, #0x3
	mov	r9, r3
	lsl	r0, r1, #0x1d
	lsr	r0, r0, #0x1b
	mov	r8, r0
.L230:
	ldrb	r0, [r6, #0x4]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r1, r7, #0
	add	r1, r1, #0x8
	add	r1, r3, r1
	asr	r2, r4, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r1, [r1]
	add	r1, r1, r2
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r3, r3, r7
	ldrb	r0, [r3, #0x3]
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r0, r8
	add	r3, r1, r0
	lsl	r0, r5, #0x2
	mov	r2, ip
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L229	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r3]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r3]
.L229:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r5, sl
	blt	.L230	@cond_branch
.L228:
	ldr	r3, [sp, #0x10]
	ldr	r2, [sp, #0x8]
	ldr	r1, [sp, #0xc]
	ldr	r0, [sp, #0x68]
	cmp	r2, r0
	blt	.L226	@cond_branch
.L123:
	add	sp, sp, #0x6c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L249:
	.align	2, 0
.L248:
	.word	gWindows
	.word	gGlyphInfo+0x60
.Lfe13:
	.size	 CopyGlyphToWindow,.Lfe13-CopyGlyphToWindow
	.align	2, 0
	.type	 CopyGlyphToWindow_Parameterized,function
	.thumb_func
CopyGlyphToWindow_Parameterized:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x40
	str	r0, [sp]
	ldr	r0, [sp, #0x60]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp, #0x4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp, #0x8]
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	sub	r1, r3, r1
	ldr	r5, .L364
	add	r0, r5, #0
	add	r0, r0, #0x80
	ldrb	r7, [r0]
	add	r2, r5, #0
	cmp	r1, r7
	bge	.L251	@cond_branch
	add	r7, r1, #0
.L251:
	ldr	r1, [sp, #0x8]
	sub	r0, r4, r1
	add	r1, r2, #0
	add	r1, r1, #0x81
	ldrb	r1, [r1]
	str	r1, [sp, #0xc]
	cmp	r0, r1
	bge	.L253	@cond_branch
	str	r0, [sp, #0xc]
.L253:
	mov	r1, #0x0
	mov	r0, #0x7
	and	r0, r0, r3
	add	r0, r3, r0
	lsr	r0, r0, #0x3
	str	r0, [sp, #0x10]
	cmp	r7, #0x8
	ble	.L255	@cond_branch
	mov	r1, #0x1
.L255:
	ldr	r3, [sp, #0xc]
	cmp	r3, #0x8
	ble	.L256	@cond_branch
	mov	r0, #0x2
	orr	r1, r1, r0
.L256:
	cmp	r1, #0x1
	beq	.L270	@cond_branch
	cmp	r1, #0x1
	bgt	.L363	@cond_branch
	cmp	r1, #0
	beq	.L258	@cond_branch
	b	.L250
.L365:
	.align	2, 0
.L364:
	.word	gGlyphInfo
.L363:
	cmp	r1, #0x2
	bne	.LCB1957
	b	.L293	@long jump
.LCB1957:
	cmp	r1, #0x3
	bne	.LCB1959
	b	.L316	@long jump
.LCB1959:
	b	.L250
.L258:
	add	r1, r2, #0
	mov	r0, #0x0
	ldr	r2, [sp, #0x8]
	ldr	r3, [sp, #0xc]
	cmp	r0, r3
	blt	.LCB1971
	b	.L250	@long jump
.LCB1971:
.L262:
	ldmia	r1!, {r3}
	mov	r8, r3
	mov	r5, #0x0
	ldr	r3, [sp, #0x4]
	str	r1, [sp, #0x28]
	add	r0, r0, #0x1
	mov	r9, r0
	add	r0, r2, #0x1
	mov	sl, r0
	cmp	r5, r7
	bge	.L264	@cond_branch
	asr	r0, r2, #0x3
	ldr	r1, [sp, #0x10]
	mul	r0, r0, r1
	lsl	r0, r0, #0x5
	mov	ip, r0
	lsl	r0, r2, #0x1d
	lsr	r6, r0, #0x1b
.L266:
	asr	r1, r3, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	ldr	r2, [sp]
	add	r1, r2, r1
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, ip
	add	r4, r1, r6
	lsl	r0, r5, #0x2
	mov	r2, r8
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L265	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r4]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r4]
.L265:
	add	r5, r5, #0x1
	add	r3, r3, #0x1
	cmp	r5, r7
	blt	.L266	@cond_branch
.L264:
	ldr	r1, [sp, #0x28]
	mov	r0, r9
	mov	r2, sl
	ldr	r3, [sp, #0xc]
	cmp	r0, r3
	blt	.L262	@cond_branch
	b	.L250
.L270:
	add	r5, r2, #0
	mov	r4, #0x0
	ldr	r2, [sp, #0x8]
	ldr	r0, [sp, #0xc]
	cmp	r4, r0
	bge	.L272	@cond_branch
.L274:
	ldmia	r5!, {r1}
	mov	r8, r1
	mov	r6, #0x0
	ldr	r3, [sp, #0x4]
	asr	r0, r2, #0x3
	lsl	r1, r2, #0x1d
	str	r5, [sp, #0x2c]
	add	r4, r4, #0x1
	mov	r9, r4
	add	r2, r2, #0x1
	mov	sl, r2
	ldr	r2, [sp, #0x10]
	mul	r0, r0, r2
	lsl	r0, r0, #0x5
	mov	ip, r0
	lsr	r5, r1, #0x1b
.L278:
	asr	r1, r3, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	ldr	r0, [sp]
	add	r1, r0, r1
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, ip
	add	r4, r1, r5
	lsl	r0, r6, #0x2
	mov	r2, r8
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L277	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r4]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r4]
.L277:
	add	r6, r6, #0x1
	add	r3, r3, #0x1
	cmp	r6, #0x7
	ble	.L278	@cond_branch
	ldr	r5, [sp, #0x2c]
	mov	r4, r9
	mov	r2, sl
	ldr	r1, [sp, #0xc]
	cmp	r4, r1
	blt	.L274	@cond_branch
.L272:
	ldr	r1, .L366
	mov	r0, #0x0
	ldr	r2, [sp, #0x8]
	ldr	r3, [sp, #0xc]
	cmp	r0, r3
	blt	.LCB2133
	b	.L250	@long jump
.LCB2133:
	sub	r7, r7, #0x8
	str	r7, [sp, #0x18]
	str	r7, [sp, #0x14]
.L285:
	ldmia	r1!, {r3}
	mov	r8, r3
	mov	r5, #0x0
	ldr	r3, [sp, #0x4]
	add	r3, r3, #0x8
	mov	ip, r1
	add	r0, r0, #0x1
	mov	r9, r0
	add	r0, r2, #0x1
	mov	sl, r0
	ldr	r1, [sp, #0x14]
	cmp	r5, r1
	bge	.L287	@cond_branch
	asr	r0, r2, #0x3
	ldr	r1, [sp, #0x10]
	mul	r0, r0, r1
	lsl	r7, r0, #0x5
	lsl	r0, r2, #0x1d
	lsr	r6, r0, #0x1b
.L289:
	asr	r1, r3, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	ldr	r2, [sp]
	add	r1, r2, r1
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, r7
	add	r4, r1, r6
	lsl	r0, r5, #0x2
	mov	r2, r8
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L288	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r4]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r4]
.L288:
	add	r5, r5, #0x1
	add	r3, r3, #0x1
	ldr	r0, [sp, #0x18]
	cmp	r5, r0
	blt	.L289	@cond_branch
.L287:
	mov	r1, ip
	mov	r0, r9
	mov	r2, sl
	ldr	r3, [sp, #0xc]
	cmp	r0, r3
	blt	.L285	@cond_branch
	b	.L250
.L367:
	.align	2, 0
.L366:
	.word	gGlyphInfo+0x20
.L293:
	add	r0, r2, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x8]
	add	r3, r2, #0
	add	r3, r3, #0x8
	str	r3, [sp, #0x1c]
	ldr	r3, [sp, #0xc]
	sub	r3, r3, #0x8
	str	r3, [sp, #0x20]
.L297:
	ldmia	r0!, {r3}
	mov	r8, r3
	mov	r5, #0x0
	ldr	r3, [sp, #0x4]
	str	r0, [sp, #0x34]
	add	r1, r1, #0x1
	mov	r9, r1
	add	r0, r2, #0x1
	mov	sl, r0
	cmp	r5, r7
	bge	.L299	@cond_branch
	asr	r0, r2, #0x3
	ldr	r1, [sp, #0x10]
	mul	r0, r0, r1
	lsl	r0, r0, #0x5
	mov	ip, r0
	lsl	r0, r2, #0x1d
	lsr	r6, r0, #0x1b
.L301:
	asr	r1, r3, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	ldr	r2, [sp]
	add	r1, r2, r1
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, ip
	add	r4, r1, r6
	lsl	r0, r5, #0x2
	mov	r2, r8
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L300	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r4]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r4]
.L300:
	add	r5, r5, #0x1
	add	r3, r3, #0x1
	cmp	r5, r7
	blt	.L301	@cond_branch
.L299:
	ldr	r0, [sp, #0x34]
	mov	r1, r9
	mov	r2, sl
	cmp	r1, #0x7
	ble	.L297	@cond_branch
	ldr	r2, .L368
	mov	r0, #0x0
	ldr	r1, [sp, #0x1c]
	ldr	r3, [sp, #0x20]
	cmp	r0, r3
	blt	.LCB2309
	b	.L250	@long jump
.LCB2309:
.L308:
	ldmia	r2!, {r3}
	mov	r8, r3
	mov	r5, #0x0
	ldr	r3, [sp, #0x4]
	str	r2, [sp, #0x38]
	add	r0, r0, #0x1
	mov	r9, r0
	add	r0, r1, #0x1
	mov	sl, r0
	cmp	r5, r7
	bge	.L310	@cond_branch
	asr	r0, r1, #0x3
	ldr	r2, [sp, #0x10]
	mul	r0, r0, r2
	lsl	r0, r0, #0x5
	mov	ip, r0
	lsl	r0, r1, #0x1d
	lsr	r6, r0, #0x1b
.L312:
	asr	r1, r3, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	ldr	r0, [sp]
	add	r1, r0, r1
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, ip
	add	r4, r1, r6
	lsl	r0, r5, #0x2
	mov	r2, r8
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L311	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r4]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r4]
.L311:
	add	r5, r5, #0x1
	add	r3, r3, #0x1
	cmp	r5, r7
	blt	.L312	@cond_branch
.L310:
	ldr	r2, [sp, #0x38]
	mov	r0, r9
	mov	r1, sl
	ldr	r3, [sp, #0x20]
	cmp	r0, r3
	blt	.L308	@cond_branch
	b	.L250
.L369:
	.align	2, 0
.L368:
	.word	gGlyphInfo+0x40
.L316:
	mov	r2, #0x0
	ldr	r4, [sp, #0x8]
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x8
	str	r0, [sp, #0x3c]
	sub	r7, r7, #0x8
	str	r7, [sp, #0x18]
	add	r1, r4, #0
	add	r1, r1, #0x8
	str	r1, [sp, #0x1c]
	ldr	r3, [sp, #0xc]
	sub	r3, r3, #0x8
	str	r3, [sp, #0x20]
.L320:
	ldmia	r5!, {r0}
	mov	r8, r0
	mov	r6, #0x0
	ldr	r3, [sp, #0x4]
	asr	r0, r4, #0x3
	lsl	r1, r4, #0x1d
	mov	sl, r5
	add	r2, r2, #0x1
	mov	ip, r2
	add	r4, r4, #0x1
	mov	r9, r4
	ldr	r2, [sp, #0x10]
	mul	r0, r0, r2
	lsl	r7, r0, #0x5
	lsr	r5, r1, #0x1b
.L324:
	asr	r1, r3, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	ldr	r0, [sp]
	add	r1, r0, r1
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, r7
	add	r4, r1, r5
	lsl	r0, r6, #0x2
	mov	r2, r8
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L323	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r4]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r4]
.L323:
	add	r6, r6, #0x1
	add	r3, r3, #0x1
	cmp	r6, #0x7
	ble	.L324	@cond_branch
	mov	r5, sl
	mov	r2, ip
	mov	r4, r9
	cmp	r2, #0x7
	ble	.L320	@cond_branch
	ldr	r1, .L370
	mov	r0, #0x0
	ldr	r2, [sp, #0x8]
	ldr	r3, [sp, #0x18]
	mov	ip, r3
.L331:
	ldmia	r1!, {r3}
	mov	r8, r3
	mov	r5, #0x0
	ldr	r3, [sp, #0x3c]
	str	r1, [sp, #0x24]
	add	r0, r0, #0x1
	mov	r9, r0
	add	r0, r2, #0x1
	mov	sl, r0
	cmp	r5, ip
	bge	.L333	@cond_branch
	asr	r0, r2, #0x3
	ldr	r1, [sp, #0x10]
	mul	r0, r0, r1
	lsl	r7, r0, #0x5
	lsl	r0, r2, #0x1d
	lsr	r6, r0, #0x1b
.L335:
	asr	r1, r3, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	ldr	r2, [sp]
	add	r1, r2, r1
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, r7
	add	r4, r1, r6
	lsl	r0, r5, #0x2
	mov	r2, r8
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L334	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r4]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r4]
.L334:
	add	r5, r5, #0x1
	add	r3, r3, #0x1
	cmp	r5, ip
	blt	.L335	@cond_branch
.L333:
	ldr	r1, [sp, #0x24]
	mov	r0, r9
	mov	r2, sl
	cmp	r0, #0x7
	ble	.L331	@cond_branch
	ldr	r6, .L370+0x4
	mov	r4, #0x0
	ldr	r2, [sp, #0x1c]
	ldr	r3, [sp, #0x20]
	cmp	r4, r3
	bge	.L340	@cond_branch
.L342:
	ldmia	r6!, {r0}
	mov	r8, r0
	mov	r5, #0x0
	ldr	r3, [sp, #0x4]
	asr	r0, r2, #0x3
	lsl	r1, r2, #0x1d
	mov	ip, r6
	add	r4, r4, #0x1
	mov	r9, r4
	add	r2, r2, #0x1
	mov	sl, r2
	ldr	r2, [sp, #0x10]
	mul	r0, r0, r2
	lsl	r7, r0, #0x5
	lsr	r6, r1, #0x1b
.L346:
	asr	r1, r3, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	ldr	r0, [sp]
	add	r1, r0, r1
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, r7
	add	r4, r1, r6
	lsl	r0, r5, #0x2
	mov	r2, r8
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L345	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r4]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r4]
.L345:
	add	r5, r5, #0x1
	add	r3, r3, #0x1
	cmp	r5, #0x7
	ble	.L346	@cond_branch
	mov	r6, ip
	mov	r4, r9
	mov	r2, sl
	ldr	r1, [sp, #0x20]
	cmp	r4, r1
	blt	.L342	@cond_branch
.L340:
	ldr	r2, .L370+0x8
	mov	r0, #0x0
	ldr	r1, [sp, #0x1c]
	ldr	r3, [sp, #0x20]
	cmp	r0, r3
	bge	.L250	@cond_branch
	ldr	r3, [sp, #0x18]
	mov	ip, r3
.L353:
	ldmia	r2!, {r3}
	mov	r8, r3
	mov	r5, #0x0
	ldr	r3, [sp, #0x3c]
	str	r2, [sp, #0x30]
	add	r0, r0, #0x1
	mov	r9, r0
	add	r0, r1, #0x1
	mov	sl, r0
	cmp	r5, ip
	bge	.L355	@cond_branch
	asr	r0, r1, #0x3
	ldr	r2, [sp, #0x10]
	mul	r0, r0, r2
	lsl	r7, r0, #0x5
	lsl	r0, r1, #0x1d
	lsr	r6, r0, #0x1b
.L357:
	asr	r1, r3, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	ldr	r0, [sp]
	add	r1, r0, r1
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, r7
	add	r4, r1, r6
	lsl	r0, r5, #0x2
	mov	r2, r8
	lsr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L356	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	lsl	r2, r2, r0
	mov	r1, #0xf0
	asr	r1, r1, r0
	ldrb	r0, [r4]
	and	r1, r1, r0
	orr	r2, r2, r1
	strb	r2, [r4]
.L356:
	add	r5, r5, #0x1
	add	r3, r3, #0x1
	cmp	r5, ip
	blt	.L357	@cond_branch
.L355:
	ldr	r2, [sp, #0x30]
	mov	r0, r9
	mov	r1, sl
	ldr	r3, [sp, #0x20]
	cmp	r0, r3
	blt	.L353	@cond_branch
.L250:
	add	sp, sp, #0x40
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L371:
	.align	2, 0
.L370:
	.word	gGlyphInfo+0x20
	.word	gGlyphInfo+0x40
	.word	gGlyphInfo+0x60
.Lfe14:
	.size	 CopyGlyphToWindow_Parameterized,.Lfe14-CopyGlyphToWindow_Parameterized
	.align	2, 0
	.globl	ClearTextSpan
	.type	 ClearTextSpan,function
	.thumb_func
ClearTextSpan:
	bx	lr
.Lfe15:
	.size	 ClearTextSpan,.Lfe15-ClearTextSpan
	.comm	gGlyphInfo, 132	@ 132
	.comm	gFonts, 4	@ 4

	.lcomm	sFontHalfRowLookupTable,162

	.lcomm	sLastTextBgColor,2

	.lcomm	sLastTextFgColor,2

	.lcomm	sLastTextShadowColor,2
.text
	.align	2, 0 @ Don't pad with nop

