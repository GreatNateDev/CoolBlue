@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sTMCaseStaticResources,object
	.size	 sTMCaseStaticResources,12
sTMCaseStaticResources:
	.space	12
	.align	2, 0
	.type	 sTMCaseDynamicResources,object
	.size	 sTMCaseDynamicResources,4
sTMCaseDynamicResources:
	.word	0x0
	.align	2, 0
	.type	 sPokedudeBagBackup,object
	.size	 sPokedudeBagBackup,4
sPokedudeBagBackup:
	.word	0x0
	.align	2, 0
	.type	 sTilemapBuffer,object
	.size	 sTilemapBuffer,4
sTilemapBuffer:
	.word	0x0
	.align	2, 0
	.type	 sListMenuItemsBuffer,object
	.size	 sListMenuItemsBuffer,4
sListMenuItemsBuffer:
	.word	0x0
	.align	2, 0
	.type	 sListMenuStringsBuffer,object
	.size	 sListMenuStringsBuffer,4
sListMenuStringsBuffer:
	.word	0x0
	.align	2, 0
	.type	 sTMSpritePaletteBuffer,object
	.size	 sTMSpritePaletteBuffer,4
sTMSpritePaletteBuffer:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sBGTemplates,object
	.size	 sBGTemplates,12
sBGTemplates:
	.byte	0xf0
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xe1
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xd2
	.byte	0x21
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sSelectTMActionTasks,object
sSelectTMActionTasks:
	.word	Task_SelectedTMHM_Field
	.word	Task_SelectedTMHM_GiveParty
	.word	Task_SelectedTMHM_Sell
	.word	Task_SelectedTMHM_GivePC
	.size	 sSelectTMActionTasks,16
	.align	2, 0
	.type	 sMenuActions,object
sMenuActions:
	.word	gOtherText_Use
	.word	Action_Use
	.word	gOtherText_Give
	.word	Action_Give
	.word	gOtherText_Exit
	.word	Action_Exit
	.size	 sMenuActions,24
	.type	 sMenuActionIndices_Field,object
sMenuActionIndices_Field:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.size	 sMenuActionIndices_Field,3
	.type	 sMenuActionIndices_UnionRoom,object
sMenuActionIndices_UnionRoom:
	.byte	0x1
	.byte	0x2
	.size	 sMenuActionIndices_UnionRoom,2
	.align	2, 0
	.type	 sYesNoFuncTable,object
	.size	 sYesNoFuncTable,8
sYesNoFuncTable:
	.word	Task_PrintSaleConfirmedText
	.word	Task_SaleOfTMsCanceled
	.type	 sText_ClearTo18,object
sText_ClearTo18:
	.byte	0xfc
	.byte	0x13
	.byte	0x12
	.byte	0xff
	.size	 sText_ClearTo18,4
	.type	 sText_SingleSpace,object
sText_SingleSpace:
	.byte	0x0
	.byte	0xff
	.size	 sText_SingleSpace,2
	.align	2, 0
	.type	 sPal3Override,object
sPal3Override:
	.short	0x2108
	.short	0x1a1e
	.size	 sPal3Override,4
	.type	 sTextColors,object
sTextColors:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x3
	.byte	0x6
	.byte	0x0
	.byte	0xe
	.byte	0xa
	.size	 sTextColors,12
	.align	2, 0
	.type	 sWindowTemplates,object
sWindowTemplates:
	.byte	0x0
	.byte	0xa
	.byte	0x1
	.byte	0x13
	.byte	0xa
	.byte	0xf
	.short	0x81
	.byte	0x0
	.byte	0xc
	.byte	0xc
	.byte	0x12
	.byte	0x8
	.byte	0xa
	.short	0x13f
	.byte	0x1
	.byte	0x5
	.byte	0xf
	.byte	0xf
	.byte	0x4
	.byte	0xd
	.short	0x1f9
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0xf
	.short	0x235
	.byte	0x0
	.byte	0x1
	.byte	0xd
	.byte	0x5
	.byte	0x6
	.byte	0xc
	.short	0x249
	.byte	0x0
	.byte	0x7
	.byte	0xd
	.byte	0x5
	.byte	0x6
	.byte	0xc
	.short	0x267
	.byte	0x1
	.byte	0x2
	.byte	0xf
	.byte	0x1a
	.byte	0x4
	.byte	0xb
	.short	0x285
	.byte	0x1
	.byte	0x11
	.byte	0x9
	.byte	0xc
	.byte	0x4
	.byte	0xf
	.short	0x2ed
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x8
	.byte	0x3
	.byte	0xd
	.short	0x31d
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates,80
	.align	2, 0
	.type	 sYesNoWindowTemplate,object
	.size	 sYesNoWindowTemplate,8
sYesNoWindowTemplate:
	.byte	0x1
	.byte	0x15
	.byte	0x9
	.byte	0x6
	.byte	0x4
	.byte	0xf
	.short	0x335
	.align	2, 0
	.type	 sWindowTemplates_ContextMenu,object
sWindowTemplates_ContextMenu:
	.byte	0x1
	.byte	0x16
	.byte	0xd
	.byte	0x7
	.byte	0x6
	.byte	0xf
	.short	0x1cf
	.byte	0x1
	.byte	0x16
	.byte	0xf
	.byte	0x7
	.byte	0x4
	.byte	0xf
	.short	0x1cf
	.size	 sWindowTemplates_ContextMenu,16
	.align	2, 0
	.type	 sTMSpriteOamData,object
	.size	 sTMSpriteOamData,8
sTMSpriteOamData:
	.space	3
	.byte	0x80
	.space	1
	.byte	0x8
	.space	2
	.align	2, 0
	.type	 sAnim_TM,object
sAnim_TM:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_TM,8
	.align	2, 0
	.type	 sAnim_HM,object
sAnim_HM:
	.short	0x10
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_HM,8
	.align	2, 0
	.type	 sAnims_Disc,object
sAnims_Disc:
	.word	sAnim_TM
	.word	sAnim_HM
	.size	 sAnims_Disc,8
	.align	2, 0
	.type	 sSpriteSheet_Disc,object
	.size	 sSpriteSheet_Disc,8
sSpriteSheet_Disc:
	.word	gTMCaseDisc_Gfx
	.short	0x400
	.short	0x190
	.align	2, 0
	.type	 sSpriteTemplate_Disc,object
	.size	 sSpriteTemplate_Disc,24
sSpriteTemplate_Disc:
	.short	0x190
	.short	0x190
	.word	sTMSpriteOamData
	.word	sAnims_Disc
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	1, 0
	.type	 sTMSpritePaletteOffsetByType,object
	.size	 sTMSpritePaletteOffsetByType,36
sTMSpritePaletteOffsetByType:
	.short	0x0
	.short	0x90
	.short	0x80
	.short	0xc0
	.short	0x60
	.short	0x50
	.short	0xb0
	.short	0xa0
	.short	0xe0
	.space	2
	.short	0x10
	.short	0x20
	.short	0x30
	.short	0x40
	.short	0xd0
	.short	0x70
	.short	0x100
	.short	0xf0
.text
	.align	2, 0
	.globl	InitTMCase
	.type	 InitTMCase,function
	.thumb_func
InitTMCase:
	push	{r4, r5, r6, r7, lr}
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	bl	ResetBufferPointers_NoFree
	ldr	r4, .L8
	mov	r0, #0x1c
	bl	Alloc
	str	r0, [r4]
	mov	r1, #0x0
	str	r1, [r0]
	mov	r1, #0xff
	strb	r1, [r0, #0x8]
	ldr	r1, [r4]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x7]
	cmp	r5, #0x5
	beq	.L5	@cond_branch
	ldr	r0, .L8+0x4
	strb	r5, [r0, #0x4]
.L5:
	cmp	r7, #0
	beq	.L6	@cond_branch
	ldr	r0, .L8+0x4
	str	r7, [r0]
.L6:
	cmp	r6, #0xff
	beq	.L7	@cond_branch
	ldr	r0, .L8+0x4
	strb	r6, [r0, #0x5]
.L7:
	ldr	r2, .L8+0x8
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L8+0xc
	bl	SetMainCallback2
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	sTMCaseDynamicResources
	.word	sTMCaseStaticResources
	.word	gTextFlags
	.word	CB2_SetUpTMCaseUI_Blocking
.Lfe1:
	.size	 InitTMCase,.Lfe1-InitTMCase
	.align	2, 0
	.type	 CB2_Idle,function
	.thumb_func
CB2_Idle:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	DoScheduledBgTilemapCopiesToVram
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 CB2_Idle,.Lfe2-CB2_Idle
	.align	2, 0
	.type	 VBlankCB_Idle,function
	.thumb_func
VBlankCB_Idle:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 VBlankCB_Idle,.Lfe3-VBlankCB_Idle
	.align	2, 0
	.type	 CB2_SetUpTMCaseUI_Blocking,function
	.thumb_func
CB2_SetUpTMCaseUI_Blocking:
	push	{lr}
.L13:
	bl	IsActiveOverworldLinkBusy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L14	@cond_branch
	bl	DoSetUpTMCaseUI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L14	@cond_branch
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L13	@cond_branch
.L14:
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 CB2_SetUpTMCaseUI_Blocking,.Lfe4-CB2_SetUpTMCaseUI_Blocking
	.align	2, 0
	.type	 DoSetUpTMCaseUI,function
	.thumb_func
DoSetUpTMCaseUI:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L49
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x12
	bls	.LCB141
	b	.L44	@long jump
.LCB141:
	lsl	r0, r0, #0x2
	ldr	r1, .L49+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L50:
	.align	2, 0
.L49:
	.word	gMain
	.word	.L45
	.align	2, 0
	.align	2, 0
.L45:
	.word	.L22
	.word	.L23
	.word	.L24
	.word	.L25
	.word	.L26
	.word	.L27
	.word	.L28
	.word	.L29
	.word	.L30
	.word	.L32
	.word	.L33
	.word	.L34
	.word	.L35
	.word	.L36
	.word	.L37
	.word	.L40
	.word	.L41
	.word	.L42
	.word	.L43
.L22:
	bl	SetVBlankHBlankCallbacksToNull
	bl	ClearScheduledBgCopiesToVram
	b	.L47
.L23:
	bl	ScanlineEffect_Stop
	b	.L47
.L24:
	bl	FreeAllSpritePalettes
	b	.L47
.L25:
	bl	ResetPaletteFade
	b	.L47
.L26:
	bl	ResetSpriteData
	b	.L47
.L27:
	bl	ResetTasks
	b	.L47
.L28:
	bl	LoadBGTemplates
	ldr	r0, .L51
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1, #0x12]
	b	.L47
.L52:
	.align	2, 0
.L51:
	.word	sTMCaseDynamicResources
.L29:
	bl	InitWindowTemplatesAndPals
	b	.L47
.L30:
	bl	HandleLoadTMCaseGraphicsAndPalettes
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB217
	b	.L21	@long jump
.LCB217:
	b	.L47
.L32:
	ldr	r0, .L53
	bl	SortPocketAndPlaceHMsFirst
	b	.L47
.L54:
	.align	2, 0
.L53:
	.word	gBagPockets+0x18
.L33:
	bl	TMCaseSetup_GetTMCount
	bl	TMCaseSetup_InitListMenuPositions
	bl	TMCaseSetup_UpdateVisualMenuOffset
	b	.L47
.L34:
	bl	DrawMoveInfoLabels
	b	.L47
.L35:
	bl	CreateTMCaseListMenuBuffers
	bl	InitTMCaseListMenuItems
	b	.L47
.L36:
	bl	PrintTitle
	b	.L47
.L37:
	ldr	r0, .L55
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x4
	bne	.L38	@cond_branch
	ldr	r0, .L55+0x4
	b	.L48
.L56:
	.align	2, 0
.L55:
	.word	sTMCaseStaticResources
	.word	Task_Pokedude_Start
.L38:
	ldr	r0, .L57
.L48:
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L57+0x4
	ldr	r2, .L57+0x8
	ldrh	r1, [r2, #0xa]
	ldrh	r2, [r2, #0x8]
	bl	ListMenuInit
	ldr	r2, .L57+0xc
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x8]
	b	.L47
.L58:
	.align	2, 0
.L57:
	.word	Task_HandleListInput
	.word	gMultiuseListMenuTemplate
	.word	sTMCaseStaticResources
	.word	gTasks
.L40:
	bl	CreateListScrollArrows
	b	.L47
.L41:
	ldr	r0, .L59
	ldrh	r1, [r0, #0x8]
	ldrh	r0, [r0, #0xa]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x4
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	CreateDiscSprite
	ldr	r1, .L59+0x4
	ldr	r1, [r1]
	strb	r0, [r1, #0x4]
	b	.L47
.L60:
	.align	2, 0
.L59:
	.word	sTMCaseStaticResources
	.word	sTMCaseDynamicResources
.L42:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	b	.L47
.L43:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L47:
	ldr	r1, .L61
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L21
.L62:
	.align	2, 0
.L61:
	.word	gMain
.L44:
	ldr	r0, .L63
	bl	SetVBlankCallback
	ldr	r0, .L63+0x4
	bl	SetMainCallback2
	mov	r0, #0x1
	b	.L46
.L64:
	.align	2, 0
.L63:
	.word	VBlankCB_Idle
	.word	CB2_Idle
.L21:
	mov	r0, #0x0
.L46:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 DoSetUpTMCaseUI,.Lfe5-DoSetUpTMCaseUI
	.align	2, 0
	.type	 ResetBufferPointers_NoFree,function
	.thumb_func
ResetBufferPointers_NoFree:
	ldr	r0, .L66
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L66+0x4
	str	r1, [r0]
	ldr	r0, .L66+0x8
	str	r1, [r0]
	ldr	r0, .L66+0xc
	str	r1, [r0]
	ldr	r0, .L66+0x10
	str	r1, [r0]
	bx	lr
.L67:
	.align	2, 0
.L66:
	.word	sTMCaseDynamicResources
	.word	sTilemapBuffer
	.word	sListMenuItemsBuffer
	.word	sListMenuStringsBuffer
	.word	sTMSpritePaletteBuffer
.Lfe6:
	.size	 ResetBufferPointers_NoFree,.Lfe6-ResetBufferPointers_NoFree
	.align	2, 0
	.type	 LoadBGTemplates,function
	.thumb_func
LoadBGTemplates:
	push	{r4, lr}
	bl	ResetAllBgsCoordinatesAndBgCntRegs
	ldr	r4, .L69
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	bl	AllocZeroed
	str	r0, [r4]
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L69+0x4
	mov	r0, #0x0
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	ldr	r1, [r4]
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	pop	{r4}
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	sTilemapBuffer
	.word	sBGTemplates
.Lfe7:
	.size	 LoadBGTemplates,.Lfe7-LoadBGTemplates
	.align	2, 0
	.type	 HandleLoadTMCaseGraphicsAndPalettes,function
	.thumb_func
HandleLoadTMCaseGraphicsAndPalettes:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L85
	ldr	r0, [r4]
	mov	r1, #0x12
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x4
	bhi	.L81	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L85+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L86:
	.align	2, 0
.L85:
	.word	sTMCaseDynamicResources
	.word	.L82
	.align	2, 0
	.align	2, 0
.L82:
	.word	.L73
	.word	.L74
	.word	.L76
	.word	.L77
	.word	.L80
.L73:
	bl	ResetTempTileDataBuffers
	ldr	r1, .L87
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	b	.L84
.L88:
	.align	2, 0
.L87:
	.word	gTMCase_Gfx
.L74:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L72	@cond_branch
	ldr	r0, .L89
	ldr	r1, .L89+0x4
	ldr	r1, [r1]
	bl	LZDecompressWram
	b	.L84
.L90:
	.align	2, 0
.L89:
	.word	gTMCaseMenu_Tilemap
	.word	sTilemapBuffer
.L76:
	ldr	r4, .L91
	mov	r0, #0x1
	bl	GetBgTilemapBuffer
	add	r1, r0, #0
	add	r0, r4, #0
	bl	LZDecompressWram
	b	.L84
.L92:
	.align	2, 0
.L91:
	.word	gTMCase_Tilemap
.L77:
	ldr	r0, .L93
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L78	@cond_branch
	ldr	r0, .L93+0x4
	mov	r1, #0x0
	mov	r2, #0x80
	bl	LoadCompressedPalette
	b	.L84
.L94:
	.align	2, 0
.L93:
	.word	gSaveBlock2Ptr
	.word	gTMCaseMenu_Male_Pal
.L78:
	ldr	r0, .L95
	mov	r1, #0x0
	mov	r2, #0x80
	bl	LoadCompressedPalette
	b	.L84
.L96:
	.align	2, 0
.L95:
	.word	gTMCaseMenu_Female_Pal
.L80:
	ldr	r0, .L97
	bl	LoadCompressedSpriteSheet
.L84:
	ldr	r0, .L97+0x4
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	b	.L72
.L98:
	.align	2, 0
.L97:
	.word	sSpriteSheet_Disc
	.word	sTMCaseDynamicResources
.L81:
	bl	LoadDiscTypePalettes
	ldr	r1, [r4]
	mov	r0, #0x0
	strh	r0, [r1, #0x12]
	mov	r0, #0x1
	b	.L83
.L72:
	mov	r0, #0x0
.L83:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 HandleLoadTMCaseGraphicsAndPalettes,.Lfe8-HandleLoadTMCaseGraphicsAndPalettes
	.align	2, 0
	.type	 CreateTMCaseListMenuBuffers,function
	.thumb_func
CreateTMCaseListMenuBuffers:
	push	{r4, lr}
	ldr	r0, .L100
	ldr	r4, .L100+0x4
	ldrb	r0, [r0, #0x4]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x3
	bl	Alloc
	str	r0, [r4]
	ldr	r4, .L100+0x8
	ldr	r0, .L100+0xc
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	bl	Alloc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gBagPockets+0x18
	.word	sListMenuItemsBuffer
	.word	sListMenuStringsBuffer
	.word	sTMCaseDynamicResources
.Lfe9:
	.size	 CreateTMCaseListMenuBuffers,.Lfe9-CreateTMCaseListMenuBuffers
	.align	2, 0
	.type	 InitTMCaseListMenuItems,function
	.thumb_func
InitTMCaseListMenuItems:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L108
	mov	r8, r0
	mov	r6, #0x0
	ldr	r0, .L108+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r6, r0
	bcs	.L104	@cond_branch
	ldr	r7, .L108+0x8
.L106:
	lsl	r5, r6, #0x3
	sub	r4, r5, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r6
	ldr	r0, [r7]
	add	r0, r0, r4
	mov	r1, r8
	ldr	r2, [r1]
	lsl	r1, r6, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	GetTMNumberAndMoveString
	ldr	r0, .L108+0xc
	ldr	r0, [r0]
	add	r5, r5, r0
	ldr	r0, [r7]
	add	r0, r0, r4
	str	r0, [r5]
	str	r6, [r5, #0x4]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L108+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r6, r0
	bcc	.L106	@cond_branch
.L104:
	ldr	r0, .L108+0xc
	ldr	r3, [r0]
	lsl	r0, r6, #0x3
	add	r0, r0, r3
	ldr	r1, .L108+0x10
	str	r1, [r0]
	mov	r1, #0x2
	neg	r1, r1
	str	r1, [r0, #0x4]
	ldr	r2, .L108+0x14
	str	r3, [r2]
	ldr	r0, .L108+0x4
	ldr	r3, [r0]
	ldrb	r0, [r3, #0x6]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r2, #0xc]
	strb	r1, [r2, #0x10]
	strb	r1, [r2, #0x11]
	mov	r0, #0x8
	strb	r0, [r2, #0x12]
	strb	r1, [r2, #0x13]
	ldrb	r0, [r2, #0x16]
	mov	r4, #0x8
	neg	r4, r4
	and	r4, r4, r0
	mov	r0, #0x39
	neg	r0, r0
	and	r4, r4, r0
	mov	r0, #0x10
	orr	r4, r4, r0
	strb	r4, [r2, #0x16]
	ldrb	r1, [r2, #0x14]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r5, #0x2
	orr	r0, r0, r5
	strb	r0, [r2, #0x14]
	ldrb	r1, [r3, #0x5]
	strh	r1, [r2, #0xe]
	ldrb	r1, [r2, #0x17]
	mov	r3, #0x40
	neg	r3, r3
	and	r3, r3, r1
	orr	r3, r3, r5
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2, #0x14]
	mov	r0, #0x30
	strb	r0, [r2, #0x15]
	ldr	r0, .L108+0x18
	str	r0, [r2, #0x4]
	ldr	r0, .L108+0x1c
	str	r0, [r2, #0x8]
	mov	r0, #0x3f
	and	r3, r3, r0
	strb	r3, [r2, #0x17]
	and	r4, r4, r0
	strb	r4, [r2, #0x16]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L109:
	.align	2, 0
.L108:
	.word	gBagPockets+0x18
	.word	sTMCaseDynamicResources
	.word	sListMenuStringsBuffer
	.word	sListMenuItemsBuffer
	.word	gText_Close
	.word	gMultiuseListMenuTemplate
	.word	List_MoveCursorFunc
	.word	List_ItemPrintFunc
.Lfe10:
	.size	 InitTMCaseListMenuItems,.Lfe10-InitTMCaseListMenuItems
	.align	2, 0
	.type	 GetTMNumberAndMoveString,function
	.thumb_func
GetTMNumberAndMoveString:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	ldr	r5, .L113
	ldr	r1, .L113+0x4
	add	r0, r5, #0
	bl	StringCopy
	mov	r0, #0xa9
	lsl	r0, r0, #0x1
	cmp	r6, r0
	bls	.L111	@cond_branch
	ldr	r1, .L113+0x8
	add	r0, r5, #0
	bl	StringAppend
	ldr	r1, .L113+0xc
	add	r0, r5, #0
	bl	StringAppend
	ldr	r4, .L113+0x10
	ldr	r0, .L113+0x14
	add	r1, r6, r0
	add	r0, r4, #0
	mov	r2, #0x2
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringAppend
	b	.L112
.L114:
	.align	2, 0
.L113:
	.word	gStringVar4
	.word	gText_FontSmall
	.word	sText_ClearTo18
	.word	gText_NumberClear01
	.word	gStringVar1
	.word	-0x152
.L111:
	ldr	r1, .L115
	add	r0, r5, #0
	bl	StringAppend
	ldr	r4, .L115+0x4
	ldr	r0, .L115+0x8
	add	r1, r6, r0
	add	r0, r4, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringAppend
.L112:
	ldr	r4, .L115+0xc
	ldr	r1, .L115+0x10
	add	r0, r4, #0
	bl	StringAppend
	ldr	r1, .L115+0x14
	add	r0, r4, #0
	bl	StringAppend
	add	r0, r6, #0
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xd
	mul	r1, r1, r0
	ldr	r0, .L115+0x18
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringAppend
	add	r0, r7, #0
	add	r1, r4, #0
	bl	StringCopy
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	gText_NumberClear01
	.word	gStringVar1
	.word	-0x120
	.word	gStringVar4
	.word	sText_SingleSpace
	.word	gText_FontNormal
	.word	gMoveNames
.Lfe11:
	.size	 GetTMNumberAndMoveString,.Lfe11-GetTMNumberAndMoveString
	.align	2, 0
	.type	 List_MoveCursorFunc,function
	.thumb_func
List_MoveCursorFunc:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	bne	.L118	@cond_branch
	mov	r5, #0x0
	b	.L119
.L118:
	lsl	r1, r4, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x4
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L119:
	cmp	r6, #0x1
	beq	.L120	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L121
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	add	r1, r5, #0
	bl	SwapDisc
.L120:
	add	r0, r4, #0
	bl	PrintDescription
	add	r0, r5, #0
	bl	PrintMoveInfo
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L122:
	.align	2, 0
.L121:
	.word	sTMCaseDynamicResources
.Lfe12:
	.size	 List_MoveCursorFunc,.Lfe12-List_MoveCursorFunc
	.align	2, 0
	.type	 List_ItemPrintFunc,function
	.thumb_func
List_ItemPrintFunc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r7, r9
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	mov	r4, r8
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	beq	.L124	@cond_branch
	lsl	r0, r1, #0x10
	lsr	r6, r0, #0x10
	mov	r0, #0x4
	add	r1, r6, #0
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L125	@cond_branch
	ldr	r4, .L127
	mov	r0, #0x4
	add	r1, r6, #0
	bl	BagGetQuantityByPocketPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L127+0x4
	ldr	r1, .L127+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, r8
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	mov	r0, #0x1
	str	r0, [sp, #0x10]
	mov	r0, r9
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0x7e
	bl	TMCase_Print
	b	.L124
.L128:
	.align	2, 0
.L127:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TimesStrVar1
.L125:
	add	r0, r7, #0
	mov	r1, #0x8
	add	r2, r4, #0
	bl	PlaceHMTileInWindow
.L124:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 List_ItemPrintFunc,.Lfe13-List_ItemPrintFunc
	.align	2, 0
	.type	 PrintDescription,function
	.thumb_func
PrintDescription:
	push	{r4, lr}
	add	sp, sp, #-0x14
	add	r1, r0, #0
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	beq	.L130	@cond_branch
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x4
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetDescription
	add	r4, r0, #0
	b	.L131
.L130:
	ldr	r4, .L132
.L131:
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x2
	bl	TMCase_Print
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	gText_TMCaseWillBePutAway
.Lfe14:
	.size	 PrintDescription,.Lfe14-PrintDescription
	.align	2, 0
	.type	 SetDescriptionWindowShade,function
	.thumb_func
SetDescriptionWindowShade:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r1, #0x8
	str	r1, [sp]
	lsl	r0, r0, #0x1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x1e
	bl	SetBgTilemapPalette
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 SetDescriptionWindowShade,.Lfe15-SetDescriptionWindowShade
	.align	2, 0
	.type	 PrintListCursor,function
	.thumb_func
PrintListCursor:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	ListMenuGetYCoordForPrintingArrowCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	PrintListCursorAtRow
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 PrintListCursor,.Lfe16-PrintListCursor
	.align	2, 0
	.type	 PrintListCursorAtRow,function
	.thumb_func
PrintListCursorAtRow:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0xff
	bne	.L137	@cond_branch
	mov	r0, #0x2
	mov	r1, #0x0
	bl	GetFontAttribute
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	add	r3, r5, #0
	bl	FillWindowPixelRect
	mov	r0, #0x0
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L138
.L137:
	ldr	r2, .L139
	str	r5, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	mov	r1, #0x2
	mov	r3, #0x0
	bl	TMCase_Print
.L138:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	gText_SelectorArrow2
.Lfe17:
	.size	 PrintListCursorAtRow,.Lfe17-PrintListCursorAtRow
	.align	2, 0
	.type	 CreateListScrollArrows,function
	.thumb_func
CreateListScrollArrows:
	push	{r4, lr}
	add	sp, sp, #-0x10
	ldr	r4, .L142
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x6]
	ldrb	r1, [r1, #0x5]
	sub	r0, r0, r1
	add	r0, r0, #0x1
	str	r0, [sp]
	mov	r0, #0x6e
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	ldr	r0, .L142+0x4
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0xa0
	mov	r2, #0x8
	mov	r3, #0x58
	bl	AddScrollIndicatorArrowPairParameterized
	ldr	r1, [r4]
	strb	r0, [r1, #0x8]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	sTMCaseDynamicResources
	.word	sTMCaseStaticResources+0xa
.Lfe18:
	.size	 CreateListScrollArrows,.Lfe18-CreateListScrollArrows
	.align	2, 0
	.type	 CreateQuantityScrollArrows,function
	.thumb_func
CreateQuantityScrollArrows:
	push	{r4, lr}
	add	sp, sp, #-0x10
	ldr	r4, .L145
	ldr	r1, [r4]
	mov	r0, #0x1
	strh	r0, [r1, #0xa]
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x6e
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r1, r1, #0xa
	str	r1, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0x98
	mov	r2, #0x48
	mov	r3, #0x68
	bl	AddScrollIndicatorArrowPairParameterized
	ldr	r1, [r4]
	strb	r0, [r1, #0x8]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L146:
	.align	2, 0
.L145:
	.word	sTMCaseDynamicResources
.Lfe19:
	.size	 CreateQuantityScrollArrows,.Lfe19-CreateQuantityScrollArrows
	.align	2, 0
	.type	 RemoveScrollArrows,function
	.thumb_func
RemoveScrollArrows:
	push	{r4, lr}
	ldr	r4, .L149
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0xff
	beq	.L148	@cond_branch
	bl	RemoveScrollIndicatorArrowPair
	ldr	r1, [r4]
	mov	r0, #0xff
	strb	r0, [r1, #0x8]
.L148:
	pop	{r4}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	sTMCaseDynamicResources
.Lfe20:
	.size	 RemoveScrollArrows,.Lfe20-RemoveScrollArrows
	.align	2, 0
	.globl	ResetTMCaseCursorPos
	.type	 ResetTMCaseCursorPos,function
	.thumb_func
ResetTMCaseCursorPos:
	ldr	r1, .L152
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	strh	r0, [r1, #0xa]
	bx	lr
.L153:
	.align	2, 0
.L152:
	.word	sTMCaseStaticResources
.Lfe21:
	.size	 ResetTMCaseCursorPos,.Lfe21-ResetTMCaseCursorPos
	.align	2, 0
	.type	 TMCaseSetup_GetTMCount,function
	.thumb_func
TMCaseSetup_GetTMCount:
	push	{r4, lr}
	ldr	r4, .L162
	ldr	r0, [r4]
	ldrb	r1, [r4, #0x4]
	bl	BagPocketCompaction
	ldr	r3, .L162+0x4
	ldr	r1, [r3]
	mov	r0, #0x0
	strb	r0, [r1, #0x6]
	mov	r2, #0x0
	ldrb	r0, [r4, #0x4]
	cmp	r2, r0
	bcs	.L156	@cond_branch
	ldr	r0, [r4]
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L156	@cond_branch
.L159:
	ldr	r0, [r3]
	ldrb	r1, [r0, #0x6]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x6]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrb	r0, [r4, #0x4]
	cmp	r2, r0
	bcs	.L156	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L159	@cond_branch
.L156:
	ldr	r0, .L162+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x6]
	add	r0, r0, #0x1
	cmp	r0, #0x5
	ble	.L161	@cond_branch
	mov	r0, #0x5
.L161:
	strb	r0, [r1, #0x5]
	pop	{r4}
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	gBagPockets+0x18
	.word	sTMCaseDynamicResources
.Lfe22:
	.size	 TMCaseSetup_GetTMCount,.Lfe22-TMCaseSetup_GetTMCount
	.align	2, 0
	.type	 TMCaseSetup_InitListMenuPositions,function
	.thumb_func
TMCaseSetup_InitListMenuPositions:
	push	{r4, r5, lr}
	ldr	r0, .L170
	ldrh	r1, [r0, #0xa]
	add	r4, r0, #0
	ldr	r5, .L170+0x4
	cmp	r1, #0
	beq	.L165	@cond_branch
	ldrh	r0, [r4, #0xa]
	ldr	r1, [r5]
	ldrb	r3, [r1, #0x5]
	add	r0, r0, r3
	ldrb	r2, [r1, #0x6]
	add	r1, r2, #0x1
	cmp	r0, r1
	ble	.L165	@cond_branch
	sub	r0, r3, #0x1
	sub	r0, r2, r0
	strh	r0, [r4, #0xa]
.L165:
	add	r3, r4, #0
	ldrh	r0, [r3, #0xa]
	ldrh	r1, [r3, #0x8]
	add	r0, r0, r1
	ldr	r1, [r5]
	ldrb	r1, [r1, #0x6]
	add	r2, r1, #0x1
	cmp	r0, r2
	blt	.L167	@cond_branch
	cmp	r2, #0x1
	bgt	.L168	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x8]
	b	.L167
.L171:
	.align	2, 0
.L170:
	.word	sTMCaseStaticResources
	.word	sTMCaseDynamicResources
.L168:
	strh	r1, [r4, #0x8]
.L167:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 TMCaseSetup_InitListMenuPositions,.Lfe23-TMCaseSetup_InitListMenuPositions
	.align	2, 0
	.type	 TMCaseSetup_UpdateVisualMenuOffset,function
	.thumb_func
TMCaseSetup_UpdateVisualMenuOffset:
	push	{r4, r5, r6, lr}
	ldr	r0, .L185
	ldrh	r1, [r0, #0x8]
	add	r6, r0, #0
	cmp	r1, #0x3
	bls	.L173	@cond_branch
	mov	r4, #0x0
	ldrh	r0, [r6, #0x8]
	sub	r0, r0, #0x3
	cmp	r4, r0
	bgt	.L173	@cond_branch
	ldrh	r1, [r6, #0xa]
	ldr	r5, .L185+0x4
	ldr	r2, [r5]
	ldrb	r0, [r2, #0x5]
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	add	r0, r0, #0x1
	cmp	r1, r0
	beq	.L173	@cond_branch
	add	r3, r6, #0
.L177:
	ldrh	r0, [r3, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrh	r0, [r3, #0x8]
	sub	r0, r0, #0x3
	cmp	r4, r0
	bgt	.L173	@cond_branch
	ldrh	r1, [r6, #0xa]
	ldr	r2, [r5]
	ldrb	r0, [r2, #0x5]
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	add	r0, r0, #0x1
	cmp	r1, r0
	bne	.L177	@cond_branch
.L173:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	sTMCaseStaticResources
	.word	sTMCaseDynamicResources
.Lfe24:
	.size	 TMCaseSetup_UpdateVisualMenuOffset,.Lfe24-TMCaseSetup_UpdateVisualMenuOffset
	.align	2, 0
	.type	 DestroyTMCaseBuffers,function
	.thumb_func
DestroyTMCaseBuffers:
	push	{lr}
	ldr	r0, .L193
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L188	@cond_branch
	bl	Free
.L188:
	ldr	r0, .L193+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L189	@cond_branch
	bl	Free
.L189:
	ldr	r0, .L193+0x8
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L190	@cond_branch
	bl	Free
.L190:
	ldr	r0, .L193+0xc
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L191	@cond_branch
	bl	Free
.L191:
	ldr	r0, .L193+0x10
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L192	@cond_branch
	bl	Free
.L192:
	bl	FreeAllWindowBuffers
	pop	{r0}
	bx	r0
.L194:
	.align	2, 0
.L193:
	.word	sTMCaseDynamicResources
	.word	sTilemapBuffer
	.word	sListMenuItemsBuffer
	.word	sListMenuStringsBuffer
	.word	sTMSpritePaletteBuffer
.Lfe25:
	.size	 DestroyTMCaseBuffers,.Lfe25-DestroyTMCaseBuffers
	.align	2, 0
	.type	 Task_BeginFadeOutFromTMCase,function
	.thumb_func
Task_BeginFadeOutFromTMCase:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L196
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L196+0x4
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	gTasks
	.word	Task_FadeOutAndCloseTMCase
.Lfe26:
	.size	 Task_BeginFadeOutFromTMCase,.Lfe26-Task_BeginFadeOutFromTMCase
	.align	2, 0
	.type	 Task_FadeOutAndCloseTMCase,function
	.thumb_func
Task_FadeOutAndCloseTMCase:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L202
	add	r2, r0, r1
	ldr	r0, .L202+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L199	@cond_branch
	ldrb	r0, [r2]
	ldr	r4, .L202+0x8
	sub	r2, r4, #0x2
	add	r1, r4, #0
	bl	DestroyListMenuTask
	ldr	r0, .L202+0xc
	ldr	r0, [r0]
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L200	@cond_branch
	bl	SetMainCallback2
	b	.L201
.L203:
	.align	2, 0
.L202:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	sTMCaseStaticResources+0xa
	.word	sTMCaseDynamicResources
.L200:
	add	r0, r4, #0
	sub	r0, r0, #0xa
	ldr	r0, [r0]
	bl	SetMainCallback2
.L201:
	bl	RemoveScrollArrows
	bl	DestroyTMCaseBuffers
	add	r0, r5, #0
	bl	DestroyTask
.L199:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 Task_FadeOutAndCloseTMCase,.Lfe27-Task_FadeOutAndCloseTMCase
	.align	2, 0
	.type	 Task_HandleListInput,function
	.thumb_func
Task_HandleListInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L215
	add	r6, r0, r1
	ldr	r0, .L215+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0
	bne	.L205	@cond_branch
	bl	IsActiveOverworldLinkBusy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L205	@cond_branch
	ldrb	r0, [r6]
	bl	ListMenu_ProcessInput
	add	r5, r0, #0
	ldrb	r0, [r6]
	ldr	r4, .L215+0x8
	sub	r2, r4, #0x2
	add	r1, r4, #0
	bl	ListMenuGetScrollAndRow
	ldr	r0, .L215+0xc
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L207	@cond_branch
	add	r0, r4, #0
	sub	r0, r0, #0xa
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x1
	bne	.L207	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L215+0x10
	mov	r1, r8
	strh	r1, [r0]
	b	.L214
.L216:
	.align	2, 0
.L215:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	sTMCaseStaticResources+0xa
	.word	gMain
	.word	gSpecialVar_ItemId
.L207:
	mov	r0, #0x2
	neg	r0, r0
	cmp	r5, r0
	beq	.L211	@cond_branch
	add	r0, r0, #0x1
	cmp	r5, r0
	bne	.L212	@cond_branch
	b	.L205
.L211:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L217
	mov	r0, #0x0
	strh	r0, [r1]
.L214:
	add	r0, r7, #0
	bl	Task_BeginFadeOutFromTMCase
	b	.L205
.L218:
	.align	2, 0
.L217:
	.word	gSpecialVar_ItemId
.L212:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	SetDescriptionWindowShade
	bl	RemoveScrollArrows
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	PrintListCursor
	strh	r5, [r6, #0x2]
	lsl	r4, r5, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x4
	add	r1, r4, #0
	bl	BagGetQuantityByPocketPosition
	strh	r0, [r6, #0x4]
	mov	r0, #0x4
	add	r1, r4, #0
	bl	BagGetItemIdByPocketPosition
	ldr	r1, .L219
	strh	r0, [r1]
	ldr	r0, .L219+0x4
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r2, .L219+0x8
	ldr	r0, .L219+0xc
	ldrb	r0, [r0, #0x4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r1]
.L205:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	gSpecialVar_ItemId
	.word	gTasks
	.word	sSelectTMActionTasks
	.word	sTMCaseStaticResources
.Lfe28:
	.size	 Task_HandleListInput,.Lfe28-Task_HandleListInput
	.align	2, 0
	.type	 ReturnToList,function
	.thumb_func
ReturnToList:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	SetDescriptionWindowShade
	bl	CreateListScrollArrows
	ldr	r1, .L222
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L222+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	gTasks
	.word	Task_HandleListInput
.Lfe29:
	.size	 ReturnToList,.Lfe29-ReturnToList
	.align	2, 0
	.type	 Task_SelectedTMHM_Field,function
	.thumb_func
Task_SelectedTMHM_Field:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x2
	bl	TMCase_SetWindowBorder2
	bl	MenuHelpers_IsLinkActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L225	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	beq	.L225	@cond_branch
	ldr	r4, .L229
	ldr	r0, [r4]
	add	r0, r0, #0x7
	mov	r1, #0x0
	bl	AddContextMenu
	ldr	r1, [r4]
	ldr	r0, .L229+0x4
	str	r0, [r1, #0xc]
	mov	r0, #0x3
	b	.L228
.L230:
	.align	2, 0
.L229:
	.word	sTMCaseDynamicResources
	.word	sMenuActionIndices_Field
.L225:
	ldr	r4, .L231
	ldr	r0, [r4]
	add	r0, r0, #0x7
	mov	r1, #0x1
	bl	AddContextMenu
	ldr	r1, [r4]
	ldr	r0, .L231+0x4
	str	r0, [r1, #0xc]
	mov	r0, #0x2
.L228:
	strb	r0, [r1, #0x10]
	mov	r0, #0x2
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r6, .L231
	ldr	r1, [r6]
	ldrb	r2, [r1, #0x7]
	mov	r5, #0x0
	str	r5, [sp]
	str	r0, [sp, #0x4]
	ldrb	r0, [r1, #0x10]
	str	r0, [sp, #0x8]
	ldr	r0, .L231+0x8
	str	r0, [sp, #0xc]
	ldr	r0, [r1, #0xc]
	str	r0, [sp, #0x10]
	add	r0, r2, #0
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x2
	bl	AddItemMenuActionTextPrinters
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r6]
	ldrb	r2, [r1, #0x7]
	str	r0, [sp]
	ldrb	r0, [r1, #0x10]
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	add	r0, r2, #0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	Menu_InitCursor
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	bl	Alloc
	add	r4, r0, #0
	ldr	r6, .L231+0xc
	ldrh	r1, [r6]
	bl	GetTMNumberAndMoveString
	ldr	r1, .L231+0x10
	add	r0, r4, #0
	bl	StringAppend
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x2
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x0
	bl	TMCase_Print
	add	r0, r4, #0
	bl	Free
	ldrh	r0, [r6]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L227	@cond_branch
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x2
	bl	PlaceHMTileInWindow
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
.L227:
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L231+0x14
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L231+0x18
	str	r0, [r1]
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L232:
	.align	2, 0
.L231:
	.word	sTMCaseDynamicResources
	.word	sMenuActionIndices_UnionRoom
	.word	sMenuActions
	.word	gSpecialVar_ItemId
	.word	gText_Var1IsSelected+0x2
	.word	gTasks
	.word	Task_ContextMenu_HandleInput
.Lfe30:
	.size	 Task_SelectedTMHM_Field,.Lfe30-Task_SelectedTMHM_Field
	.align	2, 0
	.type	 Task_ContextMenu_HandleInput,function
	.thumb_func
Task_ContextMenu_HandleInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	bl	IsActiveOverworldLinkBusy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L234	@cond_branch
	bl	Menu_ProcessInputNoWrapAround
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L234	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L238	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L240
	ldr	r0, .L240+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	ldr	r1, [r1, #0xc]
	add	r0, r0, r1
	sub	r0, r0, #0x1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
	b	.L234
.L241:
	.align	2, 0
.L240:
	.word	sMenuActions
	.word	sTMCaseDynamicResources
.L238:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L242
	ldr	r0, .L242+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r6, #0
	bl	_call_via_r1
.L234:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	sMenuActions
	.word	sTMCaseDynamicResources
.Lfe31:
	.size	 Task_ContextMenu_HandleInput,.Lfe31-Task_ContextMenu_HandleInput
	.align	2, 0
	.type	 Action_Use,function
	.thumb_func
Action_Use:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L247
	ldr	r0, [r5]
	add	r0, r0, #0x7
	bl	RemoveContextMenu
	mov	r0, #0x2
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x2
	bl	ClearWindowTilemap
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L245	@cond_branch
	add	r0, r4, #0
	bl	PrintError_ThereIsNoPokemon
	b	.L246
.L248:
	.align	2, 0
.L247:
	.word	sTMCaseDynamicResources
.L245:
	ldr	r1, .L249
	ldr	r0, .L249+0x4
	str	r0, [r1]
	ldr	r1, [r5]
	ldr	r0, .L249+0x8
	str	r0, [r1]
	add	r0, r4, #0
	bl	Task_BeginFadeOutFromTMCase
.L246:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L250:
	.align	2, 0
.L249:
	.word	gItemUseCB
	.word	ItemUseCB_TMHM
	.word	CB2_ShowPartyMenuForItemUse
.Lfe32:
	.size	 Action_Use,.Lfe32-Action_Use
	.align	2, 0
	.type	 Action_Give,function
	.thumb_func
Action_Give:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L256
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x4
	bl	BagGetItemIdByPocketPosition
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r6, .L256+0x4
	ldr	r0, [r6]
	add	r0, r0, #0x7
	bl	RemoveContextMenu
	mov	r0, #0x2
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x2
	bl	ClearWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x5
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r4, #0
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L252	@cond_branch
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	add	r0, r5, #0
	bl	PrintError_ThereIsNoPokemon
	b	.L255
.L257:
	.align	2, 0
.L256:
	.word	gTasks+0x8
	.word	sTMCaseDynamicResources
.L253:
	ldr	r1, [r6]
	ldr	r0, .L258
	str	r0, [r1]
	add	r0, r5, #0
	bl	Task_BeginFadeOutFromTMCase
	b	.L255
.L259:
	.align	2, 0
.L258:
	.word	CB2_ChooseMonToGiveItem
.L252:
	add	r0, r5, #0
	bl	PrintError_ItemCantBeHeld
.L255:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 Action_Give,.Lfe33-Action_Give
	.align	2, 0
	.type	 PrintError_ThereIsNoPokemon,function
	.thumb_func
PrintError_ThereIsNoPokemon:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L261
	ldr	r3, .L261+0x4
	mov	r1, #0x2
	bl	PrintMessageWithFollowupTask
	pop	{r0}
	bx	r0
.L262:
	.align	2, 0
.L261:
	.word	gText_ThereIsNoPokemon
	.word	Task_WaitButtonAfterErrorPrint
.Lfe34:
	.size	 PrintError_ThereIsNoPokemon,.Lfe34-PrintError_ThereIsNoPokemon
	.align	2, 0
	.type	 PrintError_ItemCantBeHeld,function
	.thumb_func
PrintError_ItemCantBeHeld:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L264
	ldrh	r0, [r0]
	ldr	r1, .L264+0x4
	bl	CopyItemName
	ldr	r5, .L264+0x8
	ldr	r1, .L264+0xc
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L264+0x10
	add	r0, r4, #0
	mov	r1, #0x2
	add	r2, r5, #0
	bl	PrintMessageWithFollowupTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L265:
	.align	2, 0
.L264:
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_ItemCantBeHeld
	.word	Task_WaitButtonAfterErrorPrint
.Lfe35:
	.size	 PrintError_ItemCantBeHeld,.Lfe35-PrintError_ItemCantBeHeld
	.align	2, 0
	.type	 Task_WaitButtonAfterErrorPrint,function
	.thumb_func
Task_WaitButtonAfterErrorPrint:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L268
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L267	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	CloseMessageAndReturnToList
.L267:
	pop	{r4}
	pop	{r0}
	bx	r0
.L269:
	.align	2, 0
.L268:
	.word	gMain
.Lfe36:
	.size	 Task_WaitButtonAfterErrorPrint,.Lfe36-Task_WaitButtonAfterErrorPrint
	.align	2, 0
	.type	 CloseMessageAndReturnToList,function
	.thumb_func
CloseMessageAndReturnToList:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r6, #0x2
	add	r5, r5, r6
	lsl	r5, r5, #0x3
	ldr	r0, .L271
	add	r5, r5, r0
	ldrb	r0, [r5]
	ldr	r4, .L271+0x4
	sub	r2, r4, #0x2
	add	r1, r4, #0
	bl	DestroyListMenuTask
	ldr	r0, .L271+0x8
	sub	r4, r4, #0xa
	ldrh	r1, [r4, #0xa]
	ldrh	r2, [r4, #0x8]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r1, #0x1
	bl	PrintListCursor
	mov	r0, #0x6
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrameToTransparent
	mov	r0, #0x6
	bl	ClearWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x5
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r6, #0
	bl	ReturnToList
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	gTasks+0x8
	.word	sTMCaseStaticResources+0xa
	.word	gMultiuseListMenuTemplate
.Lfe37:
	.size	 CloseMessageAndReturnToList,.Lfe37-CloseMessageAndReturnToList
	.align	2, 0
	.type	 Action_Exit,function
	.thumb_func
Action_Exit:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L274
	add	r4, r4, r0
	ldr	r0, .L274+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x7
	bl	RemoveContextMenu
	mov	r0, #0x2
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x2
	bl	ClearWindowTilemap
	mov	r0, #0x0
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	PrintListCursor
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x5
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r5, #0
	bl	ReturnToList
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	gTasks+0x8
	.word	sTMCaseDynamicResources
.Lfe38:
	.size	 Action_Exit,.Lfe38-Action_Exit
	.align	2, 0
	.type	 Task_SelectedTMHM_GiveParty,function
	.thumb_func
Task_SelectedTMHM_GiveParty:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L279
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x4
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L277	@cond_branch
	ldr	r0, .L279+0x4
	ldr	r1, [r0]
	ldr	r0, .L279+0x8
	str	r0, [r1]
	add	r0, r4, #0
	bl	Task_BeginFadeOutFromTMCase
	b	.L278
.L280:
	.align	2, 0
.L279:
	.word	gTasks+0x8
	.word	sTMCaseDynamicResources
	.word	CB2_GiveHoldItem
.L277:
	add	r0, r4, #0
	bl	PrintError_ItemCantBeHeld
.L278:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 Task_SelectedTMHM_GiveParty,.Lfe39-Task_SelectedTMHM_GiveParty
	.align	2, 0
	.type	 Task_SelectedTMHM_GivePC,function
	.thumb_func
Task_SelectedTMHM_GivePC:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L284
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x4
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L282	@cond_branch
	ldr	r0, .L284+0x4
	ldr	r1, [r0]
	ldr	r0, .L284+0x8
	str	r0, [r1]
	add	r0, r4, #0
	bl	Task_BeginFadeOutFromTMCase
	b	.L283
.L285:
	.align	2, 0
.L284:
	.word	gTasks+0x8
	.word	sTMCaseDynamicResources
	.word	CB2_ReturnToPokeStorage
.L282:
	add	r0, r4, #0
	bl	PrintError_ItemCantBeHeld
.L283:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 Task_SelectedTMHM_GivePC,.Lfe40-Task_SelectedTMHM_GivePC
	.align	2, 0
	.type	 Task_SelectedTMHM_Sell,function
	.thumb_func
Task_SelectedTMHM_Sell:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L292
	add	r4, r0, r1
	ldr	r6, .L292+0x4
	ldrh	r0, [r6]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L287	@cond_branch
	ldrh	r0, [r6]
	ldr	r1, .L292+0x8
	bl	CopyItemName
	ldr	r4, .L292+0xc
	ldr	r1, .L292+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	bl	GetDialogBoxFontId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L292+0x14
	add	r0, r5, #0
	add	r2, r4, #0
	bl	PrintMessageWithFollowupTask
	b	.L288
.L293:
	.align	2, 0
.L292:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_OhNoICantBuyThat
	.word	CloseMessageAndReturnToList
.L287:
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L289	@cond_branch
	bl	PrintPlayersMoney
	add	r0, r5, #0
	bl	Task_AskConfirmSaleWithAmount
	b	.L288
.L289:
	cmp	r0, #0x63
	ble	.L291	@cond_branch
	mov	r0, #0x63
	strh	r0, [r4, #0x4]
.L291:
	ldrh	r0, [r6]
	ldr	r1, .L294
	bl	CopyItemName
	ldr	r4, .L294+0x4
	ldr	r1, .L294+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	bl	GetDialogBoxFontId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L294+0xc
	add	r0, r7, #0
	add	r2, r4, #0
	bl	PrintMessageWithFollowupTask
.L288:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L295:
	.align	2, 0
.L294:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_HowManyWouldYouLikeToSell
	.word	Task_InitQuantitySelectUI
.Lfe41:
	.size	 Task_SelectedTMHM_Sell,.Lfe41-Task_SelectedTMHM_Sell
	.align	2, 0
	.type	 Task_AskConfirmSaleWithAmount,function
	.thumb_func
Task_AskConfirmSaleWithAmount:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L297
	add	r4, r4, r0
	ldr	r6, .L297+0x4
	ldrh	r1, [r4, #0x2]
	mov	r0, #0x4
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mul	r1, r1, r0
	add	r0, r6, #0
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L297+0x8
	ldr	r1, .L297+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	bl	GetDialogBoxFontId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L297+0x10
	add	r0, r5, #0
	add	r2, r4, #0
	bl	PrintMessageWithFollowupTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L298:
	.align	2, 0
.L297:
	.word	gTasks+0x8
	.word	gStringVar3
	.word	gStringVar4
	.word	gText_ICanPayThisMuch_WouldThatBeOkay
	.word	Task_PlaceYesNoBox
.Lfe42:
	.size	 Task_AskConfirmSaleWithAmount,.Lfe42-Task_AskConfirmSaleWithAmount
	.align	2, 0
	.type	 Task_PlaceYesNoBox,function
	.thumb_func
Task_PlaceYesNoBox:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L300
	bl	HandleCreateYesNoMenu
	pop	{r0}
	bx	r0
.L301:
	.align	2, 0
.L300:
	.word	sYesNoFuncTable
.Lfe43:
	.size	 Task_PlaceYesNoBox,.Lfe43-Task_PlaceYesNoBox
	.align	2, 0
	.type	 Task_SaleOfTMsCanceled,function
	.thumb_func
Task_SaleOfTMsCanceled:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L303
	add	r4, r4, r0
	mov	r0, #0x8
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x6
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrameToTransparent
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x3
	bl	PutWindowTilemap
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x5
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	PrintListCursor
	add	r0, r5, #0
	bl	ReturnToList
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	gTasks+0x8
.Lfe44:
	.size	 Task_SaleOfTMsCanceled,.Lfe44-Task_SaleOfTMsCanceled
	.align	2, 0
	.type	 Task_InitQuantitySelectUI,function
	.thumb_func
Task_InitQuantitySelectUI:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r6, .L306
	add	r0, r4, r6
	mov	r8, r0
	mov	r0, #0x7
	bl	TMCase_SetWindowBorder1
	ldr	r0, .L306+0x4
	mov	r1, #0x1
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r5, .L306+0x8
	ldr	r1, .L306+0xc
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r0, #0xa
	str	r0, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	mov	r0, #0x7
	mov	r1, #0x0
	add	r2, r5, #0
	mov	r3, #0x4
	bl	TMCase_Print
	mov	r2, r8
	ldrh	r1, [r2, #0x2]
	mov	r0, #0x4
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r3, r8
	mov	r2, #0x10
	ldrsh	r1, [r3, r2]
	mul	r1, r1, r0
	mov	r0, #0x1
	bl	SellTM_PrintQuantityAndSalePrice
	bl	PrintPlayersMoney
	bl	CreateQuantityScrollArrows
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	sub	r6, r6, #0x8
	add	r4, r4, r6
	ldr	r0, .L306+0x10
	str	r0, [r4]
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L307:
	.align	2, 0
.L306:
	.word	gTasks+0x8
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TimesStrVar1
	.word	Task_QuantitySelect_HandleInput
.Lfe45:
	.size	 Task_InitQuantitySelectUI,.Lfe45-Task_InitQuantitySelectUI
	.align	2, 0
	.type	 SellTM_PrintQuantityAndSalePrice,function
	.thumb_func
SellTM_PrintQuantityAndSalePrice:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x7
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r0, .L309
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r1, r4, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r5, .L309+0x4
	ldr	r1, .L309+0x8
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r0, #0xa
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	str	r4, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x7
	mov	r1, #0x0
	add	r2, r5, #0
	mov	r3, #0x4
	bl	TMCase_Print
	str	r4, [sp]
	mov	r0, #0x7
	mov	r1, #0x38
	mov	r2, #0xa
	add	r3, r6, #0
	bl	PrintMoneyAmount
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L310:
	.align	2, 0
.L309:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TimesStrVar1
.Lfe46:
	.size	 SellTM_PrintQuantityAndSalePrice,.Lfe46-SellTM_PrintQuantityAndSalePrice
	.align	2, 0
	.type	 Task_QuantitySelect_HandleInput,function
	.thumb_func
Task_QuantitySelect_HandleInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L317
	add	r5, r0, r1
	add	r0, r5, #0
	add	r0, r0, #0x10
	ldrh	r1, [r5, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L312	@cond_branch
	mov	r0, #0x10
	ldrsh	r4, [r5, r0]
	ldrh	r1, [r5, #0x2]
	mov	r0, #0x4
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r5, r2]
	mul	r1, r1, r0
	add	r0, r4, #0
	bl	SellTM_PrintQuantityAndSalePrice
	b	.L313
.L318:
	.align	2, 0
.L317:
	.word	gTasks+0x8
.L312:
	ldr	r0, .L319
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L314	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	bl	RemoveScrollArrows
	add	r0, r4, #0
	bl	Task_AskConfirmSaleWithAmount
	b	.L313
.L320:
	.align	2, 0
.L319:
	.word	gMain
.L314:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L313	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x8
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x6
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrameToTransparent
	mov	r0, #0x3
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	bl	RemoveScrollArrows
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	PrintListCursor
	add	r0, r6, #0
	bl	ReturnToList
.L313:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 Task_QuantitySelect_HandleInput,.Lfe47-Task_QuantitySelect_HandleInput
	.align	2, 0
	.type	 Task_PrintSaleConfirmedText,function
	.thumb_func
Task_PrintSaleConfirmedText:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L322
	add	r4, r4, r0
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L322+0x4
	ldrh	r0, [r0]
	ldr	r1, .L322+0x8
	bl	CopyItemName
	ldr	r6, .L322+0xc
	ldrh	r1, [r4, #0x2]
	mov	r0, #0x4
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mul	r1, r1, r0
	add	r0, r6, #0
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L322+0x10
	ldr	r1, .L322+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L322+0x18
	add	r0, r5, #0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	PrintMessageWithFollowupTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar3
	.word	gStringVar4
	.word	gText_TurnedOverItemsWorthYen
	.word	Task_DoSaleOfTMs
.Lfe48:
	.size	 Task_PrintSaleConfirmedText,.Lfe48-Task_PrintSaleConfirmedText
	.align	2, 0
	.type	 Task_DoSaleOfTMs,function
	.thumb_func
Task_DoSaleOfTMs:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r6, r0, #0x2
	add	r6, r6, r0
	lsl	r6, r6, #0x3
	ldr	r0, .L325
	mov	r9, r0
	add	r1, r6, #0
	add	r1, r1, r9
	mov	r8, r1
	mov	r0, #0xf8
	bl	PlaySE
	ldr	r5, .L325+0x4
	ldrh	r0, [r5]
	mov	r2, r8
	ldrh	r1, [r2, #0x10]
	bl	RemoveBagItem
	ldr	r7, .L325+0x8
	ldr	r4, [r7]
	mov	r3, #0xa4
	lsl	r3, r3, #0x2
	mov	sl, r3
	add	r4, r4, sl
	ldrh	r0, [r5]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, r8
	mov	r3, #0x10
	ldrsh	r1, [r2, r3]
	mul	r1, r1, r0
	add	r0, r4, #0
	bl	AddMoney
	ldrh	r0, [r5]
	mov	r2, r8
	ldrh	r1, [r2, #0x10]
	mov	r2, #0x2
	bl	RecordItemTransaction
	mov	r3, r8
	ldrb	r0, [r3]
	ldr	r4, .L325+0xc
	sub	r2, r4, #0x2
	add	r1, r4, #0
	bl	DestroyListMenuTask
	bl	TMCaseSetup_GetTMCount
	bl	TMCaseSetup_InitListMenuPositions
	bl	InitTMCaseListMenuItems
	ldr	r0, .L325+0x10
	sub	r4, r4, #0xa
	ldrh	r1, [r4, #0xa]
	ldrh	r2, [r4, #0x8]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	strh	r0, [r1]
	mov	r1, #0x2
	bl	PrintListCursor
	ldr	r0, [r7]
	add	r0, r0, sl
	bl	GetMoney
	add	r1, r0, #0
	mov	r0, #0x8
	mov	r2, #0x0
	bl	PrintMoneyAmountInMoneyBox
	mov	r2, #0x8
	neg	r2, r2
	add	r9, r9, r2
	add	r6, r6, r9
	ldr	r0, .L325+0x14
	str	r0, [r6]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L326:
	.align	2, 0
.L325:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gSaveBlock1Ptr
	.word	sTMCaseStaticResources+0xa
	.word	gMultiuseListMenuTemplate
	.word	Task_AfterSale_ReturnToList
.Lfe49:
	.size	 Task_DoSaleOfTMs,.Lfe49-Task_DoSaleOfTMs
	.align	2, 0
	.type	 Task_AfterSale_ReturnToList,function
	.thumb_func
Task_AfterSale_ReturnToList:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L330
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L329	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L328	@cond_branch
.L329:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x8
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x6
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrameToTransparent
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x3
	bl	PutWindowTilemap
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x5
	bl	PutWindowTilemap
	add	r0, r4, #0
	bl	CloseMessageAndReturnToList
.L328:
	pop	{r4}
	pop	{r0}
	bx	r0
.L331:
	.align	2, 0
.L330:
	.word	gMain
.Lfe50:
	.size	 Task_AfterSale_ReturnToList,.Lfe50-Task_AfterSale_ReturnToList
	.align	2, 0
	.globl	Pokedude_InitTMCase
	.type	 Pokedude_InitTMCase,function
	.thumb_func
Pokedude_InitTMCase:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r4, .L333
	mov	r0, #0xb2
	lsl	r0, r0, #0x1
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r5, .L333+0x4
	ldr	r1, [r5]
	ldr	r2, .L333+0x8
	mov	r8, r2
	add	r1, r1, r8
	mov	r2, #0xe8
	bl	memcpy
	ldr	r0, [r4]
	add	r0, r0, #0xe8
	ldr	r1, [r5]
	mov	r6, #0xee
	lsl	r6, r6, #0x2
	add	r1, r1, r6
	mov	r2, #0x78
	bl	memcpy
	ldr	r3, [r4]
	ldr	r2, .L333+0xc
	ldrh	r1, [r2, #0x8]
	mov	r4, #0xb0
	lsl	r4, r4, #0x1
	add	r0, r3, r4
	strh	r1, [r0]
	ldrh	r0, [r2, #0xa]
	mov	r2, #0xb1
	lsl	r2, r2, #0x1
	add	r1, r3, r2
	strh	r0, [r1]
	ldr	r0, [r5]
	add	r0, r0, r8
	mov	r1, #0x3a
	bl	ClearItemSlots
	ldr	r0, [r5]
	add	r0, r0, r6
	mov	r1, #0x1e
	bl	ClearItemSlots
	bl	ResetTMCaseCursorPos
	ldr	r0, .L333+0x10
	mov	r1, #0x1
	bl	AddBagItem
	ldr	r0, .L333+0x14
	mov	r1, #0x1
	bl	AddBagItem
	ldr	r0, .L333+0x18
	mov	r1, #0x1
	bl	AddBagItem
	ldr	r0, .L333+0x1c
	mov	r1, #0x1
	bl	AddBagItem
	ldr	r1, .L333+0x20
	mov	r0, #0x4
	mov	r2, #0x0
	bl	InitTMCase
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L334:
	.align	2, 0
.L333:
	.word	sPokedudeBagBackup
	.word	gSaveBlock1Ptr
	.word	0x464
	.word	sTMCaseStaticResources
	.word	0x121
	.word	0x123
	.word	0x129
	.word	0x143
	.word	CB2_ReturnToTeachyTV
.Lfe51:
	.size	 Pokedude_InitTMCase,.Lfe51-Pokedude_InitTMCase
	.align	2, 0
	.type	 Task_Pokedude_Start,function
	.thumb_func
Task_Pokedude_Start:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r3, r1, #0x3
	ldr	r4, .L337
	add	r2, r3, r4
	ldr	r0, .L337+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L336	@cond_branch
	strh	r0, [r2, #0x10]
	strh	r0, [r2, #0x12]
	add	r0, r4, #0
	sub	r0, r0, #0x8
	add	r0, r3, r0
	ldr	r1, .L337+0x8
	str	r1, [r0]
.L336:
	pop	{r4}
	pop	{r0}
	bx	r0
.L338:
	.align	2, 0
.L337:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	Task_Pokedude_Run
.Lfe52:
	.size	 Task_Pokedude_Start,.Lfe52-Task_Pokedude_Start
	.align	2, 0
	.type	 Task_Pokedude_Run,function
	.thumb_func
Task_Pokedude_Run:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L379
	add	r6, r0, r1
	ldr	r0, .L379+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L340	@cond_branch
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x14
	bgt	.L340	@cond_branch
	mov	r0, #0x15
	strh	r0, [r6, #0x10]
	bl	SetTeachyTvControllerModeToResume
.L340:
	mov	r3, #0x10
	ldrsh	r0, [r6, r3]
	cmp	r0, #0x15
	bls	.LCB3720
	b	.L375	@long jump
.LCB3720:
	lsl	r0, r0, #0x2
	ldr	r1, .L379+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L380:
	.align	2, 0
.L379:
	.word	gTasks+0x8
	.word	gMain
	.word	.L377
	.align	2, 0
	.align	2, 0
.L377:
	.word	.L343
	.word	.L345
	.word	.L353
	.word	.L353
	.word	.L353
	.word	.L361
	.word	.L361
	.word	.L361
	.word	.L364
	.word	.L366
	.word	.L368
	.word	.L345
	.word	.L353
	.word	.L353
	.word	.L353
	.word	.L361
	.word	.L361
	.word	.L361
	.word	.L370
	.word	.L366
	.word	.L371
	.word	.L373
.L343:
	ldr	r0, .L381
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x6
	bl	BeginNormalPaletteFade
	mov	r0, #0x1
	bl	SetDescriptionWindowShade
	b	.L378
.L382:
	.align	2, 0
.L381:
	.word	-0x7bfb
.L345:
	ldr	r0, .L383
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB3767
	b	.L342	@long jump
.LCB3767:
	ldrh	r0, [r6, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x65
	bgt	.LCB3776
	b	.L342	@long jump
.LCB3776:
	strh	r1, [r6, #0x12]
	b	.L378
.L384:
	.align	2, 0
.L383:
	.word	gPaletteFade
.L353:
	mov	r0, #0x12
	ldrsh	r1, [r6, r0]
	cmp	r1, #0
	bne	.L354	@cond_branch
	ldr	r0, .L385
	strh	r1, [r0, #0x2e]
	mov	r1, #0x80
	strh	r1, [r0, #0x30]
	ldrb	r0, [r6]
	bl	ListMenu_ProcessInput
.L354:
	ldrh	r0, [r6, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x65
	bgt	.LCB3813
	b	.L342	@long jump
.LCB3813:
	mov	r0, #0x0
	strh	r0, [r6, #0x12]
	b	.L378
.L386:
	.align	2, 0
.L385:
	.word	gMain
.L361:
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	cmp	r1, #0
	bne	.L362	@cond_branch
	ldr	r0, .L387
	strh	r1, [r0, #0x2e]
	mov	r1, #0x40
	strh	r1, [r0, #0x30]
	ldrb	r0, [r6]
	bl	ListMenu_ProcessInput
.L362:
	ldrh	r0, [r6, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x65
	bgt	.LCB3851
	b	.L342	@long jump
.LCB3851:
	mov	r0, #0x0
	strh	r0, [r6, #0x12]
	b	.L378
.L388:
	.align	2, 0
.L387:
	.word	gMain
.L364:
	mov	r0, #0x1
	bl	SetDescriptionWindowShade
	ldr	r2, .L389
	add	r0, r4, #0
	mov	r1, #0x4
	mov	r3, #0x0
	bl	PrintMessageWithFollowupTask
	ldr	r1, .L389+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L389+0x8
	str	r1, [r0]
	b	.L378
.L390:
	.align	2, 0
.L389:
	.word	gPokedudeText_TMTypes
	.word	gTasks
	.word	Task_Pokedude_Run
.L366:
	bl	RunTextPrinters
	mov	r0, #0x6
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB3897
	b	.L342	@long jump
.LCB3897:
	b	.L378
.L368:
	ldr	r0, .L391
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3911
	b	.L342	@long jump
.LCB3911:
	mov	r0, #0x0
	bl	SetDescriptionWindowShade
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x6
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x6
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrameToTransparent
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	b	.L378
.L392:
	.align	2, 0
.L391:
	.word	gMain
.L370:
	mov	r0, #0x1
	bl	SetDescriptionWindowShade
	ldr	r2, .L393
	add	r0, r4, #0
	mov	r1, #0x4
	mov	r3, #0x0
	bl	PrintMessageWithFollowupTask
	ldr	r1, .L393+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L393+0x8
	str	r1, [r0]
	b	.L378
.L394:
	.align	2, 0
.L393:
	.word	gPokedudeText_ReadTMDescription
	.word	gTasks
	.word	Task_Pokedude_Run
.L371:
	ldr	r0, .L395
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L342	@cond_branch
	b	.L378
.L396:
	.align	2, 0
.L395:
	.word	gMain
.L373:
	ldr	r0, .L397
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L342	@cond_branch
	ldr	r5, .L397+0x4
	ldr	r0, [r5]
	ldr	r1, .L397+0x8
	add	r0, r0, r1
	ldr	r4, .L397+0xc
	ldr	r1, [r4]
	mov	r2, #0xe8
	bl	memcpy
	ldr	r0, [r5]
	mov	r3, #0xee
	lsl	r3, r3, #0x2
	add	r0, r0, r3
	ldr	r1, [r4]
	add	r1, r1, #0xe8
	mov	r2, #0x78
	bl	memcpy
	ldrb	r0, [r6]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	ldr	r2, .L397+0x10
	ldr	r0, [r4]
	mov	r3, #0xb0
	lsl	r3, r3, #0x1
	add	r1, r0, r3
	ldrh	r1, [r1]
	strh	r1, [r2, #0x8]
	add	r3, r3, #0x2
	add	r1, r0, r3
	ldrh	r1, [r1]
	strh	r1, [r2, #0xa]
	bl	Free
	ldr	r0, .L397+0x14
	ldr	r1, .L397+0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	CpuFastSet
	bl	CB2_SetUpReshowBattleScreenAfterMenu
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	str	r7, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L378:
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x10]
	b	.L342
.L398:
	.align	2, 0
.L397:
	.word	gPaletteFade
	.word	gSaveBlock1Ptr
	.word	0x464
	.word	sPokedudeBagBackup
	.word	sTMCaseStaticResources
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
.L375:
	ldr	r0, .L399
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L342	@cond_branch
	ldr	r0, .L399+0x4
	ldr	r0, [r0]
	bl	SetMainCallback2
	bl	RemoveScrollArrows
	bl	DestroyTMCaseBuffers
	add	r0, r4, #0
	bl	DestroyTask
.L342:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L400:
	.align	2, 0
.L399:
	.word	gPaletteFade
	.word	sTMCaseStaticResources
.Lfe53:
	.size	 Task_Pokedude_Run,.Lfe53-Task_Pokedude_Run
	.align	2, 0
	.type	 InitWindowTemplatesAndPals,function
	.thumb_func
InitWindowTemplatesAndPals:
	push	{r4, lr}
	ldr	r0, .L407
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r0, #0x0
	mov	r1, #0x5b
	mov	r2, #0xe0
	bl	LoadUserWindowGfx
	mov	r0, #0x0
	mov	r1, #0x64
	mov	r2, #0xb0
	bl	LoadMenuMessageWindowGfx
	mov	r0, #0x0
	mov	r1, #0x78
	mov	r2, #0xd0
	bl	LoadStdWindowGfx
	ldr	r4, .L407+0x4
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	add	r0, r4, #0
	mov	r1, #0xa0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r4, .L407+0x8
	add	r0, r4, #0
	mov	r1, #0xf6
	mov	r2, #0x4
	bl	LoadPalette
	add	r0, r4, #0
	mov	r1, #0xd6
	mov	r2, #0x4
	bl	LoadPalette
	mov	r0, #0xc0
	mov	r1, #0x1
	bl	ListMenuLoadStdPalAt
	mov	r4, #0x0
.L405:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x8
	bls	.L405	@cond_branch
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x3
	bl	PutWindowTilemap
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x5
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L408:
	.align	2, 0
.L407:
	.word	sWindowTemplates
	.word	gStandardMenuPalette
	.word	sPal3Override
.Lfe54:
	.size	 InitWindowTemplatesAndPals,.Lfe54-InitWindowTemplatesAndPals
	.align	2, 0
	.type	 TMCase_Print,function
	.thumb_func
TMCase_Print:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	mov	r9, r3
	ldr	r3, [sp, #0x30]
	ldr	r4, [sp, #0x34]
	ldr	r6, [sp, #0x38]
	ldr	r5, [sp, #0x3c]
	mov	r8, r5
	ldr	r5, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r7, r9
	lsl	r7, r7, #0x18
	lsr	r7, r7, #0x18
	mov	r9, r7
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r6, [sp, #0x4]
	lsl	r4, r5, #0x1
	add	r4, r4, r5
	ldr	r5, .L410
	add	r4, r4, r5
	str	r4, [sp, #0x8]
	mov	r4, r8
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp, #0xc]
	str	r2, [sp, #0x10]
	mov	r2, r9
	bl	AddTextPrinterParameterized4
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L411:
	.align	2, 0
.L410:
	.word	sTextColors
.Lfe55:
	.size	 TMCase_Print,.Lfe55-TMCase_Print
	.align	2, 0
	.type	 TMCase_SetWindowBorder1,function
	.thumb_func
TMCase_SetWindowBorder1:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	mov	r2, #0x5b
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 TMCase_SetWindowBorder1,.Lfe56-TMCase_SetWindowBorder1
	.align	2, 0
	.type	 TMCase_SetWindowBorder2,function
	.thumb_func
TMCase_SetWindowBorder2:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	mov	r2, #0x78
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 TMCase_SetWindowBorder2,.Lfe57-TMCase_SetWindowBorder2
	.align	2, 0
	.type	 PrintMessageWithFollowupTask,function
	.thumb_func
PrintMessageWithFollowupTask:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r4, r1, #0
	add	r6, r2, #0
	mov	r8, r3
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	GetTextSpeedSetting
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp]
	str	r0, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, r8
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0x6
	mov	r2, #0x64
	mov	r3, #0xb
	bl	DisplayMessageAndContinueTask
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 PrintMessageWithFollowupTask,.Lfe58-PrintMessageWithFollowupTask
	.align	2, 0
	.type	 PrintTitle,function
	.thumb_func
PrintTitle:
	push	{r4, lr}
	add	sp, sp, #-0xc
	ldr	r4, .L416
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r2, #0x48
	sub	r2, r2, r0
	lsr	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L416+0x4
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L417:
	.align	2, 0
.L416:
	.word	gText_TMCase
	.word	sTextColors
.Lfe59:
	.size	 PrintTitle,.Lfe59-PrintTitle
	.align	2, 0
	.type	 DrawMoveInfoLabels,function
	.thumb_func
DrawMoveInfoLabels:
	push	{lr}
	mov	r0, #0x4
	mov	r1, #0x13
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlitMenuInfoIcon
	mov	r0, #0x4
	mov	r1, #0x14
	mov	r2, #0x0
	mov	r3, #0xc
	bl	BlitMenuInfoIcon
	mov	r0, #0x4
	mov	r1, #0x15
	mov	r2, #0x0
	mov	r3, #0x18
	bl	BlitMenuInfoIcon
	mov	r0, #0x4
	mov	r1, #0x16
	mov	r2, #0x0
	mov	r3, #0x24
	bl	BlitMenuInfoIcon
	mov	r0, #0x4
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 DrawMoveInfoLabels,.Lfe60-DrawMoveInfoLabels
	.align	2, 0
	.type	 PrintMoveInfo,function
	.thumb_func
PrintMoveInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x28
	str	r0, [sp]
	mov	r0, #0x30
	str	r0, [sp, #0x4]
	mov	r0, #0x5
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
	cmp	r4, #0
	bne	.L420	@cond_branch
	mov	r4, #0x0
	mov	r5, #0x0
.L424:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x18
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	mov	r0, #0x3
	str	r0, [sp, #0x10]
	mov	r0, #0x5
	mov	r1, #0x3
	ldr	r2, .L431
	mov	r3, #0x7
	bl	TMCase_Print
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L424	@cond_branch
	mov	r0, #0x5
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L426
.L432:
	.align	2, 0
.L431:
	.word	gText_ThreeHyphens
.L420:
	add	r0, r4, #0
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r1, .L433
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	ldrb	r1, [r5, #0x2]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x5
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlitMenuInfoIcon
	ldrb	r0, [r5, #0x1]
	cmp	r0, #0x1
	bhi	.L427	@cond_branch
	ldr	r2, .L433+0x4
	b	.L428
.L434:
	.align	2, 0
.L433:
	.word	gBattleMoves
	.word	gText_ThreeHyphens
.L427:
	ldr	r4, .L435
	ldrb	r1, [r5, #0x1]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r2, r4, #0
.L428:
	mov	r0, #0xc
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	mov	r0, #0x3
	str	r0, [sp, #0x10]
	mov	r0, #0x5
	mov	r1, #0x3
	mov	r3, #0x7
	bl	TMCase_Print
	ldr	r2, .L435+0x4
	lsl	r1, r7, #0x1
	add	r0, r1, r7
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x3]
	add	r6, r1, #0
	cmp	r0, #0
	bne	.L429	@cond_branch
	ldr	r2, .L435+0x8
	b	.L430
.L436:
	.align	2, 0
.L435:
	.word	gStringVar1
	.word	gBattleMoves
	.word	gText_ThreeHyphens
.L429:
	ldr	r4, .L437
	ldrb	r1, [r2, #0x3]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r2, r4, #0
.L430:
	mov	r0, #0x18
	str	r0, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0xff
	mov	r8, r0
	str	r0, [sp, #0xc]
	mov	r0, #0x3
	mov	r9, r0
	str	r0, [sp, #0x10]
	mov	r0, #0x5
	mov	r1, #0x3
	mov	r3, #0x7
	bl	TMCase_Print
	ldr	r5, .L437
	ldr	r1, .L437+0x4
	add	r0, r6, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x4]
	add	r0, r5, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x24
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, r8
	str	r0, [sp, #0xc]
	mov	r0, r9
	str	r0, [sp, #0x10]
	mov	r0, #0x5
	mov	r1, #0x3
	add	r2, r5, #0
	mov	r3, #0x7
	bl	TMCase_Print
	mov	r0, #0x5
	mov	r1, #0x2
	bl	CopyWindowToVram
.L426:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L438:
	.align	2, 0
.L437:
	.word	gStringVar1
	.word	gBattleMoves
.Lfe61:
	.size	 PrintMoveInfo,.Lfe61-PrintMoveInfo
	.align	2, 0
	.type	 PlaceHMTileInWindow,function
	.thumb_func
PlaceHMTileInWindow:
	push	{r4, lr}
	add	sp, sp, #-0x8
	add	r4, r1, #0
	add	r3, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r1, .L440
	mov	r2, #0x10
	str	r2, [sp]
	mov	r2, #0xc
	str	r2, [sp, #0x4]
	add	r2, r4, #0
	bl	BlitBitmapToWindow
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L441:
	.align	2, 0
.L440:
	.word	gTMCaseHM_Gfx
.Lfe62:
	.size	 PlaceHMTileInWindow,.Lfe62-PlaceHMTileInWindow
	.align	2, 0
	.type	 PrintPlayersMoney,function
	.thumb_func
PrintPlayersMoney:
	push	{lr}
	ldr	r0, .L443
	ldr	r0, [r0]
	mov	r1, #0xa4
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	bl	GetMoney
	add	r3, r0, #0
	mov	r0, #0x8
	mov	r1, #0x78
	mov	r2, #0xd
	bl	PrintMoneyAmountInMoneyBoxWithBorder
	pop	{r0}
	bx	r0
.L444:
	.align	2, 0
.L443:
	.word	gSaveBlock1Ptr
.Lfe63:
	.size	 PrintPlayersMoney,.Lfe63-PrintPlayersMoney
	.align	2, 0
	.type	 HandleCreateYesNoMenu,function
	.thumb_func
HandleCreateYesNoMenu:
	push	{lr}
	add	sp, sp, #-0x10
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L446
	mov	r2, #0x2
	str	r2, [sp]
	mov	r2, #0x5b
	str	r2, [sp, #0x4]
	mov	r2, #0xe
	str	r2, [sp, #0x8]
	str	r3, [sp, #0xc]
	mov	r2, #0x2
	mov	r3, #0x0
	bl	CreateYesNoMenuWithCallbacks
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L447:
	.align	2, 0
.L446:
	.word	sYesNoWindowTemplate
.Lfe64:
	.size	 HandleCreateYesNoMenu,.Lfe64-HandleCreateYesNoMenu
	.align	2, 0
	.type	 AddContextMenu,function
	.thumb_func
AddContextMenu:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L449	@cond_branch
	lsl	r0, r1, #0x3
	ldr	r1, .L450
	add	r0, r0, r1
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	TMCase_SetWindowBorder1
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
.L449:
	ldrb	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.L451:
	.align	2, 0
.L450:
	.word	sWindowTemplates_ContextMenu
.Lfe65:
	.size	 AddContextMenu,.Lfe65-AddContextMenu
	.align	2, 0
	.type	 RemoveContextMenu,function
	.thumb_func
RemoveContextMenu:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	bl	RemoveWindow
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0xff
	strb	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe66:
	.size	 RemoveContextMenu,.Lfe66-RemoveContextMenu
	.align	2, 0
	.type	 CreateDiscSprite,function
	.thumb_func
CreateDiscSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L458
	mov	r1, #0x29
	mov	r2, #0x2e
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r6, #0
	beq	.L454	@cond_branch
	add	r5, r6, #0
	sub	r5, r5, #0x21
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	ldr	r0, .L458+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SetDiscSpriteAnim
	ldr	r0, .L458+0x8
	mov	r8, r0
	add	r0, r6, #0
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r0, [r1, #0x2]
	bl	TintDiscpriteByType
	add	r0, r4, #0
	add	r1, r5, #0
	b	.L457
.L459:
	.align	2, 0
.L458:
	.word	sSpriteTemplate_Disc
	.word	gSprites
	.word	gBattleMoves
.L454:
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	ldr	r1, .L460
	add	r0, r0, r1
	mov	r1, #0xff
.L457:
	bl	SetDiscSpritePosition
	add	r0, r7, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L461:
	.align	2, 0
.L460:
	.word	gSprites
.Lfe67:
	.size	 CreateDiscSprite,.Lfe67-CreateDiscSprite
	.align	2, 0
	.type	 SetDiscSpriteAnim,function
	.thumb_func
SetDiscSpriteAnim:
	push	{lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x31
	bls	.L463	@cond_branch
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L464
.L463:
	mov	r1, #0x0
	bl	StartSpriteAnim
.L464:
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 SetDiscSpriteAnim,.Lfe68-SetDiscSpriteAnim
	.align	2, 0
	.type	 TintDiscpriteByType,function
	.thumb_func
TintDiscpriteByType:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x1c
	lsr	r5, r0, #0x18
	ldr	r2, .L467
	ldr	r0, .L467+0x4
	lsl	r4, r4, #0x1
	add	r4, r4, r0
	ldrh	r1, [r4]
	lsl	r1, r1, #0x1
	ldr	r0, [r2]
	add	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r2, r1, #0
	add	r1, r5, #0
	orr	r1, r1, r2
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L467+0x8
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x4
	bne	.L466	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	mov	r1, #0x4
	mov	r2, #0x0
	bl	BlendPalettes
.L466:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L468:
	.align	2, 0
.L467:
	.word	sTMSpritePaletteBuffer
	.word	sTMSpritePaletteOffsetByType
	.word	sTMCaseStaticResources
.Lfe69:
	.size	 TintDiscpriteByType,.Lfe69-TintDiscpriteByType
	.align	2, 0
	.type	 SetDiscSpritePosition,function
	.thumb_func
SetDiscSpritePosition:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	cmp	r4, #0xff
	bne	.L470	@cond_branch
	mov	r6, #0x1b
	mov	r1, #0x36
	mov	r0, #0x14
	strh	r0, [r5, #0x26]
	b	.L471
.L470:
	cmp	r4, #0x31
	bls	.L472	@cond_branch
	add	r0, r4, #0
	sub	r0, r0, #0x32
	b	.L474
.L472:
	add	r0, r4, #0
	add	r0, r0, #0x8
.L474:
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x9
	mov	r1, #0x3a
	bl	__divsi3
	asr	r0, r0, #0x8
	mov	r1, #0x29
	sub	r6, r1, r0
	lsl	r0, r4, #0xb
	mov	r1, #0x3a
	bl	__divsi3
	asr	r0, r0, #0x8
	add	r1, r0, #0
	add	r1, r1, #0x2e
.L471:
	strh	r6, [r5, #0x20]
	strh	r1, [r5, #0x22]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 SetDiscSpritePosition,.Lfe70-SetDiscSpritePosition
	.align	2, 0
	.type	 SwapDisc,function
	.thumb_func
SwapDisc:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L476
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r0, r2, r3
	mov	r4, #0x0
	strh	r1, [r0, #0x2e]
	strh	r4, [r0, #0x30]
	add	r3, r3, #0x1c
	add	r2, r2, r3
	ldr	r0, .L476+0x4
	str	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L477:
	.align	2, 0
.L476:
	.word	gSprites
	.word	SpriteCB_SwapDisc
.Lfe71:
	.size	 SwapDisc,.Lfe71-SwapDisc
	.align	2, 0
	.type	 SpriteCB_SwapDisc,function
	.thumb_func
SpriteCB_SwapDisc:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L480	@cond_branch
	cmp	r0, #0x1
	beq	.L485	@cond_branch
	b	.L479
.L480:
	ldrh	r1, [r5, #0x26]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x13
	ble	.L481	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L490	@cond_branch
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	ldr	r4, .L492
	ldrh	r0, [r5, #0x2e]
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x2]
	bl	TintDiscpriteByType
	ldr	r2, .L492+0x4
	add	r1, r2, #0
	ldrh	r0, [r5, #0x2e]
	add	r1, r1, r0
	strh	r1, [r5, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	SetDiscSpriteAnim
	ldrh	r1, [r5, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	SetDiscSpritePosition
	b	.L479
.L493:
	.align	2, 0
.L492:
	.word	gBattleMoves
	.word	-0x121
.L481:
	add	r0, r1, #0
	add	r0, r0, #0xa
	b	.L491
.L485:
	ldrh	r1, [r5, #0x26]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	bgt	.L486	@cond_branch
.L490:
	ldr	r0, .L494
	str	r0, [r5, #0x1c]
	b	.L479
.L495:
	.align	2, 0
.L494:
	.word	SpriteCallbackDummy
.L486:
	add	r0, r1, #0
	sub	r0, r0, #0xa
.L491:
	strh	r0, [r5, #0x26]
.L479:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 SpriteCB_SwapDisc,.Lfe72-SpriteCB_SwapDisc
	.align	2, 0
	.type	 LoadDiscTypePalettes,function
	.thumb_func
LoadDiscTypePalettes:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	ldr	r4, .L497
	mov	r5, #0x88
	lsl	r5, r5, #0x2
	add	r0, r5, #0
	bl	Alloc
	add	r1, r0, #0
	str	r1, [r4]
	ldr	r0, .L497+0x4
	bl	LZDecompressWram
	ldr	r0, .L497+0x8
	ldr	r1, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	bl	LZDecompressWram
	ldr	r0, [r4]
	add	r0, r0, r5
	str	r0, [sp]
	ldr	r1, .L497+0xc
	ldr	r0, [sp, #0x4]
	and	r0, r0, r1
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpritePalette
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L498:
	.align	2, 0
.L497:
	.word	sTMSpritePaletteBuffer
	.word	gTMCaseDiscTypes1_Pal
	.word	gTMCaseDiscTypes2_Pal
	.word	-0x10000
.Lfe73:
	.size	 LoadDiscTypePalettes,.Lfe73-LoadDiscTypePalettes
.text
	.align	2, 0 @ Don't pad with nop

