@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sWork,object
	.size	 sWork,4
sWork:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,4
sBgTemplates:
	.byte	0xfc
	.byte	0x1
	.space	2
	.align	2, 0
	.type	 sWindowTemplates,object
sWindowTemplates:
	.byte	0x0
	.byte	0x2
	.byte	0xf
	.byte	0x1a
	.byte	0x4
	.byte	0xe
	.short	0x14
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates,16
	.type	 sTextColors,object
sTextColors:
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.size	 sTextColors,3
.text
	.align	2, 0
	.type	 SetUpPartiesAndStartBattle,function
	.thumb_func
SetUpPartiesAndStartBattle:
	push	{r4, r5, r6, r7, lr}
	mov	r0, #0xa
	bl	StartUnionRoomBattle
	mov	r4, #0x0
	mov	r7, #0x64
	ldr	r6, .L20
	ldr	r5, .L20+0x4
.L8:
	ldr	r0, .L20+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r6
	add	r0, r5, #0
	mov	r2, #0x64
	bl	memcpy
	add	r5, r5, #0x64
	add	r4, r4, #0x1
	cmp	r4, #0x1
	ble	.L8	@cond_branch
	ldr	r4, .L20
	mov	r0, #0xfa
	lsl	r0, r0, #0x1
	add	r5, r4, r0
.L13:
	add	r0, r4, #0
	bl	ZeroMonData
	add	r4, r4, #0x64
	cmp	r4, r5
	ble	.L13	@cond_branch
	ldr	r4, .L20
	mov	r5, #0x0
	add	r6, r4, #0
	add	r6, r6, #0x64
.L18:
	ldr	r1, .L20+0x4
	add	r1, r5, r1
	add	r0, r4, #0
	mov	r2, #0x64
	bl	memcpy
	add	r4, r4, #0x64
	add	r5, r5, #0x64
	cmp	r4, r6
	ble	.L18	@cond_branch
	mov	r0, #0x32
	bl	IncrementGameStat
	bl	CalculatePlayerPartyCount
	ldr	r0, .L20+0xc
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r1, r2, #0
	strh	r1, [r0]
	ldr	r0, .L20+0x10
	bl	SetMainCallback2
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gSelectedOrderFromParty
	.word	gTrainerBattleOpponent_A
	.word	CB2_InitBattle
.Lfe1:
	.size	 SetUpPartiesAndStartBattle,.Lfe1-SetUpPartiesAndStartBattle
	.align	2, 0
	.type	 UnionRoomBattle_CreateTextPrinter,function
	.thumb_func
UnionRoomBattle_CreateTextPrinter:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x18
	add	r5, r0, #0
	mov	sl, r1
	add	r6, r2, #0
	ldr	r4, [sp, #0x34]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	mov	r8, r0
	ldr	r1, .L23
	mov	r9, r1
	ldrb	r0, [r1]
	lsl	r1, r0, #0x4
	orr	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	str	r3, [sp, #0x14]
	bl	FillWindowPixelBuffer
	mov	r0, r8
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r1, r9
	str	r1, [sp, #0x8]
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp, #0xc]
	mov	r0, sl
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x3
	add	r2, r6, #0
	ldr	r3, [sp, #0x14]
	bl	AddTextPrinterParameterized4
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	sTextColors
.Lfe2:
	.size	 UnionRoomBattle_CreateTextPrinter,.Lfe2-UnionRoomBattle_CreateTextPrinter
	.align	2, 0
	.type	 UnionRoomBattle_PrintTextOnWindow0,function
	.thumb_func
UnionRoomBattle_PrintTextOnWindow0:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r6, r1, #0
	add	r5, r2, #0
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L27	@cond_branch
	cmp	r0, #0x1
	beq	.L28	@cond_branch
	b	.L26
.L27:
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0xd
	bl	DrawTextBorderOuter
	str	r5, [sp]
	mov	r0, #0x0
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x2
	bl	UnionRoomBattle_CreateTextPrinter
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L26
.L28:
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L26	@cond_branch
	strh	r0, [r4]
	mov	r0, #0x1
	b	.L32
.L26:
	mov	r0, #0x0
.L32:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 UnionRoomBattle_PrintTextOnWindow0,.Lfe3-UnionRoomBattle_PrintTextOnWindow0
	.align	2, 0
	.type	 VBlankCB_UnionRoomBattle,function
	.thumb_func
VBlankCB_UnionRoomBattle:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 VBlankCB_UnionRoomBattle,.Lfe4-VBlankCB_UnionRoomBattle
	.align	2, 0
	.globl	CB2_UnionRoomBattle
	.type	 CB2_UnionRoomBattle,function
	.thumb_func
CB2_UnionRoomBattle:
	push	{r4, lr}
	add	sp, sp, #-0xc
	ldr	r1, .L68
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0x33
	bls	.LCB261
	b	.L35	@long jump
.LCB261:
	lsl	r0, r0, #0x2
	ldr	r1, .L68+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L69:
	.align	2, 0
.L68:
	.word	gMain
	.word	.L63
	.align	2, 0
	.align	2, 0
.L63:
	.word	.L36
	.word	.L38
	.word	.L40
	.word	.L41
	.word	.L45
	.word	.L35
	.word	.L59
	.word	.L57
	.word	.L59
	.word	.L61
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L35
	.word	.L51
	.word	.L53
.L36:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r4, .L70
	mov	r0, #0x4
	bl	AllocZeroed
	str	r0, [r4]
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L70+0x4
	mov	r0, #0x0
	mov	r2, #0x1
	bl	InitBgsFromTemplates
	bl	ResetTempTileDataBuffers
	ldr	r0, .L70+0x8
	bl	InitWindows
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.LCB307
	b	.L34	@long jump
.LCB307:
	bl	DeactivateAllTextPrinters
	mov	r0, #0x0
	bl	ClearWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x1e
	str	r0, [sp]
	mov	r0, #0x14
	str	r0, [sp, #0x4]
	mov	r0, #0xf
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0xd0
	bl	LoadStdWindowGfx
	bl	Menu_LoadStdPal
	ldr	r0, .L70+0xc
	bl	SetVBlankCallback
	ldr	r1, .L70+0x10
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	b	.L65
.L71:
	.align	2, 0
.L70:
	.word	sWork
	.word	sBgTemplates
	.word	sWindowTemplates
	.word	VBlankCB_UnionRoomBattle
	.word	gMain
.L38:
	ldr	r0, .L72
	ldr	r0, [r0]
	ldr	r1, .L72+0x4
	mov	r2, #0x0
	bl	UnionRoomBattle_PrintTextOnWindow0
	cmp	r0, #0
	bne	.LCB364
	b	.L35	@long jump
.LCB364:
	ldr	r1, .L72+0x8
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L65
.L73:
	.align	2, 0
.L72:
	.word	sWork
	.word	gText_CommStandbyAwaitingOtherPlayer
	.word	gMain
.L40:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	bl	ShowBg
	ldr	r1, .L74
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	b	.L65
.L75:
	.align	2, 0
.L74:
	.word	gMain
.L41:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB412
	b	.L35	@long jump
.LCB412:
	ldr	r4, .L76
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x20
	bl	memset
	ldr	r0, .L76+0x4
	ldrb	r1, [r0]
	ldrb	r0, [r0, #0x1]
	cmn	r1, r0
	bne	.L43	@cond_branch
	mov	r0, #0x52
	b	.L66
.L77:
	.align	2, 0
.L76:
	.word	gBlockSendBuffer
	.word	gSelectedOrderFromParty
.L43:
	mov	r0, #0x51
.L66:
	strb	r0, [r4]
	ldr	r1, .L78
	mov	r0, #0x0
	mov	r2, #0x20
	bl	SendBlock
	ldr	r1, .L78+0x4
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L65
.L79:
	.align	2, 0
.L78:
	.word	gBlockSendBuffer
	.word	gMain
.L45:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.LCB466
	b	.L35	@long jump
.LCB466:
	ldr	r1, .L80
	ldrh	r0, [r1]
	cmp	r0, #0x51
	bne	.L47	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	ldrh	r0, [r0]
	cmp	r0, #0x51
	bne	.L47	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L80+0x4
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L67
.L81:
	.align	2, 0
.L80:
	.word	gBlockRecvBuffer
	.word	gMain
.L47:
	bl	SetCloseLinkCallback
	ldr	r4, .L82
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r0, #0x52
	bne	.L49	@cond_branch
	ldr	r0, .L82+0x4
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	mov	r1, #0x6
	b	.L67
.L83:
	.align	2, 0
.L82:
	.word	gBlockRecvBuffer
	.word	gMain
.L49:
	ldr	r0, .L84
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
.L67:
	strb	r1, [r0]
	bl	ResetBlockReceivedFlags
	b	.L35
.L85:
	.align	2, 0
.L84:
	.word	gMain
.L51:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L35	@cond_branch
	bl	SetLinkStandbyCallback
	ldr	r1, .L86
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L65
.L87:
	.align	2, 0
.L86:
	.word	gMain
.L53:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L35	@cond_branch
	ldr	r0, .L88
	bl	SetMainCallback2
	b	.L35
.L89:
	.align	2, 0
.L88:
	.word	SetUpPartiesAndStartBattle
.L57:
	ldr	r0, .L90
	ldr	r0, [r0]
	ldr	r1, .L90+0x4
	mov	r2, #0x1
	bl	UnionRoomBattle_PrintTextOnWindow0
	cmp	r0, #0
	beq	.L35	@cond_branch
	ldr	r0, .L90+0x8
	bl	SetMainCallback2
	b	.L35
.L91:
	.align	2, 0
.L90:
	.word	sWork
	.word	gText_RefusedBattle
	.word	CB2_ReturnToField
.L59:
	ldr	r0, .L92
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L35	@cond_branch
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r2, r0
.L65:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L35
.L93:
	.align	2, 0
.L92:
	.word	gReceivedRemoteLinkPlayers
.L61:
	ldr	r0, .L94
	ldr	r0, [r0]
	ldr	r1, .L94+0x4
	mov	r2, #0x1
	bl	UnionRoomBattle_PrintTextOnWindow0
	cmp	r0, #0
	beq	.L35	@cond_branch
	ldr	r0, .L94+0x8
	bl	SetMainCallback2
.L35:
	bl	RunTasks
	bl	RunTextPrinters
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
.L34:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	sWork
	.word	gText_BattleWasRefused
	.word	CB2_ReturnToField
.Lfe5:
	.size	 CB2_UnionRoomBattle,.Lfe5-CB2_UnionRoomBattle
.text
	.align	2, 0 @ Don't pad with nop

