@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sWork,object
	.size	 sWork,4
sWork:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sChatEntryRoutines,object
sChatEntryRoutines:
	.word	ChatEntryRoutine_Join
	.word	ChatEntryRoutine_HandleInput
	.word	ChatEntryRoutine_Switch
	.word	ChatEntryRoutine_AskQuitChatting
	.word	ChatEntryRoutine_SendMessage
	.word	ChatEntryRoutine_Register
	.word	ChatEntryRoutine_ExitChat
	.word	ChatEntryRoutine_Drop
	.word	ChatEntryRoutine_Disbanded
	.word	ChatEntryRoutine_SaveAndExit
	.size	 sChatEntryRoutines,40
	.type	 sKeyboardPageMaxRow,object
sKeyboardPageMaxRow:
	.byte	0x9
	.byte	0x9
	.byte	0x9
	.byte	0x9
	.size	 sKeyboardPageMaxRow,4
	.type	 sCaseToggleTable,object
	.size	 sCaseToggleTable,256
sCaseToggleTable:
	.space	1
	.byte	0x16
	.byte	0x17
	.byte	0x68
	.byte	0x19
	.byte	0x1a
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.byte	0x1e
	.space	1
	.byte	0x20
	.byte	0x21
	.byte	0x22
	.byte	0x23
	.byte	0x24
	.byte	0x25
	.byte	0x26
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.byte	0x15
	.byte	0x1
	.byte	0x2
	.space	1
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.space	1
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x2a
	.byte	0x2b
	.byte	0x2c
	.byte	0x2d
	.space	7
	.byte	0x35
	.byte	0x36
	.space	28
	.byte	0x53
	.byte	0x54
	.byte	0x55
	.byte	0x56
	.space	3
	.byte	0x6f
	.byte	0x5b
	.byte	0x5c
	.byte	0x5d
	.space	10
	.byte	0x3
	.space	6
	.byte	0x5a
	.space	20
	.byte	0x84
	.byte	0x85
	.byte	0x86
	.space	25
	.byte	0xa0
	.byte	0xa1
	.byte	0xa2
	.byte	0xa3
	.byte	0xa4
	.byte	0xa5
	.byte	0xa6
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0xab
	.byte	0xac
	.byte	0xad
	.byte	0xae
	.byte	0xaf
	.byte	0xb0
	.byte	0xb1
	.byte	0xb2
	.byte	0xb3
	.byte	0xb4
	.byte	0xb5
	.byte	0xb6
	.byte	0xb7
	.byte	0xb8
	.byte	0xb9
	.byte	0xba
	.byte	0xd5
	.byte	0xd6
	.byte	0xd7
	.byte	0xd8
	.byte	0xd9
	.byte	0xda
	.byte	0xdb
	.byte	0xdc
	.byte	0xdd
	.byte	0xde
	.byte	0xdf
	.byte	0xe0
	.byte	0xe1
	.byte	0xe2
	.byte	0xe3
	.byte	0xe4
	.byte	0xe5
	.byte	0xe6
	.byte	0xe7
	.byte	0xe8
	.byte	0xe9
	.byte	0xea
	.byte	0xeb
	.byte	0xec
	.byte	0xed
	.byte	0xee
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.byte	0xc1
	.byte	0xc2
	.byte	0xc3
	.byte	0xc4
	.byte	0xc5
	.byte	0xc6
	.byte	0xc7
	.byte	0xc8
	.byte	0xc9
	.byte	0xca
	.byte	0xcb
	.byte	0xcc
	.byte	0xcd
	.byte	0xce
	.byte	0xcf
	.byte	0xd0
	.byte	0xd1
	.byte	0xd2
	.byte	0xd3
	.byte	0xd4
	.byte	0xef
	.byte	0xf0
	.byte	0xf4
	.byte	0xf5
	.byte	0xf6
	.byte	0xf1
	.byte	0xf2
	.byte	0xf3
	.space	9
	.globl	gUnionRoomKeyboardText
	.align	2, 0
	.type	 gUnionRoomKeyboardText,object
	.size	 gUnionRoomKeyboardText,120
gUnionRoomKeyboardText:
	.word	gText_UnionRoomChatKeyboard_ABCDE
	.word	gText_UnionRoomChatKeyboard_FGHIJ
	.word	gText_UnionRoomChatKeyboard_KLMNO
	.word	gText_UnionRoomChatKeyboard_PQRST
	.word	gText_UnionRoomChatKeyboard_UVWXY
	.word	gText_UnionRoomChatKeyboard_Z
	.word	gText_UnionRoomChatKeyboard_01234Upper
	.word	gText_UnionRoomChatKeyboard_56789Upper
	.word	gText_UnionRoomChatKeyboard_PunctuationUpper
	.word	gText_UnionRoomChatKeyboard_SymbolsUpper
	.word	gText_UnionRoomChatKeyboard_abcde
	.word	gText_UnionRoomChatKeyboard_fghij
	.word	gText_UnionRoomChatKeyboard_klmno
	.word	gText_UnionRoomChatKeyboard_pqrst
	.word	gText_UnionRoomChatKeyboard_uvwxy
	.word	gText_UnionRoomChatKeyboard_z
	.word	gText_UnionRoomChatKeyboard_01234Lower
	.word	gText_UnionRoomChatKeyboard_56789Lower
	.word	gText_UnionRoomChatKeyboard_PunctuationLower
	.word	gText_UnionRoomChatKeyboard_SymbolsLower
	.word	gText_UnionRoomChatKeyboard_Emoji1
	.word	gText_UnionRoomChatKeyboard_Emoji2
	.word	gText_UnionRoomChatKeyboard_Emoji3
	.word	gText_UnionRoomChatKeyboard_Emoji4
	.word	gText_UnionRoomChatKeyboard_Emoji5
	.word	gText_UnionRoomChatKeyboard_Emoji6
	.word	gText_UnionRoomChatKeyboard_Emoji7
	.word	gText_UnionRoomChatKeyboard_Emoji8
	.word	gText_UnionRoomChatKeyboard_Emoji9
	.word	gText_UnionRoomChatKeyboard_Emoji10
.text
	.align	2, 0
	.globl	EnterUnionRoomChat
	.type	 EnterUnionRoomChat,function
	.thumb_func
EnterUnionRoomChat:
	push	{r4, lr}
	ldr	r4, .L5
	mov	r0, #0xdc
	lsl	r0, r0, #0x1
	bl	Alloc
	str	r0, [r4]
	bl	InitChatWork
	ldr	r1, .L5+0x4
	mov	r0, #0x14
	strh	r0, [r1]
	bl	HelpSystem_DisableToggleWithRButton
	mov	r0, #0x0
	bl	SetVBlankCallback
	ldr	r0, .L5+0x8
	bl	SetMainCallback2
	pop	{r4}
	pop	{r0}
	bx	r0
.L6:
	.align	2, 0
.L5:
	.word	sWork
	.word	gKeyRepeatStartDelay
	.word	CB2_LoadInterface
.Lfe1:
	.size	 EnterUnionRoomChat,.Lfe1-EnterUnionRoomChat
	.align	2, 0
	.type	 InitChatWork,function
	.thumb_func
InitChatWork:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x4]
	strh	r0, [r4, #0x6]
	strb	r5, [r4, #0x10]
	strb	r5, [r4, #0x11]
	strb	r5, [r4, #0x12]
	strb	r5, [r4, #0x14]
	strb	r5, [r4, #0x15]
	strb	r5, [r4, #0x16]
	mov	r0, #0xff
	strb	r0, [r4, #0x1a]
	bl	GetLinkPlayerCount
	strb	r0, [r4, #0xd]
	bl	GetMultiplayerId
	strb	r0, [r4, #0x13]
	strb	r5, [r4, #0x17]
	strb	r5, [r4, #0x18]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	PrepareSendBuffer_Null
	ldr	r7, .L13
	ldr	r6, .L13+0x4
	add	r4, r4, #0xb9
	mov	r5, #0x9
.L11:
	ldr	r1, [r7]
	add	r1, r1, r6
	add	r0, r4, #0
	bl	StringCopy
	add	r6, r6, #0x15
	add	r4, r4, #0x15
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L11	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gSaveBlock1Ptr
	.word	0x3ae8
.Lfe2:
	.size	 InitChatWork,.Lfe2-InitChatWork
	.align	2, 0
	.type	 FreeChatWork,function
	.thumb_func
FreeChatWork:
	push	{r4, lr}
	ldr	r4, .L16
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xe]
	bl	DestroyTask
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xf]
	bl	DestroyTask
	ldr	r0, [r4]
	bl	Free
	pop	{r4}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	sWork
.Lfe3:
	.size	 FreeChatWork,.Lfe3-FreeChatWork
	.align	2, 0
	.type	 CB2_LoadInterface,function
	.thumb_func
CB2_LoadInterface:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L29
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r6, r0, r1
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L21	@cond_branch
	cmp	r0, #0x1
	bgt	.L27	@cond_branch
	cmp	r0, #0
	beq	.L20	@cond_branch
	b	.L19
.L30:
	.align	2, 0
.L29:
	.word	gMain
.L27:
	cmp	r0, #0x2
	beq	.L23	@cond_branch
	b	.L19
.L20:
	bl	ResetTasks
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	UnionRoomChat_TryAllocGraphicsWork
	b	.L28
.L21:
	bl	UnionRoomChat_RunDisplaySubtasks
	bl	UnionRoomChat_RunDisplaySubtask0
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L19	@cond_branch
	mov	r4, #0x1
	neg	r4, r4
	add	r0, r4, #0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	str	r5, [sp]
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L31
	bl	SetVBlankCallback
.L28:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	b	.L19
.L32:
	.align	2, 0
.L31:
	.word	VBlankCB_UnionRoomChatMain
.L23:
	bl	UpdatePaletteFade
	ldr	r0, .L33
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L19	@cond_branch
	ldr	r0, .L33+0x4
	bl	SetMainCallback2
	mov	r0, #0x11
	mov	r1, #0x0
	bl	SetQuestLogEvent
	ldr	r0, .L33+0x8
	mov	r1, #0x8
	bl	CreateTask
	ldr	r4, .L33+0xc
	ldr	r1, [r4]
	strb	r0, [r1, #0xe]
	ldr	r0, .L33+0x10
	mov	r1, #0x7
	bl	CreateTask
	ldr	r1, [r4]
	strb	r0, [r1, #0xf]
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0xe8
	mov	r1, #0x96
	bl	CreateWirelessStatusIndicatorSprite
.L19:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gPaletteFade
	.word	CB2_UnionRoomChatMain
	.word	Task_HandlePlayerInput
	.word	sWork
	.word	Task_ReceiveChatMessage
.Lfe4:
	.size	 CB2_LoadInterface,.Lfe4-CB2_LoadInterface
	.align	2, 0
	.type	 VBlankCB_UnionRoomChatMain,function
	.thumb_func
VBlankCB_UnionRoomChatMain:
	push	{lr}
	bl	TransferPlttBuffer
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 VBlankCB_UnionRoomChatMain,.Lfe5-VBlankCB_UnionRoomChatMain
	.align	2, 0
	.type	 CB2_UnionRoomChatMain,function
	.thumb_func
CB2_UnionRoomChatMain:
	push	{lr}
	bl	RunTasks
	bl	UnionRoomChat_RunDisplaySubtasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 CB2_UnionRoomChatMain,.Lfe6-CB2_UnionRoomChatMain
	.align	2, 0
	.type	 Task_HandlePlayerInput,function
	.thumb_func
Task_HandlePlayerInput:
	push	{r4, lr}
	ldr	r4, .L46
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x2
	beq	.L40	@cond_branch
	cmp	r0, #0x2
	bgt	.L44	@cond_branch
	cmp	r0, #0x1
	beq	.L39	@cond_branch
	b	.L38
.L47:
	.align	2, 0
.L46:
	.word	sWork
.L44:
	cmp	r0, #0x3
	beq	.L41	@cond_branch
	b	.L38
.L39:
	mov	r0, #0x6
	b	.L45
.L40:
	mov	r0, #0x7
	b	.L45
.L41:
	mov	r0, #0x8
.L45:
	bl	GoToRoutine
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x17]
.L38:
	ldr	r1, .L48
	ldr	r0, .L48+0x4
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r4}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	sChatEntryRoutines
	.word	sWork
.Lfe7:
	.size	 Task_HandlePlayerInput,.Lfe7-Task_HandlePlayerInput
	.align	2, 0
	.type	 ChatEntryRoutine_Join,function
	.thumb_func
ChatEntryRoutine_Join:
	push	{r4, lr}
	ldr	r4, .L61
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x6]
	cmp	r1, #0x1
	beq	.L53	@cond_branch
	cmp	r1, #0x1
	bgt	.L60	@cond_branch
	cmp	r1, #0
	beq	.L52	@cond_branch
	b	.L51
.L62:
	.align	2, 0
.L61:
	.word	sWork
.L60:
	cmp	r1, #0x2
	beq	.L56	@cond_branch
	b	.L51
.L52:
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	PrepareSendBuffer_Join
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
.L53:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	bl	Rfu_IsPlayerExchangeActive
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldr	r4, .L63
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L51
.L64:
	.align	2, 0
.L63:
	.word	sWork
.L56:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	mov	r0, #0x1
	bl	GoToRoutine
.L51:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 ChatEntryRoutine_Join,.Lfe8-ChatEntryRoutine_Join
	.align	2, 0
	.type	 ChatEntryRoutine_HandleInput,function
	.thumb_func
ChatEntryRoutine_HandleInput:
	push	{r4, r5, lr}
	ldr	r5, .L90
	ldr	r3, [r5]
	ldrh	r0, [r3, #0x6]
	cmp	r0, #0
	beq	.L67	@cond_branch
	cmp	r0, #0x1
	beq	.L84	@cond_branch
	b	.L66
.L91:
	.align	2, 0
.L90:
	.word	sWork
.L67:
	ldr	r1, .L92
	ldrh	r2, [r1, #0x2e]
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L68	@cond_branch
	ldrb	r0, [r3, #0x15]
	cmp	r0, #0
	beq	.L66	@cond_branch
	mov	r0, #0x4
	bl	GoToRoutine
	b	.L66
.L93:
	.align	2, 0
.L92:
	.word	gMain
.L68:
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L71	@cond_branch
	mov	r0, #0x2
	bl	GoToRoutine
	b	.L66
.L71:
	ldrh	r1, [r1, #0x30]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L73	@cond_branch
	ldrb	r0, [r3, #0x15]
	cmp	r0, #0
	beq	.L74	@cond_branch
	bl	DeleteLastCharacterOfChatMessageBuffer
	mov	r0, #0x8
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r1, [r5]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L66
.L74:
	mov	r0, #0x3
	bl	GoToRoutine
	b	.L66
.L73:
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L77	@cond_branch
	bl	AppendCharacterToChatMessageBuffer
	mov	r0, #0x8
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	mov	r0, #0x2
	mov	r1, #0x1
	b	.L88
.L77:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L79	@cond_branch
	ldrb	r0, [r3, #0x10]
	cmp	r0, #0x3
	beq	.L80	@cond_branch
	bl	ToggleCaseOfLastCharacterInChatMessageBuffer
	mov	r0, #0x8
	b	.L89
.L80:
	mov	r0, #0x5
	bl	GoToRoutine
	b	.L66
.L79:
	bl	TypeChatMessage_HandleDPad
	cmp	r0, #0
	beq	.L66	@cond_branch
	mov	r0, #0x1
.L89:
	mov	r1, #0x0
.L88:
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, [r5]
	strh	r4, [r0, #0x6]
	b	.L66
.L84:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r4, #0
	bne	.L66	@cond_branch
	cmp	r1, #0
	bne	.L66	@cond_branch
	ldr	r0, [r5]
	strh	r1, [r0, #0x6]
.L66:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 ChatEntryRoutine_HandleInput,.Lfe9-ChatEntryRoutine_HandleInput
	.align	2, 0
	.type	 ChatEntryRoutine_Switch,function
	.thumb_func
ChatEntryRoutine_Switch:
	push	{r4, r5, r6, lr}
	ldr	r0, .L117
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x6]
	cmp	r0, #0x4
	bls	.LCB647
	b	.L94	@long jump
.LCB647:
	lsl	r0, r0, #0x2
	ldr	r1, .L117+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L118:
	.align	2, 0
.L117:
	.word	sWork
	.word	.L113
	.align	2, 0
	.align	2, 0
.L113:
	.word	.L96
	.word	.L97
	.word	.L99
	.word	.L109
	.word	.L111
.L96:
	mov	r0, #0x3
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	b	.L116
.L97:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
.L116:
	ldr	r0, .L119
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L94
.L120:
	.align	2, 0
.L119:
	.word	sWork
.L99:
	bl	Menu_ProcessInput
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x8
	lsr	r6, r0, #0x10
	asr	r4, r0, #0x10
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L104	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	beq	.L106	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r5, .L121
	ldr	r2, [r5]
	ldrb	r0, [r2, #0x10]
	cmp	r0, r4
	beq	.L115	@cond_branch
	cmp	r4, #0x3
	ble	.L108	@cond_branch
	b	.L115
.L122:
	.align	2, 0
.L121:
	.word	sWork
.L104:
	ldr	r0, .L123
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L94	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	Menu_MoveCursor
	b	.L94
.L124:
	.align	2, 0
.L123:
	.word	gMain
.L106:
	mov	r0, #0x4
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
.L115:
	ldr	r0, .L125
	ldr	r1, [r0]
	mov	r0, #0x3
	strh	r0, [r1, #0x6]
	b	.L94
.L126:
	.align	2, 0
.L125:
	.word	sWork
.L108:
	mov	r1, #0x0
	strb	r1, [r2, #0x11]
	ldr	r0, [r5]
	strb	r1, [r0, #0x12]
	mov	r0, #0x5
	mov	r1, #0x1
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, [r5]
	strb	r6, [r0, #0x10]
	ldr	r1, [r5]
	mov	r0, #0x4
	strh	r0, [r1, #0x6]
	b	.L94
.L109:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	mov	r0, #0x1
	bl	GoToRoutine
	b	.L94
.L111:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	mov	r0, #0x1
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	mov	r0, #0x1
	bl	GoToRoutine
.L94:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 ChatEntryRoutine_Switch,.Lfe10-ChatEntryRoutine_Switch
	.align	2, 0
	.type	 ChatEntryRoutine_AskQuitChatting,function
	.thumb_func
ChatEntryRoutine_AskQuitChatting:
	push	{r4, lr}
	ldr	r0, .L166
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x6]
	cmp	r0, #0xa
	bls	.LCB836
	b	.L128	@long jump
.LCB836:
	lsl	r0, r0, #0x2
	ldr	r1, .L166+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L167:
	.align	2, 0
.L166:
	.word	sWork
	.word	.L162
	.align	2, 0
	.align	2, 0
.L162:
	.word	.L129
	.word	.L130
	.word	.L132
	.word	.L142
	.word	.L156
	.word	.L160
	.word	.L128
	.word	.L128
	.word	.L148
	.word	.L144
	.word	.L146
.L129:
	mov	r0, #0x6
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L168
	ldr	r1, [r0]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L128
.L169:
	.align	2, 0
.L168:
	.word	sWork
.L130:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB878
	b	.L128	@long jump
.LCB878:
	ldr	r0, .L170
	ldr	r1, [r0]
	mov	r0, #0x2
	strh	r0, [r1, #0x6]
	b	.L128
.L171:
	.align	2, 0
.L170:
	.word	sWork
.L132:
	bl	UnionRoomChat_ProcessInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L136	@cond_branch
	cmp	r1, #0
	ble	.L165	@cond_branch
	b	.L155
.L136:
	ldr	r4, .L172
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L137	@cond_branch
	mov	r2, #0xc8
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	bl	PrepareSendBuffer_Disband
	mov	r0, #0x7
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r1, [r4]
	mov	r0, #0x9
	strh	r0, [r1, #0x6]
	b	.L128
.L173:
	.align	2, 0
.L172:
	.word	sWork
.L137:
	mov	r2, #0xc8
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	bl	PrepareSendBuffer_Leave
	b	.L164
.L142:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L128	@cond_branch
	mov	r0, #0x1
	bl	GoToRoutine
	b	.L128
.L144:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L128	@cond_branch
	mov	r0, #0x14
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L174
	ldr	r1, [r0]
	mov	r0, #0xa
	strh	r0, [r1, #0x6]
	b	.L128
.L175:
	.align	2, 0
.L174:
	.word	sWork
.L146:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L128	@cond_branch
	ldr	r0, .L176
	ldr	r1, [r0]
	mov	r0, #0x8
	strh	r0, [r1, #0x6]
	b	.L128
.L177:
	.align	2, 0
.L176:
	.word	sWork
.L148:
	bl	UnionRoomChat_ProcessInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L152	@cond_branch
	cmp	r1, #0
	bgt	.L155	@cond_branch
.L165:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L151	@cond_branch
	b	.L128
.L155:
	cmp	r1, #0x1
	bne	.L128	@cond_branch
.L151:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L178
	ldr	r1, [r0]
	mov	r0, #0x3
	strh	r0, [r1, #0x6]
	b	.L128
.L179:
	.align	2, 0
.L178:
	.word	sWork
.L152:
	bl	Rfu_StopPartnerSearch
	ldr	r4, .L180
	ldr	r0, [r4]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	PrepareSendBuffer_Disband
.L164:
	ldr	r1, [r4]
	mov	r0, #0x4
	strh	r0, [r1, #0x6]
	b	.L128
.L181:
	.align	2, 0
.L180:
	.word	sWork
.L156:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L128	@cond_branch
	bl	Rfu_IsPlayerExchangeActive
	cmp	r0, #0
	bne	.L128	@cond_branch
	ldr	r4, .L182
	ldr	r1, [r4]
	mov	r2, #0xc8
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L128	@cond_branch
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L158	@cond_branch
	mov	r0, #0x6
	strh	r0, [r1, #0x6]
	b	.L128
.L183:
	.align	2, 0
.L182:
	.word	sWork
.L158:
	mov	r0, #0x5
	strh	r0, [r1, #0x6]
	b	.L128
.L160:
	ldr	r0, .L184
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L128	@cond_branch
	mov	r0, #0x9
	bl	GoToRoutine
.L128:
	pop	{r4}
	pop	{r0}
	bx	r0
.L185:
	.align	2, 0
.L184:
	.word	gReceivedRemoteLinkPlayers
.Lfe11:
	.size	 ChatEntryRoutine_AskQuitChatting,.Lfe11-ChatEntryRoutine_AskQuitChatting
	.align	2, 0
	.type	 ChatEntryRoutine_ExitChat,function
	.thumb_func
ChatEntryRoutine_ExitChat:
	push	{r4, lr}
	ldr	r1, .L209
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r2, r1, #0
	cmp	r0, #0x7
	bls	.LCB1145
	b	.L187	@long jump
.LCB1145:
	lsl	r0, r0, #0x2
	ldr	r1, .L209+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L210:
	.align	2, 0
.L209:
	.word	sWork
	.word	.L206
	.align	2, 0
	.align	2, 0
.L206:
	.word	.L188
	.word	.L190
	.word	.L192
	.word	.L194
	.word	.L196
	.word	.L198
	.word	.L200
	.word	.L203
.L188:
	ldr	r0, .L211
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1172
	b	.L187	@long jump
.LCB1172:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L211+0x4
	ldr	r1, [r0]
	b	.L208
.L212:
	.align	2, 0
.L211:
	.word	Task_ReceiveChatMessage
	.word	sWork
.L190:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
	mov	r0, #0x12
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L213
	ldr	r1, [r0]
	b	.L208
.L214:
	.align	2, 0
.L213:
	.word	sWork
.L192:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
	ldr	r4, .L215
	ldr	r0, [r4]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	PrepareSendBuffer_Drop
	ldr	r1, [r4]
	b	.L208
.L216:
	.align	2, 0
.L215:
	.word	sWork
.L194:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L187	@cond_branch
	bl	Rfu_IsPlayerExchangeActive
	cmp	r0, #0
	bne	.L187	@cond_branch
	ldr	r4, .L217
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L187	@cond_branch
	ldr	r1, [r4]
	b	.L208
.L218:
	.align	2, 0
.L217:
	.word	sWork
.L196:
	bl	GetBlockReceivedStatus
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L187	@cond_branch
	bl	Rfu_IsPlayerExchangeActive
	cmp	r0, #0
	bne	.L187	@cond_branch
	ldr	r0, .L219
	ldr	r1, [r0]
	b	.L208
.L220:
	.align	2, 0
.L219:
	.word	sWork
.L198:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L187	@cond_branch
	bl	Rfu_IsPlayerExchangeActive
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L187	@cond_branch
	bl	SetCloseLinkCallback
	ldr	r0, .L221
	ldr	r1, [r0]
	strh	r4, [r1, #0xa]
	b	.L208
.L222:
	.align	2, 0
.L221:
	.word	sWork
.L200:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bhi	.L201	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L201:
	ldr	r0, .L223
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L187	@cond_branch
	ldr	r1, [r2]
.L208:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L187
.L224:
	.align	2, 0
.L223:
	.word	gReceivedRemoteLinkPlayers
.L203:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bls	.L204	@cond_branch
	mov	r0, #0x9
	bl	GoToRoutine
	b	.L187
.L204:
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L187:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 ChatEntryRoutine_ExitChat,.Lfe12-ChatEntryRoutine_ExitChat
	.align	2, 0
	.type	 ChatEntryRoutine_Drop,function
	.thumb_func
ChatEntryRoutine_Drop:
	push	{r4, r5, lr}
	ldr	r5, .L242
	ldr	r1, [r5]
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0x1
	beq	.L229	@cond_branch
	cmp	r0, #0x1
	bgt	.L239	@cond_branch
	cmp	r0, #0
	beq	.L227	@cond_branch
	b	.L226
.L243:
	.align	2, 0
.L242:
	.word	sWork
.L239:
	cmp	r0, #0x2
	beq	.L231	@cond_branch
	cmp	r0, #0x3
	beq	.L234	@cond_branch
	b	.L226
.L227:
	ldr	r0, .L244
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L226	@cond_branch
	mov	r0, #0x7
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	b	.L240
.L245:
	.align	2, 0
.L244:
	.word	Task_ReceiveChatMessage
.L229:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L226	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L226	@cond_branch
	bl	Rfu_IsPlayerExchangeActive
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L226	@cond_branch
	bl	SetCloseLinkCallback
	ldr	r1, [r5]
	strh	r4, [r1, #0xa]
	b	.L241
.L231:
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bhi	.L232	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L232:
	ldr	r0, .L246
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L226	@cond_branch
.L240:
	ldr	r1, [r5]
.L241:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L226
.L247:
	.align	2, 0
.L246:
	.word	gReceivedRemoteLinkPlayers
.L234:
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bls	.L235	@cond_branch
	mov	r0, #0x9
	bl	GoToRoutine
	b	.L226
.L235:
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L226:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 ChatEntryRoutine_Drop,.Lfe13-ChatEntryRoutine_Drop
	.align	2, 0
	.type	 ChatEntryRoutine_Disbanded,function
	.thumb_func
ChatEntryRoutine_Disbanded:
	push	{r4, lr}
	ldr	r1, .L267
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r2, r1, #0
	cmp	r0, #0x4
	bhi	.L249	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L267+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L268:
	.align	2, 0
.L267:
	.word	sWork
	.word	.L264
	.align	2, 0
	.align	2, 0
.L264:
	.word	.L250
	.word	.L253
	.word	.L256
	.word	.L258
	.word	.L261
.L250:
	ldr	r0, .L269
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L249	@cond_branch
	ldr	r4, .L269+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L252	@cond_branch
	mov	r0, #0x7
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
.L252:
	ldr	r1, [r4]
	b	.L266
.L270:
	.align	2, 0
.L269:
	.word	Task_ReceiveChatMessage
	.word	sWork
.L253:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L249	@cond_branch
	ldr	r4, .L271
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L255	@cond_branch
	mov	r0, #0x13
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
.L255:
	ldr	r1, [r4]
	b	.L266
.L272:
	.align	2, 0
.L271:
	.word	sWork
.L256:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L249	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L249	@cond_branch
	bl	Rfu_IsPlayerExchangeActive
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L249	@cond_branch
	bl	SetCloseLinkCallback
	ldr	r0, .L273
	ldr	r1, [r0]
	strh	r4, [r1, #0xa]
	b	.L266
.L274:
	.align	2, 0
.L273:
	.word	sWork
.L258:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bhi	.L259	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L259:
	ldr	r0, .L275
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L249	@cond_branch
	ldr	r1, [r2]
.L266:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L249
.L276:
	.align	2, 0
.L275:
	.word	gReceivedRemoteLinkPlayers
.L261:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bls	.L262	@cond_branch
	mov	r0, #0x9
	bl	GoToRoutine
	b	.L249
.L262:
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L249:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 ChatEntryRoutine_Disbanded,.Lfe14-ChatEntryRoutine_Disbanded
	.align	2, 0
	.type	 ChatEntryRoutine_SendMessage,function
	.thumb_func
ChatEntryRoutine_SendMessage:
	push	{r4, lr}
	ldr	r1, .L292
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r4, r1, #0
	cmp	r0, #0x4
	bhi	.L278	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L292+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L293:
	.align	2, 0
.L292:
	.word	sWork
	.word	.L288
	.align	2, 0
	.align	2, 0
.L288:
	.word	.L279
	.word	.L281
	.word	.L283
	.word	.L284
	.word	.L286
.L279:
	ldr	r0, .L294
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L280	@cond_branch
	mov	r0, #0x1
	bl	GoToRoutine
	b	.L278
.L295:
	.align	2, 0
.L294:
	.word	gReceivedRemoteLinkPlayers
.L280:
	ldr	r0, [r4]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	PrepareSendBuffer_Chat
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
.L281:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L278	@cond_branch
	bl	Rfu_IsPlayerExchangeActive
	cmp	r0, #0
	bne	.L278	@cond_branch
	ldr	r4, .L296
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L278	@cond_branch
	ldr	r1, [r4]
	b	.L290
.L297:
	.align	2, 0
.L296:
	.word	sWork
.L283:
	bl	ResetMessageEntryBuffer
	mov	r0, #0x8
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	b	.L291
.L284:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L278	@cond_branch
.L291:
	ldr	r0, .L298
	ldr	r1, [r0]
.L290:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L278
.L299:
	.align	2, 0
.L298:
	.word	sWork
.L286:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L278	@cond_branch
	mov	r0, #0x1
	bl	GoToRoutine
.L278:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 ChatEntryRoutine_SendMessage,.Lfe15-ChatEntryRoutine_SendMessage
	.align	2, 0
	.type	 ChatEntryRoutine_Register,function
	.thumb_func
ChatEntryRoutine_Register:
	push	{r4, lr}
	ldr	r0, .L325
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x6]
	cmp	r0, #0x6
	bls	.LCB1812
	b	.L301	@long jump
.LCB1812:
	lsl	r0, r0, #0x2
	ldr	r1, .L325+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L326:
	.align	2, 0
.L325:
	.word	sWork
	.word	.L321
	.align	2, 0
	.align	2, 0
.L321:
	.word	.L302
	.word	.L305
	.word	.L311
	.word	.L313
	.word	.L315
	.word	.L317
	.word	.L319
.L302:
	bl	ChatMsgHasAtLeastOneCharcter
	cmp	r0, #0
	beq	.L303	@cond_branch
	mov	r0, #0x9
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L327
	ldr	r1, [r0]
	mov	r0, #0x2
	b	.L323
.L328:
	.align	2, 0
.L327:
	.word	sWork
.L303:
	mov	r0, #0xd
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L329
	ldr	r1, [r0]
	mov	r0, #0x5
	b	.L323
.L330:
	.align	2, 0
.L329:
	.word	sWork
.L305:
	ldr	r0, .L331
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L306	@cond_branch
	bl	RegisterTextAtRow
	mov	r0, #0xb
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L331+0x4
	ldr	r1, [r0]
	mov	r0, #0x3
	b	.L323
.L332:
	.align	2, 0
.L331:
	.word	gMain
	.word	sWork
.L306:
	mov	r4, #0x2
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L308	@cond_branch
	mov	r0, #0xa
	b	.L324
.L308:
	bl	TypeChatMessage_HandleDPad
	cmp	r0, #0
	beq	.L301	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L333
	ldr	r0, [r0]
	strh	r4, [r0, #0x6]
	b	.L301
.L334:
	.align	2, 0
.L333:
	.word	sWork
.L311:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L301	@cond_branch
	ldr	r0, .L335
	ldr	r1, [r0]
	mov	r0, #0x1
	b	.L323
.L336:
	.align	2, 0
.L335:
	.word	sWork
.L313:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L301	@cond_branch
	mov	r0, #0xa
	b	.L324
.L315:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L301	@cond_branch
	mov	r0, #0x1
	bl	GoToRoutine
	b	.L301
.L317:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L301	@cond_branch
	ldr	r0, .L337
	ldr	r1, [r0]
	mov	r0, #0x6
	b	.L323
.L338:
	.align	2, 0
.L337:
	.word	sWork
.L319:
	ldr	r0, .L339
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L301	@cond_branch
	mov	r0, #0x7
.L324:
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L339+0x4
	ldr	r1, [r0]
	mov	r0, #0x4
.L323:
	strh	r0, [r1, #0x6]
.L301:
	pop	{r4}
	pop	{r0}
	bx	r0
.L340:
	.align	2, 0
.L339:
	.word	gMain
	.word	sWork
.Lfe16:
	.size	 ChatEntryRoutine_Register,.Lfe16-ChatEntryRoutine_Register
	.align	2, 0
	.type	 ChatEntryRoutine_SaveAndExit,function
	.thumb_func
ChatEntryRoutine_SaveAndExit:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L384
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r4, r1, #0
	cmp	r0, #0xd
	bls	.LCB2039
	b	.L342	@long jump
.LCB2039:
	lsl	r0, r0, #0x2
	ldr	r1, .L384+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L385:
	.align	2, 0
.L384:
	.word	sWork
	.word	.L381
	.align	2, 0
	.align	2, 0
.L381:
	.word	.L343
	.word	.L346
	.word	.L348
	.word	.L356
	.word	.L358
	.word	.L360
	.word	.L368
	.word	.L370
	.word	.L372
	.word	.L373
	.word	.L375
	.word	.L376
	.word	.L378
	.word	.L379
.L343:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x18]
	cmp	r0, #0
	bne	.LCB2065
	b	.L383	@long jump
.LCB2065:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r1, [r4]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L342
.L346:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2083
	b	.L342	@long jump
.LCB2083:
	mov	r0, #0xe
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L386
	ldr	r1, [r0]
	mov	r0, #0x2
	strh	r0, [r1, #0x6]
	b	.L342
.L387:
	.align	2, 0
.L386:
	.word	sWork
.L348:
	bl	UnionRoomChat_ProcessInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L352	@cond_branch
	cmp	r1, #0
	bgt	.L355	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L351	@cond_branch
	b	.L342
.L355:
	cmp	r1, #0x1
	beq	.LCB2120
	b	.L342	@long jump
.LCB2120:
.L351:
	ldr	r0, .L388
	ldr	r1, [r0]
	b	.L383
.L389:
	.align	2, 0
.L388:
	.word	sWork
.L352:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L390
	ldr	r1, [r0]
	mov	r0, #0x3
	strh	r0, [r1, #0x6]
	b	.L342
.L391:
	.align	2, 0
.L390:
	.word	sWork
.L356:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2157
	b	.L342	@long jump
.LCB2157:
	mov	r0, #0xf
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L392
	ldr	r1, [r0]
	mov	r0, #0x4
	strh	r0, [r1, #0x6]
	b	.L342
.L393:
	.align	2, 0
.L392:
	.word	sWork
.L358:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2181
	b	.L342	@long jump
.LCB2181:
	ldr	r0, .L394
	ldr	r1, [r0]
	mov	r0, #0x5
	strh	r0, [r1, #0x6]
	b	.L342
.L395:
	.align	2, 0
.L394:
	.word	sWork
.L360:
	bl	UnionRoomChat_ProcessInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L364	@cond_branch
	cmp	r1, #0
	bgt	.L367	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L363	@cond_branch
	b	.L342
.L367:
	cmp	r1, #0x1
	beq	.LCB2214
	b	.L342	@long jump
.LCB2214:
.L363:
	ldr	r0, .L396
	ldr	r1, [r0]
	b	.L383
.L397:
	.align	2, 0
.L396:
	.word	sWork
.L364:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L398
	ldr	r1, [r0]
	mov	r0, #0x6
	strh	r0, [r1, #0x6]
	b	.L342
.L399:
	.align	2, 0
.L398:
	.word	sWork
.L368:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L342	@cond_branch
	mov	r0, #0x10
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	bl	SaveRegisteredTextsToSB1
	ldr	r0, .L400
	ldr	r1, [r0]
	mov	r0, #0x7
	strh	r0, [r1, #0x6]
	b	.L342
.L401:
	.align	2, 0
.L400:
	.word	sWork
.L370:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L342	@cond_branch
	bl	SetContinueGameWarpStatusToDynamicWarp
	mov	r0, #0x0
	bl	TrySavingData
	ldr	r0, .L402
	ldr	r1, [r0]
	mov	r0, #0x8
	strh	r0, [r1, #0x6]
	b	.L342
.L403:
	.align	2, 0
.L402:
	.word	sWork
.L372:
	mov	r0, #0x11
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	ldr	r0, .L404
	ldr	r1, [r0]
	mov	r0, #0x9
	strh	r0, [r1, #0x6]
	b	.L342
.L405:
	.align	2, 0
.L404:
	.word	sWork
.L373:
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L342	@cond_branch
	mov	r0, #0x30
	bl	PlaySE
	bl	ClearContinueGameWarpStatus2
	ldr	r0, .L406
	ldr	r1, [r0]
	mov	r0, #0xa
	strh	r0, [r1, #0x6]
	b	.L342
.L407:
	.align	2, 0
.L406:
	.word	sWork
.L375:
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x19]
	ldr	r1, [r4]
	mov	r0, #0xb
	strh	r0, [r1, #0x6]
	b	.L342
.L376:
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x19]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x19]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x19]
	cmp	r0, #0x78
	bls	.L342	@cond_branch
.L383:
	mov	r0, #0xc
	strh	r0, [r1, #0x6]
	b	.L342
.L378:
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L408
	ldr	r1, [r0]
	mov	r0, #0xd
	strh	r0, [r1, #0x6]
	b	.L342
.L409:
	.align	2, 0
.L408:
	.word	sWork
.L379:
	ldr	r0, .L410
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L342	@cond_branch
	bl	HelpSystem_EnableToggleWithRButton
	bl	UnionRoomChat_FreeGraphicsWork
	bl	FreeChatWork
	ldr	r0, .L410+0x4
	bl	SetMainCallback2
.L342:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L411:
	.align	2, 0
.L410:
	.word	gPaletteFade
	.word	CB2_ReturnToField
.Lfe17:
	.size	 ChatEntryRoutine_SaveAndExit,.Lfe17-ChatEntryRoutine_SaveAndExit
	.align	2, 0
	.type	 GoToRoutine,function
	.thumb_func
GoToRoutine:
	ldr	r1, .L413
	ldr	r1, [r1]
	mov	r2, #0x0
	strh	r0, [r1, #0x4]
	strh	r2, [r1, #0x6]
	bx	lr
.L414:
	.align	2, 0
.L413:
	.word	sWork
.Lfe18:
	.size	 GoToRoutine,.Lfe18-GoToRoutine
	.align	2, 0
	.type	 TypeChatMessage_HandleDPad,function
	.thumb_func
TypeChatMessage_HandleDPad:
	push	{lr}
	ldr	r0, .L437
	ldrh	r2, [r0, #0x30]
	mov	r0, #0x40
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L435	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L422	@cond_branch
	ldr	r0, .L437+0x4
	ldr	r2, [r0]
	ldr	r1, .L437+0x8
	ldrb	r0, [r2, #0x10]
	add	r0, r0, r1
	ldrb	r1, [r2, #0x12]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L423	@cond_branch
	add	r0, r1, #0x1
	b	.L436
.L438:
	.align	2, 0
.L437:
	.word	gMain
	.word	sWork
	.word	sKeyboardPageMaxRow
.L423:
	strb	r3, [r2, #0x12]
	b	.L417
.L422:
	ldr	r0, .L439
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0x3
	beq	.L425	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	beq	.L426	@cond_branch
	ldrb	r0, [r1, #0x11]
	cmp	r0, #0
	beq	.L427	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	b	.L417
.L440:
	.align	2, 0
.L439:
	.word	sWork
.L427:
	mov	r0, #0x4
	strb	r0, [r1, #0x11]
	b	.L417
.L426:
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L425	@cond_branch
	ldrb	r0, [r1, #0x11]
	cmp	r0, #0x3
	bhi	.L430	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	b	.L417
.L430:
	strb	r3, [r1, #0x11]
	b	.L417
.L425:
	mov	r0, #0x0
	b	.L434
.L435:
	ldr	r0, .L441
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x12]
	cmp	r0, #0
	beq	.L420	@cond_branch
	sub	r0, r0, #0x1
	b	.L436
.L442:
	.align	2, 0
.L441:
	.word	sWork
.L420:
	ldr	r0, .L443
	ldrb	r1, [r2, #0x10]
	add	r1, r1, r0
	ldrb	r0, [r1]
.L436:
	strb	r0, [r2, #0x12]
.L417:
	mov	r0, #0x1
.L434:
	pop	{r1}
	bx	r1
.L444:
	.align	2, 0
.L443:
	.word	sKeyboardPageMaxRow
.Lfe19:
	.size	 TypeChatMessage_HandleDPad,.Lfe19-TypeChatMessage_HandleDPad
	.align	2, 0
	.type	 AppendCharacterToChatMessageBuffer,function
	.thumb_func
AppendCharacterToChatMessageBuffer:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x18
	ldr	r0, .L461
	ldr	r5, [r0]
	ldrb	r0, [r5, #0x10]
	cmp	r0, #0x3
	beq	.L446	@cond_branch
	ldr	r3, .L461+0x4
	ldrb	r1, [r5, #0x12]
	lsl	r1, r1, #0x2
	add	r2, r0, #0
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldr	r4, [r1]
	ldrb	r0, [r5, #0x11]
	cmp	r0, #0
	beq	.L448	@cond_branch
	add	r1, r0, #0
.L450:
	ldrb	r0, [r4]
	cmp	r0, #0xf9
	bne	.L451	@cond_branch
	add	r4, r4, #0x1
.L451:
	add	r4, r4, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L450	@cond_branch
.L448:
	mov	r5, #0x1
	b	.L453
.L462:
	.align	2, 0
.L461:
	.word	sWork
	.word	gUnionRoomKeyboardText
.L446:
	ldrb	r0, [r5, #0x12]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xb9
	add	r1, r5, r1
	mov	r0, sp
	bl	StringCopy
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r1, #0xff
	strb	r1, [r0, #0x1]
	mov	r4, sp
	mov	r0, sp
	bl	StringLength_Multibyte
	add	r5, r0, #0
.L453:
	ldr	r6, .L463
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x15]
	strb	r0, [r1, #0x14]
	cmp	r4, #0
	beq	.L445	@cond_branch
	bl	GetEndOfUnk1A
	add	r2, r0, #0
	sub	r5, r5, #0x1
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L456	@cond_branch
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0xe
	bhi	.L456	@cond_branch
	add	r3, r6, #0
.L457:
	ldrb	r0, [r4]
	cmp	r0, #0xf9
	bne	.L459	@cond_branch
	strb	r0, [r2]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
.L459:
	ldrb	r0, [r4]
	strb	r0, [r2]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
	ldr	r1, [r3]
	ldrb	r0, [r1, #0x15]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x15]
	sub	r5, r5, #0x1
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L456	@cond_branch
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0xe
	bls	.L457	@cond_branch
.L456:
	mov	r0, #0xff
	strb	r0, [r2]
.L445:
	add	sp, sp, #0x18
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L464:
	.align	2, 0
.L463:
	.word	sWork
.Lfe20:
	.size	 AppendCharacterToChatMessageBuffer,.Lfe20-AppendCharacterToChatMessageBuffer
	.align	2, 0
	.type	 DeleteLastCharacterOfChatMessageBuffer,function
	.thumb_func
DeleteLastCharacterOfChatMessageBuffer:
	push	{r4, lr}
	ldr	r4, .L467
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x15]
	strb	r0, [r1, #0x14]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0
	beq	.L466	@cond_branch
	bl	GetPtrToLastCharOfUnk1A
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x15]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x15]
.L466:
	pop	{r4}
	pop	{r0}
	bx	r0
.L468:
	.align	2, 0
.L467:
	.word	sWork
.Lfe21:
	.size	 DeleteLastCharacterOfChatMessageBuffer,.Lfe21-DeleteLastCharacterOfChatMessageBuffer
	.align	2, 0
	.type	 ToggleCaseOfLastCharacterInChatMessageBuffer,function
	.thumb_func
ToggleCaseOfLastCharacterInChatMessageBuffer:
	push	{lr}
	ldr	r0, .L472
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x15]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	bl	GetPtrToLastCharOfUnk1A
	add	r2, r0, #0
	ldrb	r0, [r2]
	cmp	r0, #0xf9
	beq	.L470	@cond_branch
	ldr	r1, .L472+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L470	@cond_branch
	strb	r0, [r2]
.L470:
	pop	{r0}
	bx	r0
.L473:
	.align	2, 0
.L472:
	.word	sWork
	.word	sCaseToggleTable
.Lfe22:
	.size	 ToggleCaseOfLastCharacterInChatMessageBuffer,.Lfe22-ToggleCaseOfLastCharacterInChatMessageBuffer
	.align	2, 0
	.type	 ChatMsgHasAtLeastOneCharcter,function
	.thumb_func
ChatMsgHasAtLeastOneCharcter:
	push	{lr}
	ldr	r0, .L478
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0
	bne	.L475	@cond_branch
	mov	r0, #0x0
	b	.L477
.L479:
	.align	2, 0
.L478:
	.word	sWork
.L475:
	mov	r0, #0x1
.L477:
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 ChatMsgHasAtLeastOneCharcter,.Lfe23-ChatMsgHasAtLeastOneCharcter
	.align	2, 0
	.type	 RegisterTextAtRow,function
	.thumb_func
RegisterTextAtRow:
	push	{r4, lr}
	bl	UnionRoomChat_GetEndOfMessageEntryBuffer
	add	r1, r0, #0
	ldr	r4, .L481
	ldr	r0, [r4]
	ldrb	r3, [r0, #0x12]
	lsl	r2, r3, #0x2
	add	r2, r2, r3
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	add	r2, r2, #0xb9
	add	r0, r0, r2
	bl	StringCopy
	ldr	r1, [r4]
	mov	r0, #0x1
	strb	r0, [r1, #0x18]
	pop	{r4}
	pop	{r0}
	bx	r0
.L482:
	.align	2, 0
.L481:
	.word	sWork
.Lfe24:
	.size	 RegisterTextAtRow,.Lfe24-RegisterTextAtRow
	.align	2, 0
	.type	 ResetMessageEntryBuffer,function
	.thumb_func
ResetMessageEntryBuffer:
	ldr	r1, .L484
	ldr	r2, [r1]
	mov	r0, #0xff
	strb	r0, [r2, #0x1a]
	ldr	r2, [r1]
	mov	r3, #0x0
	mov	r0, #0xf
	strb	r0, [r2, #0x14]
	ldr	r0, [r1]
	strb	r3, [r0, #0x15]
	bx	lr
.L485:
	.align	2, 0
.L484:
	.word	sWork
.Lfe25:
	.size	 ResetMessageEntryBuffer,.Lfe25-ResetMessageEntryBuffer
	.align	2, 0
	.type	 SaveRegisteredTextsToSB1,function
	.thumb_func
SaveRegisteredTextsToSB1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L492
	mov	r8, r0
	ldr	r7, .L492+0x4
	mov	r6, #0xb9
	ldr	r5, .L492+0x8
	mov	r4, #0x9
.L490:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r5
	ldr	r1, [r7]
	add	r1, r1, r6
	bl	StringCopy
	add	r6, r6, #0x15
	add	r5, r5, #0x15
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L490	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	gSaveBlock1Ptr
	.word	sWork
	.word	0x3ae8
.Lfe26:
	.size	 SaveRegisteredTextsToSB1,.Lfe26-SaveRegisteredTextsToSB1
	.align	2, 0
	.globl	UnionRoomChat_GetWorkRegisteredText
	.type	 UnionRoomChat_GetWorkRegisteredText,function
	.thumb_func
UnionRoomChat_GetWorkRegisteredText:
	ldr	r2, .L495
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xb9
	ldr	r0, [r2]
	add	r0, r0, r1
	bx	lr
.L496:
	.align	2, 0
.L495:
	.word	sWork
.Lfe27:
	.size	 UnionRoomChat_GetWorkRegisteredText,.Lfe27-UnionRoomChat_GetWorkRegisteredText
	.align	2, 0
	.type	 GetEndOfUnk1A,function
	.thumb_func
GetEndOfUnk1A:
	push	{lr}
	ldr	r0, .L502
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	ldrb	r0, [r0, #0x1a]
	cmp	r0, #0xff
	beq	.L499	@cond_branch
.L500:
	add	r1, r1, #0x1
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L500	@cond_branch
.L499:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L503:
	.align	2, 0
.L502:
	.word	sWork
.Lfe28:
	.size	 GetEndOfUnk1A,.Lfe28-GetEndOfUnk1A
	.align	2, 0
	.type	 GetPtrToLastCharOfUnk1A,function
	.thumb_func
GetPtrToLastCharOfUnk1A:
	push	{lr}
	ldr	r0, .L510
	ldr	r0, [r0]
	add	r2, r0, #0
	add	r2, r2, #0x1a
	add	r1, r2, #0
	ldrb	r0, [r0, #0x1a]
	cmp	r0, #0xff
	beq	.L506	@cond_branch
.L507:
	add	r2, r1, #0
	ldrb	r0, [r2]
	cmp	r0, #0xf9
	bne	.L508	@cond_branch
	add	r1, r2, #0x1
.L508:
	add	r1, r1, #0x1
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L507	@cond_branch
.L506:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L511:
	.align	2, 0
.L510:
	.word	sWork
.Lfe29:
	.size	 GetPtrToLastCharOfUnk1A,.Lfe29-GetPtrToLastCharOfUnk1A
	.align	2, 0
	.type	 GetNumCharsInMessageEntryBuffer,function
	.thumb_func
GetNumCharsInMessageEntryBuffer:
	push	{r4, lr}
	ldr	r4, .L520
	ldr	r0, [r4]
	add	r0, r0, #0x1a
	bl	StringLength_Multibyte
	add	r2, r0, #0
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	mov	r4, #0x0
	cmp	r2, #0xa
	bls	.L513	@cond_branch
	sub	r2, r2, #0xa
	mov	r3, #0x0
	cmp	r4, r2
	bcs	.L513	@cond_branch
.L517:
	ldrb	r0, [r1]
	cmp	r0, #0xf9
	bne	.L518	@cond_branch
	add	r1, r1, #0x1
.L518:
	add	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	cmp	r3, r2
	bcc	.L517	@cond_branch
.L513:
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.L521:
	.align	2, 0
.L520:
	.word	sWork
.Lfe30:
	.size	 GetNumCharsInMessageEntryBuffer,.Lfe30-GetNumCharsInMessageEntryBuffer
	.align	2, 0
	.type	 PrepareSendBuffer_Null,function
	.thumb_func
PrepareSendBuffer_Null:
	mov	r1, #0x0
	strb	r1, [r0]
	bx	lr
.Lfe31:
	.size	 PrepareSendBuffer_Null,.Lfe31-PrepareSendBuffer_Null
	.align	2, 0
	.type	 PrepareSendBuffer_Join,function
	.thumb_func
PrepareSendBuffer_Join:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L524
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L524+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	pop	{r4}
	pop	{r0}
	bx	r0
.L525:
	.align	2, 0
.L524:
	.word	gSaveBlock2Ptr
	.word	sWork
.Lfe32:
	.size	 PrepareSendBuffer_Join,.Lfe32-PrepareSendBuffer_Join
	.align	2, 0
	.type	 PrepareSendBuffer_Chat,function
	.thumb_func
PrepareSendBuffer_Chat:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L527
	ldr	r1, [r1]
	bl	StringCopy
	add	r4, r4, #0x9
	ldr	r0, .L527+0x4
	ldr	r1, [r0]
	add	r1, r1, #0x1a
	add	r0, r4, #0
	bl	StringCopy
	pop	{r4}
	pop	{r0}
	bx	r0
.L528:
	.align	2, 0
.L527:
	.word	gSaveBlock2Ptr
	.word	sWork
.Lfe33:
	.size	 PrepareSendBuffer_Chat,.Lfe33-PrepareSendBuffer_Chat
	.align	2, 0
	.type	 PrepareSendBuffer_Leave,function
	.thumb_func
PrepareSendBuffer_Leave:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x3
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L530
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L530+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	bl	RfuSetNormalDisconnectMode
	pop	{r4}
	pop	{r0}
	bx	r0
.L531:
	.align	2, 0
.L530:
	.word	gSaveBlock2Ptr
	.word	sWork
.Lfe34:
	.size	 PrepareSendBuffer_Leave,.Lfe34-PrepareSendBuffer_Leave
	.align	2, 0
	.type	 PrepareSendBuffer_Drop,function
	.thumb_func
PrepareSendBuffer_Drop:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x4
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L533
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L533+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	pop	{r4}
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gSaveBlock2Ptr
	.word	sWork
.Lfe35:
	.size	 PrepareSendBuffer_Drop,.Lfe35-PrepareSendBuffer_Drop
	.align	2, 0
	.type	 PrepareSendBuffer_Disband,function
	.thumb_func
PrepareSendBuffer_Disband:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x5
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L536
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L536+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	pop	{r4}
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	gSaveBlock2Ptr
	.word	sWork
.Lfe36:
	.size	 PrepareSendBuffer_Disband,.Lfe36-PrepareSendBuffer_Disband
	.align	2, 0
	.type	 ProcessReceivedChatMessage,function
	.thumb_func
ProcessReceivedChatMessage:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r5]
	add	r1, r0, #0
	add	r4, r5, #0x1
	add	r5, r4, #0
	add	r5, r5, #0x8
	cmp	r0, #0x2
	beq	.L540	@cond_branch
	cmp	r0, #0x2
	bgt	.L548	@cond_branch
	cmp	r0, #0x1
	beq	.L542	@cond_branch
	b	.L539
.L548:
	cmp	r1, #0x3
	beq	.L544	@cond_branch
	cmp	r1, #0x5
	beq	.L543	@cond_branch
	b	.L539
.L540:
	ldr	r0, .L551
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	ldrb	r1, [r4, #0x8]
	cmp	r0, r1
	beq	.L539	@cond_branch
	bl	DynamicPlaceholderTextUtil_Reset
	mov	r0, #0x0
	add	r1, r4, #0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	ldr	r1, .L551+0x4
	b	.L550
.L552:
	.align	2, 0
.L551:
	.word	sWork
	.word	gText_F700JoinedChat
.L542:
	add	r0, r6, #0
	add	r1, r4, #0
	bl	StringCopy
	mov	r1, #0xfc
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x13
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x2a
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0xf0
	strb	r1, [r0]
	add	r0, r0, #0x1
	add	r1, r5, #0
	bl	StringCopy
	mov	r0, #0x1
	b	.L549
.L543:
	ldr	r0, .L553
	ldr	r0, [r0]
	add	r0, r0, #0x79
	add	r1, r4, #0
	bl	StringCopy
.L544:
	ldr	r0, .L553
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	ldrb	r5, [r5]
	cmp	r0, r5
	beq	.L539	@cond_branch
	bl	DynamicPlaceholderTextUtil_Reset
	mov	r0, #0x0
	add	r1, r4, #0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	ldr	r1, .L553+0x4
.L550:
	add	r0, r6, #0
	bl	DynamicPlaceholderTextUtil_ExpandPlaceholders
	mov	r0, #0x1
	b	.L549
.L554:
	.align	2, 0
.L553:
	.word	sWork
	.word	gText_F700LeftChat
.L539:
	mov	r0, #0x0
.L549:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 ProcessReceivedChatMessage,.Lfe37-ProcessReceivedChatMessage
	.align	2, 0
	.globl	GetCurrentKeyboardPage
	.type	 GetCurrentKeyboardPage,function
	.thumb_func
GetCurrentKeyboardPage:
	ldr	r0, .L556
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	bx	lr
.L557:
	.align	2, 0
.L556:
	.word	sWork
.Lfe38:
	.size	 GetCurrentKeyboardPage,.Lfe38-GetCurrentKeyboardPage
	.align	2, 0
	.globl	UnionRoomChat_GetCursorColAndRow
	.type	 UnionRoomChat_GetCursorColAndRow,function
	.thumb_func
UnionRoomChat_GetCursorColAndRow:
	ldr	r2, .L559
	ldr	r3, [r2]
	ldrb	r2, [r3, #0x11]
	strb	r2, [r0]
	ldrb	r0, [r3, #0x12]
	strb	r0, [r1]
	bx	lr
.L560:
	.align	2, 0
.L559:
	.word	sWork
.Lfe39:
	.size	 UnionRoomChat_GetCursorColAndRow,.Lfe39-UnionRoomChat_GetCursorColAndRow
	.align	2, 0
	.globl	UnionRoomChat_GetMessageEntryBuffer
	.type	 UnionRoomChat_GetMessageEntryBuffer,function
	.thumb_func
UnionRoomChat_GetMessageEntryBuffer:
	ldr	r0, .L562
	ldr	r0, [r0]
	add	r0, r0, #0x1a
	bx	lr
.L563:
	.align	2, 0
.L562:
	.word	sWork
.Lfe40:
	.size	 UnionRoomChat_GetMessageEntryBuffer,.Lfe40-UnionRoomChat_GetMessageEntryBuffer
	.align	2, 0
	.globl	UnionRoomChat_LenMessageEntryBuffer
	.type	 UnionRoomChat_LenMessageEntryBuffer,function
	.thumb_func
UnionRoomChat_LenMessageEntryBuffer:
	push	{lr}
	bl	UnionRoomChat_GetMessageEntryBuffer
	bl	StringLength_Multibyte
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 UnionRoomChat_LenMessageEntryBuffer,.Lfe41-UnionRoomChat_LenMessageEntryBuffer
	.align	2, 0
	.globl	UnionRoomChat_GetBufferSelectionRegion
	.type	 UnionRoomChat_GetBufferSelectionRegion,function
	.thumb_func
UnionRoomChat_GetBufferSelectionRegion:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L568
	ldr	r0, [r0]
	ldrb	r3, [r0, #0x15]
	ldrb	r2, [r0, #0x14]
	sub	r0, r3, r2
	cmp	r0, #0
	bge	.L566	@cond_branch
	neg	r0, r0
	str	r3, [r4]
	b	.L567
.L569:
	.align	2, 0
.L568:
	.word	sWork
.L566:
	str	r2, [r4]
.L567:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 UnionRoomChat_GetBufferSelectionRegion,.Lfe42-UnionRoomChat_GetBufferSelectionRegion
	.align	2, 0
	.globl	UnionRoomChat_GetEndOfMessageEntryBuffer
	.type	 UnionRoomChat_GetEndOfMessageEntryBuffer,function
	.thumb_func
UnionRoomChat_GetEndOfMessageEntryBuffer:
	push	{lr}
	bl	GetNumCharsInMessageEntryBuffer
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L577
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	cmp	r2, #0
	beq	.L572	@cond_branch
.L574:
	ldrb	r0, [r1]
	cmp	r0, #0xf9
	bne	.L575	@cond_branch
	add	r1, r1, #0x1
.L575:
	add	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L574	@cond_branch
.L572:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L578:
	.align	2, 0
.L577:
	.word	sWork
.Lfe43:
	.size	 UnionRoomChat_GetEndOfMessageEntryBuffer,.Lfe43-UnionRoomChat_GetEndOfMessageEntryBuffer
	.align	2, 0
	.globl	UnionRoomChat_GetNumCharsInMessageEntryBuffer
	.type	 UnionRoomChat_GetNumCharsInMessageEntryBuffer,function
	.thumb_func
UnionRoomChat_GetNumCharsInMessageEntryBuffer:
	push	{r4, lr}
	bl	GetNumCharsInMessageEntryBuffer
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L586
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	mov	r2, #0x0
	mov	r3, #0x0
	cmp	r2, r4
	bcs	.L581	@cond_branch
.L583:
	ldrb	r0, [r1]
	cmp	r0, #0xf9
	bne	.L584	@cond_branch
	add	r1, r1, #0x1
.L584:
	add	r1, r1, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r3, r3, #0x1
	cmp	r3, r4
	bcc	.L583	@cond_branch
.L581:
	add	r0, r2, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L587:
	.align	2, 0
.L586:
	.word	sWork
.Lfe44:
	.size	 UnionRoomChat_GetNumCharsInMessageEntryBuffer,.Lfe44-UnionRoomChat_GetNumCharsInMessageEntryBuffer
	.align	2, 0
	.globl	UnionRoomChat_GetLastReceivedMessage
	.type	 UnionRoomChat_GetLastReceivedMessage,function
	.thumb_func
UnionRoomChat_GetLastReceivedMessage:
	ldr	r0, .L589
	ldr	r0, [r0]
	add	r0, r0, #0x39
	bx	lr
.L590:
	.align	2, 0
.L589:
	.word	sWork
.Lfe45:
	.size	 UnionRoomChat_GetLastReceivedMessage,.Lfe45-UnionRoomChat_GetLastReceivedMessage
	.align	2, 0
	.globl	UnionRoomChat_GetReceivedPlayerIndex
	.type	 UnionRoomChat_GetReceivedPlayerIndex,function
	.thumb_func
UnionRoomChat_GetReceivedPlayerIndex:
	ldr	r0, .L592
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x16]
	bx	lr
.L593:
	.align	2, 0
.L592:
	.word	sWork
.Lfe46:
	.size	 UnionRoomChat_GetReceivedPlayerIndex,.Lfe46-UnionRoomChat_GetReceivedPlayerIndex
	.align	2, 0
	.globl	UnionRoomChat_GetMessageEntryCursorPosition
	.type	 UnionRoomChat_GetMessageEntryCursorPosition,function
	.thumb_func
UnionRoomChat_GetMessageEntryCursorPosition:
	ldr	r0, .L595
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x15]
	bx	lr
.L596:
	.align	2, 0
.L595:
	.word	sWork
.Lfe47:
	.size	 UnionRoomChat_GetMessageEntryCursorPosition,.Lfe47-UnionRoomChat_GetMessageEntryCursorPosition
	.align	2, 0
	.globl	UnionRoomChat_GetWhetherShouldShowCaseToggleIcon
	.type	 UnionRoomChat_GetWhetherShouldShowCaseToggleIcon,function
	.thumb_func
UnionRoomChat_GetWhetherShouldShowCaseToggleIcon:
	push	{lr}
	bl	GetPtrToLastCharOfUnk1A
	ldrb	r1, [r0]
	cmp	r1, #0xff
	bhi	.L599	@cond_branch
	ldr	r0, .L602
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L599	@cond_branch
	cmp	r0, #0
	bne	.L598	@cond_branch
.L599:
	mov	r0, #0x3
	b	.L601
.L603:
	.align	2, 0
.L602:
	.word	sCaseToggleTable
.L598:
	mov	r0, #0x0
.L601:
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 UnionRoomChat_GetWhetherShouldShowCaseToggleIcon,.Lfe48-UnionRoomChat_GetWhetherShouldShowCaseToggleIcon
	.align	2, 0
	.globl	UnionRoomChat_GetNameOfPlayerWhoDisbandedChat
	.type	 UnionRoomChat_GetNameOfPlayerWhoDisbandedChat,function
	.thumb_func
UnionRoomChat_GetNameOfPlayerWhoDisbandedChat:
	ldr	r0, .L605
	ldr	r0, [r0]
	add	r0, r0, #0x79
	bx	lr
.L606:
	.align	2, 0
.L605:
	.word	sWork
.Lfe49:
	.size	 UnionRoomChat_GetNameOfPlayerWhoDisbandedChat,.Lfe49-UnionRoomChat_GetNameOfPlayerWhoDisbandedChat
	.align	2, 0
	.globl	UnionRoomChat_InitializeRegisteredTexts
	.type	 UnionRoomChat_InitializeRegisteredTexts,function
	.thumb_func
UnionRoomChat_InitializeRegisteredTexts:
	push	{r4, lr}
	ldr	r4, .L608
	ldr	r0, [r4]
	ldr	r1, .L608+0x4
	add	r0, r0, r1
	ldr	r1, .L608+0x8
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0xc
	add	r0, r0, r1
	ldr	r1, .L608+0x10
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x14
	add	r0, r0, r1
	ldr	r1, .L608+0x18
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x1c
	add	r0, r0, r1
	ldr	r1, .L608+0x20
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x24
	add	r0, r0, r1
	ldr	r1, .L608+0x28
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x2c
	add	r0, r0, r1
	ldr	r1, .L608+0x30
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x34
	add	r0, r0, r1
	ldr	r1, .L608+0x38
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x3c
	add	r0, r0, r1
	ldr	r1, .L608+0x40
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x44
	add	r0, r0, r1
	ldr	r1, .L608+0x48
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x4c
	add	r0, r0, r1
	ldr	r1, .L608+0x50
	bl	StringCopy
	pop	{r4}
	pop	{r0}
	bx	r0
.L609:
	.align	2, 0
.L608:
	.word	gSaveBlock1Ptr
	.word	0x3ae8
	.word	gText_Hello
	.word	0x3afd
	.word	gText_Pokemon2
	.word	0x3b12
	.word	gText_Trade
	.word	0x3b27
	.word	gText_Battle
	.word	0x3b3c
	.word	gText_Lets
	.word	0x3b51
	.word	gText_Ok
	.word	0x3b66
	.word	gText_Sorry
	.word	0x3b7b
	.word	gText_YaySmileEmoji
	.word	0x3b90
	.word	gText_ThankYou
	.word	0x3ba5
	.word	gText_ByeBye
.Lfe50:
	.size	 UnionRoomChat_InitializeRegisteredTexts,.Lfe50-UnionRoomChat_InitializeRegisteredTexts
	.align	2, 0
	.type	 Task_ReceiveChatMessage,function
	.thumb_func
Task_ReceiveChatMessage:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L653
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7
	bls	.LCB3921
	b	.L610	@long jump
.LCB3921:
	lsl	r0, r0, #0x2
	ldr	r1, .L653+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L654:
	.align	2, 0
.L653:
	.word	gTasks+0x8
	.word	.L646
	.align	2, 0
	.align	2, 0
.L646:
	.word	.L612
	.word	.L614
	.word	.L643
	.word	.L617
	.word	.L637
	.word	.L640
	.word	.L642
	.word	.L635
.L612:
	ldr	r0, .L655
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB3946
	b	.L648	@long jump
.LCB3946:
	mov	r0, #0x1
	strh	r0, [r4]
.L614:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	strh	r0, [r4, #0x8]
	ldr	r3, .L655+0x4
	ldr	r0, [r3]
	ldrb	r1, [r0, #0xd]
	mov	r5, #0x8
	ldrsh	r0, [r4, r5]
	cmp	r1, r0
	beq	.L615	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4]
	ldr	r0, [r3]
	strb	r2, [r0, #0xd]
	b	.L610
.L656:
	.align	2, 0
.L655:
	.word	gReceivedRemoteLinkPlayers
	.word	sWork
.L615:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x6]
	cmp	r0, #0
	bne	.L616	@cond_branch
	bl	Rfu_IsPlayerExchangeActive
	cmp	r0, #0
	beq	.LCB3991
	b	.L610	@long jump
.LCB3991:
.L616:
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
	mov	r0, #0x3
	strh	r0, [r4]
.L617:
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bgt	.L619	@cond_branch
	mov	r2, #0x6
	ldrsh	r0, [r4, r2]
	mov	r3, #0x2
	ldrsh	r1, [r4, r3]
	asr	r0, r0, r1
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L619	@cond_branch
	mov	r2, #0x1
.L620:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bgt	.L619	@cond_branch
	mov	r5, #0x6
	ldrsh	r0, [r4, r5]
	mov	r3, #0x2
	ldrsh	r1, [r4, r3]
	asr	r0, r0, r1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L620	@cond_branch
.L619:
	ldrh	r1, [r4, #0x2]
	mov	r5, #0x2
	ldrsh	r0, [r4, r5]
	cmp	r0, #0x5
	bne	.LCB4035
	b	.L645	@long jump
.LCB4035:
	strh	r1, [r4, #0x4]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	ResetBlockReceivedFlag
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x8
	ldr	r1, .L657
	add	r0, r0, r1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x4
	bhi	.L627	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L657+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L658:
	.align	2, 0
.L657:
	.word	gBlockRecvBuffer
	.word	.L632
	.align	2, 0
	.align	2, 0
.L632:
	.word	.L627
	.word	.L628
	.word	.L629
	.word	.L630
	.word	.L631
.L627:
	mov	r0, #0x3
	b	.L649
.L628:
	mov	r0, #0x3
	b	.L649
.L629:
	mov	r0, #0x4
	b	.L649
.L630:
	mov	r0, #0x5
	b	.L649
.L631:
	mov	r0, #0x6
.L649:
	strh	r0, [r4, #0xa]
	ldr	r5, .L659
	ldr	r0, [r5]
	add	r0, r0, #0x39
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x8
	ldr	r2, .L659+0x4
	add	r1, r1, r2
	bl	ProcessReceivedChatMessage
	cmp	r0, #0
	beq	.L633	@cond_branch
	ldr	r0, [r5]
	ldrh	r1, [r4, #0x2]
	strb	r1, [r0, #0x16]
	mov	r0, #0xc
	mov	r1, #0x2
	bl	UnionRoomChat_StartDisplaySubtask
	mov	r0, #0x7
	b	.L650
.L660:
	.align	2, 0
.L659:
	.word	sWork
	.word	gBlockRecvBuffer
.L633:
	ldrh	r0, [r4, #0xa]
.L650:
	strh	r0, [r4]
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	b	.L610
.L635:
	mov	r0, #0x2
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L610	@cond_branch
	ldrh	r0, [r4, #0xa]
	b	.L651
.L637:
	ldr	r6, .L661
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	bne	.L638	@cond_branch
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L638	@cond_branch
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L639	@cond_branch
	bl	Rfu_StopPartnerSearch
	ldr	r1, [r6]
	mov	r0, #0x1
	b	.L652
.L662:
	.align	2, 0
.L661:
	.word	sWork
.L639:
	mov	r5, #0x4
	ldrsh	r0, [r4, r5]
	bl	Rfu_DisconnectPlayerById
.L638:
	mov	r0, #0x3
	b	.L651
.L640:
	ldr	r0, .L663
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L648	@cond_branch
	mov	r0, #0x2
	b	.L652
.L664:
	.align	2, 0
.L663:
	.word	sWork
.L642:
	ldr	r0, .L665
	ldr	r1, [r0]
	mov	r0, #0x3
.L652:
	strb	r0, [r1, #0x17]
.L648:
	add	r0, r5, #0
	bl	DestroyTask
	b	.L610
.L666:
	.align	2, 0
.L665:
	.word	sWork
.L643:
	bl	Rfu_IsPlayerExchangeActive
	cmp	r0, #0
	bne	.L610	@cond_branch
	ldr	r0, .L667
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L645	@cond_branch
	ldrb	r0, [r1, #0xd]
	bl	SetUnionRoomChatPlayerData
.L645:
	mov	r0, #0x1
.L651:
	strh	r0, [r4]
.L610:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	sWork
.Lfe51:
	.size	 Task_ReceiveChatMessage,.Lfe51-Task_ReceiveChatMessage
.text
	.align	2, 0 @ Don't pad with nop

