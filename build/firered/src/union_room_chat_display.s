@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sWork,object
	.size	 sWork,4
sWork:
	.word	0x0
	.section .rodata
	.align	1, 0
	.type	 sUnionRoomChat_TextEntry_Pal,object
sUnionRoomChat_TextEntry_Pal:
	.short	0x0
	.short	0x0
	.short	0x673a
	.short	0x7fff
	.short	0x7fff
	.short	0x14a5
	.short	0x2a7f
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sUnionRoomChat_TextEntry_Pal,32
	.align	1, 0
	.type	 gUnionRoomChat_Unused_Pal,object
gUnionRoomChat_Unused_Pal:
	.short	0x0
	.short	0x0
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnionRoomChat_Unused_Pal,32
	.align	1, 0
	.type	 sUnionRoomChat_Messages_Pal,object
sUnionRoomChat_Messages_Pal:
	.short	0x0
	.short	0x7fde
	.short	0x0
	.short	0x7339
	.short	0x346
	.short	0x6b9b
	.short	0x7c00
	.short	0x6f59
	.short	0x1f
	.short	0x635b
	.short	0x2ff
	.short	0x6f9c
	.short	0x6318
	.short	0x1085
	.short	0x0
	.short	0x1ce7
	.size	 sUnionRoomChat_Messages_Pal,32
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,16
sBgTemplates:
	.byte	0x70
	.byte	0x0
	.byte	0x0
	.space	1
	.byte	0xfd
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0x7a
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xf7
	.byte	0x70
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sWindowTemplates,object
sWindowTemplates:
	.byte	0x3
	.byte	0x8
	.byte	0x1
	.byte	0x15
	.byte	0x13
	.byte	0xf
	.short	0x1
	.byte	0x1
	.byte	0x9
	.byte	0x12
	.byte	0xf
	.byte	0x2
	.byte	0xc
	.short	0x7a
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x6
	.byte	0xf
	.byte	0x7
	.short	0x20
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x7
	.byte	0x9
	.byte	0xe
	.short	0x13
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates,40
	.align	2, 0
	.type	 sSubtaskInfo,object
sSubtaskInfo:
	.short	0x0
	.space	2
	.word	DisplaySubtask_LoadGfx
	.short	0x3
	.space	2
	.word	DisplaySubtask_PrintWin3
	.short	0x4
	.space	2
	.word	DisplaySubtask_HideWin3
	.short	0x5
	.space	2
	.word	DisplaySubtask_SwitchPages
	.short	0x1
	.space	2
	.word	DisplaySubtask_MoveSelectorCursorObj
	.short	0x6
	.space	2
	.word	DisplaySubtask_ShowQuitChattingDialog
	.short	0x7
	.space	2
	.word	DisplaySubtask_HideQuitChattingDialog
	.short	0x8
	.space	2
	.word	DisplaySubtask_UpdateMessageBuffer
	.short	0x9
	.space	2
	.word	DisplaySubtask_PrintRegisterWhere
	.short	0xa
	.space	2
	.word	DisplaySubtask_CancelRegister
	.short	0xb
	.space	2
	.word	DisplaySubtask_ReturnToKeyboard
	.short	0xc
	.space	2
	.word	DisplaySubtask_ScrollChat
	.short	0x2
	.space	2
	.word	DisplaySubtask_AnimateSelectorCursorBlink
	.short	0xd
	.space	2
	.word	DisplaySubtask_PrintInputText
	.short	0x12
	.space	2
	.word	DisplaySubtask_PrintExitingChat
	.short	0x13
	.space	2
	.word	DisplaySubtask_PrintLeaderLeft
	.short	0xe
	.space	2
	.word	DisplaySubtask_AskSave
	.short	0xf
	.space	2
	.word	DisplaySubtask_AskOverwriteSave
	.short	0x10
	.space	2
	.word	DisplaySubtask_PrintSavingDontTurnOffPower
	.short	0x11
	.space	2
	.word	DisplaySubtask_PrintSavedTheGame
	.short	0x14
	.space	2
	.word	DisplaySubtask_ShowConfirmLeaderLeaveDialog
	.size	 sSubtaskInfo,168
	.align	2, 0
	.type	 sMessageWindowInfo,object
sMessageWindowInfo:
	.word	gText_QuitChatting
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_RegisterTextWhere
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_RegisterTextHere
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_InputText
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_ExitingTheChat
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_LeaderHasLeftEndingChat
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.space	1
	.word	gText_RegisteredTextChanged_OKtoSave
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.space	1
	.word	gText_RegisteredTextChanged_AlreadySavedFile
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.space	1
	.word	gText_RegisteredTextChanged_SavingDontTurnOff
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.space	1
	.word	gText_RegisteredTextChanged_SavedTheGame
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.byte	0x1
	.space	1
	.word	gText_IfLeaderLeavesChatWillEnd
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.space	1
	.size	 sMessageWindowInfo,132
	.type	 gText_Ellipsis,object
gText_Ellipsis:
	.byte	0xb0
	.byte	0xff
	.size	 gText_Ellipsis,2
	.align	2, 0
	.type	 sKeyboardSwapTexts,object
sKeyboardSwapTexts:
	.word	gText_Upper
	.space	4
	.word	gText_Lower
	.space	4
	.word	gText_Symbols
	.space	4
	.word	gText_Register2
	.space	4
	.word	gText_Exit
	.space	4
	.size	 sKeyboardSwapTexts,40
.text
	.align	2, 0
	.globl	UnionRoomChat_TryAllocGraphicsWork
	.type	 UnionRoomChat_TryAllocGraphicsWork,function
	.thumb_func
UnionRoomChat_TryAllocGraphicsWork:
	push	{r4, lr}
	ldr	r4, .L8
	ldr	r0, .L8+0x4
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	beq	.L5	@cond_branch
	bl	UnionRoomChat_TryAllocSpriteWork
	cmp	r0, #0
	beq	.L5	@cond_branch
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L8+0x8
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	ldr	r0, .L8+0xc
	bl	InitWindows
	bl	ResetTempTileDataBuffers
	bl	InitScanlineEffect
	ldr	r0, [r4]
	bl	InitWork
	bl	UnionRoomChat_ResetDisplaySubtasks
	mov	r0, #0x0
	mov	r1, #0x0
	bl	UnionRoomChat_StartDisplaySubtask
	mov	r0, #0x1
	b	.L7
.L9:
	.align	2, 0
.L8:
	.word	sWork
	.word	0x2168
	.word	sBgTemplates
	.word	sWindowTemplates
.L5:
	mov	r0, #0x0
.L7:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 UnionRoomChat_TryAllocGraphicsWork,.Lfe1-UnionRoomChat_TryAllocGraphicsWork
	.align	2, 0
	.globl	UnionRoomChat_RunDisplaySubtask0
	.type	 UnionRoomChat_RunDisplaySubtask0,function
	.thumb_func
UnionRoomChat_RunDisplaySubtask0:
	push	{lr}
	mov	r0, #0x0
	bl	RunDisplaySubtask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 UnionRoomChat_RunDisplaySubtask0,.Lfe2-UnionRoomChat_RunDisplaySubtask0
	.align	2, 0
	.globl	UnionRoomChat_FreeGraphicsWork
	.type	 UnionRoomChat_FreeGraphicsWork,function
	.thumb_func
UnionRoomChat_FreeGraphicsWork:
	push	{r4, lr}
	bl	UnionRoomChat_FreeSpriteWork
	ldr	r4, .L13
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L12	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L12:
	bl	FreeAllWindowBuffers
	ldr	r1, .L13+0x4
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	pop	{r4}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	sWork
	.word	gScanlineEffect
.Lfe3:
	.size	 UnionRoomChat_FreeGraphicsWork,.Lfe3-UnionRoomChat_FreeGraphicsWork
	.align	2, 0
	.type	 InitWork,function
	.thumb_func
InitWork:
	mov	r2, #0x0
	mov	r1, #0xff
	strh	r1, [r0, #0x18]
	strh	r1, [r0, #0x1e]
	strh	r2, [r0, #0x1a]
	bx	lr
.Lfe4:
	.size	 InitWork,.Lfe4-InitWork
	.align	2, 0
	.type	 UnionRoomChat_ResetDisplaySubtasks,function
	.thumb_func
UnionRoomChat_ResetDisplaySubtasks:
	push	{r4, r5, lr}
	ldr	r1, .L23
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L16	@cond_branch
	mov	r2, #0x0
	add	r4, r1, #0
	ldr	r5, .L23+0x4
	mov	r3, #0x0
.L21:
	ldr	r0, [r4]
	lsl	r1, r2, #0x3
	add	r0, r0, r1
	str	r5, [r0]
	strb	r3, [r0, #0x4]
	ldr	r0, [r4]
	add	r0, r0, r1
	strb	r3, [r0, #0x5]
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L21	@cond_branch
.L16:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	sWork
	.word	DisplaySubtaskDummy
.Lfe5:
	.size	 UnionRoomChat_ResetDisplaySubtasks,.Lfe5-UnionRoomChat_ResetDisplaySubtasks
	.align	2, 0
	.globl	UnionRoomChat_RunDisplaySubtasks
	.type	 UnionRoomChat_RunDisplaySubtasks,function
	.thumb_func
UnionRoomChat_RunDisplaySubtasks:
	push	{r4, r5, r6, lr}
	ldr	r1, .L33
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L25	@cond_branch
	mov	r5, #0x0
	add	r6, r1, #0
.L30:
	ldr	r0, [r6]
	lsl	r4, r5, #0x3
	add	r1, r0, r4
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L29	@cond_branch
	add	r0, r1, #0x5
	ldr	r1, [r1]
	bl	_call_via_r1
	ldr	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1, #0x4]
.L29:
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L30	@cond_branch
.L25:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	sWork
.Lfe6:
	.size	 UnionRoomChat_RunDisplaySubtasks,.Lfe6-UnionRoomChat_RunDisplaySubtasks
	.align	2, 0
	.globl	UnionRoomChat_StartDisplaySubtask
	.type	 UnionRoomChat_StartDisplaySubtask,function
	.thumb_func
UnionRoomChat_StartDisplaySubtask:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	ldr	r3, .L42
	ldr	r0, [r3]
	lsr	r1, r1, #0x15
	add	r0, r0, r1
	ldr	r2, .L42+0x4
	str	r2, [r0]
	mov	r4, #0x0
	add	r5, r3, #0
	add	r3, r1, #0
	mov	ip, r4
	ldr	r1, .L42+0x8
	mov	r7, #0x1
	add	r2, r1, #0x4
.L39:
	ldrh	r0, [r1]
	cmp	r0, r6
	bne	.L38	@cond_branch
	ldr	r1, [r5]
	add	r1, r1, r3
	ldr	r0, [r2]
	str	r0, [r1]
	strb	r7, [r1, #0x4]
	ldr	r0, [r5]
	add	r0, r0, r3
	mov	r1, ip
	strb	r1, [r0, #0x5]
	b	.L37
.L43:
	.align	2, 0
.L42:
	.word	sWork
	.word	DisplaySubtaskDummy
	.word	sSubtaskInfo
.L38:
	add	r1, r1, #0x8
	add	r2, r2, #0x8
	add	r4, r4, #0x1
	cmp	r4, #0x14
	bls	.L39	@cond_branch
.L37:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 UnionRoomChat_StartDisplaySubtask,.Lfe7-UnionRoomChat_StartDisplaySubtask
	.align	2, 0
	.globl	RunDisplaySubtask
	.type	 RunDisplaySubtask,function
	.thumb_func
RunDisplaySubtask:
	lsl	r0, r0, #0x18
	ldr	r1, .L45
	ldr	r1, [r1]
	lsr	r0, r0, #0x15
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	bx	lr
.L46:
	.align	2, 0
.L45:
	.word	sWork
.Lfe8:
	.size	 RunDisplaySubtask,.Lfe8-RunDisplaySubtask
	.align	2, 0
	.type	 DisplaySubtask_LoadGfx,function
	.thumb_func
DisplaySubtask_LoadGfx:
	push	{r4, lr}
	add	r4, r0, #0
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L61	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0x6
	bhi	.L58	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L62
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L63:
	.align	2, 0
.L62:
	.word	.L59
	.align	2, 0
	.align	2, 0
.L59:
	.word	.L50
	.word	.L51
	.word	.L52
	.word	.L53
	.word	.L54
	.word	.L55
	.word	.L56
.L50:
	bl	ResetGpuBgState
	bl	SetBgTilemapWorkBuffers
	b	.L49
.L51:
	bl	ClearBg0
	b	.L49
.L52:
	bl	LoadUnionRoomChatPanelGfx
	b	.L49
.L53:
	bl	LoadLinkMiscMenuGfx
	b	.L49
.L54:
	bl	LoadBg1Pal8
	b	.L49
.L55:
	bl	LoadWin0
	bl	LoadWin2
	bl	LoadWin3
	bl	LoadWin1
	b	.L49
.L56:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L49	@cond_branch
	bl	UnionRoomChat_CreateSelectorCursorObj
	bl	UnionRoomChat_SpawnTextEntryPointerSprites
	bl	CreatePageSwitchUISprites
	b	.L49
.L58:
	mov	r0, #0x0
	b	.L60
.L49:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L61:
	mov	r0, #0x1
.L60:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 DisplaySubtask_LoadGfx,.Lfe9-DisplaySubtask_LoadGfx
	.align	2, 0
	.type	 DisplaySubtask_PrintWin3,function
	.thumb_func
DisplaySubtask_PrintWin3:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L66	@cond_branch
	cmp	r0, #0x1
	beq	.L67	@cond_branch
	b	.L65
.L66:
	bl	PrintKeyboardSwapTextsOnWin3
	mov	r0, #0x3
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L65
.L67:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L70
.L65:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
.L70:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 DisplaySubtask_PrintWin3,.Lfe10-DisplaySubtask_PrintWin3
	.align	2, 0
	.type	 DisplaySubtask_HideWin3,function
	.thumb_func
DisplaySubtask_HideWin3:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L73	@cond_branch
	cmp	r0, #0x1
	beq	.L74	@cond_branch
	b	.L72
.L73:
	bl	ClearWin3
	mov	r0, #0x3
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L72
.L74:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L77
.L72:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
.L77:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 DisplaySubtask_HideWin3,.Lfe11-DisplaySubtask_HideWin3
	.align	2, 0
	.type	 DisplaySubtask_SwitchPages,function
	.thumb_func
DisplaySubtask_SwitchPages:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0x1
	beq	.L82	@cond_branch
	cmp	r0, #0x1
	bgt	.L88	@cond_branch
	cmp	r0, #0
	beq	.L80	@cond_branch
	b	.L79
.L88:
	cmp	r0, #0x2
	beq	.L84	@cond_branch
	b	.L79
.L80:
	mov	r0, #0x1
	bl	UnionRoomChat_ToggleSelectorCursorObjVisibility
	bl	AnimateMoveBg1Right
	cmp	r0, #0
	bne	.L90	@cond_branch
	bl	PrintCurrentKeyboardPage
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L79
.L82:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L79	@cond_branch
	b	.L90
.L84:
	bl	AnimateMoveBg1Left
	cmp	r0, #0
	bne	.L90	@cond_branch
	bl	UnionRoomChat_MoveSelectorCursorObj
	mov	r0, #0x0
	bl	UnionRoomChat_ToggleSelectorCursorObjVisibility
	bl	UpdateVisibleUnionRoomChatIcon
	mov	r0, #0x0
	b	.L89
.L79:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L90:
	mov	r0, #0x1
.L89:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 DisplaySubtask_SwitchPages,.Lfe12-DisplaySubtask_SwitchPages
	.align	2, 0
	.type	 DisplaySubtask_MoveSelectorCursorObj,function
	.thumb_func
DisplaySubtask_MoveSelectorCursorObj:
	push	{lr}
	bl	UnionRoomChat_MoveSelectorCursorObj
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 DisplaySubtask_MoveSelectorCursorObj,.Lfe13-DisplaySubtask_MoveSelectorCursorObj
	.align	2, 0
	.type	 DisplaySubtask_ShowQuitChattingDialog,function
	.thumb_func
DisplaySubtask_ShowQuitChattingDialog:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L94	@cond_branch
	cmp	r0, #0x1
	beq	.L95	@cond_branch
	b	.L93
.L94:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	PlaceStdMessageWindow
	mov	r0, #0x17
	mov	r1, #0xb
	mov	r2, #0x1
	bl	PlaceYesNoMenuAt
	ldr	r0, .L99
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L93
.L100:
	.align	2, 0
.L99:
	.word	sWork
.L95:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L98
.L93:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
.L98:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 DisplaySubtask_ShowQuitChattingDialog,.Lfe14-DisplaySubtask_ShowQuitChattingDialog
	.align	2, 0
	.type	 DisplaySubtask_HideQuitChattingDialog,function
	.thumb_func
DisplaySubtask_HideQuitChattingDialog:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L103	@cond_branch
	cmp	r0, #0x1
	beq	.L104	@cond_branch
	b	.L102
.L103:
	bl	HideStdMessageWindow
	bl	HideYesNoMenuWindow
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	b	.L102
.L104:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L109	@cond_branch
	bl	DestroyStdMessageWindow
	bl	DestroyYesNoMenuWindow
	mov	r0, #0x0
	b	.L108
.L102:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L109:
	mov	r0, #0x1
.L108:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 DisplaySubtask_HideQuitChattingDialog,.Lfe15-DisplaySubtask_HideQuitChattingDialog
	.align	2, 0
	.type	 DisplaySubtask_UpdateMessageBuffer,function
	.thumb_func
DisplaySubtask_UpdateMessageBuffer:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L112	@cond_branch
	cmp	r0, #0x1
	beq	.L113	@cond_branch
	b	.L111
.L112:
	add	r1, sp, #0x8
	add	r0, sp, #0x4
	bl	UnionRoomChat_GetBufferSelectionRegion
	ldr	r0, [sp, #0x4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp, #0x8]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r2, #0x0
	bl	FillWin1Rect
	bl	UnionRoomChat_GetMessageEntryBuffer
	add	r1, r0, #0
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x3
	mov	r3, #0x1
	bl	PrintOnWin1Parameterized
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L111
.L113:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L118	@cond_branch
	bl	UpdateVisibleUnionRoomChatIcon
	mov	r0, #0x0
	b	.L117
.L111:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L118:
	mov	r0, #0x1
.L117:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 DisplaySubtask_UpdateMessageBuffer,.Lfe16-DisplaySubtask_UpdateMessageBuffer
	.align	2, 0
	.type	 DisplaySubtask_PrintRegisterWhere,function
	.thumb_func
DisplaySubtask_PrintRegisterWhere:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L122	@cond_branch
	cmp	r0, #0x1
	bgt	.L131	@cond_branch
	cmp	r0, #0
	beq	.L121	@cond_branch
	b	.L120
.L131:
	cmp	r0, #0x2
	beq	.L125	@cond_branch
	cmp	r0, #0x3
	beq	.L128	@cond_branch
	b	.L120
.L121:
	bl	UnionRoomChat_GetNumCharsInMessageEntryBuffer
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	UnionRoomChat_GetEndOfMessageEntryBuffer
	add	r5, r0, #0
	bl	StringLength_Multibyte
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x66
	bl	FillWin1Rect
	mov	r0, #0x5
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x4
	bl	PrintOnWin1Parameterized
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L120
.L122:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L133	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x10
	bl	PlaceStdMessageWindow
	ldr	r0, .L134
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L120
.L135:
	.align	2, 0
.L134:
	.word	sWork
.L125:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L133	@cond_branch
	mov	r0, #0x1
	bl	UnionRoomChat_UpdateObjPalCycle
	b	.L120
.L128:
	mov	r0, #0x0
	b	.L132
.L120:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L133:
	mov	r0, #0x1
.L132:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 DisplaySubtask_PrintRegisterWhere,.Lfe17-DisplaySubtask_PrintRegisterWhere
	.align	2, 0
	.type	 DisplaySubtask_CancelRegister,function
	.thumb_func
DisplaySubtask_CancelRegister:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L139	@cond_branch
	cmp	r0, #0x1
	bgt	.L148	@cond_branch
	cmp	r0, #0
	beq	.L138	@cond_branch
	b	.L137
.L148:
	cmp	r0, #0x2
	beq	.L142	@cond_branch
	cmp	r0, #0x3
	beq	.L145	@cond_branch
	b	.L137
.L138:
	bl	UnionRoomChat_GetNumCharsInMessageEntryBuffer
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	UnionRoomChat_GetEndOfMessageEntryBuffer
	add	r5, r0, #0
	bl	StringLength_Multibyte
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	FillWin1Rect
	mov	r0, #0x2
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x3
	mov	r3, #0x1
	bl	PrintOnWin1Parameterized
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L137
.L139:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L150	@cond_branch
	bl	HideStdMessageWindow
	ldr	r0, .L151
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L137
.L152:
	.align	2, 0
.L151:
	.word	sWork
.L142:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L150	@cond_branch
	mov	r0, #0x0
	bl	UnionRoomChat_UpdateObjPalCycle
	bl	DestroyStdMessageWindow
	b	.L137
.L145:
	mov	r0, #0x0
	b	.L149
.L137:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L150:
	mov	r0, #0x1
.L149:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 DisplaySubtask_CancelRegister,.Lfe18-DisplaySubtask_CancelRegister
	.align	2, 0
	.type	 DisplaySubtask_ReturnToKeyboard,function
	.thumb_func
DisplaySubtask_ReturnToKeyboard:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L155	@cond_branch
	cmp	r0, #0x1
	beq	.L156	@cond_branch
	b	.L154
.L155:
	bl	PrintCurrentKeyboardPage
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L154
.L156:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L154	@cond_branch
	mov	r0, #0x0
	b	.L161
.L154:
	mov	r0, #0x1
.L161:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 DisplaySubtask_ReturnToKeyboard,.Lfe19-DisplaySubtask_ReturnToKeyboard
	.align	2, 0
	.type	 DisplaySubtask_ScrollChat,function
	.thumb_func
DisplaySubtask_ScrollChat:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldrb	r0, [r6]
	cmp	r0, #0x4
	bhi	.L177	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L180
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L181:
	.align	2, 0
.L180:
	.word	.L175
	.align	2, 0
	.align	2, 0
.L175:
	.word	.L164
	.word	.L165
	.word	.L169
	.word	.L170
	.word	.L179
.L164:
	ldr	r0, .L182
	ldr	r0, [r0]
	ldrh	r5, [r0, #0x1a]
	bl	UnionRoomChat_GetLastReceivedMessage
	add	r4, r0, #0
	bl	UnionRoomChat_GetReceivedPlayerIndex
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	PrintTextOnWin0Colorized
	mov	r0, #0x0
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L163
.L183:
	.align	2, 0
.L182:
	.word	sWork
.L165:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L177	@cond_branch
	ldr	r0, .L184
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0x8
	bhi	.L167	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	mov	r0, #0x4
	strb	r0, [r6]
.L179:
	mov	r0, #0x0
	b	.L176
.L185:
	.align	2, 0
.L184:
	.word	sWork
.L167:
	strh	r2, [r1, #0x1c]
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L169:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x5
	mov	r3, #0x11
	bl	ScrollWindow
	mov	r0, #0x0
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldr	r0, .L186
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L170:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L177	@cond_branch
	ldr	r0, .L186
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1c]
	cmp	r0, #0x2
	bhi	.L163	@cond_branch
	ldrb	r0, [r6]
	sub	r0, r0, #0x1
	b	.L178
.L187:
	.align	2, 0
.L186:
	.word	sWork
.L163:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
.L178:
	strb	r0, [r6]
.L177:
	mov	r0, #0x1
.L176:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 DisplaySubtask_ScrollChat,.Lfe20-DisplaySubtask_ScrollChat
	.align	2, 0
	.type	 DisplaySubtask_AnimateSelectorCursorBlink,function
	.thumb_func
DisplaySubtask_AnimateSelectorCursorBlink:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L190	@cond_branch
	cmp	r0, #0x1
	beq	.L191	@cond_branch
	b	.L189
.L190:
	bl	UnionRoomChat_SetSelectorCursorClosedImage
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L189
.L191:
	bl	UnionRoomChat_AnimateSelectorCursorReopen
	b	.L194
.L189:
	mov	r0, #0x1
.L194:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 DisplaySubtask_AnimateSelectorCursorBlink,.Lfe21-DisplaySubtask_AnimateSelectorCursorBlink
	.align	2, 0
	.type	 DisplaySubtask_PrintInputText,function
	.thumb_func
DisplaySubtask_PrintInputText:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L197	@cond_branch
	cmp	r0, #0x1
	beq	.L198	@cond_branch
	b	.L196
.L197:
	mov	r0, #0x3
	mov	r1, #0x10
	bl	PlaceStdMessageWindow
	ldr	r0, .L202
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L196
.L203:
	.align	2, 0
.L202:
	.word	sWork
.L198:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L201
.L196:
	mov	r0, #0x1
.L201:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 DisplaySubtask_PrintInputText,.Lfe22-DisplaySubtask_PrintInputText
	.align	2, 0
	.type	 DisplaySubtask_PrintExitingChat,function
	.thumb_func
DisplaySubtask_PrintExitingChat:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L206	@cond_branch
	cmp	r0, #0x1
	beq	.L207	@cond_branch
	b	.L205
.L206:
	mov	r0, #0x4
	mov	r1, #0x0
	bl	PlaceStdMessageWindow
	ldr	r0, .L211
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L205
.L212:
	.align	2, 0
.L211:
	.word	sWork
.L207:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L210
.L205:
	mov	r0, #0x1
.L210:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 DisplaySubtask_PrintExitingChat,.Lfe23-DisplaySubtask_PrintExitingChat
	.align	2, 0
	.type	 DisplaySubtask_PrintLeaderLeft,function
	.thumb_func
DisplaySubtask_PrintLeaderLeft:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L215	@cond_branch
	cmp	r0, #0x1
	beq	.L216	@cond_branch
	b	.L214
.L215:
	bl	DynamicPlaceholderTextUtil_Reset
	bl	UnionRoomChat_GetNameOfPlayerWhoDisbandedChat
	add	r1, r0, #0
	mov	r0, #0x0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	mov	r0, #0x5
	mov	r1, #0x0
	bl	PlaceStdMessageWindow
	ldr	r0, .L220
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L214
.L221:
	.align	2, 0
.L220:
	.word	sWork
.L216:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L219
.L214:
	mov	r0, #0x1
.L219:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 DisplaySubtask_PrintLeaderLeft,.Lfe24-DisplaySubtask_PrintLeaderLeft
	.align	2, 0
	.type	 DisplaySubtask_AskSave,function
	.thumb_func
DisplaySubtask_AskSave:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L224	@cond_branch
	cmp	r0, #0x1
	beq	.L225	@cond_branch
	b	.L223
.L224:
	mov	r0, #0x6
	mov	r1, #0x0
	bl	PlaceStdMessageWindow
	mov	r0, #0x17
	mov	r1, #0xa
	mov	r2, #0x1
	bl	PlaceYesNoMenuAt
	ldr	r0, .L229
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L223
.L230:
	.align	2, 0
.L229:
	.word	sWork
.L225:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L228
.L223:
	mov	r0, #0x1
.L228:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 DisplaySubtask_AskSave,.Lfe25-DisplaySubtask_AskSave
	.align	2, 0
	.type	 DisplaySubtask_AskOverwriteSave,function
	.thumb_func
DisplaySubtask_AskOverwriteSave:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L233	@cond_branch
	cmp	r0, #0x1
	beq	.L234	@cond_branch
	b	.L232
.L233:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	PlaceStdMessageWindow
	mov	r0, #0x17
	mov	r1, #0xa
	mov	r2, #0x1
	bl	PlaceYesNoMenuAt
	ldr	r0, .L238
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L232
.L239:
	.align	2, 0
.L238:
	.word	sWork
.L234:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L237
.L232:
	mov	r0, #0x1
.L237:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 DisplaySubtask_AskOverwriteSave,.Lfe26-DisplaySubtask_AskOverwriteSave
	.align	2, 0
	.type	 DisplaySubtask_PrintSavingDontTurnOffPower,function
	.thumb_func
DisplaySubtask_PrintSavingDontTurnOffPower:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L242	@cond_branch
	cmp	r0, #0x1
	beq	.L243	@cond_branch
	b	.L241
.L242:
	mov	r0, #0x8
	mov	r1, #0x0
	bl	PlaceStdMessageWindow
	ldr	r0, .L247
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L241
.L248:
	.align	2, 0
.L247:
	.word	sWork
.L243:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L246
.L241:
	mov	r0, #0x1
.L246:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 DisplaySubtask_PrintSavingDontTurnOffPower,.Lfe27-DisplaySubtask_PrintSavingDontTurnOffPower
	.align	2, 0
	.type	 DisplaySubtask_PrintSavedTheGame,function
	.thumb_func
DisplaySubtask_PrintSavedTheGame:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L251	@cond_branch
	cmp	r0, #0x1
	beq	.L252	@cond_branch
	b	.L250
.L251:
	bl	DynamicPlaceholderTextUtil_Reset
	ldr	r0, .L256
	ldr	r1, [r0]
	mov	r0, #0x0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	mov	r0, #0x9
	mov	r1, #0x0
	bl	PlaceStdMessageWindow
	ldr	r0, .L256+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L250
.L257:
	.align	2, 0
.L256:
	.word	gSaveBlock2Ptr
	.word	sWork
.L252:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L255
.L250:
	mov	r0, #0x1
.L255:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 DisplaySubtask_PrintSavedTheGame,.Lfe28-DisplaySubtask_PrintSavedTheGame
	.align	2, 0
	.type	 DisplaySubtask_ShowConfirmLeaderLeaveDialog,function
	.thumb_func
DisplaySubtask_ShowConfirmLeaderLeaveDialog:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L260	@cond_branch
	cmp	r0, #0x1
	beq	.L261	@cond_branch
	b	.L259
.L260:
	mov	r0, #0xa
	mov	r1, #0x0
	bl	PlaceStdMessageWindow
	mov	r0, #0x17
	mov	r1, #0xa
	mov	r2, #0x1
	bl	PlaceYesNoMenuAt
	ldr	r0, .L265
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L259
.L266:
	.align	2, 0
.L265:
	.word	sWork
.L261:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L264
.L259:
	mov	r0, #0x1
.L264:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 DisplaySubtask_ShowConfirmLeaderLeaveDialog,.Lfe29-DisplaySubtask_ShowConfirmLeaderLeaveDialog
	.align	2, 0
	.type	 DisplaySubtaskDummy,function
	.thumb_func
DisplaySubtaskDummy:
	mov	r0, #0x0
	bx	lr
.Lfe30:
	.size	 DisplaySubtaskDummy,.Lfe30-DisplaySubtaskDummy
	.align	2, 0
	.type	 PlaceYesNoMenuAt,function
	.thumb_func
PlaceYesNoMenuAt:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r4, .L270
	ldr	r2, [sp, #0xc]
	and	r2, r2, r4
	lsr	r0, r0, #0x10
	ldr	r3, .L270+0x4
	and	r2, r2, r3
	orr	r2, r2, r0
	lsr	r1, r1, #0x8
	ldr	r0, .L270+0x8
	and	r2, r2, r0
	orr	r2, r2, r1
	ldr	r0, .L270+0xc
	and	r2, r2, r0
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	orr	r2, r2, r0
	str	r2, [sp, #0xc]
	ldr	r0, [sp, #0x10]
	and	r0, r0, r4
	mov	r1, #0x4
	orr	r0, r0, r1
	and	r0, r0, r3
	mov	r1, #0xe0
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	ldr	r1, .L270+0x10
	and	r0, r0, r1
	mov	r1, #0xa4
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [sp, #0x10]
	add	r0, sp, #0xc
	bl	AddWindow
	add	r1, r0, #0
	ldr	r6, .L270+0x14
	ldr	r0, [r6]
	mov	r7, #0x0
	strh	r1, [r0, #0x18]
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xff
	beq	.L269	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x18]
	bl	PutWindowTilemap
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x18]
	ldr	r2, .L270+0x18
	mov	r5, #0x2
	str	r5, [sp]
	mov	r4, #0xff
	str	r4, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r1, #0x2
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x18]
	ldr	r2, .L270+0x1c
	mov	r1, #0x10
	str	r1, [sp]
	str	r4, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r1, #0x2
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x18]
	mov	r1, #0x1
	mov	r2, #0xd
	bl	DrawTextBorderOuter
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x18]
	mov	r1, #0xe
	str	r1, [sp]
	str	r5, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	Menu_InitCursor
.L269:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
	.word	0xffff
	.word	sWork
	.word	gText_Yes
	.word	gText_No
.Lfe31:
	.size	 PlaceYesNoMenuAt,.Lfe31-PlaceYesNoMenuAt
	.align	2, 0
	.type	 HideYesNoMenuWindow,function
	.thumb_func
HideYesNoMenuWindow:
	push	{r4, lr}
	ldr	r4, .L274
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0xff
	beq	.L273	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x18]
	bl	ClearWindowTilemap
.L273:
	pop	{r4}
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	sWork
.Lfe32:
	.size	 HideYesNoMenuWindow,.Lfe32-HideYesNoMenuWindow
	.align	2, 0
	.type	 DestroyYesNoMenuWindow,function
	.thumb_func
DestroyYesNoMenuWindow:
	push	{r4, lr}
	ldr	r4, .L278
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0xff
	beq	.L277	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	ldr	r1, [r4]
	mov	r0, #0xff
	strh	r0, [r1, #0x18]
.L277:
	pop	{r4}
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	sWork
.Lfe33:
	.size	 DestroyYesNoMenuWindow,.Lfe33-DestroyYesNoMenuWindow
	.align	2, 0
	.globl	UnionRoomChat_ProcessInput
	.type	 UnionRoomChat_ProcessInput,function
	.thumb_func
UnionRoomChat_ProcessInput:
	push	{lr}
	bl	Menu_ProcessInput
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 UnionRoomChat_ProcessInput,.Lfe34-UnionRoomChat_ProcessInput
	.align	2, 0
	.type	 PlaceStdMessageWindow,function
	.thumb_func
PlaceStdMessageWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x1c
	add	r7, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	ldr	r1, .L288
	ldr	r3, [sp, #0x14]
	and	r3, r3, r1
	ldr	r2, .L288+0x4
	and	r3, r3, r2
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	orr	r3, r3, r0
	ldr	r0, .L288+0x8
	and	r3, r3, r0
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	orr	r3, r3, r0
	ldr	r5, .L288+0xc
	and	r3, r3, r5
	mov	r0, #0xa8
	lsl	r0, r0, #0x15
	orr	r3, r3, r0
	str	r3, [sp, #0x14]
	ldr	r0, [sp, #0x18]
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	and	r0, r0, r2
	mov	r1, #0xe0
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	ldr	r1, .L288+0x10
	and	r0, r0, r1
	mov	r1, #0xd4
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [sp, #0x18]
	ldr	r1, .L288+0x14
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r0, [r4, #0xa]
	cmp	r0, #0
	beq	.L282	@cond_branch
	lsl	r0, r3, #0x10
	mov	r1, #0xf9
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	and	r2, r2, r3
	orr	r2, r2, r0
	lsr	r1, r2, #0x18
	add	r1, r1, #0x7
	lsl	r1, r1, #0x18
	add	r0, r5, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
.L282:
	add	r0, sp, #0x14
	bl	AddWindow
	ldr	r5, .L288+0x18
	ldr	r1, [r5]
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x1e]
	mov	r8, r0
	cmp	r0, #0xff
	beq	.L281	@cond_branch
	ldrb	r0, [r4, #0x9]
	cmp	r0, #0
	beq	.L284	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldr	r1, [r4]
	bl	DynamicPlaceholderTextUtil_ExpandPlaceholders
	ldr	r0, [r5]
	add	r6, r0, #0
	add	r6, r6, #0x22
	b	.L285
.L289:
	.align	2, 0
.L288:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
	.word	0xffff
	.word	sMessageWindowInfo
	.word	sWork
.L284:
	ldr	r6, [r4]
.L285:
	mov	r0, r9
	lsl	r1, r0, #0x8
	mov	r0, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	ldr	r1, .L290
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0x1
	bne	.L286	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xa
	mov	r2, #0x2
	bl	DrawTextBorderInner
	ldrb	r3, [r4, #0x5]
	add	r3, r3, #0x8
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r0, [r4, #0x6]
	add	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldrb	r0, [r4, #0x7]
	str	r0, [sp, #0xc]
	ldrb	r0, [r4, #0x8]
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x2
	add	r2, r6, #0
	bl	AddTextPrinterParameterized5
	b	.L287
.L291:
	.align	2, 0
.L290:
	.word	sMessageWindowInfo
.L286:
	add	r0, r5, #0
	mov	r1, #0xa
	mov	r2, #0x2
	bl	DrawTextBorderOuter
	ldrb	r3, [r4, #0x5]
	ldrb	r0, [r4, #0x6]
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldrb	r0, [r4, #0x7]
	str	r0, [sp, #0xc]
	ldrb	r0, [r4, #0x8]
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x2
	add	r2, r6, #0
	bl	AddTextPrinterParameterized5
.L287:
	ldr	r0, .L292
	ldr	r0, [r0]
	mov	r1, r8
	strh	r1, [r0, #0x1e]
.L281:
	add	sp, sp, #0x1c
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L293:
	.align	2, 0
.L292:
	.word	sWork
.Lfe35:
	.size	 PlaceStdMessageWindow,.Lfe35-PlaceStdMessageWindow
	.align	2, 0
	.type	 HideStdMessageWindow,function
	.thumb_func
HideStdMessageWindow:
	push	{r4, lr}
	ldr	r4, .L296
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1e]
	cmp	r0, #0xff
	beq	.L295	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1e]
	bl	ClearWindowTilemap
.L295:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	pop	{r4}
	pop	{r0}
	bx	r0
.L297:
	.align	2, 0
.L296:
	.word	sWork
.Lfe36:
	.size	 HideStdMessageWindow,.Lfe36-HideStdMessageWindow
	.align	2, 0
	.type	 DestroyStdMessageWindow,function
	.thumb_func
DestroyStdMessageWindow:
	push	{r4, lr}
	ldr	r4, .L300
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1e]
	cmp	r0, #0xff
	beq	.L299	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	ldr	r1, [r4]
	mov	r0, #0xff
	strh	r0, [r1, #0x1e]
.L299:
	pop	{r4}
	pop	{r0}
	bx	r0
.L301:
	.align	2, 0
.L300:
	.word	sWork
.Lfe37:
	.size	 DestroyStdMessageWindow,.Lfe37-DestroyStdMessageWindow
	.align	2, 0
	.type	 FillWin1Rect,function
	.thumb_func
FillWin1Rect:
	push	{lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x13
	lsr	r3, r3, #0x10
	lsl	r1, r1, #0x13
	lsr	r1, r1, #0x10
	str	r1, [sp]
	mov	r0, #0xe
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	add	r1, r2, #0
	add	r2, r3, #0
	mov	r3, #0x1
	bl	FillWindowPixelRect
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 FillWin1Rect,.Lfe38-FillWin1Rect
	.align	2, 0
	.type	 PrintOnWin1Parameterized,function
	.thumb_func
PrintOnWin1Parameterized:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x34
	mov	sl, r1
	ldr	r1, [sp, #0x54]
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r9, r5
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	mov	r8, r4
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	cmp	r4, #0
	beq	.L304	@cond_branch
	bl	UnionRoomChat_GetMessageEntryCursorPosition
	add	r1, r0, #0
	sub	r1, r1, r5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	add	r2, r4, #0
	bl	FillWin1Rect
.L304:
	add	r0, sp, #0xc
	mov	r1, r8
	strb	r1, [r0]
	strb	r7, [r0, #0x1]
	strb	r6, [r0, #0x2]
	add	r4, sp, #0x10
	mov	r0, #0xfc
	strb	r0, [r4]
	mov	r0, #0x14
	strb	r0, [r4, #0x1]
	mov	r0, #0x8
	strb	r0, [r4, #0x2]
	mov	r0, sp
	add	r0, r0, #0x13
	mov	r1, sl
	bl	StringCopy
	mov	r0, r9
	lsl	r2, r0, #0x1b
	lsr	r2, r2, #0x18
	add	r1, sp, #0xc
	str	r1, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 PrintOnWin1Parameterized,.Lfe39-PrintOnWin1Parameterized
	.align	2, 0
	.type	 PrintCurrentKeyboardPage,function
	.thumb_func
PrintCurrentKeyboardPage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4c
	mov	r0, #0x2
	mov	r1, #0xff
	bl	FillWindowPixelBuffer
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r1, sp, #0xc
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0xe
	strb	r0, [r1, #0x1]
	mov	r0, #0xd
	strb	r0, [r1, #0x2]
	cmp	r2, #0x3
	beq	.L306	@cond_branch
	add	r1, sp, #0x10
	mov	r0, #0xfc
	strb	r0, [r1]
	mov	r0, #0x14
	strb	r0, [r1, #0x1]
	mov	r0, #0x8
	strb	r0, [r1, #0x2]
	str	r0, [sp, #0x40]
	str	r1, [sp, #0x44]
	cmp	r2, #0x2
	bne	.L307	@cond_branch
	mov	r1, #0x6
	str	r1, [sp, #0x40]
.L307:
	mov	r7, #0x0
	mov	r6, #0x0
	lsl	r0, r2, #0x2
	ldr	r1, .L328
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldr	r0, [sp, #0x40]
	lsl	r5, r0, #0x18
.L312:
	ldr	r1, [r4]
	cmp	r1, #0
	bne	.LCB2424
	b	.L305	@long jump
.LCB2424:
	mov	r0, sp
	add	r0, r0, #0x13
	bl	StringCopy
	lsl	r3, r6, #0x18
	lsr	r3, r3, #0x18
	add	r1, sp, #0xc
	str	r1, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, [sp, #0x44]
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	lsr	r2, r5, #0x18
	bl	AddTextPrinterParameterized3
	add	r4, r4, #0x4
	add	r7, r7, #0x1
	add	r0, r6, #0
	add	r0, r0, #0xc
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r7, #0x9
	ble	.L312	@cond_branch
	b	.L305
.L329:
	.align	2, 0
.L328:
	.word	gUnionRoomKeyboardText
.L306:
	mov	r1, #0x4
	str	r1, [sp, #0x40]
	mov	r7, #0x0
	mov	r6, #0x0
.L319:
	add	r0, r7, #0
	bl	UnionRoomChat_GetWorkRegisteredText
	add	r5, r0, #0
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, #0x28
	bgt	.L320	@cond_branch
	lsl	r3, r6, #0x18
	lsr	r3, r3, #0x18
	add	r4, sp, #0xc
	str	r4, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r4, #0x80
	lsl	r4, r4, #0x13
	lsr	r2, r4, #0x18
	bl	AddTextPrinterParameterized3
	add	r0, r7, #0x1
	str	r0, [sp, #0x48]
	add	r6, r6, #0xc
	mov	sl, r6
	b	.L318
.L320:
	add	r0, r5, #0
	bl	StringLength_Multibyte
	add	r4, r0, #0
	mov	r1, sp
	add	r1, r1, #0x10
	str	r1, [sp, #0x44]
	ldr	r0, [sp, #0x40]
	lsl	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r6, #0x18
	mov	r9, r1
	add	r0, r7, #0x1
	str	r0, [sp, #0x48]
	add	r6, r6, #0xc
	mov	sl, r6
	ldr	r7, [sp, #0x40]
	add	r7, r7, #0x23
	ldr	r6, [sp, #0x44]
.L322:
	sub	r4, r4, #0x1
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	StringCopyN_Multibyte
	mov	r0, #0x0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, #0x23
	bgt	.L322	@cond_branch
	mov	r1, r8
	lsr	r2, r1, #0x18
	mov	r0, r9
	lsr	r4, r0, #0x18
	add	r1, sp, #0xc
	str	r1, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r1, [sp, #0x44]
	str	r1, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	add	r2, r7, #0
	add	r0, sp, #0xc
	str	r0, [sp]
	mov	r1, #0x1
	neg	r1, r1
	str	r1, [sp, #0x4]
	ldr	r0, .L330
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
.L318:
	ldr	r7, [sp, #0x48]
	mov	r4, sl
	lsl	r0, r4, #0x10
	lsr	r6, r0, #0x10
	cmp	r7, #0x9
	ble	.L319	@cond_branch
.L305:
	add	sp, sp, #0x4c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L331:
	.align	2, 0
.L330:
	.word	gText_Ellipsis
.Lfe40:
	.size	 PrintCurrentKeyboardPage,.Lfe40-PrintCurrentKeyboardPage
	.align	2, 0
	.type	 AnimateMoveBg1Right,function
	.thumb_func
AnimateMoveBg1Right:
	push	{r4, lr}
	ldr	r1, .L338
	ldr	r2, [r1]
	ldrh	r3, [r2, #0x20]
	mov	r4, #0x20
	ldrsh	r0, [r2, r4]
	cmp	r0, #0x37
	bgt	.L333	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xc
	strh	r0, [r2, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x37
	ble	.L337	@cond_branch
	mov	r0, #0x38
	strh	r0, [r2, #0x20]
	b	.L333
.L339:
	.align	2, 0
.L338:
	.word	sWork
.L337:
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	bl	FillScanlineEffectWithValue1col
	mov	r0, #0x1
	b	.L336
.L333:
	ldr	r0, [r1]
	mov	r4, #0x20
	ldrsh	r0, [r0, r4]
	bl	FillScanlineEffectWithValue2col
	mov	r0, #0x0
.L336:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 AnimateMoveBg1Right,.Lfe41-AnimateMoveBg1Right
	.align	2, 0
	.type	 AnimateMoveBg1Left,function
	.thumb_func
AnimateMoveBg1Left:
	push	{r4, lr}
	ldr	r1, .L346
	ldr	r2, [r1]
	ldrh	r3, [r2, #0x20]
	mov	r4, #0x20
	ldrsh	r0, [r2, r4]
	cmp	r0, #0
	ble	.L341	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0xc
	strh	r0, [r2, #0x20]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L345	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x20]
	b	.L341
.L347:
	.align	2, 0
.L346:
	.word	sWork
.L345:
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	bl	FillScanlineEffectWithValue1col
	mov	r0, #0x1
	b	.L344
.L341:
	ldr	r0, [r1]
	mov	r4, #0x20
	ldrsh	r0, [r0, r4]
	bl	FillScanlineEffectWithValue2col
	mov	r0, #0x0
.L344:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 AnimateMoveBg1Left,.Lfe42-AnimateMoveBg1Left
	.align	2, 0
	.type	 PrintKeyboardSwapTextsOnWin3,function
	.thumb_func
PrintKeyboardSwapTextsOnWin3:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x3
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0xd
	bl	DrawTextBorderOuter
	ldr	r0, .L349
	str	r0, [sp]
	mov	r0, #0x3
	mov	r1, #0x2
	mov	r2, #0xe
	mov	r3, #0x5
	bl	PrintMenuTable
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xe
	str	r1, [sp]
	mov	r1, #0x5
	str	r1, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	Menu_InitCursor
	mov	r0, #0x3
	bl	PutWindowTilemap
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L350:
	.align	2, 0
.L349:
	.word	sKeyboardSwapTexts
.Lfe43:
	.size	 PrintKeyboardSwapTextsOnWin3,.Lfe43-PrintKeyboardSwapTextsOnWin3
	.align	2, 0
	.type	 ClearWin3,function
	.thumb_func
ClearWin3:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x3
	bl	ClearWindowTilemap
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 ClearWin3,.Lfe44-ClearWin3
	.align	2, 0
	.type	 PrintTextOnWin0Colorized,function
	.thumb_func
PrintTextOnWin0Colorized:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r1, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r2, #0x18
	add	r3, sp, #0xc
	mov	r1, #0x1
	strb	r1, [r3]
	lsr	r2, r2, #0x17
	add	r1, r2, #0x2
	strb	r1, [r3, #0x1]
	add	r1, r3, #0
	add	r2, r2, #0x3
	strb	r2, [r1, #0x2]
	lsl	r4, r0, #0x4
	sub	r4, r4, r0
	lsl	r3, r4, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0xa8
	str	r0, [sp]
	mov	r0, #0xf
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x11
	mov	r2, #0x0
	bl	FillWindowPixelRect
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, sp, #0xc
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 PrintTextOnWin0Colorized,.Lfe45-PrintTextOnWin0Colorized
	.align	2, 0
	.type	 ResetGpuBgState,function
	.thumb_func
ResetGpuBgState:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuRegBits
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, #0xe0
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	ClearGpuRegBits
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L354
	mov	r0, #0x40
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x90
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x3d
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L355:
	.align	2, 0
.L354:
	.word	0x40f0
.Lfe46:
	.size	 ResetGpuBgState,.Lfe46-ResetGpuBgState
	.align	2, 0
	.type	 SetBgTilemapWorkBuffers,function
	.thumb_func
SetBgTilemapWorkBuffers:
	push	{r4, lr}
	ldr	r4, .L357
	ldr	r1, [r4]
	mov	r0, #0x94
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L357+0x4
	add	r1, r1, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L357+0x8
	add	r1, r1, r0
	mov	r0, #0x3
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L357+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	pop	{r4}
	pop	{r0}
	bx	r0
.L358:
	.align	2, 0
.L357:
	.word	sWork
	.word	0x928
	.word	0x1128
	.word	0x1928
.Lfe47:
	.size	 SetBgTilemapWorkBuffers,.Lfe47-SetBgTilemapWorkBuffers
	.align	2, 0
	.type	 ClearBg0,function
	.thumb_func
ClearBg0:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	mov	r0, #0x0
	mov	r2, #0x20
	mov	r3, #0x1
	bl	RequestDma3Fill
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 ClearBg0,.Lfe48-ClearBg0
	.align	2, 0
	.type	 LoadUnionRoomChatPanelGfx,function
	.thumb_func
LoadUnionRoomChatPanelGfx:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r0, .L361
	mov	r1, #0x70
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L361+0x4
	mov	r1, #0xc0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L361+0x8
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r1, .L361+0xc
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L362:
	.align	2, 0
.L361:
	.word	gUnionRoomChat_Panel_Pal
	.word	sUnionRoomChat_TextEntry_Pal
	.word	gUnionRoomChat_Panel_Gfx
	.word	gUnionRoomChat_Panel_Tilemap
.Lfe49:
	.size	 LoadUnionRoomChatPanelGfx,.Lfe49-LoadUnionRoomChatPanelGfx
	.align	2, 0
	.type	 LoadLinkMiscMenuGfx,function
	.thumb_func
LoadLinkMiscMenuGfx:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r0, .L364
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L364+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r1, .L364+0x8
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L365:
	.align	2, 0
.L364:
	.word	gUnionRoomChat_Bg_Pal
	.word	gUnionRoomChat_Bg_Gfx
	.word	gUnionRoomChat_Bg_Tilemap
.Lfe50:
	.size	 LoadLinkMiscMenuGfx,.Lfe50-LoadLinkMiscMenuGfx
	.align	2, 0
	.type	 LoadBg1Pal8,function
	.thumb_func
LoadBg1Pal8:
	push	{lr}
	ldr	r0, .L367
	mov	r1, #0x80
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L367+0x4
	mov	r0, #0x0
	mov	r2, #0x20
	mov	r3, #0x1
	bl	RequestDma3Fill
	pop	{r0}
	bx	r0
.L368:
	.align	2, 0
.L367:
	.word	gUnionRoomChat_Unused_Pal
	.word	0x6004020
.Lfe51:
	.size	 LoadBg1Pal8,.Lfe51-LoadBg1Pal8
	.align	2, 0
	.type	 LoadWin0,function
	.thumb_func
LoadWin0:
	push	{lr}
	ldr	r0, .L370
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.L371:
	.align	2, 0
.L370:
	.word	sUnionRoomChat_Messages_Pal
.Lfe52:
	.size	 LoadWin0,.Lfe52-LoadWin0
	.align	2, 0
	.type	 LoadWin2,function
	.thumb_func
LoadWin2:
	push	{lr}
	mov	r0, #0x2
	bl	PutWindowTilemap
	bl	PrintCurrentKeyboardPage
	mov	r0, #0x2
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 LoadWin2,.Lfe53-LoadWin2
	.align	2, 0
	.type	 LoadWin1,function
	.thumb_func
LoadWin1:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 LoadWin1,.Lfe54-LoadWin1
	.align	2, 0
	.type	 LoadWin3,function
	.thumb_func
LoadWin3:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0xd0
	bl	LoadUserWindowGfx
	mov	r0, #0x3
	mov	r1, #0xa
	mov	r2, #0x20
	bl	LoadStdWindowGfx
	ldr	r0, .L375
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	gStandardMenuPalette
.Lfe55:
	.size	 LoadWin3,.Lfe55-LoadWin3
	.align	2, 0
	.type	 InitScanlineEffect,function
	.thumb_func
InitScanlineEffect:
	push	{lr}
	add	sp, sp, #-0x10
	ldr	r0, .L378
	str	r0, [sp, #0x4]
	ldr	r0, .L378+0x4
	str	r0, [sp]
	mov	r2, sp
	mov	r1, #0x0
	mov	r0, #0x1
	strb	r0, [r2, #0x8]
	mov	r0, sp
	strb	r1, [r0, #0x9]
	ldr	r0, .L378+0x8
	ldr	r0, [r0]
	strh	r1, [r0, #0x20]
	str	r1, [sp, #0xc]
	add	r0, sp, #0xc
	ldr	r1, .L378+0xc
	ldr	r2, .L378+0x10
	bl	CpuFastSet
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L379:
	.align	2, 0
.L378:
	.word	-0x5d9fffff
	.word	0x4000014
	.word	sWork
	.word	gScanlineEffectRegBuffers
	.word	0x10003c0
.Lfe56:
	.size	 InitScanlineEffect,.Lfe56-InitScanlineEffect
	.align	2, 0
	.type	 FillScanlineEffectWithValue1col,function
	.thumb_func
FillScanlineEffectWithValue1col:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sp
	strh	r0, [r1]
	ldr	r5, .L381
	ldrb	r0, [r5, #0x14]
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r1, r1, #0x7
	ldr	r4, .L381+0x4
	add	r1, r1, r4
	ldr	r2, .L381+0x8
	mov	r0, sp
	bl	CpuSet
	mov	r0, sp
	add	r0, r0, #0x2
	mov	r1, #0x0
	strh	r1, [r0]
	ldrb	r2, [r5, #0x14]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	lsl	r1, r1, #0x7
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r4, r4, r2
	add	r1, r1, r4
	ldr	r2, .L381+0xc
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L382:
	.align	2, 0
.L381:
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	0x1000090
	.word	0x1000010
.Lfe57:
	.size	 FillScanlineEffectWithValue1col,.Lfe57-FillScanlineEffectWithValue1col
	.align	2, 0
	.type	 FillScanlineEffectWithValue2col,function
	.thumb_func
FillScanlineEffectWithValue2col:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, sp
	strh	r4, [r0]
	ldr	r5, .L384
	ldr	r0, .L384+0x4
	mov	r9, r0
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, r9
	bl	CpuSet
	mov	r0, sp
	add	r0, r0, #0x2
	mov	r6, #0x0
	strh	r6, [r0]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r1, r5, r2
	ldr	r2, .L384+0x8
	mov	r8, r2
	bl	CpuSet
	add	r0, sp, #0x4
	strh	r4, [r0]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r5, r2
	mov	r2, r9
	bl	CpuSet
	mov	r0, sp
	add	r0, r0, #0x6
	strh	r6, [r0]
	mov	r1, #0x8a
	lsl	r1, r1, #0x4
	add	r5, r5, r1
	add	r1, r5, #0
	mov	r2, r8
	bl	CpuSet
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L385:
	.align	2, 0
.L384:
	.word	gScanlineEffectRegBuffers
	.word	0x1000090
	.word	0x1000010
.Lfe58:
	.size	 FillScanlineEffectWithValue2col,.Lfe58-FillScanlineEffectWithValue2col
.text
	.align	2, 0 @ Don't pad with nop

