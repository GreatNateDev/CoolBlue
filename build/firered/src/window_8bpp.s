@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sWindowPtr,object
	.size	 sWindowPtr,4
sWindowPtr:
	.word	0x0
	.align	1, 0
	.type	 sWindowSize,object
	.size	 sWindowSize,2
sWindowSize:
	.short	0x0
.text
	.align	2, 0
	.type	 nullsub_9,function
	.thumb_func
nullsub_9:
	bx	lr
.Lfe1:
	.size	 nullsub_9,.Lfe1-nullsub_9
	.align	2, 0
	.globl	AddWindow8Bit
	.type	 AddWindow8Bit,function
	.thumb_func
AddWindow8Bit:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	mov	r6, #0x0
	ldr	r1, .L26
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L7	@cond_branch
.L8:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x1f
	bhi	.L7	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L8	@cond_branch
.L7:
	cmp	r6, #0x20
	beq	.L22	@cond_branch
	mov	r0, r9
	ldrb	r7, [r0]
	ldr	r1, .L26+0x4
	mov	sl, r1
	lsl	r2, r7, #0x2
	mov	r8, r2
	mov	r0, r8
	add	r0, r0, sl
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L13	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x8
	bl	GetBgAttribute
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L26+0x8
	cmp	r5, r0
	beq	.L13	@cond_branch
	add	r0, r5, #0
	bl	Alloc
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L22	@cond_branch
	mov	r1, #0x0
	mov	ip, sl
	mov	r3, r8
	cmp	r1, r5
	bge	.L17	@cond_branch
	mov	r2, #0x0
.L19:
	add	r0, r4, r1
	strb	r2, [r0]
	add	r1, r1, #0x1
	cmp	r1, r5
	blt	.L19	@cond_branch
.L17:
	mov	r1, ip
	add	r0, r3, r1
	str	r4, [r0]
	add	r0, r7, #0
	add	r1, r4, #0
	bl	SetBgTilemapBuffer
.L13:
	mov	r2, r9
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	mul	r0, r0, r1
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x10
	bl	Alloc
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L21	@cond_branch
	add	r0, r7, #0
	bl	GetNumActiveWindowsOnBg8Bit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L22	@cond_branch
	ldr	r0, .L26+0x4
	lsl	r1, r7, #0x2
	add	r5, r1, r0
	ldr	r1, [r5]
	ldr	r0, .L26+0xc
	cmp	r1, r0
	beq	.L22	@cond_branch
	add	r0, r1, #0
	bl	Free
	str	r4, [r5]
.L22:
	mov	r0, #0xff
	b	.L24
.L27:
	.align	2, 0
.L26:
	.word	gWindows
	.word	gWindowBgTilemapBuffers
	.word	0xffff
	.word	nullsub_9
.L21:
	ldr	r1, .L28
	lsl	r2, r6, #0x1
	add	r2, r2, r6
	lsl	r2, r2, #0x2
	add	r0, r1, #0
	add	r0, r0, #0x8
	add	r0, r2, r0
	str	r4, [r0]
	add	r2, r2, r1
	mov	r3, r9
	ldr	r0, [r3]		@ created by thumb_load_double_from_address
	ldr	r1, [r3, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	add	r0, r6, #0
.L24:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L29:
	.align	2, 0
.L28:
	.word	gWindows
.Lfe2:
	.size	 AddWindow8Bit,.Lfe2-AddWindow8Bit
	.align	2, 0
	.globl	FillWindowPixelBuffer8Bit
	.type	 FillWindowPixelBuffer8Bit,function
	.thumb_func
FillWindowPixelBuffer8Bit:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r6, .L36
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r4, r1, #0x2
	add	r0, r4, r6
	ldrb	r1, [r0, #0x3]
	ldrb	r0, [r0, #0x4]
	mul	r0, r0, r1
	lsl	r0, r0, #0x16
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	cmp	r2, r3
	bge	.L32	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0x8
	add	r1, r4, r0
.L34:
	ldr	r0, [r1]
	add	r0, r0, r2
	strb	r5, [r0]
	add	r2, r2, #0x1
	cmp	r2, r3
	blt	.L34	@cond_branch
.L32:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	gWindows
.Lfe3:
	.size	 FillWindowPixelBuffer8Bit,.Lfe3-FillWindowPixelBuffer8Bit
	.align	2, 0
	.globl	FillWindowPixelRect8Bit
	.type	 FillWindowPixelRect8Bit,function
	.thumb_func
FillWindowPixelRect8Bit:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x10
	mov	r9, r3
	ldr	r3, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	mov	r8, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r4, r9
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r9, r4
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r4, r8
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r8, r4
	ldr	r5, .L39
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x8
	add	r0, r4, r0
	ldr	r0, [r0]
	str	r0, [sp, #0x8]
	add	r4, r4, r5
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x3
	ldr	r6, .L39+0x4
	ldr	r5, [sp, #0xc]
	and	r5, r5, r6
	orr	r5, r5, r0
	str	r5, [sp, #0xc]
	ldrb	r4, [r4, #0x4]
	lsl	r4, r4, #0x13
	ldr	r0, .L39+0x8
	and	r0, r0, r5
	orr	r0, r0, r4
	str	r0, [sp, #0xc]
	mov	r0, r8
	str	r0, [sp]
	str	r1, [sp, #0x4]
	add	r0, sp, #0x8
	add	r1, r2, #0
	mov	r2, r9
	bl	FillBitmapRect8Bit
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	gWindows
	.word	-0x10000
	.word	0xffff
.Lfe4:
	.size	 FillWindowPixelRect8Bit,.Lfe4-FillWindowPixelRect8Bit
	.align	2, 0
	.globl	BlitBitmapRectToWindow4BitTo8Bit
	.type	 BlitBitmapRectToWindow4BitTo8Bit,function
	.thumb_func
BlitBitmapRectToWindow4BitTo8Bit:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	ldr	r4, [sp, #0x4c]
	ldr	r5, [sp, #0x50]
	ldr	r6, [sp, #0x54]
	mov	r8, r6
	ldr	r7, [sp, #0x58]
	mov	r9, r7
	ldr	r6, [sp, #0x5c]
	mov	sl, r6
	ldr	r7, [sp, #0x60]
	mov	ip, r7
	ldr	r6, [sp, #0x64]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r4, r4, #0x10
	mov	r7, r8
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	mov	r8, r7
	mov	r7, r9
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	mov	r9, r7
	mov	r7, sl
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	mov	sl, r7
	mov	r7, ip
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	mov	ip, r7
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x28]
	str	r1, [sp, #0x18]
	lsl	r5, r5, #0x10
	ldr	r6, .L42
	lsr	r4, r4, #0x10
	orr	r4, r4, r5
	str	r4, [sp, #0x1c]
	ldr	r1, .L42+0x4
	lsl	r5, r0, #0x1
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	add	r0, r1, #0
	add	r0, r0, #0x8
	add	r0, r5, r0
	ldr	r0, [r0]
	str	r0, [sp, #0x20]
	add	r5, r5, r1
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x3
	add	r1, sp, #0x20
	ldr	r4, [r1, #0x4]
	ldr	r7, .L42+0x8
	and	r4, r4, r7
	orr	r4, r4, r0
	str	r4, [r1, #0x4]
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x13
	and	r6, r6, r4
	orr	r6, r6, r0
	str	r6, [r1, #0x4]
	mov	r0, r8
	str	r0, [sp]
	mov	r6, r9
	str	r6, [sp, #0x4]
	mov	r7, sl
	str	r7, [sp, #0x8]
	mov	r0, ip
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	str	r0, [sp, #0x10]
	ldr	r6, [sp, #0x28]
	str	r6, [sp, #0x14]
	add	r0, sp, #0x18
	bl	BlitBitmapRect4BitTo8Bit
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	0xffff
	.word	gWindows
	.word	-0x10000
.Lfe5:
	.size	 BlitBitmapRectToWindow4BitTo8Bit,.Lfe5-BlitBitmapRectToWindow4BitTo8Bit
	.align	2, 0
	.globl	CopyWindowToVram8Bit
	.type	 CopyWindowToVram8Bit,function
	.thumb_func
CopyWindowToVram8Bit:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	add	r5, r2, #0
	ldr	r6, .L52
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L52+0x4
	add	r3, r1, r0
	str	r3, [r6]
	ldr	r4, .L52+0x8
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	mul	r0, r0, r1
	lsl	r0, r0, #0x6
	strh	r0, [r4]
	cmp	r2, #0x2
	beq	.L47	@cond_branch
	cmp	r2, #0x2
	bgt	.L51	@cond_branch
	cmp	r2, #0x1
	beq	.L46	@cond_branch
	b	.L45
.L53:
	.align	2, 0
.L52:
	.word	sWindowPtr
	.word	gWindows
	.word	sWindowSize
.L51:
	cmp	r5, #0x3
	beq	.L48	@cond_branch
	b	.L45
.L46:
	ldrb	r0, [r3]
	bl	CopyBgTilemapBufferToVram
	b	.L45
.L47:
	ldrb	r0, [r3]
	ldr	r1, [r3, #0x8]
	ldrh	r2, [r4]
	ldrh	r3, [r3, #0x6]
	bl	LoadBgTiles
	b	.L45
.L48:
	ldrb	r0, [r3]
	ldr	r1, [r3, #0x8]
	ldrh	r2, [r4]
	ldrh	r3, [r3, #0x6]
	bl	LoadBgTiles
	ldr	r0, [r6]
	ldrb	r0, [r0]
	bl	CopyBgTilemapBufferToVram
.L45:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 CopyWindowToVram8Bit,.Lfe6-CopyWindowToVram8Bit
	.align	2, 0
	.type	 GetNumActiveWindowsOnBg8Bit,function
	.thumb_func
GetNumActiveWindowsOnBg8Bit:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r3, #0x0
	ldr	r2, .L61
	mov	r1, #0x1f
.L58:
	ldrb	r0, [r2]
	cmp	r0, r4
	bne	.L57	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L57:
	add	r2, r2, #0xc
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L58	@cond_branch
	add	r0, r3, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L62:
	.align	2, 0
.L61:
	.word	gWindows
.Lfe7:
	.size	 GetNumActiveWindowsOnBg8Bit,.Lfe7-GetNumActiveWindowsOnBg8Bit
.text
	.align	2, 0 @ Don't pad with nop

